
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002aff4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004734  0802b1f8  0802b1f8  0003b1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000a9c5e  0802f92c  0802f92c  0003f92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000000fc  080d958c  080d958c  000e958c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000030c  080d9688  080d9688  000e9688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080d9994  080d9994  001898c8  2**0
                  CONTENTS
  7 .ARM          00000008  080d9994  080d9994  000e9994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080d999c  080d999c  001898c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000030  080d999c  080d999c  000e999c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080d99cc  080d99cc  000e99cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000254  20000000  080d99d4  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00056f88  20000254  080d9c28  000f0254  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  200571dc  080d9c28  000f71dc  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  001898c8  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 000898c8  90000000  90000000  00100000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000e6d7d  00000000  00000000  001898f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00018f82  00000000  00000000  00270673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000042e8  00000000  00000000  002895f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003c98  00000000  00000000  0028d8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003a792  00000000  00000000  00291578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00052043  00000000  00000000  002cbd0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0013007e  00000000  00000000  0031dd4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  0044ddcb  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0001280c  00000000  00000000  0044dea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000254 	.word	0x20000254
 800021c:	00000000 	.word	0x00000000
 8000220:	0802b1dc 	.word	0x0802b1dc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000258 	.word	0x20000258
 800023c:	0802b1dc 	.word	0x0802b1dc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <HAL_TIM_PWM_PulseFinishedCallback>:
static void updateLedsType_0(int8_t activeLeds);
static void updateLedsType_1(int8_t activeLeds);
static float lerp(float A, float B, float Alpha);

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80009d8:	2100      	movs	r1, #0
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f00f ffd0 	bl	8010980 <HAL_TIM_PWM_Stop_DMA>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <WS2812_Init>:

void WS2812_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
	for (int i = 0; i < 24 * LED_NUMBER; i++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e007      	b.n	8000a04 <WS2812_Init+0x1c>
		leds[i] = BIT_0_TIME;
 80009f4:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <WS2812_Init+0x80>)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	212b      	movs	r1, #43	; 0x2b
 80009fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 24 * LED_NUMBER; i++)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3301      	adds	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000a0a:	dbf3      	blt.n	80009f4 <WS2812_Init+0xc>

	for (int i = 0; i < RESET_LEN; i++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	e009      	b.n	8000a26 <WS2812_Init+0x3e>
		leds[i + LED_NUMBER * 24] = 0;
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000a18:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <WS2812_Init+0x80>)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < RESET_LEN; i++)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	3301      	adds	r3, #1
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	2b27      	cmp	r3, #39	; 0x27
 8000a2a:	ddf2      	ble.n	8000a12 <WS2812_Init+0x2a>

	//__DSB();
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000a2c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <WS2812_Init+0x80>)
 8000a32:	2100      	movs	r1, #0
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <WS2812_Init+0x84>)
 8000a36:	f00f fd97 	bl	8010568 <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
	for (uint8_t i = 1; i <= LED_NUMBER; i++)
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	e00a      	b.n	8000a56 <WS2812_Init+0x6e>
	{
		updateLedsType_0(i);
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 f87b 	bl	8000b40 <updateLedsType_0>
		osDelay(50);
 8000a4a:	2032      	movs	r0, #50	; 0x32
 8000a4c:	f011 fb48 	bl	80120e0 <osDelay>
	for (uint8_t i = 1; i <= LED_NUMBER; i++)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	3301      	adds	r3, #1
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d9f1      	bls.n	8000a40 <WS2812_Init+0x58>
	}
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20056a24 	.word	0x20056a24
 8000a6c:	2005707c 	.word	0x2005707c

08000a70 <setLed>:

void setLed(uint8_t ledNumber, uint8_t red, uint8_t green, uint8_t blue)
{
 8000a70:	b490      	push	{r4, r7}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4604      	mov	r4, r0
 8000a78:	4608      	mov	r0, r1
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4623      	mov	r3, r4
 8000a80:	71fb      	strb	r3, [r7, #7]
 8000a82:	4603      	mov	r3, r0
 8000a84:	71bb      	strb	r3, [r7, #6]
 8000a86:	460b      	mov	r3, r1
 8000a88:	717b      	strb	r3, [r7, #5]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	713b      	strb	r3, [r7, #4]
	const uint8_t lookUpTable[8] =
 8000a8e:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <setLed+0xc8>)
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a98:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 1, 2, 4, 8, 16, 32, 64, 128 };
	uint16_t ledId = 24 * ledNumber;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	0052      	lsls	r2, r2, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < 8; i++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	e03a      	b.n	8000b26 <setLed+0xb6>
	{
		leds[ledId] = red & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000ab0:	f107 0208 	add.w	r2, r7, #8
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	79bb      	ldrb	r3, [r7, #6]
 8000abc:	4013      	ands	r3, r2
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <setLed+0x58>
 8000ac4:	2156      	movs	r1, #86	; 0x56
 8000ac6:	e000      	b.n	8000aca <setLed+0x5a>
 8000ac8:	212b      	movs	r1, #43	; 0x2b
 8000aca:	8afb      	ldrh	r3, [r7, #22]
 8000acc:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <setLed+0xcc>)
 8000ace:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		leds[ledId + 8] = green & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000ad2:	f107 0208 	add.w	r2, r7, #8
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	797b      	ldrb	r3, [r7, #5]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <setLed+0x7a>
 8000ae6:	2156      	movs	r1, #86	; 0x56
 8000ae8:	e000      	b.n	8000aec <setLed+0x7c>
 8000aea:	212b      	movs	r1, #43	; 0x2b
 8000aec:	8afb      	ldrh	r3, [r7, #22]
 8000aee:	3308      	adds	r3, #8
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <setLed+0xcc>)
 8000af2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		leds[ledId + 16] = blue & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000af6:	f107 0208 	add.w	r2, r7, #8
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	4413      	add	r3, r2
 8000afe:	781a      	ldrb	r2, [r3, #0]
 8000b00:	793b      	ldrb	r3, [r7, #4]
 8000b02:	4013      	ands	r3, r2
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <setLed+0x9e>
 8000b0a:	2156      	movs	r1, #86	; 0x56
 8000b0c:	e000      	b.n	8000b10 <setLed+0xa0>
 8000b0e:	212b      	movs	r1, #43	; 0x2b
 8000b10:	8afb      	ldrh	r3, [r7, #22]
 8000b12:	3310      	adds	r3, #16
 8000b14:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <setLed+0xcc>)
 8000b16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ledId++;
 8000b1a:	8afb      	ldrh	r3, [r7, #22]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < 8; i++)
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	3301      	adds	r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	2b07      	cmp	r3, #7
 8000b2a:	ddc1      	ble.n	8000ab0 <setLed+0x40>
	}
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc90      	pop	{r4, r7}
 8000b36:	4770      	bx	lr
 8000b38:	0802b1f8 	.word	0x0802b1f8
 8000b3c:	20056a24 	.word	0x20056a24

08000b40 <updateLedsType_0>:

// turn on leds linearly
void updateLedsType_0(int8_t activeLeds)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73fb      	strb	r3, [r7, #15]
 8000b4e:	e02b      	b.n	8000ba8 <updateLedsType_0+0x68>
	{
		if (i < activeLeds)
 8000b50:	7bfa      	ldrb	r2, [r7, #15]
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	da1d      	bge.n	8000b96 <updateLedsType_0+0x56>
		{
			if (i < 5)
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d807      	bhi.n	8000b70 <updateLedsType_0+0x30>
			{
				setLed(i, displaySetup.redLedBrightness, 0, 0);
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <updateLedsType_0+0x84>)
 8000b62:	7899      	ldrb	r1, [r3, #2]
 8000b64:	7bf8      	ldrb	r0, [r7, #15]
 8000b66:	2300      	movs	r3, #0
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f7ff ff81 	bl	8000a70 <setLed>
 8000b6e:	e018      	b.n	8000ba2 <updateLedsType_0+0x62>
			}
			else if (i < 10)
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	2b09      	cmp	r3, #9
 8000b74:	d807      	bhi.n	8000b86 <updateLedsType_0+0x46>
			{
				setLed(i, 0, displaySetup.greenLedBrightness, 0);
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <updateLedsType_0+0x84>)
 8000b78:	78da      	ldrb	r2, [r3, #3]
 8000b7a:	7bf8      	ldrb	r0, [r7, #15]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f7ff ff76 	bl	8000a70 <setLed>
 8000b84:	e00d      	b.n	8000ba2 <updateLedsType_0+0x62>
			}
			else
			{
				setLed(i, 0, 0, displaySetup.blueLedBrightness);
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <updateLedsType_0+0x84>)
 8000b88:	791b      	ldrb	r3, [r3, #4]
 8000b8a:	7bf8      	ldrb	r0, [r7, #15]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f7ff ff6e 	bl	8000a70 <setLed>
 8000b94:	e005      	b.n	8000ba2 <updateLedsType_0+0x62>
			}
		}
		else
		{
			setLed(i, 0, 0, 0);
 8000b96:	7bf8      	ldrb	r0, [r7, #15]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f7ff ff67 	bl	8000a70 <setLed>
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	2b0e      	cmp	r3, #14
 8000bac:	d9d0      	bls.n	8000b50 <updateLedsType_0+0x10>
		}

	}
	//__DSB();
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000bae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <updateLedsType_0+0x88>)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <updateLedsType_0+0x8c>)
 8000bb8:	f00f fcd6 	bl	8010568 <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000004 	.word	0x20000004
 8000bc8:	20056a24 	.word	0x20056a24
 8000bcc:	2005707c 	.word	0x2005707c

08000bd0 <updateLedsType_1>:

// turn on leds 1-10 linearly, last five turn on together
void updateLedsType_1(int8_t activeLeds)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
 8000bde:	e034      	b.n	8000c4a <updateLedsType_1+0x7a>
	{
		if (i < activeLeds)
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	da26      	bge.n	8000c38 <updateLedsType_1+0x68>
		{
			if (i < 5)
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d807      	bhi.n	8000c00 <updateLedsType_1+0x30>
			{
				setLed(i, displaySetup.redLedBrightness, 0, 0);
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <updateLedsType_1+0x98>)
 8000bf2:	7899      	ldrb	r1, [r3, #2]
 8000bf4:	7bf8      	ldrb	r0, [r7, #15]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f7ff ff39 	bl	8000a70 <setLed>
 8000bfe:	e021      	b.n	8000c44 <updateLedsType_1+0x74>
			}
			else if (i < 10)
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	2b09      	cmp	r3, #9
 8000c04:	d807      	bhi.n	8000c16 <updateLedsType_1+0x46>
			{
				setLed(i, 0, displaySetup.greenLedBrightness, 0);
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <updateLedsType_1+0x98>)
 8000c08:	78da      	ldrb	r2, [r3, #3]
 8000c0a:	7bf8      	ldrb	r0, [r7, #15]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2100      	movs	r1, #0
 8000c10:	f7ff ff2e 	bl	8000a70 <setLed>
 8000c14:	e016      	b.n	8000c44 <updateLedsType_1+0x74>
			}
			else
			{
				for (uint8_t j = i; j < LED_NUMBER; j++)
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	73bb      	strb	r3, [r7, #14]
 8000c1a:	e009      	b.n	8000c30 <updateLedsType_1+0x60>
				{
					setLed(i, 0, 0, displaySetup.blueLedBrightness);
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <updateLedsType_1+0x98>)
 8000c1e:	791b      	ldrb	r3, [r3, #4]
 8000c20:	7bf8      	ldrb	r0, [r7, #15]
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	f7ff ff23 	bl	8000a70 <setLed>
				for (uint8_t j = i; j < LED_NUMBER; j++)
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	73bb      	strb	r3, [r7, #14]
 8000c30:	7bbb      	ldrb	r3, [r7, #14]
 8000c32:	2b0e      	cmp	r3, #14
 8000c34:	d9f2      	bls.n	8000c1c <updateLedsType_1+0x4c>
 8000c36:	e005      	b.n	8000c44 <updateLedsType_1+0x74>
				}
			}
		}
		else
		{
			setLed(i, 0, 0, 0);
 8000c38:	7bf8      	ldrb	r0, [r7, #15]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f7ff ff16 	bl	8000a70 <setLed>
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	3301      	adds	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	2b0e      	cmp	r3, #14
 8000c4e:	d9c7      	bls.n	8000be0 <updateLedsType_1+0x10>
		}
	}
	//__DSB();
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000c50:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <updateLedsType_1+0x9c>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <updateLedsType_1+0xa0>)
 8000c5a:	f00f fc85 	bl	8010568 <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000004 	.word	0x20000004
 8000c6c:	20056a24 	.word	0x20056a24
 8000c70:	2005707c 	.word	0x2005707c

08000c74 <updateLeds>:

void updateLeds(int rpm, int mode)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
	uint16_t minRPM;
	uint16_t maxRPM;
	int8_t activeLeds;
	static uint8_t lastGear = 1;
	switch (mode)
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d007      	beq.n	8000c94 <updateLeds+0x20>
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db75      	blt.n	8000d76 <updateLeds+0x102>
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d871      	bhi.n	8000d76 <updateLeds+0x102>
 8000c92:	e027      	b.n	8000ce4 <updateLeds+0x70>
	{
	case 0:
		minRPM = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	82bb      	strh	r3, [r7, #20]
		maxRPM = 12000;
 8000c98:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000c9c:	827b      	strh	r3, [r7, #18]
		activeLeds =
				ceil(
						(float) (rpm - minRPM)
 8000c9e:	8abb      	ldrh	r3, [r7, #20]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	ee07 3a90 	vmov	s15, r3
 8000ca8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
								/ (float) (maxRPM - minRPM)* LED_NUMBER);
 8000cac:	8a7a      	ldrh	r2, [r7, #18]
 8000cae:	8abb      	ldrh	r3, [r7, #20]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	ee07 3a90 	vmov	s15, r3
 8000cb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cbe:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
				ceil(
 8000cc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cca:	eeb0 0b47 	vmov.f64	d0, d7
 8000cce:	f025 fd83 	bl	80267d8 <ceil>
 8000cd2:	eeb0 7b40 	vmov.f64	d7, d0
		activeLeds =
 8000cd6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cda:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cde:	793b      	ldrb	r3, [r7, #4]
 8000ce0:	75fb      	strb	r3, [r7, #23]
		break;
 8000ce2:	e048      	b.n	8000d76 <updateLeds+0x102>
	case 1:
	case 2:
#ifdef USE_OPTIMAL_SHIFT_RPM
		if (telemetryData.gear <= 6 && telemetryData.gear >= 1)
 8000ce4:	4b31      	ldr	r3, [pc, #196]	; (8000dac <updateLeds+0x138>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b06      	cmp	r3, #6
 8000cea:	d807      	bhi.n	8000cfc <updateLeds+0x88>
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <updateLeds+0x138>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <updateLeds+0x88>
		{
			lastGear = telemetryData.gear;
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <updateLeds+0x138>)
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <updateLeds+0x13c>)
 8000cfa:	701a      	strb	r2, [r3, #0]
		}

		minRPM = optimalShiftUpRPM[lastGear - 1] - 2000;
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <updateLeds+0x13c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	4a2c      	ldr	r2, [pc, #176]	; (8000db4 <updateLeds+0x140>)
 8000d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d08:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000d0c:	82bb      	strh	r3, [r7, #20]
		maxRPM = optimalShiftUpRPM[lastGear - 1];
 8000d0e:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <updateLeds+0x13c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	4a27      	ldr	r2, [pc, #156]	; (8000db4 <updateLeds+0x140>)
 8000d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d1a:	827b      	strh	r3, [r7, #18]
#else
		minRPM = 9500;
		maxRPM = 11500;
#endif
		uint8_t ledNumber = mode == 1 ? LED_NUMBER : LED_NUMBER - 4;
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d101      	bne.n	8000d26 <updateLeds+0xb2>
 8000d22:	230f      	movs	r3, #15
 8000d24:	e000      	b.n	8000d28 <updateLeds+0xb4>
 8000d26:	230b      	movs	r3, #11
 8000d28:	747b      	strb	r3, [r7, #17]
		activeLeds = ceil(
				(float) (rpm - minRPM) / (float) (maxRPM - minRPM) * ledNumber);
 8000d2a:	8abb      	ldrh	r3, [r7, #20]
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	ee07 3a90 	vmov	s15, r3
 8000d34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d38:	8a7a      	ldrh	r2, [r7, #18]
 8000d3a:	8abb      	ldrh	r3, [r7, #20]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	ee07 3a90 	vmov	s15, r3
 8000d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d4a:	7c7b      	ldrb	r3, [r7, #17]
 8000d4c:	ee07 3a90 	vmov	s15, r3
 8000d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d54:	ee67 7a27 	vmul.f32	s15, s14, s15
		activeLeds = ceil(
 8000d58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d5c:	eeb0 0b47 	vmov.f64	d0, d7
 8000d60:	f025 fd3a 	bl	80267d8 <ceil>
 8000d64:	eeb0 7b40 	vmov.f64	d7, d0
 8000d68:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d6c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000d70:	793b      	ldrb	r3, [r7, #4]
 8000d72:	75fb      	strb	r3, [r7, #23]

		break;
 8000d74:	bf00      	nop

	}

	switch (mode)
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	dc03      	bgt.n	8000d84 <updateLeds+0x110>
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	da04      	bge.n	8000d8c <updateLeds+0x118>
		break;
	case 2:
		updateLedsType_1(activeLeds);
		break;
	}
}
 8000d82:	e00f      	b.n	8000da4 <updateLeds+0x130>
	switch (mode)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d006      	beq.n	8000d98 <updateLeds+0x124>
}
 8000d8a:	e00b      	b.n	8000da4 <updateLeds+0x130>
		updateLedsType_0(activeLeds);
 8000d8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fed5 	bl	8000b40 <updateLedsType_0>
		break;
 8000d96:	e005      	b.n	8000da4 <updateLeds+0x130>
		updateLedsType_1(activeLeds);
 8000d98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff17 	bl	8000bd0 <updateLedsType_1>
		break;
 8000da2:	bf00      	nop
}
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20056d8c 	.word	0x20056d8c
 8000db0:	20000009 	.word	0x20000009
 8000db4:	20056a18 	.word	0x20056a18

08000db8 <lerp>:

float lerp(float A, float B, float Alpha)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000dc2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000dc6:	ed87 1a01 	vstr	s2, [r7, #4]
	return A + Alpha * (B - A);
 8000dca:	ed97 7a02 	vldr	s14, [r7, #8]
 8000dce:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dde:	edd7 7a03 	vldr	s15, [r7, #12]
 8000de2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000de6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <ComputeOptimalPoints>:

void ComputeOptimalPoints()
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08e      	sub	sp, #56	; 0x38
 8000df8:	af00      	add	r7, sp, #0
// Calculation based on https://glennmessersmith.com/shiftpt.html
	const uint16_t minRPM = 3000;
 8000dfa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000dfe:	84fb      	strh	r3, [r7, #38]	; 0x26
	const uint16_t maxRPM = 12000;
 8000e00:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000e04:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		optimalShiftUpRPM[i]=UpRPM;
		//OptimalGearDownRPM.Add(DownRPM);
	}
#else
	for (int i = GEAR_NUMBER - 2; i >= 0; i--)
 8000e06:	2304      	movs	r3, #4
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
 8000e0a:	e0fa      	b.n	8001002 <ComputeOptimalPoints+0x20e>
	{
		float MinTorqueLoss = MAX_ENGINE_TORQUE * GearRatios[i];
 8000e0c:	4a83      	ldr	r2, [pc, #524]	; (800101c <ComputeOptimalPoints+0x228>)
 8000e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	edd3 7a00 	vldr	s15, [r3]
 8000e18:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001020 <ComputeOptimalPoints+0x22c>
 8000e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e20:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		float CurrentGearRatio = GearRatios[i];
 8000e24:	4a7d      	ldr	r2, [pc, #500]	; (800101c <ComputeOptimalPoints+0x228>)
 8000e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	623b      	str	r3, [r7, #32]
		float NextGearRatio = GearRatios[i + 1];
 8000e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e32:	3301      	adds	r3, #1
 8000e34:	4a79      	ldr	r2, [pc, #484]	; (800101c <ComputeOptimalPoints+0x228>)
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	61fb      	str	r3, [r7, #28]
		UpRPM = maxRPM;
 8000e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e40:	86fb      	strh	r3, [r7, #54]	; 0x36
		for (int j = maxRPM; j > minRPM; j -= 50)
 8000e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e46:	e0cd      	b.n	8000fe4 <ComputeOptimalPoints+0x1f0>
		{
			float EngineTorque = lerp(torque[(j - 3000) / 1000],
 8000e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4a:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8000e4e:	4a75      	ldr	r2, [pc, #468]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000e50:	fb82 1203 	smull	r1, r2, r2, r3
 8000e54:	1192      	asrs	r2, r2, #6
 8000e56:	17db      	asrs	r3, r3, #31
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	4a73      	ldr	r2, [pc, #460]	; (8001028 <ComputeOptimalPoints+0x234>)
 8000e5c:	5cd3      	ldrb	r3, [r2, r3]
 8000e5e:	ee07 3a90 	vmov	s15, r3
 8000e62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					torque[(j - 2000) / 1000], (j % 1000) / 1000.0f);
 8000e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e68:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000e6c:	4a6d      	ldr	r2, [pc, #436]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e72:	1192      	asrs	r2, r2, #6
 8000e74:	17db      	asrs	r3, r3, #31
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	4a6b      	ldr	r2, [pc, #428]	; (8001028 <ComputeOptimalPoints+0x234>)
 8000e7a:	5cd3      	ldrb	r3, [r2, r3]
			float EngineTorque = lerp(torque[(j - 3000) / 1000],
 8000e7c:	ee07 3a90 	vmov	s15, r3
 8000e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
					torque[(j - 2000) / 1000], (j % 1000) / 1000.0f);
 8000e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e86:	4a67      	ldr	r2, [pc, #412]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000e88:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8c:	1191      	asrs	r1, r2, #6
 8000e8e:	17da      	asrs	r2, r3, #31
 8000e90:	1a8a      	subs	r2, r1, r2
 8000e92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e96:	fb01 f202 	mul.w	r2, r1, r2
 8000e9a:	1a9a      	subs	r2, r3, r2
			float EngineTorque = lerp(torque[(j - 3000) / 1000],
 8000e9c:	ee07 2a90 	vmov	s15, r2
 8000ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea4:	eddf 5a61 	vldr	s11, [pc, #388]	; 800102c <ComputeOptimalPoints+0x238>
 8000ea8:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8000eac:	eeb0 1a46 	vmov.f32	s2, s12
 8000eb0:	eef0 0a66 	vmov.f32	s1, s13
 8000eb4:	eeb0 0a47 	vmov.f32	s0, s14
 8000eb8:	f7ff ff7e 	bl	8000db8 <lerp>
 8000ebc:	ed87 0a06 	vstr	s0, [r7, #24]
			// calculate current torque on gearbox output
			float CurrentGearTorque = EngineTorque * CurrentGearRatio;
 8000ec0:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ec4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ecc:	edc7 7a05 	vstr	s15, [r7, #20]
			// calculate engine RPM on next gear
			uint16_t NextRPM = NextGearRatio * j / CurrentGearRatio;
 8000ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eda:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ede:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000ee2:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eee:	ee17 3a90 	vmov	r3, s15
 8000ef2:	827b      	strh	r3, [r7, #18]
			if (NextRPM < minRPM)
 8000ef4:	8a7a      	ldrh	r2, [r7, #18]
 8000ef6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d36f      	bcc.n	8000fdc <ComputeOptimalPoints+0x1e8>
			{
				continue;
			}
			float NextGearEngineTorque = lerp(torque[(NextRPM - 3000) / 1000],
 8000efc:	8a7b      	ldrh	r3, [r7, #18]
 8000efe:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8000f02:	4a48      	ldr	r2, [pc, #288]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000f04:	fb82 1203 	smull	r1, r2, r2, r3
 8000f08:	1192      	asrs	r2, r2, #6
 8000f0a:	17db      	asrs	r3, r3, #31
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	4a46      	ldr	r2, [pc, #280]	; (8001028 <ComputeOptimalPoints+0x234>)
 8000f10:	5cd3      	ldrb	r3, [r2, r3]
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					torque[(NextRPM - 2000) / 1000],
 8000f1a:	8a7b      	ldrh	r3, [r7, #18]
 8000f1c:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000f20:	4a40      	ldr	r2, [pc, #256]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000f22:	fb82 1203 	smull	r1, r2, r2, r3
 8000f26:	1192      	asrs	r2, r2, #6
 8000f28:	17db      	asrs	r3, r3, #31
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	4a3e      	ldr	r2, [pc, #248]	; (8001028 <ComputeOptimalPoints+0x234>)
 8000f2e:	5cd3      	ldrb	r3, [r2, r3]
			float NextGearEngineTorque = lerp(torque[(NextRPM - 3000) / 1000],
 8000f30:	ee07 3a90 	vmov	s15, r3
 8000f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
					(NextRPM % 1000) / 1000.0f);
 8000f38:	8a7b      	ldrh	r3, [r7, #18]
 8000f3a:	4a3a      	ldr	r2, [pc, #232]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000f3c:	fba2 1203 	umull	r1, r2, r2, r3
 8000f40:	0992      	lsrs	r2, r2, #6
 8000f42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f46:	fb01 f202 	mul.w	r2, r1, r2
 8000f4a:	1a9b      	subs	r3, r3, r2
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	ee07 3a90 	vmov	s15, r3
			float NextGearEngineTorque = lerp(torque[(NextRPM - 3000) / 1000],
 8000f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f56:	eddf 5a35 	vldr	s11, [pc, #212]	; 800102c <ComputeOptimalPoints+0x238>
 8000f5a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8000f5e:	eeb0 1a46 	vmov.f32	s2, s12
 8000f62:	eef0 0a66 	vmov.f32	s1, s13
 8000f66:	eeb0 0a47 	vmov.f32	s0, s14
 8000f6a:	f7ff ff25 	bl	8000db8 <lerp>
 8000f6e:	ed87 0a03 	vstr	s0, [r7, #12]
			// calculate torque on gearbox outpur on next gear
			float NextGearTorque = NextGearEngineTorque * NextGearRatio;
 8000f72:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f76:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7e:	edc7 7a02 	vstr	s15, [r7, #8]
			float deltaTorque = CurrentGearTorque - NextGearTorque;
 8000f82:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f86:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f8e:	edc7 7a01 	vstr	s15, [r7, #4]
			float absDeltaTorque =
					deltaTorque < 0.0f ? -deltaTorque : deltaTorque;
 8000f92:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d504      	bpl.n	8000faa <ComputeOptimalPoints+0x1b6>
 8000fa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa4:	eef1 7a67 	vneg.f32	s15, s15
 8000fa8:	e001      	b.n	8000fae <ComputeOptimalPoints+0x1ba>
 8000faa:	edd7 7a01 	vldr	s15, [r7, #4]
			float absDeltaTorque =
 8000fae:	edc7 7a00 	vstr	s15, [r7]
			if (absDeltaTorque < MinTorqueLoss)
 8000fb2:	ed97 7a00 	vldr	s14, [r7]
 8000fb6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc2:	d503      	bpl.n	8000fcc <ComputeOptimalPoints+0x1d8>
			{
				UpRPM = j;
 8000fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc6:	86fb      	strh	r3, [r7, #54]	; 0x36
				MinTorqueLoss = absDeltaTorque;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			if (deltaTorque > 0.0f)
 8000fcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd8:	dc0a      	bgt.n	8000ff0 <ComputeOptimalPoints+0x1fc>
 8000fda:	e000      	b.n	8000fde <ComputeOptimalPoints+0x1ea>
				continue;
 8000fdc:	bf00      	nop
		for (int j = maxRPM; j > minRPM; j -= 50)
 8000fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe0:	3b32      	subs	r3, #50	; 0x32
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f73f af2d 	bgt.w	8000e48 <ComputeOptimalPoints+0x54>
 8000fee:	e000      	b.n	8000ff2 <ComputeOptimalPoints+0x1fe>
			{
				break;
 8000ff0:	bf00      	nop
			}
		}
		optimalShiftUpRPM[i] = UpRPM;
 8000ff2:	490f      	ldr	r1, [pc, #60]	; (8001030 <ComputeOptimalPoints+0x23c>)
 8000ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ff8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = GEAR_NUMBER - 2; i >= 0; i--)
 8000ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ffe:	3b01      	subs	r3, #1
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
 8001002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001004:	2b00      	cmp	r3, #0
 8001006:	f6bf af01 	bge.w	8000e0c <ComputeOptimalPoints+0x18>
		//OptimalGearDownRPM.Add(DownRPM);
	}
#endif
	optimalShiftUpRPM[5] = 12000;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <ComputeOptimalPoints+0x23c>)
 800100c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001010:	815a      	strh	r2, [r3, #10]
}
 8001012:	bf00      	nop
 8001014:	3738      	adds	r7, #56	; 0x38
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	0802be8c 	.word	0x0802be8c
 8001020:	428c0000 	.word	0x428c0000
 8001024:	10624dd3 	.word	0x10624dd3
 8001028:	0802bea4 	.word	0x0802bea4
 800102c:	447a0000 	.word	0x447a0000
 8001030:	20056a18 	.word	0x20056a18

08001034 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_ADC1_Init+0x98>)
 8001048:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <MX_ADC1_Init+0x9c>)
 800104a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_ADC1_Init+0x98>)
 800104e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001052:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_ADC1_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_ADC1_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_ADC1_Init+0x98>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_ADC1_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_ADC1_Init+0x98>)
 8001070:	2200      	movs	r2, #0
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <MX_ADC1_Init+0x98>)
 8001076:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <MX_ADC1_Init+0xa0>)
 8001078:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_ADC1_Init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MX_ADC1_Init+0x98>)
 8001082:	2201      	movs	r2, #1
 8001084:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_ADC1_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_ADC1_Init+0x98>)
 8001090:	2201      	movs	r2, #1
 8001092:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_ADC1_Init+0x98>)
 8001096:	f009 fefd 	bl	800ae94 <HAL_ADC_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010a0:	f001 fd50 	bl	8002b44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010a4:	230b      	movs	r3, #11
 80010a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010ac:	2307      	movs	r3, #7
 80010ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b0:	463b      	mov	r3, r7
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_ADC1_Init+0x98>)
 80010b6:	f00a f897 	bl	800b1e8 <HAL_ADC_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010c0:	f001 fd40 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20056d44 	.word	0x20056d44
 80010d0:	40012000 	.word	0x40012000
 80010d4:	0f000001 	.word	0x0f000001

080010d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a15      	ldr	r2, [pc, #84]	; (800114c <HAL_ADC_MspInit+0x74>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d123      	bne.n	8001142 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_ADC_MspInit+0x78>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_ADC_MspInit+0x78>)
 8001100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_ADC_MspInit+0x78>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_ADC_MspInit+0x78>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_ADC_MspInit+0x78>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_ADC_MspInit+0x78>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800112a:	2302      	movs	r3, #2
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112e:	2303      	movs	r3, #3
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <HAL_ADC_MspInit+0x7c>)
 800113e:	f00c f8a5 	bl	800d28c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40012000 	.word	0x40012000
 8001150:	40023800 	.word	0x40023800
 8001154:	40020800 	.word	0x40020800

08001158 <FLASH_QSPI_Init>:
static uint8_t FLASH_QSPI_Configuration(void);
static uint8_t FLASH_QSPI_ResetChip(void);
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
uint8_t FLASH_QSPI_Init(void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <FLASH_QSPI_Init+0x70>)
 800115e:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <FLASH_QSPI_Init+0x74>)
 8001160:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8001162:	4819      	ldr	r0, [pc, #100]	; (80011c8 <FLASH_QSPI_Init+0x70>)
 8001164:	f00c fffa 	bl	800e15c <HAL_QSPI_DeInit>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <FLASH_QSPI_Init+0x1a>
		return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e028      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
	}

	MX_QUADSPI_Init();
 8001172:	f001 fced 	bl	8002b50 <MX_QUADSPI_Init>

	if (FLASH_QSPI_ResetChip() != HAL_OK) {
 8001176:	f000 f82b 	bl	80011d0 <FLASH_QSPI_ResetChip>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <FLASH_QSPI_Init+0x2c>
		return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e01f      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
	}

	HAL_Delay(1);
 8001184:	2001      	movs	r0, #1
 8001186:	f009 fe61 	bl	800ae4c <HAL_Delay>

	if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
 800118a:	f000 f87f 	bl	800128c <FLASH_QSPI_AutoPollingMemReady>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <FLASH_QSPI_Init+0x40>
		return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e015      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8001198:	f000 f8b0 	bl	80012fc <FLASH_QSPI_WriteEnable>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <FLASH_QSPI_Init+0x4e>

		return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
	}

	/* Sets QE bit and starts QUADSPI communication */
	if (FLASH_QSPI_Configuration() != HAL_OK) {
 80011a6:	f000 f8f3 	bl	8001390 <FLASH_QSPI_Configuration>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <FLASH_QSPI_Init+0x5c>
		return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e007      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 80011b4:	f000 f962 	bl	800147c <FLASH_QSPI_EnableMemoryMappedMode>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <FLASH_QSPI_Init+0x6a>
			return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
		}

	return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20056f98 	.word	0x20056f98
 80011cc:	a0001000 	.word	0xa0001000

080011d0 <FLASH_QSPI_ResetChip>:
	}

	return HAL_OK;
}

uint8_t FLASH_QSPI_ResetChip() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b090      	sub	sp, #64	; 0x40
 80011d4:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.Instruction = ENABLE_RESET_CMD;
 80011da:	2366      	movs	r3, #102	; 0x66
 80011dc:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80011de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e2:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80011e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e8:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80011f2:	2300      	movs	r3, #0
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80011f6:	2300      	movs	r3, #0
 80011f8:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001210:	4619      	mov	r1, r3
 8001212:	481d      	ldr	r0, [pc, #116]	; (8001288 <FLASH_QSPI_ResetChip+0xb8>)
 8001214:	f00d f980 	bl	800e518 <HAL_QSPI_Command>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <FLASH_QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e02e      	b.n	8001280 <FLASH_QSPI_ResetChip+0xb0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8001222:	2300      	movs	r3, #0
 8001224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001226:	e003      	b.n	8001230 <FLASH_QSPI_ResetChip+0x60>
		__NOP();
 8001228:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 800122a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800122c:	3301      	adds	r3, #1
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001232:	2b2e      	cmp	r3, #46	; 0x2e
 8001234:	d9f8      	bls.n	8001228 <FLASH_QSPI_ResetChip+0x58>
	}

	sCommand.Instruction = RESET_DEVICE_CMD;
 8001236:	2399      	movs	r3, #153	; 0x99
 8001238:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800123a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123e:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001244:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800124e:	2300      	movs	r3, #0
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001252:	2300      	movs	r3, #0
 8001254:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	f241 3288 	movw	r2, #5000	; 0x1388
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <FLASH_QSPI_ResetChip+0xb8>)
 8001270:	f00d f952 	bl	800e518 <HAL_QSPI_Command>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <FLASH_QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <FLASH_QSPI_ResetChip+0xb0>
	}
	return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3740      	adds	r7, #64	; 0x40
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20056f98 	.word	0x20056f98

0800128c <FLASH_QSPI_AutoPollingMemReady>:

uint8_t FLASH_QSPI_AutoPollingMemReady(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b094      	sub	sp, #80	; 0x50
 8001290:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 8001292:	2305      	movs	r3, #5
 8001294:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80012a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80012b2:	2300      	movs	r3, #0
 80012b4:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80012b6:	2300      	movs	r3, #0
 80012b8:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
	sConfig.Mask = AT25SF128A_SR_WIP;
 80012be:	2301      	movs	r3, #1
 80012c0:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 80012ca:	2310      	movs	r3, #16
 80012cc:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80012ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012d2:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 80012d4:	463a      	mov	r2, r7
 80012d6:	f107 0118 	add.w	r1, r7, #24
 80012da:	f241 3388 	movw	r3, #5000	; 0x1388
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <FLASH_QSPI_AutoPollingMemReady+0x6c>)
 80012e0:	f00d faa7 	bl	800e832 <HAL_QSPI_AutoPolling>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <FLASH_QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <FLASH_QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3750      	adds	r7, #80	; 0x50
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20056f98 	.word	0x20056f98

080012fc <FLASH_QSPI_WriteEnable>:

static uint8_t FLASH_QSPI_WriteEnable(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	; 0x50
 8001300:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.Instruction = WRITE_ENABLE_CMD;
 8001302:	2306      	movs	r3, #6
 8001304:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001310:	2300      	movs	r3, #0
 8001312:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 8001314:	2300      	movs	r3, #0
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001320:	2300      	movs	r3, #0
 8001322:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001324:	2300      	movs	r3, #0
 8001326:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001330:	4619      	mov	r1, r3
 8001332:	4816      	ldr	r0, [pc, #88]	; (800138c <FLASH_QSPI_WriteEnable+0x90>)
 8001334:	f00d f8f0 	bl	800e518 <HAL_QSPI_Command>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <FLASH_QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e01f      	b.n	8001382 <FLASH_QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8001342:	2302      	movs	r3, #2
 8001344:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 8001346:	2302      	movs	r3, #2
 8001348:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 800134e:	2301      	movs	r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8001352:	2310      	movs	r3, #16
 8001354:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800135a:	617b      	str	r3, [r7, #20]
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 800135c:	2305      	movs	r3, #5
 800135e:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001364:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8001366:	463a      	mov	r2, r7
 8001368:	f107 0118 	add.w	r1, r7, #24
 800136c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001370:	4806      	ldr	r0, [pc, #24]	; (800138c <FLASH_QSPI_WriteEnable+0x90>)
 8001372:	f00d fa5e 	bl	800e832 <HAL_QSPI_AutoPolling>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <FLASH_QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <FLASH_QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3750      	adds	r7, #80	; 0x50
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20056f98 	.word	0x20056f98

08001390 <FLASH_QSPI_Configuration>:

/*Enable quad mode and set dummy cycles count*/
uint8_t FLASH_QSPI_Configuration(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b090      	sub	sp, #64	; 0x40
 8001394:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t reg;

	/*read configuration register*/
	sCommand.Instruction = READ_STATUS_REG_MIDDLE_CMD;
 8001396:	2335      	movs	r3, #53	; 0x35
 8001398:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800139a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139e:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80013a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80013b6:	2300      	movs	r3, #0
 80013b8:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80013ba:	2300      	movs	r3, #0
 80013bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ca:	4619      	mov	r1, r3
 80013cc:	482a      	ldr	r0, [pc, #168]	; (8001478 <FLASH_QSPI_Configuration+0xe8>)
 80013ce:	f00d f8a3 	bl	800e518 <HAL_QSPI_Command>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <FLASH_QSPI_Configuration+0x4c>
			!= HAL_OK) {
		return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e049      	b.n	8001470 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Receive(&hqspi, &reg,
 80013dc:	1dfb      	adds	r3, r7, #7
 80013de:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e2:	4619      	mov	r1, r3
 80013e4:	4824      	ldr	r0, [pc, #144]	; (8001478 <FLASH_QSPI_Configuration+0xe8>)
 80013e6:	f00d f987 	bl	800e6f8 <HAL_QSPI_Receive>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <FLASH_QSPI_Configuration+0x64>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e03d      	b.n	8001470 <FLASH_QSPI_Configuration+0xe0>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 80013f4:	f7ff ff82 	bl	80012fc <FLASH_QSPI_WriteEnable>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <FLASH_QSPI_Configuration+0x72>

		return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e036      	b.n	8001470 <FLASH_QSPI_Configuration+0xe0>
	}

	/*set dummy cycles*/
	//MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
	/* Set QE bit in register to enable QUADSPI mode in at25sf128a */
	reg = reg | 0x02;
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	b2db      	uxtb	r3, r3
 800140a:	71fb      	strb	r3, [r7, #7]

	sCommand.Instruction = WRITE_STATUS_REG_MIDDLE_CMD;
 800140c:	2331      	movs	r3, #49	; 0x31
 800140e:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001414:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001416:	2300      	movs	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800141e:	2300      	movs	r3, #0
 8001420:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001422:	2300      	movs	r3, #0
 8001424:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 800142a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
 8001434:	2301      	movs	r3, #1
 8001436:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001440:	4619      	mov	r1, r3
 8001442:	480d      	ldr	r0, [pc, #52]	; (8001478 <FLASH_QSPI_Configuration+0xe8>)
 8001444:	f00d f868 	bl	800e518 <HAL_QSPI_Command>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <FLASH_QSPI_Configuration+0xc2>
			!= HAL_OK) {
		return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e00e      	b.n	8001470 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg,
 8001452:	1dfb      	adds	r3, r7, #7
 8001454:	f241 3288 	movw	r2, #5000	; 0x1388
 8001458:	4619      	mov	r1, r3
 800145a:	4807      	ldr	r0, [pc, #28]	; (8001478 <FLASH_QSPI_Configuration+0xe8>)
 800145c:	f00d f8ba 	bl	800e5d4 <HAL_QSPI_Transmit>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <FLASH_QSPI_Configuration+0xde>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8001466:	f001 fb6d 	bl	8002b44 <Error_Handler>
		return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <FLASH_QSPI_Configuration+0xe0>
	}
	return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3740      	adds	r7, #64	; 0x40
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20056f98 	.word	0x20056f98

0800147c <FLASH_QSPI_EnableMemoryMappedMode>:
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
}

uint8_t FLASH_QSPI_EnableMemoryMappedMode(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b090      	sub	sp, #64	; 0x40
 8001480:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	s_command.Instruction = QUAD_INOUT_FAST_READ_CMD;
 8001482:	23eb      	movs	r3, #235	; 0xeb
 8001484:	60bb      	str	r3, [r7, #8]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001486:	f44f 7380 	mov.w	r3, #256	; 0x100
 800148a:	623b      	str	r3, [r7, #32]
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 800148c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001490:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8001492:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
		s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
		s_command.AlternateBytes = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80014a4:	2300      	movs	r3, #0
 80014a6:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 80014ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DataMode = QSPI_DATA_4_LINES;
 80014b2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.NbData = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.Address = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
	s_command.DummyCycles = 0x4; //moze 4?
 80014c0:	2304      	movs	r3, #4
 80014c2:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &sMemMappedCfg) != HAL_OK) {
 80014c8:	463a      	mov	r2, r7
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	4619      	mov	r1, r3
 80014d0:	4806      	ldr	r0, [pc, #24]	; (80014ec <FLASH_QSPI_EnableMemoryMappedMode+0x70>)
 80014d2:	f00d fa25 	bl	800e920 <HAL_QSPI_MemoryMapped>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <FLASH_QSPI_EnableMemoryMappedMode+0x64>
		return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <FLASH_QSPI_EnableMemoryMappedMode+0x66>
	}
	return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3740      	adds	r7, #64	; 0x40
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20056f98 	.word	0x20056f98

080014f0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80014f6:	4b25      	ldr	r3, [pc, #148]	; (800158c <MX_CAN1_Init+0x9c>)
 80014f8:	4a25      	ldr	r2, [pc, #148]	; (8001590 <MX_CAN1_Init+0xa0>)
 80014fa:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <MX_CAN1_Init+0x9c>)
 80014fe:	2209      	movs	r2, #9
 8001500:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <MX_CAN1_Init+0x9c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <MX_CAN1_Init+0x9c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_CAN1_Init+0x9c>)
 8001510:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001514:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_CAN1_Init+0x9c>)
 8001518:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800151c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_CAN1_Init+0x9c>)
 8001520:	2200      	movs	r2, #0
 8001522:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_CAN1_Init+0x9c>)
 8001526:	2200      	movs	r2, #0
 8001528:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_CAN1_Init+0x9c>)
 800152c:	2200      	movs	r2, #0
 800152e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_CAN1_Init+0x9c>)
 8001532:	2201      	movs	r2, #1
 8001534:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <MX_CAN1_Init+0x9c>)
 8001538:	2200      	movs	r2, #0
 800153a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_CAN1_Init+0x9c>)
 800153e:	2200      	movs	r2, #0
 8001540:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001542:	4812      	ldr	r0, [pc, #72]	; (800158c <MX_CAN1_Init+0x9c>)
 8001544:	f00a f894 	bl	800b670 <HAL_CAN_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800154e:	f001 faf9 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001552:	2301      	movs	r3, #1
 8001554:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 8; // which filter bank to use from the assigned ones
 8001556:	2308      	movs	r3, #8
 8001558:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001572:	2301      	movs	r3, #1
 8001574:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 8001576:	230a      	movs	r3, #10
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800157a:	463b      	mov	r3, r7
 800157c:	4619      	mov	r1, r3
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <MX_CAN1_Init+0x9c>)
 8001580:	f00a f972 	bl	800b868 <HAL_CAN_ConfigFilter>
	//HAL_CAN_Start(&hcan1);

  /* USER CODE END CAN1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3728      	adds	r7, #40	; 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20056e04 	.word	0x20056e04
 8001590:	40006400 	.word	0x40006400

08001594 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <MX_CAN2_Init+0xa0>)
 800159c:	4a26      	ldr	r2, [pc, #152]	; (8001638 <MX_CAN2_Init+0xa4>)
 800159e:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 80015a0:	4b24      	ldr	r3, [pc, #144]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015a2:	2209      	movs	r2, #9
 80015a4:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015b2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015ba:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015c2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015d8:	2201      	movs	r2, #1
 80015da:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80015e8:	4812      	ldr	r0, [pc, #72]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015ea:	f00a f841 	bl	800b670 <HAL_CAN_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_CAN2_Init+0x64>
  {
    Error_Handler();
 80015f4:	f001 faa6 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80015f8:	2301      	movs	r3, #1
 80015fa:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18; // which filter bank to use from the assigned ones
 80015fc:	2312      	movs	r3, #18
 80015fe:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001618:	2301      	movs	r3, #1
 800161a:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 800161c:	230a      	movs	r3, #10
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8001620:	463b      	mov	r3, r7
 8001622:	4619      	mov	r1, r3
 8001624:	4803      	ldr	r0, [pc, #12]	; (8001634 <MX_CAN2_Init+0xa0>)
 8001626:	f00a f91f 	bl	800b868 <HAL_CAN_ConfigFilter>

	//HAL_CAN_Start(&hcan2);

  /* USER CODE END CAN2_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20056d9c 	.word	0x20056d9c
 8001638:	40006800 	.word	0x40006800

0800163c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08e      	sub	sp, #56	; 0x38
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a4c      	ldr	r2, [pc, #304]	; (800178c <HAL_CAN_MspInit+0x150>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d13a      	bne.n	80016d4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800165e:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <HAL_CAN_MspInit+0x154>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	4a4a      	ldr	r2, [pc, #296]	; (8001790 <HAL_CAN_MspInit+0x154>)
 8001666:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001668:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_CAN_MspInit+0x154>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d10b      	bne.n	8001688 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001670:	4b48      	ldr	r3, [pc, #288]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	4a47      	ldr	r2, [pc, #284]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001676:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800167a:	6413      	str	r3, [r2, #64]	; 0x40
 800167c:	4b45      	ldr	r3, [pc, #276]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	623b      	str	r3, [r7, #32]
 8001686:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b42      	ldr	r3, [pc, #264]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	4a41      	ldr	r2, [pc, #260]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6313      	str	r3, [r2, #48]	; 0x30
 8001694:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	61fb      	str	r3, [r7, #28]
 800169e:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016b2:	2309      	movs	r3, #9
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ba:	4619      	mov	r1, r3
 80016bc:	4836      	ldr	r0, [pc, #216]	; (8001798 <HAL_CAN_MspInit+0x15c>)
 80016be:	f00b fde5 	bl	800d28c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2103      	movs	r1, #3
 80016c6:	2014      	movs	r0, #20
 80016c8:	f00a ff1c 	bl	800c504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80016cc:	2014      	movs	r0, #20
 80016ce:	f00a ff35 	bl	800c53c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80016d2:	e056      	b.n	8001782 <HAL_CAN_MspInit+0x146>
  else if(canHandle->Instance==CAN2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a30      	ldr	r2, [pc, #192]	; (800179c <HAL_CAN_MspInit+0x160>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d151      	bne.n	8001782 <HAL_CAN_MspInit+0x146>
    __HAL_RCC_CAN3_CLK_ENABLE();
 80016de:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <HAL_CAN_MspInit+0x158>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a2c      	ldr	r2, [pc, #176]	; (8001794 <HAL_CAN_MspInit+0x158>)
 80016e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <HAL_CAN_MspInit+0x158>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 80016f6:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_CAN_MspInit+0x158>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a26      	ldr	r2, [pc, #152]	; (8001794 <HAL_CAN_MspInit+0x158>)
 80016fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_CAN_MspInit+0x154>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <HAL_CAN_MspInit+0x154>)
 8001716:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_CAN_MspInit+0x154>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d10b      	bne.n	8001738 <HAL_CAN_MspInit+0xfc>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001720:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	4a1b      	ldr	r2, [pc, #108]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001726:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800172a:	6413      	str	r3, [r2, #64]	; 0x40
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	4a15      	ldr	r2, [pc, #84]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800173e:	f043 0302 	orr.w	r3, r3, #2
 8001742:	6313      	str	r3, [r2, #48]	; 0x30
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001750:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001762:	2309      	movs	r3, #9
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176a:	4619      	mov	r1, r3
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <HAL_CAN_MspInit+0x164>)
 800176e:	f00b fd8d 	bl	800d28c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 3, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2103      	movs	r1, #3
 8001776:	2040      	movs	r0, #64	; 0x40
 8001778:	f00a fec4 	bl	800c504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800177c:	2040      	movs	r0, #64	; 0x40
 800177e:	f00a fedd 	bl	800c53c <HAL_NVIC_EnableIRQ>
}
 8001782:	bf00      	nop
 8001784:	3738      	adds	r7, #56	; 0x38
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40006400 	.word	0x40006400
 8001790:	20000270 	.word	0x20000270
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	40006800 	.word	0x40006800
 80017a0:	40020400 	.word	0x40020400

080017a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b091      	sub	sp, #68	; 0x44
 80017a8:	af04      	add	r7, sp, #16
 80017aa:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	f107 0214 	add.w	r2, r7, #20
 80017b4:	2100      	movs	r1, #0
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f00a fa61 	bl	800bc7e <HAL_CAN_GetRxMessage>
	if (hcan->Instance == CAN1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a12      	ldr	r2, [pc, #72]	; (800180c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d10f      	bne.n	80017e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
	{
		//ComputeEcumasterFrame(RxHeader, RxData);
		ComputeInternalFrame(RxHeader, RxData);
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	9303      	str	r3, [sp, #12]
 80017cc:	466c      	mov	r4, sp
 80017ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e0:	f000 f982 	bl	8001ae8 <ComputeInternalFrame>
	else
	{
		//ComputeInternalFrame(RxHeader, RxData);
		ComputeEcumasterFrame(RxHeader, RxData);
	}
}
 80017e4:	e00e      	b.n	8001804 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		ComputeEcumasterFrame(RxHeader, RxData);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	9303      	str	r3, [sp, #12]
 80017ec:	466c      	mov	r4, sp
 80017ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001800:	f000 f806 	bl	8001810 <ComputeEcumasterFrame>
}
 8001804:	bf00      	nop
 8001806:	3734      	adds	r7, #52	; 0x34
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}
 800180c:	40006400 	.word	0x40006400

08001810 <ComputeEcumasterFrame>:

void ComputeEcumasterFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData)
{
 8001810:	b084      	sub	sp, #16
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	f107 0c20 	add.w	ip, r7, #32
 800181c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch (RxHeader.StdId)
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001826:	f000 8123 	beq.w	8001a70 <ComputeEcumasterFrame+0x260>
 800182a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800182e:	f0c0 8133 	bcc.w	8001a98 <ComputeEcumasterFrame+0x288>
 8001832:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8001836:	f080 812f 	bcs.w	8001a98 <ComputeEcumasterFrame+0x288>
 800183a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800183e:	f0c0 812b 	bcc.w	8001a98 <ComputeEcumasterFrame+0x288>
 8001842:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8001846:	2b07      	cmp	r3, #7
 8001848:	f200 8126 	bhi.w	8001a98 <ComputeEcumasterFrame+0x288>
 800184c:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <ComputeEcumasterFrame+0x44>)
 800184e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001852:	bf00      	nop
 8001854:	08001875 	.word	0x08001875
 8001858:	080018b9 	.word	0x080018b9
 800185c:	0800193f 	.word	0x0800193f
 8001860:	08001985 	.word	0x08001985
 8001864:	080019cd 	.word	0x080019cd
 8001868:	08001a21 	.word	0x08001a21
 800186c:	08001ab7 	.word	0x08001ab7
 8001870:	08001ab7 	.word	0x08001ab7
	{
	case Frame1:
		EcuData.rpm = LittleToBigEndian(&RxData[0]);
 8001874:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001876:	f000 f95f 	bl	8001b38 <LittleToBigEndian>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	4b93      	ldr	r3, [pc, #588]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 8001880:	801a      	strh	r2, [r3, #0]
		EcuData.tps = RxData[2];
 8001882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001884:	789a      	ldrb	r2, [r3, #2]
 8001886:	4b91      	ldr	r3, [pc, #580]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 8001888:	709a      	strb	r2, [r3, #2]
		EcuData.iat = RxData[3];
 800188a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800188c:	78da      	ldrb	r2, [r3, #3]
 800188e:	4b8f      	ldr	r3, [pc, #572]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 8001890:	70da      	strb	r2, [r3, #3]
		EcuData.map = LittleToBigEndian(&RxData[4]);
 8001892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001894:	3304      	adds	r3, #4
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f94e 	bl	8001b38 <LittleToBigEndian>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	4b8a      	ldr	r3, [pc, #552]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 80018a2:	809a      	strh	r2, [r3, #4]
		EcuData.injPW = LittleToBigEndian(&RxData[6]);
 80018a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a6:	3306      	adds	r3, #6
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 f945 	bl	8001b38 <LittleToBigEndian>
 80018ae:	4603      	mov	r3, r0
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b86      	ldr	r3, [pc, #536]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 80018b4:	80da      	strh	r2, [r3, #6]
		break;
 80018b6:	e101      	b.n	8001abc <ComputeEcumasterFrame+0x2ac>
	case Frame2:
		EcuData.ain1 = LittleToBigEndian(&RxData[0]) * 0.0048828125f;
 80018b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018ba:	f000 f93d 	bl	8001b38 <LittleToBigEndian>
 80018be:	4603      	mov	r3, r0
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c8:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001ad0 <ComputeEcumasterFrame+0x2c0>
 80018cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d0:	4b7e      	ldr	r3, [pc, #504]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 80018d2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		EcuData.ain2 = LittleToBigEndian(&RxData[2]) * 0.0048828125f;
 80018d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d8:	3302      	adds	r3, #2
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f92c 	bl	8001b38 <LittleToBigEndian>
 80018e0:	4603      	mov	r3, r0
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ea:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001ad0 <ComputeEcumasterFrame+0x2c0>
 80018ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f2:	4b76      	ldr	r3, [pc, #472]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 80018f4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		EcuData.ain3 = LittleToBigEndian(&RxData[4]) * 0.0048828125f;
 80018f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fa:	3304      	adds	r3, #4
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f91b 	bl	8001b38 <LittleToBigEndian>
 8001902:	4603      	mov	r3, r0
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001ad0 <ComputeEcumasterFrame+0x2c0>
 8001910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001914:	4b6d      	ldr	r3, [pc, #436]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 8001916:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		EcuData.ain4 = LittleToBigEndian(&RxData[6]) * 0.0048828125f;
 800191a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191c:	3306      	adds	r3, #6
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f90a 	bl	8001b38 <LittleToBigEndian>
 8001924:	4603      	mov	r3, r0
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001ad0 <ComputeEcumasterFrame+0x2c0>
 8001932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001936:	4b65      	ldr	r3, [pc, #404]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 8001938:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		break;
 800193c:	e0be      	b.n	8001abc <ComputeEcumasterFrame+0x2ac>
	case Frame3:
		EcuData.speed = LittleToBigEndian(&RxData[0]);
 800193e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001940:	f000 f8fa 	bl	8001b38 <LittleToBigEndian>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	4b60      	ldr	r3, [pc, #384]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 800194a:	811a      	strh	r2, [r3, #8]
		EcuData.oilTemp = RxData[3];
 800194c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800194e:	78da      	ldrb	r2, [r3, #3]
 8001950:	4b5e      	ldr	r3, [pc, #376]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 8001952:	72da      	strb	r2, [r3, #11]
		EcuData.oilPress = RxData[4] * 0.0625f;
 8001954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001956:	3304      	adds	r3, #4
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001962:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8001ad4 <ComputeEcumasterFrame+0x2c4>
 8001966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196a:	4b58      	ldr	r3, [pc, #352]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 800196c:	edc3 7a03 	vstr	s15, [r3, #12]
		EcuData.clt = LittleToBigEndian(&RxData[6]);
 8001970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001972:	3306      	adds	r3, #6
 8001974:	4618      	mov	r0, r3
 8001976:	f000 f8df 	bl	8001b38 <LittleToBigEndian>
 800197a:	4603      	mov	r3, r0
 800197c:	b21a      	sxth	r2, r3
 800197e:	4b53      	ldr	r3, [pc, #332]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 8001980:	821a      	strh	r2, [r3, #16]
		break;
 8001982:	e09b      	b.n	8001abc <ComputeEcumasterFrame+0x2ac>
	case Frame4:
		EcuData.ignAngle = RxData[0];
 8001984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b25a      	sxtb	r2, r3
 800198a:	4b50      	ldr	r3, [pc, #320]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 800198c:	749a      	strb	r2, [r3, #18]
		EcuData.ignDwell = RxData[1];
 800198e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001990:	785a      	ldrb	r2, [r3, #1]
 8001992:	4b4e      	ldr	r3, [pc, #312]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 8001994:	74da      	strb	r2, [r3, #19]
		EcuData.lambda = RxData[2];
 8001996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001998:	789a      	ldrb	r2, [r3, #2]
 800199a:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 800199c:	751a      	strb	r2, [r3, #20]
		EcuData.lambdaCorrection = RxData[3];
 800199e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a0:	78da      	ldrb	r2, [r3, #3]
 80019a2:	4b4a      	ldr	r3, [pc, #296]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 80019a4:	755a      	strb	r2, [r3, #21]
		EcuData.egt1 = LittleToBigEndian(&RxData[4]);
 80019a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a8:	3304      	adds	r3, #4
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f8c4 	bl	8001b38 <LittleToBigEndian>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b45      	ldr	r3, [pc, #276]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 80019b6:	82da      	strh	r2, [r3, #22]
		EcuData.egt2 = LittleToBigEndian(&RxData[6]);
 80019b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ba:	3306      	adds	r3, #6
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 f8bb 	bl	8001b38 <LittleToBigEndian>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b41      	ldr	r3, [pc, #260]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 80019c8:	831a      	strh	r2, [r3, #24]
		break;
 80019ca:	e077      	b.n	8001abc <ComputeEcumasterFrame+0x2ac>
	case Frame5:
		EcuData.gear = RxData[0];
 80019cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b3e      	ldr	r3, [pc, #248]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 80019d2:	769a      	strb	r2, [r3, #26]
		EcuData.ecuTemp = RxData[1];
 80019d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d6:	3301      	adds	r3, #1
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b25a      	sxtb	r2, r3
 80019dc:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 80019de:	76da      	strb	r2, [r3, #27]
		EcuData.batt = LittleToBigEndian(&RxData[2]) * 0.027f;
 80019e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019e2:	3302      	adds	r3, #2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f8a7 	bl	8001b38 <LittleToBigEndian>
 80019ea:	4603      	mov	r3, r0
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001ad8 <ComputeEcumasterFrame+0x2c8>
 80019f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fc:	4b33      	ldr	r3, [pc, #204]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 80019fe:	edc3 7a07 	vstr	s15, [r3, #28]
		EcuData.errflag = LittleToBigEndian(&RxData[5]);
 8001a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a04:	3305      	adds	r3, #5
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f896 	bl	8001b38 <LittleToBigEndian>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 8001a12:	841a      	strh	r2, [r3, #32]
		EcuData.flags1 = RxData[7];
 8001a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a16:	79da      	ldrb	r2, [r3, #7]
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 8001a1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 8001a1e:	e04d      	b.n	8001abc <ComputeEcumasterFrame+0x2ac>
	case Frame6:
		EcuData.DBWPosition = RxData[0];
 8001a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a22:	781a      	ldrb	r2, [r3, #0]
 8001a24:	4b29      	ldr	r3, [pc, #164]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 8001a26:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		EcuData.DBWTrigger = RxData[1];
 8001a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a2c:	785a      	ldrb	r2, [r3, #1]
 8001a2e:	4b27      	ldr	r3, [pc, #156]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 8001a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
 8001a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a36:	3302      	adds	r3, #2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 f87d 	bl	8001b38 <LittleToBigEndian>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b22      	ldr	r3, [pc, #136]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 8001a44:	84da      	strh	r2, [r3, #38]	; 0x26
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
 8001a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a48:	3304      	adds	r3, #4
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f874 	bl	8001b38 <LittleToBigEndian>
 8001a50:	4603      	mov	r3, r0
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 8001a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		EcuData.TCTorqueReduction = RxData[6];
 8001a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a5c:	799a      	ldrb	r2, [r3, #6]
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 8001a60:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		EcuData.PitLimitTorqueReduction = RxData[7];
 8001a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a66:	79da      	ldrb	r2, [r3, #7]
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <ComputeEcumasterFrame+0x2bc>)
 8001a6a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		break;
 8001a6e:	e025      	b.n	8001abc <ComputeEcumasterFrame+0x2ac>
	case Frame7:
		break;
	case Frame8:
		break;
	case 768:
		telemetryData.gear = RxData[1];
 8001a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a72:	785a      	ldrb	r2, [r3, #1]
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <ComputeEcumasterFrame+0x2cc>)
 8001a76:	701a      	strb	r2, [r3, #0]
		if (telemetryData.gear == 0)
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <ComputeEcumasterFrame+0x2cc>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d103      	bne.n	8001a88 <ComputeEcumasterFrame+0x278>
		{
			telemetryData.gear = 1;
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <ComputeEcumasterFrame+0x2cc>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
		else if (telemetryData.gear == 1)
		{
			telemetryData.gear = 0;
		}

		break;
 8001a86:	e018      	b.n	8001aba <ComputeEcumasterFrame+0x2aa>
		else if (telemetryData.gear == 1)
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <ComputeEcumasterFrame+0x2cc>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d114      	bne.n	8001aba <ComputeEcumasterFrame+0x2aa>
			telemetryData.gear = 0;
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <ComputeEcumasterFrame+0x2cc>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
		break;
 8001a96:	e010      	b.n	8001aba <ComputeEcumasterFrame+0x2aa>
	default:
		;
// forward frame to internal can
		CAN_TxHeaderTypeDef TxHeader;
		TxHeader.DLC = RxHeader.DLC;
 8001a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9a:	613b      	str	r3, [r7, #16]
		TxHeader.IDE = RxHeader.IDE;
 8001a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9e:	60bb      	str	r3, [r7, #8]
		TxHeader.RTR = RxHeader.RTR;
 8001aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa2:	60fb      	str	r3, [r7, #12]
		TxHeader.StdId = RxHeader.StdId;
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	603b      	str	r3, [r7, #0]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, RxData, &TxMailbox);
 8001aa8:	4639      	mov	r1, r7
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <ComputeEcumasterFrame+0x2d0>)
 8001aac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001aae:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001ab0:	f00a f80a 	bl	800bac8 <HAL_CAN_AddTxMessage>
	}
}
 8001ab4:	e002      	b.n	8001abc <ComputeEcumasterFrame+0x2ac>
		break;
 8001ab6:	bf00      	nop
 8001ab8:	e000      	b.n	8001abc <ComputeEcumasterFrame+0x2ac>
		break;
 8001aba:	bf00      	nop
}
 8001abc:	bf00      	nop
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ac6:	b004      	add	sp, #16
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20056dc4 	.word	0x20056dc4
 8001ad0:	3ba00000 	.word	0x3ba00000
 8001ad4:	3d800000 	.word	0x3d800000
 8001ad8:	3cdd2f1b 	.word	0x3cdd2f1b
 8001adc:	20056d8c 	.word	0x20056d8c
 8001ae0:	20056e00 	.word	0x20056e00
 8001ae4:	20056e04 	.word	0x20056e04

08001ae8 <ComputeInternalFrame>:

void ComputeInternalFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData)
{
 8001ae8:	b084      	sub	sp, #16
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	f107 0c08 	add.w	ip, r7, #8
 8001af2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (RxHeader.StdId == 0x520)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f5b3 6fa4 	cmp.w	r3, #1312	; 0x520
 8001afc:	d107      	bne.n	8001b0e <ComputeInternalFrame+0x26>
	{
		telemetryData.isIntercomActive = RxData[0] & 1;
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <ComputeInternalFrame+0x4c>)
 8001b0a:	721a      	strb	r2, [r3, #8]
	else if (RxHeader.StdId == 0x500)
	{
		telemetryData.steeringWheelAttached = 1;
		telemetryData.steeringWheelAttachedTimestamp = HAL_GetTick();
	}
}
 8001b0c:	e00b      	b.n	8001b26 <ComputeInternalFrame+0x3e>
	else if (RxHeader.StdId == 0x500)
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b14:	d107      	bne.n	8001b26 <ComputeInternalFrame+0x3e>
		telemetryData.steeringWheelAttached = 1;
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <ComputeInternalFrame+0x4c>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	705a      	strb	r2, [r3, #1]
		telemetryData.steeringWheelAttachedTimestamp = HAL_GetTick();
 8001b1c:	f009 f98a 	bl	800ae34 <HAL_GetTick>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <ComputeInternalFrame+0x4c>)
 8001b24:	6053      	str	r3, [r2, #4]
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b2e:	b004      	add	sp, #16
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20056d8c 	.word	0x20056d8c

08001b38 <LittleToBigEndian>:

uint16_t LittleToBigEndian(uint8_t *data)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	uint16_t returnData = data[0] + data[1] * 0xFF;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	4619      	mov	r1, r3
 8001b50:	0209      	lsls	r1, r1, #8
 8001b52:	1acb      	subs	r3, r1, r3
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	81fb      	strh	r3, [r7, #14]
	return returnData;
 8001b5a:	89fb      	ldrh	r3, [r7, #14]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <MX_CRC_Init+0x3c>)
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <MX_CRC_Init+0x40>)
 8001b70:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_CRC_Init+0x3c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <MX_CRC_Init+0x3c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_CRC_Init+0x3c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001b84:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <MX_CRC_Init+0x3c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_CRC_Init+0x3c>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001b90:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <MX_CRC_Init+0x3c>)
 8001b92:	f00a fcef 	bl	800c574 <HAL_CRC_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001b9c:	f000 ffd2 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20056e2c 	.word	0x20056e2c
 8001ba8:	40023000 	.word	0x40023000

08001bac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <HAL_CRC_MspInit+0x38>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d10b      	bne.n	8001bd6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_CRC_MspInit+0x3c>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a09      	ldr	r2, [pc, #36]	; (8001be8 <HAL_CRC_MspInit+0x3c>)
 8001bc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_CRC_MspInit+0x3c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40023000 	.word	0x40023000
 8001be8:	40023800 	.word	0x40023800

08001bec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <MX_DMA_Init+0x48>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <MX_DMA_Init+0x48>)
 8001bf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <MX_DMA_Init+0x48>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2103      	movs	r1, #3
 8001c0e:	200b      	movs	r0, #11
 8001c10:	f00a fc78 	bl	800c504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c14:	200b      	movs	r0, #11
 8001c16:	f00a fc91 	bl	800c53c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2103      	movs	r1, #3
 8001c1e:	200f      	movs	r0, #15
 8001c20:	f00a fc70 	bl	800c504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001c24:	200f      	movs	r0, #15
 8001c26:	f00a fc89 	bl	800c53c <HAL_NVIC_EnableIRQ>

}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800

08001c38 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <MX_DMA2D_Init+0x68>)
 8001c3e:	4a19      	ldr	r2, [pc, #100]	; (8001ca4 <MX_DMA2D_Init+0x6c>)
 8001c40:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <MX_DMA2D_Init+0x68>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <MX_DMA2D_Init+0x68>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <MX_DMA2D_Init+0x68>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <MX_DMA2D_Init+0x68>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <MX_DMA2D_Init+0x68>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <MX_DMA2D_Init+0x68>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_DMA2D_Init+0x68>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_DMA2D_Init+0x68>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <MX_DMA2D_Init+0x68>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001c78:	4809      	ldr	r0, [pc, #36]	; (8001ca0 <MX_DMA2D_Init+0x68>)
 8001c7a:	f00b f8ff 	bl	800ce7c <HAL_DMA2D_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8001c84:	f000 ff5e 	bl	8002b44 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_DMA2D_Init+0x68>)
 8001c8c:	f00b fa60 	bl	800d150 <HAL_DMA2D_ConfigLayer>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8001c96:	f000 ff55 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20056e50 	.word	0x20056e50
 8001ca4:	4002b000 	.word	0x4002b000

08001ca8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <HAL_DMA2D_MspInit+0x44>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d113      	bne.n	8001ce2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <HAL_DMA2D_MspInit+0x48>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a0c      	ldr	r2, [pc, #48]	; (8001cf0 <HAL_DMA2D_MspInit+0x48>)
 8001cc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_DMA2D_MspInit+0x48>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2103      	movs	r1, #3
 8001cd6:	205a      	movs	r0, #90	; 0x5a
 8001cd8:	f00a fc14 	bl	800c504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001cdc:	205a      	movs	r0, #90	; 0x5a
 8001cde:	f00a fc2d 	bl	800c53c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	4002b000 	.word	0x4002b000
 8001cf0:	40023800 	.word	0x40023800

08001cf4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
 8001d08:	615a      	str	r2, [r3, #20]
 8001d0a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001d0c:	4b4a      	ldr	r3, [pc, #296]	; (8001e38 <MX_FMC_Init+0x144>)
 8001d0e:	4a4b      	ldr	r2, [pc, #300]	; (8001e3c <MX_FMC_Init+0x148>)
 8001d10:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001d12:	4b49      	ldr	r3, [pc, #292]	; (8001e38 <MX_FMC_Init+0x144>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001d18:	4b47      	ldr	r3, [pc, #284]	; (8001e38 <MX_FMC_Init+0x144>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8001d1e:	4b46      	ldr	r3, [pc, #280]	; (8001e38 <MX_FMC_Init+0x144>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001d24:	4b44      	ldr	r3, [pc, #272]	; (8001e38 <MX_FMC_Init+0x144>)
 8001d26:	2210      	movs	r2, #16
 8001d28:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8001d2a:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <MX_FMC_Init+0x144>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001d30:	4b41      	ldr	r3, [pc, #260]	; (8001e38 <MX_FMC_Init+0x144>)
 8001d32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d36:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001d38:	4b3f      	ldr	r3, [pc, #252]	; (8001e38 <MX_FMC_Init+0x144>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001d3e:	4b3e      	ldr	r3, [pc, #248]	; (8001e38 <MX_FMC_Init+0x144>)
 8001d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d44:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001d46:	4b3c      	ldr	r3, [pc, #240]	; (8001e38 <MX_FMC_Init+0x144>)
 8001d48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001d4e:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <MX_FMC_Init+0x144>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001d54:	2302      	movs	r3, #2
 8001d56:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001d58:	2307      	movs	r3, #7
 8001d5a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8001d60:	2306      	movs	r3, #6
 8001d62:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001d64:	2303      	movs	r3, #3
 8001d66:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	4619      	mov	r1, r3
 8001d74:	4830      	ldr	r0, [pc, #192]	; (8001e38 <MX_FMC_Init+0x144>)
 8001d76:	f00e f94d 	bl	8010014 <HAL_SDRAM_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001d80:	f000 fee0 	bl	8002b44 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	static FMC_SDRAM_CommandTypeDef command;
	__IO uint32_t
	tmp = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	603b      	str	r3, [r7, #0]

	//Krok 1: Konfiguracja zegarow
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001d8e:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001d90:	2210      	movs	r2, #16
 8001d92:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001d94:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001d9a:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	4926      	ldr	r1, [pc, #152]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001da6:	4824      	ldr	r0, [pc, #144]	; (8001e38 <MX_FMC_Init+0x144>)
 8001da8:	f00e f968 	bl	801007c <HAL_SDRAM_SendCommand>
	//Krok 2: Opoznienie 100us minimum, wyslane 1ms Systick
	HAL_Delay(1);
 8001dac:	2001      	movs	r0, #1
 8001dae:	f009 f84d 	bl	800ae4c <HAL_Delay>
	//Krok 3: Konfiguracja PALL (precharge all)
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8001db2:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001db4:	2202      	movs	r2, #2
 8001db6:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001db8:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001dba:	2210      	movs	r2, #16
 8001dbc:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001dca:	f04f 32ff 	mov.w	r2, #4294967295
 8001dce:	491c      	ldr	r1, [pc, #112]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001dd0:	4819      	ldr	r0, [pc, #100]	; (8001e38 <MX_FMC_Init+0x144>)
 8001dd2:	f00e f953 	bl	801007c <HAL_SDRAM_SendCommand>
	//Krok 4: Komenda Auto Refresh
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001dd8:	2203      	movs	r2, #3
 8001dda:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001dde:	2210      	movs	r2, #16
 8001de0:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001de4:	2208      	movs	r2, #8
 8001de6:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001dee:	f04f 32ff 	mov.w	r2, #4294967295
 8001df2:	4913      	ldr	r1, [pc, #76]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001df4:	4810      	ldr	r0, [pc, #64]	; (8001e38 <MX_FMC_Init+0x144>)
 8001df6:	f00e f941 	bl	801007c <HAL_SDRAM_SendCommand>
	//Krok 5: Programowanie trybu dla zewnetrznej pamieci
	tmp = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 8001dfa:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001dfe:	603b      	str	r3, [r7, #0]
			| SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
			| SDRAM_MODEREG_OPERATING_MODE_STANDARD
			| SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001e02:	2204      	movs	r2, #4
 8001e04:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001e08:	2210      	movs	r2, #16
 8001e0a:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmp;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001e16:	60d3      	str	r3, [r2, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	4908      	ldr	r1, [pc, #32]	; (8001e40 <MX_FMC_Init+0x14c>)
 8001e1e:	4806      	ldr	r0, [pc, #24]	; (8001e38 <MX_FMC_Init+0x144>)
 8001e20:	f00e f92c 	bl	801007c <HAL_SDRAM_SendCommand>
	//Krok 6: Ustawienie licznika odswiezania
	//15.62us*freq -20
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1660);
 8001e24:	f240 617c 	movw	r1, #1660	; 0x67c
 8001e28:	4803      	ldr	r0, [pc, #12]	; (8001e38 <MX_FMC_Init+0x144>)
 8001e2a:	f00e f952 	bl	80100d2 <HAL_SDRAM_ProgramRefreshRate>
	//HAL_SDRAM_ProgramRefreshRate(&hsdram1, 760);

  /* USER CODE END FMC_Init 2 */
}
 8001e2e:	bf00      	nop
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20056ea8 	.word	0x20056ea8
 8001e3c:	a0000140 	.word	0xa0000140
 8001e40:	20000278 	.word	0x20000278

08001e44 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001e58:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <HAL_FMC_MspInit+0x100>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d16d      	bne.n	8001f3c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001e60:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_FMC_MspInit+0x100>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e66:	4b38      	ldr	r3, [pc, #224]	; (8001f48 <HAL_FMC_MspInit+0x104>)
 8001e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6a:	4a37      	ldr	r2, [pc, #220]	; (8001f48 <HAL_FMC_MspInit+0x104>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6393      	str	r3, [r2, #56]	; 0x38
 8001e72:	4b35      	ldr	r3, [pc, #212]	; (8001f48 <HAL_FMC_MspInit+0x104>)
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e7e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001e82:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e90:	230c      	movs	r3, #12
 8001e92:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	4619      	mov	r1, r3
 8001e98:	482c      	ldr	r0, [pc, #176]	; (8001f4c <HAL_FMC_MspInit+0x108>)
 8001e9a:	f00b f9f7 	bl	800d28c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e9e:	230c      	movs	r3, #12
 8001ea0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eae:	230c      	movs	r3, #12
 8001eb0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4826      	ldr	r0, [pc, #152]	; (8001f50 <HAL_FMC_MspInit+0x10c>)
 8001eb8:	f00b f9e8 	bl	800d28c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ecc:	230c      	movs	r3, #12
 8001ece:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	481f      	ldr	r0, [pc, #124]	; (8001f54 <HAL_FMC_MspInit+0x110>)
 8001ed6:	f00b f9d9 	bl	800d28c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8001eda:	f248 1311 	movw	r3, #33041	; 0x8111
 8001ede:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eec:	230c      	movs	r3, #12
 8001eee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4818      	ldr	r0, [pc, #96]	; (8001f58 <HAL_FMC_MspInit+0x114>)
 8001ef6:	f00b f9c9 	bl	800d28c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001efa:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001efe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f0c:	230c      	movs	r3, #12
 8001f0e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	4619      	mov	r1, r3
 8001f14:	4811      	ldr	r0, [pc, #68]	; (8001f5c <HAL_FMC_MspInit+0x118>)
 8001f16:	f00b f9b9 	bl	800d28c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001f1a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001f1e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	4619      	mov	r1, r3
 8001f34:	480a      	ldr	r0, [pc, #40]	; (8001f60 <HAL_FMC_MspInit+0x11c>)
 8001f36:	f00b f9a9 	bl	800d28c <HAL_GPIO_Init>
 8001f3a:	e000      	b.n	8001f3e <HAL_FMC_MspInit+0xfa>
    return;
 8001f3c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000274 	.word	0x20000274
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40021400 	.word	0x40021400
 8001f50:	40020800 	.word	0x40020800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40021800 	.word	0x40021800
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40020c00 	.word	0x40020c00

08001f64 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001f6c:	f7ff ff6a 	bl	8001e44 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of hardwareTASK */
	hardwareTASKHandle = osThreadNew(StartHardwareTask, NULL,
 8001f7c:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <MX_FREERTOS_Init+0x58>)
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4814      	ldr	r0, [pc, #80]	; (8001fd4 <MX_FREERTOS_Init+0x5c>)
 8001f82:	f00f ffd5 	bl	8011f30 <osThreadNew>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4a13      	ldr	r2, [pc, #76]	; (8001fd8 <MX_FREERTOS_Init+0x60>)
 8001f8a:	6013      	str	r3, [r2, #0]
			&hardwareTASK_attributes);

	/* creation of touchGFXTask */
	touchGFXTaskHandle = osThreadNew(StartTouchGFXTask, NULL,
 8001f8c:	4a13      	ldr	r2, [pc, #76]	; (8001fdc <MX_FREERTOS_Init+0x64>)
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4813      	ldr	r0, [pc, #76]	; (8001fe0 <MX_FREERTOS_Init+0x68>)
 8001f92:	f00f ffcd 	bl	8011f30 <osThreadNew>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <MX_FREERTOS_Init+0x6c>)
 8001f9a:	6013      	str	r3, [r2, #0]
			&touchGFXTask_attributes);

	/* creation of infoLed */
	infoLedHandle = osThreadNew(StartInfoLed, NULL, &infoLed_attributes);
 8001f9c:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <MX_FREERTOS_Init+0x70>)
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4812      	ldr	r0, [pc, #72]	; (8001fec <MX_FREERTOS_Init+0x74>)
 8001fa2:	f00f ffc5 	bl	8011f30 <osThreadNew>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4a11      	ldr	r2, [pc, #68]	; (8001ff0 <MX_FREERTOS_Init+0x78>)
 8001faa:	6013      	str	r3, [r2, #0]

	/* creation of displayBackligh */
	displayBacklighHandle = osThreadNew(StartDisplayBacklight, NULL,
 8001fac:	4a11      	ldr	r2, [pc, #68]	; (8001ff4 <MX_FREERTOS_Init+0x7c>)
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4811      	ldr	r0, [pc, #68]	; (8001ff8 <MX_FREERTOS_Init+0x80>)
 8001fb2:	f00f ffbd 	bl	8011f30 <osThreadNew>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <MX_FREERTOS_Init+0x84>)
 8001fba:	6013      	str	r3, [r2, #0]
			&displayBackligh_attributes);

	/* creation of fuelConsumption */
	fuelConsumptionHandle = osThreadNew(StartComputeFuelConsumption, NULL,
 8001fbc:	4a10      	ldr	r2, [pc, #64]	; (8002000 <MX_FREERTOS_Init+0x88>)
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4810      	ldr	r0, [pc, #64]	; (8002004 <MX_FREERTOS_Init+0x8c>)
 8001fc2:	f00f ffb5 	bl	8011f30 <osThreadNew>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4a0f      	ldr	r2, [pc, #60]	; (8002008 <MX_FREERTOS_Init+0x90>)
 8001fca:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	0802beb0 	.word	0x0802beb0
 8001fd4:	0800200d 	.word	0x0800200d
 8001fd8:	20056ee4 	.word	0x20056ee4
 8001fdc:	0802bed4 	.word	0x0802bed4
 8001fe0:	0800212d 	.word	0x0800212d
 8001fe4:	20056edc 	.word	0x20056edc
 8001fe8:	0802bef8 	.word	0x0802bef8
 8001fec:	08002141 	.word	0x08002141
 8001ff0:	20056ee8 	.word	0x20056ee8
 8001ff4:	0802bf1c 	.word	0x0802bf1c
 8001ff8:	0800215d 	.word	0x0800215d
 8001ffc:	20056eec 	.word	0x20056eec
 8002000:	0802bf40 	.word	0x0802bf40
 8002004:	08002319 	.word	0x08002319
 8002008:	20056ee0 	.word	0x20056ee0

0800200c <StartHardwareTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void *argument)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartHardwareTask */
	HAL_CAN_Start(&hcan2);
 8002014:	483d      	ldr	r0, [pc, #244]	; (800210c <StartHardwareTask+0x100>)
 8002016:	f009 fd13 	bl	800ba40 <HAL_CAN_Start>
	HAL_CAN_Start(&hcan1);
 800201a:	483d      	ldr	r0, [pc, #244]	; (8002110 <StartHardwareTask+0x104>)
 800201c:	f009 fd10 	bl	800ba40 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002020:	2102      	movs	r1, #2
 8002022:	483a      	ldr	r0, [pc, #232]	; (800210c <StartHardwareTask+0x100>)
 8002024:	f009 ff3d 	bl	800bea2 <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002028:	2102      	movs	r1, #2
 800202a:	4839      	ldr	r0, [pc, #228]	; (8002110 <StartHardwareTask+0x104>)
 800202c:	f009 ff39 	bl	800bea2 <HAL_CAN_ActivateNotification>

	WS2812_Init();
 8002030:	f7fe fcda 	bl	80009e8 <WS2812_Init>
	ComputeOptimalPoints();
 8002034:	f7fe fede 	bl	8000df4 <ComputeOptimalPoints>

	osDelay(150);
 8002038:	2096      	movs	r0, #150	; 0x96
 800203a:	f010 f851 	bl	80120e0 <osDelay>
	uint8_t ledMode = displaySetup.ledBarMode;
 800203e:	4b35      	ldr	r3, [pc, #212]	; (8002114 <StartHardwareTask+0x108>)
 8002040:	785b      	ldrb	r3, [r3, #1]
 8002042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* Infinite loop */
	for (;;)
	{

		telemetryData.oilPress = HAL_GPIO_ReadPin(OIL_SENSOR_GPIO_Port,
 8002046:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800204a:	4833      	ldr	r0, [pc, #204]	; (8002118 <StartHardwareTask+0x10c>)
 800204c:	f00b fbd6 	bl	800d7fc <HAL_GPIO_ReadPin>
 8002050:	4603      	mov	r3, r0
 8002052:	461a      	mov	r2, r3
 8002054:	4b31      	ldr	r3, [pc, #196]	; (800211c <StartHardwareTask+0x110>)
 8002056:	725a      	strb	r2, [r3, #9]
				OIL_SENSOR_Pin);
		if (telemetryData.gear == 0)
 8002058:	4b30      	ldr	r3, [pc, #192]	; (800211c <StartHardwareTask+0x110>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d103      	bne.n	8002068 <StartHardwareTask+0x5c>
		{
			////HAL_GPIO_WritePin(NEUTRAL_LED_GPIO_Port, NEUTRAL_LED_Pin, SET);
			ledMode = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002066:	e003      	b.n	8002070 <StartHardwareTask+0x64>
		}
		else
		{
			//HAL_GPIO_WritePin(NEUTRAL_LED_GPIO_Port, NEUTRAL_LED_Pin, RESET);
			ledMode = displaySetup.ledBarMode;
 8002068:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <StartHardwareTask+0x108>)
 800206a:	785b      	ldrb	r3, [r3, #1]
 800206c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		updateLeds(EcuData.rpm, ledMode);
 8002070:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <StartHardwareTask+0x114>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800207a:	4619      	mov	r1, r3
 800207c:	4610      	mov	r0, r2
 800207e:	f7fe fdf9 	bl	8000c74 <updateLeds>

		osDelay(100);
 8002082:	2064      	movs	r0, #100	; 0x64
 8002084:	f010 f82c 	bl	80120e0 <osDelay>
		/* BURNED FUEL TRANSMISSION */
		uint16_t burnedFuel = (uint16_t)telemetryData.burnedFuel* 0x2000;
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <StartHardwareTask+0x110>)
 800208a:	edd3 7a03 	vldr	s15, [r3, #12]
 800208e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002092:	ee17 3a90 	vmov	r3, s15
 8002096:	b29b      	uxth	r3, r3
 8002098:	035b      	lsls	r3, r3, #13
 800209a:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint8_t RxData[2];
		RxData[0] = burnedFuel%0xFF;
 800209c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800209e:	4b21      	ldr	r3, [pc, #132]	; (8002124 <StartHardwareTask+0x118>)
 80020a0:	fba3 1302 	umull	r1, r3, r3, r2
 80020a4:	09d9      	lsrs	r1, r3, #7
 80020a6:	460b      	mov	r3, r1
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	1a5b      	subs	r3, r3, r1
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f887 3020 	strb.w	r3, [r7, #32]
		RxData[1] = burnedFuel / 0xFF;
 80020b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020b8:	4a1a      	ldr	r2, [pc, #104]	; (8002124 <StartHardwareTask+0x118>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	09db      	lsrs	r3, r3, #7
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		 CAN_TxHeaderTypeDef TxHeader;
		 TxHeader.DLC = 2;
 80020c8:	2302      	movs	r3, #2
 80020ca:	61bb      	str	r3, [r7, #24]
		 TxHeader.IDE = CAN_ID_STD;
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
		 TxHeader.RTR = CAN_RTR_DATA;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
		 TxHeader.StdId = 0x1FE;
 80020d4:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80020d8:	60bb      	str	r3, [r7, #8]

		// HAL_CAN_AddTxMessage(INTERNAL_CAN, &TxHeader, RxData, &TxMailbox);
		 HAL_CAN_AddTxMessage(&hcan2, &TxHeader, RxData, &TxMailbox);
 80020da:	f107 0220 	add.w	r2, r7, #32
 80020de:	f107 0108 	add.w	r1, r7, #8
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <StartHardwareTask+0x11c>)
 80020e4:	4809      	ldr	r0, [pc, #36]	; (800210c <StartHardwareTask+0x100>)
 80020e6:	f009 fcef 	bl	800bac8 <HAL_CAN_AddTxMessage>
		if (telemetryData.steeringWheelAttached == 1
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <StartHardwareTask+0x110>)
 80020ec:	785b      	ldrb	r3, [r3, #1]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d1a9      	bne.n	8002046 <StartHardwareTask+0x3a>
				&& HAL_GetTick() - telemetryData.steeringWheelAttachedTimestamp
 80020f2:	f008 fe9f 	bl	800ae34 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <StartHardwareTask+0x110>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002102:	d9a0      	bls.n	8002046 <StartHardwareTask+0x3a>
						> 2000)
		{
			telemetryData.steeringWheelAttached = 0;
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <StartHardwareTask+0x110>)
 8002106:	2200      	movs	r2, #0
 8002108:	705a      	strb	r2, [r3, #1]
	{
 800210a:	e79c      	b.n	8002046 <StartHardwareTask+0x3a>
 800210c:	20056d9c 	.word	0x20056d9c
 8002110:	20056e04 	.word	0x20056e04
 8002114:	20000004 	.word	0x20000004
 8002118:	40020800 	.word	0x40020800
 800211c:	20056d8c 	.word	0x20056d8c
 8002120:	20056dc4 	.word	0x20056dc4
 8002124:	80808081 	.word	0x80808081
 8002128:	20056e00 	.word	0x20056e00

0800212c <StartTouchGFXTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTouchGFXTask */
void StartTouchGFXTask(void *argument)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTouchGFXTask */
	MX_TouchGFX_Process();
 8002134:	f001 f9af 	bl	8003496 <MX_TouchGFX_Process>
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8002138:	2001      	movs	r0, #1
 800213a:	f00f ffd1 	bl	80120e0 <osDelay>
 800213e:	e7fb      	b.n	8002138 <StartTouchGFXTask+0xc>

08002140 <StartInfoLed>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInfoLed */
void StartInfoLed(void *argument)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartInfoLed */
	/* Infinite loop */
	for (;;)
	{
		osDelay(250);
 8002148:	20fa      	movs	r0, #250	; 0xfa
 800214a:	f00f ffc9 	bl	80120e0 <osDelay>
		HAL_GPIO_TogglePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin);
 800214e:	2104      	movs	r1, #4
 8002150:	4801      	ldr	r0, [pc, #4]	; (8002158 <StartInfoLed+0x18>)
 8002152:	f00b fb84 	bl	800d85e <HAL_GPIO_TogglePin>
		osDelay(250);
 8002156:	e7f7      	b.n	8002148 <StartInfoLed+0x8>
 8002158:	40021000 	.word	0x40021000

0800215c <StartDisplayBacklight>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayBacklight */
void StartDisplayBacklight(void *argument)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	ed2d 8b02 	vpush	{d8}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDisplayBacklight */

	// current set point in mA
	uint8_t setPoint = displaySetup.brightness * 1.5f;
 8002168:	4b64      	ldr	r3, [pc, #400]	; (80022fc <StartDisplayBacklight+0x1a0>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	ee07 3a90 	vmov	s15, r3
 8002170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002174:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800217c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002180:	edc7 7a00 	vstr	s15, [r7]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	753b      	strb	r3, [r7, #20]
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002188:	2100      	movs	r1, #0
 800218a:	485d      	ldr	r0, [pc, #372]	; (8002300 <StartDisplayBacklight+0x1a4>)
 800218c:	f00e f8f2 	bl	8010374 <HAL_TIM_PWM_Start>
	uint8_t PWM_Pulse = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	75fb      	strb	r3, [r7, #23]
	uint8_t PWM_PulseChange = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	75bb      	strb	r3, [r7, #22]
	float voltage = 0.0f;
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
	float current = 0.0f;
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
	uint8_t delay = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	757b      	strb	r3, [r7, #21]
	osDelay(250);
 80021a8:	20fa      	movs	r0, #250	; 0xfa
 80021aa:	f00f ff99 	bl	80120e0 <osDelay>
	/* Infinite loop */
	for (;;)
	{
		HAL_ADC_Start(&hadc1);
 80021ae:	4855      	ldr	r0, [pc, #340]	; (8002304 <StartDisplayBacklight+0x1a8>)
 80021b0:	f008 feb4 	bl	800af1c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 80021b4:	210a      	movs	r1, #10
 80021b6:	4853      	ldr	r0, [pc, #332]	; (8002304 <StartDisplayBacklight+0x1a8>)
 80021b8:	f008 ff7e 	bl	800b0b8 <HAL_ADC_PollForConversion>

		osDelay(100 - delay);
 80021bc:	7d7b      	ldrb	r3, [r7, #21]
 80021be:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80021c2:	4618      	mov	r0, r3
 80021c4:	f00f ff8c 	bl	80120e0 <osDelay>
		voltage = HAL_ADC_GetValue(&hadc1) * 3.3f / 4095.0f;
 80021c8:	484e      	ldr	r0, [pc, #312]	; (8002304 <StartDisplayBacklight+0x1a8>)
 80021ca:	f009 f800 	bl	800b1ce <HAL_ADC_GetValue>
 80021ce:	ee07 0a90 	vmov	s15, r0
 80021d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002308 <StartDisplayBacklight+0x1ac>
 80021da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021de:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800230c <StartDisplayBacklight+0x1b0>
 80021e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021e6:	edc7 7a04 	vstr	s15, [r7, #16]
		current = voltage / 5.1f * 1000.0f;
 80021ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80021ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002310 <StartDisplayBacklight+0x1b4>
 80021f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002314 <StartDisplayBacklight+0x1b8>
 80021fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021fe:	edc7 7a03 	vstr	s15, [r7, #12]

		PWM_PulseChange = (int8_t) round((setPoint - current) / 10.0f);
 8002202:	7d3b      	ldrb	r3, [r7, #20]
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800220c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002210:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002214:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800221c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002220:	eeb0 0b47 	vmov.f64	d0, d7
 8002224:	f024 fb96 	bl	8026954 <round>
 8002228:	eeb0 7b40 	vmov.f64	d7, d0
 800222c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002230:	edc7 7a00 	vstr	s15, [r7]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b25b      	sxtb	r3, r3
 8002238:	75bb      	strb	r3, [r7, #22]
		delay = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	757b      	strb	r3, [r7, #21]
		if (PWM_PulseChange > 10)
 800223e:	7dbb      	ldrb	r3, [r7, #22]
 8002240:	2b0a      	cmp	r3, #10
 8002242:	d951      	bls.n	80022e8 <StartDisplayBacklight+0x18c>
		{
			while (PWM_PulseChange > 0)
 8002244:	e04c      	b.n	80022e0 <StartDisplayBacklight+0x184>
			{
				PWM_Pulse += fmin(fmin(PWM_PulseChange, PWM_CHANGE),
 8002246:	7dfb      	ldrb	r3, [r7, #23]
 8002248:	ee07 3a90 	vmov	s15, r3
 800224c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002250:	7dbb      	ldrb	r3, [r7, #22]
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800225a:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 800225e:	eeb0 0b47 	vmov.f64	d0, d7
 8002262:	f024 fb31 	bl	80268c8 <fmin>
 8002266:	eeb0 6b40 	vmov.f64	d6, d0
						215 - PWM_Pulse);
 800226a:	7dfb      	ldrb	r3, [r7, #23]
 800226c:	f1c3 03d7 	rsb	r3, r3, #215	; 0xd7
				PWM_Pulse += fmin(fmin(PWM_PulseChange, PWM_CHANGE),
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002278:	eeb0 1b47 	vmov.f64	d1, d7
 800227c:	eeb0 0b46 	vmov.f64	d0, d6
 8002280:	f024 fb22 	bl	80268c8 <fmin>
 8002284:	eeb0 7b40 	vmov.f64	d7, d0
 8002288:	ee38 7b07 	vadd.f64	d7, d8, d7
 800228c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002290:	edc7 7a00 	vstr	s15, [r7]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	75fb      	strb	r3, [r7, #23]
				PWM_PulseChange -= fmin(PWM_PulseChange, PWM_CHANGE);
 8002298:	7dbb      	ldrb	r3, [r7, #22]
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80022a2:	7dbb      	ldrb	r3, [r7, #22]
 80022a4:	ee07 3a90 	vmov	s15, r3
 80022a8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80022ac:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 80022b0:	eeb0 0b47 	vmov.f64	d0, d7
 80022b4:	f024 fb08 	bl	80268c8 <fmin>
 80022b8:	eeb0 7b40 	vmov.f64	d7, d0
 80022bc:	ee38 7b47 	vsub.f64	d7, d8, d7
 80022c0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022c4:	edc7 7a00 	vstr	s15, [r7]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	75bb      	strb	r3, [r7, #22]
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM_Pulse);
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <StartDisplayBacklight+0x1a4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	7dfa      	ldrb	r2, [r7, #23]
 80022d2:	635a      	str	r2, [r3, #52]	; 0x34
				osDelay(5);
 80022d4:	2005      	movs	r0, #5
 80022d6:	f00f ff03 	bl	80120e0 <osDelay>
				delay += 5;
 80022da:	7d7b      	ldrb	r3, [r7, #21]
 80022dc:	3305      	adds	r3, #5
 80022de:	757b      	strb	r3, [r7, #21]
			while (PWM_PulseChange > 0)
 80022e0:	7dbb      	ldrb	r3, [r7, #22]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1af      	bne.n	8002246 <StartDisplayBacklight+0xea>
 80022e6:	e762      	b.n	80021ae <StartDisplayBacklight+0x52>
				delay += 5;
			}
		}
		else
		{
			PWM_Pulse += PWM_PulseChange;
 80022e8:	7dfa      	ldrb	r2, [r7, #23]
 80022ea:	7dbb      	ldrb	r3, [r7, #22]
 80022ec:	4413      	add	r3, r2
 80022ee:	75fb      	strb	r3, [r7, #23]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM_Pulse);
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <StartDisplayBacklight+0x1a4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	7dfa      	ldrb	r2, [r7, #23]
 80022f6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_ADC_Start(&hadc1);
 80022f8:	e759      	b.n	80021ae <StartDisplayBacklight+0x52>
 80022fa:	bf00      	nop
 80022fc:	20000004 	.word	0x20000004
 8002300:	20057030 	.word	0x20057030
 8002304:	20056d44 	.word	0x20056d44
 8002308:	40533333 	.word	0x40533333
 800230c:	457ff000 	.word	0x457ff000
 8002310:	40a33333 	.word	0x40a33333
 8002314:	447a0000 	.word	0x447a0000

08002318 <StartComputeFuelConsumption>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartComputeFuelConsumption */
void StartComputeFuelConsumption(void *argument)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	ed2d 8b02 	vpush	{d8}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartComputeFuelConsumption */
	const uint8_t injectorFuelFlow = 250; // cc / min
 8002324:	23fa      	movs	r3, #250	; 0xfa
 8002326:	73fb      	strb	r3, [r7, #15]
	static uint32_t lastComputeTime = 0;
	/* Infinite loop */
	for (;;)
	{
		float fuelUsage = ((float) EcuData.rpm / 60 / 1000) * 3
 8002328:	4b24      	ldr	r3, [pc, #144]	; (80023bc <StartComputeFuelConsumption+0xa4>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	ee07 3a90 	vmov	s15, r3
 8002330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002334:	eddf 6a22 	vldr	s13, [pc, #136]	; 80023c0 <StartComputeFuelConsumption+0xa8>
 8002338:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800233c:	eddf 6a21 	vldr	s13, [pc, #132]	; 80023c4 <StartComputeFuelConsumption+0xac>
 8002340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002344:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002348:	ee27 7a87 	vmul.f32	s14, s15, s14
				* ((float) injectorFuelFlow / 60 / 1000) * EcuData.injPW * (lastComputeTime - HAL_GetTick());
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002356:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80023c0 <StartComputeFuelConsumption+0xa8>
 800235a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800235e:	ed9f 6a19 	vldr	s12, [pc, #100]	; 80023c4 <StartComputeFuelConsumption+0xac>
 8002362:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002366:	ee27 7a27 	vmul.f32	s14, s14, s15
 800236a:	4b14      	ldr	r3, [pc, #80]	; (80023bc <StartComputeFuelConsumption+0xa4>)
 800236c:	88db      	ldrh	r3, [r3, #6]
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002376:	ee27 8a27 	vmul.f32	s16, s14, s15
 800237a:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <StartComputeFuelConsumption+0xb0>)
 800237c:	681c      	ldr	r4, [r3, #0]
 800237e:	f008 fd59 	bl	800ae34 <HAL_GetTick>
 8002382:	4603      	mov	r3, r0
 8002384:	1ae3      	subs	r3, r4, r3
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eef8 7a67 	vcvt.f32.u32	s15, s15
		float fuelUsage = ((float) EcuData.rpm / 60 / 1000) * 3
 800238e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002392:	edc7 7a02 	vstr	s15, [r7, #8]
		lastComputeTime = HAL_GetTick();
 8002396:	f008 fd4d 	bl	800ae34 <HAL_GetTick>
 800239a:	4603      	mov	r3, r0
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <StartComputeFuelConsumption+0xb0>)
 800239e:	6013      	str	r3, [r2, #0]
		telemetryData.burnedFuel += fuelUsage;
 80023a0:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <StartComputeFuelConsumption+0xb4>)
 80023a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80023a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80023aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <StartComputeFuelConsumption+0xb4>)
 80023b0:	edc3 7a03 	vstr	s15, [r3, #12]
		osDelay(10);
 80023b4:	200a      	movs	r0, #10
 80023b6:	f00f fe93 	bl	80120e0 <osDelay>
	{
 80023ba:	e7b5      	b.n	8002328 <StartComputeFuelConsumption+0x10>
 80023bc:	20056dc4 	.word	0x20056dc4
 80023c0:	42700000 	.word	0x42700000
 80023c4:	447a0000 	.word	0x447a0000
 80023c8:	20000288 	.word	0x20000288
 80023cc:	20056d8c 	.word	0x20056d8c

080023d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08e      	sub	sp, #56	; 0x38
 80023d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	60da      	str	r2, [r3, #12]
 80023e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023e6:	4b4c      	ldr	r3, [pc, #304]	; (8002518 <MX_GPIO_Init+0x148>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a4b      	ldr	r2, [pc, #300]	; (8002518 <MX_GPIO_Init+0x148>)
 80023ec:	f043 0310 	orr.w	r3, r3, #16
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b49      	ldr	r3, [pc, #292]	; (8002518 <MX_GPIO_Init+0x148>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	623b      	str	r3, [r7, #32]
 80023fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023fe:	4b46      	ldr	r3, [pc, #280]	; (8002518 <MX_GPIO_Init+0x148>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a45      	ldr	r2, [pc, #276]	; (8002518 <MX_GPIO_Init+0x148>)
 8002404:	f043 0320 	orr.w	r3, r3, #32
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b43      	ldr	r3, [pc, #268]	; (8002518 <MX_GPIO_Init+0x148>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	61fb      	str	r3, [r7, #28]
 8002414:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002416:	4b40      	ldr	r3, [pc, #256]	; (8002518 <MX_GPIO_Init+0x148>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a3f      	ldr	r2, [pc, #252]	; (8002518 <MX_GPIO_Init+0x148>)
 800241c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <MX_GPIO_Init+0x148>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800242e:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <MX_GPIO_Init+0x148>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a39      	ldr	r2, [pc, #228]	; (8002518 <MX_GPIO_Init+0x148>)
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b37      	ldr	r3, [pc, #220]	; (8002518 <MX_GPIO_Init+0x148>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002446:	4b34      	ldr	r3, [pc, #208]	; (8002518 <MX_GPIO_Init+0x148>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a33      	ldr	r2, [pc, #204]	; (8002518 <MX_GPIO_Init+0x148>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b31      	ldr	r3, [pc, #196]	; (8002518 <MX_GPIO_Init+0x148>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800245e:	4b2e      	ldr	r3, [pc, #184]	; (8002518 <MX_GPIO_Init+0x148>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	4a2d      	ldr	r2, [pc, #180]	; (8002518 <MX_GPIO_Init+0x148>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b2b      	ldr	r3, [pc, #172]	; (8002518 <MX_GPIO_Init+0x148>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002476:	4b28      	ldr	r3, [pc, #160]	; (8002518 <MX_GPIO_Init+0x148>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a27      	ldr	r2, [pc, #156]	; (8002518 <MX_GPIO_Init+0x148>)
 800247c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b25      	ldr	r3, [pc, #148]	; (8002518 <MX_GPIO_Init+0x148>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800248e:	4b22      	ldr	r3, [pc, #136]	; (8002518 <MX_GPIO_Init+0x148>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a21      	ldr	r2, [pc, #132]	; (8002518 <MX_GPIO_Init+0x148>)
 8002494:	f043 0308 	orr.w	r3, r3, #8
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <MX_GPIO_Init+0x148>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, GPIO_PIN_RESET);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2104      	movs	r1, #4
 80024aa:	481c      	ldr	r0, [pc, #112]	; (800251c <MX_GPIO_Init+0x14c>)
 80024ac:	f00b f9be 	bl	800d82c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_PD_GPIO_Port, ESP_PD_Pin, GPIO_PIN_RESET);
 80024b0:	2200      	movs	r2, #0
 80024b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024b6:	481a      	ldr	r0, [pc, #104]	; (8002520 <MX_GPIO_Init+0x150>)
 80024b8:	f00b f9b8 	bl	800d82c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SIGNAL_LED_Pin;
 80024bc:	2304      	movs	r3, #4
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c0:	2301      	movs	r3, #1
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c8:	2300      	movs	r3, #0
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SIGNAL_LED_GPIO_Port, &GPIO_InitStruct);
 80024cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d0:	4619      	mov	r1, r3
 80024d2:	4812      	ldr	r0, [pc, #72]	; (800251c <MX_GPIO_Init+0x14c>)
 80024d4:	f00a feda 	bl	800d28c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OIL_SENSOR_Pin;
 80024d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024de:	2300      	movs	r3, #0
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024e2:	2301      	movs	r3, #1
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OIL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80024e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ea:	4619      	mov	r1, r3
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <MX_GPIO_Init+0x150>)
 80024ee:	f00a fecd 	bl	800d28c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP_PD_Pin;
 80024f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f8:	2301      	movs	r3, #1
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP_PD_GPIO_Port, &GPIO_InitStruct);
 8002504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002508:	4619      	mov	r1, r3
 800250a:	4805      	ldr	r0, [pc, #20]	; (8002520 <MX_GPIO_Init+0x150>)
 800250c:	f00a febe 	bl	800d28c <HAL_GPIO_Init>

}
 8002510:	bf00      	nop
 8002512:	3738      	adds	r7, #56	; 0x38
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40023800 	.word	0x40023800
 800251c:	40021000 	.word	0x40021000
 8002520:	40020800 	.word	0x40020800

08002524 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08e      	sub	sp, #56	; 0x38
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	2234      	movs	r2, #52	; 0x34
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f024 fae9 	bl	8026b08 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002536:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <MX_LTDC_Init+0xfc>)
 8002538:	4a3a      	ldr	r2, [pc, #232]	; (8002624 <MX_LTDC_Init+0x100>)
 800253a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800253c:	4b38      	ldr	r3, [pc, #224]	; (8002620 <MX_LTDC_Init+0xfc>)
 800253e:	2200      	movs	r2, #0
 8002540:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002542:	4b37      	ldr	r3, [pc, #220]	; (8002620 <MX_LTDC_Init+0xfc>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002548:	4b35      	ldr	r3, [pc, #212]	; (8002620 <MX_LTDC_Init+0xfc>)
 800254a:	2200      	movs	r2, #0
 800254c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800254e:	4b34      	ldr	r3, [pc, #208]	; (8002620 <MX_LTDC_Init+0xfc>)
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8002554:	4b32      	ldr	r3, [pc, #200]	; (8002620 <MX_LTDC_Init+0xfc>)
 8002556:	2203      	movs	r2, #3
 8002558:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 39;
 800255a:	4b31      	ldr	r3, [pc, #196]	; (8002620 <MX_LTDC_Init+0xfc>)
 800255c:	2227      	movs	r2, #39	; 0x27
 800255e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <MX_LTDC_Init+0xfc>)
 8002562:	220b      	movs	r2, #11
 8002564:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 47;
 8002566:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <MX_LTDC_Init+0xfc>)
 8002568:	222f      	movs	r2, #47	; 0x2f
 800256a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 800256c:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <MX_LTDC_Init+0xfc>)
 800256e:	f240 322b 	movw	r2, #811	; 0x32b
 8002572:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 527;
 8002574:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <MX_LTDC_Init+0xfc>)
 8002576:	f240 220f 	movw	r2, #527	; 0x20f
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 819;
 800257c:	4b28      	ldr	r3, [pc, #160]	; (8002620 <MX_LTDC_Init+0xfc>)
 800257e:	f240 3233 	movw	r2, #819	; 0x333
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 535;
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <MX_LTDC_Init+0xfc>)
 8002586:	f240 2217 	movw	r2, #535	; 0x217
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <MX_LTDC_Init+0xfc>)
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002594:	4b22      	ldr	r3, [pc, #136]	; (8002620 <MX_LTDC_Init+0xfc>)
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800259c:	4b20      	ldr	r3, [pc, #128]	; (8002620 <MX_LTDC_Init+0xfc>)
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80025a4:	481e      	ldr	r0, [pc, #120]	; (8002620 <MX_LTDC_Init+0xfc>)
 80025a6:	f00b f975 	bl	800d894 <HAL_LTDC_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80025b0:	f000 fac8 	bl	8002b44 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80025b8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80025bc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80025c2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80025c6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80025c8:	2301      	movs	r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80025cc:	23ff      	movs	r3, #255	; 0xff
 80025ce:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80025d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025d8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80025da:	2305      	movs	r3, #5
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80025de:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80025e2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 80025e4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 80025ea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	2200      	movs	r2, #0
 8002606:	4619      	mov	r1, r3
 8002608:	4805      	ldr	r0, [pc, #20]	; (8002620 <MX_LTDC_Init+0xfc>)
 800260a:	f00b facb 	bl	800dba4 <HAL_LTDC_ConfigLayer>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002614:	f000 fa96 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	3738      	adds	r7, #56	; 0x38
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20056ef0 	.word	0x20056ef0
 8002624:	40016800 	.word	0x40016800

08002628 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b0b4      	sub	sp, #208	; 0xd0
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002644:	2290      	movs	r2, #144	; 0x90
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f024 fa5d 	bl	8026b08 <memset>
  if(ltdcHandle->Instance==LTDC)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4aa6      	ldr	r2, [pc, #664]	; (80028ec <HAL_LTDC_MspInit+0x2c4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	f040 8144 	bne.w	80028e2 <HAL_LTDC_MspInit+0x2ba>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800265a:	2308      	movs	r3, #8
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 279;
 800265e:	f240 1317 	movw	r3, #279	; 0x117
 8002662:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8002664:	2303      	movs	r3, #3
 8002666:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002668:	2302      	movs	r3, #2
 800266a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800266c:	2300      	movs	r3, #0
 800266e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002670:	2301      	movs	r3, #1
 8002672:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002678:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800267a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800267e:	4618      	mov	r0, r3
 8002680:	f00d f8a0 	bl	800f7c4 <HAL_RCCEx_PeriphCLKConfig>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 800268a:	f000 fa5b 	bl	8002b44 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800268e:	4b98      	ldr	r3, [pc, #608]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	4a97      	ldr	r2, [pc, #604]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 8002694:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002698:	6453      	str	r3, [r2, #68]	; 0x44
 800269a:	4b95      	ldr	r3, [pc, #596]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026a6:	4b92      	ldr	r3, [pc, #584]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a91      	ldr	r2, [pc, #580]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 80026ac:	f043 0310 	orr.w	r3, r3, #16
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b8f      	ldr	r3, [pc, #572]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026be:	4b8c      	ldr	r3, [pc, #560]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a8b      	ldr	r2, [pc, #556]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 80026c4:	f043 0320 	orr.w	r3, r3, #32
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b89      	ldr	r3, [pc, #548]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	623b      	str	r3, [r7, #32]
 80026d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d6:	4b86      	ldr	r3, [pc, #536]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a85      	ldr	r2, [pc, #532]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 80026dc:	f043 0304 	orr.w	r3, r3, #4
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b83      	ldr	r3, [pc, #524]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ee:	4b80      	ldr	r3, [pc, #512]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a7f      	ldr	r2, [pc, #508]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b7d      	ldr	r3, [pc, #500]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002706:	4b7a      	ldr	r3, [pc, #488]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a79      	ldr	r2, [pc, #484]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b77      	ldr	r3, [pc, #476]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800271e:	4b74      	ldr	r3, [pc, #464]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a73      	ldr	r2, [pc, #460]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 8002724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b71      	ldr	r3, [pc, #452]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002736:	4b6e      	ldr	r3, [pc, #440]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a6d      	ldr	r2, [pc, #436]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 800273c:	f043 0308 	orr.w	r3, r3, #8
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b6b      	ldr	r3, [pc, #428]	; (80028f0 <HAL_LTDC_MspInit+0x2c8>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800274e:	2370      	movs	r3, #112	; 0x70
 8002750:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002766:	230e      	movs	r3, #14
 8002768:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800276c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002770:	4619      	mov	r1, r3
 8002772:	4860      	ldr	r0, [pc, #384]	; (80028f4 <HAL_LTDC_MspInit+0x2cc>)
 8002774:	f00a fd8a 	bl	800d28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800277c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278c:	2300      	movs	r3, #0
 800278e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002792:	230e      	movs	r3, #14
 8002794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002798:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800279c:	4619      	mov	r1, r3
 800279e:	4856      	ldr	r0, [pc, #344]	; (80028f8 <HAL_LTDC_MspInit+0x2d0>)
 80027a0:	f00a fd74 	bl	800d28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 80027a4:	23c1      	movs	r3, #193	; 0xc1
 80027a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027bc:	230e      	movs	r3, #14
 80027be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80027c6:	4619      	mov	r1, r3
 80027c8:	484c      	ldr	r0, [pc, #304]	; (80028fc <HAL_LTDC_MspInit+0x2d4>)
 80027ca:	f00a fd5f 	bl	800d28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80027ce:	f240 437e 	movw	r3, #1150	; 0x47e
 80027d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027e8:	230e      	movs	r3, #14
 80027ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80027f2:	4619      	mov	r1, r3
 80027f4:	4842      	ldr	r0, [pc, #264]	; (8002900 <HAL_LTDC_MspInit+0x2d8>)
 80027f6:	f00a fd49 	bl	800d28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027fa:	2303      	movs	r3, #3
 80027fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002800:	2302      	movs	r3, #2
 8002802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280c:	2300      	movs	r3, #0
 800280e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002812:	2309      	movs	r3, #9
 8002814:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002818:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800281c:	4619      	mov	r1, r3
 800281e:	4839      	ldr	r0, [pc, #228]	; (8002904 <HAL_LTDC_MspInit+0x2dc>)
 8002820:	f00a fd34 	bl	800d28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8002824:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002828:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002838:	2300      	movs	r3, #0
 800283a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800283e:	230e      	movs	r3, #14
 8002840:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002844:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002848:	4619      	mov	r1, r3
 800284a:	482e      	ldr	r0, [pc, #184]	; (8002904 <HAL_LTDC_MspInit+0x2dc>)
 800284c:	f00a fd1e 	bl	800d28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 8002850:	f44f 5323 	mov.w	r3, #10432	; 0x28c0
 8002854:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002858:	2302      	movs	r3, #2
 800285a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002864:	2300      	movs	r3, #0
 8002866:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800286a:	230e      	movs	r3, #14
 800286c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002870:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002874:	4619      	mov	r1, r3
 8002876:	4824      	ldr	r0, [pc, #144]	; (8002908 <HAL_LTDC_MspInit+0x2e0>)
 8002878:	f00a fd08 	bl	800d28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800287c:	2348      	movs	r3, #72	; 0x48
 800287e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	2302      	movs	r3, #2
 8002884:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002894:	230e      	movs	r3, #14
 8002896:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800289a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800289e:	4619      	mov	r1, r3
 80028a0:	481a      	ldr	r0, [pc, #104]	; (800290c <HAL_LTDC_MspInit+0x2e4>)
 80028a2:	f00a fcf3 	bl	800d28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80028a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80028c0:	2309      	movs	r3, #9
 80028c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028c6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80028ca:	4619      	mov	r1, r3
 80028cc:	480e      	ldr	r0, [pc, #56]	; (8002908 <HAL_LTDC_MspInit+0x2e0>)
 80028ce:	f00a fcdd 	bl	800d28c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2103      	movs	r1, #3
 80028d6:	2058      	movs	r0, #88	; 0x58
 80028d8:	f009 fe14 	bl	800c504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80028dc:	2058      	movs	r0, #88	; 0x58
 80028de:	f009 fe2d 	bl	800c53c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80028e2:	bf00      	nop
 80028e4:	37d0      	adds	r7, #208	; 0xd0
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40016800 	.word	0x40016800
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40021400 	.word	0x40021400
 80028fc:	40020800 	.word	0x40020800
 8002900:	40020000 	.word	0x40020000
 8002904:	40020400 	.word	0x40020400
 8002908:	40021800 	.word	0x40021800
 800290c:	40020c00 	.word	0x40020c00

08002910 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002914:	f3bf 8f4f 	dsb	sy
}
 8002918:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800291a:	f3bf 8f6f 	isb	sy
}
 800291e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002920:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <SCB_EnableICache+0x48>)
 8002922:	2200      	movs	r2, #0
 8002924:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002928:	f3bf 8f4f 	dsb	sy
}
 800292c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800292e:	f3bf 8f6f 	isb	sy
}
 8002932:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <SCB_EnableICache+0x48>)
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	4a07      	ldr	r2, [pc, #28]	; (8002958 <SCB_EnableICache+0x48>)
 800293a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002940:	f3bf 8f4f 	dsb	sy
}
 8002944:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002946:	f3bf 8f6f 	isb	sy
}
 800294a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002962:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <SCB_EnableDCache+0x84>)
 8002964:	2200      	movs	r2, #0
 8002966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800296a:	f3bf 8f4f 	dsb	sy
}
 800296e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <SCB_EnableDCache+0x84>)
 8002972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002976:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	0b5b      	lsrs	r3, r3, #13
 800297c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002980:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	08db      	lsrs	r3, r3, #3
 8002986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800298a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002994:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800299a:	4911      	ldr	r1, [pc, #68]	; (80029e0 <SCB_EnableDCache+0x84>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	1e5a      	subs	r2, r3, #1
 80029a6:	60ba      	str	r2, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1ef      	bne.n	800298c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1e5a      	subs	r2, r3, #1
 80029b0:	60fa      	str	r2, [r7, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e5      	bne.n	8002982 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80029b6:	f3bf 8f4f 	dsb	sy
}
 80029ba:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80029bc:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <SCB_EnableDCache+0x84>)
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <SCB_EnableDCache+0x84>)
 80029c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80029c8:	f3bf 8f4f 	dsb	sy
}
 80029cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029ce:	f3bf 8f6f 	isb	sy
}
 80029d2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80029e8:	f7ff ff92 	bl	8002910 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80029ec:	f7ff ffb6 	bl	800295c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029f0:	f008 f9fe 	bl	800adf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029f4:	f000 f824 	bl	8002a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029f8:	f7ff fcea 	bl	80023d0 <MX_GPIO_Init>
  MX_CRC_Init();
 80029fc:	f7ff f8b4 	bl	8001b68 <MX_CRC_Init>
  MX_FMC_Init();
 8002a00:	f7ff f978 	bl	8001cf4 <MX_FMC_Init>
  MX_QUADSPI_Init();
 8002a04:	f000 f8a4 	bl	8002b50 <MX_QUADSPI_Init>
  MX_LTDC_Init();
 8002a08:	f7ff fd8c 	bl	8002524 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8002a0c:	f7ff f914 	bl	8001c38 <MX_DMA2D_Init>
  MX_CAN2_Init();
 8002a10:	f7fe fdc0 	bl	8001594 <MX_CAN2_Init>
  MX_CAN1_Init();
 8002a14:	f7fe fd6c 	bl	80014f0 <MX_CAN1_Init>
  MX_DMA_Init();
 8002a18:	f7ff f8e8 	bl	8001bec <MX_DMA_Init>
  MX_TIM3_Init();
 8002a1c:	f000 fb22 	bl	8003064 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002a20:	f000 fb96 	bl	8003150 <MX_TIM4_Init>
  MX_ADC1_Init();
 8002a24:	f7fe fb06 	bl	8001034 <MX_ADC1_Init>
  MX_TouchGFX_Init();
 8002a28:	f000 fd2f 	bl	800348a <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  FLASH_QSPI_Init();
 8002a2c:	f7fe fb94 	bl	8001158 <FLASH_QSPI_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002a30:	f00f fa14 	bl	8011e5c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002a34:	f7ff faa0 	bl	8001f78 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002a38:	f00f fa44 	bl	8011ec4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <main+0x58>
	...

08002a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b094      	sub	sp, #80	; 0x50
 8002a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a46:	f107 031c 	add.w	r3, r7, #28
 8002a4a:	2234      	movs	r2, #52	; 0x34
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f024 f85a 	bl	8026b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a54:	f107 0308 	add.w	r3, r7, #8
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a64:	4b2c      	ldr	r3, [pc, #176]	; (8002b18 <SystemClock_Config+0xd8>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	4a2b      	ldr	r2, [pc, #172]	; (8002b18 <SystemClock_Config+0xd8>)
 8002a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a70:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <SystemClock_Config+0xd8>)
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a7c:	4b27      	ldr	r3, [pc, #156]	; (8002b1c <SystemClock_Config+0xdc>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a26      	ldr	r2, [pc, #152]	; (8002b1c <SystemClock_Config+0xdc>)
 8002a82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <SystemClock_Config+0xdc>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a90:	603b      	str	r3, [r7, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a94:	2301      	movs	r3, #1
 8002a96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002aa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002aa8:	2319      	movs	r3, #25
 8002aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002aac:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002ab0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002aba:	2302      	movs	r3, #2
 8002abc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002abe:	f107 031c 	add.w	r3, r7, #28
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f00c f9dc 	bl	800ee80 <HAL_RCC_OscConfig>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002ace:	f000 f839 	bl	8002b44 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002ad2:	f00b fa77 	bl	800dfc4 <HAL_PWREx_EnableOverDrive>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002adc:	f000 f832 	bl	8002b44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ae0:	230f      	movs	r3, #15
 8002ae2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002aec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002af0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002af8:	f107 0308 	add.w	r3, r7, #8
 8002afc:	2107      	movs	r1, #7
 8002afe:	4618      	mov	r0, r3
 8002b00:	f00c fc6c 	bl	800f3dc <HAL_RCC_ClockConfig>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002b0a:	f000 f81b 	bl	8002b44 <Error_Handler>
  }
}
 8002b0e:	bf00      	nop
 8002b10:	3750      	adds	r7, #80	; 0x50
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40007000 	.word	0x40007000

08002b20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b32:	f008 f96b 	bl	800ae0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40001000 	.word	0x40001000

08002b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b48:	b672      	cpsid	i
}
 8002b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b4c:	e7fe      	b.n	8002b4c <Error_Handler+0x8>
	...

08002b50 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <MX_QUADSPI_Init+0x50>)
 8002b56:	4a13      	ldr	r2, [pc, #76]	; (8002ba4 <MX_QUADSPI_Init+0x54>)
 8002b58:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 3;
 8002b5a:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <MX_QUADSPI_Init+0x50>)
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002b60:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <MX_QUADSPI_Init+0x50>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <MX_QUADSPI_Init+0x50>)
 8002b68:	2210      	movs	r2, #16
 8002b6a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <MX_QUADSPI_Init+0x50>)
 8002b6e:	2217      	movs	r2, #23
 8002b70:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <MX_QUADSPI_Init+0x50>)
 8002b74:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002b78:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <MX_QUADSPI_Init+0x50>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <MX_QUADSPI_Init+0x50>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <MX_QUADSPI_Init+0x50>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002b8c:	4804      	ldr	r0, [pc, #16]	; (8002ba0 <MX_QUADSPI_Init+0x50>)
 8002b8e:	f00b fa69 	bl	800e064 <HAL_QSPI_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8002b98:	f7ff ffd4 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20056f98 	.word	0x20056f98
 8002ba4:	a0001000 	.word	0xa0001000

08002ba8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	; 0x28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a39      	ldr	r2, [pc, #228]	; (8002cac <HAL_QSPI_MspInit+0x104>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d16c      	bne.n	8002ca4 <HAL_QSPI_MspInit+0xfc>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002bca:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <HAL_QSPI_MspInit+0x108>)
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	4a38      	ldr	r2, [pc, #224]	; (8002cb0 <HAL_QSPI_MspInit+0x108>)
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	6393      	str	r3, [r2, #56]	; 0x38
 8002bd6:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <HAL_QSPI_MspInit+0x108>)
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002be2:	4b33      	ldr	r3, [pc, #204]	; (8002cb0 <HAL_QSPI_MspInit+0x108>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a32      	ldr	r2, [pc, #200]	; (8002cb0 <HAL_QSPI_MspInit+0x108>)
 8002be8:	f043 0320 	orr.w	r3, r3, #32
 8002bec:	6313      	str	r3, [r2, #48]	; 0x30
 8002bee:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <HAL_QSPI_MspInit+0x108>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfa:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <HAL_QSPI_MspInit+0x108>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4a2c      	ldr	r2, [pc, #176]	; (8002cb0 <HAL_QSPI_MspInit+0x108>)
 8002c00:	f043 0302 	orr.w	r3, r3, #2
 8002c04:	6313      	str	r3, [r2, #48]	; 0x30
 8002c06:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <HAL_QSPI_MspInit+0x108>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c12:	23c0      	movs	r3, #192	; 0xc0
 8002c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c22:	2309      	movs	r3, #9
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c26:	f107 0314 	add.w	r3, r7, #20
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4821      	ldr	r0, [pc, #132]	; (8002cb4 <HAL_QSPI_MspInit+0x10c>)
 8002c2e:	f00a fb2d 	bl	800d28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c40:	2303      	movs	r3, #3
 8002c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002c44:	230a      	movs	r3, #10
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4819      	ldr	r0, [pc, #100]	; (8002cb4 <HAL_QSPI_MspInit+0x10c>)
 8002c50:	f00a fb1c 	bl	800d28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c54:	2304      	movs	r3, #4
 8002c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c60:	2303      	movs	r3, #3
 8002c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c64:	2309      	movs	r3, #9
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4812      	ldr	r0, [pc, #72]	; (8002cb8 <HAL_QSPI_MspInit+0x110>)
 8002c70:	f00a fb0c 	bl	800d28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c74:	2340      	movs	r3, #64	; 0x40
 8002c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002c84:	230a      	movs	r3, #10
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	480a      	ldr	r0, [pc, #40]	; (8002cb8 <HAL_QSPI_MspInit+0x110>)
 8002c90:	f00a fafc 	bl	800d28c <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 3, 0);
 8002c94:	2200      	movs	r2, #0
 8002c96:	2103      	movs	r1, #3
 8002c98:	205c      	movs	r0, #92	; 0x5c
 8002c9a:	f009 fc33 	bl	800c504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002c9e:	205c      	movs	r0, #92	; 0x5c
 8002ca0:	f009 fc4c 	bl	800c53c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	3728      	adds	r7, #40	; 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	a0001000 	.word	0xa0001000
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40021400 	.word	0x40021400
 8002cb8:	40020400 	.word	0x40020400

08002cbc <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a0c      	ldr	r2, [pc, #48]	; (8002cfc <HAL_QSPI_MspDeInit+0x40>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d111      	bne.n	8002cf2 <HAL_QSPI_MspDeInit+0x36>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <HAL_QSPI_MspDeInit+0x44>)
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	4a0b      	ldr	r2, [pc, #44]	; (8002d00 <HAL_QSPI_MspDeInit+0x44>)
 8002cd4:	f023 0302 	bic.w	r3, r3, #2
 8002cd8:	6393      	str	r3, [r2, #56]	; 0x38
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8002cda:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002cde:	4809      	ldr	r0, [pc, #36]	; (8002d04 <HAL_QSPI_MspDeInit+0x48>)
 8002ce0:	f00a fc80 	bl	800d5e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 8002ce4:	2144      	movs	r1, #68	; 0x44
 8002ce6:	4808      	ldr	r0, [pc, #32]	; (8002d08 <HAL_QSPI_MspDeInit+0x4c>)
 8002ce8:	f00a fc7c 	bl	800d5e4 <HAL_GPIO_DeInit>

    /* QUADSPI interrupt Deinit */
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8002cec:	205c      	movs	r0, #92	; 0x5c
 8002cee:	f009 fc33 	bl	800c558 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	a0001000 	.word	0xa0001000
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40021400 	.word	0x40021400
 8002d08:	40020400 	.word	0x40020400

08002d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	4a10      	ldr	r2, [pc, #64]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d34:	6453      	str	r3, [r2, #68]	; 0x44
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d42:	2200      	movs	r2, #0
 8002d44:	210f      	movs	r1, #15
 8002d46:	f06f 0001 	mvn.w	r0, #1
 8002d4a:	f009 fbdb 	bl	800c504 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800

08002d5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08c      	sub	sp, #48	; 0x30
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	2036      	movs	r0, #54	; 0x36
 8002d72:	f009 fbc7 	bl	800c504 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d76:	2036      	movs	r0, #54	; 0x36
 8002d78:	f009 fbe0 	bl	800c53c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d7c:	4b1f      	ldr	r3, [pc, #124]	; (8002dfc <HAL_InitTick+0xa0>)
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	4a1e      	ldr	r2, [pc, #120]	; (8002dfc <HAL_InitTick+0xa0>)
 8002d82:	f043 0310 	orr.w	r3, r3, #16
 8002d86:	6413      	str	r3, [r2, #64]	; 0x40
 8002d88:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <HAL_InitTick+0xa0>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d94:	f107 0210 	add.w	r2, r7, #16
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f00c fcde 	bl	800f760 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002da4:	f00c fcc8 	bl	800f738 <HAL_RCC_GetPCLK1Freq>
 8002da8:	4603      	mov	r3, r0
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <HAL_InitTick+0xa4>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0c9b      	lsrs	r3, r3, #18
 8002db8:	3b01      	subs	r3, #1
 8002dba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_InitTick+0xa8>)
 8002dbe:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <HAL_InitTick+0xac>)
 8002dc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002dc2:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <HAL_InitTick+0xa8>)
 8002dc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002dc8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002dca:	4a0e      	ldr	r2, [pc, #56]	; (8002e04 <HAL_InitTick+0xa8>)
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_InitTick+0xa8>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_InitTick+0xa8>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002ddc:	4809      	ldr	r0, [pc, #36]	; (8002e04 <HAL_InitTick+0xa8>)
 8002dde:	f00d f998 	bl	8010112 <HAL_TIM_Base_Init>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d104      	bne.n	8002df2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002de8:	4806      	ldr	r0, [pc, #24]	; (8002e04 <HAL_InitTick+0xa8>)
 8002dea:	f00d f9e9 	bl	80101c0 <HAL_TIM_Base_Start_IT>
 8002dee:	4603      	mov	r3, r0
 8002df0:	e000      	b.n	8002df4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3730      	adds	r7, #48	; 0x30
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	431bde83 	.word	0x431bde83
 8002e04:	20056fe4 	.word	0x20056fe4
 8002e08:	40001000 	.word	0x40001000

08002e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e10:	e7fe      	b.n	8002e10 <NMI_Handler+0x4>

08002e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e16:	e7fe      	b.n	8002e16 <HardFault_Handler+0x4>

08002e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e1c:	e7fe      	b.n	8002e1c <MemManage_Handler+0x4>

08002e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e22:	e7fe      	b.n	8002e22 <BusFault_Handler+0x4>

08002e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e28:	e7fe      	b.n	8002e28 <UsageFault_Handler+0x4>

08002e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <DMA1_Stream0_IRQHandler+0x10>)
 8002e3e:	f009 fdb3 	bl	800c9a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20057128 	.word	0x20057128

08002e4c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <DMA1_Stream4_IRQHandler+0x10>)
 8002e52:	f009 fda9 	bl	800c9a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200570c8 	.word	0x200570c8

08002e60 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e64:	4802      	ldr	r0, [pc, #8]	; (8002e70 <CAN1_RX0_IRQHandler+0x10>)
 8002e66:	f009 f842 	bl	800beee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20056e04 	.word	0x20056e04

08002e74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e78:	4802      	ldr	r0, [pc, #8]	; (8002e84 <TIM6_DAC_IRQHandler+0x10>)
 8002e7a:	f00d fe5b 	bl	8010b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20056fe4 	.word	0x20056fe4

08002e88 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002e8c:	4802      	ldr	r0, [pc, #8]	; (8002e98 <CAN2_RX0_IRQHandler+0x10>)
 8002e8e:	f009 f82e 	bl	800beee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20056d9c 	.word	0x20056d9c

08002e9c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002ea0:	4802      	ldr	r0, [pc, #8]	; (8002eac <LTDC_IRQHandler+0x10>)
 8002ea2:	f00a fdc7 	bl	800da34 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20056ef0 	.word	0x20056ef0

08002eb0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002eb4:	4802      	ldr	r0, [pc, #8]	; (8002ec0 <DMA2D_IRQHandler+0x10>)
 8002eb6:	f00a f83b 	bl	800cf30 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20056e50 	.word	0x20056e50

08002ec4 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8002ec8:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <QUADSPI_IRQHandler+0x10>)
 8002eca:	f00b f96b 	bl	800e1a4 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20056f98 	.word	0x20056f98

08002ed8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
	return 1;
 8002edc:	2301      	movs	r3, #1
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <_kill>:

int _kill(int pid, int sig)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ef2:	f023 fdaf 	bl	8026a54 <__errno>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2216      	movs	r2, #22
 8002efa:	601a      	str	r2, [r3, #0]
	return -1;
 8002efc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <_exit>:

void _exit (int status)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f10:	f04f 31ff 	mov.w	r1, #4294967295
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ffe7 	bl	8002ee8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f1a:	e7fe      	b.n	8002f1a <_exit+0x12>

08002f1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e00a      	b.n	8002f44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f2e:	f3af 8000 	nop.w
 8002f32:	4601      	mov	r1, r0
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	60ba      	str	r2, [r7, #8]
 8002f3a:	b2ca      	uxtb	r2, r1
 8002f3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	3301      	adds	r3, #1
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	dbf0      	blt.n	8002f2e <_read+0x12>
	}

return len;
 8002f4c:	687b      	ldr	r3, [r7, #4]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e009      	b.n	8002f7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	60ba      	str	r2, [r7, #8]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	dbf1      	blt.n	8002f68 <_write+0x12>
	}
	return len;
 8002f84:	687b      	ldr	r3, [r7, #4]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <_close>:

int _close(int file)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
	return -1;
 8002f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fb6:	605a      	str	r2, [r3, #4]
	return 0;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <_isatty>:

int _isatty(int file)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
	return 1;
 8002fce:	2301      	movs	r3, #1
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
	return 0;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003000:	4a14      	ldr	r2, [pc, #80]	; (8003054 <_sbrk+0x5c>)
 8003002:	4b15      	ldr	r3, [pc, #84]	; (8003058 <_sbrk+0x60>)
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800300c:	4b13      	ldr	r3, [pc, #76]	; (800305c <_sbrk+0x64>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d102      	bne.n	800301a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <_sbrk+0x64>)
 8003016:	4a12      	ldr	r2, [pc, #72]	; (8003060 <_sbrk+0x68>)
 8003018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <_sbrk+0x64>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	429a      	cmp	r2, r3
 8003026:	d207      	bcs.n	8003038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003028:	f023 fd14 	bl	8026a54 <__errno>
 800302c:	4603      	mov	r3, r0
 800302e:	220c      	movs	r2, #12
 8003030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003032:	f04f 33ff 	mov.w	r3, #4294967295
 8003036:	e009      	b.n	800304c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003038:	4b08      	ldr	r3, [pc, #32]	; (800305c <_sbrk+0x64>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800303e:	4b07      	ldr	r3, [pc, #28]	; (800305c <_sbrk+0x64>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	4a05      	ldr	r2, [pc, #20]	; (800305c <_sbrk+0x64>)
 8003048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800304a:	68fb      	ldr	r3, [r7, #12]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	20080000 	.word	0x20080000
 8003058:	00000400 	.word	0x00000400
 800305c:	2000028c 	.word	0x2000028c
 8003060:	200571e0 	.word	0x200571e0

08003064 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08e      	sub	sp, #56	; 0x38
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800306a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003078:	f107 031c 	add.w	r3, r7, #28
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003084:	463b      	mov	r3, r7
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	60da      	str	r2, [r3, #12]
 8003090:	611a      	str	r2, [r3, #16]
 8003092:	615a      	str	r2, [r3, #20]
 8003094:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003096:	4b2c      	ldr	r3, [pc, #176]	; (8003148 <MX_TIM3_Init+0xe4>)
 8003098:	4a2c      	ldr	r2, [pc, #176]	; (800314c <MX_TIM3_Init+0xe8>)
 800309a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800309c:	4b2a      	ldr	r3, [pc, #168]	; (8003148 <MX_TIM3_Init+0xe4>)
 800309e:	2200      	movs	r2, #0
 80030a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030a2:	4b29      	ldr	r3, [pc, #164]	; (8003148 <MX_TIM3_Init+0xe4>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 134;
 80030a8:	4b27      	ldr	r3, [pc, #156]	; (8003148 <MX_TIM3_Init+0xe4>)
 80030aa:	2286      	movs	r2, #134	; 0x86
 80030ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ae:	4b26      	ldr	r3, [pc, #152]	; (8003148 <MX_TIM3_Init+0xe4>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030b4:	4b24      	ldr	r3, [pc, #144]	; (8003148 <MX_TIM3_Init+0xe4>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030ba:	4823      	ldr	r0, [pc, #140]	; (8003148 <MX_TIM3_Init+0xe4>)
 80030bc:	f00d f829 	bl	8010112 <HAL_TIM_Base_Init>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80030c6:	f7ff fd3d 	bl	8002b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030d4:	4619      	mov	r1, r3
 80030d6:	481c      	ldr	r0, [pc, #112]	; (8003148 <MX_TIM3_Init+0xe4>)
 80030d8:	f00d ff5c 	bl	8010f94 <HAL_TIM_ConfigClockSource>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80030e2:	f7ff fd2f 	bl	8002b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80030e6:	4818      	ldr	r0, [pc, #96]	; (8003148 <MX_TIM3_Init+0xe4>)
 80030e8:	f00d f8e2 	bl	80102b0 <HAL_TIM_PWM_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80030f2:	f7ff fd27 	bl	8002b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030fe:	f107 031c 	add.w	r3, r7, #28
 8003102:	4619      	mov	r1, r3
 8003104:	4810      	ldr	r0, [pc, #64]	; (8003148 <MX_TIM3_Init+0xe4>)
 8003106:	f00e fccd 	bl	8011aa4 <HAL_TIMEx_MasterConfigSynchronization>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003110:	f7ff fd18 	bl	8002b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003114:	2360      	movs	r3, #96	; 0x60
 8003116:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003120:	2300      	movs	r3, #0
 8003122:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003124:	463b      	mov	r3, r7
 8003126:	2200      	movs	r2, #0
 8003128:	4619      	mov	r1, r3
 800312a:	4807      	ldr	r0, [pc, #28]	; (8003148 <MX_TIM3_Init+0xe4>)
 800312c:	f00d fe22 	bl	8010d74 <HAL_TIM_PWM_ConfigChannel>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003136:	f7ff fd05 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800313a:	4803      	ldr	r0, [pc, #12]	; (8003148 <MX_TIM3_Init+0xe4>)
 800313c:	f000 f91e 	bl	800337c <HAL_TIM_MspPostInit>

}
 8003140:	bf00      	nop
 8003142:	3738      	adds	r7, #56	; 0x38
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	2005707c 	.word	0x2005707c
 800314c:	40000400 	.word	0x40000400

08003150 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08e      	sub	sp, #56	; 0x38
 8003154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003164:	f107 031c 	add.w	r3, r7, #28
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003170:	463b      	mov	r3, r7
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	605a      	str	r2, [r3, #4]
 8003178:	609a      	str	r2, [r3, #8]
 800317a:	60da      	str	r2, [r3, #12]
 800317c:	611a      	str	r2, [r3, #16]
 800317e:	615a      	str	r2, [r3, #20]
 8003180:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003182:	4b2c      	ldr	r3, [pc, #176]	; (8003234 <MX_TIM4_Init+0xe4>)
 8003184:	4a2c      	ldr	r2, [pc, #176]	; (8003238 <MX_TIM4_Init+0xe8>)
 8003186:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003188:	4b2a      	ldr	r3, [pc, #168]	; (8003234 <MX_TIM4_Init+0xe4>)
 800318a:	2200      	movs	r2, #0
 800318c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800318e:	4b29      	ldr	r3, [pc, #164]	; (8003234 <MX_TIM4_Init+0xe4>)
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 215;
 8003194:	4b27      	ldr	r3, [pc, #156]	; (8003234 <MX_TIM4_Init+0xe4>)
 8003196:	22d7      	movs	r2, #215	; 0xd7
 8003198:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800319a:	4b26      	ldr	r3, [pc, #152]	; (8003234 <MX_TIM4_Init+0xe4>)
 800319c:	2200      	movs	r2, #0
 800319e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a0:	4b24      	ldr	r3, [pc, #144]	; (8003234 <MX_TIM4_Init+0xe4>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80031a6:	4823      	ldr	r0, [pc, #140]	; (8003234 <MX_TIM4_Init+0xe4>)
 80031a8:	f00c ffb3 	bl	8010112 <HAL_TIM_Base_Init>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80031b2:	f7ff fcc7 	bl	8002b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80031bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031c0:	4619      	mov	r1, r3
 80031c2:	481c      	ldr	r0, [pc, #112]	; (8003234 <MX_TIM4_Init+0xe4>)
 80031c4:	f00d fee6 	bl	8010f94 <HAL_TIM_ConfigClockSource>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80031ce:	f7ff fcb9 	bl	8002b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80031d2:	4818      	ldr	r0, [pc, #96]	; (8003234 <MX_TIM4_Init+0xe4>)
 80031d4:	f00d f86c 	bl	80102b0 <HAL_TIM_PWM_Init>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80031de:	f7ff fcb1 	bl	8002b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031ea:	f107 031c 	add.w	r3, r7, #28
 80031ee:	4619      	mov	r1, r3
 80031f0:	4810      	ldr	r0, [pc, #64]	; (8003234 <MX_TIM4_Init+0xe4>)
 80031f2:	f00e fc57 	bl	8011aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80031fc:	f7ff fca2 	bl	8002b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003200:	2360      	movs	r3, #96	; 0x60
 8003202:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003208:	2300      	movs	r3, #0
 800320a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003210:	463b      	mov	r3, r7
 8003212:	2200      	movs	r2, #0
 8003214:	4619      	mov	r1, r3
 8003216:	4807      	ldr	r0, [pc, #28]	; (8003234 <MX_TIM4_Init+0xe4>)
 8003218:	f00d fdac 	bl	8010d74 <HAL_TIM_PWM_ConfigChannel>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003222:	f7ff fc8f 	bl	8002b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003226:	4803      	ldr	r0, [pc, #12]	; (8003234 <MX_TIM4_Init+0xe4>)
 8003228:	f000 f8a8 	bl	800337c <HAL_TIM_MspPostInit>

}
 800322c:	bf00      	nop
 800322e:	3738      	adds	r7, #56	; 0x38
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20057030 	.word	0x20057030
 8003238:	40000800 	.word	0x40000800

0800323c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a45      	ldr	r2, [pc, #276]	; (8003360 <HAL_TIM_Base_MspInit+0x124>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d142      	bne.n	80032d4 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800324e:	4b45      	ldr	r3, [pc, #276]	; (8003364 <HAL_TIM_Base_MspInit+0x128>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	4a44      	ldr	r2, [pc, #272]	; (8003364 <HAL_TIM_Base_MspInit+0x128>)
 8003254:	f043 0302 	orr.w	r3, r3, #2
 8003258:	6413      	str	r3, [r2, #64]	; 0x40
 800325a:	4b42      	ldr	r3, [pc, #264]	; (8003364 <HAL_TIM_Base_MspInit+0x128>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8003266:	4b40      	ldr	r3, [pc, #256]	; (8003368 <HAL_TIM_Base_MspInit+0x12c>)
 8003268:	4a40      	ldr	r2, [pc, #256]	; (800336c <HAL_TIM_Base_MspInit+0x130>)
 800326a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 800326c:	4b3e      	ldr	r3, [pc, #248]	; (8003368 <HAL_TIM_Base_MspInit+0x12c>)
 800326e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003272:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003274:	4b3c      	ldr	r3, [pc, #240]	; (8003368 <HAL_TIM_Base_MspInit+0x12c>)
 8003276:	2240      	movs	r2, #64	; 0x40
 8003278:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800327a:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <HAL_TIM_Base_MspInit+0x12c>)
 800327c:	2200      	movs	r2, #0
 800327e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8003280:	4b39      	ldr	r3, [pc, #228]	; (8003368 <HAL_TIM_Base_MspInit+0x12c>)
 8003282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003286:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003288:	4b37      	ldr	r3, [pc, #220]	; (8003368 <HAL_TIM_Base_MspInit+0x12c>)
 800328a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800328e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003290:	4b35      	ldr	r3, [pc, #212]	; (8003368 <HAL_TIM_Base_MspInit+0x12c>)
 8003292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003296:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8003298:	4b33      	ldr	r3, [pc, #204]	; (8003368 <HAL_TIM_Base_MspInit+0x12c>)
 800329a:	2200      	movs	r2, #0
 800329c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800329e:	4b32      	ldr	r3, [pc, #200]	; (8003368 <HAL_TIM_Base_MspInit+0x12c>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032a4:	4b30      	ldr	r3, [pc, #192]	; (8003368 <HAL_TIM_Base_MspInit+0x12c>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80032aa:	482f      	ldr	r0, [pc, #188]	; (8003368 <HAL_TIM_Base_MspInit+0x12c>)
 80032ac:	f009 fa4c 	bl	800c748 <HAL_DMA_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 80032b6:	f7ff fc45 	bl	8002b44 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2a      	ldr	r2, [pc, #168]	; (8003368 <HAL_TIM_Base_MspInit+0x12c>)
 80032be:	625a      	str	r2, [r3, #36]	; 0x24
 80032c0:	4a29      	ldr	r2, [pc, #164]	; (8003368 <HAL_TIM_Base_MspInit+0x12c>)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a27      	ldr	r2, [pc, #156]	; (8003368 <HAL_TIM_Base_MspInit+0x12c>)
 80032ca:	639a      	str	r2, [r3, #56]	; 0x38
 80032cc:	4a26      	ldr	r2, [pc, #152]	; (8003368 <HAL_TIM_Base_MspInit+0x12c>)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80032d2:	e040      	b.n	8003356 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM4)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a25      	ldr	r2, [pc, #148]	; (8003370 <HAL_TIM_Base_MspInit+0x134>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d13b      	bne.n	8003356 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032de:	4b21      	ldr	r3, [pc, #132]	; (8003364 <HAL_TIM_Base_MspInit+0x128>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	4a20      	ldr	r2, [pc, #128]	; (8003364 <HAL_TIM_Base_MspInit+0x128>)
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ea:	4b1e      	ldr	r3, [pc, #120]	; (8003364 <HAL_TIM_Base_MspInit+0x128>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80032f6:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <HAL_TIM_Base_MspInit+0x138>)
 80032f8:	4a1f      	ldr	r2, [pc, #124]	; (8003378 <HAL_TIM_Base_MspInit+0x13c>)
 80032fa:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80032fc:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <HAL_TIM_Base_MspInit+0x138>)
 80032fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003302:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003304:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <HAL_TIM_Base_MspInit+0x138>)
 8003306:	2240      	movs	r2, #64	; 0x40
 8003308:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800330a:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <HAL_TIM_Base_MspInit+0x138>)
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003310:	4b18      	ldr	r3, [pc, #96]	; (8003374 <HAL_TIM_Base_MspInit+0x138>)
 8003312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003316:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003318:	4b16      	ldr	r3, [pc, #88]	; (8003374 <HAL_TIM_Base_MspInit+0x138>)
 800331a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800331e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <HAL_TIM_Base_MspInit+0x138>)
 8003322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003326:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <HAL_TIM_Base_MspInit+0x138>)
 800332a:	2200      	movs	r2, #0
 800332c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_TIM_Base_MspInit+0x138>)
 8003330:	2200      	movs	r2, #0
 8003332:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <HAL_TIM_Base_MspInit+0x138>)
 8003336:	2200      	movs	r2, #0
 8003338:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 800333a:	480e      	ldr	r0, [pc, #56]	; (8003374 <HAL_TIM_Base_MspInit+0x138>)
 800333c:	f009 fa04 	bl	800c748 <HAL_DMA_Init>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 8003346:	f7ff fbfd 	bl	8002b44 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a09      	ldr	r2, [pc, #36]	; (8003374 <HAL_TIM_Base_MspInit+0x138>)
 800334e:	625a      	str	r2, [r3, #36]	; 0x24
 8003350:	4a08      	ldr	r2, [pc, #32]	; (8003374 <HAL_TIM_Base_MspInit+0x138>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40000400 	.word	0x40000400
 8003364:	40023800 	.word	0x40023800
 8003368:	200570c8 	.word	0x200570c8
 800336c:	40026070 	.word	0x40026070
 8003370:	40000800 	.word	0x40000800
 8003374:	20057128 	.word	0x20057128
 8003378:	40026010 	.word	0x40026010

0800337c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	; 0x28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003384:	f107 0314 	add.w	r3, r7, #20
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a22      	ldr	r2, [pc, #136]	; (8003424 <HAL_TIM_MspPostInit+0xa8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d11c      	bne.n	80033d8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339e:	4b22      	ldr	r3, [pc, #136]	; (8003428 <HAL_TIM_MspPostInit+0xac>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	4a21      	ldr	r2, [pc, #132]	; (8003428 <HAL_TIM_MspPostInit+0xac>)
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	6313      	str	r3, [r2, #48]	; 0x30
 80033aa:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <HAL_TIM_MspPostInit+0xac>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033b6:	2310      	movs	r3, #16
 80033b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ba:	2302      	movs	r3, #2
 80033bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c2:	2300      	movs	r3, #0
 80033c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033c6:	2302      	movs	r3, #2
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ca:	f107 0314 	add.w	r3, r7, #20
 80033ce:	4619      	mov	r1, r3
 80033d0:	4816      	ldr	r0, [pc, #88]	; (800342c <HAL_TIM_MspPostInit+0xb0>)
 80033d2:	f009 ff5b 	bl	800d28c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80033d6:	e021      	b.n	800341c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a14      	ldr	r2, [pc, #80]	; (8003430 <HAL_TIM_MspPostInit+0xb4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d11c      	bne.n	800341c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033e2:	4b11      	ldr	r3, [pc, #68]	; (8003428 <HAL_TIM_MspPostInit+0xac>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a10      	ldr	r2, [pc, #64]	; (8003428 <HAL_TIM_MspPostInit+0xac>)
 80033e8:	f043 0308 	orr.w	r3, r3, #8
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <HAL_TIM_MspPostInit+0xac>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80033fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003400:	2302      	movs	r3, #2
 8003402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003408:	2300      	movs	r3, #0
 800340a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800340c:	2302      	movs	r3, #2
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003410:	f107 0314 	add.w	r3, r7, #20
 8003414:	4619      	mov	r1, r3
 8003416:	4807      	ldr	r0, [pc, #28]	; (8003434 <HAL_TIM_MspPostInit+0xb8>)
 8003418:	f009 ff38 	bl	800d28c <HAL_GPIO_Init>
}
 800341c:	bf00      	nop
 800341e:	3728      	adds	r7, #40	; 0x28
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40000400 	.word	0x40000400
 8003428:	40023800 	.word	0x40023800
 800342c:	40020400 	.word	0x40020400
 8003430:	40000800 	.word	0x40000800
 8003434:	40020c00 	.word	0x40020c00

08003438 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8003438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003470 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800343c:	480d      	ldr	r0, [pc, #52]	; (8003474 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800343e:	490e      	ldr	r1, [pc, #56]	; (8003478 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003440:	4a0e      	ldr	r2, [pc, #56]	; (800347c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003444:	e002      	b.n	800344c <LoopCopyDataInit>

08003446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800344a:	3304      	adds	r3, #4

0800344c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800344c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800344e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003450:	d3f9      	bcc.n	8003446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003452:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003454:	4c0b      	ldr	r4, [pc, #44]	; (8003484 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003458:	e001      	b.n	800345e <LoopFillZerobss>

0800345a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800345a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800345c:	3204      	adds	r2, #4

0800345e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800345e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003460:	d3fb      	bcc.n	800345a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003462:	f007 fcb3 	bl	800adcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003466:	f023 fb0d 	bl	8026a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800346a:	f7ff fabb 	bl	80029e4 <main>
  bx  lr    
 800346e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003470:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003478:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 800347c:	080d99d4 	.word	0x080d99d4
  ldr r2, =_sbss
 8003480:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8003484:	200571dc 	.word	0x200571dc

08003488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003488:	e7fe      	b.n	8003488 <ADC_IRQHandler>

0800348a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800348e:	f001 fbdf 	bl	8004c50 <touchgfx_init>
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}

08003496 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800349a:	f001 fc03 	bl	8004ca4 <touchgfx_taskEntry>
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
    {
 80034ac:	4a04      	ldr	r2, [pc, #16]	; (80034c0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	601a      	str	r2, [r3, #0]
    }
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	0802bf84 	.word	0x0802bf84

080034c4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
    }
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ffe9 	bl	80034a4 <_ZN8touchgfx15TouchControllerD1Ev>
 80034d2:	2104      	movs	r1, #4
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f023 f956 	bl	8026786 <_ZdlPvj>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	4a05      	ldr	r2, [pc, #20]	; (8003534 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ffbd 	bl	80034a4 <_ZN8touchgfx15TouchControllerD1Ev>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	0802bf6c 	.word	0x0802bf6c

08003538 <_ZN20STM32TouchControllerD0Ev>:
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ffe7 	bl	8003514 <_ZN20STM32TouchControllerD1Ev>
 8003546:	2104      	movs	r1, #4
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f023 f91c 	bl	8026786 <_ZdlPvj>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]

}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	71fb      	strb	r3, [r7, #7]

}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	71fb      	strb	r3, [r7, #7]

}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <_ZN8touchgfx3HALD1Ev>:
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
    {
 80035a4:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	601a      	str	r2, [r3, #0]
    }
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	0802ce90 	.word	0x0802ce90

080035bc <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
    }
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ffe9 	bl	800359c <_ZN8touchgfx3HALD1Ev>
 80035ca:	217c      	movs	r1, #124	; 0x7c
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f023 f8da 	bl	8026786 <_ZdlPvj>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4610      	mov	r0, r2
 8003624:	4798      	blx	r3
 8003626:	4603      	mov	r3, r0
 8003628:	e000      	b.n	800362c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 800362a:	2300      	movs	r3, #0
        }
    }
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f013 f9b9 	bl	80169b4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	33a0      	adds	r3, #160	; 0xa0
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4798      	blx	r3
    }
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
    {
        return false;
 8003660:	2300      	movs	r3, #0
    }
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d106      	bne.n	8003692 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8003686:	4a12      	ldr	r2, [pc, #72]	; (80036d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8003688:	f44f 7125 	mov.w	r1, #660	; 0x294
 800368c:	4811      	ldr	r0, [pc, #68]	; (80036d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 800368e:	f023 f9af 	bl	80269f0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 80036b2:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	bf14      	ite	ne
 80036ba:	2301      	movne	r3, #1
 80036bc:	2300      	moveq	r3, #0
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 80036c2:	701a      	strb	r2, [r3, #0]
    }
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	0802b248 	.word	0x0802b248
 80036d0:	0802b280 	.word	0x0802b280
 80036d4:	0802b2d0 	.word	0x0802b2d0
 80036d8:	2005677a 	.word	0x2005677a
 80036dc:	2005677b 	.word	0x2005677b

080036e0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80036e8:	2300      	movs	r3, #0
    }
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	460b      	mov	r3, r1
 8003700:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	2b00      	cmp	r3, #0
 8003708:	d004      	beq.n	8003714 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	4610      	mov	r0, r2
 8003712:	4798      	blx	r3
        }
    }
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3318      	adds	r3, #24
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4610      	mov	r0, r2
 8003734:	4798      	blx	r3
 8003736:	4603      	mov	r3, r0
    }
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003754:	429a      	cmp	r2, r3
 8003756:	d017      	beq.n	8003788 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8003758:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d12a      	bne.n	80037b6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8003760:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8003762:	881a      	ldrh	r2, [r3, #0]
 8003764:	4b19      	ldr	r3, [pc, #100]	; (80037cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8003766:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8003768:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800376e:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8003770:	4b16      	ldr	r3, [pc, #88]	; (80037cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8003772:	881a      	ldrh	r2, [r3, #0]
 8003774:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8003776:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8003778:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800377a:	881a      	ldrh	r2, [r3, #0]
 800377c:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800377e:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8003780:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8003786:	e016      	b.n	80037b6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8003788:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d012      	beq.n	80037b6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8003792:	881a      	ldrh	r2, [r3, #0]
 8003794:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8003796:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800379a:	881a      	ldrh	r2, [r3, #0]
 800379c:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800379e:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80037a2:	881a      	ldrh	r2, [r3, #0]
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80037a6:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80037a8:	4b08      	ldr	r3, [pc, #32]	; (80037cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80037aa:	881a      	ldrh	r2, [r3, #0]
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80037ae:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
    }
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	20056774 	.word	0x20056774
 80037c8:	20056770 	.word	0x20056770
 80037cc:	20056776 	.word	0x20056776
 80037d0:	20056772 	.word	0x20056772
 80037d4:	20056778 	.word	0x20056778

080037d8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f012 fab7 	bl	8015d56 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80037e8:	bf00      	nop
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	4a05      	ldr	r2, [pc, #20]	; (8003810 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff fecb 	bl	800359c <_ZN8touchgfx3HALD1Ev>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	0802c2e8 	.word	0x0802c2e8

08003814 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ffe7 	bl	80037f0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8003822:	217c      	movs	r1, #124	; 0x7c
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f022 ffae 	bl	8026786 <_ZdlPvj>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff ffca 	bl	80037d8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <_ZN11TouchGFXHAL10initializeEv>:
{
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXHAL::initialize() {
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.
	// Please note, HAL::initialize() must be called to initialize the framework.

	TouchGFXGeneratedHAL::initialize();
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4618      	mov	r0, r3
 8003858:	f001 fee0 	bl	800561c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
/**
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const {
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of getTFTFrameBuffer().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4618      	mov	r0, r3
 8003870:	f001 ff7a 	bl	8005768 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8003874:	4603      	mov	r3, r0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
/**
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t *address) {
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
	// Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6839      	ldr	r1, [r7, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f001 ff79 	bl	8005784 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 *
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect &rect) {
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
	// be called to notify the touchgfx framework that flush has been performed.
	// To calculate he start adress of rect,
	// use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
	// defined in TouchGFXGeneratedHAL.cpp

	TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6839      	ldr	r1, [r7, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 ff81 	bl	80057b0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void *RESTRICT dest, const void *RESTRICT src,
		uint32_t numBytes) {
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
 80038c2:	603b      	str	r3, [r7, #0]
	return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	f001 ff8e 	bl	80057ec <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 80038d0:	4603      	mov	r3, r0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <_ZN11TouchGFXHAL19configureInterruptsEv>:

/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts() {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of configureInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::configureInterrupts();
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 feca 	bl	8005680 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

	// custom code
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80038ec:	4b0b      	ldr	r3, [pc, #44]	; (800391c <_ZN11TouchGFXHAL19configureInterruptsEv+0x40>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <_ZN11TouchGFXHAL19configureInterruptsEv+0x44>)
 80038fe:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <_ZN11TouchGFXHAL19configureInterruptsEv+0x40>)
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	b29b      	uxth	r3, r3
 8003906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	4b04      	ldr	r3, [pc, #16]	; (8003924 <_ZN11TouchGFXHAL19configureInterruptsEv+0x48>)
 8003912:	801a      	strh	r2, [r3, #0]
}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40016800 	.word	0x40016800
 8003920:	20000290 	.word	0x20000290
 8003924:	20000292 	.word	0x20000292

08003928 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts() {
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableInterrupts();
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4618      	mov	r0, r3
 8003934:	f001 feb4 	bl	80056a0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts() {
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of disableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::disableInterrupts();
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4618      	mov	r0, r3
 800394c:	f001 feb6 	bl	80056bc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:

/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt() {
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableLCDControllerInterrupt().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4618      	mov	r0, r3
 8003964:	f001 feb8 	bl	80056d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	4a05      	ldr	r2, [pc, #20]	; (8003990 <_ZN11TouchGFXHALD1Ev+0x20>)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff35 	bl	80037f0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	0802bf9c 	.word	0x0802bf9c

08003994 <_ZN11TouchGFXHALD0Ev>:
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff ffe7 	bl	8003970 <_ZN11TouchGFXHALD1Ev>
 80039a2:	217c      	movs	r1, #124	; 0x7c
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f022 feee 	bl	8026786 <_ZdlPvj>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80039b8:	2200      	movs	r2, #0
 80039ba:	2101      	movs	r1, #1
 80039bc:	2001      	movs	r0, #1
 80039be:	f00e fbbd 	bl	801213c <osSemaphoreNew>
 80039c2:	4603      	mov	r3, r0
 80039c4:	4a0f      	ldr	r2, [pc, #60]	; (8003a04 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80039c6:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d105      	bne.n	80039dc <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80039d0:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80039d2:	4a0e      	ldr	r2, [pc, #56]	; (8003a0c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80039d4:	2126      	movs	r1, #38	; 0x26
 80039d6:	480e      	ldr	r0, [pc, #56]	; (8003a10 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80039d8:	f023 f80a 	bl	80269f0 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80039dc:	2200      	movs	r2, #0
 80039de:	2104      	movs	r1, #4
 80039e0:	2001      	movs	r0, #1
 80039e2:	f00e fd05 	bl	80123f0 <osMessageQueueNew>
 80039e6:	4603      	mov	r3, r0
 80039e8:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80039ea:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d105      	bne.n	8003a00 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 80039f4:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80039f6:	4a05      	ldr	r2, [pc, #20]	; (8003a0c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80039f8:	212a      	movs	r1, #42	; 0x2a
 80039fa:	4805      	ldr	r0, [pc, #20]	; (8003a10 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80039fc:	f022 fff8 	bl	80269f0 <__assert_func>
}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000294 	.word	0x20000294
 8003a08:	0802b318 	.word	0x0802b318
 8003a0c:	0802b364 	.word	0x0802b364
 8003a10:	0802b394 	.word	0x0802b394
 8003a14:	20000298 	.word	0x20000298
 8003a18:	0802b410 	.word	0x0802b410

08003a1c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f04f 31ff 	mov.w	r1, #4294967295
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f00e fc23 	bl	8012274 <osSemaphoreAcquire>
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000294 	.word	0x20000294

08003a38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8003a3c:	4b03      	ldr	r3, [pc, #12]	; (8003a4c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f00e fc7d 	bl	8012340 <osSemaphoreRelease>
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000294 	.word	0x20000294

08003a50 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f00e fc0a 	bl	8012274 <osSemaphoreAcquire>
}
 8003a60:	bf00      	nop
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20000294 	.word	0x20000294

08003a68 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f00e fc65 	bl	8012340 <osSemaphoreRelease>
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000294 	.word	0x20000294

08003a80 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	4903      	ldr	r1, [pc, #12]	; (8003a9c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8003a8e:	f00e fd35 	bl	80124fc <osMessageQueuePut>
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000298 	.word	0x20000298
 8003a9c:	2000000c 	.word	0x2000000c

08003aa0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8003aa6:	4b09      	ldr	r3, [pc, #36]	; (8003acc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	1d39      	adds	r1, r7, #4
 8003aac:	2300      	movs	r3, #0
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f00e fd98 	bl	80125e4 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	1d39      	adds	r1, r7, #4
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f00e fd90 	bl	80125e4 <osMessageQueueGet>
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20000298 	.word	0x20000298

08003ad0 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f00e faff 	bl	80120e0 <osDelay>
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <_ZN8touchgfx10OSWrappers9taskYieldEv>:
 * system to change to another task of similar priority. When
 * running without an operating system, the implementation can run
 * a very short task and return.
 */
void OSWrappers::taskYield()
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	af00      	add	r7, sp, #0
    osThreadYield();
 8003aee:	f00e fac5 	bl	801207c <osThreadYield>
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <__NVIC_EnableIRQ>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	db0b      	blt.n	8003b22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	f003 021f 	and.w	r2, r3, #31
 8003b10:	4907      	ldr	r1, [pc, #28]	; (8003b30 <__NVIC_EnableIRQ+0x38>)
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	2001      	movs	r0, #1
 8003b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	e000e100 	.word	0xe000e100

08003b34 <__NVIC_DisableIRQ>:
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	db12      	blt.n	8003b6c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	f003 021f 	and.w	r2, r3, #31
 8003b4c:	490a      	ldr	r1, [pc, #40]	; (8003b78 <__NVIC_DisableIRQ+0x44>)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	2001      	movs	r0, #1
 8003b56:	fa00 f202 	lsl.w	r2, r0, r2
 8003b5a:	3320      	adds	r3, #32
 8003b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b60:	f3bf 8f4f 	dsb	sy
}
 8003b64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b66:	f3bf 8f6f 	isb	sy
}
 8003b6a:	bf00      	nop
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000e100 	.word	0xe000e100

08003b7c <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
        : color(0)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
    {
    }
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
    {
        return color;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
    }
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
    {
 8003bb8:	4a04      	ldr	r2, [pc, #16]	; (8003bcc <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	601a      	str	r2, [r3, #0]
    }
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	0802c0b8 	.word	0x0802c0b8

08003bd0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
    }
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff ffe9 	bl	8003bb0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8003bde:	2104      	movs	r1, #4
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f022 fdd0 	bl	8026786 <_ZdlPvj>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3344      	adds	r3, #68	; 0x44
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	4798      	blx	r3
    }
 8003c04:	bf00      	nop
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
    {
 8003c14:	4a04      	ldr	r2, [pc, #16]	; (8003c28 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	601a      	str	r2, [r3, #0]
    }
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	0802d3d0 	.word	0x0802d3d0

08003c2c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
    }
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ffe9 	bl	8003c0c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8003c3a:	210c      	movs	r1, #12
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f022 fda2 	bl	8026786 <_ZdlPvj>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8003c56:	4a09      	ldr	r2, [pc, #36]	; (8003c7c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	721a      	strb	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	725a      	strb	r2, [r3, #9]
    {
    }
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	0802d3d0 	.word	0x0802d3d0

08003c80 <_ZN10STM32F7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8003c88:	2301      	movs	r3, #1
    }
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3328      	adds	r3, #40	; 0x28
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4798      	blx	r3
    }
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
        return instance;
 8003cb8:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8003cba:	681b      	ldr	r3, [r3, #0]
    }
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	2005677c 	.word	0x2005677c

08003ccc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3314      	adds	r3, #20
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	4798      	blx	r3
    }
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8003cf6:	f7ff ffdd 	bl	8003cb4 <_ZN8touchgfx3HAL11getInstanceEv>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ffe5 	bl	8003ccc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	330c      	adds	r3, #12
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff ff30 	bl	8003b7c <_ZN8touchgfx9colortypeC1Ev>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <_ZN10STM32F7DMAC1Ev>:
}

STM32F7DMA::STM32F7DMA()
 8003d28:	b5b0      	push	{r4, r5, r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	330c      	adds	r3, #12
 8003d36:	4619      	mov	r1, r3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	f7ff ff87 	bl	8003c4c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8003d3e:	4a0e      	ldr	r2, [pc, #56]	; (8003d78 <_ZN10STM32F7DMAC1Ev+0x50>)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f103 000c 	add.w	r0, r3, #12
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3320      	adds	r3, #32
 8003d4e:	2260      	movs	r2, #96	; 0x60
 8003d50:	4619      	mov	r1, r3
 8003d52:	f012 ff99 	bl	8016c88 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3320      	adds	r3, #32
 8003d5a:	245f      	movs	r4, #95	; 0x5f
 8003d5c:	461d      	mov	r5, r3
 8003d5e:	2c00      	cmp	r4, #0
 8003d60:	db05      	blt.n	8003d6e <_ZN10STM32F7DMAC1Ev+0x46>
 8003d62:	4628      	mov	r0, r5
 8003d64:	f7ff ffd1 	bl	8003d0a <_ZN8touchgfx6BlitOpC1Ev>
 8003d68:	3520      	adds	r5, #32
 8003d6a:	3c01      	subs	r4, #1
 8003d6c:	e7f7      	b.n	8003d5e <_ZN10STM32F7DMAC1Ev+0x36>
{
}
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bdb0      	pop	{r4, r5, r7, pc}
 8003d78:	0802c068 	.word	0x0802c068

08003d7c <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	4a09      	ldr	r2, [pc, #36]	; (8003dac <_ZN10STM32F7DMAD1Ev+0x30>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003d8a:	205a      	movs	r0, #90	; 0x5a
 8003d8c:	f7ff fed2 	bl	8003b34 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	330c      	adds	r3, #12
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 faad 	bl	80042f4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff35 	bl	8003c0c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	0802c068 	.word	0x0802c068

08003db0 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
}
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff ffdf 	bl	8003d7c <_ZN10STM32F7DMAD1Ev>
 8003dbe:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f022 fcdf 	bl	8026786 <_ZdlPvj>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003ddc:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	4a0f      	ldr	r2, [pc, #60]	; (8003e20 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003de2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003de6:	6313      	str	r3, [r2, #48]	; 0x30
 8003de8:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	4a09      	ldr	r2, [pc, #36]	; (8003e20 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003dfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dfe:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	4a06      	ldr	r2, [pc, #24]	; (8003e20 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003e06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e0a:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <_ZN10STM32F7DMA10initializeEv+0x50>)
 8003e0e:	4a06      	ldr	r2, [pc, #24]	; (8003e28 <_ZN10STM32F7DMA10initializeEv+0x54>)
 8003e10:	619a      	str	r2, [r3, #24]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003e12:	205a      	movs	r0, #90	; 0x5a
 8003e14:	f7ff fe70 	bl	8003af8 <__NVIC_EnableIRQ>
}
 8003e18:	bf00      	nop
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40023800 	.word	0x40023800
 8003e24:	20056e50 	.word	0x20056e50
 8003e28:	08003cef 	.word	0x08003cef

08003e2c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]

    switch (format)
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	2b0b      	cmp	r3, #11
 8003e40:	d826      	bhi.n	8003e90 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8003e42:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8003e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e48:	08003e85 	.word	0x08003e85
 8003e4c:	08003e7f 	.word	0x08003e7f
 8003e50:	08003e79 	.word	0x08003e79
 8003e54:	08003e91 	.word	0x08003e91
 8003e58:	08003e91 	.word	0x08003e91
 8003e5c:	08003e91 	.word	0x08003e91
 8003e60:	08003e91 	.word	0x08003e91
 8003e64:	08003e8b 	.word	0x08003e8b
 8003e68:	08003e8b 	.word	0x08003e8b
 8003e6c:	08003e8b 	.word	0x08003e8b
 8003e70:	08003e8b 	.word	0x08003e8b
 8003e74:	08003e8b 	.word	0x08003e8b
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]
        break;
 8003e7c:	e00e      	b.n	8003e9c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
        break;
 8003e82:	e00b      	b.n	8003e9c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8003e84:	2302      	movs	r3, #2
 8003e86:	60fb      	str	r3, [r7, #12]
        break;
 8003e88:	e008      	b.n	8003e9c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8003e8a:	2305      	movs	r3, #5
 8003e8c:	60fb      	str	r3, [r7, #12]
        break;
 8003e8e:	e005      	b.n	8003e9c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003e90:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8003e92:	4a06      	ldr	r2, [pc, #24]	; (8003eac <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8003e94:	2164      	movs	r1, #100	; 0x64
 8003e96:	4806      	ldr	r0, [pc, #24]	; (8003eb0 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8003e98:	f022 fdaa 	bl	80269f0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	0802b454 	.word	0x0802b454
 8003eac:	0802b470 	.word	0x0802b470
 8003eb0:	0802b4bc 	.word	0x0802b4bc

08003eb4 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]

    switch (format)
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	2b0a      	cmp	r3, #10
 8003ec8:	d821      	bhi.n	8003f0e <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8003eca:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8003ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed0:	08003f09 	.word	0x08003f09
 8003ed4:	08003f03 	.word	0x08003f03
 8003ed8:	08003efd 	.word	0x08003efd
 8003edc:	08003f0f 	.word	0x08003f0f
 8003ee0:	08003f0f 	.word	0x08003f0f
 8003ee4:	08003f0f 	.word	0x08003f0f
 8003ee8:	08003f0f 	.word	0x08003f0f
 8003eec:	08003f03 	.word	0x08003f03
 8003ef0:	08003f03 	.word	0x08003f03
 8003ef4:	08003f03 	.word	0x08003f03
 8003ef8:	08003f03 	.word	0x08003f03
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
        break;
 8003f00:	e00b      	b.n	8003f1a <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8003f02:	2301      	movs	r3, #1
 8003f04:	60fb      	str	r3, [r7, #12]
        break;
 8003f06:	e008      	b.n	8003f1a <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	60fb      	str	r3, [r7, #12]
        break;
 8003f0c:	e005      	b.n	8003f1a <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8003f10:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8003f12:	2185      	movs	r1, #133	; 0x85
 8003f14:	4805      	ldr	r0, [pc, #20]	; (8003f2c <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8003f16:	f022 fd6b 	bl	80269f0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	0802b454 	.word	0x0802b454
 8003f28:	0802b534 	.word	0x0802b534
 8003f2c:	0802b4bc 	.word	0x0802b4bc

08003f30 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8003f38:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8003f48:	b590      	push	{r4, r7, lr}
 8003f4a:	b089      	sub	sp, #36	; 0x24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	7f5b      	ldrb	r3, [r3, #29]
 8003f56:	4619      	mov	r1, r3
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff ff67 	bl	8003e2c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003f5e:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	7f9b      	ldrb	r3, [r3, #30]
 8003f64:	4619      	mov	r1, r3
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff ff60 	bl	8003e2c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003f6c:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	7f9b      	ldrb	r3, [r3, #30]
 8003f72:	4619      	mov	r1, r3
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff ff9d 	bl	8003eb4 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003f7a:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	8b5b      	ldrh	r3, [r3, #26]
 8003f80:	461a      	mov	r2, r3
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	8a9b      	ldrh	r3, [r3, #20]
 8003f86:	1ad2      	subs	r2, r2, r3
 8003f88:	4b97      	ldr	r3, [pc, #604]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	8b5b      	ldrh	r3, [r3, #26]
 8003f90:	461a      	mov	r2, r3
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	8a9b      	ldrh	r3, [r3, #20]
 8003f96:	1ad2      	subs	r2, r2, r3
 8003f98:	4b93      	ldr	r3, [pc, #588]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f9a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	8b1b      	ldrh	r3, [r3, #24]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	8a9b      	ldrh	r3, [r3, #20]
 8003fa6:	1ad2      	subs	r2, r2, r3
 8003fa8:	4b8f      	ldr	r3, [pc, #572]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003faa:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003fac:	4a8e      	ldr	r2, [pc, #568]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	8adb      	ldrh	r3, [r3, #22]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	8a9b      	ldrh	r3, [r3, #20]
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	4b89      	ldr	r3, [pc, #548]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003fc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	4b87      	ldr	r3, [pc, #540]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003fca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	4b85      	ldr	r3, [pc, #532]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003fd2:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fdc:	d037      	beq.n	800404e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8003fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe2:	f200 80e4 	bhi.w	80041ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fea:	d015      	beq.n	8004018 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8003fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff0:	f200 80dd 	bhi.w	80041ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003ff4:	2b80      	cmp	r3, #128	; 0x80
 8003ff6:	d045      	beq.n	8004084 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	f200 80d8 	bhi.w	80041ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	f000 80c0 	beq.w	8004184 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	f200 80d2 	bhi.w	80041ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 800400a:	2b04      	cmp	r3, #4
 800400c:	f000 80a5 	beq.w	800415a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
 8004010:	2b20      	cmp	r3, #32
 8004012:	f000 80b7 	beq.w	8004184 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8004016:	e0ca      	b.n	80041ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	7f1b      	ldrb	r3, [r3, #28]
 800401c:	061b      	lsls	r3, r3, #24
 800401e:	4619      	mov	r1, r3
 8004020:	4a71      	ldr	r2, [pc, #452]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004022:	4b72      	ldr	r3, [pc, #456]	; (80041ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8004024:	430b      	orrs	r3, r1
 8004026:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	330c      	adds	r3, #12
 800402c:	4c6e      	ldr	r4, [pc, #440]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff fdb2 	bl	8003b98 <_ZNK8touchgfx9colortypecvmEv>
 8004034:	4603      	mov	r3, r0
 8004036:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8004038:	4a6b      	ldr	r2, [pc, #428]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	4b69      	ldr	r3, [pc, #420]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004044:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8004046:	4b68      	ldr	r3, [pc, #416]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004048:	4a69      	ldr	r2, [pc, #420]	; (80041f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800404a:	601a      	str	r2, [r3, #0]
        break;
 800404c:	e0c8      	b.n	80041e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	7f1b      	ldrb	r3, [r3, #28]
 8004052:	061b      	lsls	r3, r3, #24
 8004054:	4619      	mov	r1, r3
 8004056:	4a64      	ldr	r2, [pc, #400]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004058:	4b66      	ldr	r3, [pc, #408]	; (80041f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800405a:	430b      	orrs	r3, r1
 800405c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	4c61      	ldr	r4, [pc, #388]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fd97 	bl	8003b98 <_ZNK8touchgfx9colortypecvmEv>
 800406a:	4603      	mov	r3, r0
 800406c:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800406e:	4a5e      	ldr	r2, [pc, #376]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	4b5b      	ldr	r3, [pc, #364]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800407a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800407c:	4b5a      	ldr	r3, [pc, #360]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800407e:	4a5c      	ldr	r2, [pc, #368]	; (80041f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8004080:	601a      	str	r2, [r3, #0]
        break;
 8004082:	e0ad      	b.n	80041e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
  case BLIT_OP_COPY_L8:
      {
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	60fb      	str	r3, [r7, #12]
        bool blend = true;
 800408a:	2301      	movs	r3, #1
 800408c:	77fb      	strb	r3, [r7, #31]

        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	7f1b      	ldrb	r3, [r3, #28]
 8004092:	061b      	lsls	r3, r3, #24
 8004094:	461a      	mov	r2, r3
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	4313      	orrs	r3, r2
 800409a:	4a53      	ldr	r2, [pc, #332]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800409c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a0:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80040a2:	4a51      	ldr	r2, [pc, #324]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	4b4e      	ldr	r3, [pc, #312]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80040ae:	615a      	str	r2, [r3, #20]

        /* Write foreground CLUT memory address */
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	1d1a      	adds	r2, r3, #4
 80040b4:	4b4c      	ldr	r3, [pc, #304]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c

        switch ((Bitmap::ClutFormat)palette->format)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d00d      	beq.n	80040e2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 80040c6:	e020      	b.n	800410a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
        {
        case Bitmap::CLUT_FORMAT_L8_ARGB8888:
            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80040c8:	4b47      	ldr	r3, [pc, #284]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80040ca:	69da      	ldr	r2, [r3, #28]
 80040cc:	4b4a      	ldr	r3, [pc, #296]	; (80041f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	8852      	ldrh	r2, [r2, #2]
 80040d4:	3a01      	subs	r2, #1
 80040d6:	0212      	lsls	r2, r2, #8
 80040d8:	4611      	mov	r1, r2
 80040da:	4a43      	ldr	r2, [pc, #268]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80040dc:	430b      	orrs	r3, r1
 80040de:	61d3      	str	r3, [r2, #28]
            break;
 80040e0:	e019      	b.n	8004116 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB888:
            if(blitOp.alpha == 255)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	7f1b      	ldrb	r3, [r3, #28]
 80040e6:	2bff      	cmp	r3, #255	; 0xff
 80040e8:	d101      	bne.n	80040ee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
            {
                blend = false;
 80040ea:	2300      	movs	r3, #0
 80040ec:	77fb      	strb	r3, [r7, #31]
            }
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80040ee:	4b3e      	ldr	r3, [pc, #248]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80040f0:	69da      	ldr	r2, [r3, #28]
 80040f2:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	8852      	ldrh	r2, [r2, #2]
 80040fa:	3a01      	subs	r2, #1
 80040fc:	0212      	lsls	r2, r2, #8
 80040fe:	4313      	orrs	r3, r2
 8004100:	4a39      	ldr	r2, [pc, #228]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004102:	f043 0310 	orr.w	r3, r3, #16
 8004106:	61d3      	str	r3, [r2, #28]
            break;
 8004108:	e005      	b.n	8004116 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB565:
        default:
            assert(0 && "Unsupported format");
 800410a:	4b3c      	ldr	r3, [pc, #240]	; (80041fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 800410c:	4a3c      	ldr	r2, [pc, #240]	; (8004200 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 800410e:	21ff      	movs	r1, #255	; 0xff
 8004110:	483c      	ldr	r0, [pc, #240]	; (8004204 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8004112:	f022 fc6d 	bl	80269f0 <__assert_func>
            break;
        }

        /* Enable the CLUT loading for the foreground */
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8004116:	4b34      	ldr	r3, [pc, #208]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	4a33      	ldr	r2, [pc, #204]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800411c:	f043 0320 	orr.w	r3, r3, #32
 8004120:	61d3      	str	r3, [r2, #28]

        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8004122:	4b31      	ldr	r3, [pc, #196]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	bf14      	ite	ne
 800412e:	2301      	movne	r3, #1
 8004130:	2300      	moveq	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
        {
            OSWrappers::taskYield();
 8004138:	f7ff fcd7 	bl	8003aea <_ZN8touchgfx10OSWrappers9taskYieldEv>
        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800413c:	e7f1      	b.n	8004122 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1da>
        }
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800413e:	4b2a      	ldr	r3, [pc, #168]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004140:	2210      	movs	r2, #16
 8004142:	609a      	str	r2, [r3, #8]

        /* Set DMA2D mode */
        if(blend)
 8004144:	7ffb      	ldrb	r3, [r7, #31]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800414a:	4b27      	ldr	r3, [pc, #156]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800414c:	4a28      	ldr	r2, [pc, #160]	; (80041f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800414e:	601a      	str	r2, [r3, #0]
        else
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
      }
      break;
 8004150:	e046      	b.n	80041e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8004152:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004154:	4a2c      	ldr	r2, [pc, #176]	; (8004208 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8004156:	601a      	str	r2, [r3, #0]
      break;
 8004158:	e042      	b.n	80041e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	7f1b      	ldrb	r3, [r3, #28]
 800415e:	061b      	lsls	r3, r3, #24
 8004160:	461a      	mov	r2, r3
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	4313      	orrs	r3, r2
 8004166:	4a20      	ldr	r2, [pc, #128]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416c:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800416e:	4a1e      	ldr	r2, [pc, #120]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800417a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800417c:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800417e:	4a1c      	ldr	r2, [pc, #112]	; (80041f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8004180:	601a      	str	r2, [r3, #0]
        break;
 8004182:	e02d      	b.n	80041e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	7f1b      	ldrb	r3, [r3, #28]
 8004188:	061b      	lsls	r3, r3, #24
 800418a:	461a      	mov	r2, r3
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	4313      	orrs	r3, r2
 8004190:	4a15      	ldr	r2, [pc, #84]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004196:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8004198:	4a13      	ldr	r2, [pc, #76]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80041a4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80041a6:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80041a8:	4a11      	ldr	r2, [pc, #68]	; (80041f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80041aa:	601a      	str	r2, [r3, #0]
        break;
 80041ac:	e018      	b.n	80041e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	7f1b      	ldrb	r3, [r3, #28]
 80041b2:	061b      	lsls	r3, r3, #24
 80041b4:	461a      	mov	r2, r3
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	4a0b      	ldr	r2, [pc, #44]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80041bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c0:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	7f5a      	ldrb	r2, [r3, #29]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	7f9b      	ldrb	r3, [r3, #30]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d003      	beq.n	80041d6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28e>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80041d0:	4a0d      	ldr	r2, [pc, #52]	; (8004208 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 80041d2:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 80041d4:	e003      	b.n	80041de <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80041d6:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80041d8:	f240 2201 	movw	r2, #513	; 0x201
 80041dc:	601a      	str	r2, [r3, #0]
        break;
 80041de:	bf00      	nop
    }
}
 80041e0:	bf00      	nop
 80041e2:	3724      	adds	r7, #36	; 0x24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd90      	pop	{r4, r7, pc}
 80041e8:	4002b000 	.word	0x4002b000
 80041ec:	0002000a 	.word	0x0002000a
 80041f0:	00020201 	.word	0x00020201
 80041f4:	00020009 	.word	0x00020009
 80041f8:	ffff00ef 	.word	0xffff00ef
 80041fc:	0802b584 	.word	0x0802b584
 8004200:	0802b5a0 	.word	0x0802b5a0
 8004204:	0802b4bc 	.word	0x0802b4bc
 8004208:	00010201 	.word	0x00010201

0800420c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	7f9b      	ldrb	r3, [r3, #30]
 800421a:	4619      	mov	r1, r3
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff fe49 	bl	8003eb4 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8004222:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8004224:	4a2f      	ldr	r2, [pc, #188]	; (80042e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	8adb      	ldrh	r3, [r3, #22]
 800422e:	461a      	mov	r2, r3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	8a9b      	ldrh	r3, [r3, #20]
 8004234:	041b      	lsls	r3, r3, #16
 8004236:	431a      	orrs	r2, r3
 8004238:	4b2a      	ldr	r3, [pc, #168]	; (80042e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800423a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	4b28      	ldr	r3, [pc, #160]	; (80042e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004242:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	8b5b      	ldrh	r3, [r3, #26]
 8004248:	461a      	mov	r2, r3
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	8a9b      	ldrh	r3, [r3, #20]
 800424e:	1ad2      	subs	r2, r2, r3
 8004250:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004252:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d12e      	bne.n	80042ba <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	8b5b      	ldrh	r3, [r3, #26]
 8004260:	461a      	mov	r2, r3
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	8a9b      	ldrh	r3, [r3, #20]
 8004266:	1ad2      	subs	r2, r2, r3
 8004268:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800426a:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	8b5b      	ldrh	r3, [r3, #26]
 8004270:	461a      	mov	r2, r3
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	8a9b      	ldrh	r3, [r3, #20]
 8004276:	1ad2      	subs	r2, r2, r3
 8004278:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800427a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800427c:	4a19      	ldr	r2, [pc, #100]	; (80042e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	7f1b      	ldrb	r3, [r3, #28]
 8004286:	061b      	lsls	r3, r3, #24
 8004288:	4619      	mov	r1, r3
 800428a:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800428c:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 800428e:	430b      	orrs	r3, r1
 8004290:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	4c13      	ldr	r4, [pc, #76]	; (80042e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fc7d 	bl	8003b98 <_ZNK8touchgfx9colortypecvmEv>
 800429e:	4603      	mov	r3, r0
 80042a0:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80042a8:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80042b0:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80042b2:	4b0c      	ldr	r3, [pc, #48]	; (80042e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80042b4:	4a0d      	ldr	r2, [pc, #52]	; (80042ec <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 80042b6:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80042b8:	e010      	b.n	80042dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80042ba:	4a0a      	ldr	r2, [pc, #40]	; (80042e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80042c0:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	4c06      	ldr	r4, [pc, #24]	; (80042e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fc63 	bl	8003b98 <_ZNK8touchgfx9colortypecvmEv>
 80042d2:	4603      	mov	r3, r0
 80042d4:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80042d6:	4b03      	ldr	r3, [pc, #12]	; (80042e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80042d8:	4a05      	ldr	r2, [pc, #20]	; (80042f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 80042da:	601a      	str	r2, [r3, #0]
}
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd90      	pop	{r4, r7, pc}
 80042e4:	4002b000 	.word	0x4002b000
 80042e8:	00010009 	.word	0x00010009
 80042ec:	00020201 	.word	0x00020201
 80042f0:	00030201 	.word	0x00030201

080042f4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	4a05      	ldr	r2, [pc, #20]	; (8004314 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff fc53 	bl	8003bb0 <_ZN8touchgfx9DMA_QueueD1Ev>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	0802d420 	.word	0x0802d420

08004318 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ffe7 	bl	80042f4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8004326:	2114      	movs	r1, #20
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f022 fa2c 	bl	8026786 <_ZdlPvj>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
        : color(col)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	601a      	str	r2, [r3, #0]
    }
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4618      	mov	r0, r3
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	801a      	strh	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	805a      	strh	r2, [r3, #2]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	809a      	strh	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	80da      	strh	r2, [r3, #6]
    {
    }
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800438c:	4a04      	ldr	r2, [pc, #16]	; (80043a0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6013      	str	r3, [r2, #0]
    }
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	200567f8 	.word	0x200567f8

080043a4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
    {
 80043ac:	4a04      	ldr	r2, [pc, #16]	; (80043c0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	601a      	str	r2, [r3, #0]
    }
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	0802c2d4 	.word	0x0802c2d4

080043c4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
    }
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff ffe9 	bl	80043a4 <_ZN8touchgfx12FontProviderD1Ev>
 80043d2:	2104      	movs	r1, #4
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f022 f9d6 	bl	8026786 <_ZdlPvj>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80043f2:	4a0b      	ldr	r2, [pc, #44]	; (8004420 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	609a      	str	r2, [r3, #8]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	611a      	str	r2, [r3, #16]
    {
    }
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	0802c2c4 	.word	0x0802c2c4

08004424 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
    {
 800442c:	4a04      	ldr	r2, [pc, #16]	; (8004440 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	601a      	str	r2, [r3, #0]
    }
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	0802c2c4 	.word	0x0802c2c4

08004444 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
    }
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ffe9 	bl	8004424 <_ZN8touchgfx7MVPHeapD1Ev>
 8004452:	2114      	movs	r1, #20
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f022 f996 	bl	8026786 <_ZdlPvj>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
    {
    }
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
    {
    }
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
    {
    }
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	460b      	mov	r3, r1
 80044b0:	70fb      	strb	r3, [r7, #3]
    {
    }
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
    {
    }
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
    {
    }
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
    {
 80044f0:	4a04      	ldr	r2, [pc, #16]	; (8004504 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	601a      	str	r2, [r3, #0]
    }
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	0802c29c 	.word	0x0802c29c

08004508 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
    }
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff ffe9 	bl	80044e8 <_ZN8touchgfx15UIEventListenerD1Ev>
 8004516:	2104      	movs	r1, #4
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f022 f934 	bl	8026786 <_ZdlPvj>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
    {
 8004530:	4a04      	ldr	r2, [pc, #16]	; (8004544 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	601a      	str	r2, [r3, #0]
    }
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	0802dc8c 	.word	0x0802dc8c

08004548 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
    }
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ffe9 	bl	8004528 <_ZN8touchgfx3LCDD1Ev>
 8004556:	2108      	movs	r1, #8
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f022 f914 	bl	8026786 <_ZdlPvj>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4618      	mov	r0, r3
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	70fb      	strb	r3, [r7, #3]
    {
    }
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8004592:	6810      	ldr	r0, [r2, #0]
 8004594:	6851      	ldr	r1, [r2, #4]
 8004596:	c303      	stmia	r3!, {r0, r1}
    }
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
    {
 80045ac:	4a04      	ldr	r2, [pc, #16]	; (80045c0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
    }
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	0802c284 	.word	0x0802c284

080045c4 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
    }
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff ffe9 	bl	80045a4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80045d2:	2104      	movs	r1, #4
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f022 f8d6 	bl	8026786 <_ZdlPvj>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	4a05      	ldr	r2, [pc, #20]	; (8004604 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff ff77 	bl	80044e8 <_ZN8touchgfx15UIEventListenerD1Ev>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	0802dd64 	.word	0x0802dd64

08004608 <_ZN8touchgfx11ApplicationD0Ev>:
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff ffe7 	bl	80045e4 <_ZN8touchgfx11ApplicationD1Ev>
 8004616:	f44f 719c 	mov.w	r1, #312	; 0x138
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f022 f8b3 	bl	8026786 <_ZdlPvj>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f804 	bl	8004640 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8004638:	bf00      	nop
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00f      	beq.n	8004672 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4610      	mov	r0, r2
 8004666:	4798      	blx	r3
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8004672:	2300      	movs	r3, #0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00e      	beq.n	8004696 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3308      	adds	r3, #8
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4610      	mov	r0, r2
 800468c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8004696:	bf00      	nop
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	4a05      	ldr	r2, [pc, #20]	; (80046c0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff ff97 	bl	80045e4 <_ZN8touchgfx11ApplicationD1Ev>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	0802c240 	.word	0x0802c240

080046c4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff ffe7 	bl	80046a0 <_ZN8touchgfx14MVPApplicationD1Ev>
 80046d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f022 f855 	bl	8026786 <_ZdlPvj>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	4a08      	ldr	r2, [pc, #32]	; (8004714 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fd07 	bl	8005110 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff ffcb 	bl	80046a0 <_ZN8touchgfx14MVPApplicationD1Ev>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	0802c1e4 	.word	0x0802c1e4

08004718 <_ZN23FrontendApplicationBaseD0Ev>:
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff ffe1 	bl	80046e8 <_ZN23FrontendApplicationBaseD1Ev>
 8004726:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f022 f82b 	bl	8026786 <_ZdlPvj>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	4a05      	ldr	r2, [pc, #20]	; (800475c <_ZN19FrontendApplicationD1Ev+0x20>)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff ffcb 	bl	80046e8 <_ZN23FrontendApplicationBaseD1Ev>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	0802c1a0 	.word	0x0802c1a0

08004760 <_ZN19FrontendApplicationD0Ev>:
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff ffe7 	bl	800473c <_ZN19FrontendApplicationD1Ev>
 800476e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f022 f807 	bl	8026786 <_ZdlPvj>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004790:	4618      	mov	r0, r3
 8004792:	f005 fecb 	bl	800a52c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4618      	mov	r0, r3
 800479a:	f014 ff29 	bl	80195f0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	801a      	strh	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	805a      	strh	r2, [r3, #2]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	809a      	strh	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	80da      	strh	r2, [r3, #6]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	811a      	strh	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	815a      	strh	r2, [r3, #10]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	819a      	strh	r2, [r3, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	739a      	strb	r2, [r3, #14]
        {
        }
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff ffd5 	bl	80047a6 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	611a      	str	r2, [r3, #16]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	829a      	strh	r2, [r3, #20]
    {
    }
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8004822:	4a55      	ldr	r2, [pc, #340]	; (8004978 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	605a      	str	r2, [r3, #4]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	60da      	str	r2, [r3, #12]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	611a      	str	r2, [r3, #16]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	615a      	str	r2, [r3, #20]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	619a      	str	r2, [r3, #24]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	331c      	adds	r3, #28
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff ffcb 	bl	80047ec <_ZN8touchgfx8GesturesC1Ev>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	63da      	str	r2, [r3, #60]	; 0x3c
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	641a      	str	r2, [r3, #64]	; 0x40
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	645a      	str	r2, [r3, #68]	; 0x44
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	64da      	str	r2, [r3, #76]	; 0x4c
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3350      	adds	r3, #80	; 0x50
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fd58 	bl	8004356 <_ZN8touchgfx4RectC1Ev>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	659a      	str	r2, [r3, #88]	; 0x58
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	661a      	str	r2, [r3, #96]	; 0x60
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	671a      	str	r2, [r3, #112]	; 0x70
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 800492e:	4a13      	ldr	r2, [pc, #76]	; (800497c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8004934:	4a12      	ldr	r2, [pc, #72]	; (8004980 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8004936:	8b3b      	ldrh	r3, [r7, #24]
 8004938:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 800493a:	4a12      	ldr	r2, [pc, #72]	; (8004984 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800493c:	8bbb      	ldrh	r3, [r7, #28]
 800493e:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8004940:	4b11      	ldr	r3, [pc, #68]	; (8004988 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8004946:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8004948:	881a      	ldrh	r2, [r3, #0]
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800494c:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800494e:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8004950:	881a      	ldrh	r2, [r3, #0]
 8004952:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8004954:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8004956:	8b3a      	ldrh	r2, [r7, #24]
 8004958:	8bbb      	ldrh	r3, [r7, #28]
 800495a:	429a      	cmp	r2, r3
 800495c:	bf34      	ite	cc
 800495e:	2301      	movcc	r3, #1
 8004960:	2300      	movcs	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	0802ce90 	.word	0x0802ce90
 800497c:	2005677c 	.word	0x2005677c
 8004980:	20056770 	.word	0x20056770
 8004984:	20056772 	.word	0x20056772
 8004988:	20056774 	.word	0x20056774
 800498c:	20056776 	.word	0x20056776
 8004990:	20056778 	.word	0x20056778

08004994 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f001 fedf 	bl	8006764 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	f7ff fd0b 	bl	80043e4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80049ce:	4a04      	ldr	r2, [pc, #16]	; (80049e0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	601a      	str	r2, [r3, #0]
    {

    }
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	0802c18c 	.word	0x0802c18c

080049e4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	4801      	ldr	r0, [pc, #4]	; (80049f0 <__tcf_0+0xc>)
 80049ea:	f000 f965 	bl	8004cb8 <_ZN12FrontendHeapD1Ev>
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	200002b4 	.word	0x200002b4

080049f4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80049f8:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	f3bf 8f5b 	dmb	ish
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bf0c      	ite	eq
 8004a0a:	2301      	moveq	r3, #1
 8004a0c:	2300      	movne	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d013      	beq.n	8004a3c <_ZN12FrontendHeap11getInstanceEv+0x48>
 8004a14:	480b      	ldr	r0, [pc, #44]	; (8004a44 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8004a16:	f021 feb8 	bl	802678a <__cxa_guard_acquire>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	bf14      	ite	ne
 8004a20:	2301      	movne	r3, #1
 8004a22:	2300      	moveq	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <_ZN12FrontendHeap11getInstanceEv+0x48>
 8004a2a:	4807      	ldr	r0, [pc, #28]	; (8004a48 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8004a2c:	f000 f868 	bl	8004b00 <_ZN12FrontendHeapC1Ev>
 8004a30:	4804      	ldr	r0, [pc, #16]	; (8004a44 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8004a32:	f021 feb6 	bl	80267a2 <__cxa_guard_release>
 8004a36:	4805      	ldr	r0, [pc, #20]	; (8004a4c <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8004a38:	f021 fff8 	bl	8026a2c <atexit>
        return instance;
 8004a3c:	4b02      	ldr	r3, [pc, #8]	; (8004a48 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8004a3e:	4618      	mov	r0, r3
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20022b18 	.word	0x20022b18
 8004a48:	200002b4 	.word	0x200002b4
 8004a4c:	080049e5 	.word	0x080049e5

08004a50 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	4a05      	ldr	r2, [pc, #20]	; (8004a70 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff fcdf 	bl	8004424 <_ZN8touchgfx7MVPHeapD1Ev>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	0802c18c 	.word	0x0802c18c

08004a74 <_ZN16FrontendHeapBaseD0Ev>:
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff ffe7 	bl	8004a50 <_ZN16FrontendHeapBaseD1Ev>
 8004a82:	2114      	movs	r1, #20
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f021 fe7e 	bl	8026786 <_ZdlPvj>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f010 ff74 	bl	801598c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004aa4:	4a03      	ldr	r2, [pc, #12]	; (8004ab4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	0802c158 	.word	0x0802c158

08004ab8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f010 ff62 	bl	801598c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004ac8:	4a03      	ldr	r2, [pc, #12]	; (8004ad8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	0802c124 	.word	0x0802c124

08004adc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f010 ff50 	bl	801598c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004aec:	4a03      	ldr	r2, [pc, #12]	; (8004afc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	0802c0f0 	.word	0x0802c0f0

08004b00 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8004b00:	b5b0      	push	{r4, r5, r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f103 0414 	add.w	r4, r3, #20
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a1c      	ldr	r2, [pc, #112]	; (8004b8c <_ZN12FrontendHeapC1Ev+0x8c>)
 8004b1a:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <_ZN12FrontendHeapC1Ev+0x90>)
 8004b20:	440b      	add	r3, r1
                     app(model, *this)
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	462a      	mov	r2, r5
 8004b28:	4621      	mov	r1, r4
 8004b2a:	f7ff ff41 	bl	80049b0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8004b2e:	4a19      	ldr	r2, [pc, #100]	; (8004b94 <_ZN12FrontendHeapC1Ev+0x94>)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3314      	adds	r3, #20
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff ffab 	bl	8004a94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	332c      	adds	r3, #44	; 0x2c
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff ffb8 	bl	8004ab8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <_ZN12FrontendHeapC1Ev+0x8c>)
 8004b4c:	4413      	add	r3, r2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff ffc4 	bl	8004adc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <_ZN12FrontendHeapC1Ev+0x98>)
 8004b58:	4413      	add	r3, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f005 fcd8 	bl	800a510 <_ZN5ModelC1Ev>
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <_ZN12FrontendHeapC1Ev+0x90>)
 8004b64:	4413      	add	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	490b      	ldr	r1, [pc, #44]	; (8004b98 <_ZN12FrontendHeapC1Ev+0x98>)
 8004b6a:	4411      	add	r1, r2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f004 fd72 	bl	8009658 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <_ZN12FrontendHeapC1Ev+0x90>)
 8004b7a:	4413      	add	r3, r2
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	f7ff ff09 	bl	8004994 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b8c:	000226f4 	.word	0x000226f4
 8004b90:	0002270c 	.word	0x0002270c
 8004b94:	0802c0dc 	.word	0x0802c0dc
 8004b98:	00022708 	.word	0x00022708

08004b9c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	8bbb      	ldrh	r3, [r7, #28]
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	8b3b      	ldrh	r3, [r7, #24]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	f7ff fe2b 	bl	8004814 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8004bbe:	4a04      	ldr	r2, [pc, #16]	; (8004bd0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	601a      	str	r2, [r3, #0]
    }
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	0802c2e8 	.word	0x0802c2e8

08004bd4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	8bbb      	ldrh	r3, [r7, #28]
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	8b3b      	ldrh	r3, [r7, #24]
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	f7ff ffd3 	bl	8004b9c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8004bf6:	4a04      	ldr	r2, [pc, #16]	; (8004c08 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	601a      	str	r2, [r3, #0]
    }
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	0802bf9c 	.word	0x0802bf9c

08004c0c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	4a04      	ldr	r2, [pc, #16]	; (8004c28 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	0802bf84 	.word	0x0802bf84

08004c2c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff ffe8 	bl	8004c0c <_ZN8touchgfx15TouchControllerC1Ev>
 8004c3c:	4a03      	ldr	r2, [pc, #12]	; (8004c4c <_ZN20STM32TouchControllerC1Ev+0x20>)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	0802bf6c 	.word	0x0802bf6c

08004c50 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8004c50:	b590      	push	{r4, r7, lr}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8004c56:	f001 f801 	bl	8005c5c <_ZN14BitmapDatabase11getInstanceEv>
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	f001 f808 	bl	8005c70 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8004c60:	4603      	mov	r3, r0
 8004c62:	4619      	mov	r1, r3
 8004c64:	2300      	movs	r3, #0
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	2300      	movs	r3, #0
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f017 fe7f 	bl	801c970 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8004c72:	4809      	ldr	r0, [pc, #36]	; (8004c98 <touchgfx_init+0x48>)
 8004c74:	f7ff fb86 	bl	8004384 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8004c78:	2000      	movs	r0, #0
 8004c7a:	f004 f9a5 	bl	8008fc8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8004c7e:	4807      	ldr	r0, [pc, #28]	; (8004c9c <touchgfx_init+0x4c>)
 8004c80:	f017 fdb8 	bl	801c7f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8004c84:	f7ff feb6 	bl	80049f4 <_ZN12FrontendHeap11getInstanceEv>
 8004c88:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8004c8a:	4805      	ldr	r0, [pc, #20]	; (8004ca0 <touchgfx_init+0x50>)
 8004c8c:	f7fe fdde 	bl	800384c <_ZN11TouchGFXHAL10initializeEv>
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd90      	pop	{r4, r7, pc}
 8004c98:	20023798 	.word	0x20023798
 8004c9c:	20000010 	.word	0x20000010
 8004ca0:	2002379c 	.word	0x2002379c

08004ca4 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8004ca8:	4802      	ldr	r0, [pc, #8]	; (8004cb4 <touchgfx_taskEntry+0x10>)
 8004caa:	f011 f8b8 	bl	8015e1e <_ZN8touchgfx3HAL9taskEntryEv>
}
 8004cae:	bf00      	nop
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	2002379c 	.word	0x2002379c

08004cb8 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	4a10      	ldr	r2, [pc, #64]	; (8004d04 <_ZN12FrontendHeapD1Ev+0x4c>)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <_ZN12FrontendHeapD1Ev+0x50>)
 8004cca:	4413      	add	r3, r2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff fd35 	bl	800473c <_ZN19FrontendApplicationD1Ev>
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <_ZN12FrontendHeapD1Ev+0x54>)
 8004cd6:	4413      	add	r3, r2
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f82b 	bl	8004d34 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	332c      	adds	r3, #44	; 0x2c
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 f848 	bl	8004d78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3314      	adds	r3, #20
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 f867 	bl	8004dc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff feab 	bl	8004a50 <_ZN16FrontendHeapBaseD1Ev>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	0802c0dc 	.word	0x0802c0dc
 8004d08:	0002270c 	.word	0x0002270c
 8004d0c:	000226f4 	.word	0x000226f4

08004d10 <_ZN12FrontendHeapD0Ev>:
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff ffcd 	bl	8004cb8 <_ZN12FrontendHeapD1Ev>
 8004d1e:	4904      	ldr	r1, [pc, #16]	; (8004d30 <_ZN12FrontendHeapD0Ev+0x20>)
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f021 fd30 	bl	8026786 <_ZdlPvj>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	00022864 	.word	0x00022864

08004d34 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	4a05      	ldr	r2, [pc, #20]	; (8004d54 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f010 fe1f 	bl	8015988 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	0802c0f0 	.word	0x0802c0f0

08004d58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff ffe7 	bl	8004d34 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004d66:	2114      	movs	r1, #20
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f021 fd0c 	bl	8026786 <_ZdlPvj>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	4a05      	ldr	r2, [pc, #20]	; (8004d98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f010 fdfd 	bl	8015988 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4618      	mov	r0, r3
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	0802c124 	.word	0x0802c124

08004d9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7ff ffe7 	bl	8004d78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004daa:	4904      	ldr	r1, [pc, #16]	; (8004dbc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x20>)
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f021 fcea 	bl	8026786 <_ZdlPvj>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	000226c8 	.word	0x000226c8

08004dc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	4a05      	ldr	r2, [pc, #20]	; (8004de0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f010 fdd9 	bl	8015988 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	0802c158 	.word	0x0802c158

08004de4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff ffe7 	bl	8004dc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004df2:	2118      	movs	r1, #24
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f021 fcc6 	bl	8026786 <_ZdlPvj>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	4a05      	ldr	r2, [pc, #20]	; (8004e24 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fb87 	bl	8004528 <_ZN8touchgfx3LCDD1Ev>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	0802ed5c 	.word	0x0802ed5c

08004e28 <_ZN8touchgfx8LCD24bppD0Ev>:
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff ffe7 	bl	8004e04 <_ZN8touchgfx8LCD24bppD1Ev>
 8004e36:	2158      	movs	r1, #88	; 0x58
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f021 fca4 	bl	8026786 <_ZdlPvj>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <_Z41__static_initialization_and_destruction_0ii>:
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b094      	sub	sp, #80	; 0x50
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	f040 8129 	bne.w	80050ac <_Z41__static_initialization_and_destruction_0ii+0x264>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e60:	4293      	cmp	r3, r2
 8004e62:	f040 8123 	bne.w	80050ac <_Z41__static_initialization_and_destruction_0ii+0x264>
 8004e66:	2300      	movs	r3, #0
 8004e68:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004e72:	2300      	movs	r3, #0
 8004e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e78:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004e7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004e90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e94:	041b      	lsls	r3, r3, #16
 8004e96:	461a      	mov	r2, r3
 8004e98:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004eaa:	f107 0320 	add.w	r3, r7, #32
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff fa41 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8004eb8:	bf00      	nop
 8004eba:	461a      	mov	r2, r3
};

namespace colors
{
    using namespace touchgfx;
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8004ebc:	4b89      	ldr	r3, [pc, #548]	; (80050e4 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	23ff      	movs	r3, #255	; 0xff
 8004ec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ed6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004eda:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ee2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ee6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004eea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004eee:	041b      	lsls	r3, r3, #16
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004f04:	f107 031c 	add.w	r3, r7, #28
 8004f08:	4611      	mov	r1, r2
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff fa14 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8004f10:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8004f12:	bf00      	nop
 8004f14:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8004f16:	4b74      	ldr	r3, [pc, #464]	; (80050e8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004f20:	23ff      	movs	r3, #255	; 0xff
 8004f22:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8004f26:	2300      	movs	r3, #0
 8004f28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f2c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004f30:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004f34:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004f38:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8004f3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f40:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004f44:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004f48:	041b      	lsls	r3, r3, #16
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	431a      	orrs	r2, r3
 8004f54:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004f5e:	f107 0318 	add.w	r3, r7, #24
 8004f62:	4611      	mov	r1, r2
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff f9e7 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8004f6a:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8004f6c:	bf00      	nop
 8004f6e:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8004f70:	4b5e      	ldr	r3, [pc, #376]	; (80050ec <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	2300      	movs	r3, #0
 8004f76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8004f80:	23ff      	movs	r3, #255	; 0xff
 8004f82:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8004f86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004f8a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8004f8e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004f92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004f96:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004f9a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004f9e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004fa2:	041b      	lsls	r3, r3, #16
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	431a      	orrs	r2, r3
 8004fae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004fb8:	f107 0314 	add.w	r3, r7, #20
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff f9ba 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8004fc4:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8004fc6:	bf00      	nop
 8004fc8:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8004fca:	4b49      	ldr	r3, [pc, #292]	; (80050f0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	23f7      	movs	r3, #247	; 0xf7
 8004fd0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8004fd4:	234c      	movs	r3, #76	; 0x4c
 8004fd6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8004fda:	2302      	movs	r3, #2
 8004fdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004fe0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004fe4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004fe8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004fec:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004ff0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004ff4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004ff8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	461a      	mov	r2, r3
 8005000:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	431a      	orrs	r2, r3
 8005008:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800500c:	4313      	orrs	r3, r2
 800500e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005012:	f107 0310 	add.w	r3, r7, #16
 8005016:	4611      	mov	r1, r2
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff f98d 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800501e:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8005020:	bf00      	nop
 8005022:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8005024:	4b33      	ldr	r3, [pc, #204]	; (80050f4 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	23f7      	movs	r3, #247	; 0xf7
 800502a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800502e:	23d2      	movs	r3, #210	; 0xd2
 8005030:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005034:	2302      	movs	r3, #2
 8005036:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800503a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800503e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8005042:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800504a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800504e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005052:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005056:	041b      	lsls	r3, r3, #16
 8005058:	461a      	mov	r2, r3
 800505a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800505e:	021b      	lsls	r3, r3, #8
 8005060:	431a      	orrs	r2, r3
 8005062:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005066:	4313      	orrs	r3, r2
 8005068:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800506c:	f107 030c 	add.w	r3, r7, #12
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff f960 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8005078:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800507a:	bf00      	nop
 800507c:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800507e:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8005080:	601a      	str	r2, [r3, #0]
static STM32TouchController tc;
 8005082:	481e      	ldr	r0, [pc, #120]	; (80050fc <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8005084:	f7ff fdd2 	bl	8004c2c <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8005088:	481d      	ldr	r0, [pc, #116]	; (8005100 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800508a:	f7fe fe4d 	bl	8003d28 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 800508e:	481d      	ldr	r0, [pc, #116]	; (8005104 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8005090:	f019 fed0 	bl	801ee34 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8005094:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	4b16      	ldr	r3, [pc, #88]	; (80050fc <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80050a2:	4a18      	ldr	r2, [pc, #96]	; (8005104 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80050a4:	4916      	ldr	r1, [pc, #88]	; (8005100 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 80050a6:	4818      	ldr	r0, [pc, #96]	; (8005108 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 80050a8:	f7ff fd94 	bl	8004bd4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d113      	bne.n	80050da <_Z41__static_initialization_and_destruction_0ii+0x292>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10e      	bne.n	80050da <_Z41__static_initialization_and_destruction_0ii+0x292>
 80050bc:	4812      	ldr	r0, [pc, #72]	; (8005108 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 80050be:	f7fe fc57 	bl	8003970 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80050c2:	4812      	ldr	r0, [pc, #72]	; (800510c <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 80050c4:	f000 f846 	bl	8005154 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80050c8:	480e      	ldr	r0, [pc, #56]	; (8005104 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80050ca:	f7ff fe9b 	bl	8004e04 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 80050ce:	480c      	ldr	r0, [pc, #48]	; (8005100 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 80050d0:	f7fe fe54 	bl	8003d7c <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 80050d4:	4809      	ldr	r0, [pc, #36]	; (80050fc <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80050d6:	f7fe fa1d 	bl	8003514 <_ZN20STM32TouchControllerD1Ev>
}
 80050da:	bf00      	nop
 80050dc:	3748      	adds	r7, #72	; 0x48
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	2000029c 	.word	0x2000029c
 80050e8:	200002a0 	.word	0x200002a0
 80050ec:	200002a4 	.word	0x200002a4
 80050f0:	200002a8 	.word	0x200002a8
 80050f4:	200002ac 	.word	0x200002ac
 80050f8:	200002b0 	.word	0x200002b0
 80050fc:	20022b1c 	.word	0x20022b1c
 8005100:	20022b20 	.word	0x20022b20
 8005104:	20023740 	.word	0x20023740
 8005108:	2002379c 	.word	0x2002379c
 800510c:	20000010 	.word	0x20000010

08005110 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	4a05      	ldr	r2, [pc, #20]	; (8005130 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff fa3f 	bl	80045a4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	0802c228 	.word	0x0802c228

08005134 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff ffe7 	bl	8005110 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8005142:	2110      	movs	r1, #16
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f021 fb1e 	bl	8026786 <_ZdlPvj>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_06 = 7; // verdana_12_4bpp
    static const touchgfx::FontId TYPOGRAPHY_07 = 0; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 8;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	4a05      	ldr	r2, [pc, #20]	; (8005174 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff f91d 	bl	80043a4 <_ZN8touchgfx12FontProviderD1Ev>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	0802c3b4 	.word	0x0802c3b4

08005178 <_ZN23ApplicationFontProviderD0Ev>:
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff ffe7 	bl	8005154 <_ZN23ApplicationFontProviderD1Ev>
 8005186:	2104      	movs	r1, #4
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f021 fafc 	bl	8026786 <_ZdlPvj>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80051a0:	2301      	movs	r3, #1
    }
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80051b6:	230c      	movs	r3, #12
    }
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80051d0:	887a      	ldrh	r2, [r7, #2]
 80051d2:	4613      	mov	r3, r2
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	3308      	adds	r3, #8
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	4413      	add	r3, r2
    }
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80051f8:	887a      	ldrh	r2, [r7, #2]
 80051fa:	4613      	mov	r3, r2
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	3308      	adds	r3, #8
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	4413      	add	r3, r2
    }
 8005208:	4618      	mov	r0, r3
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800521c:	2301      	movs	r3, #1
    }
 800521e:	4618      	mov	r0, r3
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
	...

0800522c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8005234:	4b03      	ldr	r3, [pc, #12]	; (8005244 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv+0x18>)
    }
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	000226c0 	.word	0x000226c0

08005248 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8005254:	887b      	ldrh	r3, [r7, #2]
 8005256:	4a06      	ldr	r2, [pc, #24]	; (8005270 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 8005258:	fb02 f303 	mul.w	r3, r2, r3
 800525c:	3308      	adds	r3, #8
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	4413      	add	r3, r2
    }
 8005262:	4618      	mov	r0, r3
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	000226c0 	.word	0x000226c0

08005274 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8005280:	887b      	ldrh	r3, [r7, #2]
 8005282:	4a06      	ldr	r2, [pc, #24]	; (800529c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 8005284:	fb02 f303 	mul.w	r3, r2, r3
 8005288:	3308      	adds	r3, #8
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	4413      	add	r3, r2
    }
 800528e:	4618      	mov	r0, r3
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	000226c0 	.word	0x000226c0

080052a0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80052a8:	2301      	movs	r3, #1
    }
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80052be:	2310      	movs	r3, #16
    }
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80052d8:	887b      	ldrh	r3, [r7, #2]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	3308      	adds	r3, #8
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	4413      	add	r3, r2
    }
 80052e2:	4618      	mov	r0, r3
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	460b      	mov	r3, r1
 80052f8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80052fa:	887b      	ldrh	r3, [r7, #2]
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	3308      	adds	r3, #8
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	4413      	add	r3, r2
    }
 8005304:	4618      	mov	r0, r3
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	68d2      	ldr	r2, [r2, #12]
 8005320:	1052      	asrs	r2, r2, #1
 8005322:	1899      	adds	r1, r3, r2
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d102      	bne.n	8005336 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	e00a      	b.n	800534c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	68d2      	ldr	r2, [r2, #12]
 800533e:	1052      	asrs	r2, r2, #1
 8005340:	4413      	add	r3, r2
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6892      	ldr	r2, [r2, #8]
 8005348:	4413      	add	r3, r2
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4608      	mov	r0, r1
 800534e:	4798      	blx	r3
    }
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d010      	beq.n	800538a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d107      	bne.n	8005380 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800537c:	2301      	movs	r3, #1
 800537e:	e000      	b.n	8005382 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8005380:	2300      	movs	r3, #0
 8005382:	2b01      	cmp	r3, #1
 8005384:	d001      	beq.n	800538a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800538a:	2300      	movs	r3, #0
    }
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <_GLOBAL__sub_I_touchgfx_init>:
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
 800539c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80053a0:	2001      	movs	r0, #1
 80053a2:	f7ff fd51 	bl	8004e48 <_Z41__static_initialization_and_destruction_0ii>
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <_GLOBAL__sub_D_touchgfx_init>:
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80053b0:	2000      	movs	r0, #0
 80053b2:	f7ff fd49 	bl	8004e48 <_Z41__static_initialization_and_destruction_0ii>
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	331c      	adds	r3, #28
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	4798      	blx	r3
    }
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	78fa      	ldrb	r2, [r7, #3]
 80053e4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005402:	3301      	adds	r3, #1
 8005404:	b2da      	uxtb	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d105      	bne.n	800543c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	78fa      	ldrb	r2, [r7, #3]
 8005434:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8005438:	2301      	movs	r3, #1
 800543a:	e027      	b.n	800548c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d123      	bne.n	800548a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	2b00      	cmp	r3, #0
 8005448:	d014      	beq.n	8005474 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3390      	adds	r3, #144	; 0x90
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	4798      	blx	r3
 8005456:	4603      	mov	r3, r0
 8005458:	461a      	mov	r2, r3
 800545a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800545e:	429a      	cmp	r2, r3
 8005460:	d008      	beq.n	8005474 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8005462:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	f083 0301 	eor.w	r3, r3, #1
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8005470:	2301      	movs	r3, #1
 8005472:	e000      	b.n	8005476 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8005474:	2300      	movs	r3, #0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d005      	beq.n	8005486 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	78fa      	ldrb	r2, [r7, #3]
 800547e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8005482:	2301      	movs	r3, #1
 8005484:	e002      	b.n	800548c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8005486:	2300      	movs	r3, #0
 8005488:	e000      	b.n	800548c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 800548a:	2300      	movs	r3, #0
    }
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	2005677a 	.word	0x2005677a

08005498 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <__NVIC_EnableIRQ>:
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	4603      	mov	r3, r0
 80054bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	db0b      	blt.n	80054de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	f003 021f 	and.w	r2, r3, #31
 80054cc:	4907      	ldr	r1, [pc, #28]	; (80054ec <__NVIC_EnableIRQ+0x38>)
 80054ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	2001      	movs	r0, #1
 80054d6:	fa00 f202 	lsl.w	r2, r0, r2
 80054da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	e000e100 	.word	0xe000e100

080054f0 <__NVIC_DisableIRQ>:
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	db12      	blt.n	8005528 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	f003 021f 	and.w	r2, r3, #31
 8005508:	490a      	ldr	r1, [pc, #40]	; (8005534 <__NVIC_DisableIRQ+0x44>)
 800550a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	2001      	movs	r0, #1
 8005512:	fa00 f202 	lsl.w	r2, r0, r2
 8005516:	3320      	adds	r3, #32
 8005518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800551c:	f3bf 8f4f 	dsb	sy
}
 8005520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005522:	f3bf 8f6f 	isb	sy
}
 8005526:	bf00      	nop
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	e000e100 	.word	0xe000e100

08005538 <__NVIC_SetPriority>:
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	6039      	str	r1, [r7, #0]
 8005542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005548:	2b00      	cmp	r3, #0
 800554a:	db0a      	blt.n	8005562 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	b2da      	uxtb	r2, r3
 8005550:	490c      	ldr	r1, [pc, #48]	; (8005584 <__NVIC_SetPriority+0x4c>)
 8005552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005556:	0112      	lsls	r2, r2, #4
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	440b      	add	r3, r1
 800555c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005560:	e00a      	b.n	8005578 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	b2da      	uxtb	r2, r3
 8005566:	4908      	ldr	r1, [pc, #32]	; (8005588 <__NVIC_SetPriority+0x50>)
 8005568:	79fb      	ldrb	r3, [r7, #7]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	3b04      	subs	r3, #4
 8005570:	0112      	lsls	r2, r2, #4
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	440b      	add	r3, r1
 8005576:	761a      	strb	r2, [r3, #24]
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	e000e100 	.word	0xe000e100
 8005588:	e000ed00 	.word	0xe000ed00

0800558c <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8005592:	4b21      	ldr	r3, [pc, #132]	; (8005618 <SCB_CleanInvalidateDCache+0x8c>)
 8005594:	2200      	movs	r2, #0
 8005596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800559a:	f3bf 8f4f 	dsb	sy
}
 800559e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80055a0:	4b1d      	ldr	r3, [pc, #116]	; (8005618 <SCB_CleanInvalidateDCache+0x8c>)
 80055a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055a6:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	0b5b      	lsrs	r3, r3, #13
 80055ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80055b0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	08db      	lsrs	r3, r3, #3
 80055b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ba:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80055c4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80055ca:	4913      	ldr	r1, [pc, #76]	; (8005618 <SCB_CleanInvalidateDCache+0x8c>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	1e5a      	subs	r2, r3, #1
 80055d6:	60ba      	str	r2, [r7, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf14      	ite	ne
 80055dc:	2301      	movne	r3, #1
 80055de:	2300      	moveq	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d000      	beq.n	80055e8 <SCB_CleanInvalidateDCache+0x5c>
      do {
 80055e6:	e7e9      	b.n	80055bc <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	1e5a      	subs	r2, r3, #1
 80055ec:	60fa      	str	r2, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bf14      	ite	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	2300      	moveq	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d000      	beq.n	80055fe <SCB_CleanInvalidateDCache+0x72>
    do {
 80055fc:	e7d9      	b.n	80055b2 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80055fe:	f3bf 8f4f 	dsb	sy
}
 8005602:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005604:	f3bf 8f6f 	isb	sy
}
 8005608:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800560a:	bf00      	nop
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	e000ed00 	.word	0xe000ed00

0800561c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800561c:	b5b0      	push	{r4, r5, r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4618      	mov	r0, r3
 8005628:	f010 fbe7 	bl	8015dfa <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800562c:	687d      	ldr	r5, [r7, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	335c      	adds	r3, #92	; 0x5c
 8005634:	681c      	ldr	r4, [r3, #0]
 8005636:	f014 f8d7 	bl	80197e8 <_ZN8touchgfx11Application11getInstanceEv>
 800563a:	4603      	mov	r3, r0
 800563c:	4619      	mov	r1, r3
 800563e:	4628      	mov	r0, r5
 8005640:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	490d      	ldr	r1, [pc, #52]	; (800567c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff ff26 	bl	8005498 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2101      	movs	r1, #1
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff fee1 	bl	8005418 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3380      	adds	r3, #128	; 0x80
 800565e:	681c      	ldr	r4, [r3, #0]
 8005660:	2300      	movs	r3, #0
 8005662:	2200      	movs	r2, #0
 8005664:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8005668:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2101      	movs	r1, #1
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff feb0 	bl	80053d4 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8005674:	bf00      	nop
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bdb0      	pop	{r4, r5, r7, pc}
 800567c:	08003ad1 	.word	0x08003ad1

08005680 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8005688:	2109      	movs	r1, #9
 800568a:	205a      	movs	r0, #90	; 0x5a
 800568c:	f7ff ff54 	bl	8005538 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8005690:	2109      	movs	r1, #9
 8005692:	2058      	movs	r0, #88	; 0x58
 8005694:	f7ff ff50 	bl	8005538 <__NVIC_SetPriority>
}
 8005698:	bf00      	nop
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80056a8:	205a      	movs	r0, #90	; 0x5a
 80056aa:	f7ff ff03 	bl	80054b4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80056ae:	2058      	movs	r0, #88	; 0x58
 80056b0:	f7ff ff00 	bl	80054b4 <__NVIC_EnableIRQ>
}
 80056b4:	bf00      	nop
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80056c4:	205a      	movs	r0, #90	; 0x5a
 80056c6:	f7ff ff13 	bl	80054f0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80056ca:	2058      	movs	r0, #88	; 0x58
 80056cc:	f7ff ff10 	bl	80054f0 <__NVIC_DisableIRQ>
}
 80056d0:	bf00      	nop
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80056e0:	4b11      	ldr	r3, [pc, #68]	; (8005728 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	4b0e      	ldr	r3, [pc, #56]	; (800572c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80056f2:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80056f4:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8005706:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8005708:	4b08      	ldr	r3, [pc, #32]	; (800572c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800570a:	881a      	ldrh	r2, [r3, #0]
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800570e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8005712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005714:	4a04      	ldr	r2, [pc, #16]	; (8005728 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	40016800 	.word	0x40016800
 800572c:	20023830 	.word	0x20023830
 8005730:	20023832 	.word	0x20023832

08005734 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4618      	mov	r0, r3
 8005740:	f010 fb42 	bl	8015dc8 <_ZN8touchgfx3HAL10beginFrameEv>
 8005744:	4603      	mov	r3, r0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b082      	sub	sp, #8
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4618      	mov	r0, r3
 800575a:	f010 fb41 	bl	8015de0 <_ZN8touchgfx3HAL8endFrameEv>
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8005770:	4b03      	ldr	r3, [pc, #12]	; (8005780 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	40016884 	.word	0x40016884

08005784 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800578e:	4a06      	ldr	r2, [pc, #24]	; (80057a8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8005794:	4b05      	ldr	r3, [pc, #20]	; (80057ac <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8005796:	2201      	movs	r2, #1
 8005798:	625a      	str	r2, [r3, #36]	; 0x24
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40016884 	.word	0x40016884
 80057ac:	40016800 	.word	0x40016800

080057b0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6839      	ldr	r1, [r7, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f010 facf 	bl	8015d62 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80057c4:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	bf14      	ite	ne
 80057d0:	2301      	movne	r3, #1
 80057d2:	2300      	moveq	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 80057da:	f7ff fed7 	bl	800558c <SCB_CleanInvalidateDCache>
    }
}
 80057de:	bf00      	nop
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	e000ed00 	.word	0xe000ed00

080057ec <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	f010 fc16 	bl	8016032 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8005806:	4603      	mov	r3, r0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8005818:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 800581a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581c:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 800581e:	4b0c      	ldr	r3, [pc, #48]	; (8005850 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	b29b      	uxth	r3, r3
 8005824:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005828:	b29b      	uxth	r3, r3
 800582a:	3301      	adds	r3, #1
 800582c:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 800582e:	89fa      	ldrh	r2, [r7, #14]
 8005830:	89bb      	ldrh	r3, [r7, #12]
 8005832:	429a      	cmp	r2, r3
 8005834:	d304      	bcc.n	8005840 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8005836:	89fa      	ldrh	r2, [r7, #14]
 8005838:	89bb      	ldrh	r3, [r7, #12]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	b29b      	uxth	r3, r3
 800583e:	e000      	b.n	8005842 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40016800 	.word	0x40016800

08005854 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800585c:	4b08      	ldr	r3, [pc, #32]	; (8005880 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8005872:	f7ff fe8b 	bl	800558c <SCB_CleanInvalidateDCache>
    }
}
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	e000ed00 	.word	0xe000ed00

08005884 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800588c:	4b08      	ldr	r3, [pc, #32]	; (80058b0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005894:	2b00      	cmp	r3, #0
 8005896:	bf14      	ite	ne
 8005898:	2301      	movne	r3, #1
 800589a:	2300      	moveq	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 80058a2:	f7ff fe73 	bl	800558c <SCB_CleanInvalidateDCache>
    }
}
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	e000ed00 	.word	0xe000ed00

080058b4 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80058bc:	4b1a      	ldr	r3, [pc, #104]	; (8005928 <HAL_LTDC_LineEventCallback+0x74>)
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	4a1a      	ldr	r2, [pc, #104]	; (800592c <HAL_LTDC_LineEventCallback+0x78>)
 80058c2:	8812      	ldrh	r2, [r2, #0]
 80058c4:	4293      	cmp	r3, r2
 80058c6:	bf0c      	ite	eq
 80058c8:	2301      	moveq	r3, #1
 80058ca:	2300      	movne	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d017      	beq.n	8005902 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80058d2:	4b17      	ldr	r3, [pc, #92]	; (8005930 <HAL_LTDC_LineEventCallback+0x7c>)
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f008 f9a1 	bl	800dc20 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80058de:	f7fe f9e9 	bl	8003cb4 <_ZN8touchgfx3HAL11getInstanceEv>
 80058e2:	4603      	mov	r3, r0
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff fd85 	bl	80053f4 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80058ea:	f7fe f8c9 	bl	8003a80 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80058ee:	f7fe f9e1 	bl	8003cb4 <_ZN8touchgfx3HAL11getInstanceEv>
 80058f2:	4603      	mov	r3, r0
 80058f4:	4618      	mov	r0, r3
 80058f6:	f011 f85d 	bl	80169b4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80058fa:	2000      	movs	r0, #0
 80058fc:	f7fd fe2c 	bl	8003558 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8005900:	e00e      	b.n	8005920 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8005902:	4b0a      	ldr	r3, [pc, #40]	; (800592c <HAL_LTDC_LineEventCallback+0x78>)
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	4619      	mov	r1, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f008 f989 	bl	800dc20 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800590e:	2000      	movs	r0, #0
 8005910:	f7fd fe2d 	bl	800356e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8005914:	f7fe f9ce 	bl	8003cb4 <_ZN8touchgfx3HAL11getInstanceEv>
 8005918:	4603      	mov	r3, r0
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff fd4c 	bl	80053b8 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8005920:	bf00      	nop
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40016800 	.word	0x40016800
 800592c:	20023830 	.word	0x20023830
 8005930:	20023832 	.word	0x20023832

08005934 <_Z41__static_initialization_and_destruction_0ii>:
}
 8005934:	b580      	push	{r7, lr}
 8005936:	b092      	sub	sp, #72	; 0x48
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b01      	cmp	r3, #1
 8005942:	f040 8114 	bne.w	8005b6e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800594c:	4293      	cmp	r3, r2
 800594e:	f040 810e 	bne.w	8005b6e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8005952:	2300      	movs	r3, #0
 8005954:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8005958:	2300      	movs	r3, #0
 800595a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800595e:	2300      	movs	r3, #0
 8005960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005964:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005968:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800596c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005970:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005978:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800597c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005980:	041b      	lsls	r3, r3, #16
 8005982:	461a      	mov	r2, r3
 8005984:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005988:	021b      	lsls	r3, r3, #8
 800598a:	431a      	orrs	r2, r3
 800598c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005990:	4313      	orrs	r3, r2
 8005992:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005996:	f107 0320 	add.w	r3, r7, #32
 800599a:	4611      	mov	r1, r2
 800599c:	4618      	mov	r0, r3
 800599e:	f7fe fccb 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 80059a2:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 80059a4:	bf00      	nop
 80059a6:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 80059a8:	4b73      	ldr	r3, [pc, #460]	; (8005b78 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	23ff      	movs	r3, #255	; 0xff
 80059ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80059b2:	2300      	movs	r3, #0
 80059b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80059b8:	2300      	movs	r3, #0
 80059ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80059be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80059c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80059ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80059d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80059da:	041b      	lsls	r3, r3, #16
 80059dc:	461a      	mov	r2, r3
 80059de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	431a      	orrs	r2, r3
 80059e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80059f0:	f107 031c 	add.w	r3, r7, #28
 80059f4:	4611      	mov	r1, r2
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe fc9e 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 80059fc:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 80059fe:	bf00      	nop
 8005a00:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8005a02:	4b5e      	ldr	r3, [pc, #376]	; (8005b7c <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	2300      	movs	r3, #0
 8005a08:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8005a0c:	23ff      	movs	r3, #255	; 0xff
 8005a0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8005a12:	2300      	movs	r3, #0
 8005a14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a18:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005a1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a20:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005a24:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8005a28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a2c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005a30:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005a34:	041b      	lsls	r3, r3, #16
 8005a36:	461a      	mov	r2, r3
 8005a38:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005a4a:	f107 0318 	add.w	r3, r7, #24
 8005a4e:	4611      	mov	r1, r2
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fe fc71 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8005a56:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8005a58:	bf00      	nop
 8005a5a:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8005a5c:	4b48      	ldr	r3, [pc, #288]	; (8005b80 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	2300      	movs	r3, #0
 8005a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a66:	2300      	movs	r3, #0
 8005a68:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005a6c:	23ff      	movs	r3, #255	; 0xff
 8005a6e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8005a72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005a76:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8005a7a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005a7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005a82:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005a86:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005a8a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005a8e:	041b      	lsls	r3, r3, #16
 8005a90:	461a      	mov	r2, r3
 8005a92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005aa4:	f107 0314 	add.w	r3, r7, #20
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fe fc44 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8005ab0:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8005ab2:	bf00      	nop
 8005ab4:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8005ab6:	4b33      	ldr	r3, [pc, #204]	; (8005b84 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	23f7      	movs	r3, #247	; 0xf7
 8005abc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8005ac0:	234c      	movs	r3, #76	; 0x4c
 8005ac2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005acc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005ad0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005ad4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005ad8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8005adc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ae0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005ae4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005ae8:	041b      	lsls	r3, r3, #16
 8005aea:	461a      	mov	r2, r3
 8005aec:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	431a      	orrs	r2, r3
 8005af4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005afe:	f107 0310 	add.w	r3, r7, #16
 8005b02:	4611      	mov	r1, r2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fe fc17 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8005b0a:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8005b0c:	bf00      	nop
 8005b0e:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8005b10:	4b1d      	ldr	r3, [pc, #116]	; (8005b88 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	23f7      	movs	r3, #247	; 0xf7
 8005b16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005b1a:	23d2      	movs	r3, #210	; 0xd2
 8005b1c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005b20:	2302      	movs	r3, #2
 8005b22:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8005b26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b2a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8005b2e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b36:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005b3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005b3e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005b42:	041b      	lsls	r3, r3, #16
 8005b44:	461a      	mov	r2, r3
 8005b46:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005b58:	f107 030c 	add.w	r3, r7, #12
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe fbea 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8005b64:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8005b66:	bf00      	nop
 8005b68:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8005b6a:	4b08      	ldr	r3, [pc, #32]	; (8005b8c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	bf00      	nop
 8005b70:	3748      	adds	r7, #72	; 0x48
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20023818 	.word	0x20023818
 8005b7c:	2002381c 	.word	0x2002381c
 8005b80:	20023820 	.word	0x20023820
 8005b84:	20023824 	.word	0x20023824
 8005b88:	20023828 	.word	0x20023828
 8005b8c:	2002382c 	.word	0x2002382c

08005b90 <_GLOBAL__sub_I__ZN20TouchGFXGeneratedHAL10initializeEv>:
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b98:	2001      	movs	r0, #1
 8005b9a:	f7ff fecb 	bl	8005934 <_Z41__static_initialization_and_destruction_0ii>
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8005bac:	887b      	ldrh	r3, [r7, #2]
 8005bae:	2b0a      	cmp	r3, #10
 8005bb0:	d84f      	bhi.n	8005c52 <_ZN23ApplicationFontProvider7getFontEt+0xb2>
 8005bb2:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005be5 	.word	0x08005be5
 8005bbc:	08005bef 	.word	0x08005bef
 8005bc0:	08005bf9 	.word	0x08005bf9
 8005bc4:	08005c03 	.word	0x08005c03
 8005bc8:	08005c0d 	.word	0x08005c0d
 8005bcc:	08005c17 	.word	0x08005c17
 8005bd0:	08005c21 	.word	0x08005c21
 8005bd4:	08005c2b 	.word	0x08005c2b
 8005bd8:	08005c35 	.word	0x08005c35
 8005bdc:	08005c3f 	.word	0x08005c3f
 8005be0:	08005c49 	.word	0x08005c49
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8005be4:	f003 fa68 	bl	80090b8 <_ZN17TypedTextDatabase8getFontsEv>
 8005be8:	4603      	mov	r3, r0
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	e032      	b.n	8005c54 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8005bee:	f003 fa63 	bl	80090b8 <_ZN17TypedTextDatabase8getFontsEv>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	e02d      	b.n	8005c54 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8005bf8:	f003 fa5e 	bl	80090b8 <_ZN17TypedTextDatabase8getFontsEv>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	e028      	b.n	8005c54 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_00:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8005c02:	f003 fa59 	bl	80090b8 <_ZN17TypedTextDatabase8getFontsEv>
 8005c06:	4603      	mov	r3, r0
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	e023      	b.n	8005c54 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_01:
        // swisop3_300_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8005c0c:	f003 fa54 	bl	80090b8 <_ZN17TypedTextDatabase8getFontsEv>
 8005c10:	4603      	mov	r3, r0
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	e01e      	b.n	8005c54 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_02:
        // JetBrainsMono_Regular_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8005c16:	f003 fa4f 	bl	80090b8 <_ZN17TypedTextDatabase8getFontsEv>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	e019      	b.n	8005c54 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_03:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 8005c20:	f003 fa4a 	bl	80090b8 <_ZN17TypedTextDatabase8getFontsEv>
 8005c24:	4603      	mov	r3, r0
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	e014      	b.n	8005c54 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_04:
        // swisop3_50_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 8005c2a:	f003 fa45 	bl	80090b8 <_ZN17TypedTextDatabase8getFontsEv>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	e00f      	b.n	8005c54 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_05:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 8005c34:	f003 fa40 	bl	80090b8 <_ZN17TypedTextDatabase8getFontsEv>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	e00a      	b.n	8005c54 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_06:
        // verdana_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
 8005c3e:	f003 fa3b 	bl	80090b8 <_ZN17TypedTextDatabase8getFontsEv>
 8005c42:	4603      	mov	r3, r0
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	e005      	b.n	8005c54 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_07:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8005c48:	f003 fa36 	bl	80090b8 <_ZN17TypedTextDatabase8getFontsEv>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	e000      	b.n	8005c54 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    default:
        return 0;
 8005c52:	2300      	movs	r3, #0
    }
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8005c60:	4b02      	ldr	r3, [pc, #8]	; (8005c6c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	0802c3c0 	.word	0x0802c3c0

08005c70 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8005c74:	2301      	movs	r3, #1
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
    {
 8005c88:	4a04      	ldr	r2, [pc, #16]	; (8005c9c <_ZN8touchgfx4FontD1Ev+0x1c>)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	601a      	str	r2, [r3, #0]
    }
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4618      	mov	r0, r3
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	0802c58c 	.word	0x0802c58c

08005ca0 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
    }
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff ffe9 	bl	8005c80 <_ZN8touchgfx4FontD1Ev>
 8005cae:	2110      	movs	r1, #16
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f020 fd68 	bl	8026786 <_ZdlPvj>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8005cc0:	b590      	push	{r4, r7, lr}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8005ccc:	887b      	ldrh	r3, [r7, #2]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e010      	b.n	8005cf8 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	681c      	ldr	r4, [r3, #0]
 8005ce6:	f107 030f 	add.w	r3, r7, #15
 8005cea:	f107 0210 	add.w	r2, r7, #16
 8005cee:	8879      	ldrh	r1, [r7, #2]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	47a0      	blx	r4
 8005cf4:	6178      	str	r0, [r7, #20]
        return glyph;
 8005cf6:	697b      	ldr	r3, [r7, #20]
    }
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	371c      	adds	r7, #28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd90      	pop	{r4, r7, pc}

08005d00 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	895b      	ldrh	r3, [r3, #10]
    }
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	899b      	ldrh	r3, [r3, #12]
    }
 8005d24:	4618      	mov	r0, r3
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	889b      	ldrh	r3, [r3, #4]
    }
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	889a      	ldrh	r2, [r3, #4]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	799b      	ldrb	r3, [r3, #6]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	b29b      	uxth	r3, r3
    }
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	79db      	ldrb	r3, [r3, #7]
 8005d76:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8005d7a:	b2db      	uxtb	r3, r3
    }
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	79db      	ldrb	r3, [r3, #7]
 8005d94:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005d98:	b2db      	uxtb	r3, r3
    }
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	4a05      	ldr	r2, [pc, #20]	; (8005dc8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff ff61 	bl	8005c80 <_ZN8touchgfx4FontD1Ev>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	0802deb8 	.word	0x0802deb8

08005dcc <_ZN8touchgfx9ConstFontD0Ev>:
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff ffe7 	bl	8005da8 <_ZN8touchgfx9ConstFontD1Ev>
 8005dda:	2118      	movs	r1, #24
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f020 fcd2 	bl	8026786 <_ZdlPvj>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	4a05      	ldr	r2, [pc, #20]	; (8005e0c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff ffd3 	bl	8005da8 <_ZN8touchgfx9ConstFontD1Ev>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	0802c498 	.word	0x0802c498

08005e10 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff ffe7 	bl	8005dec <_ZN8touchgfx13GeneratedFontD1Ev>
 8005e1e:	2128      	movs	r1, #40	; 0x28
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f020 fcb0 	bl	8026786 <_ZdlPvj>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8005e38:	4a14      	ldr	r2, [pc, #80]	; (8005e8c <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	3304      	adds	r3, #4
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe fa87 	bl	8004356 <_ZN8touchgfx4RectC1Ev>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	330c      	adds	r3, #12
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fe fa82 	bl	8004356 <_ZN8touchgfx4RectC1Ev>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	615a      	str	r2, [r3, #20]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	619a      	str	r2, [r3, #24]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	61da      	str	r2, [r3, #28]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	841a      	strh	r2, [r3, #32]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	845a      	strh	r2, [r3, #34]	; 0x22
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	0802de54 	.word	0x0802de54

08005e90 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
    {
 8005e98:	4a04      	ldr	r2, [pc, #16]	; (8005eac <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	601a      	str	r2, [r3, #0]
    }
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	0802de54 	.word	0x0802de54

08005eb0 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
    }
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff ffe9 	bl	8005e90 <_ZN8touchgfx8DrawableD1Ev>
 8005ebe:	2128      	movs	r1, #40	; 0x28
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f020 fc60 	bl	8026786 <_ZdlPvj>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8005ed8:	2300      	movs	r3, #0
    }
 8005eda:	4618      	mov	r0, r3
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	4608      	mov	r0, r1
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	817b      	strh	r3, [r7, #10]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	813b      	strh	r3, [r7, #8]
 8005efc:	4613      	mov	r3, r2
 8005efe:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8005f00:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005f04:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 f82a 	bl	8005f64 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8005f10:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f87e 	bl	800601c <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	887a      	ldrh	r2, [r7, #2]
 8005f38:	809a      	strh	r2, [r3, #4]
    }
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	887a      	ldrh	r2, [r7, #2]
 8005f56:	80da      	strh	r2, [r3, #6]
    }
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	807b      	strh	r3, [r7, #2]
 8005f70:	4613      	mov	r3, r2
 8005f72:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	332c      	adds	r3, #44	; 0x2c
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005f80:	4611      	mov	r1, r2
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	4798      	blx	r3
        setY(y);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3330      	adds	r3, #48	; 0x30
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005f92:	4611      	mov	r1, r2
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	4798      	blx	r3
    }
 8005f98:	bf00      	nop
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	887a      	ldrh	r2, [r7, #2]
 8005fb0:	811a      	strh	r2, [r3, #8]
    }
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	887a      	ldrh	r2, [r7, #2]
 8005fce:	815a      	strh	r2, [r3, #10]
    }
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
    {
    }
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
    {
    }
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
    {
    }
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	460b      	mov	r3, r1
 8006026:	807b      	strh	r3, [r7, #2]
 8006028:	4613      	mov	r3, r2
 800602a:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3334      	adds	r3, #52	; 0x34
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006038:	4611      	mov	r1, r2
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	4798      	blx	r3
        setHeight(height);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3338      	adds	r3, #56	; 0x38
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f9b7 2000 	ldrsh.w	r2, [r7]
 800604a:	4611      	mov	r1, r2
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	4798      	blx	r3
    }
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
    {
    }
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
    {
    }
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	460b      	mov	r3, r1
 80060c0:	807b      	strh	r3, [r7, #2]
 80060c2:	4613      	mov	r3, r2
 80060c4:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3350      	adds	r3, #80	; 0x50
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	8879      	ldrh	r1, [r7, #2]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80060d6:	b292      	uxth	r2, r2
 80060d8:	1a8a      	subs	r2, r1, r2
 80060da:	b292      	uxth	r2, r2
 80060dc:	b210      	sxth	r0, r2
 80060de:	8839      	ldrh	r1, [r7, #0]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80060e6:	b292      	uxth	r2, r2
 80060e8:	1a8a      	subs	r2, r1, r2
 80060ea:	b292      	uxth	r2, r2
 80060ec:	b212      	sxth	r2, r2
 80060ee:	4601      	mov	r1, r0
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	4798      	blx	r3
    }
 80060f4:	bf00      	nop
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800610a:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006112:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800611a:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f7ff ffe1 	bl	80060fc <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	601a      	str	r2, [r3, #0]
    }
 8006148:	bf00      	nop
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff fe68 	bl	8005e30 <_ZN8touchgfx8DrawableC1Ev>
 8006160:	4a05      	ldr	r2, [pc, #20]	; (8006178 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	0802cb6c 	.word	0x0802cb6c

0800617c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
    {
 8006184:	4a06      	ldr	r2, [pc, #24]	; (80061a0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3304      	adds	r3, #4
 800618e:	4618      	mov	r0, r3
 8006190:	f000 f926 	bl	80063e0 <_ZN8touchgfx9ContainerD1Ev>
    }
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	0802df4c 	.word	0x0802df4c

080061a4 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
    }
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff ffe5 	bl	800617c <_ZN8touchgfx6ScreenD1Ev>
 80061b2:	213c      	movs	r1, #60	; 0x3c
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f020 fae6 	bl	8026786 <_ZdlPvj>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
    {
    }
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
    {
    }
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
    {
    }
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
    {
    }
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3304      	adds	r3, #4
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	4618      	mov	r0, r3
 800623e:	f00f fc45 	bl	8015acc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	60f8      	str	r0, [r7, #12]
 8006252:	607b      	str	r3, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	817b      	strh	r3, [r7, #10]
 8006258:	4613      	mov	r3, r2
 800625a:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4618      	mov	r0, r3
 8006260:	f7ff ff0f 	bl	8006082 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d008      	beq.n	800627c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff ff15 	bl	800609c <_ZNK8touchgfx8Drawable11isTouchableEv>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8006278:	2301      	movs	r3, #1
 800627a:	e000      	b.n	800627e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800627c:	2300      	movs	r3, #0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	601a      	str	r2, [r3, #0]
        }
    }
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff fdc8 	bl	8005e30 <_ZN8touchgfx8DrawableC1Ev>
 80062a0:	4a03      	ldr	r2, [pc, #12]	; (80062b0 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4618      	mov	r0, r3
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	0802c3ec 	.word	0x0802c3ec

080062b4 <_ZN8touchgfx6WidgetD1Ev>:
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	4a05      	ldr	r2, [pc, #20]	; (80062d4 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff fde3 	bl	8005e90 <_ZN8touchgfx8DrawableD1Ev>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	0802c3ec 	.word	0x0802c3ec

080062d8 <_ZN8touchgfx6WidgetD0Ev>:
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff ffe7 	bl	80062b4 <_ZN8touchgfx6WidgetD1Ev>
 80062e6:	2128      	movs	r1, #40	; 0x28
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f020 fa4c 	bl	8026786 <_ZdlPvj>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4618      	mov	r0, r3
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4618      	mov	r0, r3
 8006304:	2326      	movs	r3, #38	; 0x26
 8006306:	461a      	mov	r2, r3
 8006308:	2100      	movs	r1, #0
 800630a:	f020 fbfd 	bl	8026b08 <memset>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff ffbd 	bl	8006290 <_ZN8touchgfx6WidgetC1Ev>
 8006316:	4a09      	ldr	r2, [pc, #36]	; (800633c <_ZN8touchgfx3BoxC1Ev+0x44>)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	22ff      	movs	r2, #255	; 0xff
 8006320:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3328      	adds	r3, #40	; 0x28
 8006328:	2100      	movs	r1, #0
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe f804 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4618      	mov	r0, r3
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	0802da08 	.word	0x0802da08

08006340 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	4a05      	ldr	r2, [pc, #20]	; (800637c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff ffa1 	bl	80062b4 <_ZN8touchgfx6WidgetD1Ev>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	0802da08 	.word	0x0802da08

08006380 <_ZN8touchgfx3BoxD0Ev>:
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff ffe7 	bl	800635c <_ZN8touchgfx3BoxD1Ev>
 800638e:	212c      	movs	r1, #44	; 0x2c
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f020 f9f8 	bl	8026786 <_ZdlPvj>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
    {
 80063a8:	4a04      	ldr	r2, [pc, #16]	; (80063bc <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	601a      	str	r2, [r3, #0]
    }
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	0802c3dc 	.word	0x0802c3dc

080063c0 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
    }
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff ffe9 	bl	80063a0 <_ZN8touchgfx9TypedTextD1Ev>
 80063ce:	2108      	movs	r1, #8
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f020 f9d8 	bl	8026786 <_ZdlPvj>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	4a05      	ldr	r2, [pc, #20]	; (8006400 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff fd4d 	bl	8005e90 <_ZN8touchgfx8DrawableD1Ev>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	0802cb6c 	.word	0x0802cb6c

08006404 <_ZN8touchgfx9ContainerD0Ev>:
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff ffe7 	bl	80063e0 <_ZN8touchgfx9ContainerD1Ev>
 8006412:	212c      	movs	r1, #44	; 0x2c
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f020 f9b6 	bl	8026786 <_ZdlPvj>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <_ZN8touchgfx13BoxWithBorderD1Ev>:
/**
 * The BoxWithBorder class is used to create objects that can draw a box with a border on the
 * display. The width of the border can be specified. If the border width is 0 the
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	4a05      	ldr	r2, [pc, #20]	; (8006444 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff ff91 	bl	800635c <_ZN8touchgfx3BoxD1Ev>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	0802db14 	.word	0x0802db14

08006448 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff ffe7 	bl	8006424 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006456:	2134      	movs	r1, #52	; 0x34
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f020 f994 	bl	8026786 <_ZdlPvj>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <_ZN8touchgfx8TextAreaD1Ev>:
 * @see TypedText, TextAreaWithOneWildcard, TextAreaWithTwoWildcards
 *
 * @note A TextArea just holds a pointer to the text displayed. The developer must ensure that
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	4a08      	ldr	r2, [pc, #32]	; (8006494 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3328      	adds	r3, #40	; 0x28
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff ff90 	bl	80063a0 <_ZN8touchgfx9TypedTextD1Ev>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff ff16 	bl	80062b4 <_ZN8touchgfx6WidgetD1Ev>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	0802d960 	.word	0x0802d960

08006498 <_ZN8touchgfx8TextAreaD0Ev>:
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7ff ffe1 	bl	8006468 <_ZN8touchgfx8TextAreaD1Ev>
 80064a6:	213c      	movs	r1, #60	; 0x3c
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f020 f96c 	bl	8026786 <_ZdlPvj>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <_ZN8touchgfx9TypedTextC1ERKS0_>:
class TypedText
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
 80064c2:	4a07      	ldr	r2, [pc, #28]	; (80064e0 <_ZN8touchgfx9TypedTextC1ERKS0_+0x28>)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	889a      	ldrh	r2, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	809a      	strh	r2, [r3, #4]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4618      	mov	r0, r3
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	0802c3dc 	.word	0x0802c3dc

080064e4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	4618      	mov	r0, r3
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8006504:	4a07      	ldr	r2, [pc, #28]	; (8006524 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	605a      	str	r2, [r3, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	721a      	strb	r2, [r3, #8]
    {
    }
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	0802c474 	.word	0x0802c474

08006528 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
    {
 8006530:	4a04      	ldr	r2, [pc, #16]	; (8006544 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	601a      	str	r2, [r3, #0]
    }
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	0802c474 	.word	0x0802c474

08006548 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
    }
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff ffe9 	bl	8006528 <_ZN8touchgfx10TransitionD1Ev>
 8006556:	210c      	movs	r1, #12
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f020 f914 	bl	8026786 <_ZdlPvj>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
    {
    }
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
    {
    }
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
    {
    }
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 80065ac:	f013 f91c 	bl	80197e8 <_ZN8touchgfx11Application11getInstanceEv>
 80065b0:	4603      	mov	r3, r0
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	3230      	adds	r2, #48	; 0x30
 80065b6:	6812      	ldr	r2, [r2, #0]
 80065b8:	4618      	mov	r0, r3
 80065ba:	4790      	blx	r2
    }
 80065bc:	bf00      	nop
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	605a      	str	r2, [r3, #4]
    }
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f013 f91e 	bl	801982c <_ZN8touchgfx11ApplicationC1Ev>
 80065f0:	4a09      	ldr	r2, [pc, #36]	; (8006618 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a04      	ldr	r2, [pc, #16]	; (800661c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800660a:	6013      	str	r3, [r2, #0]
    }
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	0802c240 	.word	0x0802c240
 800661c:	200567e8 	.word	0x200567e8

08006620 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	601a      	str	r2, [r3, #0]
    }
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	721a      	strb	r2, [r3, #8]
    }
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	605a      	str	r2, [r3, #4]
    }
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
	...

08006674 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8006674:	b480      	push	{r7}
 8006676:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8006678:	4b0b      	ldr	r3, [pc, #44]	; (80066a8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8006680:	2b00      	cmp	r3, #0
 8006682:	d008      	beq.n	8006696 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8006684:	4b08      	ldr	r3, [pc, #32]	; (80066a8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 800668e:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006694:	e002      	b.n	800669c <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8006696:	4b04      	ldr	r3, [pc, #16]	; (80066a8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
    }
 800669c:	4618      	mov	r0, r3
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	2005677c 	.word	0x2005677c

080066ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/lana_screen/LanaView.hpp>
#include <gui/lana_screen/LanaPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff ff90 	bl	80065e0 <_ZN8touchgfx14MVPApplicationC1Ev>
 80066c0:	4a13      	ldr	r2, [pc, #76]	; (8006710 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 f89f 	bl	8006810 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80066e2:	f7fd fae7 	bl	8003cb4 <_ZN8touchgfx3HAL11getInstanceEv>
 80066e6:	4603      	mov	r3, r0
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	3208      	adds	r2, #8
 80066ec:	6812      	ldr	r2, [r2, #0]
 80066ee:	2100      	movs	r1, #0
 80066f0:	4618      	mov	r0, r3
 80066f2:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 80066f4:	2000      	movs	r0, #0
 80066f6:	f002 fc67 	bl	8008fc8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80066fa:	f7ff ffbb 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 80066fe:	4603      	mov	r3, r0
 8006700:	4618      	mov	r0, r3
 8006702:	f019 fc78 	bl	801fff6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	0802c1e4 	.word	0x0802c1e4

08006714 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	4611      	mov	r1, r2
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff ffe9 	bl	8006714 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	605a      	str	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	3308      	adds	r3, #8
 8006750:	3208      	adds	r2, #8
 8006752:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006756:	e883 0003 	stmia.w	r3, {r0, r1}
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4618      	mov	r0, r3
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8006764:	b590      	push	{r4, r7, lr}
 8006766:	b089      	sub	sp, #36	; 0x24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8006772:	4b10      	ldr	r3, [pc, #64]	; (80067b4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8006774:	61bb      	str	r3, [r7, #24]
 8006776:	2300      	movs	r3, #0
 8006778:	61fb      	str	r3, [r7, #28]
 800677a:	f107 0008 	add.w	r0, r7, #8
 800677e:	f107 0318 	add.w	r3, r7, #24
 8006782:	cb0c      	ldmia	r3, {r2, r3}
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	f000 f85f 	bl	8006848 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800678a:	f107 0308 	add.w	r3, r7, #8
 800678e:	4619      	mov	r1, r3
 8006790:	4620      	mov	r0, r4
 8006792:	f7ff ffcb 	bl	800672c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8006796:	f107 0308 	add.w	r3, r7, #8
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe fcb8 	bl	8005110 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80067ac:	bf00      	nop
 80067ae:	3724      	adds	r7, #36	; 0x24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd90      	pop	{r4, r7, pc}
 80067b4:	080067b9 	.word	0x080067b9

080067b8 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af02      	add	r7, sp, #8
 80067be:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80067cc:	461a      	mov	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	4b04      	ldr	r3, [pc, #16]	; (80067e8 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 80067d8:	4804      	ldr	r0, [pc, #16]	; (80067ec <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 80067da:	f000 f867 	bl	80068ac <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80067de:	bf00      	nop
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	200567dc 	.word	0x200567dc
 80067ec:	200567d8 	.word	0x200567d8

080067f0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	4a04      	ldr	r2, [pc, #16]	; (800680c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	0802c284 	.word	0x0802c284

08006810 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff ffe8 	bl	80067f0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8006820:	4a08      	ldr	r2, [pc, #32]	; (8006844 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	605a      	str	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	609a      	str	r2, [r3, #8]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	60da      	str	r2, [r3, #12]
    }
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	0802c228 	.word	0x0802c228

08006848 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	4639      	mov	r1, r7
 8006854:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff ffc8 	bl	80067f0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8006860:	4a08      	ldr	r2, [pc, #32]	; (8006884 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	605a      	str	r2, [r3, #4]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3308      	adds	r3, #8
 8006870:	463a      	mov	r2, r7
 8006872:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006876:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	0802c228 	.word	0x0802c228

08006888 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff fe32 	bl	80064fc <_ZN8touchgfx10TransitionC1Ev>
 8006898:	4a03      	ldr	r2, [pc, #12]	; (80068a8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	0802c450 	.word	0x0802c450

080068ac <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80068ac:	b590      	push	{r4, r7, lr}
 80068ae:	b08f      	sub	sp, #60	; 0x3c
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3320      	adds	r3, #32
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4610      	mov	r0, r2
 80068ca:	4798      	blx	r3
 80068cc:	4603      	mov	r3, r0
 80068ce:	4a80      	ldr	r2, [pc, #512]	; (8006ad0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d805      	bhi.n	80068e0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80068d4:	4b7f      	ldr	r3, [pc, #508]	; (8006ad4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80068d6:	4a80      	ldr	r2, [pc, #512]	; (8006ad8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80068d8:	21a3      	movs	r1, #163	; 0xa3
 80068da:	4880      	ldr	r0, [pc, #512]	; (8006adc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80068dc:	f020 f888 	bl	80269f0 <__assert_func>
 80068e0:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3320      	adds	r3, #32
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4610      	mov	r0, r2
 80068f2:	4798      	blx	r3
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b0f      	cmp	r3, #15
 80068f8:	d805      	bhi.n	8006906 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80068fa:	4b79      	ldr	r3, [pc, #484]	; (8006ae0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 80068fc:	4a76      	ldr	r2, [pc, #472]	; (8006ad8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80068fe:	21a4      	movs	r1, #164	; 0xa4
 8006900:	4876      	ldr	r0, [pc, #472]	; (8006adc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8006902:	f020 f875 	bl	80269f0 <__assert_func>
 8006906:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3320      	adds	r3, #32
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4610      	mov	r0, r2
 8006918:	4798      	blx	r3
 800691a:	4603      	mov	r3, r0
 800691c:	2b0b      	cmp	r3, #11
 800691e:	d805      	bhi.n	800692c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8006920:	4b70      	ldr	r3, [pc, #448]	; (8006ae4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8006922:	4a6d      	ldr	r2, [pc, #436]	; (8006ad8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8006924:	21a5      	movs	r1, #165	; 0xa5
 8006926:	486d      	ldr	r0, [pc, #436]	; (8006adc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8006928:	f020 f862 	bl	80269f0 <__assert_func>
 800692c:	bf00      	nop
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	62bb      	str	r3, [r7, #40]	; 0x28
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800693a:	f012 ff55 	bl	80197e8 <_ZN8touchgfx11Application11getInstanceEv>
 800693e:	4603      	mov	r3, r0
 8006940:	4618      	mov	r0, r3
 8006942:	f012 ff57 	bl	80197f4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d008      	beq.n	8006960 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	330c      	adds	r3, #12
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4610      	mov	r0, r2
 800695e:	4798      	blx	r3
    if (*currentTrans)
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d007      	beq.n	8006978 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4610      	mov	r0, r2
 8006976:	4798      	blx	r3
    if (*currentScreen)
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d008      	beq.n	8006992 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3314      	adds	r3, #20
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4610      	mov	r0, r2
 8006990:	4798      	blx	r3
    if (*currentPresenter)
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d008      	beq.n	80069ac <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3304      	adds	r3, #4
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4610      	mov	r0, r2
 80069aa:	4798      	blx	r3
    if (*currentScreen)
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d007      	beq.n	80069c4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4610      	mov	r0, r2
 80069c2:	4798      	blx	r3
    if (*currentPresenter)
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d008      	beq.n	80069de <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3308      	adds	r3, #8
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4610      	mov	r0, r2
 80069dc:	4798      	blx	r3
}
 80069de:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	2100      	movs	r1, #0
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f880 	bl	8006aec <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80069ec:	4603      	mov	r3, r0
 80069ee:	4619      	mov	r1, r3
 80069f0:	200c      	movs	r0, #12
 80069f2:	f7ff fd77 	bl	80064e4 <_ZnwjPv>
 80069f6:	4604      	mov	r4, r0
 80069f8:	4620      	mov	r0, r4
 80069fa:	f7ff ff45 	bl	8006888 <_ZN8touchgfx12NoTransitionC1Ev>
 80069fe:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 f883 	bl	8006b12 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4835      	ldr	r0, [pc, #212]	; (8006ae8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x23c>)
 8006a12:	f7ff fd67 	bl	80064e4 <_ZnwjPv>
 8006a16:	4604      	mov	r4, r0
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f002 fff5 	bl	8009a08 <_ZN8MainViewC1Ev>
 8006a1e:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2100      	movs	r1, #0
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 f886 	bl	8006b38 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	4619      	mov	r1, r3
 8006a30:	2010      	movs	r0, #16
 8006a32:	f7ff fd57 	bl	80064e4 <_ZnwjPv>
 8006a36:	4604      	mov	r4, r0
 8006a38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f002 fe56 	bl	80096ec <_ZN13MainPresenterC1ER8MainView>
 8006a40:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a46:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a4c:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a52:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8006a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8006a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	e000      	b.n	8006a62 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8006a60:	2300      	movs	r3, #0
 8006a62:	4619      	mov	r1, r3
 8006a64:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006a66:	f7ff fddb 	bl	8006620 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff fdf0 	bl	8006656 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 f86f 	bl	8006b5e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	61fb      	str	r3, [r7, #28]
 8006a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a86:	61bb      	str	r3, [r7, #24]
 8006a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	330c      	adds	r3, #12
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	69f8      	ldr	r0, [r7, #28]
 8006a96:	4798      	blx	r3
    newPresenter->activate();
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69b8      	ldr	r0, [r7, #24]
 8006aa0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8006aa2:	6979      	ldr	r1, [r7, #20]
 8006aa4:	69f8      	ldr	r0, [r7, #28]
 8006aa6:	f014 fb7c 	bl	801b1a2 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3310      	adds	r3, #16
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6978      	ldr	r0, [r7, #20]
 8006ab4:	4798      	blx	r3
    newTransition->invalidate();
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3314      	adds	r3, #20
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6978      	ldr	r0, [r7, #20]
 8006ac0:	4798      	blx	r3
}
 8006ac2:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8006ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	373c      	adds	r7, #60	; 0x3c
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd90      	pop	{r4, r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	000226bf 	.word	0x000226bf
 8006ad4:	0802b5e0 	.word	0x0802b5e0
 8006ad8:	0802b670 	.word	0x0802b670
 8006adc:	0802b770 	.word	0x0802b770
 8006ae0:	0802b7b8 	.word	0x0802b7b8
 8006ae4:	0802b85c 	.word	0x0802b85c
 8006ae8:	000226c0 	.word	0x000226c0

08006aec <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3324      	adds	r3, #36	; 0x24
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	887a      	ldrh	r2, [r7, #2]
 8006b02:	4611      	mov	r1, r2
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4798      	blx	r3
 8006b08:	4603      	mov	r3, r0
    }
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b082      	sub	sp, #8
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3324      	adds	r3, #36	; 0x24
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	887a      	ldrh	r2, [r7, #2]
 8006b28:	4611      	mov	r1, r2
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	4798      	blx	r3
 8006b2e:	4603      	mov	r3, r0
    }
 8006b30:	4618      	mov	r0, r3
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3324      	adds	r3, #36	; 0x24
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	887a      	ldrh	r2, [r7, #2]
 8006b4e:	4611      	mov	r1, r2
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	4798      	blx	r3
 8006b54:	4603      	mov	r3, r0
    }
 8006b56:	4618      	mov	r0, r3
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006b6e:	bf00      	nop
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <_ZN8touchgfx12NoTransitionD1Ev>:
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	4a05      	ldr	r2, [pc, #20]	; (8006b9c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff fccb 	bl	8006528 <_ZN8touchgfx10TransitionD1Ev>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	0802c450 	.word	0x0802c450

08006ba0 <_ZN8touchgfx12NoTransitionD0Ev>:
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff ffe7 	bl	8006b7c <_ZN8touchgfx12NoTransitionD1Ev>
 8006bae:	210c      	movs	r1, #12
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f01f fde8 	bl	8026786 <_ZdlPvj>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <_Z41__static_initialization_and_destruction_0ii>:
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b092      	sub	sp, #72	; 0x48
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	f040 8114 	bne.w	8006dfa <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	f040 810e 	bne.w	8006dfa <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8006bde:	2300      	movs	r3, #0
 8006be0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8006be4:	2300      	movs	r3, #0
 8006be6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8006bea:	2300      	movs	r3, #0
 8006bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006bf0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006bf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006bf8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006bfc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006c08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c0c:	041b      	lsls	r3, r3, #16
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006c14:	021b      	lsls	r3, r3, #8
 8006c16:	431a      	orrs	r2, r3
 8006c18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006c22:	f107 0320 	add.w	r3, r7, #32
 8006c26:	4611      	mov	r1, r2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fd fb85 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8006c30:	bf00      	nop
 8006c32:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8006c34:	4b73      	ldr	r3, [pc, #460]	; (8006e04 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	23ff      	movs	r3, #255	; 0xff
 8006c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8006c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c4e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8006c52:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006c62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c66:	041b      	lsls	r3, r3, #16
 8006c68:	461a      	mov	r2, r3
 8006c6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	431a      	orrs	r2, r3
 8006c72:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006c76:	4313      	orrs	r3, r2
 8006c78:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006c7c:	f107 031c 	add.w	r3, r7, #28
 8006c80:	4611      	mov	r1, r2
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fd fb58 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8006c88:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8006c8a:	bf00      	nop
 8006c8c:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8006c8e:	4b5e      	ldr	r3, [pc, #376]	; (8006e08 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	2300      	movs	r3, #0
 8006c94:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8006c98:	23ff      	movs	r3, #255	; 0xff
 8006c9a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ca4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006ca8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006cac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006cb0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8006cb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006cb8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006cbc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006cc0:	041b      	lsls	r3, r3, #16
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006cc8:	021b      	lsls	r3, r3, #8
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006cd6:	f107 0318 	add.w	r3, r7, #24
 8006cda:	4611      	mov	r1, r2
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fd fb2b 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8006ce2:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8006ce4:	bf00      	nop
 8006ce6:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8006ce8:	4b48      	ldr	r3, [pc, #288]	; (8006e0c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	2300      	movs	r3, #0
 8006cee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8006cf8:	23ff      	movs	r3, #255	; 0xff
 8006cfa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8006cfe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006d02:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8006d06:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006d0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006d0e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8006d12:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006d16:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006d1a:	041b      	lsls	r3, r3, #16
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d22:	021b      	lsls	r3, r3, #8
 8006d24:	431a      	orrs	r2, r3
 8006d26:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006d30:	f107 0314 	add.w	r3, r7, #20
 8006d34:	4611      	mov	r1, r2
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fd fafe 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8006d3c:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8006d3e:	bf00      	nop
 8006d40:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8006d42:	4b33      	ldr	r3, [pc, #204]	; (8006e10 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	23f7      	movs	r3, #247	; 0xf7
 8006d48:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8006d4c:	234c      	movs	r3, #76	; 0x4c
 8006d4e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8006d52:	2302      	movs	r3, #2
 8006d54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006d58:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006d5c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8006d60:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006d64:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8006d68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d6c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006d70:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006d74:	041b      	lsls	r3, r3, #16
 8006d76:	461a      	mov	r2, r3
 8006d78:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006d84:	4313      	orrs	r3, r2
 8006d86:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006d8a:	f107 0310 	add.w	r3, r7, #16
 8006d8e:	4611      	mov	r1, r2
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fd fad1 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8006d96:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8006d98:	bf00      	nop
 8006d9a:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8006d9c:	4b1d      	ldr	r3, [pc, #116]	; (8006e14 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	23f7      	movs	r3, #247	; 0xf7
 8006da2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006da6:	23d2      	movs	r3, #210	; 0xd2
 8006da8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006dac:	2302      	movs	r3, #2
 8006dae:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8006db2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006db6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8006dba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006dc6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006dca:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006dce:	041b      	lsls	r3, r3, #16
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006dd6:	021b      	lsls	r3, r3, #8
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006de4:	f107 030c 	add.w	r3, r7, #12
 8006de8:	4611      	mov	r1, r2
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fd faa4 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8006df0:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8006df2:	bf00      	nop
 8006df4:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8006df6:	4b08      	ldr	r3, [pc, #32]	; (8006e18 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	bf00      	nop
 8006dfc:	3748      	adds	r7, #72	; 0x48
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20023834 	.word	0x20023834
 8006e08:	20023838 	.word	0x20023838
 8006e0c:	2002383c 	.word	0x2002383c
 8006e10:	20023840 	.word	0x20023840
 8006e14:	20023844 	.word	0x20023844
 8006e18:	20023848 	.word	0x20023848

08006e1c <_GLOBAL__sub_I__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006e24:	2001      	movs	r0, #1
 8006e26:	f7ff fecb 	bl	8006bc0 <_Z41__static_initialization_and_destruction_0ii>
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
    }
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8006e50:	4618      	mov	r0, r3
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08c      	sub	sp, #48	; 0x30
 8006e60:	af08      	add	r7, sp, #32
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	4611      	mov	r1, r2
 8006e68:	461a      	mov	r2, r3
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	80fb      	strh	r3, [r7, #6]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	88b9      	ldrh	r1, [r7, #4]
 8006e76:	88fa      	ldrh	r2, [r7, #6]
 8006e78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e7a:	9306      	str	r3, [sp, #24]
 8006e7c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e7e:	9305      	str	r3, [sp, #20]
 8006e80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e84:	9304      	str	r3, [sp, #16]
 8006e86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e8a:	9303      	str	r3, [sp, #12]
 8006e8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e90:	9302      	str	r3, [sp, #8]
 8006e92:	7f3b      	ldrb	r3, [r7, #28]
 8006e94:	9301      	str	r3, [sp, #4]
 8006e96:	7e3b      	ldrb	r3, [r7, #24]
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	f013 fcd9 	bl	801a854 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8006ea2:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eac:	619a      	str	r2, [r3, #24]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb2:	61da      	str	r2, [r3, #28]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006eb8:	621a      	str	r2, [r3, #32]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ebe:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	0802c498 	.word	0x0802c498

08006ed0 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	889b      	ldrh	r3, [r3, #4]
 8006ee4:	0adb      	lsrs	r3, r3, #11
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	4413      	add	r3, r2
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4413      	add	r3, r2
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8006f02:	b480      	push	{r7}
 8006f04:	b089      	sub	sp, #36	; 0x24
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	607a      	str	r2, [r7, #4]
 8006f0e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	7b1b      	ldrb	r3, [r3, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e030      	b.n	8006f84 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	69da      	ldr	r2, [r3, #28]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	7b5b      	ldrb	r3, [r3, #13]
 8006f2e:	021b      	lsls	r3, r3, #8
 8006f30:	b21b      	sxth	r3, r3
 8006f32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f36:	b219      	sxth	r1, r3
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	7adb      	ldrb	r3, [r3, #11]
 8006f3c:	b21b      	sxth	r3, r3
 8006f3e:	430b      	orrs	r3, r1
 8006f40:	b21b      	sxth	r3, r3
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	7b1b      	ldrb	r3, [r3, #12]
 8006f4e:	837b      	strh	r3, [r7, #26]
 8006f50:	8b7b      	ldrh	r3, [r7, #26]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d015      	beq.n	8006f82 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	897a      	ldrh	r2, [r7, #10]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d103      	bne.n	8006f68 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006f66:	e00d      	b.n	8006f84 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	897a      	ldrh	r2, [r7, #10]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d306      	bcc.n	8006f80 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8006f72:	8b7b      	ldrh	r3, [r7, #26]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	837b      	strh	r3, [r7, #26]
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	61fb      	str	r3, [r7, #28]
 8006f7e:	e7e7      	b.n	8006f50 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8006f80:	bf00      	nop
        }
    }
    return 0;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3724      	adds	r7, #36	; 0x24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8006f9c:	4a06      	ldr	r2, [pc, #24]	; (8006fb8 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	887a      	ldrh	r2, [r7, #2]
 8006fa6:	809a      	strh	r2, [r3, #4]
    }
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	0802c3dc 	.word	0x0802c3dc

08006fbc <_ZN8touchgfx8TextAreaC1Ev>:
{
public:
    TextArea()
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	2326      	movs	r3, #38	; 0x26
 8006fca:	461a      	mov	r2, r3
 8006fcc:	2100      	movs	r1, #0
 8006fce:	f01f fd9b 	bl	8026b08 <memset>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff f95b 	bl	8006290 <_ZN8touchgfx6WidgetC1Ev>
 8006fda:	4a14      	ldr	r2, [pc, #80]	; (800702c <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	601a      	str	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3328      	adds	r3, #40	; 0x28
 8006fe4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7ff ffd1 	bl	8006f90 <_ZN8touchgfx9TypedTextC1Et>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3330      	adds	r3, #48	; 0x30
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fd f99f 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	869a      	strh	r2, [r3, #52]	; 0x34
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	22ff      	movs	r2, #255	; 0xff
 8007004:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	0802d960 	.word	0x0802d960

08007030 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff ffbe 	bl	8006fbc <_ZN8touchgfx8TextAreaC1Ev>
 8007040:	4a05      	ldr	r2, [pc, #20]	; (8007058 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	0802da6c 	.word	0x0802da6c

0800705c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255)
 8007098:	4a09      	ldr	r2, [pc, #36]	; (80070c0 <_ZN8touchgfx15AbstractPainterC1Ev+0x30>)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	809a      	strh	r2, [r3, #4]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	80da      	strh	r2, [r3, #6]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	22ff      	movs	r2, #255	; 0xff
 80070ae:	721a      	strb	r2, [r3, #8]
    {
    }
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	0802c558 	.word	0x0802c558

080070c4 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
    {
 80070cc:	4a04      	ldr	r2, [pc, #16]	; (80070e0 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
    }
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	0802c558 	.word	0x0802c558

080070e4 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
    }
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff ffe9 	bl	80070c4 <_ZN8touchgfx15AbstractPainterD1Ev>
 80070f2:	210c      	movs	r1, #12
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f01f fb46 	bl	8026786 <_ZdlPvj>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
            : v(i)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	601a      	str	r2, [r3, #0]
        {
        }
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4618      	mov	r0, r3
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
        {
            return v;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
        }
 800712e:	4618      	mov	r0, r3
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 800713a:	b590      	push	{r4, r7, lr}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	3340      	adds	r3, #64	; 0x40
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff ffea 	bl	8007122 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800714e:	4604      	mov	r4, r0
 8007150:	463b      	mov	r3, r7
 8007152:	4618      	mov	r0, r3
 8007154:	f7ff ffe5 	bl	8007122 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8007158:	4603      	mov	r3, r0
 800715a:	429c      	cmp	r4, r3
 800715c:	bf0c      	ite	eq
 800715e:	2301      	moveq	r3, #1
 8007160:	2300      	movne	r3, #0
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	d106      	bne.n	8007176 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f010 f8c0 	bl	80172f4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8007174:	e000      	b.n	8007178 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8007176:	bf00      	nop
    }
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	bd90      	pop	{r4, r7, pc}
	...

08007180 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff ff80 	bl	8007090 <_ZN8touchgfx15AbstractPainterC1Ev>
 8007190:	4a29      	ldr	r2, [pc, #164]	; (8007238 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	60da      	str	r2, [r3, #12]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	611a      	str	r2, [r3, #16]
 80071a2:	2301      	movs	r3, #1
 80071a4:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80071a6:	f7ff fa65 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 80071aa:	4603      	mov	r3, r0
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	3224      	adds	r2, #36	; 0x24
 80071b0:	6812      	ldr	r2, [r2, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	4790      	blx	r2
 80071b6:	4603      	mov	r3, r0
 80071b8:	461a      	mov	r2, r3
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
 80071bc:	4293      	cmp	r3, r2
 80071be:	bf0c      	ite	eq
 80071c0:	2301      	moveq	r3, #1
 80071c2:	2300      	movne	r3, #0
 80071c4:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 80071c6:	f7fc fd75 	bl	8003cb4 <_ZN8touchgfx3HAL11getInstanceEv>
 80071ca:	4603      	mov	r3, r0
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7ff ff53 	bl	8007078 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bf14      	ite	ne
 80071d8:	2301      	movne	r3, #1
 80071da:	2300      	moveq	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d01b      	beq.n	800721a <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x9a>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80071e2:	f7fc fd67 	bl	8003cb4 <_ZN8touchgfx3HAL11getInstanceEv>
 80071e6:	4603      	mov	r3, r0
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7ff ff45 	bl	8007078 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80071ee:	4603      	mov	r3, r0
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	3224      	adds	r2, #36	; 0x24
 80071f4:	6812      	ldr	r2, [r2, #0]
 80071f6:	4618      	mov	r0, r3
 80071f8:	4790      	blx	r2
 80071fa:	4603      	mov	r3, r0
 80071fc:	461a      	mov	r2, r3
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	4293      	cmp	r3, r2
 8007202:	bf0c      	ite	eq
 8007204:	2301      	moveq	r3, #1
 8007206:	2300      	movne	r3, #0
 8007208:	b2da      	uxtb	r2, r3
 800720a:	7bbb      	ldrb	r3, [r7, #14]
 800720c:	4313      	orrs	r3, r2
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	bf14      	ite	ne
 8007214:	2301      	movne	r3, #1
 8007216:	2300      	moveq	r3, #0
 8007218:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800721a:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 800721c:	2b00      	cmp	r3, #0
 800721e:	d105      	bne.n	800722c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xac>
 8007220:	4b06      	ldr	r3, [pc, #24]	; (800723c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 8007222:	4a07      	ldr	r2, [pc, #28]	; (8007240 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc0>)
 8007224:	2128      	movs	r1, #40	; 0x28
 8007226:	4807      	ldr	r0, [pc, #28]	; (8007244 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc4>)
 8007228:	f01f fbe2 	bl	80269f0 <__assert_func>
 800722c:	bf00      	nop
    }
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	0802d4f4 	.word	0x0802d4f4
 800723c:	0802b900 	.word	0x0802b900
 8007240:	0802b960 	.word	0x0802b960
 8007244:	0802b99c 	.word	0x0802b99c

08007248 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	4a05      	ldr	r2, [pc, #20]	; (8007268 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4618      	mov	r0, r3
 800725a:	f7ff ff33 	bl	80070c4 <_ZN8touchgfx15AbstractPainterD1Ev>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4618      	mov	r0, r3
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	0802d4f4 	.word	0x0802d4f4

0800726c <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff ffe7 	bl	8007248 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 800727a:	2114      	movs	r1, #20
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f01f fa82 	bl	8026786 <_ZdlPvj>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4618      	mov	r0, r3
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB888(), painterRed(0), painterGreen(0), painterBlue(0)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4618      	mov	r0, r3
 800729a:	f7ff ff71 	bl	8007180 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 800729e:	4a0a      	ldr	r2, [pc, #40]	; (80072c8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x3c>)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	751a      	strb	r2, [r3, #20]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	755a      	strb	r2, [r3, #21]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	759a      	strb	r2, [r3, #22]
    {
        setColor(color);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f807 	bl	80072cc <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    }
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	0802d514 	.word	0x0802d514

080072cc <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 80072da:	f107 0314 	add.w	r3, r7, #20
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fc fc5a 	bl	8003b98 <_ZNK8touchgfx9colortypecvmEv>
 80072e4:	4603      	mov	r3, r0
 80072e6:	0c1b      	lsrs	r3, r3, #16
 80072e8:	b2da      	uxtb	r2, r3
    {
        painterRed = Color::getRed(color);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	751a      	strb	r2, [r3, #20]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 80072f2:	f107 0310 	add.w	r3, r7, #16
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fc fc4e 	bl	8003b98 <_ZNK8touchgfx9colortypecvmEv>
 80072fc:	4603      	mov	r3, r0
 80072fe:	0a1b      	lsrs	r3, r3, #8
 8007300:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	755a      	strb	r2, [r3, #21]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 800730a:	f107 030c 	add.w	r3, r7, #12
 800730e:	4618      	mov	r0, r3
 8007310:	f7fc fc42 	bl	8003b98 <_ZNK8touchgfx9colortypecvmEv>
 8007314:	4603      	mov	r3, r0
 8007316:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	759a      	strb	r2, [r3, #22]
    }
 800731c:	bf00      	nop
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <_ZN11tempBoxBaseD1Ev>:

class tempBoxBase : public touchgfx::Container
{
public:
    tempBoxBase();
    virtual ~tempBoxBase() {}
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	4a0d      	ldr	r2, [pc, #52]	; (8007364 <_ZN11tempBoxBaseD1Ev+0x40>)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	33b8      	adds	r3, #184	; 0xb8
 8007336:	4618      	mov	r0, r3
 8007338:	f7ff f896 	bl	8006468 <_ZN8touchgfx8TextAreaD1Ev>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	33a0      	adds	r3, #160	; 0xa0
 8007340:	4618      	mov	r0, r3
 8007342:	f001 f9fb 	bl	800873c <_ZN8touchgfx13PainterRGB888D1Ev>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	332c      	adds	r3, #44	; 0x2c
 800734a:	4618      	mov	r0, r3
 800734c:	f001 f9d4 	bl	80086f8 <_ZN8touchgfx4LineD1Ev>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff f844 	bl	80063e0 <_ZN8touchgfx9ContainerD1Ev>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	0802c66c 	.word	0x0802c66c

08007368 <_ZN11tempBoxBaseD0Ev>:
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff ffd7 	bl	8007324 <_ZN11tempBoxBaseD1Ev>
 8007376:	21f4      	movs	r1, #244	; 0xf4
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f01f fa04 	bl	8026786 <_ZdlPvj>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4618      	mov	r0, r3
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <_ZN7tempBoxD1Ev>:

class tempBox : public tempBoxBase
{
public:
    tempBox();
    virtual ~tempBox() {}
 8007388:	b590      	push	{r4, r7, lr}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	4a1c      	ldr	r2, [pc, #112]	; (8007404 <_ZN7tempBoxD1Ev+0x7c>)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	f646 031c 	movw	r3, #26652	; 0x681c
 800739c:	4413      	add	r3, r2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d011      	beq.n	80073c6 <_ZN7tempBoxD1Ev+0x3e>
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	f646 031c 	movw	r3, #26652	; 0x681c
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 54a5 	add.w	r4, r3, #5280	; 0x14a0
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	f646 031c 	movw	r3, #26652	; 0x681c
 80073b4:	4413      	add	r3, r2
 80073b6:	429c      	cmp	r4, r3
 80073b8:	d005      	beq.n	80073c6 <_ZN7tempBoxD1Ev+0x3e>
 80073ba:	3c18      	subs	r4, #24
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4620      	mov	r0, r4
 80073c2:	4798      	blx	r3
 80073c4:	e7f3      	b.n	80073ae <_ZN7tempBoxD1Ev+0x26>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d010      	beq.n	80073f2 <_ZN7tempBoxD1Ev+0x6a>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80073d6:	f246 34b0 	movw	r4, #25520	; 0x63b0
 80073da:	441c      	add	r4, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80073e2:	429c      	cmp	r4, r3
 80073e4:	d005      	beq.n	80073f2 <_ZN7tempBoxD1Ev+0x6a>
 80073e6:	3c74      	subs	r4, #116	; 0x74
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4620      	mov	r0, r4
 80073ee:	4798      	blx	r3
 80073f0:	e7f4      	b.n	80073dc <_ZN7tempBoxD1Ev+0x54>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff ff95 	bl	8007324 <_ZN11tempBoxBaseD1Ev>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4618      	mov	r0, r3
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	bd90      	pop	{r4, r7, pc}
 8007404:	0802c808 	.word	0x0802c808

08007408 <_ZN7tempBoxD0Ev>:
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7ff ffb9 	bl	8007388 <_ZN7tempBoxD1Ev>
 8007416:	f647 41bc 	movw	r1, #31932	; 0x7cbc
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f01f f9b3 	bl	8026786 <_ZdlPvj>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4618      	mov	r0, r3
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <_ZN12alertBarBaseD1Ev>:

class alertBarBase : public touchgfx::Container
{
public:
    alertBarBase();
    virtual ~alertBarBase() {}
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	4a0a      	ldr	r2, [pc, #40]	; (8007460 <_ZN12alertBarBaseD1Ev+0x34>)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3360      	adds	r3, #96	; 0x60
 800743e:	4618      	mov	r0, r3
 8007440:	f001 f99e 	bl	8008780 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	332c      	adds	r3, #44	; 0x2c
 8007448:	4618      	mov	r0, r3
 800744a:	f7fe ffeb 	bl	8006424 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4618      	mov	r0, r3
 8007452:	f7fe ffc5 	bl	80063e0 <_ZN8touchgfx9ContainerD1Ev>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	0802c5e0 	.word	0x0802c5e0

08007464 <_ZN12alertBarBaseD0Ev>:
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7ff ffdd 	bl	800742c <_ZN12alertBarBaseD1Ev>
 8007472:	21a0      	movs	r1, #160	; 0xa0
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f01f f986 	bl	8026786 <_ZdlPvj>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <_ZN8alertBarD1Ev>:

class alertBar : public alertBarBase
{
public:
    alertBar();
    virtual ~alertBar() {}
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	4a05      	ldr	r2, [pc, #20]	; (80074a4 <_ZN8alertBarD1Ev+0x20>)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff ffc9 	bl	800742c <_ZN12alertBarBaseD1Ev>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	0802c77c 	.word	0x0802c77c

080074a8 <_ZN8alertBarD0Ev>:
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7ff ffe7 	bl	8007484 <_ZN8alertBarD1Ev>
 80074b6:	21f0      	movs	r1, #240	; 0xf0
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f01f f964 	bl	8026786 <_ZdlPvj>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	4a05      	ldr	r2, [pc, #20]	; (80074e8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fe fe4f 	bl	800617c <_ZN8touchgfx6ScreenD1Ev>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	0802c524 	.word	0x0802c524

080074ec <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff ffe7 	bl	80074c8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80074fa:	2140      	movs	r1, #64	; 0x40
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f01f f942 	bl	8026786 <_ZdlPvj>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	4a34      	ldr	r2, [pc, #208]	; (80075e8 <_ZN12MainViewBaseD1Ev+0xdc>)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	4b33      	ldr	r3, [pc, #204]	; (80075ec <_ZN12MainViewBaseD1Ev+0xe0>)
 800751e:	4413      	add	r3, r2
 8007520:	4618      	mov	r0, r3
 8007522:	f001 f92d 	bl	8008780 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	4b31      	ldr	r3, [pc, #196]	; (80075f0 <_ZN12MainViewBaseD1Ev+0xe4>)
 800752a:	4413      	add	r3, r2
 800752c:	4618      	mov	r0, r3
 800752e:	f001 f927 	bl	8008780 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	4b2f      	ldr	r3, [pc, #188]	; (80075f4 <_ZN12MainViewBaseD1Ev+0xe8>)
 8007536:	4413      	add	r3, r2
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff ffa3 	bl	8007484 <_ZN8alertBarD1Ev>
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	4b2d      	ldr	r3, [pc, #180]	; (80075f8 <_ZN12MainViewBaseD1Ev+0xec>)
 8007542:	4413      	add	r3, r2
 8007544:	4618      	mov	r0, r3
 8007546:	f7ff ff9d 	bl	8007484 <_ZN8alertBarD1Ev>
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	4b2b      	ldr	r3, [pc, #172]	; (80075fc <_ZN12MainViewBaseD1Ev+0xf0>)
 800754e:	4413      	add	r3, r2
 8007550:	4618      	mov	r0, r3
 8007552:	f7ff ff19 	bl	8007388 <_ZN7tempBoxD1Ev>
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 800755c:	4413      	add	r3, r2
 800755e:	4618      	mov	r0, r3
 8007560:	f7ff ff12 	bl	8007388 <_ZN7tempBoxD1Ev>
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 800756a:	4413      	add	r3, r2
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff ff0b 	bl	8007388 <_ZN7tempBoxD1Ev>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff ff05 	bl	8007388 <_ZN7tempBoxD1Ev>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007584:	4618      	mov	r0, r3
 8007586:	f001 f8fb 	bl	8008780 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8007590:	4618      	mov	r0, r3
 8007592:	f001 f8f5 	bl	8008780 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800759c:	4618      	mov	r0, r3
 800759e:	f001 f8ef 	bl	8008780 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80075a8:	4618      	mov	r0, r3
 80075aa:	f001 f8c7 	bl	800873c <_ZN8touchgfx13PainterRGB888D1Ev>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	33d8      	adds	r3, #216	; 0xd8
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 f8a0 	bl	80086f8 <_ZN8touchgfx4LineD1Ev>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3398      	adds	r3, #152	; 0x98
 80075bc:	4618      	mov	r0, r3
 80075be:	f001 f8df 	bl	8008780 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	336c      	adds	r3, #108	; 0x6c
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fe fec8 	bl	800635c <_ZN8touchgfx3BoxD1Ev>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3340      	adds	r3, #64	; 0x40
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fe fec3 	bl	800635c <_ZN8touchgfx3BoxD1Ev>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4618      	mov	r0, r3
 80075da:	f7ff ff75 	bl	80074c8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	0802c4f0 	.word	0x0802c4f0
 80075ec:	0001f734 	.word	0x0001f734
 80075f0:	0001f6f4 	.word	0x0001f6f4
 80075f4:	0001f604 	.word	0x0001f604
 80075f8:	0001f514 	.word	0x0001f514
 80075fc:	00017858 	.word	0x00017858

08007600 <_ZN12MainViewBaseD0Ev>:
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff ff7f 	bl	800750c <_ZN12MainViewBaseD1Ev>
 800760e:	4904      	ldr	r1, [pc, #16]	; (8007620 <_ZN12MainViewBaseD0Ev+0x20>)
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f01f f8b8 	bl	8026786 <_ZdlPvj>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	000226bc 	.word	0x000226bc

08007624 <_ZN12MainViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase()
 8007624:	b590      	push	{r4, r7, lr}
 8007626:	b0cf      	sub	sp, #316	; 0x13c
 8007628:	af02      	add	r7, sp, #8
 800762a:	1d3b      	adds	r3, r7, #4
 800762c:	6018      	str	r0, [r3, #0]
 800762e:	1d3b      	adds	r3, r7, #4
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4618      	mov	r0, r3
 8007634:	f000 fe96 	bl	8008364 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8007638:	4aaa      	ldr	r2, [pc, #680]	; (80078e4 <_ZN12MainViewBaseC1Ev+0x2c0>)
 800763a:	1d3b      	adds	r3, r7, #4
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	1d3b      	adds	r3, r7, #4
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3340      	adds	r3, #64	; 0x40
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe fe56 	bl	80062f8 <_ZN8touchgfx3BoxC1Ev>
 800764c:	1d3b      	adds	r3, r7, #4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	336c      	adds	r3, #108	; 0x6c
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe fe50 	bl	80062f8 <_ZN8touchgfx3BoxC1Ev>
 8007658:	1d3b      	adds	r3, r7, #4
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3398      	adds	r3, #152	; 0x98
 800765e:	4618      	mov	r0, r3
 8007660:	f7ff fce6 	bl	8007030 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8007664:	1d3b      	adds	r3, r7, #4
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	33d8      	adds	r3, #216	; 0xd8
 800766a:	4618      	mov	r0, r3
 800766c:	f00f fe22 	bl	80172b4 <_ZN8touchgfx4LineC1Ev>
 8007670:	1d3b      	adds	r3, r7, #4
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8007678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800767c:	2100      	movs	r1, #0
 800767e:	4618      	mov	r0, r3
 8007680:	f7fc fe5a 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8007684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007688:	6819      	ldr	r1, [r3, #0]
 800768a:	4620      	mov	r0, r4
 800768c:	f7ff fdfe 	bl	800728c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8007690:	1d3b      	adds	r3, r7, #4
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff fcc9 	bl	8007030 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800769e:	1d3b      	adds	r3, r7, #4
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff fcc2 	bl	8007030 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80076ac:	1d3b      	adds	r3, r7, #4
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7ff fcbb 	bl	8007030 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80076ba:	1d3b      	adds	r3, r7, #4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80076c2:	4618      	mov	r0, r3
 80076c4:	f003 f944 	bl	800a950 <_ZN7tempBoxC1Ev>
 80076c8:	1d3b      	adds	r3, r7, #4
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 80076d0:	4413      	add	r3, r2
 80076d2:	4618      	mov	r0, r3
 80076d4:	f003 f93c 	bl	800a950 <_ZN7tempBoxC1Ev>
 80076d8:	1d3b      	adds	r3, r7, #4
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 80076e0:	4413      	add	r3, r2
 80076e2:	4618      	mov	r0, r3
 80076e4:	f003 f934 	bl	800a950 <_ZN7tempBoxC1Ev>
 80076e8:	1d3b      	adds	r3, r7, #4
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	4b7e      	ldr	r3, [pc, #504]	; (80078e8 <_ZN12MainViewBaseC1Ev+0x2c4>)
 80076ee:	4413      	add	r3, r2
 80076f0:	4618      	mov	r0, r3
 80076f2:	f003 f92d 	bl	800a950 <_ZN7tempBoxC1Ev>
 80076f6:	1d3b      	adds	r3, r7, #4
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	4b7c      	ldr	r3, [pc, #496]	; (80078ec <_ZN12MainViewBaseC1Ev+0x2c8>)
 80076fc:	4413      	add	r3, r2
 80076fe:	4618      	mov	r0, r3
 8007700:	f002 ff1e 	bl	800a540 <_ZN8alertBarC1Ev>
 8007704:	1d3b      	adds	r3, r7, #4
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	4b79      	ldr	r3, [pc, #484]	; (80078f0 <_ZN12MainViewBaseC1Ev+0x2cc>)
 800770a:	4413      	add	r3, r2
 800770c:	4618      	mov	r0, r3
 800770e:	f002 ff17 	bl	800a540 <_ZN8alertBarC1Ev>
 8007712:	1d3b      	adds	r3, r7, #4
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	4b77      	ldr	r3, [pc, #476]	; (80078f4 <_ZN12MainViewBaseC1Ev+0x2d0>)
 8007718:	4413      	add	r3, r2
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff fc88 	bl	8007030 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8007720:	1d3b      	adds	r3, r7, #4
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	4b74      	ldr	r3, [pc, #464]	; (80078f8 <_ZN12MainViewBaseC1Ev+0x2d4>)
 8007726:	4413      	add	r3, r2
 8007728:	4618      	mov	r0, r3
 800772a:	f7ff fc81 	bl	8007030 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800772e:	1d3b      	adds	r3, r7, #4
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4b72      	ldr	r3, [pc, #456]	; (80078fc <_ZN12MainViewBaseC1Ev+0x2d8>)
 8007734:	4413      	add	r3, r2
 8007736:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 800773a:	4618      	mov	r0, r3
 800773c:	f010 fb40 	bl	8017dc0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 800, 480);
 8007740:	1d3b      	adds	r3, r7, #4
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8007748:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007752:	2200      	movs	r2, #0
 8007754:	2100      	movs	r1, #0
 8007756:	f7fe fbc6 	bl	8005ee6 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800775a:	1d3b      	adds	r3, r7, #4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8007762:	2300      	movs	r3, #0
 8007764:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8007768:	2300      	movs	r3, #0
 800776a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 800776e:	2300      	movs	r3, #0
 8007770:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007774:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8007778:	041b      	lsls	r3, r3, #16
 800777a:	461a      	mov	r2, r3
 800777c:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8007780:	021b      	lsls	r3, r3, #8
 8007782:	431a      	orrs	r2, r3
 8007784:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8007788:	4313      	orrs	r3, r2
 800778a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800778e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8007792:	4611      	mov	r1, r2
 8007794:	4618      	mov	r0, r3
 8007796:	f7fc fdcf 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800779a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800779e:	4619      	mov	r1, r3
 80077a0:	4620      	mov	r0, r4
 80077a2:	f7fe fdcd 	bl	8006340 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 805, 480);
 80077a6:	1d3b      	adds	r3, r7, #4
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80077ae:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	f240 3325 	movw	r3, #805	; 0x325
 80077b8:	2200      	movs	r2, #0
 80077ba:	2100      	movs	r1, #0
 80077bc:	f7fe fb93 	bl	8005ee6 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80077c0:	1d3b      	adds	r3, r7, #4
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80077c8:	2300      	movs	r3, #0
 80077ca:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80077ce:	2300      	movs	r3, #0
 80077d0:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80077d4:	2300      	movs	r3, #0
 80077d6:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 80077da:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80077de:	041b      	lsls	r3, r3, #16
 80077e0:	461a      	mov	r2, r3
 80077e2:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80077e6:	021b      	lsls	r3, r3, #8
 80077e8:	431a      	orrs	r2, r3
 80077ea:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80077ee:	4313      	orrs	r3, r2
 80077f0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80077f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80077f8:	4611      	mov	r1, r2
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fc fd9c 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8007800:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007804:	4619      	mov	r1, r3
 8007806:	4620      	mov	r0, r4
 8007808:	f7fe fd9a 	bl	8006340 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    gearArea.setXY(331, 60);
 800780c:	1d3b      	adds	r3, r7, #4
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3398      	adds	r3, #152	; 0x98
 8007812:	223c      	movs	r2, #60	; 0x3c
 8007814:	f240 114b 	movw	r1, #331	; 0x14b
 8007818:	4618      	mov	r0, r3
 800781a:	f7fe fba3 	bl	8005f64 <_ZN8touchgfx8Drawable5setXYEss>
    gearArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800781e:	1d3b      	adds	r3, r7, #4
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8007826:	23ff      	movs	r3, #255	; 0xff
 8007828:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800782c:	23ff      	movs	r3, #255	; 0xff
 800782e:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8007832:	23ff      	movs	r3, #255	; 0xff
 8007834:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8007838:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800783c:	041b      	lsls	r3, r3, #16
 800783e:	461a      	mov	r2, r3
 8007840:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8007844:	021b      	lsls	r3, r3, #8
 8007846:	431a      	orrs	r2, r3
 8007848:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800784c:	4313      	orrs	r3, r2
 800784e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007852:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007856:	4611      	mov	r1, r2
 8007858:	4618      	mov	r0, r3
 800785a:	f7fc fd6d 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800785e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007862:	461a      	mov	r2, r3
 8007864:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8007868:	f107 0320 	add.w	r3, r7, #32
 800786c:	601a      	str	r2, [r3, #0]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 800786e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007872:	f107 0220 	add.w	r2, r7, #32
 8007876:	6812      	ldr	r2, [r2, #0]
 8007878:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800787a:	bf00      	nop
    gearArea.setLinespacing(0);
 800787c:	1d3b      	adds	r3, r7, #4
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3398      	adds	r3, #152	; 0x98
 8007882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007886:	2300      	movs	r3, #0
 8007888:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 800788c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007890:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007894:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007896:	bf00      	nop
    Unicode::snprintf(gearAreaBuffer, GEARAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID14).getText());
 8007898:	1d3b      	adds	r3, r7, #4
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4c18      	ldr	r4, [pc, #96]	; (8007900 <_ZN12MainViewBaseC1Ev+0x2dc>)
 800789e:	441c      	add	r4, r3
 80078a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078a4:	210b      	movs	r1, #11
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff fb72 	bl	8006f90 <_ZN8touchgfx9TypedTextC1Et>
 80078ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80078b4:	4b13      	ldr	r3, [pc, #76]	; (8007904 <_ZN12MainViewBaseC1Ev+0x2e0>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d105      	bne.n	80078c8 <_ZN12MainViewBaseC1Ev+0x2a4>
 80078bc:	4b12      	ldr	r3, [pc, #72]	; (8007908 <_ZN12MainViewBaseC1Ev+0x2e4>)
 80078be:	4a13      	ldr	r2, [pc, #76]	; (800790c <_ZN12MainViewBaseC1Ev+0x2e8>)
 80078c0:	21ae      	movs	r1, #174	; 0xae
 80078c2:	4813      	ldr	r0, [pc, #76]	; (8007910 <_ZN12MainViewBaseC1Ev+0x2ec>)
 80078c4:	f01f f894 	bl	80269f0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80078c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078cc:	889a      	ldrh	r2, [r3, #4]
 80078ce:	4b11      	ldr	r3, [pc, #68]	; (8007914 <_ZN12MainViewBaseC1Ev+0x2f0>)
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d322      	bcc.n	800791c <_ZN12MainViewBaseC1Ev+0x2f8>
 80078d6:	4b10      	ldr	r3, [pc, #64]	; (8007918 <_ZN12MainViewBaseC1Ev+0x2f4>)
 80078d8:	4a0c      	ldr	r2, [pc, #48]	; (800790c <_ZN12MainViewBaseC1Ev+0x2e8>)
 80078da:	21af      	movs	r1, #175	; 0xaf
 80078dc:	480c      	ldr	r0, [pc, #48]	; (8007910 <_ZN12MainViewBaseC1Ev+0x2ec>)
 80078de:	f01f f887 	bl	80269f0 <__assert_func>
 80078e2:	bf00      	nop
 80078e4:	0802c4f0 	.word	0x0802c4f0
 80078e8:	00017858 	.word	0x00017858
 80078ec:	0001f514 	.word	0x0001f514
 80078f0:	0001f604 	.word	0x0001f604
 80078f4:	0001f6f4 	.word	0x0001f6f4
 80078f8:	0001f734 	.word	0x0001f734
 80078fc:	0001f7dc 	.word	0x0001f7dc
 8007900:	0001f774 	.word	0x0001f774
 8007904:	200567ec 	.word	0x200567ec
 8007908:	0802ba00 	.word	0x0802ba00
 800790c:	0802ba44 	.word	0x0802ba44
 8007910:	0802ba74 	.word	0x0802ba74
 8007914:	200567f0 	.word	0x200567f0
 8007918:	0802babc 	.word	0x0802babc
    }
 800791c:	bf00      	nop
        return texts->getText(typedTextId);
 800791e:	4bd4      	ldr	r3, [pc, #848]	; (8007c70 <_ZN12MainViewBaseC1Ev+0x64c>)
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007926:	889b      	ldrh	r3, [r3, #4]
 8007928:	4619      	mov	r1, r3
 800792a:	4610      	mov	r0, r2
 800792c:	f001 fba2 	bl	8009074 <_ZNK8touchgfx5Texts7getTextEt>
 8007930:	4603      	mov	r3, r0
 8007932:	bf00      	nop
 8007934:	4acf      	ldr	r2, [pc, #828]	; (8007c74 <_ZN12MainViewBaseC1Ev+0x650>)
 8007936:	2102      	movs	r1, #2
 8007938:	4620      	mov	r0, r4
 800793a:	f014 ff4d 	bl	801c7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800793e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007942:	4618      	mov	r0, r3
 8007944:	f7fe fd2c 	bl	80063a0 <_ZN8touchgfx9TypedTextD1Ev>
    gearArea.setWildcard(gearAreaBuffer);
 8007948:	1d3b      	adds	r3, r7, #4
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8007950:	1d3b      	adds	r3, r7, #4
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	4bc8      	ldr	r3, [pc, #800]	; (8007c78 <_ZN12MainViewBaseC1Ev+0x654>)
 8007956:	4413      	add	r3, r2
 8007958:	4619      	mov	r1, r3
 800795a:	f7ff fb7f 	bl	800705c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    gearArea.resizeToCurrentText();
 800795e:	1d3b      	adds	r3, r7, #4
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3398      	adds	r3, #152	; 0x98
 8007964:	4618      	mov	r0, r3
 8007966:	f010 f853 	bl	8017a10 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    gearArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 800796a:	1d3b      	adds	r3, r7, #4
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8007972:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007976:	2100      	movs	r1, #0
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff fb09 	bl	8006f90 <_ZN8touchgfx9TypedTextC1Et>
 800797e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007982:	4619      	mov	r1, r3
 8007984:	4620      	mov	r0, r4
 8007986:	f010 f860 	bl	8017a4a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800798a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe fd06 	bl	80063a0 <_ZN8touchgfx9TypedTextD1Ev>

    line1.setPosition(329, 140, 152, 20);
 8007994:	1d3b      	adds	r3, r7, #4
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800799c:	2314      	movs	r3, #20
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	2398      	movs	r3, #152	; 0x98
 80079a2:	228c      	movs	r2, #140	; 0x8c
 80079a4:	f240 1149 	movw	r1, #329	; 0x149
 80079a8:	f7fe fa9d 	bl	8005ee6 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80079ac:	1d3b      	adds	r3, r7, #4
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80079b4:	23ff      	movs	r3, #255	; 0xff
 80079b6:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 80079ba:	23ff      	movs	r3, #255	; 0xff
 80079bc:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 80079c0:	23ff      	movs	r3, #255	; 0xff
 80079c2:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 80079c6:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 80079ca:	041b      	lsls	r3, r3, #16
 80079cc:	461a      	mov	r2, r3
 80079ce:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80079d2:	021b      	lsls	r3, r3, #8
 80079d4:	431a      	orrs	r2, r3
 80079d6:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80079da:	4313      	orrs	r3, r2
 80079dc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80079e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80079e4:	4611      	mov	r1, r2
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fc fca6 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 80079ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079f0:	4619      	mov	r1, r3
 80079f2:	4620      	mov	r0, r4
 80079f4:	f7ff fc6a 	bl	80072cc <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 80079f8:	1d3b      	adds	r3, r7, #4
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8007a00:	1d3b      	adds	r3, r7, #4
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	f00f fa76 	bl	8016efc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line1.setStart(0, 0);
 8007a10:	1d3b      	adds	r3, r7, #4
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	33d8      	adds	r3, #216	; 0xd8
 8007a16:	2200      	movs	r2, #0
 8007a18:	2100      	movs	r1, #0
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 fcb8 	bl	8008390 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(150, 0);
 8007a20:	1d3b      	adds	r3, r7, #4
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	33d8      	adds	r3, #216	; 0xd8
 8007a26:	2200      	movs	r2, #0
 8007a28:	2196      	movs	r1, #150	; 0x96
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 fcd6 	bl	80083dc <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(4);
 8007a30:	1d3b      	adds	r3, r7, #4
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	33d8      	adds	r3, #216	; 0xd8
 8007a36:	2104      	movs	r1, #4
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 fcf5 	bl	8008428 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8007a3e:	1d3b      	adds	r3, r7, #4
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	33d8      	adds	r3, #216	; 0xd8
 8007a44:	2101      	movs	r1, #1
 8007a46:	4618      	mov	r0, r3
 8007a48:	f00f fd7a 	bl	8017540 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    rpmArea.setPosition(298, 71, 212, 69);
 8007a4c:	1d3b      	adds	r3, r7, #4
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8007a54:	2345      	movs	r3, #69	; 0x45
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	23d4      	movs	r3, #212	; 0xd4
 8007a5a:	2247      	movs	r2, #71	; 0x47
 8007a5c:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8007a60:	f7fe fa41 	bl	8005ee6 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpmArea.setColor(touchgfx::Color::getColorFromRGB(0, 102, 255));
 8007a64:	1d3b      	adds	r3, r7, #4
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 8007a72:	2366      	movs	r3, #102	; 0x66
 8007a74:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
 8007a78:	23ff      	movs	r3, #255	; 0xff
 8007a7a:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
 8007a7e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8007a82:	041b      	lsls	r3, r3, #16
 8007a84:	461a      	mov	r2, r3
 8007a86:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8007a8a:	021b      	lsls	r3, r3, #8
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8007a92:	4313      	orrs	r3, r2
 8007a94:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007a98:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fc fc4a 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8007aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8007aae:	f107 031c 	add.w	r3, r7, #28
 8007ab2:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007ab4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ab8:	f107 021c 	add.w	r2, r7, #28
 8007abc:	6812      	ldr	r2, [r2, #0]
 8007abe:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007ac0:	bf00      	nop
    rpmArea.setLinespacing(0);
 8007ac2:	1d3b      	adds	r3, r7, #4
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007aca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
        linespace = space;
 8007ad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ad8:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8007adc:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007ade:	bf00      	nop
    Unicode::snprintf(rpmAreaBuffer, RPMAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID13).getText());
 8007ae0:	1d3b      	adds	r3, r7, #4
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4c65      	ldr	r4, [pc, #404]	; (8007c7c <_ZN12MainViewBaseC1Ev+0x658>)
 8007ae6:	441c      	add	r4, r3
 8007ae8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007aec:	210a      	movs	r1, #10
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7ff fa4e 	bl	8006f90 <_ZN8touchgfx9TypedTextC1Et>
 8007af4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007af8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007afc:	4b60      	ldr	r3, [pc, #384]	; (8007c80 <_ZN12MainViewBaseC1Ev+0x65c>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d105      	bne.n	8007b10 <_ZN12MainViewBaseC1Ev+0x4ec>
 8007b04:	4b5f      	ldr	r3, [pc, #380]	; (8007c84 <_ZN12MainViewBaseC1Ev+0x660>)
 8007b06:	4a60      	ldr	r2, [pc, #384]	; (8007c88 <_ZN12MainViewBaseC1Ev+0x664>)
 8007b08:	21ae      	movs	r1, #174	; 0xae
 8007b0a:	4860      	ldr	r0, [pc, #384]	; (8007c8c <_ZN12MainViewBaseC1Ev+0x668>)
 8007b0c:	f01e ff70 	bl	80269f0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b14:	889a      	ldrh	r2, [r3, #4]
 8007b16:	4b5e      	ldr	r3, [pc, #376]	; (8007c90 <_ZN12MainViewBaseC1Ev+0x66c>)
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d305      	bcc.n	8007b2a <_ZN12MainViewBaseC1Ev+0x506>
 8007b1e:	4b5d      	ldr	r3, [pc, #372]	; (8007c94 <_ZN12MainViewBaseC1Ev+0x670>)
 8007b20:	4a59      	ldr	r2, [pc, #356]	; (8007c88 <_ZN12MainViewBaseC1Ev+0x664>)
 8007b22:	21af      	movs	r1, #175	; 0xaf
 8007b24:	4859      	ldr	r0, [pc, #356]	; (8007c8c <_ZN12MainViewBaseC1Ev+0x668>)
 8007b26:	f01e ff63 	bl	80269f0 <__assert_func>
    }
 8007b2a:	bf00      	nop
        return texts->getText(typedTextId);
 8007b2c:	4b50      	ldr	r3, [pc, #320]	; (8007c70 <_ZN12MainViewBaseC1Ev+0x64c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8007b32:	4611      	mov	r1, r2
 8007b34:	4618      	mov	r0, r3
 8007b36:	f001 fa9d 	bl	8009074 <_ZNK8touchgfx5Texts7getTextEt>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	bf00      	nop
 8007b3e:	4a4d      	ldr	r2, [pc, #308]	; (8007c74 <_ZN12MainViewBaseC1Ev+0x650>)
 8007b40:	210a      	movs	r1, #10
 8007b42:	4620      	mov	r0, r4
 8007b44:	f014 fe48 	bl	801c7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8007b48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe fc27 	bl	80063a0 <_ZN8touchgfx9TypedTextD1Ev>
    rpmArea.setWildcard(rpmAreaBuffer);
 8007b52:	1d3b      	adds	r3, r7, #4
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8007b5a:	1d3b      	adds	r3, r7, #4
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	4b47      	ldr	r3, [pc, #284]	; (8007c7c <_ZN12MainViewBaseC1Ev+0x658>)
 8007b60:	4413      	add	r3, r2
 8007b62:	4619      	mov	r1, r3
 8007b64:	f7ff fa7a 	bl	800705c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpmArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 8007b68:	1d3b      	adds	r3, r7, #4
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8007b70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b74:	2101      	movs	r1, #1
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff fa0a 	bl	8006f90 <_ZN8touchgfx9TypedTextC1Et>
 8007b7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b80:	4619      	mov	r1, r3
 8007b82:	4620      	mov	r0, r4
 8007b84:	f00f ff61 	bl	8017a4a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007b88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe fc07 	bl	80063a0 <_ZN8touchgfx9TypedTextD1Ev>

    battArea.setPosition(14, 82, 240, 49);
 8007b92:	1d3b      	adds	r3, r7, #4
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8007b9a:	2331      	movs	r3, #49	; 0x31
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	23f0      	movs	r3, #240	; 0xf0
 8007ba0:	2252      	movs	r2, #82	; 0x52
 8007ba2:	210e      	movs	r1, #14
 8007ba4:	f7fe f99f 	bl	8005ee6 <_ZN8touchgfx8Drawable11setPositionEssss>
    battArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007ba8:	1d3b      	adds	r3, r7, #4
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8007bb0:	23ff      	movs	r3, #255	; 0xff
 8007bb2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 8007bb6:	23ff      	movs	r3, #255	; 0xff
 8007bb8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8007bbc:	23ff      	movs	r3, #255	; 0xff
 8007bbe:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
 8007bc2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007bc6:	041b      	lsls	r3, r3, #16
 8007bc8:	461a      	mov	r2, r3
 8007bca:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8007bce:	021b      	lsls	r3, r3, #8
 8007bd0:	431a      	orrs	r2, r3
 8007bd2:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007bdc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007be0:	4611      	mov	r1, r2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fc fba8 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8007be8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007bec:	461a      	mov	r2, r3
 8007bee:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 8007bf2:	f107 0318 	add.w	r3, r7, #24
 8007bf6:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bfc:	f107 0218 	add.w	r2, r7, #24
 8007c00:	6812      	ldr	r2, [r2, #0]
 8007c02:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007c04:	bf00      	nop
    battArea.setLinespacing(0);
 8007c06:	1d3b      	adds	r3, r7, #4
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8007c0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c12:	2300      	movs	r3, #0
 8007c14:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
        linespace = space;
 8007c18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c1c:	f8b7 20ea 	ldrh.w	r2, [r7, #234]	; 0xea
 8007c20:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007c22:	bf00      	nop
    Unicode::snprintf(battAreaBuffer, BATTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID9).getText());
 8007c24:	1d3b      	adds	r3, r7, #4
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4c1b      	ldr	r4, [pc, #108]	; (8007c98 <_ZN12MainViewBaseC1Ev+0x674>)
 8007c2a:	441c      	add	r4, r3
 8007c2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007c30:	2108      	movs	r1, #8
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff f9ac 	bl	8006f90 <_ZN8touchgfx9TypedTextC1Et>
 8007c38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007c3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007c40:	4b0f      	ldr	r3, [pc, #60]	; (8007c80 <_ZN12MainViewBaseC1Ev+0x65c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d105      	bne.n	8007c54 <_ZN12MainViewBaseC1Ev+0x630>
 8007c48:	4b0e      	ldr	r3, [pc, #56]	; (8007c84 <_ZN12MainViewBaseC1Ev+0x660>)
 8007c4a:	4a0f      	ldr	r2, [pc, #60]	; (8007c88 <_ZN12MainViewBaseC1Ev+0x664>)
 8007c4c:	21ae      	movs	r1, #174	; 0xae
 8007c4e:	480f      	ldr	r0, [pc, #60]	; (8007c8c <_ZN12MainViewBaseC1Ev+0x668>)
 8007c50:	f01e fece 	bl	80269f0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007c54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c58:	889a      	ldrh	r2, [r3, #4]
 8007c5a:	4b0d      	ldr	r3, [pc, #52]	; (8007c90 <_ZN12MainViewBaseC1Ev+0x66c>)
 8007c5c:	881b      	ldrh	r3, [r3, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d31c      	bcc.n	8007c9c <_ZN12MainViewBaseC1Ev+0x678>
 8007c62:	4b0c      	ldr	r3, [pc, #48]	; (8007c94 <_ZN12MainViewBaseC1Ev+0x670>)
 8007c64:	4a08      	ldr	r2, [pc, #32]	; (8007c88 <_ZN12MainViewBaseC1Ev+0x664>)
 8007c66:	21af      	movs	r1, #175	; 0xaf
 8007c68:	4808      	ldr	r0, [pc, #32]	; (8007c8c <_ZN12MainViewBaseC1Ev+0x668>)
 8007c6a:	f01e fec1 	bl	80269f0 <__assert_func>
 8007c6e:	bf00      	nop
 8007c70:	200567f8 	.word	0x200567f8
 8007c74:	0802bb10 	.word	0x0802bb10
 8007c78:	0001f774 	.word	0x0001f774
 8007c7c:	0001f778 	.word	0x0001f778
 8007c80:	200567ec 	.word	0x200567ec
 8007c84:	0802ba00 	.word	0x0802ba00
 8007c88:	0802ba44 	.word	0x0802ba44
 8007c8c:	0802ba74 	.word	0x0802ba74
 8007c90:	200567f0 	.word	0x200567f0
 8007c94:	0802babc 	.word	0x0802babc
 8007c98:	0001f78c 	.word	0x0001f78c
    }
 8007c9c:	bf00      	nop
        return texts->getText(typedTextId);
 8007c9e:	4bc1      	ldr	r3, [pc, #772]	; (8007fa4 <_ZN12MainViewBaseC1Ev+0x980>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f001 f9e3 	bl	8009074 <_ZNK8touchgfx5Texts7getTextEt>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	bf00      	nop
 8007cb2:	4abd      	ldr	r2, [pc, #756]	; (8007fa8 <_ZN12MainViewBaseC1Ev+0x984>)
 8007cb4:	210a      	movs	r1, #10
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f014 fd8e 	bl	801c7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8007cbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe fb6d 	bl	80063a0 <_ZN8touchgfx9TypedTextD1Ev>
    battArea.setWildcard(battAreaBuffer);
 8007cc6:	1d3b      	adds	r3, r7, #4
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8007cce:	1d3b      	adds	r3, r7, #4
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	4bb6      	ldr	r3, [pc, #728]	; (8007fac <_ZN12MainViewBaseC1Ev+0x988>)
 8007cd4:	4413      	add	r3, r2
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	f7ff f9c0 	bl	800705c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    battArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 8007cdc:	1d3b      	adds	r3, r7, #4
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8007ce4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007ce8:	2102      	movs	r1, #2
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7ff f950 	bl	8006f90 <_ZN8touchgfx9TypedTextC1Et>
 8007cf0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f00f fea7 	bl	8017a4a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007cfc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fe fb4d 	bl	80063a0 <_ZN8touchgfx9TypedTextD1Ev>

    oilPressArea.setPosition(544, 82, 240, 49);
 8007d06:	1d3b      	adds	r3, r7, #4
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 8007d0e:	2331      	movs	r3, #49	; 0x31
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	23f0      	movs	r3, #240	; 0xf0
 8007d14:	2252      	movs	r2, #82	; 0x52
 8007d16:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007d1a:	f7fe f8e4 	bl	8005ee6 <_ZN8touchgfx8Drawable11setPositionEssss>
    oilPressArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007d1e:	1d3b      	adds	r3, r7, #4
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8007d26:	23ff      	movs	r3, #255	; 0xff
 8007d28:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 8007d2c:	23ff      	movs	r3, #255	; 0xff
 8007d2e:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
 8007d32:	23ff      	movs	r3, #255	; 0xff
 8007d34:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
 8007d38:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8007d3c:	041b      	lsls	r3, r3, #16
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8007d44:	021b      	lsls	r3, r3, #8
 8007d46:	431a      	orrs	r2, r3
 8007d48:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007d52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007d56:	4611      	mov	r1, r2
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fc faed 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8007d5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d62:	461a      	mov	r2, r3
 8007d64:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 8007d68:	f107 0314 	add.w	r3, r7, #20
 8007d6c:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007d6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d72:	f107 0214 	add.w	r2, r7, #20
 8007d76:	6812      	ldr	r2, [r2, #0]
 8007d78:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007d7a:	bf00      	nop
    oilPressArea.setLinespacing(0);
 8007d7c:	1d3b      	adds	r3, r7, #4
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007d84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
        linespace = space;
 8007d8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d92:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8007d96:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007d98:	bf00      	nop
    Unicode::snprintf(oilPressAreaBuffer, OILPRESSAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID16).getText());
 8007d9a:	1d3b      	adds	r3, r7, #4
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4c84      	ldr	r4, [pc, #528]	; (8007fb0 <_ZN12MainViewBaseC1Ev+0x98c>)
 8007da0:	441c      	add	r4, r3
 8007da2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007da6:	210d      	movs	r1, #13
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7ff f8f1 	bl	8006f90 <_ZN8touchgfx9TypedTextC1Et>
 8007dae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007db2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007db6:	4b7f      	ldr	r3, [pc, #508]	; (8007fb4 <_ZN12MainViewBaseC1Ev+0x990>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d105      	bne.n	8007dca <_ZN12MainViewBaseC1Ev+0x7a6>
 8007dbe:	4b7e      	ldr	r3, [pc, #504]	; (8007fb8 <_ZN12MainViewBaseC1Ev+0x994>)
 8007dc0:	4a7e      	ldr	r2, [pc, #504]	; (8007fbc <_ZN12MainViewBaseC1Ev+0x998>)
 8007dc2:	21ae      	movs	r1, #174	; 0xae
 8007dc4:	487e      	ldr	r0, [pc, #504]	; (8007fc0 <_ZN12MainViewBaseC1Ev+0x99c>)
 8007dc6:	f01e fe13 	bl	80269f0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dce:	889a      	ldrh	r2, [r3, #4]
 8007dd0:	4b7c      	ldr	r3, [pc, #496]	; (8007fc4 <_ZN12MainViewBaseC1Ev+0x9a0>)
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d305      	bcc.n	8007de4 <_ZN12MainViewBaseC1Ev+0x7c0>
 8007dd8:	4b7b      	ldr	r3, [pc, #492]	; (8007fc8 <_ZN12MainViewBaseC1Ev+0x9a4>)
 8007dda:	4a78      	ldr	r2, [pc, #480]	; (8007fbc <_ZN12MainViewBaseC1Ev+0x998>)
 8007ddc:	21af      	movs	r1, #175	; 0xaf
 8007dde:	4878      	ldr	r0, [pc, #480]	; (8007fc0 <_ZN12MainViewBaseC1Ev+0x99c>)
 8007de0:	f01e fe06 	bl	80269f0 <__assert_func>
    }
 8007de4:	bf00      	nop
        return texts->getText(typedTextId);
 8007de6:	4b6f      	ldr	r3, [pc, #444]	; (8007fa4 <_ZN12MainViewBaseC1Ev+0x980>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8007dee:	4611      	mov	r1, r2
 8007df0:	4618      	mov	r0, r3
 8007df2:	f001 f93f 	bl	8009074 <_ZNK8touchgfx5Texts7getTextEt>
 8007df6:	4603      	mov	r3, r0
 8007df8:	bf00      	nop
 8007dfa:	4a6b      	ldr	r2, [pc, #428]	; (8007fa8 <_ZN12MainViewBaseC1Ev+0x984>)
 8007dfc:	210a      	movs	r1, #10
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f014 fcea 	bl	801c7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8007e04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fe fac9 	bl	80063a0 <_ZN8touchgfx9TypedTextD1Ev>
    oilPressArea.setWildcard(oilPressAreaBuffer);
 8007e0e:	1d3b      	adds	r3, r7, #4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 8007e16:	1d3b      	adds	r3, r7, #4
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	4b65      	ldr	r3, [pc, #404]	; (8007fb0 <_ZN12MainViewBaseC1Ev+0x98c>)
 8007e1c:	4413      	add	r3, r2
 8007e1e:	4619      	mov	r1, r3
 8007e20:	f7ff f91c 	bl	800705c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilPressArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 8007e24:	1d3b      	adds	r3, r7, #4
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8007e2c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007e30:	2103      	movs	r1, #3
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff f8ac 	bl	8006f90 <_ZN8touchgfx9TypedTextC1Et>
 8007e38:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f00f fe03 	bl	8017a4a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007e44:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe faa9 	bl	80063a0 <_ZN8touchgfx9TypedTextD1Ev>

    tempBox1.setXY(11, 248);
 8007e4e:	1d3b      	adds	r3, r7, #4
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8007e56:	22f8      	movs	r2, #248	; 0xf8
 8007e58:	210b      	movs	r1, #11
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fe f882 	bl	8005f64 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_1.setXY(11, 329);
 8007e60:	1d3b      	adds	r3, r7, #4
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8007e68:	4413      	add	r3, r2
 8007e6a:	f240 1249 	movw	r2, #329	; 0x149
 8007e6e:	210b      	movs	r1, #11
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fe f877 	bl	8005f64 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_2.setXY(570, 248);
 8007e76:	1d3b      	adds	r3, r7, #4
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007e7e:	4413      	add	r3, r2
 8007e80:	22f8      	movs	r2, #248	; 0xf8
 8007e82:	f240 213a 	movw	r1, #570	; 0x23a
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe f86c 	bl	8005f64 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_3.setXY(570, 329);
 8007e8c:	1d3b      	adds	r3, r7, #4
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	4b4e      	ldr	r3, [pc, #312]	; (8007fcc <_ZN12MainViewBaseC1Ev+0x9a8>)
 8007e92:	4413      	add	r3, r2
 8007e94:	f240 1249 	movw	r2, #329	; 0x149
 8007e98:	f240 213a 	movw	r1, #570	; 0x23a
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fe f861 	bl	8005f64 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar1.setXY(0, 0);
 8007ea2:	1d3b      	adds	r3, r7, #4
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	4b4a      	ldr	r3, [pc, #296]	; (8007fd0 <_ZN12MainViewBaseC1Ev+0x9ac>)
 8007ea8:	4413      	add	r3, r2
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2100      	movs	r1, #0
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe f858 	bl	8005f64 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar2.setXY(0, 420);
 8007eb4:	1d3b      	adds	r3, r7, #4
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	4b46      	ldr	r3, [pc, #280]	; (8007fd4 <_ZN12MainViewBaseC1Ev+0x9b0>)
 8007eba:	4413      	add	r3, r2
 8007ebc:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe f84e 	bl	8005f64 <_ZN8touchgfx8Drawable5setXYEss>

    cltArea.setPosition(14, 150, 238, 49);
 8007ec8:	1d3b      	adds	r3, r7, #4
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4842      	ldr	r0, [pc, #264]	; (8007fd8 <_ZN12MainViewBaseC1Ev+0x9b4>)
 8007ece:	4418      	add	r0, r3
 8007ed0:	2331      	movs	r3, #49	; 0x31
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	23ee      	movs	r3, #238	; 0xee
 8007ed6:	2296      	movs	r2, #150	; 0x96
 8007ed8:	210e      	movs	r1, #14
 8007eda:	f7fe f804 	bl	8005ee6 <_ZN8touchgfx8Drawable11setPositionEssss>
    cltArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007ede:	1d3b      	adds	r3, r7, #4
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4c3d      	ldr	r4, [pc, #244]	; (8007fd8 <_ZN12MainViewBaseC1Ev+0x9b4>)
 8007ee4:	441c      	add	r4, r3
 8007ee6:	23ff      	movs	r3, #255	; 0xff
 8007ee8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 8007eec:	23ff      	movs	r3, #255	; 0xff
 8007eee:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8007ef2:	23ff      	movs	r3, #255	; 0xff
 8007ef4:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
 8007ef8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8007efc:	041b      	lsls	r3, r3, #16
 8007efe:	461a      	mov	r2, r3
 8007f00:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8007f04:	021b      	lsls	r3, r3, #8
 8007f06:	431a      	orrs	r2, r3
 8007f08:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007f12:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007f16:	4611      	mov	r1, r2
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fc fa0d 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8007f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f22:	461a      	mov	r2, r3
 8007f24:	f8c7 410c 	str.w	r4, [r7, #268]	; 0x10c
 8007f28:	f107 0310 	add.w	r3, r7, #16
 8007f2c:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f32:	f107 0210 	add.w	r2, r7, #16
 8007f36:	6812      	ldr	r2, [r2, #0]
 8007f38:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007f3a:	bf00      	nop
    cltArea.setLinespacing(0);
 8007f3c:	1d3b      	adds	r3, r7, #4
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	4b25      	ldr	r3, [pc, #148]	; (8007fd8 <_ZN12MainViewBaseC1Ev+0x9b4>)
 8007f42:	4413      	add	r3, r2
 8007f44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
        linespace = space;
 8007f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f52:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 8007f56:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007f58:	bf00      	nop
    Unicode::snprintf(cltAreaBuffer, CLTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID11).getText());
 8007f5a:	1d3b      	adds	r3, r7, #4
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4c1f      	ldr	r4, [pc, #124]	; (8007fdc <_ZN12MainViewBaseC1Ev+0x9b8>)
 8007f60:	441c      	add	r4, r3
 8007f62:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007f66:	2109      	movs	r1, #9
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7ff f811 	bl	8006f90 <_ZN8touchgfx9TypedTextC1Et>
 8007f6e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007f72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007f76:	4b0f      	ldr	r3, [pc, #60]	; (8007fb4 <_ZN12MainViewBaseC1Ev+0x990>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d105      	bne.n	8007f8a <_ZN12MainViewBaseC1Ev+0x966>
 8007f7e:	4b0e      	ldr	r3, [pc, #56]	; (8007fb8 <_ZN12MainViewBaseC1Ev+0x994>)
 8007f80:	4a0e      	ldr	r2, [pc, #56]	; (8007fbc <_ZN12MainViewBaseC1Ev+0x998>)
 8007f82:	21ae      	movs	r1, #174	; 0xae
 8007f84:	480e      	ldr	r0, [pc, #56]	; (8007fc0 <_ZN12MainViewBaseC1Ev+0x99c>)
 8007f86:	f01e fd33 	bl	80269f0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007f8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007f8e:	889a      	ldrh	r2, [r3, #4]
 8007f90:	4b0c      	ldr	r3, [pc, #48]	; (8007fc4 <_ZN12MainViewBaseC1Ev+0x9a0>)
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d323      	bcc.n	8007fe0 <_ZN12MainViewBaseC1Ev+0x9bc>
 8007f98:	4b0b      	ldr	r3, [pc, #44]	; (8007fc8 <_ZN12MainViewBaseC1Ev+0x9a4>)
 8007f9a:	4a08      	ldr	r2, [pc, #32]	; (8007fbc <_ZN12MainViewBaseC1Ev+0x998>)
 8007f9c:	21af      	movs	r1, #175	; 0xaf
 8007f9e:	4808      	ldr	r0, [pc, #32]	; (8007fc0 <_ZN12MainViewBaseC1Ev+0x99c>)
 8007fa0:	f01e fd26 	bl	80269f0 <__assert_func>
 8007fa4:	200567f8 	.word	0x200567f8
 8007fa8:	0802bb10 	.word	0x0802bb10
 8007fac:	0001f78c 	.word	0x0001f78c
 8007fb0:	0001f7a0 	.word	0x0001f7a0
 8007fb4:	200567ec 	.word	0x200567ec
 8007fb8:	0802ba00 	.word	0x0802ba00
 8007fbc:	0802ba44 	.word	0x0802ba44
 8007fc0:	0802ba74 	.word	0x0802ba74
 8007fc4:	200567f0 	.word	0x200567f0
 8007fc8:	0802babc 	.word	0x0802babc
 8007fcc:	00017858 	.word	0x00017858
 8007fd0:	0001f514 	.word	0x0001f514
 8007fd4:	0001f604 	.word	0x0001f604
 8007fd8:	0001f6f4 	.word	0x0001f6f4
 8007fdc:	0001f7b4 	.word	0x0001f7b4
    }
 8007fe0:	bf00      	nop
        return texts->getText(typedTextId);
 8007fe2:	4bb7      	ldr	r3, [pc, #732]	; (80082c0 <_ZN12MainViewBaseC1Ev+0xc9c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007fea:	4611      	mov	r1, r2
 8007fec:	4618      	mov	r0, r3
 8007fee:	f001 f841 	bl	8009074 <_ZNK8touchgfx5Texts7getTextEt>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	bf00      	nop
 8007ff6:	4ab3      	ldr	r2, [pc, #716]	; (80082c4 <_ZN12MainViewBaseC1Ev+0xca0>)
 8007ff8:	210a      	movs	r1, #10
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f014 fbec 	bl	801c7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8008000:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008004:	4618      	mov	r0, r3
 8008006:	f7fe f9cb 	bl	80063a0 <_ZN8touchgfx9TypedTextD1Ev>
    cltArea.setWildcard(cltAreaBuffer);
 800800a:	1d3b      	adds	r3, r7, #4
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	4bae      	ldr	r3, [pc, #696]	; (80082c8 <_ZN12MainViewBaseC1Ev+0xca4>)
 8008010:	4413      	add	r3, r2
 8008012:	1d3a      	adds	r2, r7, #4
 8008014:	6811      	ldr	r1, [r2, #0]
 8008016:	4aad      	ldr	r2, [pc, #692]	; (80082cc <_ZN12MainViewBaseC1Ev+0xca8>)
 8008018:	440a      	add	r2, r1
 800801a:	4611      	mov	r1, r2
 800801c:	4618      	mov	r0, r3
 800801e:	f7ff f81d 	bl	800705c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cltArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 8008022:	1d3b      	adds	r3, r7, #4
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4ca8      	ldr	r4, [pc, #672]	; (80082c8 <_ZN12MainViewBaseC1Ev+0xca4>)
 8008028:	441c      	add	r4, r3
 800802a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800802e:	2107      	movs	r1, #7
 8008030:	4618      	mov	r0, r3
 8008032:	f7fe ffad 	bl	8006f90 <_ZN8touchgfx9TypedTextC1Et>
 8008036:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800803a:	4619      	mov	r1, r3
 800803c:	4620      	mov	r0, r4
 800803e:	f00f fd04 	bl	8017a4a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008042:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe f9aa 	bl	80063a0 <_ZN8touchgfx9TypedTextD1Ev>

    oilTempArea.setPosition(544, 150, 240, 49);
 800804c:	1d3b      	adds	r3, r7, #4
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	489f      	ldr	r0, [pc, #636]	; (80082d0 <_ZN12MainViewBaseC1Ev+0xcac>)
 8008052:	4418      	add	r0, r3
 8008054:	2331      	movs	r3, #49	; 0x31
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	23f0      	movs	r3, #240	; 0xf0
 800805a:	2296      	movs	r2, #150	; 0x96
 800805c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8008060:	f7fd ff41 	bl	8005ee6 <_ZN8touchgfx8Drawable11setPositionEssss>
    oilTempArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008064:	1d3b      	adds	r3, r7, #4
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4c99      	ldr	r4, [pc, #612]	; (80082d0 <_ZN12MainViewBaseC1Ev+0xcac>)
 800806a:	441c      	add	r4, r3
 800806c:	23ff      	movs	r3, #255	; 0xff
 800806e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8008072:	23ff      	movs	r3, #255	; 0xff
 8008074:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8008078:	23ff      	movs	r3, #255	; 0xff
 800807a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800807e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008082:	041b      	lsls	r3, r3, #16
 8008084:	461a      	mov	r2, r3
 8008086:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800808a:	021b      	lsls	r3, r3, #8
 800808c:	431a      	orrs	r2, r3
 800808e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8008092:	4313      	orrs	r3, r2
 8008094:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008098:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800809c:	4611      	mov	r1, r2
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fc f94a 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 80080a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080a8:	461a      	mov	r2, r3
 80080aa:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80080ae:	f107 030c 	add.w	r3, r7, #12
 80080b2:	601a      	str	r2, [r3, #0]
        this->color = color;
 80080b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80080b8:	f107 020c 	add.w	r2, r7, #12
 80080bc:	6812      	ldr	r2, [r2, #0]
 80080be:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80080c0:	bf00      	nop
    oilTempArea.setLinespacing(0);
 80080c2:	1d3b      	adds	r3, r7, #4
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	4b82      	ldr	r3, [pc, #520]	; (80082d0 <_ZN12MainViewBaseC1Ev+0xcac>)
 80080c8:	4413      	add	r3, r2
 80080ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80080ce:	2300      	movs	r3, #0
 80080d0:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
        linespace = space;
 80080d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080d8:	f8b7 2126 	ldrh.w	r2, [r7, #294]	; 0x126
 80080dc:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80080de:	bf00      	nop
    Unicode::snprintf(oilTempAreaBuffer, OILTEMPAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID17).getText());
 80080e0:	1d3b      	adds	r3, r7, #4
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4c7b      	ldr	r4, [pc, #492]	; (80082d4 <_ZN12MainViewBaseC1Ev+0xcb0>)
 80080e6:	441c      	add	r4, r3
 80080e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80080ec:	210e      	movs	r1, #14
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fe ff4e 	bl	8006f90 <_ZN8touchgfx9TypedTextC1Et>
 80080f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80080f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80080fc:	4b76      	ldr	r3, [pc, #472]	; (80082d8 <_ZN12MainViewBaseC1Ev+0xcb4>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d105      	bne.n	8008110 <_ZN12MainViewBaseC1Ev+0xaec>
 8008104:	4b75      	ldr	r3, [pc, #468]	; (80082dc <_ZN12MainViewBaseC1Ev+0xcb8>)
 8008106:	4a76      	ldr	r2, [pc, #472]	; (80082e0 <_ZN12MainViewBaseC1Ev+0xcbc>)
 8008108:	21ae      	movs	r1, #174	; 0xae
 800810a:	4876      	ldr	r0, [pc, #472]	; (80082e4 <_ZN12MainViewBaseC1Ev+0xcc0>)
 800810c:	f01e fc70 	bl	80269f0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8008110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008114:	889a      	ldrh	r2, [r3, #4]
 8008116:	4b74      	ldr	r3, [pc, #464]	; (80082e8 <_ZN12MainViewBaseC1Ev+0xcc4>)
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	429a      	cmp	r2, r3
 800811c:	d305      	bcc.n	800812a <_ZN12MainViewBaseC1Ev+0xb06>
 800811e:	4b73      	ldr	r3, [pc, #460]	; (80082ec <_ZN12MainViewBaseC1Ev+0xcc8>)
 8008120:	4a6f      	ldr	r2, [pc, #444]	; (80082e0 <_ZN12MainViewBaseC1Ev+0xcbc>)
 8008122:	21af      	movs	r1, #175	; 0xaf
 8008124:	486f      	ldr	r0, [pc, #444]	; (80082e4 <_ZN12MainViewBaseC1Ev+0xcc0>)
 8008126:	f01e fc63 	bl	80269f0 <__assert_func>
    }
 800812a:	bf00      	nop
        return texts->getText(typedTextId);
 800812c:	4b64      	ldr	r3, [pc, #400]	; (80082c0 <_ZN12MainViewBaseC1Ev+0xc9c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8008134:	4611      	mov	r1, r2
 8008136:	4618      	mov	r0, r3
 8008138:	f000 ff9c 	bl	8009074 <_ZNK8touchgfx5Texts7getTextEt>
 800813c:	4603      	mov	r3, r0
 800813e:	bf00      	nop
 8008140:	4a60      	ldr	r2, [pc, #384]	; (80082c4 <_ZN12MainViewBaseC1Ev+0xca0>)
 8008142:	210a      	movs	r1, #10
 8008144:	4620      	mov	r0, r4
 8008146:	f014 fb47 	bl	801c7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800814a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe f926 	bl	80063a0 <_ZN8touchgfx9TypedTextD1Ev>
    oilTempArea.setWildcard(oilTempAreaBuffer);
 8008154:	1d3b      	adds	r3, r7, #4
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	4b5d      	ldr	r3, [pc, #372]	; (80082d0 <_ZN12MainViewBaseC1Ev+0xcac>)
 800815a:	4413      	add	r3, r2
 800815c:	1d3a      	adds	r2, r7, #4
 800815e:	6811      	ldr	r1, [r2, #0]
 8008160:	4a5c      	ldr	r2, [pc, #368]	; (80082d4 <_ZN12MainViewBaseC1Ev+0xcb0>)
 8008162:	440a      	add	r2, r1
 8008164:	4611      	mov	r1, r2
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe ff78 	bl	800705c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilTempArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 800816c:	1d3b      	adds	r3, r7, #4
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4c57      	ldr	r4, [pc, #348]	; (80082d0 <_ZN12MainViewBaseC1Ev+0xcac>)
 8008172:	441c      	add	r4, r3
 8008174:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008178:	210c      	movs	r1, #12
 800817a:	4618      	mov	r0, r3
 800817c:	f7fe ff08 	bl	8006f90 <_ZN8touchgfx9TypedTextC1Et>
 8008180:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008184:	4619      	mov	r1, r3
 8008186:	4620      	mov	r0, r4
 8008188:	f00f fc5f 	bl	8017a4a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800818c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008190:	4618      	mov	r0, r3
 8008192:	f7fe f905 	bl	80063a0 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8008196:	1d3b      	adds	r3, r7, #4
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	1d3b      	adds	r3, r7, #4
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3340      	adds	r3, #64	; 0x40
 80081a0:	4619      	mov	r1, r3
 80081a2:	4610      	mov	r0, r2
 80081a4:	f7fe f842 	bl	800622c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 80081a8:	1d3b      	adds	r3, r7, #4
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	1d3b      	adds	r3, r7, #4
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	336c      	adds	r3, #108	; 0x6c
 80081b2:	4619      	mov	r1, r3
 80081b4:	4610      	mov	r0, r2
 80081b6:	f7fe f839 	bl	800622c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gearArea);
 80081ba:	1d3b      	adds	r3, r7, #4
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	1d3b      	adds	r3, r7, #4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3398      	adds	r3, #152	; 0x98
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f7fe f830 	bl	800622c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1);
 80081cc:	1d3b      	adds	r3, r7, #4
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	1d3b      	adds	r3, r7, #4
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	33d8      	adds	r3, #216	; 0xd8
 80081d6:	4619      	mov	r1, r3
 80081d8:	4610      	mov	r0, r2
 80081da:	f7fe f827 	bl	800622c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpmArea);
 80081de:	1d3b      	adds	r3, r7, #4
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	1d3b      	adds	r3, r7, #4
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081ea:	4619      	mov	r1, r3
 80081ec:	4610      	mov	r0, r2
 80081ee:	f7fe f81d 	bl	800622c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(battArea);
 80081f2:	1d3b      	adds	r3, r7, #4
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	1d3b      	adds	r3, r7, #4
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80081fe:	4619      	mov	r1, r3
 8008200:	4610      	mov	r0, r2
 8008202:	f7fe f813 	bl	800622c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilPressArea);
 8008206:	1d3b      	adds	r3, r7, #4
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	1d3b      	adds	r3, r7, #4
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008212:	4619      	mov	r1, r3
 8008214:	4610      	mov	r0, r2
 8008216:	f7fe f809 	bl	800622c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1);
 800821a:	1d3b      	adds	r3, r7, #4
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	1d3b      	adds	r3, r7, #4
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8008226:	4619      	mov	r1, r3
 8008228:	4610      	mov	r0, r2
 800822a:	f7fd ffff 	bl	800622c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_1);
 800822e:	1d3b      	adds	r3, r7, #4
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	1d3b      	adds	r3, r7, #4
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 800823a:	4413      	add	r3, r2
 800823c:	4619      	mov	r1, r3
 800823e:	f7fd fff5 	bl	800622c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_2);
 8008242:	1d3b      	adds	r3, r7, #4
 8008244:	6818      	ldr	r0, [r3, #0]
 8008246:	1d3b      	adds	r3, r7, #4
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 800824e:	4413      	add	r3, r2
 8008250:	4619      	mov	r1, r3
 8008252:	f7fd ffeb 	bl	800622c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_3);
 8008256:	1d3b      	adds	r3, r7, #4
 8008258:	6818      	ldr	r0, [r3, #0]
 800825a:	1d3b      	adds	r3, r7, #4
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	4b24      	ldr	r3, [pc, #144]	; (80082f0 <_ZN12MainViewBaseC1Ev+0xccc>)
 8008260:	4413      	add	r3, r2
 8008262:	4619      	mov	r1, r3
 8008264:	f7fd ffe2 	bl	800622c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar1);
 8008268:	1d3b      	adds	r3, r7, #4
 800826a:	6818      	ldr	r0, [r3, #0]
 800826c:	1d3b      	adds	r3, r7, #4
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	4b20      	ldr	r3, [pc, #128]	; (80082f4 <_ZN12MainViewBaseC1Ev+0xcd0>)
 8008272:	4413      	add	r3, r2
 8008274:	4619      	mov	r1, r3
 8008276:	f7fd ffd9 	bl	800622c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar2);
 800827a:	1d3b      	adds	r3, r7, #4
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	1d3b      	adds	r3, r7, #4
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	4b1d      	ldr	r3, [pc, #116]	; (80082f8 <_ZN12MainViewBaseC1Ev+0xcd4>)
 8008284:	4413      	add	r3, r2
 8008286:	4619      	mov	r1, r3
 8008288:	f7fd ffd0 	bl	800622c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cltArea);
 800828c:	1d3b      	adds	r3, r7, #4
 800828e:	6818      	ldr	r0, [r3, #0]
 8008290:	1d3b      	adds	r3, r7, #4
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <_ZN12MainViewBaseC1Ev+0xca4>)
 8008296:	4413      	add	r3, r2
 8008298:	4619      	mov	r1, r3
 800829a:	f7fd ffc7 	bl	800622c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilTempArea);
 800829e:	1d3b      	adds	r3, r7, #4
 80082a0:	6818      	ldr	r0, [r3, #0]
 80082a2:	1d3b      	adds	r3, r7, #4
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	4b0a      	ldr	r3, [pc, #40]	; (80082d0 <_ZN12MainViewBaseC1Ev+0xcac>)
 80082a8:	4413      	add	r3, r2
 80082aa:	4619      	mov	r1, r3
 80082ac:	f7fd ffbe 	bl	800622c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80082b0:	1d3b      	adds	r3, r7, #4
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd90      	pop	{r4, r7, pc}
 80082be:	bf00      	nop
 80082c0:	200567f8 	.word	0x200567f8
 80082c4:	0802bb10 	.word	0x0802bb10
 80082c8:	0001f6f4 	.word	0x0001f6f4
 80082cc:	0001f7b4 	.word	0x0001f7b4
 80082d0:	0001f734 	.word	0x0001f734
 80082d4:	0001f7c8 	.word	0x0001f7c8
 80082d8:	200567ec 	.word	0x200567ec
 80082dc:	0802ba00 	.word	0x0802ba00
 80082e0:	0802ba44 	.word	0x0802ba44
 80082e4:	0802ba74 	.word	0x0802ba74
 80082e8:	200567f0 	.word	0x200567f0
 80082ec:	0802babc 	.word	0x0802babc
 80082f0:	00017858 	.word	0x00017858
 80082f4:	0001f514 	.word	0x0001f514
 80082f8:	0001f604 	.word	0x0001f604

080082fc <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
    tempBox1.initialize();
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800830a:	4618      	mov	r0, r3
 800830c:	f002 fc00 	bl	800ab10 <_ZN7tempBox10initializeEv>
    tempBox1_1.initialize();
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8008316:	4413      	add	r3, r2
 8008318:	4618      	mov	r0, r3
 800831a:	f002 fbf9 	bl	800ab10 <_ZN7tempBox10initializeEv>
    tempBox1_2.initialize();
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8008324:	4413      	add	r3, r2
 8008326:	4618      	mov	r0, r3
 8008328:	f002 fbf2 	bl	800ab10 <_ZN7tempBox10initializeEv>
    tempBox1_3.initialize();
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	4b0a      	ldr	r3, [pc, #40]	; (8008358 <_ZN12MainViewBase11setupScreenEv+0x5c>)
 8008330:	4413      	add	r3, r2
 8008332:	4618      	mov	r0, r3
 8008334:	f002 fbec 	bl	800ab10 <_ZN7tempBox10initializeEv>
    alertBar1.initialize();
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	4b08      	ldr	r3, [pc, #32]	; (800835c <_ZN12MainViewBase11setupScreenEv+0x60>)
 800833c:	4413      	add	r3, r2
 800833e:	4618      	mov	r0, r3
 8008340:	f002 f934 	bl	800a5ac <_ZN8alertBar10initializeEv>
    alertBar2.initialize();
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	4b06      	ldr	r3, [pc, #24]	; (8008360 <_ZN12MainViewBase11setupScreenEv+0x64>)
 8008348:	4413      	add	r3, r2
 800834a:	4618      	mov	r0, r3
 800834c:	f002 f92e 	bl	800a5ac <_ZN8alertBar10initializeEv>
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	00017858 	.word	0x00017858
 800835c:	0001f514 	.word	0x0001f514
 8008360:	0001f604 	.word	0x0001f604

08008364 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View()
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4618      	mov	r0, r3
 8008370:	f012 fd9a 	bl	801aea8 <_ZN8touchgfx6ScreenC1Ev>
 8008374:	4a05      	ldr	r2, [pc, #20]	; (800838c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4618      	mov	r0, r3
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	0802c524 	.word	0x0802c524

08008390 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8008390:	b590      	push	{r4, r7, lr}
 8008392:	b089      	sub	sp, #36	; 0x24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	f107 0314 	add.w	r3, r7, #20
 80083a8:	4611      	mov	r1, r2
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe feaa 	bl	8007104 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	461c      	mov	r4, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	61fb      	str	r3, [r7, #28]
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	f107 0310 	add.w	r3, r7, #16
 80083c0:	4611      	mov	r1, r2
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe fe9e 	bl	8007104 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80083c8:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80083ca:	461a      	mov	r2, r3
 80083cc:	4621      	mov	r1, r4
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f00f f8a0 	bl	8017514 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 80083d4:	bf00      	nop
 80083d6:	3724      	adds	r7, #36	; 0x24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd90      	pop	{r4, r7, pc}

080083dc <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 80083dc:	b590      	push	{r4, r7, lr}
 80083de:	b089      	sub	sp, #36	; 0x24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	61bb      	str	r3, [r7, #24]
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	f107 0314 	add.w	r3, r7, #20
 80083f4:	4611      	mov	r1, r2
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fe fe84 	bl	8007104 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	461c      	mov	r4, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	61fb      	str	r3, [r7, #28]
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	f107 0310 	add.w	r3, r7, #16
 800840c:	4611      	mov	r1, r2
 800840e:	4618      	mov	r0, r3
 8008410:	f7fe fe78 	bl	8007104 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8008414:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8008416:	461a      	mov	r2, r3
 8008418:	4621      	mov	r1, r4
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f00f f885 	bl	801752a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8008420:	bf00      	nop
 8008422:	3724      	adds	r7, #36	; 0x24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd90      	pop	{r4, r7, pc}

08008428 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	60fb      	str	r3, [r7, #12]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	f107 0308 	add.w	r3, r7, #8
 800843e:	4611      	mov	r1, r2
 8008440:	4618      	mov	r0, r3
 8008442:	f7fe fe5f 	bl	8007104 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8008446:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8008448:	4619      	mov	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7fe fe75 	bl	800713a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8008450:	bf00      	nop
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <_Z41__static_initialization_and_destruction_0ii>:
 8008458:	b580      	push	{r7, lr}
 800845a:	b092      	sub	sp, #72	; 0x48
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b01      	cmp	r3, #1
 8008466:	f040 8114 	bne.w	8008692 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008470:	4293      	cmp	r3, r2
 8008472:	f040 810e 	bne.w	8008692 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8008476:	2300      	movs	r3, #0
 8008478:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800847c:	2300      	movs	r3, #0
 800847e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008482:	2300      	movs	r3, #0
 8008484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008488:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800848c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008490:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008494:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800849c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80084a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80084a4:	041b      	lsls	r3, r3, #16
 80084a6:	461a      	mov	r2, r3
 80084a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80084ac:	021b      	lsls	r3, r3, #8
 80084ae:	431a      	orrs	r2, r3
 80084b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80084b4:	4313      	orrs	r3, r2
 80084b6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80084ba:	f107 0320 	add.w	r3, r7, #32
 80084be:	4611      	mov	r1, r2
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fb ff39 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 80084c6:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 80084c8:	bf00      	nop
 80084ca:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 80084cc:	4b73      	ldr	r3, [pc, #460]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	23ff      	movs	r3, #255	; 0xff
 80084d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80084d6:	2300      	movs	r3, #0
 80084d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80084dc:	2300      	movs	r3, #0
 80084de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80084e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80084ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80084ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80084f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80084fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80084fe:	041b      	lsls	r3, r3, #16
 8008500:	461a      	mov	r2, r3
 8008502:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	431a      	orrs	r2, r3
 800850a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800850e:	4313      	orrs	r3, r2
 8008510:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008514:	f107 031c 	add.w	r3, r7, #28
 8008518:	4611      	mov	r1, r2
 800851a:	4618      	mov	r0, r3
 800851c:	f7fb ff0c 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8008520:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8008522:	bf00      	nop
 8008524:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8008526:	4b5e      	ldr	r3, [pc, #376]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	2300      	movs	r3, #0
 800852c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8008530:	23ff      	movs	r3, #255	; 0xff
 8008532:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8008536:	2300      	movs	r3, #0
 8008538:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800853c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008540:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008544:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008548:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800854c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008550:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008554:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008558:	041b      	lsls	r3, r3, #16
 800855a:	461a      	mov	r2, r3
 800855c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008560:	021b      	lsls	r3, r3, #8
 8008562:	431a      	orrs	r2, r3
 8008564:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008568:	4313      	orrs	r3, r2
 800856a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800856e:	f107 0318 	add.w	r3, r7, #24
 8008572:	4611      	mov	r1, r2
 8008574:	4618      	mov	r0, r3
 8008576:	f7fb fedf 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800857a:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 800857c:	bf00      	nop
 800857e:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8008580:	4b48      	ldr	r3, [pc, #288]	; (80086a4 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	2300      	movs	r3, #0
 8008586:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800858a:	2300      	movs	r3, #0
 800858c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8008590:	23ff      	movs	r3, #255	; 0xff
 8008592:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8008596:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800859a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800859e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80085a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80085a6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80085aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80085ae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80085b2:	041b      	lsls	r3, r3, #16
 80085b4:	461a      	mov	r2, r3
 80085b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085ba:	021b      	lsls	r3, r3, #8
 80085bc:	431a      	orrs	r2, r3
 80085be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80085c2:	4313      	orrs	r3, r2
 80085c4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80085c8:	f107 0314 	add.w	r3, r7, #20
 80085cc:	4611      	mov	r1, r2
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fb feb2 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 80085d4:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 80085d6:	bf00      	nop
 80085d8:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 80085da:	4b33      	ldr	r3, [pc, #204]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	23f7      	movs	r3, #247	; 0xf7
 80085e0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80085e4:	234c      	movs	r3, #76	; 0x4c
 80085e6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80085ea:	2302      	movs	r3, #2
 80085ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80085f0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80085f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80085f8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80085fc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8008600:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008604:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008608:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800860c:	041b      	lsls	r3, r3, #16
 800860e:	461a      	mov	r2, r3
 8008610:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008614:	021b      	lsls	r3, r3, #8
 8008616:	431a      	orrs	r2, r3
 8008618:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800861c:	4313      	orrs	r3, r2
 800861e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008622:	f107 0310 	add.w	r3, r7, #16
 8008626:	4611      	mov	r1, r2
 8008628:	4618      	mov	r0, r3
 800862a:	f7fb fe85 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800862e:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8008630:	bf00      	nop
 8008632:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8008634:	4b1d      	ldr	r3, [pc, #116]	; (80086ac <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	23f7      	movs	r3, #247	; 0xf7
 800863a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800863e:	23d2      	movs	r3, #210	; 0xd2
 8008640:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008644:	2302      	movs	r3, #2
 8008646:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800864a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800864e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8008652:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800865a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800865e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008662:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008666:	041b      	lsls	r3, r3, #16
 8008668:	461a      	mov	r2, r3
 800866a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800866e:	021b      	lsls	r3, r3, #8
 8008670:	431a      	orrs	r2, r3
 8008672:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8008676:	4313      	orrs	r3, r2
 8008678:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800867c:	f107 030c 	add.w	r3, r7, #12
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f7fb fe58 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8008688:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800868a:	bf00      	nop
 800868c:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800868e:	4b08      	ldr	r3, [pc, #32]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	bf00      	nop
 8008694:	3748      	adds	r7, #72	; 0x48
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	2002384c 	.word	0x2002384c
 80086a0:	20023850 	.word	0x20023850
 80086a4:	20023854 	.word	0x20023854
 80086a8:	20023858 	.word	0x20023858
 80086ac:	2002385c 	.word	0x2002385c
 80086b0:	20023860 	.word	0x20023860

080086b4 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 * Class for drawing complex polygons on the display using CanvasWidgetRenderer. The
 * CanvasWidget is used by passing it to a Canvas object, drawing the outline of the
 * object and then having CanvasWidget render the outline on the display using the
 * assigned painter.
 */
class CanvasWidget : public Widget
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	4a05      	ldr	r2, [pc, #20]	; (80086d4 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fd fdf5 	bl	80062b4 <_ZN8touchgfx6WidgetD1Ev>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4618      	mov	r0, r3
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	0802d598 	.word	0x0802d598

080086d8 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff ffe7 	bl	80086b4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80086e6:	2130      	movs	r1, #48	; 0x30
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f01e f84c 	bl	8026786 <_ZdlPvj>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4618      	mov	r0, r3
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	4a05      	ldr	r2, [pc, #20]	; (8008718 <_ZN8touchgfx4LineD1Ev+0x20>)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4618      	mov	r0, r3
 800870a:	f7ff ffd3 	bl	80086b4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4618      	mov	r0, r3
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	0802d7bc 	.word	0x0802d7bc

0800871c <_ZN8touchgfx4LineD0Ev>:
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff ffe7 	bl	80086f8 <_ZN8touchgfx4LineD1Ev>
 800872a:	2174      	movs	r1, #116	; 0x74
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f01e f82a 	bl	8026786 <_ZdlPvj>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4618      	mov	r0, r3
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	4a05      	ldr	r2, [pc, #20]	; (800875c <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	601a      	str	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4618      	mov	r0, r3
 800874e:	f7fe fd7b 	bl	8007248 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4618      	mov	r0, r3
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	0802d514 	.word	0x0802d514

08008760 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff ffe7 	bl	800873c <_ZN8touchgfx13PainterRGB888D1Ev>
 800876e:	2118      	movs	r1, #24
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f01e f808 	bl	8026786 <_ZdlPvj>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4618      	mov	r0, r3
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	4a05      	ldr	r2, [pc, #20]	; (80087a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4618      	mov	r0, r3
 8008792:	f7fd fe69 	bl	8006468 <_ZN8touchgfx8TextAreaD1Ev>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4618      	mov	r0, r3
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	0802da6c 	.word	0x0802da6c

080087a4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7ff ffe7 	bl	8008780 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80087b2:	2140      	movs	r1, #64	; 0x40
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f01d ffe6 	bl	8026786 <_ZdlPvj>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <_GLOBAL__sub_I__ZN12MainViewBaseC2Ev>:
 80087c4:	b580      	push	{r7, lr}
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80087cc:	2001      	movs	r0, #1
 80087ce:	f7ff fe43 	bl	8008458 <_Z41__static_initialization_and_destruction_0ii>
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <__tcf_0>:

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 80087ec:	b580      	push	{r7, lr}
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	4801      	ldr	r0, [pc, #4]	; (80087f8 <__tcf_0+0xc>)
 80087f2:	f7fd fafb 	bl	8005dec <_ZN8touchgfx13GeneratedFontD1Ev>
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	20023864 	.word	0x20023864

080087fc <_Z37getFont_JetBrainsMono_Regular_40_4bppv>:
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08c      	sub	sp, #48	; 0x30
 8008800:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 8008802:	4b1f      	ldr	r3, [pc, #124]	; (8008880 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	f3bf 8f5b 	dmb	ish
 800880a:	b2db      	uxtb	r3, r3
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	2b00      	cmp	r3, #0
 8008812:	bf0c      	ite	eq
 8008814:	2301      	moveq	r3, #1
 8008816:	2300      	movne	r3, #0
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d02c      	beq.n	8008878 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 800881e:	4818      	ldr	r0, [pc, #96]	; (8008880 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 8008820:	f01d ffb3 	bl	802678a <__cxa_guard_acquire>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	bf14      	ite	ne
 800882a:	2301      	movne	r3, #1
 800882c:	2300      	moveq	r3, #0
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b00      	cmp	r3, #0
 8008832:	d021      	beq.n	8008878 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 8008834:	2300      	movs	r3, #0
 8008836:	930a      	str	r3, [sp, #40]	; 0x28
 8008838:	2300      	movs	r3, #0
 800883a:	9309      	str	r3, [sp, #36]	; 0x24
 800883c:	2300      	movs	r3, #0
 800883e:	9308      	str	r3, [sp, #32]
 8008840:	233f      	movs	r3, #63	; 0x3f
 8008842:	9307      	str	r3, [sp, #28]
 8008844:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x88>)
 8008846:	9306      	str	r3, [sp, #24]
 8008848:	4b0f      	ldr	r3, [pc, #60]	; (8008888 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x8c>)
 800884a:	9305      	str	r3, [sp, #20]
 800884c:	2300      	movs	r3, #0
 800884e:	9304      	str	r3, [sp, #16]
 8008850:	2300      	movs	r3, #0
 8008852:	9303      	str	r3, [sp, #12]
 8008854:	2301      	movs	r3, #1
 8008856:	9302      	str	r3, [sp, #8]
 8008858:	2304      	movs	r3, #4
 800885a:	9301      	str	r3, [sp, #4]
 800885c:	2307      	movs	r3, #7
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	2328      	movs	r3, #40	; 0x28
 8008862:	2242      	movs	r2, #66	; 0x42
 8008864:	4909      	ldr	r1, [pc, #36]	; (800888c <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x90>)
 8008866:	480a      	ldr	r0, [pc, #40]	; (8008890 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
 8008868:	f7fe faf8 	bl	8006e5c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800886c:	4804      	ldr	r0, [pc, #16]	; (8008880 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 800886e:	f01d ff98 	bl	80267a2 <__cxa_guard_release>
 8008872:	4808      	ldr	r0, [pc, #32]	; (8008894 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x98>)
 8008874:	f01e f8da 	bl	8026a2c <atexit>
    return JetBrainsMono_Regular_40_4bpp;
 8008878:	4b05      	ldr	r3, [pc, #20]	; (8008890 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
}
 800887a:	4618      	mov	r0, r3
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	2002388c 	.word	0x2002388c
 8008884:	080d958c 	.word	0x080d958c
 8008888:	0802c564 	.word	0x0802c564
 800888c:	080d8380 	.word	0x080d8380
 8008890:	20023864 	.word	0x20023864
 8008894:	080087ed 	.word	0x080087ed

08008898 <__tcf_0>:

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
 800889c:	4801      	ldr	r0, [pc, #4]	; (80088a4 <__tcf_0+0xc>)
 800889e:	f7fd faa5 	bl	8005dec <_ZN8touchgfx13GeneratedFontD1Ev>
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	20023890 	.word	0x20023890

080088a8 <_Z37getFont_JetBrainsMono_Regular_60_4bppv>:
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08c      	sub	sp, #48	; 0x30
 80088ac:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 80088ae:	4b1f      	ldr	r3, [pc, #124]	; (800892c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	f3bf 8f5b 	dmb	ish
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	f003 0301 	and.w	r3, r3, #1
 80088bc:	2b00      	cmp	r3, #0
 80088be:	bf0c      	ite	eq
 80088c0:	2301      	moveq	r3, #1
 80088c2:	2300      	movne	r3, #0
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d02c      	beq.n	8008924 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 80088ca:	4818      	ldr	r0, [pc, #96]	; (800892c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 80088cc:	f01d ff5d 	bl	802678a <__cxa_guard_acquire>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	bf14      	ite	ne
 80088d6:	2301      	movne	r3, #1
 80088d8:	2300      	moveq	r3, #0
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d021      	beq.n	8008924 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 80088e0:	2300      	movs	r3, #0
 80088e2:	930a      	str	r3, [sp, #40]	; 0x28
 80088e4:	2300      	movs	r3, #0
 80088e6:	9309      	str	r3, [sp, #36]	; 0x24
 80088e8:	2300      	movs	r3, #0
 80088ea:	9308      	str	r3, [sp, #32]
 80088ec:	233f      	movs	r3, #63	; 0x3f
 80088ee:	9307      	str	r3, [sp, #28]
 80088f0:	4b0f      	ldr	r3, [pc, #60]	; (8008930 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x88>)
 80088f2:	9306      	str	r3, [sp, #24]
 80088f4:	4b0f      	ldr	r3, [pc, #60]	; (8008934 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x8c>)
 80088f6:	9305      	str	r3, [sp, #20]
 80088f8:	2300      	movs	r3, #0
 80088fa:	9304      	str	r3, [sp, #16]
 80088fc:	2300      	movs	r3, #0
 80088fe:	9303      	str	r3, [sp, #12]
 8008900:	2301      	movs	r3, #1
 8008902:	9302      	str	r3, [sp, #8]
 8008904:	2304      	movs	r3, #4
 8008906:	9301      	str	r3, [sp, #4]
 8008908:	230b      	movs	r3, #11
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	233c      	movs	r3, #60	; 0x3c
 800890e:	223f      	movs	r2, #63	; 0x3f
 8008910:	4909      	ldr	r1, [pc, #36]	; (8008938 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x90>)
 8008912:	480a      	ldr	r0, [pc, #40]	; (800893c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
 8008914:	f7fe faa2 	bl	8006e5c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008918:	4804      	ldr	r0, [pc, #16]	; (800892c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 800891a:	f01d ff42 	bl	80267a2 <__cxa_guard_release>
 800891e:	4808      	ldr	r0, [pc, #32]	; (8008940 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x98>)
 8008920:	f01e f884 	bl	8026a2c <atexit>
    return JetBrainsMono_Regular_60_4bpp;
 8008924:	4b05      	ldr	r3, [pc, #20]	; (800893c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
}
 8008926:	4618      	mov	r0, r3
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	200238b8 	.word	0x200238b8
 8008930:	080d9590 	.word	0x080d9590
 8008934:	0802c568 	.word	0x0802c568
 8008938:	080d871c 	.word	0x080d871c
 800893c:	20023890 	.word	0x20023890
 8008940:	08008899 	.word	0x08008899

08008944 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp()
{
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 8008944:	b580      	push	{r7, lr}
 8008946:	af00      	add	r7, sp, #0
 8008948:	4801      	ldr	r0, [pc, #4]	; (8008950 <__tcf_0+0xc>)
 800894a:	f7fd fa4f 	bl	8005dec <_ZN8touchgfx13GeneratedFontD1Ev>
 800894e:	bd80      	pop	{r7, pc}
 8008950:	200238bc 	.word	0x200238bc

08008954 <_Z24getFont_swisop3_300_4bppv>:
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b08c      	sub	sp, #48	; 0x30
 8008958:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 800895a:	4b20      	ldr	r3, [pc, #128]	; (80089dc <_Z24getFont_swisop3_300_4bppv+0x88>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	f3bf 8f5b 	dmb	ish
 8008962:	b2db      	uxtb	r3, r3
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	2b00      	cmp	r3, #0
 800896a:	bf0c      	ite	eq
 800896c:	2301      	moveq	r3, #1
 800896e:	2300      	movne	r3, #0
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d02d      	beq.n	80089d2 <_Z24getFont_swisop3_300_4bppv+0x7e>
 8008976:	4819      	ldr	r0, [pc, #100]	; (80089dc <_Z24getFont_swisop3_300_4bppv+0x88>)
 8008978:	f01d ff07 	bl	802678a <__cxa_guard_acquire>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	bf14      	ite	ne
 8008982:	2301      	movne	r3, #1
 8008984:	2300      	moveq	r3, #0
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	d022      	beq.n	80089d2 <_Z24getFont_swisop3_300_4bppv+0x7e>
 800898c:	2300      	movs	r3, #0
 800898e:	930a      	str	r3, [sp, #40]	; 0x28
 8008990:	2300      	movs	r3, #0
 8008992:	9309      	str	r3, [sp, #36]	; 0x24
 8008994:	2300      	movs	r3, #0
 8008996:	9308      	str	r3, [sp, #32]
 8008998:	233f      	movs	r3, #63	; 0x3f
 800899a:	9307      	str	r3, [sp, #28]
 800899c:	4b10      	ldr	r3, [pc, #64]	; (80089e0 <_Z24getFont_swisop3_300_4bppv+0x8c>)
 800899e:	9306      	str	r3, [sp, #24]
 80089a0:	4b10      	ldr	r3, [pc, #64]	; (80089e4 <_Z24getFont_swisop3_300_4bppv+0x90>)
 80089a2:	9305      	str	r3, [sp, #20]
 80089a4:	2300      	movs	r3, #0
 80089a6:	9304      	str	r3, [sp, #16]
 80089a8:	2300      	movs	r3, #0
 80089aa:	9303      	str	r3, [sp, #12]
 80089ac:	2301      	movs	r3, #1
 80089ae:	9302      	str	r3, [sp, #8]
 80089b0:	2304      	movs	r3, #4
 80089b2:	9301      	str	r3, [sp, #4]
 80089b4:	233b      	movs	r3, #59	; 0x3b
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80089bc:	223f      	movs	r2, #63	; 0x3f
 80089be:	490a      	ldr	r1, [pc, #40]	; (80089e8 <_Z24getFont_swisop3_300_4bppv+0x94>)
 80089c0:	480a      	ldr	r0, [pc, #40]	; (80089ec <_Z24getFont_swisop3_300_4bppv+0x98>)
 80089c2:	f7fe fa4b 	bl	8006e5c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80089c6:	4805      	ldr	r0, [pc, #20]	; (80089dc <_Z24getFont_swisop3_300_4bppv+0x88>)
 80089c8:	f01d feeb 	bl	80267a2 <__cxa_guard_release>
 80089cc:	4808      	ldr	r0, [pc, #32]	; (80089f0 <_Z24getFont_swisop3_300_4bppv+0x9c>)
 80089ce:	f01e f82d 	bl	8026a2c <atexit>
    return swisop3_300_4bpp;
 80089d2:	4b06      	ldr	r3, [pc, #24]	; (80089ec <_Z24getFont_swisop3_300_4bppv+0x98>)
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	200238e4 	.word	0x200238e4
 80089e0:	080d9594 	.word	0x080d9594
 80089e4:	0802c56c 	.word	0x0802c56c
 80089e8:	080d8a90 	.word	0x080d8a90
 80089ec:	200238bc 	.word	0x200238bc
 80089f0:	08008945 	.word	0x08008945

080089f4 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp()
{
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 80089f4:	b580      	push	{r7, lr}
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	4801      	ldr	r0, [pc, #4]	; (8008a00 <__tcf_0+0xc>)
 80089fa:	f7fd f9f7 	bl	8005dec <_ZN8touchgfx13GeneratedFontD1Ev>
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	200238e8 	.word	0x200238e8

08008a04 <_Z23getFont_swisop3_50_4bppv>:
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08c      	sub	sp, #48	; 0x30
 8008a08:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 8008a0a:	4b1f      	ldr	r3, [pc, #124]	; (8008a88 <_Z23getFont_swisop3_50_4bppv+0x84>)
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	f3bf 8f5b 	dmb	ish
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	f003 0301 	and.w	r3, r3, #1
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	bf0c      	ite	eq
 8008a1c:	2301      	moveq	r3, #1
 8008a1e:	2300      	movne	r3, #0
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d02c      	beq.n	8008a80 <_Z23getFont_swisop3_50_4bppv+0x7c>
 8008a26:	4818      	ldr	r0, [pc, #96]	; (8008a88 <_Z23getFont_swisop3_50_4bppv+0x84>)
 8008a28:	f01d feaf 	bl	802678a <__cxa_guard_acquire>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	bf14      	ite	ne
 8008a32:	2301      	movne	r3, #1
 8008a34:	2300      	moveq	r3, #0
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d021      	beq.n	8008a80 <_Z23getFont_swisop3_50_4bppv+0x7c>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a40:	2300      	movs	r3, #0
 8008a42:	9309      	str	r3, [sp, #36]	; 0x24
 8008a44:	2300      	movs	r3, #0
 8008a46:	9308      	str	r3, [sp, #32]
 8008a48:	233f      	movs	r3, #63	; 0x3f
 8008a4a:	9307      	str	r3, [sp, #28]
 8008a4c:	4b0f      	ldr	r3, [pc, #60]	; (8008a8c <_Z23getFont_swisop3_50_4bppv+0x88>)
 8008a4e:	9306      	str	r3, [sp, #24]
 8008a50:	4b0f      	ldr	r3, [pc, #60]	; (8008a90 <_Z23getFont_swisop3_50_4bppv+0x8c>)
 8008a52:	9305      	str	r3, [sp, #20]
 8008a54:	2300      	movs	r3, #0
 8008a56:	9304      	str	r3, [sp, #16]
 8008a58:	2300      	movs	r3, #0
 8008a5a:	9303      	str	r3, [sp, #12]
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	9302      	str	r3, [sp, #8]
 8008a60:	2304      	movs	r3, #4
 8008a62:	9301      	str	r3, [sp, #4]
 8008a64:	230a      	movs	r3, #10
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	2332      	movs	r3, #50	; 0x32
 8008a6a:	2241      	movs	r2, #65	; 0x41
 8008a6c:	4909      	ldr	r1, [pc, #36]	; (8008a94 <_Z23getFont_swisop3_50_4bppv+0x90>)
 8008a6e:	480a      	ldr	r0, [pc, #40]	; (8008a98 <_Z23getFont_swisop3_50_4bppv+0x94>)
 8008a70:	f7fe f9f4 	bl	8006e5c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008a74:	4804      	ldr	r0, [pc, #16]	; (8008a88 <_Z23getFont_swisop3_50_4bppv+0x84>)
 8008a76:	f01d fe94 	bl	80267a2 <__cxa_guard_release>
 8008a7a:	4808      	ldr	r0, [pc, #32]	; (8008a9c <_Z23getFont_swisop3_50_4bppv+0x98>)
 8008a7c:	f01d ffd6 	bl	8026a2c <atexit>
    return swisop3_50_4bpp;
 8008a80:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <_Z23getFont_swisop3_50_4bppv+0x94>)
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	20023910 	.word	0x20023910
 8008a8c:	080d9598 	.word	0x080d9598
 8008a90:	0802c570 	.word	0x0802c570
 8008a94:	080d8e04 	.word	0x080d8e04
 8008a98:	200238e8 	.word	0x200238e8
 8008a9c:	080089f5 	.word	0x080089f5

08008aa0 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	4801      	ldr	r0, [pc, #4]	; (8008aac <__tcf_0+0xc>)
 8008aa6:	f7fd f9a1 	bl	8005dec <_ZN8touchgfx13GeneratedFontD1Ev>
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	20023914 	.word	0x20023914

08008ab0 <_Z23getFont_verdana_10_4bppv>:
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08c      	sub	sp, #48	; 0x30
 8008ab4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008ab6:	4b1f      	ldr	r3, [pc, #124]	; (8008b34 <_Z23getFont_verdana_10_4bppv+0x84>)
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	f3bf 8f5b 	dmb	ish
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bf0c      	ite	eq
 8008ac8:	2301      	moveq	r3, #1
 8008aca:	2300      	movne	r3, #0
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d02c      	beq.n	8008b2c <_Z23getFont_verdana_10_4bppv+0x7c>
 8008ad2:	4818      	ldr	r0, [pc, #96]	; (8008b34 <_Z23getFont_verdana_10_4bppv+0x84>)
 8008ad4:	f01d fe59 	bl	802678a <__cxa_guard_acquire>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	bf14      	ite	ne
 8008ade:	2301      	movne	r3, #1
 8008ae0:	2300      	moveq	r3, #0
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d021      	beq.n	8008b2c <_Z23getFont_verdana_10_4bppv+0x7c>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	930a      	str	r3, [sp, #40]	; 0x28
 8008aec:	2300      	movs	r3, #0
 8008aee:	9309      	str	r3, [sp, #36]	; 0x24
 8008af0:	2300      	movs	r3, #0
 8008af2:	9308      	str	r3, [sp, #32]
 8008af4:	233f      	movs	r3, #63	; 0x3f
 8008af6:	9307      	str	r3, [sp, #28]
 8008af8:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <_Z23getFont_verdana_10_4bppv+0x88>)
 8008afa:	9306      	str	r3, [sp, #24]
 8008afc:	4b0f      	ldr	r3, [pc, #60]	; (8008b3c <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008afe:	9305      	str	r3, [sp, #20]
 8008b00:	2300      	movs	r3, #0
 8008b02:	9304      	str	r3, [sp, #16]
 8008b04:	2300      	movs	r3, #0
 8008b06:	9303      	str	r3, [sp, #12]
 8008b08:	2301      	movs	r3, #1
 8008b0a:	9302      	str	r3, [sp, #8]
 8008b0c:	2304      	movs	r3, #4
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	2300      	movs	r3, #0
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	230a      	movs	r3, #10
 8008b16:	2201      	movs	r2, #1
 8008b18:	4909      	ldr	r1, [pc, #36]	; (8008b40 <_Z23getFont_verdana_10_4bppv+0x90>)
 8008b1a:	480a      	ldr	r0, [pc, #40]	; (8008b44 <_Z23getFont_verdana_10_4bppv+0x94>)
 8008b1c:	f7fe f99e 	bl	8006e5c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008b20:	4804      	ldr	r0, [pc, #16]	; (8008b34 <_Z23getFont_verdana_10_4bppv+0x84>)
 8008b22:	f01d fe3e 	bl	80267a2 <__cxa_guard_release>
 8008b26:	4808      	ldr	r0, [pc, #32]	; (8008b48 <_Z23getFont_verdana_10_4bppv+0x98>)
 8008b28:	f01d ff80 	bl	8026a2c <atexit>
    return verdana_10_4bpp;
 8008b2c:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	2002393c 	.word	0x2002393c
 8008b38:	080d959c 	.word	0x080d959c
 8008b3c:	0802c574 	.word	0x0802c574
 8008b40:	080d9194 	.word	0x080d9194
 8008b44:	20023914 	.word	0x20023914
 8008b48:	08008aa1 	.word	0x08008aa1

08008b4c <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_12_4bpp();

touchgfx::GeneratedFont& getFont_verdana_12_4bpp()
{
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 7, 12, 0, 4, 1, 0, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	4801      	ldr	r0, [pc, #4]	; (8008b58 <__tcf_0+0xc>)
 8008b52:	f7fd f94b 	bl	8005dec <_ZN8touchgfx13GeneratedFontD1Ev>
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	20023940 	.word	0x20023940

08008b5c <_Z23getFont_verdana_12_4bppv>:
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08c      	sub	sp, #48	; 0x30
 8008b60:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 7, 12, 0, 4, 1, 0, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 8008b62:	4b1f      	ldr	r3, [pc, #124]	; (8008be0 <_Z23getFont_verdana_12_4bppv+0x84>)
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	f3bf 8f5b 	dmb	ish
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f003 0301 	and.w	r3, r3, #1
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	bf0c      	ite	eq
 8008b74:	2301      	moveq	r3, #1
 8008b76:	2300      	movne	r3, #0
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d02c      	beq.n	8008bd8 <_Z23getFont_verdana_12_4bppv+0x7c>
 8008b7e:	4818      	ldr	r0, [pc, #96]	; (8008be0 <_Z23getFont_verdana_12_4bppv+0x84>)
 8008b80:	f01d fe03 	bl	802678a <__cxa_guard_acquire>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	bf14      	ite	ne
 8008b8a:	2301      	movne	r3, #1
 8008b8c:	2300      	moveq	r3, #0
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d021      	beq.n	8008bd8 <_Z23getFont_verdana_12_4bppv+0x7c>
 8008b94:	2300      	movs	r3, #0
 8008b96:	930a      	str	r3, [sp, #40]	; 0x28
 8008b98:	2300      	movs	r3, #0
 8008b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	9308      	str	r3, [sp, #32]
 8008ba0:	233f      	movs	r3, #63	; 0x3f
 8008ba2:	9307      	str	r3, [sp, #28]
 8008ba4:	4b0f      	ldr	r3, [pc, #60]	; (8008be4 <_Z23getFont_verdana_12_4bppv+0x88>)
 8008ba6:	9306      	str	r3, [sp, #24]
 8008ba8:	4b0f      	ldr	r3, [pc, #60]	; (8008be8 <_Z23getFont_verdana_12_4bppv+0x8c>)
 8008baa:	9305      	str	r3, [sp, #20]
 8008bac:	2301      	movs	r3, #1
 8008bae:	9304      	str	r3, [sp, #16]
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	9303      	str	r3, [sp, #12]
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	9302      	str	r3, [sp, #8]
 8008bb8:	2304      	movs	r3, #4
 8008bba:	9301      	str	r3, [sp, #4]
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	230c      	movs	r3, #12
 8008bc2:	2207      	movs	r2, #7
 8008bc4:	4909      	ldr	r1, [pc, #36]	; (8008bec <_Z23getFont_verdana_12_4bppv+0x90>)
 8008bc6:	480a      	ldr	r0, [pc, #40]	; (8008bf0 <_Z23getFont_verdana_12_4bppv+0x94>)
 8008bc8:	f7fe f948 	bl	8006e5c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008bcc:	4804      	ldr	r0, [pc, #16]	; (8008be0 <_Z23getFont_verdana_12_4bppv+0x84>)
 8008bce:	f01d fde8 	bl	80267a2 <__cxa_guard_release>
 8008bd2:	4808      	ldr	r0, [pc, #32]	; (8008bf4 <_Z23getFont_verdana_12_4bppv+0x98>)
 8008bd4:	f01d ff2a 	bl	8026a2c <atexit>
    return verdana_12_4bpp;
 8008bd8:	4b05      	ldr	r3, [pc, #20]	; (8008bf0 <_Z23getFont_verdana_12_4bppv+0x94>)
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	20023968 	.word	0x20023968
 8008be4:	080d95a0 	.word	0x080d95a0
 8008be8:	0802c578 	.word	0x0802c578
 8008bec:	080d91a4 	.word	0x080d91a4
 8008bf0:	20023940 	.word	0x20023940
 8008bf4:	08008b4d 	.word	0x08008b4d

08008bf8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	4801      	ldr	r0, [pc, #4]	; (8008c04 <__tcf_0+0xc>)
 8008bfe:	f7fd f8f5 	bl	8005dec <_ZN8touchgfx13GeneratedFontD1Ev>
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	2002396c 	.word	0x2002396c

08008c08 <_Z23getFont_verdana_20_4bppv>:
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b08c      	sub	sp, #48	; 0x30
 8008c0c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008c0e:	4b1f      	ldr	r3, [pc, #124]	; (8008c8c <_Z23getFont_verdana_20_4bppv+0x84>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	f3bf 8f5b 	dmb	ish
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	bf0c      	ite	eq
 8008c20:	2301      	moveq	r3, #1
 8008c22:	2300      	movne	r3, #0
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d02c      	beq.n	8008c84 <_Z23getFont_verdana_20_4bppv+0x7c>
 8008c2a:	4818      	ldr	r0, [pc, #96]	; (8008c8c <_Z23getFont_verdana_20_4bppv+0x84>)
 8008c2c:	f01d fdad 	bl	802678a <__cxa_guard_acquire>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	bf14      	ite	ne
 8008c36:	2301      	movne	r3, #1
 8008c38:	2300      	moveq	r3, #0
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d021      	beq.n	8008c84 <_Z23getFont_verdana_20_4bppv+0x7c>
 8008c40:	2300      	movs	r3, #0
 8008c42:	930a      	str	r3, [sp, #40]	; 0x28
 8008c44:	2300      	movs	r3, #0
 8008c46:	9309      	str	r3, [sp, #36]	; 0x24
 8008c48:	2300      	movs	r3, #0
 8008c4a:	9308      	str	r3, [sp, #32]
 8008c4c:	233f      	movs	r3, #63	; 0x3f
 8008c4e:	9307      	str	r3, [sp, #28]
 8008c50:	4b0f      	ldr	r3, [pc, #60]	; (8008c90 <_Z23getFont_verdana_20_4bppv+0x88>)
 8008c52:	9306      	str	r3, [sp, #24]
 8008c54:	4b0f      	ldr	r3, [pc, #60]	; (8008c94 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8008c56:	9305      	str	r3, [sp, #20]
 8008c58:	2301      	movs	r3, #1
 8008c5a:	9304      	str	r3, [sp, #16]
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	9303      	str	r3, [sp, #12]
 8008c60:	2301      	movs	r3, #1
 8008c62:	9302      	str	r3, [sp, #8]
 8008c64:	2304      	movs	r3, #4
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	2304      	movs	r3, #4
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	2314      	movs	r3, #20
 8008c6e:	223f      	movs	r2, #63	; 0x3f
 8008c70:	4909      	ldr	r1, [pc, #36]	; (8008c98 <_Z23getFont_verdana_20_4bppv+0x90>)
 8008c72:	480a      	ldr	r0, [pc, #40]	; (8008c9c <_Z23getFont_verdana_20_4bppv+0x94>)
 8008c74:	f7fe f8f2 	bl	8006e5c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008c78:	4804      	ldr	r0, [pc, #16]	; (8008c8c <_Z23getFont_verdana_20_4bppv+0x84>)
 8008c7a:	f01d fd92 	bl	80267a2 <__cxa_guard_release>
 8008c7e:	4808      	ldr	r0, [pc, #32]	; (8008ca0 <_Z23getFont_verdana_20_4bppv+0x98>)
 8008c80:	f01d fed4 	bl	8026a2c <atexit>
    return verdana_20_4bpp;
 8008c84:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	20023994 	.word	0x20023994
 8008c90:	080d95a4 	.word	0x080d95a4
 8008c94:	0802c57c 	.word	0x0802c57c
 8008c98:	080d9208 	.word	0x080d9208
 8008c9c:	2002396c 	.word	0x2002396c
 8008ca0:	08008bf9 	.word	0x08008bf9

08008ca4 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	4801      	ldr	r0, [pc, #4]	; (8008cb0 <__tcf_0+0xc>)
 8008caa:	f7fd f89f 	bl	8005dec <_ZN8touchgfx13GeneratedFontD1Ev>
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	20023998 	.word	0x20023998

08008cb4 <_Z23getFont_verdana_40_4bppv>:
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b08c      	sub	sp, #48	; 0x30
 8008cb8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008cba:	4b1f      	ldr	r3, [pc, #124]	; (8008d38 <_Z23getFont_verdana_40_4bppv+0x84>)
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	f3bf 8f5b 	dmb	ish
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	bf0c      	ite	eq
 8008ccc:	2301      	moveq	r3, #1
 8008cce:	2300      	movne	r3, #0
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d02c      	beq.n	8008d30 <_Z23getFont_verdana_40_4bppv+0x7c>
 8008cd6:	4818      	ldr	r0, [pc, #96]	; (8008d38 <_Z23getFont_verdana_40_4bppv+0x84>)
 8008cd8:	f01d fd57 	bl	802678a <__cxa_guard_acquire>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	bf14      	ite	ne
 8008ce2:	2301      	movne	r3, #1
 8008ce4:	2300      	moveq	r3, #0
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d021      	beq.n	8008d30 <_Z23getFont_verdana_40_4bppv+0x7c>
 8008cec:	2300      	movs	r3, #0
 8008cee:	930a      	str	r3, [sp, #40]	; 0x28
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	9308      	str	r3, [sp, #32]
 8008cf8:	233f      	movs	r3, #63	; 0x3f
 8008cfa:	9307      	str	r3, [sp, #28]
 8008cfc:	4b0f      	ldr	r3, [pc, #60]	; (8008d3c <_Z23getFont_verdana_40_4bppv+0x88>)
 8008cfe:	9306      	str	r3, [sp, #24]
 8008d00:	4b0f      	ldr	r3, [pc, #60]	; (8008d40 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8008d02:	9305      	str	r3, [sp, #20]
 8008d04:	2300      	movs	r3, #0
 8008d06:	9304      	str	r3, [sp, #16]
 8008d08:	2300      	movs	r3, #0
 8008d0a:	9303      	str	r3, [sp, #12]
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	9302      	str	r3, [sp, #8]
 8008d10:	2304      	movs	r3, #4
 8008d12:	9301      	str	r3, [sp, #4]
 8008d14:	2300      	movs	r3, #0
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	2328      	movs	r3, #40	; 0x28
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	4909      	ldr	r1, [pc, #36]	; (8008d44 <_Z23getFont_verdana_40_4bppv+0x90>)
 8008d1e:	480a      	ldr	r0, [pc, #40]	; (8008d48 <_Z23getFont_verdana_40_4bppv+0x94>)
 8008d20:	f7fe f89c 	bl	8006e5c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008d24:	4804      	ldr	r0, [pc, #16]	; (8008d38 <_Z23getFont_verdana_40_4bppv+0x84>)
 8008d26:	f01d fd3c 	bl	80267a2 <__cxa_guard_release>
 8008d2a:	4808      	ldr	r0, [pc, #32]	; (8008d4c <_Z23getFont_verdana_40_4bppv+0x98>)
 8008d2c:	f01d fe7e 	bl	8026a2c <atexit>
    return verdana_40_4bpp;
 8008d30:	4b05      	ldr	r3, [pc, #20]	; (8008d48 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	200239c0 	.word	0x200239c0
 8008d3c:	080d9684 	.word	0x080d9684
 8008d40:	0802c580 	.word	0x0802c580
 8008d44:	080d957c 	.word	0x080d957c
 8008d48:	20023998 	.word	0x20023998
 8008d4c:	08008ca5 	.word	0x08008ca5

08008d50 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8008d5e:	2300      	movs	r3, #0
    }
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008d74:	2300      	movs	r3, #0
    }
 8008d76:	4618      	mov	r0, r3
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8008d82:	b480      	push	{r7}
 8008d84:	b083      	sub	sp, #12
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008d8a:	2300      	movs	r3, #0
    }
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	4613      	mov	r3, r2
 8008da4:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8008da6:	4a07      	ldr	r2, [pc, #28]	; (8008dc4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6013      	str	r3, [r2, #0]
        fonts = f;
 8008dac:	4a06      	ldr	r2, [pc, #24]	; (8008dc8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8008db2:	4a06      	ldr	r2, [pc, #24]	; (8008dcc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8008db4:	88fb      	ldrh	r3, [r7, #6]
 8008db6:	8013      	strh	r3, [r2, #0]
    }
 8008db8:	bf00      	nop
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	200567ec 	.word	0x200567ec
 8008dc8:	200567f4 	.word	0x200567f4
 8008dcc:	200567f0 	.word	0x200567f0

08008dd0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008dd0:	b40e      	push	{r1, r2, r3}
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b085      	sub	sp, #20
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8008dda:	f107 0320 	add.w	r3, r7, #32
 8008dde:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	69fa      	ldr	r2, [r7, #28]
 8008de4:	2100      	movs	r1, #0
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f011 fb52 	bl	801a490 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008dec:	4603      	mov	r3, r0
 8008dee:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008df0:	89fb      	ldrh	r3, [r7, #14]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008dfc:	b003      	add	sp, #12
 8008dfe:	4770      	bx	lr

08008e00 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008e00:	b40c      	push	{r2, r3}
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b084      	sub	sp, #16
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8008e0e:	f107 031c 	add.w	r3, r7, #28
 8008e12:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8008e14:	78f9      	ldrb	r1, [r7, #3]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	69ba      	ldr	r2, [r7, #24]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f011 fb38 	bl	801a490 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008e20:	4603      	mov	r3, r0
 8008e22:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008e24:	89fb      	ldrh	r3, [r7, #14]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e30:	b002      	add	sp, #8
 8008e32:	4770      	bx	lr

08008e34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08a      	sub	sp, #40	; 0x28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d016      	beq.n	8008e76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	331a      	adds	r3, #26
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	8adb      	ldrh	r3, [r3, #22]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d105      	bne.n	8008e62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8008e56:	4b43      	ldr	r3, [pc, #268]	; (8008f64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008e58:	4a43      	ldr	r2, [pc, #268]	; (8008f68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008e5a:	21bf      	movs	r1, #191	; 0xbf
 8008e5c:	4843      	ldr	r0, [pc, #268]	; (8008f6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008e5e:	f01d fdc7 	bl	80269f0 <__assert_func>
            return buffer[pos];
 8008e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e64:	8a9b      	ldrh	r3, [r3, #20]
 8008e66:	461a      	mov	r2, r3
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008e72:	2301      	movs	r3, #1
 8008e74:	e000      	b.n	8008e78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8008e76:	2300      	movs	r3, #0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d06a      	beq.n	8008f52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f012 fef3 	bl	801bc68 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	331a      	adds	r3, #26
 8008e86:	623b      	str	r3, [r7, #32]
 8008e88:	2301      	movs	r3, #1
 8008e8a:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
 8008e8e:	8adb      	ldrh	r3, [r3, #22]
 8008e90:	8bfa      	ldrh	r2, [r7, #30]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d305      	bcc.n	8008ea2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8008e96:	4b36      	ldr	r3, [pc, #216]	; (8008f70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8008e98:	4a36      	ldr	r2, [pc, #216]	; (8008f74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8008e9a:	21c4      	movs	r1, #196	; 0xc4
 8008e9c:	4833      	ldr	r0, [pc, #204]	; (8008f6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008e9e:	f01d fda7 	bl	80269f0 <__assert_func>
            const uint16_t index = pos + offset;
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	8a9a      	ldrh	r2, [r3, #20]
 8008ea6:	8bfb      	ldrh	r3, [r7, #30]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8008eac:	8bbb      	ldrh	r3, [r7, #28]
 8008eae:	2b09      	cmp	r3, #9
 8008eb0:	d801      	bhi.n	8008eb6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8008eb2:	8bbb      	ldrh	r3, [r7, #28]
 8008eb4:	e001      	b.n	8008eba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8008eb6:	8bbb      	ldrh	r3, [r7, #28]
 8008eb8:	3b0a      	subs	r3, #10
 8008eba:	6a3a      	ldr	r2, [r7, #32]
 8008ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ec0:	f640 123f 	movw	r2, #2367	; 0x93f
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	bf0c      	ite	eq
 8008ec8:	2301      	moveq	r3, #1
 8008eca:	2300      	movne	r3, #0
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d03f      	beq.n	8008f52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	331a      	adds	r3, #26
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	321a      	adds	r2, #26
 8008eda:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	8ad2      	ldrh	r2, [r2, #22]
 8008ee0:	2a00      	cmp	r2, #0
 8008ee2:	d105      	bne.n	8008ef0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8008ee4:	4b1f      	ldr	r3, [pc, #124]	; (8008f64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008ee6:	4a20      	ldr	r2, [pc, #128]	; (8008f68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008ee8:	21bf      	movs	r1, #191	; 0xbf
 8008eea:	4820      	ldr	r0, [pc, #128]	; (8008f6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008eec:	f01d fd80 	bl	80269f0 <__assert_func>
            return buffer[pos];
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	8a92      	ldrh	r2, [r2, #20]
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008efc:	613b      	str	r3, [r7, #16]
 8008efe:	4613      	mov	r3, r2
 8008f00:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	8adb      	ldrh	r3, [r3, #22]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d806      	bhi.n	8008f18 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8008f0a:	4b1b      	ldr	r3, [pc, #108]	; (8008f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8008f0c:	4a1b      	ldr	r2, [pc, #108]	; (8008f7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8008f0e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8008f12:	4816      	ldr	r0, [pc, #88]	; (8008f6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008f14:	f01d fd6c 	bl	80269f0 <__assert_func>
            const uint16_t index = pos + 1;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	8a9b      	ldrh	r3, [r3, #20]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8008f20:	89bb      	ldrh	r3, [r7, #12]
 8008f22:	2b09      	cmp	r3, #9
 8008f24:	d801      	bhi.n	8008f2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8008f26:	89bb      	ldrh	r3, [r7, #12]
 8008f28:	e000      	b.n	8008f2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	89f9      	ldrh	r1, [r7, #14]
 8008f30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8008f34:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	331a      	adds	r3, #26
 8008f3a:	61bb      	str	r3, [r7, #24]
 8008f3c:	f640 133f 	movw	r3, #2367	; 0x93f
 8008f40:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	8a9b      	ldrh	r3, [r3, #20]
 8008f46:	4619      	mov	r1, r3
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	8afa      	ldrh	r2, [r7, #22]
 8008f4c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8008f50:	bf00      	nop
        }
    }
    return getNextChar();
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f012 fd6c 	bl	801ba30 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8008f58:	4603      	mov	r3, r0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3728      	adds	r7, #40	; 0x28
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	0802bb14 	.word	0x0802bb14
 8008f68:	0802bb20 	.word	0x0802bb20
 8008f6c:	0802bbcc 	.word	0x0802bbcc
 8008f70:	0802bc18 	.word	0x0802bc18
 8008f74:	0802bc28 	.word	0x0802bc28
 8008f78:	0802bcfc 	.word	0x0802bcfc
 8008f7c:	0802bd08 	.word	0x0802bd08

08008f80 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f012 fd0b 	bl	801b9a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8008f8e:	bf00      	nop
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b088      	sub	sp, #32
 8008f9a:	af02      	add	r7, sp, #8
 8008f9c:	60f8      	str	r0, [r7, #12]
 8008f9e:	1d38      	adds	r0, r7, #4
 8008fa0:	e880 0006 	stmia.w	r0, {r1, r2}
 8008fa4:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8008fa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008faa:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8008fac:	1d39      	adds	r1, r7, #4
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f00f ffc4 	bl	8018f48 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8008fc0:	bf00      	nop
 8008fc2:	3718      	adds	r7, #24
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8008fc8:	b590      	push	{r4, r7, lr}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8008fd6:	88fb      	ldrh	r3, [r7, #6]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d127      	bne.n	800902c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8008fdc:	88fb      	ldrh	r3, [r7, #6]
 8008fde:	4a1e      	ldr	r2, [pc, #120]	; (8009058 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d016      	beq.n	8009016 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8008fe8:	88fb      	ldrh	r3, [r7, #6]
 8008fea:	4a1b      	ldr	r2, [pc, #108]	; (8009058 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ff0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	4a18      	ldr	r2, [pc, #96]	; (800905c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008ffc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	4413      	add	r3, r2
 8009006:	4a16      	ldr	r2, [pc, #88]	; (8009060 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009008:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	4413      	add	r3, r2
 8009012:	60fb      	str	r3, [r7, #12]
 8009014:	e00a      	b.n	800902c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8009016:	4b11      	ldr	r3, [pc, #68]	; (800905c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8009018:	4a12      	ldr	r2, [pc, #72]	; (8009064 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800901a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800901c:	4a12      	ldr	r2, [pc, #72]	; (8009068 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800901e:	4b10      	ldr	r3, [pc, #64]	; (8009060 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009020:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8009022:	88fb      	ldrh	r3, [r7, #6]
 8009024:	4a11      	ldr	r2, [pc, #68]	; (800906c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8009026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800902a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00d      	beq.n	800904e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8009032:	4a0f      	ldr	r2, [pc, #60]	; (8009070 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8009034:	88fb      	ldrh	r3, [r7, #6]
 8009036:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8009038:	f000 f83e 	bl	80090b8 <_ZN17TypedTextDatabase8getFontsEv>
 800903c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800903e:	f000 f833 	bl	80090a8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8009042:	4603      	mov	r3, r0
 8009044:	461a      	mov	r2, r3
 8009046:	4621      	mov	r1, r4
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f7ff fea5 	bl	8008d98 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800904e:	bf00      	nop
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	bd90      	pop	{r4, r7, pc}
 8009056:	bf00      	nop
 8009058:	200239c4 	.word	0x200239c4
 800905c:	200239cc 	.word	0x200239cc
 8009060:	200239d0 	.word	0x200239d0
 8009064:	080d981c 	.word	0x080d981c
 8009068:	080d9688 	.word	0x080d9688
 800906c:	080d9990 	.word	0x080d9990
 8009070:	200239c8 	.word	0x200239c8

08009074 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8009080:	4b07      	ldr	r3, [pc, #28]	; (80090a0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	4b07      	ldr	r3, [pc, #28]	; (80090a4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8009086:	6819      	ldr	r1, [r3, #0]
 8009088:	887b      	ldrh	r3, [r7, #2]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	440b      	add	r3, r1
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	005b      	lsls	r3, r3, #1
 8009092:	4413      	add	r3, r2
}
 8009094:	4618      	mov	r0, r3
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	200239cc 	.word	0x200239cc
 80090a4:	200239d0 	.word	0x200239d0

080090a8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80090ac:	2365      	movs	r3, #101	; 0x65
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80090b8:	b480      	push	{r7}
 80090ba:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80090bc:	4b02      	ldr	r3, [pc, #8]	; (80090c8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80090be:	4618      	mov	r0, r3
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	200239d4 	.word	0x200239d4

080090cc <_Z41__static_initialization_and_destruction_0ii>:
    case 7:
        touchgfx_fonts[7] = &(getFont_verdana_12_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d12c      	bne.n	8009136 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d127      	bne.n	8009136 <_Z41__static_initialization_and_destruction_0ii+0x6a>
    &(getFont_verdana_20_4bpp()),
 80090e6:	f7ff fd8f 	bl	8008c08 <_Z23getFont_verdana_20_4bppv>
 80090ea:	4603      	mov	r3, r0
};
 80090ec:	4a14      	ldr	r2, [pc, #80]	; (8009140 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80090ee:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80090f0:	f7ff fde0 	bl	8008cb4 <_Z23getFont_verdana_40_4bppv>
 80090f4:	4603      	mov	r3, r0
};
 80090f6:	4a12      	ldr	r2, [pc, #72]	; (8009140 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80090f8:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 80090fa:	f7ff fcd9 	bl	8008ab0 <_Z23getFont_verdana_10_4bppv>
 80090fe:	4603      	mov	r3, r0
};
 8009100:	4a0f      	ldr	r2, [pc, #60]	; (8009140 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8009102:	6093      	str	r3, [r2, #8]
    &(getFont_swisop3_300_4bpp()),
 8009104:	f7ff fc26 	bl	8008954 <_Z24getFont_swisop3_300_4bppv>
 8009108:	4603      	mov	r3, r0
};
 800910a:	4a0d      	ldr	r2, [pc, #52]	; (8009140 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800910c:	60d3      	str	r3, [r2, #12]
    &(getFont_JetBrainsMono_Regular_40_4bpp()),
 800910e:	f7ff fb75 	bl	80087fc <_Z37getFont_JetBrainsMono_Regular_40_4bppv>
 8009112:	4603      	mov	r3, r0
};
 8009114:	4a0a      	ldr	r2, [pc, #40]	; (8009140 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8009116:	6113      	str	r3, [r2, #16]
    &(getFont_JetBrainsMono_Regular_60_4bpp()),
 8009118:	f7ff fbc6 	bl	80088a8 <_Z37getFont_JetBrainsMono_Regular_60_4bppv>
 800911c:	4603      	mov	r3, r0
};
 800911e:	4a08      	ldr	r2, [pc, #32]	; (8009140 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8009120:	6153      	str	r3, [r2, #20]
    &(getFont_swisop3_50_4bpp()),
 8009122:	f7ff fc6f 	bl	8008a04 <_Z23getFont_swisop3_50_4bppv>
 8009126:	4603      	mov	r3, r0
};
 8009128:	4a05      	ldr	r2, [pc, #20]	; (8009140 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800912a:	6193      	str	r3, [r2, #24]
    &(getFont_verdana_12_4bpp())
 800912c:	f7ff fd16 	bl	8008b5c <_Z23getFont_verdana_12_4bppv>
 8009130:	4603      	mov	r3, r0
};
 8009132:	4a03      	ldr	r2, [pc, #12]	; (8009140 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8009134:	61d3      	str	r3, [r2, #28]
} // namespace TypedTextDatabase
 8009136:	bf00      	nop
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	200239d4 	.word	0x200239d4

08009144 <_GLOBAL__sub_I_touchgfx_fonts>:
 8009144:	b580      	push	{r7, lr}
 8009146:	af00      	add	r7, sp, #0
 8009148:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800914c:	2001      	movs	r0, #1
 800914e:	f7ff ffbd 	bl	80090cc <_Z41__static_initialization_and_destruction_0ii>
 8009152:	bd80      	pop	{r7, pc}

08009154 <_ZN8touchgfx13BoxWithBorderC1Ev>:
{
public:
    BoxWithBorder()
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4618      	mov	r0, r3
 8009160:	f7fd f8ca 	bl	80062f8 <_ZN8touchgfx3BoxC1Ev>
 8009164:	4a08      	ldr	r2, [pc, #32]	; (8009188 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	601a      	str	r2, [r3, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	332c      	adds	r3, #44	; 0x2c
 800916e:	2100      	movs	r1, #0
 8009170:	4618      	mov	r0, r3
 8009172:	f7fb f8e1 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	0802db14 	.word	0x0802db14

0800918c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	460b      	mov	r3, r1
 80091b2:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	887a      	ldrh	r2, [r7, #2]
 80091b8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 80091ba:	bf00      	nop
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
	...

080091c8 <_ZN12alertBarBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/alertBarBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

alertBarBase::alertBarBase()
 80091c8:	b590      	push	{r4, r7, lr}
 80091ca:	b091      	sub	sp, #68	; 0x44
 80091cc:	af02      	add	r7, sp, #8
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fc ffbc 	bl	8006150 <_ZN8touchgfx9ContainerC1Ev>
 80091d8:	4a68      	ldr	r2, [pc, #416]	; (800937c <_ZN12alertBarBaseC1Ev+0x1b4>)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	332c      	adds	r3, #44	; 0x2c
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff ffb6 	bl	8009154 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	3360      	adds	r3, #96	; 0x60
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fd ff1f 	bl	8007030 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(800);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fc fed1 	bl	8005fa0 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	213c      	movs	r1, #60	; 0x3c
 8009202:	4618      	mov	r0, r3
 8009204:	f7fc fedb 	bl	8005fbe <_ZN8touchgfx8Drawable9setHeightEs>
    bgBox.setPosition(0, 0, 800, 60);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800920e:	233c      	movs	r3, #60	; 0x3c
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009216:	2200      	movs	r2, #0
 8009218:	2100      	movs	r1, #0
 800921a:	f7fc fe64 	bl	8005ee6 <_ZN8touchgfx8Drawable11setPositionEssss>
    bgBox.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009224:	23ff      	movs	r3, #255	; 0xff
 8009226:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800922a:	2300      	movs	r3, #0
 800922c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8009230:	2300      	movs	r3, #0
 8009232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009236:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800923a:	041b      	lsls	r3, r3, #16
 800923c:	461a      	mov	r2, r3
 800923e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009242:	021b      	lsls	r3, r3, #8
 8009244:	431a      	orrs	r2, r3
 8009246:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800924a:	4313      	orrs	r3, r2
 800924c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009250:	f107 031c 	add.w	r3, r7, #28
 8009254:	4611      	mov	r1, r2
 8009256:	4618      	mov	r0, r3
 8009258:	f7fb f86e 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	4619      	mov	r1, r3
 8009260:	4620      	mov	r0, r4
 8009262:	f7fd f86d 	bl	8006340 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    bgBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800926c:	2300      	movs	r3, #0
 800926e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8009272:	2300      	movs	r3, #0
 8009274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009278:	2300      	movs	r3, #0
 800927a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800927e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009282:	041b      	lsls	r3, r3, #16
 8009284:	461a      	mov	r2, r3
 8009286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800928a:	021b      	lsls	r3, r3, #8
 800928c:	431a      	orrs	r2, r3
 800928e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009292:	4313      	orrs	r3, r2
 8009294:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009298:	f107 0318 	add.w	r3, r7, #24
 800929c:	4611      	mov	r1, r2
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fb f84a 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	4619      	mov	r1, r3
 80092a8:	4620      	mov	r0, r4
 80092aa:	f7ff ff6f 	bl	800918c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    bgBox.setBorderSize(5);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	332c      	adds	r3, #44	; 0x2c
 80092b2:	2105      	movs	r1, #5
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7ff ff77 	bl	80091a8 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>

    frontText.setPosition(0, 0, 800, 60);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f103 0060 	add.w	r0, r3, #96	; 0x60
 80092c0:	233c      	movs	r3, #60	; 0x3c
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80092c8:	2200      	movs	r2, #0
 80092ca:	2100      	movs	r1, #0
 80092cc:	f7fc fe0b 	bl	8005ee6 <_ZN8touchgfx8Drawable11setPositionEssss>
    frontText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80092d6:	23ff      	movs	r3, #255	; 0xff
 80092d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092dc:	23ff      	movs	r3, #255	; 0xff
 80092de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80092e2:	23ff      	movs	r3, #255	; 0xff
 80092e4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80092e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092ec:	041b      	lsls	r3, r3, #16
 80092ee:	461a      	mov	r2, r3
 80092f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80092f4:	021b      	lsls	r3, r3, #8
 80092f6:	431a      	orrs	r2, r3
 80092f8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80092fc:	4313      	orrs	r3, r2
 80092fe:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009302:	f107 0314 	add.w	r3, r7, #20
 8009306:	4611      	mov	r1, r2
 8009308:	4618      	mov	r0, r3
 800930a:	f7fb f815 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	62fc      	str	r4, [r7, #44]	; 0x2c
 8009312:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8009314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800931a:	bf00      	nop
    frontText.setLinespacing(0);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3360      	adds	r3, #96	; 0x60
 8009320:	637b      	str	r3, [r7, #52]	; 0x34
 8009322:	2300      	movs	r3, #0
 8009324:	867b      	strh	r3, [r7, #50]	; 0x32
        linespace = space;
 8009326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009328:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800932a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800932c:	bf00      	nop
    frontText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8009334:	f107 030c 	add.w	r3, r7, #12
 8009338:	2105      	movs	r1, #5
 800933a:	4618      	mov	r0, r3
 800933c:	f7fd fe28 	bl	8006f90 <_ZN8touchgfx9TypedTextC1Et>
 8009340:	f107 030c 	add.w	r3, r7, #12
 8009344:	4619      	mov	r1, r3
 8009346:	4620      	mov	r0, r4
 8009348:	f00e fb7f 	bl	8017a4a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800934c:	f107 030c 	add.w	r3, r7, #12
 8009350:	4618      	mov	r0, r3
 8009352:	f7fd f825 	bl	80063a0 <_ZN8touchgfx9TypedTextD1Ev>

    add(bgBox);
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	332c      	adds	r3, #44	; 0x2c
 800935c:	4619      	mov	r1, r3
 800935e:	4610      	mov	r0, r2
 8009360:	f00c fbb4 	bl	8015acc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(frontText);
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	3360      	adds	r3, #96	; 0x60
 800936a:	4619      	mov	r1, r3
 800936c:	4610      	mov	r0, r2
 800936e:	f00c fbad 	bl	8015acc <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4618      	mov	r0, r3
 8009376:	373c      	adds	r7, #60	; 0x3c
 8009378:	46bd      	mov	sp, r7
 800937a:	bd90      	pop	{r4, r7, pc}
 800937c:	0802c5e0 	.word	0x0802c5e0

08009380 <_ZN12alertBarBase10initializeEv>:

void alertBarBase::initialize()
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]

}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <_ZN11tempBoxBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/tempBoxBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

tempBoxBase::tempBoxBase()
 8009394:	b590      	push	{r4, r7, lr}
 8009396:	b091      	sub	sp, #68	; 0x44
 8009398:	af02      	add	r7, sp, #8
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fc fed6 	bl	8006150 <_ZN8touchgfx9ContainerC1Ev>
 80093a4:	4a6a      	ldr	r2, [pc, #424]	; (8009550 <_ZN11tempBoxBaseC1Ev+0x1bc>)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	601a      	str	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	332c      	adds	r3, #44	; 0x2c
 80093ae:	4618      	mov	r0, r3
 80093b0:	f00d ff80 	bl	80172b4 <_ZN8touchgfx4LineC1Ev>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80093ba:	f107 0310 	add.w	r3, r7, #16
 80093be:	2100      	movs	r1, #0
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fa ffb9 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 80093c6:	6939      	ldr	r1, [r7, #16]
 80093c8:	4620      	mov	r0, r4
 80093ca:	f7fd ff5f 	bl	800728c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	33b8      	adds	r3, #184	; 0xb8
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fd fdf2 	bl	8006fbc <_ZN8touchgfx8TextAreaC1Ev>
{
    setWidth(220);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	21dc      	movs	r1, #220	; 0xdc
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fc fddf 	bl	8005fa0 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	213c      	movs	r1, #60	; 0x3c
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fc fde9 	bl	8005fbe <_ZN8touchgfx8Drawable9setHeightEs>
    line1.setPosition(0, 0, 100, 60);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80093f2:	233c      	movs	r3, #60	; 0x3c
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	2364      	movs	r3, #100	; 0x64
 80093f8:	2200      	movs	r2, #0
 80093fa:	2100      	movs	r1, #0
 80093fc:	f7fc fd73 	bl	8005ee6 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8009406:	23ff      	movs	r3, #255	; 0xff
 8009408:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800940c:	23ff      	movs	r3, #255	; 0xff
 800940e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009412:	23ff      	movs	r3, #255	; 0xff
 8009414:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009418:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800941c:	041b      	lsls	r3, r3, #16
 800941e:	461a      	mov	r2, r3
 8009420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009424:	021b      	lsls	r3, r3, #8
 8009426:	431a      	orrs	r2, r3
 8009428:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800942c:	4313      	orrs	r3, r2
 800942e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009432:	f107 0320 	add.w	r3, r7, #32
 8009436:	4611      	mov	r1, r2
 8009438:	4618      	mov	r0, r3
 800943a:	f7fa ff7d 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	4619      	mov	r1, r3
 8009442:	4620      	mov	r0, r4
 8009444:	f7fd ff42 	bl	80072cc <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	33a0      	adds	r3, #160	; 0xa0
 8009452:	4619      	mov	r1, r3
 8009454:	4610      	mov	r0, r2
 8009456:	f00d fd51 	bl	8016efc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line1.setStart(0, 0);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	332c      	adds	r3, #44	; 0x2c
 800945e:	2200      	movs	r2, #0
 8009460:	2100      	movs	r1, #0
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe ff94 	bl	8008390 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(0, 220);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	332c      	adds	r3, #44	; 0x2c
 800946c:	22dc      	movs	r2, #220	; 0xdc
 800946e:	2100      	movs	r1, #0
 8009470:	4618      	mov	r0, r3
 8009472:	f7fe ffb3 	bl	80083dc <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(1);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	332c      	adds	r3, #44	; 0x2c
 800947a:	2101      	movs	r1, #1
 800947c:	4618      	mov	r0, r3
 800947e:	f7fe ffd3 	bl	8008428 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	332c      	adds	r3, #44	; 0x2c
 8009486:	2101      	movs	r1, #1
 8009488:	4618      	mov	r0, r3
 800948a:	f00e f859 	bl	8017540 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    textArea1.setPosition(0, 0, 220, 60);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 8009494:	233c      	movs	r3, #60	; 0x3c
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	23dc      	movs	r3, #220	; 0xdc
 800949a:	2200      	movs	r2, #0
 800949c:	2100      	movs	r1, #0
 800949e:	f7fc fd22 	bl	8005ee6 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80094a8:	23ff      	movs	r3, #255	; 0xff
 80094aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094ae:	23ff      	movs	r3, #255	; 0xff
 80094b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80094b4:	23ff      	movs	r3, #255	; 0xff
 80094b6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80094ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80094be:	041b      	lsls	r3, r3, #16
 80094c0:	461a      	mov	r2, r3
 80094c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80094c6:	021b      	lsls	r3, r3, #8
 80094c8:	431a      	orrs	r2, r3
 80094ca:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80094ce:	4313      	orrs	r3, r2
 80094d0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80094d4:	f107 031c 	add.w	r3, r7, #28
 80094d8:	4611      	mov	r1, r2
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fa ff2c 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	62fc      	str	r4, [r7, #44]	; 0x2c
 80094e4:	60fb      	str	r3, [r7, #12]
        this->color = color;
 80094e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80094ec:	bf00      	nop
    textArea1.setLinespacing(2);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	33b8      	adds	r3, #184	; 0xb8
 80094f2:	637b      	str	r3, [r7, #52]	; 0x34
 80094f4:	2302      	movs	r3, #2
 80094f6:	867b      	strh	r3, [r7, #50]	; 0x32
        linespace = space;
 80094f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094fa:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80094fc:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80094fe:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8009506:	f107 0314 	add.w	r3, r7, #20
 800950a:	2104      	movs	r1, #4
 800950c:	4618      	mov	r0, r3
 800950e:	f7fd fd3f 	bl	8006f90 <_ZN8touchgfx9TypedTextC1Et>
 8009512:	f107 0314 	add.w	r3, r7, #20
 8009516:	4619      	mov	r1, r3
 8009518:	4620      	mov	r0, r4
 800951a:	f00e fa96 	bl	8017a4a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800951e:	f107 0314 	add.w	r3, r7, #20
 8009522:	4618      	mov	r0, r3
 8009524:	f7fc ff3c 	bl	80063a0 <_ZN8touchgfx9TypedTextD1Ev>

    add(line1);
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	332c      	adds	r3, #44	; 0x2c
 800952e:	4619      	mov	r1, r3
 8009530:	4610      	mov	r0, r2
 8009532:	f00c facb 	bl	8015acc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textArea1);
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	33b8      	adds	r3, #184	; 0xb8
 800953c:	4619      	mov	r1, r3
 800953e:	4610      	mov	r0, r2
 8009540:	f00c fac4 	bl	8015acc <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4618      	mov	r0, r3
 8009548:	373c      	adds	r7, #60	; 0x3c
 800954a:	46bd      	mov	sp, r7
 800954c:	bd90      	pop	{r4, r7, pc}
 800954e:	bf00      	nop
 8009550:	0802c66c 	.word	0x0802c66c

08009554 <_ZN11tempBoxBase10initializeEv>:

void tempBoxBase::initialize()
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]

}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
    {
    }
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
    {
    }
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
    {
 8009598:	4a04      	ldr	r2, [pc, #16]	; (80095ac <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	601a      	str	r2, [r3, #0]
    }
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4618      	mov	r0, r3
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	0802c708 	.word	0x0802c708

080095b0 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
    }
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f7ff ffe9 	bl	8009590 <_ZN8touchgfx9PresenterD1Ev>
 80095be:	2104      	movs	r1, #4
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f01d f8e0 	bl	8026786 <_ZdlPvj>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
    {
 80095d8:	4a04      	ldr	r2, [pc, #16]	; (80095ec <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	601a      	str	r2, [r3, #0]
    }
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4618      	mov	r0, r3
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	0802c708 	.word	0x0802c708

080095f0 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	4a06      	ldr	r2, [pc, #24]	; (8009614 <_ZN13ModelListenerC1Ev+0x24>)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	605a      	str	r2, [r3, #4]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4618      	mov	r0, r3
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	0802c6f8 	.word	0x0802c6f8

08009618 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	4a04      	ldr	r2, [pc, #16]	; (8009634 <_ZN13ModelListenerD1Ev+0x1c>)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4618      	mov	r0, r3
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	0802c6f8 	.word	0x0802c6f8

08009638 <_ZN13ModelListenerD0Ev>:
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f7ff ffe9 	bl	8009618 <_ZN13ModelListenerD1Ev>
 8009646:	2108      	movs	r1, #8
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f01d f89c 	bl	8026786 <_ZdlPvj>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4618      	mov	r0, r3
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	68b9      	ldr	r1, [r7, #8]
 800966a:	4618      	mov	r0, r3
 800966c:	f7fd f81e 	bl	80066ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8009670:	4a03      	ldr	r2, [pc, #12]	; (8009680 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	601a      	str	r2, [r3, #0]
{

}
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	0802c1a0 	.word	0x0802c1a0

08009684 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	4a09      	ldr	r2, [pc, #36]	; (80096b4 <_ZN13MainPresenterD1Ev+0x30>)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	601a      	str	r2, [r3, #0]
 8009692:	4a09      	ldr	r2, [pc, #36]	; (80096b8 <_ZN13MainPresenterD1Ev+0x34>)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	605a      	str	r2, [r3, #4]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	3304      	adds	r3, #4
 800969c:	4618      	mov	r0, r3
 800969e:	f7ff ffbb 	bl	8009618 <_ZN13ModelListenerD1Ev>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7ff ff73 	bl	8009590 <_ZN8touchgfx9PresenterD1Ev>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4618      	mov	r0, r3
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	0802c720 	.word	0x0802c720
 80096b8:	0802c738 	.word	0x0802c738

080096bc <_ZThn4_N13MainPresenterD1Ev>:
 80096bc:	f1a0 0004 	sub.w	r0, r0, #4
 80096c0:	e7e0      	b.n	8009684 <_ZN13MainPresenterD1Ev>
 80096c2:	bf00      	nop

080096c4 <_ZN13MainPresenterD0Ev>:
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7ff ffd9 	bl	8009684 <_ZN13MainPresenterD1Ev>
 80096d2:	2110      	movs	r1, #16
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f01d f856 	bl	8026786 <_ZdlPvj>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4618      	mov	r0, r3
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <_ZThn4_N13MainPresenterD0Ev>:
 80096e4:	f1a0 0004 	sub.w	r0, r0, #4
 80096e8:	e7ec      	b.n	80096c4 <_ZN13MainPresenterD0Ev>
	...

080096ec <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
    : view(v)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7ff ff69 	bl	80095d0 <_ZN8touchgfx9PresenterC1Ev>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	3304      	adds	r3, #4
 8009702:	4618      	mov	r0, r3
 8009704:	f7ff ff74 	bl	80095f0 <_ZN13ModelListenerC1Ev>
 8009708:	4a06      	ldr	r2, [pc, #24]	; (8009724 <_ZN13MainPresenterC1ER8MainView+0x38>)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	4a06      	ldr	r2, [pc, #24]	; (8009728 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	605a      	str	r2, [r3, #4]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	683a      	ldr	r2, [r7, #0]
 8009718:	60da      	str	r2, [r3, #12]
{

}
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4618      	mov	r0, r3
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	0802c720 	.word	0x0802c720
 8009728:	0802c738 	.word	0x0802c738

0800972c <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]

}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]

}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <_Z41__static_initialization_and_destruction_0ii>:
 8009754:	b580      	push	{r7, lr}
 8009756:	b092      	sub	sp, #72	; 0x48
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b01      	cmp	r3, #1
 8009762:	f040 8114 	bne.w	800998e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800976c:	4293      	cmp	r3, r2
 800976e:	f040 810e 	bne.w	800998e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009772:	2300      	movs	r3, #0
 8009774:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8009778:	2300      	movs	r3, #0
 800977a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800977e:	2300      	movs	r3, #0
 8009780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009784:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009788:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800978c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009790:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009798:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800979c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80097a0:	041b      	lsls	r3, r3, #16
 80097a2:	461a      	mov	r2, r3
 80097a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80097a8:	021b      	lsls	r3, r3, #8
 80097aa:	431a      	orrs	r2, r3
 80097ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80097b0:	4313      	orrs	r3, r2
 80097b2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80097b6:	f107 0320 	add.w	r3, r7, #32
 80097ba:	4611      	mov	r1, r2
 80097bc:	4618      	mov	r0, r3
 80097be:	f7fa fdbb 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 80097c2:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 80097c4:	bf00      	nop
 80097c6:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 80097c8:	4b73      	ldr	r3, [pc, #460]	; (8009998 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	23ff      	movs	r3, #255	; 0xff
 80097ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80097d2:	2300      	movs	r3, #0
 80097d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80097d8:	2300      	movs	r3, #0
 80097da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80097de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80097e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80097ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80097f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80097f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80097fa:	041b      	lsls	r3, r3, #16
 80097fc:	461a      	mov	r2, r3
 80097fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009802:	021b      	lsls	r3, r3, #8
 8009804:	431a      	orrs	r2, r3
 8009806:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800980a:	4313      	orrs	r3, r2
 800980c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009810:	f107 031c 	add.w	r3, r7, #28
 8009814:	4611      	mov	r1, r2
 8009816:	4618      	mov	r0, r3
 8009818:	f7fa fd8e 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800981c:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800981e:	bf00      	nop
 8009820:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8009822:	4b5e      	ldr	r3, [pc, #376]	; (800999c <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8009824:	601a      	str	r2, [r3, #0]
 8009826:	2300      	movs	r3, #0
 8009828:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800982c:	23ff      	movs	r3, #255	; 0xff
 800982e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8009832:	2300      	movs	r3, #0
 8009834:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009838:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800983c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009840:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009844:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8009848:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800984c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009850:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009854:	041b      	lsls	r3, r3, #16
 8009856:	461a      	mov	r2, r3
 8009858:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800985c:	021b      	lsls	r3, r3, #8
 800985e:	431a      	orrs	r2, r3
 8009860:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009864:	4313      	orrs	r3, r2
 8009866:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800986a:	f107 0318 	add.w	r3, r7, #24
 800986e:	4611      	mov	r1, r2
 8009870:	4618      	mov	r0, r3
 8009872:	f7fa fd61 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8009876:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8009878:	bf00      	nop
 800987a:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 800987c:	4b48      	ldr	r3, [pc, #288]	; (80099a0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800987e:	601a      	str	r2, [r3, #0]
 8009880:	2300      	movs	r3, #0
 8009882:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009886:	2300      	movs	r3, #0
 8009888:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800988c:	23ff      	movs	r3, #255	; 0xff
 800988e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8009892:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009896:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800989a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800989e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80098a2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80098a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80098aa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80098ae:	041b      	lsls	r3, r3, #16
 80098b0:	461a      	mov	r2, r3
 80098b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098b6:	021b      	lsls	r3, r3, #8
 80098b8:	431a      	orrs	r2, r3
 80098ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80098be:	4313      	orrs	r3, r2
 80098c0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80098c4:	f107 0314 	add.w	r3, r7, #20
 80098c8:	4611      	mov	r1, r2
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fa fd34 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 80098d0:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 80098d2:	bf00      	nop
 80098d4:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 80098d6:	4b33      	ldr	r3, [pc, #204]	; (80099a4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80098d8:	601a      	str	r2, [r3, #0]
 80098da:	23f7      	movs	r3, #247	; 0xf7
 80098dc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80098e0:	234c      	movs	r3, #76	; 0x4c
 80098e2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80098e6:	2302      	movs	r3, #2
 80098e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80098ec:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80098f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80098f4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80098f8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80098fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009900:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009904:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009908:	041b      	lsls	r3, r3, #16
 800990a:	461a      	mov	r2, r3
 800990c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009910:	021b      	lsls	r3, r3, #8
 8009912:	431a      	orrs	r2, r3
 8009914:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009918:	4313      	orrs	r3, r2
 800991a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800991e:	f107 0310 	add.w	r3, r7, #16
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f7fa fd07 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800992a:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 800992c:	bf00      	nop
 800992e:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8009930:	4b1d      	ldr	r3, [pc, #116]	; (80099a8 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	23f7      	movs	r3, #247	; 0xf7
 8009936:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800993a:	23d2      	movs	r3, #210	; 0xd2
 800993c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009940:	2302      	movs	r3, #2
 8009942:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009946:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800994a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800994e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009956:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800995a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800995e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009962:	041b      	lsls	r3, r3, #16
 8009964:	461a      	mov	r2, r3
 8009966:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800996a:	021b      	lsls	r3, r3, #8
 800996c:	431a      	orrs	r2, r3
 800996e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009972:	4313      	orrs	r3, r2
 8009974:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009978:	f107 030c 	add.w	r3, r7, #12
 800997c:	4611      	mov	r1, r2
 800997e:	4618      	mov	r0, r3
 8009980:	f7fa fcda 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 8009984:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8009986:	bf00      	nop
 8009988:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800998a:	4b08      	ldr	r3, [pc, #32]	; (80099ac <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800998c:	601a      	str	r2, [r3, #0]
 800998e:	bf00      	nop
 8009990:	3748      	adds	r7, #72	; 0x48
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	200239f4 	.word	0x200239f4
 800999c:	200239f8 	.word	0x200239f8
 80099a0:	200239fc 	.word	0x200239fc
 80099a4:	20023a00 	.word	0x20023a00
 80099a8:	20023a04 	.word	0x20023a04
 80099ac:	20023a08 	.word	0x20023a08

080099b0 <_GLOBAL__sub_I__ZN13MainPresenterC2ER8MainView>:
 80099b0:	b580      	push	{r7, lr}
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80099b8:	2001      	movs	r0, #1
 80099ba:	f7ff fecb 	bl	8009754 <_Z41__static_initialization_and_destruction_0ii>
 80099be:	bd80      	pop	{r7, pc}

080099c0 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	4a05      	ldr	r2, [pc, #20]	; (80099e0 <_ZN8MainViewD1Ev+0x20>)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	601a      	str	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fd fd9b 	bl	800750c <_ZN12MainViewBaseD1Ev>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4618      	mov	r0, r3
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	0802c748 	.word	0x0802c748

080099e4 <_ZN8MainViewD0Ev>:
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7ff ffe7 	bl	80099c0 <_ZN8MainViewD1Ev>
 80099f2:	4904      	ldr	r1, [pc, #16]	; (8009a04 <_ZN8MainViewD0Ev+0x20>)
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f01c fec6 	bl	8026786 <_ZdlPvj>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4618      	mov	r0, r3
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	000226c0 	.word	0x000226c0

08009a08 <_ZN8MainViewC1Ev>:
#include <stdio.h>
#include <cstring>
#include <ecumaster.h>
#include <telemetry_data.h>

MainView::MainView()
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fd fe06 	bl	8007624 <_ZN12MainViewBaseC1Ev>
 8009a18:	4a3d      	ldr	r2, [pc, #244]	; (8009b10 <_ZN8MainViewC1Ev+0x108>)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	601a      	str	r2, [r3, #0]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	4b3c      	ldr	r3, [pc, #240]	; (8009b14 <_ZN8MainViewC1Ev+0x10c>)
 8009a22:	4413      	add	r3, r2
 8009a24:	2200      	movs	r2, #0
 8009a26:	601a      	str	r2, [r3, #0]
{
	rpmArea.setWildcard(rpmAreaBuffer);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	4b39      	ldr	r3, [pc, #228]	; (8009b18 <_ZN8MainViewC1Ev+0x110>)
 8009a32:	4413      	add	r3, r2
 8009a34:	4619      	mov	r1, r3
 8009a36:	f7fd fb11 	bl	800705c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	gearArea.setWildcard(gearAreaBuffer);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	4b36      	ldr	r3, [pc, #216]	; (8009b1c <_ZN8MainViewC1Ev+0x114>)
 8009a44:	4413      	add	r3, r2
 8009a46:	4619      	mov	r1, r3
 8009a48:	f7fd fb08 	bl	800705c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	cltArea.setWildcard(cltAreaBuffer);
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	4b34      	ldr	r3, [pc, #208]	; (8009b20 <_ZN8MainViewC1Ev+0x118>)
 8009a50:	4413      	add	r3, r2
 8009a52:	6879      	ldr	r1, [r7, #4]
 8009a54:	4a33      	ldr	r2, [pc, #204]	; (8009b24 <_ZN8MainViewC1Ev+0x11c>)
 8009a56:	440a      	add	r2, r1
 8009a58:	4611      	mov	r1, r2
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fd fafe 	bl	800705c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	battArea.setWildcard(battAreaBuffer);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	4b2f      	ldr	r3, [pc, #188]	; (8009b28 <_ZN8MainViewC1Ev+0x120>)
 8009a6a:	4413      	add	r3, r2
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	f7fd faf5 	bl	800705c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	oilPressArea.setWildcard(oilPressAreaBuffer);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	4b2c      	ldr	r3, [pc, #176]	; (8009b2c <_ZN8MainViewC1Ev+0x124>)
 8009a7c:	4413      	add	r3, r2
 8009a7e:	4619      	mov	r1, r3
 8009a80:	f7fd faec 	bl	800705c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	oilTempArea.setWildcard(oilTempAreaBuffer);
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	4b2a      	ldr	r3, [pc, #168]	; (8009b30 <_ZN8MainViewC1Ev+0x128>)
 8009a88:	4413      	add	r3, r2
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	4a29      	ldr	r2, [pc, #164]	; (8009b34 <_ZN8MainViewC1Ev+0x12c>)
 8009a8e:	440a      	add	r2, r1
 8009a90:	4611      	mov	r1, r2
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fd fae2 	bl	800705c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

	setRPM(EcuData.rpm);
 8009a98:	4b27      	ldr	r3, [pc, #156]	; (8009b38 <_ZN8MainViewC1Ev+0x130>)
 8009a9a:	881b      	ldrh	r3, [r3, #0]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fa90 	bl	8009fc4 <_ZN8MainView6setRPMEi>
	setGear(telemetryData.gear);
 8009aa4:	4b25      	ldr	r3, [pc, #148]	; (8009b3c <_ZN8MainViewC1Ev+0x134>)
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fba4 	bl	800a1f8 <_ZN8MainView7setGearEi>
	setClt(EcuData.clt);
 8009ab0:	4b21      	ldr	r3, [pc, #132]	; (8009b38 <_ZN8MainViewC1Ev+0x130>)
 8009ab2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fb6d 	bl	800a198 <_ZN8MainView6setCltEs>
	setBatt(EcuData.batt);
 8009abe:	4b1e      	ldr	r3, [pc, #120]	; (8009b38 <_ZN8MainViewC1Ev+0x130>)
 8009ac0:	edd3 7a07 	vldr	s15, [r3, #28]
 8009ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 faa7 	bl	800a01c <_ZN8MainView7setBattEf>
	setOilPress(EcuData.oilPress);
 8009ace:	4b1a      	ldr	r3, [pc, #104]	; (8009b38 <_ZN8MainViewC1Ev+0x130>)
 8009ad0:	edd3 7a03 	vldr	s15, [r3, #12]
 8009ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fae7 	bl	800a0ac <_ZN8MainView11setOilPressEf>
	setOilTemp(EcuData.oilTemp);
 8009ade:	4b16      	ldr	r3, [pc, #88]	; (8009b38 <_ZN8MainViewC1Ev+0x130>)
 8009ae0:	7adb      	ldrb	r3, [r3, #11]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fb27 	bl	800a138 <_ZN8MainView10setOilTempEh>
	alertBar1.setState(EBarState::Blank);
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	4b14      	ldr	r3, [pc, #80]	; (8009b40 <_ZN8MainViewC1Ev+0x138>)
 8009aee:	4413      	add	r3, r2
 8009af0:	2100      	movs	r1, #0
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fd70 	bl	800a5d8 <_ZN8alertBar8setStateE9EBarState>
	alertBar2.setState(EBarState::Blank);
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	4b12      	ldr	r3, [pc, #72]	; (8009b44 <_ZN8MainViewC1Ev+0x13c>)
 8009afc:	4413      	add	r3, r2
 8009afe:	2100      	movs	r1, #0
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 fd69 	bl	800a5d8 <_ZN8alertBar8setStateE9EBarState>
}
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	0802c748 	.word	0x0802c748
 8009b14:	000226bc 	.word	0x000226bc
 8009b18:	0001f778 	.word	0x0001f778
 8009b1c:	0001f774 	.word	0x0001f774
 8009b20:	0001f6f4 	.word	0x0001f6f4
 8009b24:	0001f7b4 	.word	0x0001f7b4
 8009b28:	0001f78c 	.word	0x0001f78c
 8009b2c:	0001f7a0 	.word	0x0001f7a0
 8009b30:	0001f734 	.word	0x0001f734
 8009b34:	0001f7c8 	.word	0x0001f7c8
 8009b38:	20056dc4 	.word	0x20056dc4
 8009b3c:	20056d8c 	.word	0x20056d8c
 8009b40:	0001f514 	.word	0x0001f514
 8009b44:	0001f604 	.word	0x0001f604

08009b48 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
	MainViewBase::setupScreen();
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fe fbd2 	bl	80082fc <_ZN12MainViewBase11setupScreenEv>
}
 8009b58:	bf00      	nop
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
	MainViewBase::tearDownScreen();
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fc fb3e 	bl	80061ec <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8009b70:	bf00      	nop
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <_ZN8MainView15handleTickEventEv>:

void MainView::handleTickEvent()
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
	//// Screen1View::tempBox1_1.redraw();
	//tempBox1_1.invalidate();
	static int a = 0;

	static uint16_t lastRPM = 0;
	if (EcuData.rpm != lastRPM)
 8009b80:	4b96      	ldr	r3, [pc, #600]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009b82:	881a      	ldrh	r2, [r3, #0]
 8009b84:	4b96      	ldr	r3, [pc, #600]	; (8009de0 <_ZN8MainView15handleTickEventEv+0x268>)
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d00e      	beq.n	8009baa <_ZN8MainView15handleTickEventEv+0x32>
	{
		setRPM(EcuData.rpm);
 8009b8c:	4b93      	ldr	r3, [pc, #588]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fa16 	bl	8009fc4 <_ZN8MainView6setRPMEi>
		lastRPM = EcuData.rpm;
 8009b98:	4b90      	ldr	r3, [pc, #576]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009b9a:	881a      	ldrh	r2, [r3, #0]
 8009b9c:	4b90      	ldr	r3, [pc, #576]	; (8009de0 <_ZN8MainView15handleTickEventEv+0x268>)
 8009b9e:	801a      	strh	r2, [r3, #0]
		// if(EcuData.rpm <12000)
		gearArea.invalidate();
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	3398      	adds	r3, #152	; 0x98
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f010 fd95 	bl	801a6d4 <_ZNK8touchgfx8Drawable10invalidateEv>
		//setGear(2);
	}
	static uint8_t lastGear = 0;
	if (telemetryData.gear != lastGear)
 8009baa:	4b8e      	ldr	r3, [pc, #568]	; (8009de4 <_ZN8MainView15handleTickEventEv+0x26c>)
 8009bac:	781a      	ldrb	r2, [r3, #0]
 8009bae:	4b8e      	ldr	r3, [pc, #568]	; (8009de8 <_ZN8MainView15handleTickEventEv+0x270>)
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d009      	beq.n	8009bca <_ZN8MainView15handleTickEventEv+0x52>
	{
		setGear(telemetryData.gear);
 8009bb6:	4b8b      	ldr	r3, [pc, #556]	; (8009de4 <_ZN8MainView15handleTickEventEv+0x26c>)
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fb1b 	bl	800a1f8 <_ZN8MainView7setGearEi>
		lastGear = telemetryData.gear;
 8009bc2:	4b88      	ldr	r3, [pc, #544]	; (8009de4 <_ZN8MainView15handleTickEventEv+0x26c>)
 8009bc4:	781a      	ldrb	r2, [r3, #0]
 8009bc6:	4b88      	ldr	r3, [pc, #544]	; (8009de8 <_ZN8MainView15handleTickEventEv+0x270>)
 8009bc8:	701a      	strb	r2, [r3, #0]
	}
	static float lastBatt = 0.0f;
	if (lastBatt != EcuData.batt)
 8009bca:	4b84      	ldr	r3, [pc, #528]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009bcc:	ed93 7a07 	vldr	s14, [r3, #28]
 8009bd0:	4b86      	ldr	r3, [pc, #536]	; (8009dec <_ZN8MainView15handleTickEventEv+0x274>)
 8009bd2:	edd3 7a00 	vldr	s15, [r3]
 8009bd6:	eeb4 7a67 	vcmp.f32	s14, s15
 8009bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bde:	d00b      	beq.n	8009bf8 <_ZN8MainView15handleTickEventEv+0x80>
	{
		setBatt(EcuData.batt);
 8009be0:	4b7e      	ldr	r3, [pc, #504]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009be2:	edd3 7a07 	vldr	s15, [r3, #28]
 8009be6:	eeb0 0a67 	vmov.f32	s0, s15
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fa16 	bl	800a01c <_ZN8MainView7setBattEf>
		lastBatt = EcuData.batt;
 8009bf0:	4b7a      	ldr	r3, [pc, #488]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009bf2:	69db      	ldr	r3, [r3, #28]
 8009bf4:	4a7d      	ldr	r2, [pc, #500]	; (8009dec <_ZN8MainView15handleTickEventEv+0x274>)
 8009bf6:	6013      	str	r3, [r2, #0]
	}
	static int16_t lastClt = 0;
	if (lastClt != EcuData.clt)
 8009bf8:	4b78      	ldr	r3, [pc, #480]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009bfa:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8009bfe:	4b7c      	ldr	r3, [pc, #496]	; (8009df0 <_ZN8MainView15handleTickEventEv+0x278>)
 8009c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d00b      	beq.n	8009c20 <_ZN8MainView15handleTickEventEv+0xa8>
	{
		setClt(EcuData.clt);
 8009c08:	4b74      	ldr	r3, [pc, #464]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009c0a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fac1 	bl	800a198 <_ZN8MainView6setCltEs>
		lastClt = EcuData.clt;
 8009c16:	4b71      	ldr	r3, [pc, #452]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009c18:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8009c1c:	4b74      	ldr	r3, [pc, #464]	; (8009df0 <_ZN8MainView15handleTickEventEv+0x278>)
 8009c1e:	801a      	strh	r2, [r3, #0]
	}
	static uint8_t lastOilPressure = 0;
	if (lastOilPressure != EcuData.oilPress)
 8009c20:	4b74      	ldr	r3, [pc, #464]	; (8009df4 <_ZN8MainView15handleTickEventEv+0x27c>)
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	ee07 3a90 	vmov	s15, r3
 8009c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c2c:	4b6b      	ldr	r3, [pc, #428]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009c2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009c32:	eeb4 7a67 	vcmp.f32	s14, s15
 8009c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3a:	d022      	beq.n	8009c82 <_ZN8MainView15handleTickEventEv+0x10a>
	{
		if (EcuData.ain2 > 0.4f)
 8009c3c:	4b67      	ldr	r3, [pc, #412]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009c3e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009c42:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8009df8 <_ZN8MainView15handleTickEventEv+0x280>
 8009c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4e:	dd08      	ble.n	8009c62 <_ZN8MainView15handleTickEventEv+0xea>
		{
			setOilPress(EcuData.oilPress);
 8009c50:	4b62      	ldr	r3, [pc, #392]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009c52:	edd3 7a03 	vldr	s15, [r3, #12]
 8009c56:	eeb0 0a67 	vmov.f32	s0, s15
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fa26 	bl	800a0ac <_ZN8MainView11setOilPressEf>
 8009c60:	e004      	b.n	8009c6c <_ZN8MainView15handleTickEventEv+0xf4>
		}
		else
		{
			setOilPress(-1.0f);
 8009c62:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fa20 	bl	800a0ac <_ZN8MainView11setOilPressEf>
		}
		lastOilPressure = EcuData.oilPress;
 8009c6c:	4b5b      	ldr	r3, [pc, #364]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009c6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c76:	edc7 7a00 	vstr	s15, [r7]
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	b2da      	uxtb	r2, r3
 8009c7e:	4b5d      	ldr	r3, [pc, #372]	; (8009df4 <_ZN8MainView15handleTickEventEv+0x27c>)
 8009c80:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t lastOilTemperature = 0;
	if (lastOilTemperature != EcuData.oilTemp)
 8009c82:	4b56      	ldr	r3, [pc, #344]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009c84:	7ada      	ldrb	r2, [r3, #11]
 8009c86:	4b5d      	ldr	r3, [pc, #372]	; (8009dfc <_ZN8MainView15handleTickEventEv+0x284>)
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d009      	beq.n	8009ca2 <_ZN8MainView15handleTickEventEv+0x12a>
	{
		setOilTemp(EcuData.oilTemp);
 8009c8e:	4b53      	ldr	r3, [pc, #332]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009c90:	7adb      	ldrb	r3, [r3, #11]
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fa4f 	bl	800a138 <_ZN8MainView10setOilTempEh>
		lastOilTemperature = EcuData.oilTemp;
 8009c9a:	4b50      	ldr	r3, [pc, #320]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009c9c:	7ada      	ldrb	r2, [r3, #11]
 8009c9e:	4b57      	ldr	r3, [pc, #348]	; (8009dfc <_ZN8MainView15handleTickEventEv+0x284>)
 8009ca0:	701a      	strb	r2, [r3, #0]
	}

	if (EcuData.oilPress <= 1.5 && EcuData.rpm > 1000 && EcuData.ain2 > 0.4f)
 8009ca2:	4b4e      	ldr	r3, [pc, #312]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009ca4:	edd3 7a03 	vldr	s15, [r3, #12]
 8009ca8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8009cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cb4:	d844      	bhi.n	8009d40 <_ZN8MainView15handleTickEventEv+0x1c8>
 8009cb6:	4b49      	ldr	r3, [pc, #292]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cbe:	d93f      	bls.n	8009d40 <_ZN8MainView15handleTickEventEv+0x1c8>
 8009cc0:	4b46      	ldr	r3, [pc, #280]	; (8009ddc <_ZN8MainView15handleTickEventEv+0x264>)
 8009cc2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009cc6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8009df8 <_ZN8MainView15handleTickEventEv+0x280>
 8009cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd2:	dd35      	ble.n	8009d40 <_ZN8MainView15handleTickEventEv+0x1c8>
	{
		static int lastChange = 0;
		if (tickCounter - lastChange > 15)
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	4b4a      	ldr	r3, [pc, #296]	; (8009e00 <_ZN8MainView15handleTickEventEv+0x288>)
 8009cd8:	4413      	add	r3, r2
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	4b49      	ldr	r3, [pc, #292]	; (8009e04 <_ZN8MainView15handleTickEventEv+0x28c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b0f      	cmp	r3, #15
 8009ce4:	dd5a      	ble.n	8009d9c <_ZN8MainView15handleTickEventEv+0x224>
		{
			alertBar1.setText("LOW OIL PRESS\n");
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	4b47      	ldr	r3, [pc, #284]	; (8009e08 <_ZN8MainView15handleTickEventEv+0x290>)
 8009cea:	4413      	add	r3, r2
 8009cec:	4947      	ldr	r1, [pc, #284]	; (8009e0c <_ZN8MainView15handleTickEventEv+0x294>)
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 fcda 	bl	800a6a8 <_ZN8alertBar7setTextEPKc>
			if (a == 0)
 8009cf4:	4b46      	ldr	r3, [pc, #280]	; (8009e10 <_ZN8MainView15handleTickEventEv+0x298>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d107      	bne.n	8009d0c <_ZN8MainView15handleTickEventEv+0x194>
			{
				alertBar1.setState(EBarState::Critical1);
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	4b42      	ldr	r3, [pc, #264]	; (8009e08 <_ZN8MainView15handleTickEventEv+0x290>)
 8009d00:	4413      	add	r3, r2
 8009d02:	2104      	movs	r1, #4
 8009d04:	4618      	mov	r0, r3
 8009d06:	f000 fc67 	bl	800a5d8 <_ZN8alertBar8setStateE9EBarState>
 8009d0a:	e006      	b.n	8009d1a <_ZN8MainView15handleTickEventEv+0x1a2>
			}
			else
			{
				alertBar1.setState(EBarState::Critical2);
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	4b3e      	ldr	r3, [pc, #248]	; (8009e08 <_ZN8MainView15handleTickEventEv+0x290>)
 8009d10:	4413      	add	r3, r2
 8009d12:	2105      	movs	r1, #5
 8009d14:	4618      	mov	r0, r3
 8009d16:	f000 fc5f 	bl	800a5d8 <_ZN8alertBar8setStateE9EBarState>
			}
			alertBar1.invalidate();
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	4b3a      	ldr	r3, [pc, #232]	; (8009e08 <_ZN8MainView15handleTickEventEv+0x290>)
 8009d1e:	4413      	add	r3, r2
 8009d20:	4618      	mov	r0, r3
 8009d22:	f010 fcd7 	bl	801a6d4 <_ZNK8touchgfx8Drawable10invalidateEv>
			a = 1 - a;
 8009d26:	4b3a      	ldr	r3, [pc, #232]	; (8009e10 <_ZN8MainView15handleTickEventEv+0x298>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f1c3 0301 	rsb	r3, r3, #1
 8009d2e:	4a38      	ldr	r2, [pc, #224]	; (8009e10 <_ZN8MainView15handleTickEventEv+0x298>)
 8009d30:	6013      	str	r3, [r2, #0]
			lastChange = tickCounter;
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	4b32      	ldr	r3, [pc, #200]	; (8009e00 <_ZN8MainView15handleTickEventEv+0x288>)
 8009d36:	4413      	add	r3, r2
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a32      	ldr	r2, [pc, #200]	; (8009e04 <_ZN8MainView15handleTickEventEv+0x28c>)
 8009d3c:	6013      	str	r3, [r2, #0]
		}
 8009d3e:	e02d      	b.n	8009d9c <_ZN8MainView15handleTickEventEv+0x224>
	}
	else if (telemetryData.gear == 7)
 8009d40:	4b28      	ldr	r3, [pc, #160]	; (8009de4 <_ZN8MainView15handleTickEventEv+0x26c>)
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b07      	cmp	r3, #7
 8009d46:	d10e      	bne.n	8009d66 <_ZN8MainView15handleTickEventEv+0x1ee>
	{
		alertBar1.setState(EBarState::Warning);
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	4b2f      	ldr	r3, [pc, #188]	; (8009e08 <_ZN8MainView15handleTickEventEv+0x290>)
 8009d4c:	4413      	add	r3, r2
 8009d4e:	2102      	movs	r1, #2
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 fc41 	bl	800a5d8 <_ZN8alertBar8setStateE9EBarState>
		alertBar1.setText("GEAR UNKNOWN");
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	4b2b      	ldr	r3, [pc, #172]	; (8009e08 <_ZN8MainView15handleTickEventEv+0x290>)
 8009d5a:	4413      	add	r3, r2
 8009d5c:	492d      	ldr	r1, [pc, #180]	; (8009e14 <_ZN8MainView15handleTickEventEv+0x29c>)
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 fca2 	bl	800a6a8 <_ZN8alertBar7setTextEPKc>
 8009d64:	e01b      	b.n	8009d9e <_ZN8MainView15handleTickEventEv+0x226>
	}
	else if (telemetryData.steeringWheelAttached == 1)
 8009d66:	4b1f      	ldr	r3, [pc, #124]	; (8009de4 <_ZN8MainView15handleTickEventEv+0x26c>)
 8009d68:	785b      	ldrb	r3, [r3, #1]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d10e      	bne.n	8009d8c <_ZN8MainView15handleTickEventEv+0x214>
	{
		alertBar1.setState(EBarState::Info);
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	4b25      	ldr	r3, [pc, #148]	; (8009e08 <_ZN8MainView15handleTickEventEv+0x290>)
 8009d72:	4413      	add	r3, r2
 8009d74:	2101      	movs	r1, #1
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 fc2e 	bl	800a5d8 <_ZN8alertBar8setStateE9EBarState>
		alertBar1.setText("STEERING WHEEL ATTACHED");
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	4b22      	ldr	r3, [pc, #136]	; (8009e08 <_ZN8MainView15handleTickEventEv+0x290>)
 8009d80:	4413      	add	r3, r2
 8009d82:	4925      	ldr	r1, [pc, #148]	; (8009e18 <_ZN8MainView15handleTickEventEv+0x2a0>)
 8009d84:	4618      	mov	r0, r3
 8009d86:	f000 fc8f 	bl	800a6a8 <_ZN8alertBar7setTextEPKc>
 8009d8a:	e008      	b.n	8009d9e <_ZN8MainView15handleTickEventEv+0x226>
	}
	else
	{
		alertBar1.setState(EBarState::Blank);
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	4b1e      	ldr	r3, [pc, #120]	; (8009e08 <_ZN8MainView15handleTickEventEv+0x290>)
 8009d90:	4413      	add	r3, r2
 8009d92:	2100      	movs	r1, #0
 8009d94:	4618      	mov	r0, r3
 8009d96:	f000 fc1f 	bl	800a5d8 <_ZN8alertBar8setStateE9EBarState>
 8009d9a:	e000      	b.n	8009d9e <_ZN8MainView15handleTickEventEv+0x226>
		}
 8009d9c:	bf00      	nop
	}

	if (telemetryData.isIntercomActive == 1)
 8009d9e:	4b11      	ldr	r3, [pc, #68]	; (8009de4 <_ZN8MainView15handleTickEventEv+0x26c>)
 8009da0:	7a1b      	ldrb	r3, [r3, #8]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d10d      	bne.n	8009dc2 <_ZN8MainView15handleTickEventEv+0x24a>
	{
		alertBar2.setState(EBarState::Info);
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	4b1c      	ldr	r3, [pc, #112]	; (8009e1c <_ZN8MainView15handleTickEventEv+0x2a4>)
 8009daa:	4413      	add	r3, r2
 8009dac:	2101      	movs	r1, #1
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 fc12 	bl	800a5d8 <_ZN8alertBar8setStateE9EBarState>
		alertBar2.setText("INTERCOM ACTIVE");
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	4b19      	ldr	r3, [pc, #100]	; (8009e1c <_ZN8MainView15handleTickEventEv+0x2a4>)
 8009db8:	4413      	add	r3, r2
 8009dba:	4919      	ldr	r1, [pc, #100]	; (8009e20 <_ZN8MainView15handleTickEventEv+0x2a8>)
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f000 fc73 	bl	800a6a8 <_ZN8alertBar7setTextEPKc>

	//setClt(EcuData.clt);
	//setBatt(EcuData.batt);
	//alertBar1.invalidate();
	//alertBar1.setText("12345678912345\n");
	tickCounter++;
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	4b0e      	ldr	r3, [pc, #56]	; (8009e00 <_ZN8MainView15handleTickEventEv+0x288>)
 8009dc6:	4413      	add	r3, r2
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	1c5a      	adds	r2, r3, #1
 8009dcc:	6879      	ldr	r1, [r7, #4]
 8009dce:	4b0c      	ldr	r3, [pc, #48]	; (8009e00 <_ZN8MainView15handleTickEventEv+0x288>)
 8009dd0:	440b      	add	r3, r1
 8009dd2:	601a      	str	r2, [r3, #0]
}
 8009dd4:	bf00      	nop
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	20056dc4 	.word	0x20056dc4
 8009de0:	20023a28 	.word	0x20023a28
 8009de4:	20056d8c 	.word	0x20056d8c
 8009de8:	20023a2a 	.word	0x20023a2a
 8009dec:	20023a2c 	.word	0x20023a2c
 8009df0:	20023a30 	.word	0x20023a30
 8009df4:	20023a32 	.word	0x20023a32
 8009df8:	3ecccccd 	.word	0x3ecccccd
 8009dfc:	20023a33 	.word	0x20023a33
 8009e00:	000226bc 	.word	0x000226bc
 8009e04:	20023a34 	.word	0x20023a34
 8009e08:	0001f514 	.word	0x0001f514
 8009e0c:	0802bdbc 	.word	0x0802bdbc
 8009e10:	20023a24 	.word	0x20023a24
 8009e14:	0802bdcc 	.word	0x0802bdcc
 8009e18:	0802bddc 	.word	0x0802bddc
 8009e1c:	0001f604 	.word	0x0001f604
 8009e20:	0802bdf4 	.word	0x0802bdf4

08009e24 <_ZN8MainView7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>:

void MainView::setText(touchgfx::TextAreaWithOneWildcard textArea,
		touchgfx::Unicode::UnicodeChar *buffer, const char inText[])
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	603b      	str	r3, [r7, #0]
	Unicode::snprintf(buffer, strlen(inText) + 1, inText);
 8009e32:	6838      	ldr	r0, [r7, #0]
 8009e34:	f7f6 fa04 	bl	8000240 <strlen>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	683a      	ldr	r2, [r7, #0]
 8009e42:	4619      	mov	r1, r3
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f012 fcc7 	bl	801c7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	//textArea.resizeToCurrentText();
	textArea.invalidate();
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f010 fc41 	bl	801a6d4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8009e52:	bf00      	nop
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
	...

08009e5c <_ZN8touchgfx8DrawableC1ERKS0_>:
class Drawable
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
 8009e66:	4a1e      	ldr	r2, [pc, #120]	; (8009ee0 <_ZN8touchgfx8DrawableC1ERKS0_+0x84>)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	601a      	str	r2, [r3, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	3304      	adds	r3, #4
 8009e72:	3204      	adds	r2, #4
 8009e74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e78:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	330c      	adds	r3, #12
 8009e82:	320c      	adds	r2, #12
 8009e84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e88:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	695a      	ldr	r2, [r3, #20]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	615a      	str	r2, [r3, #20]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	699a      	ldr	r2, [r3, #24]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	619a      	str	r2, [r3, #24]
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	69da      	ldr	r2, [r3, #28]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	61da      	str	r2, [r3, #28]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	841a      	strh	r2, [r3, #32]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	845a      	strh	r2, [r3, #34]	; 0x22
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	0802de54 	.word	0x0802de54

08009ee4 <_ZN8touchgfx6WidgetC1ERKS0_>:
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	4611      	mov	r1, r2
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7ff ffb1 	bl	8009e5c <_ZN8touchgfx8DrawableC1ERKS0_>
 8009efa:	4a04      	ldr	r2, [pc, #16]	; (8009f0c <_ZN8touchgfx6WidgetC1ERKS0_+0x28>)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4618      	mov	r0, r3
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	0802c3ec 	.word	0x0802c3ec

08009f10 <_ZN8touchgfx8TextAreaC1ERKS0_>:
class TextArea : public Widget
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	4611      	mov	r1, r2
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7ff ffdf 	bl	8009ee4 <_ZN8touchgfx6WidgetC1ERKS0_>
 8009f26:	4a19      	ldr	r2, [pc, #100]	; (8009f8c <_ZN8touchgfx8TextAreaC1ERKS0_+0x7c>)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	3328      	adds	r3, #40	; 0x28
 8009f36:	4619      	mov	r1, r3
 8009f38:	4610      	mov	r0, r2
 8009f3a:	f7fc fabd 	bl	80064b8 <_ZN8touchgfx9TypedTextC1ERKS0_>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009f44:	631a      	str	r2, [r3, #48]	; 0x30
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	869a      	strh	r2, [r3, #52]	; 0x34
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4618      	mov	r0, r3
 8009f84:	3708      	adds	r7, #8
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	0802d960 	.word	0x0802d960

08009f90 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>:
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7ff ffb5 	bl	8009f10 <_ZN8touchgfx8TextAreaC1ERKS0_>
 8009fa6:	4a06      	ldr	r2, [pc, #24]	; (8009fc0 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_+0x30>)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	0802da6c 	.word	0x0802da6c

08009fc4 <_ZN8MainView6setRPMEi>:

void MainView::setRPM(int inRPM)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b096      	sub	sp, #88	; 0x58
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
	char textBuffer[10];
	sprintf(textBuffer, "%d", inRPM);
 8009fce:	f107 030c 	add.w	r3, r7, #12
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	490f      	ldr	r1, [pc, #60]	; (800a014 <_ZN8MainView6setRPMEi+0x50>)
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f01d fe42 	bl	8027c60 <siprintf>
	setText(rpmArea, rpmAreaBuffer, textBuffer);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f503 72b2 	add.w	r2, r3, #356	; 0x164
 8009fe2:	f107 0318 	add.w	r3, r7, #24
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7ff ffd1 	bl	8009f90 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a09      	ldr	r2, [pc, #36]	; (800a018 <_ZN8MainView6setRPMEi+0x54>)
 8009ff2:	441a      	add	r2, r3
 8009ff4:	f107 030c 	add.w	r3, r7, #12
 8009ff8:	f107 0118 	add.w	r1, r7, #24
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7ff ff11 	bl	8009e24 <_ZN8MainView7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800a002:	f107 0318 	add.w	r3, r7, #24
 800a006:	4618      	mov	r0, r3
 800a008:	f7fe fbba 	bl	8008780 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 800a00c:	bf00      	nop
 800a00e:	3758      	adds	r7, #88	; 0x58
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	0802be04 	.word	0x0802be04
 800a018:	0001f778 	.word	0x0001f778

0800a01c <_ZN8MainView7setBattEf>:

void MainView::setBatt(float inBatt)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b096      	sub	sp, #88	; 0x58
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	ed87 0a00 	vstr	s0, [r7]
	char textBuffer[10];
	if (inBatt < 10.0f)
 800a028:	edd7 7a00 	vldr	s15, [r7]
 800a02c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a030:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a038:	d50b      	bpl.n	800a052 <_ZN8MainView7setBattEf+0x36>
	{
		sprintf(textBuffer, " %.1f", inBatt);
 800a03a:	edd7 7a00 	vldr	s15, [r7]
 800a03e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a042:	f107 000c 	add.w	r0, r7, #12
 800a046:	ec53 2b17 	vmov	r2, r3, d7
 800a04a:	4915      	ldr	r1, [pc, #84]	; (800a0a0 <_ZN8MainView7setBattEf+0x84>)
 800a04c:	f01d fe08 	bl	8027c60 <siprintf>
 800a050:	e00a      	b.n	800a068 <_ZN8MainView7setBattEf+0x4c>
	}
	else
	{
		sprintf(textBuffer, "%.1f", inBatt);
 800a052:	edd7 7a00 	vldr	s15, [r7]
 800a056:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a05a:	f107 000c 	add.w	r0, r7, #12
 800a05e:	ec53 2b17 	vmov	r2, r3, d7
 800a062:	4910      	ldr	r1, [pc, #64]	; (800a0a4 <_ZN8MainView7setBattEf+0x88>)
 800a064:	f01d fdfc 	bl	8027c60 <siprintf>
	}

	setText(battArea, battAreaBuffer, textBuffer);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f503 72d2 	add.w	r2, r3, #420	; 0x1a4
 800a06e:	f107 0318 	add.w	r3, r7, #24
 800a072:	4611      	mov	r1, r2
 800a074:	4618      	mov	r0, r3
 800a076:	f7ff ff8b 	bl	8009f90 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a0a      	ldr	r2, [pc, #40]	; (800a0a8 <_ZN8MainView7setBattEf+0x8c>)
 800a07e:	441a      	add	r2, r3
 800a080:	f107 030c 	add.w	r3, r7, #12
 800a084:	f107 0118 	add.w	r1, r7, #24
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7ff fecb 	bl	8009e24 <_ZN8MainView7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800a08e:	f107 0318 	add.w	r3, r7, #24
 800a092:	4618      	mov	r0, r3
 800a094:	f7fe fb74 	bl	8008780 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 800a098:	bf00      	nop
 800a09a:	3758      	adds	r7, #88	; 0x58
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	0802be08 	.word	0x0802be08
 800a0a4:	0802be10 	.word	0x0802be10
 800a0a8:	0001f78c 	.word	0x0001f78c

0800a0ac <_ZN8MainView11setOilPressEf>:

void MainView::setOilPress(float inOilPress)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b096      	sub	sp, #88	; 0x58
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	ed87 0a00 	vstr	s0, [r7]
	char textBuffer[10];
	if (inOilPress == -1.0f)
 800a0b8:	edd7 7a00 	vldr	s15, [r7]
 800a0bc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a0c0:	eef4 7a47 	vcmp.f32	s15, s14
 800a0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c8:	d107      	bne.n	800a0da <_ZN8MainView11setOilPressEf+0x2e>
	{
		sprintf(textBuffer, "%s", "---");
 800a0ca:	f107 030c 	add.w	r3, r7, #12
 800a0ce:	4a16      	ldr	r2, [pc, #88]	; (800a128 <_ZN8MainView11setOilPressEf+0x7c>)
 800a0d0:	4916      	ldr	r1, [pc, #88]	; (800a12c <_ZN8MainView11setOilPressEf+0x80>)
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f01d fdc4 	bl	8027c60 <siprintf>
 800a0d8:	e00a      	b.n	800a0f0 <_ZN8MainView11setOilPressEf+0x44>
	}
	else
	{
		sprintf(textBuffer, "%.1f", inOilPress);
 800a0da:	edd7 7a00 	vldr	s15, [r7]
 800a0de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a0e2:	f107 000c 	add.w	r0, r7, #12
 800a0e6:	ec53 2b17 	vmov	r2, r3, d7
 800a0ea:	4911      	ldr	r1, [pc, #68]	; (800a130 <_ZN8MainView11setOilPressEf+0x84>)
 800a0ec:	f01d fdb8 	bl	8027c60 <siprintf>
	}
	setText(oilPressArea, oilPressAreaBuffer, textBuffer);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f503 72f2 	add.w	r2, r3, #484	; 0x1e4
 800a0f6:	f107 0318 	add.w	r3, r7, #24
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7ff ff47 	bl	8009f90 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4a0b      	ldr	r2, [pc, #44]	; (800a134 <_ZN8MainView11setOilPressEf+0x88>)
 800a106:	441a      	add	r2, r3
 800a108:	f107 030c 	add.w	r3, r7, #12
 800a10c:	f107 0118 	add.w	r1, r7, #24
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7ff fe87 	bl	8009e24 <_ZN8MainView7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800a116:	f107 0318 	add.w	r3, r7, #24
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe fb30 	bl	8008780 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 800a120:	bf00      	nop
 800a122:	3758      	adds	r7, #88	; 0x58
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	0802be18 	.word	0x0802be18
 800a12c:	0802be1c 	.word	0x0802be1c
 800a130:	0802be10 	.word	0x0802be10
 800a134:	0001f7a0 	.word	0x0001f7a0

0800a138 <_ZN8MainView10setOilTempEh>:
void MainView::setOilTemp(uint8_t inOilTemp)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b096      	sub	sp, #88	; 0x58
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	460b      	mov	r3, r1
 800a142:	70fb      	strb	r3, [r7, #3]
	char textBuffer[10];
	sprintf(textBuffer, "%i", inOilTemp);
 800a144:	78fa      	ldrb	r2, [r7, #3]
 800a146:	f107 030c 	add.w	r3, r7, #12
 800a14a:	4910      	ldr	r1, [pc, #64]	; (800a18c <_ZN8MainView10setOilTempEh+0x54>)
 800a14c:	4618      	mov	r0, r3
 800a14e:	f01d fd87 	bl	8027c60 <siprintf>
	setText(oilTempArea, oilTempAreaBuffer, textBuffer);
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	4b0e      	ldr	r3, [pc, #56]	; (800a190 <_ZN8MainView10setOilTempEh+0x58>)
 800a156:	4413      	add	r3, r2
 800a158:	f107 0218 	add.w	r2, r7, #24
 800a15c:	4619      	mov	r1, r3
 800a15e:	4610      	mov	r0, r2
 800a160:	f7ff ff16 	bl	8009f90 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a0b      	ldr	r2, [pc, #44]	; (800a194 <_ZN8MainView10setOilTempEh+0x5c>)
 800a168:	441a      	add	r2, r3
 800a16a:	f107 030c 	add.w	r3, r7, #12
 800a16e:	f107 0118 	add.w	r1, r7, #24
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7ff fe56 	bl	8009e24 <_ZN8MainView7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800a178:	f107 0318 	add.w	r3, r7, #24
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fe faff 	bl	8008780 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 800a182:	bf00      	nop
 800a184:	3758      	adds	r7, #88	; 0x58
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	0802be20 	.word	0x0802be20
 800a190:	0001f734 	.word	0x0001f734
 800a194:	0001f7c8 	.word	0x0001f7c8

0800a198 <_ZN8MainView6setCltEs>:

void MainView::setClt(int16_t inClt)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b096      	sub	sp, #88	; 0x58
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	807b      	strh	r3, [r7, #2]
	char textBuffer[10];
	sprintf(textBuffer, "%i", inClt);
 800a1a4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a1a8:	f107 030c 	add.w	r3, r7, #12
 800a1ac:	490f      	ldr	r1, [pc, #60]	; (800a1ec <_ZN8MainView6setCltEs+0x54>)
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f01d fd56 	bl	8027c60 <siprintf>
	setText(cltArea, cltAreaBuffer, textBuffer);
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	4b0e      	ldr	r3, [pc, #56]	; (800a1f0 <_ZN8MainView6setCltEs+0x58>)
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f107 0218 	add.w	r2, r7, #24
 800a1be:	4619      	mov	r1, r3
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	f7ff fee5 	bl	8009f90 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a0a      	ldr	r2, [pc, #40]	; (800a1f4 <_ZN8MainView6setCltEs+0x5c>)
 800a1ca:	441a      	add	r2, r3
 800a1cc:	f107 030c 	add.w	r3, r7, #12
 800a1d0:	f107 0118 	add.w	r1, r7, #24
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7ff fe25 	bl	8009e24 <_ZN8MainView7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800a1da:	f107 0318 	add.w	r3, r7, #24
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7fe face 	bl	8008780 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 800a1e4:	bf00      	nop
 800a1e6:	3758      	adds	r7, #88	; 0x58
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	0802be20 	.word	0x0802be20
 800a1f0:	0001f6f4 	.word	0x0001f6f4
 800a1f4:	0001f7b4 	.word	0x0001f7b4

0800a1f8 <_ZN8MainView7setGearEi>:

void MainView::setGear(int inGear)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b0a6      	sub	sp, #152	; 0x98
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
	char textBuffer[10];
	if (inGear == 0)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d11f      	bne.n	800a248 <_ZN8MainView7setGearEi+0x50>
	{
		sprintf(textBuffer, "%s", "N");
 800a208:	f107 030c 	add.w	r3, r7, #12
 800a20c:	4a21      	ldr	r2, [pc, #132]	; (800a294 <_ZN8MainView7setGearEi+0x9c>)
 800a20e:	4922      	ldr	r1, [pc, #136]	; (800a298 <_ZN8MainView7setGearEi+0xa0>)
 800a210:	4618      	mov	r0, r3
 800a212:	f01d fd25 	bl	8027c60 <siprintf>
		setText(gearArea, gearAreaBuffer, textBuffer);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800a21c:	f107 0318 	add.w	r3, r7, #24
 800a220:	4611      	mov	r1, r2
 800a222:	4618      	mov	r0, r3
 800a224:	f7ff feb4 	bl	8009f90 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a1c      	ldr	r2, [pc, #112]	; (800a29c <_ZN8MainView7setGearEi+0xa4>)
 800a22c:	441a      	add	r2, r3
 800a22e:	f107 030c 	add.w	r3, r7, #12
 800a232:	f107 0118 	add.w	r1, r7, #24
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f7ff fdf4 	bl	8009e24 <_ZN8MainView7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800a23c:	f107 0318 	add.w	r3, r7, #24
 800a240:	4618      	mov	r0, r3
 800a242:	f7fe fa9d 	bl	8008780 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
	{
		sprintf(textBuffer, "%d", inGear);
		setText(gearArea, gearAreaBuffer, textBuffer);
	}

}
 800a246:	e021      	b.n	800a28c <_ZN8MainView7setGearEi+0x94>
	else if (inGear < 7)
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	2b06      	cmp	r3, #6
 800a24c:	dc1e      	bgt.n	800a28c <_ZN8MainView7setGearEi+0x94>
		sprintf(textBuffer, "%d", inGear);
 800a24e:	f107 030c 	add.w	r3, r7, #12
 800a252:	683a      	ldr	r2, [r7, #0]
 800a254:	4912      	ldr	r1, [pc, #72]	; (800a2a0 <_ZN8MainView7setGearEi+0xa8>)
 800a256:	4618      	mov	r0, r3
 800a258:	f01d fd02 	bl	8027c60 <siprintf>
		setText(gearArea, gearAreaBuffer, textBuffer);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800a262:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a266:	4611      	mov	r1, r2
 800a268:	4618      	mov	r0, r3
 800a26a:	f7ff fe91 	bl	8009f90 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4a0a      	ldr	r2, [pc, #40]	; (800a29c <_ZN8MainView7setGearEi+0xa4>)
 800a272:	441a      	add	r2, r3
 800a274:	f107 030c 	add.w	r3, r7, #12
 800a278:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7ff fdd1 	bl	8009e24 <_ZN8MainView7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800a282:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a286:	4618      	mov	r0, r3
 800a288:	f7fe fa7a 	bl	8008780 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 800a28c:	bf00      	nop
 800a28e:	3798      	adds	r7, #152	; 0x98
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	0802be24 	.word	0x0802be24
 800a298:	0802be1c 	.word	0x0802be1c
 800a29c:	0001f774 	.word	0x0001f774
 800a2a0:	0802be04 	.word	0x0802be04

0800a2a4 <_Z41__static_initialization_and_destruction_0ii>:
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b092      	sub	sp, #72	; 0x48
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	f040 8114 	bne.w	800a4de <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	f040 810e 	bne.w	800a4de <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2d4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a2d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a2dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a2e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a2ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a2f0:	041b      	lsls	r3, r3, #16
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a2f8:	021b      	lsls	r3, r3, #8
 800a2fa:	431a      	orrs	r2, r3
 800a2fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a300:	4313      	orrs	r3, r2
 800a302:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a306:	f107 0320 	add.w	r3, r7, #32
 800a30a:	4611      	mov	r1, r2
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fa f813 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800a312:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800a314:	bf00      	nop
 800a316:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 800a318:	4b73      	ldr	r3, [pc, #460]	; (800a4e8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800a31a:	601a      	str	r2, [r3, #0]
 800a31c:	23ff      	movs	r3, #255	; 0xff
 800a31e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a322:	2300      	movs	r3, #0
 800a324:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a328:	2300      	movs	r3, #0
 800a32a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800a32e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a332:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800a336:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a33a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a33e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a342:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a346:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a34a:	041b      	lsls	r3, r3, #16
 800a34c:	461a      	mov	r2, r3
 800a34e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a352:	021b      	lsls	r3, r3, #8
 800a354:	431a      	orrs	r2, r3
 800a356:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a35a:	4313      	orrs	r3, r2
 800a35c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a360:	f107 031c 	add.w	r3, r7, #28
 800a364:	4611      	mov	r1, r2
 800a366:	4618      	mov	r0, r3
 800a368:	f7f9 ffe6 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800a36c:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800a36e:	bf00      	nop
 800a370:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800a372:	4b5e      	ldr	r3, [pc, #376]	; (800a4ec <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800a374:	601a      	str	r2, [r3, #0]
 800a376:	2300      	movs	r3, #0
 800a378:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800a37c:	23ff      	movs	r3, #255	; 0xff
 800a37e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800a382:	2300      	movs	r3, #0
 800a384:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a388:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800a38c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a390:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a394:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800a398:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a39c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a3a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a3a4:	041b      	lsls	r3, r3, #16
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a3ac:	021b      	lsls	r3, r3, #8
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a3ba:	f107 0318 	add.w	r3, r7, #24
 800a3be:	4611      	mov	r1, r2
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7f9 ffb9 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800a3c6:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 800a3c8:	bf00      	nop
 800a3ca:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 800a3cc:	4b48      	ldr	r3, [pc, #288]	; (800a4f0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800a3dc:	23ff      	movs	r3, #255	; 0xff
 800a3de:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800a3e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a3e6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800a3ea:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a3ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a3f2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a3f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a3fa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a3fe:	041b      	lsls	r3, r3, #16
 800a400:	461a      	mov	r2, r3
 800a402:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a406:	021b      	lsls	r3, r3, #8
 800a408:	431a      	orrs	r2, r3
 800a40a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a40e:	4313      	orrs	r3, r2
 800a410:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a414:	f107 0314 	add.w	r3, r7, #20
 800a418:	4611      	mov	r1, r2
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7f9 ff8c 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800a420:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800a422:	bf00      	nop
 800a424:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800a426:	4b33      	ldr	r3, [pc, #204]	; (800a4f4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800a428:	601a      	str	r2, [r3, #0]
 800a42a:	23f7      	movs	r3, #247	; 0xf7
 800a42c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800a430:	234c      	movs	r3, #76	; 0x4c
 800a432:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800a436:	2302      	movs	r3, #2
 800a438:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a43c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a440:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a444:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a448:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800a44c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a450:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a454:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a458:	041b      	lsls	r3, r3, #16
 800a45a:	461a      	mov	r2, r3
 800a45c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a460:	021b      	lsls	r3, r3, #8
 800a462:	431a      	orrs	r2, r3
 800a464:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a468:	4313      	orrs	r3, r2
 800a46a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a46e:	f107 0310 	add.w	r3, r7, #16
 800a472:	4611      	mov	r1, r2
 800a474:	4618      	mov	r0, r3
 800a476:	f7f9 ff5f 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800a47a:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 800a47c:	bf00      	nop
 800a47e:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 800a480:	4b1d      	ldr	r3, [pc, #116]	; (800a4f8 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	23f7      	movs	r3, #247	; 0xf7
 800a486:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a48a:	23d2      	movs	r3, #210	; 0xd2
 800a48c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800a490:	2302      	movs	r3, #2
 800a492:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800a496:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a49a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800a49e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4a6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a4aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a4ae:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a4b2:	041b      	lsls	r3, r3, #16
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a4ba:	021b      	lsls	r3, r3, #8
 800a4bc:	431a      	orrs	r2, r3
 800a4be:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a4c8:	f107 030c 	add.w	r3, r7, #12
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7f9 ff32 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800a4d4:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800a4d6:	bf00      	nop
 800a4d8:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800a4da:	4b08      	ldr	r3, [pc, #32]	; (800a4fc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	bf00      	nop
 800a4e0:	3748      	adds	r7, #72	; 0x48
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	20023a0c 	.word	0x20023a0c
 800a4ec:	20023a10 	.word	0x20023a10
 800a4f0:	20023a14 	.word	0x20023a14
 800a4f4:	20023a18 	.word	0x20023a18
 800a4f8:	20023a1c 	.word	0x20023a1c
 800a4fc:	20023a20 	.word	0x20023a20

0800a500 <_GLOBAL__sub_I__ZN8MainViewC2Ev>:
 800a500:	b580      	push	{r7, lr}
 800a502:	af00      	add	r7, sp, #0
 800a504:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a508:	2001      	movs	r0, #1
 800a50a:	f7ff fecb 	bl	800a2a4 <_Z41__static_initialization_and_destruction_0ii>
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	601a      	str	r2, [r3, #0]
{

}
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4618      	mov	r0, r3
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <_ZN5Model4tickEv>:

void Model::tick()
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]

}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <_ZN8alertBarC1Ev>:
#include <gui/containers/alertBar.hpp>
#include <string.h>

alertBar::alertBar()
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fe fe3c 	bl	80091c8 <_ZN12alertBarBaseC1Ev>
 800a550:	4a10      	ldr	r2, [pc, #64]	; (800a594 <_ZN8alertBarC1Ev+0x54>)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	601a      	str	r2, [r3, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a0f      	ldr	r2, [pc, #60]	; (800a598 <_ZN8alertBarC1Ev+0x58>)
 800a55a:	6812      	ldr	r2, [r2, #0]
 800a55c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a0e      	ldr	r2, [pc, #56]	; (800a59c <_ZN8alertBarC1Ev+0x5c>)
 800a564:	6812      	ldr	r2, [r2, #0]
 800a566:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4a0c      	ldr	r2, [pc, #48]	; (800a5a0 <_ZN8alertBarC1Ev+0x60>)
 800a56e:	6812      	ldr	r2, [r2, #0]
 800a570:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a0b      	ldr	r2, [pc, #44]	; (800a5a4 <_ZN8alertBarC1Ev+0x64>)
 800a578:	6812      	ldr	r2, [r2, #0]
 800a57a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a09      	ldr	r2, [pc, #36]	; (800a5a8 <_ZN8alertBarC1Ev+0x68>)
 800a582:	6812      	ldr	r2, [r2, #0]
 800a584:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
{
}
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	0802c77c 	.word	0x0802c77c
 800a598:	20023a44 	.word	0x20023a44
 800a59c:	20023a48 	.word	0x20023a48
 800a5a0:	20023a3c 	.word	0x20023a3c
 800a5a4:	20023a4c 	.word	0x20023a4c
 800a5a8:	20023a40 	.word	0x20023a40

0800a5ac <_ZN8alertBar10initializeEv>:

void alertBar::initialize()
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
    alertBarBase::initialize();
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7fe fee2 	bl	8009380 <_ZN12alertBarBase10initializeEv>
    frontText.setWildcard(frontTextBuffer);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	33b4      	adds	r3, #180	; 0xb4
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	f7fc fd47 	bl	800705c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
}
 800a5ce:	bf00      	nop
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <_ZN8alertBar8setStateE9EBarState>:

void alertBar::setState(EBarState inState)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	2b06      	cmp	r3, #6
 800a5e6:	d84d      	bhi.n	800a684 <_ZN8alertBar8setStateE9EBarState+0xac>
 800a5e8:	a201      	add	r2, pc, #4	; (adr r2, 800a5f0 <_ZN8alertBar8setStateE9EBarState+0x18>)
 800a5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ee:	bf00      	nop
 800a5f0:	0800a60d 	.word	0x0800a60d
 800a5f4:	0800a625 	.word	0x0800a625
 800a5f8:	0800a635 	.word	0x0800a635
 800a5fc:	0800a645 	.word	0x0800a645
 800a600:	0800a655 	.word	0x0800a655
 800a604:	0800a665 	.word	0x0800a665
 800a608:	0800a675 	.word	0x0800a675
    switch (inState)
    {
    case EBarState::Blank:
    	bgBox.setColor(colors::blue);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	332c      	adds	r3, #44	; 0x2c
 800a610:	4a1f      	ldr	r2, [pc, #124]	; (800a690 <_ZN8alertBar8setStateE9EBarState+0xb8>)
 800a612:	6811      	ldr	r1, [r2, #0]
 800a614:	4618      	mov	r0, r3
 800a616:	f7fb fe93 	bl	8006340 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    	setText("");
 800a61a:	491e      	ldr	r1, [pc, #120]	; (800a694 <_ZN8alertBar8setStateE9EBarState+0xbc>)
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 f843 	bl	800a6a8 <_ZN8alertBar7setTextEPKc>
    	break;
 800a622:	e030      	b.n	800a686 <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Info:
        bgBox.setColor(colors::green);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	332c      	adds	r3, #44	; 0x2c
 800a628:	4a1b      	ldr	r2, [pc, #108]	; (800a698 <_ZN8alertBar8setStateE9EBarState+0xc0>)
 800a62a:	6811      	ldr	r1, [r2, #0]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fb fe87 	bl	8006340 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 800a632:	e028      	b.n	800a686 <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Warning:
        bgBox.setColor(colors::orange);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	332c      	adds	r3, #44	; 0x2c
 800a638:	4a18      	ldr	r2, [pc, #96]	; (800a69c <_ZN8alertBar8setStateE9EBarState+0xc4>)
 800a63a:	6811      	ldr	r1, [r2, #0]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7fb fe7f 	bl	8006340 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 800a642:	e020      	b.n	800a686 <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Fault:
        bgBox.setColor(colors::red);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	332c      	adds	r3, #44	; 0x2c
 800a648:	4a15      	ldr	r2, [pc, #84]	; (800a6a0 <_ZN8alertBar8setStateE9EBarState+0xc8>)
 800a64a:	6811      	ldr	r1, [r2, #0]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fb fe77 	bl	8006340 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 800a652:	e018      	b.n	800a686 <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Critical1:
    	bgBox.setColor(colors::red);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	332c      	adds	r3, #44	; 0x2c
 800a658:	4a11      	ldr	r2, [pc, #68]	; (800a6a0 <_ZN8alertBar8setStateE9EBarState+0xc8>)
 800a65a:	6811      	ldr	r1, [r2, #0]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fb fe6f 	bl	8006340 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    	break;
 800a662:	e010      	b.n	800a686 <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Critical2:
    	bgBox.setColor(colors::yellow);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	332c      	adds	r3, #44	; 0x2c
 800a668:	4a0e      	ldr	r2, [pc, #56]	; (800a6a4 <_ZN8alertBar8setStateE9EBarState+0xcc>)
 800a66a:	6811      	ldr	r1, [r2, #0]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fb fe67 	bl	8006340 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    	break;
 800a672:	e008      	b.n	800a686 <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::News:
        bgBox.setColor(colors::blue);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	332c      	adds	r3, #44	; 0x2c
 800a678:	4a05      	ldr	r2, [pc, #20]	; (800a690 <_ZN8alertBar8setStateE9EBarState+0xb8>)
 800a67a:	6811      	ldr	r1, [r2, #0]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fb fe5f 	bl	8006340 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 800a682:	e000      	b.n	800a686 <_ZN8alertBar8setStateE9EBarState+0xae>

    default:
        break;
 800a684:	bf00      	nop
    }
}
 800a686:	bf00      	nop
 800a688:	3708      	adds	r7, #8
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	20023a44 	.word	0x20023a44
 800a694:	0802be28 	.word	0x0802be28
 800a698:	20023a40 	.word	0x20023a40
 800a69c:	20023a48 	.word	0x20023a48
 800a6a0:	20023a3c 	.word	0x20023a3c
 800a6a4:	20023a4c 	.word	0x20023a4c

0800a6a8 <_ZN8alertBar7setTextEPKc>:

void alertBar::setText(const char inText[])
{
 800a6a8:	b590      	push	{r4, r7, lr}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
    Unicode::snprintf(frontTextBuffer, strlen(inText) + 1, inText);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 800a6b8:	6838      	ldr	r0, [r7, #0]
 800a6ba:	f7f5 fdc1 	bl	8000240 <strlen>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	683a      	ldr	r2, [r7, #0]
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f012 f884 	bl	801c7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    //frontText.resizeToCurrentText();
    frontText.invalidate();
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	3360      	adds	r3, #96	; 0x60
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f00f fffd 	bl	801a6d4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800a6da:	bf00      	nop
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd90      	pop	{r4, r7, pc}
	...

0800a6e4 <_Z41__static_initialization_and_destruction_0ii>:
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b092      	sub	sp, #72	; 0x48
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	f040 8114 	bne.w	800a91e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	f040 810e 	bne.w	800a91e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800a702:	2300      	movs	r3, #0
 800a704:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800a708:	2300      	movs	r3, #0
 800a70a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800a70e:	2300      	movs	r3, #0
 800a710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a714:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a718:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a71c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a720:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a728:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a72c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a730:	041b      	lsls	r3, r3, #16
 800a732:	461a      	mov	r2, r3
 800a734:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a738:	021b      	lsls	r3, r3, #8
 800a73a:	431a      	orrs	r2, r3
 800a73c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a740:	4313      	orrs	r3, r2
 800a742:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a746:	f107 0320 	add.w	r3, r7, #32
 800a74a:	4611      	mov	r1, r2
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7f9 fdf3 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800a752:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800a754:	bf00      	nop
 800a756:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 800a758:	4b73      	ldr	r3, [pc, #460]	; (800a928 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	23ff      	movs	r3, #255	; 0xff
 800a75e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a762:	2300      	movs	r3, #0
 800a764:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a768:	2300      	movs	r3, #0
 800a76a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800a76e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a772:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800a776:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a77a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a77e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a782:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a786:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a78a:	041b      	lsls	r3, r3, #16
 800a78c:	461a      	mov	r2, r3
 800a78e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a792:	021b      	lsls	r3, r3, #8
 800a794:	431a      	orrs	r2, r3
 800a796:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a79a:	4313      	orrs	r3, r2
 800a79c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a7a0:	f107 031c 	add.w	r3, r7, #28
 800a7a4:	4611      	mov	r1, r2
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7f9 fdc6 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800a7ac:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800a7ae:	bf00      	nop
 800a7b0:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800a7b2:	4b5e      	ldr	r3, [pc, #376]	; (800a92c <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800a7b4:	601a      	str	r2, [r3, #0]
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800a7bc:	23ff      	movs	r3, #255	; 0xff
 800a7be:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7c8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800a7cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a7d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a7d4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800a7d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a7dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a7e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a7e4:	041b      	lsls	r3, r3, #16
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a7ec:	021b      	lsls	r3, r3, #8
 800a7ee:	431a      	orrs	r2, r3
 800a7f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a7fa:	f107 0318 	add.w	r3, r7, #24
 800a7fe:	4611      	mov	r1, r2
 800a800:	4618      	mov	r0, r3
 800a802:	f7f9 fd99 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800a806:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 800a808:	bf00      	nop
 800a80a:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 800a80c:	4b48      	ldr	r3, [pc, #288]	; (800a930 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800a80e:	601a      	str	r2, [r3, #0]
 800a810:	2300      	movs	r3, #0
 800a812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a816:	2300      	movs	r3, #0
 800a818:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800a81c:	23ff      	movs	r3, #255	; 0xff
 800a81e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800a822:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a826:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800a82a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a82e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a832:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a836:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a83a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a83e:	041b      	lsls	r3, r3, #16
 800a840:	461a      	mov	r2, r3
 800a842:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a846:	021b      	lsls	r3, r3, #8
 800a848:	431a      	orrs	r2, r3
 800a84a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a84e:	4313      	orrs	r3, r2
 800a850:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a854:	f107 0314 	add.w	r3, r7, #20
 800a858:	4611      	mov	r1, r2
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7f9 fd6c 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800a860:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800a862:	bf00      	nop
 800a864:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800a866:	4b33      	ldr	r3, [pc, #204]	; (800a934 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800a868:	601a      	str	r2, [r3, #0]
 800a86a:	23f7      	movs	r3, #247	; 0xf7
 800a86c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800a870:	234c      	movs	r3, #76	; 0x4c
 800a872:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800a876:	2302      	movs	r3, #2
 800a878:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a87c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a880:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a884:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a888:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800a88c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a890:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a894:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a898:	041b      	lsls	r3, r3, #16
 800a89a:	461a      	mov	r2, r3
 800a89c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a8a0:	021b      	lsls	r3, r3, #8
 800a8a2:	431a      	orrs	r2, r3
 800a8a4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a8ae:	f107 0310 	add.w	r3, r7, #16
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7f9 fd3f 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800a8ba:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 800a8bc:	bf00      	nop
 800a8be:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 800a8c0:	4b1d      	ldr	r3, [pc, #116]	; (800a938 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800a8c2:	601a      	str	r2, [r3, #0]
 800a8c4:	23f7      	movs	r3, #247	; 0xf7
 800a8c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a8ca:	23d2      	movs	r3, #210	; 0xd2
 800a8cc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800a8d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a8da:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800a8de:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8e6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a8ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a8ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a8f2:	041b      	lsls	r3, r3, #16
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a8fa:	021b      	lsls	r3, r3, #8
 800a8fc:	431a      	orrs	r2, r3
 800a8fe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a902:	4313      	orrs	r3, r2
 800a904:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a908:	f107 030c 	add.w	r3, r7, #12
 800a90c:	4611      	mov	r1, r2
 800a90e:	4618      	mov	r0, r3
 800a910:	f7f9 fd12 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800a914:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800a916:	bf00      	nop
 800a918:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800a91a:	4b08      	ldr	r3, [pc, #32]	; (800a93c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800a91c:	601a      	str	r2, [r3, #0]
 800a91e:	bf00      	nop
 800a920:	3748      	adds	r7, #72	; 0x48
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	20023a38 	.word	0x20023a38
 800a92c:	20023a3c 	.word	0x20023a3c
 800a930:	20023a40 	.word	0x20023a40
 800a934:	20023a44 	.word	0x20023a44
 800a938:	20023a48 	.word	0x20023a48
 800a93c:	20023a4c 	.word	0x20023a4c

0800a940 <_GLOBAL__sub_I__ZN8alertBarC2Ev>:
 800a940:	b580      	push	{r7, lr}
 800a942:	af00      	add	r7, sp, #0
 800a944:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a948:	2001      	movs	r0, #1
 800a94a:	f7ff fecb 	bl	800a6e4 <_Z41__static_initialization_and_destruction_0ii>
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <_ZN7tempBoxC1Ev>:
#include <gui/containers/tempBox.hpp>
#include <cmath>

tempBox::tempBox()
 800a950:	b5b0      	push	{r4, r5, r7, lr}
 800a952:	b088      	sub	sp, #32
 800a954:	af02      	add	r7, sp, #8
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fe fd1a 	bl	8009394 <_ZN11tempBoxBaseC1Ev>
 800a960:	4a6a      	ldr	r2, [pc, #424]	; (800ab0c <_ZN7tempBoxC1Ev+0x1bc>)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	601a      	str	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	22dc      	movs	r2, #220	; 0xdc
 800a972:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 800a97c:	24db      	movs	r4, #219	; 0xdb
 800a97e:	461d      	mov	r5, r3
 800a980:	2c00      	cmp	r4, #0
 800a982:	db05      	blt.n	800a990 <_ZN7tempBoxC1Ev+0x40>
 800a984:	4628      	mov	r0, r5
 800a986:	f00c fc95 	bl	80172b4 <_ZN8touchgfx4LineC1Ev>
 800a98a:	3574      	adds	r5, #116	; 0x74
 800a98c:	3c01      	subs	r4, #1
 800a98e:	e7f7      	b.n	800a980 <_ZN7tempBoxC1Ev+0x30>
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	f646 031c 	movw	r3, #26652	; 0x681c
 800a996:	4413      	add	r3, r2
 800a998:	24db      	movs	r4, #219	; 0xdb
 800a99a:	461d      	mov	r5, r3
 800a99c:	2c00      	cmp	r4, #0
 800a99e:	db0c      	blt.n	800a9ba <_ZN7tempBoxC1Ev+0x6a>
 800a9a0:	f107 0308 	add.w	r3, r7, #8
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7f9 fcc6 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800a9ac:	68b9      	ldr	r1, [r7, #8]
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	f7fc fc6c 	bl	800728c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 800a9b4:	3518      	adds	r5, #24
 800a9b6:	3c01      	subs	r4, #1
 800a9b8:	e7f0      	b.n	800a99c <_ZN7tempBoxC1Ev+0x4c>
{
    for(int i=0; i < 220; i++)
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	617b      	str	r3, [r7, #20]
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2bdb      	cmp	r3, #219	; 0xdb
 800a9c2:	f300 809e 	bgt.w	800ab02 <_ZN7tempBoxC1Ev+0x1b2>
    {
        lines[i].setPosition(0,0,220,60);
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	2274      	movs	r2, #116	; 0x74
 800a9ca:	fb02 f303 	mul.w	r3, r2, r3
 800a9ce:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	1d18      	adds	r0, r3, #4
 800a9d8:	233c      	movs	r3, #60	; 0x3c
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	23dc      	movs	r3, #220	; 0xdc
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	f7fb fa80 	bl	8005ee6 <_ZN8touchgfx8Drawable11setPositionEssss>
        linesPainter[i].setColor(touchgfx::Color::getColorFromRGB(10 ,255, 0));
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	005b      	lsls	r3, r3, #1
 800a9ec:	4413      	add	r3, r2
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	f646 0218 	movw	r2, #26648	; 0x6818
 800a9f4:	441a      	add	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	1d1c      	adds	r4, r3, #4
 800a9fc:	230a      	movs	r3, #10
 800a9fe:	74fb      	strb	r3, [r7, #19]
 800aa00:	23ff      	movs	r3, #255	; 0xff
 800aa02:	74bb      	strb	r3, [r7, #18]
 800aa04:	2300      	movs	r3, #0
 800aa06:	747b      	strb	r3, [r7, #17]
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800aa08:	7cfb      	ldrb	r3, [r7, #19]
 800aa0a:	041b      	lsls	r3, r3, #16
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	7cbb      	ldrb	r3, [r7, #18]
 800aa10:	021b      	lsls	r3, r3, #8
 800aa12:	431a      	orrs	r2, r3
 800aa14:	7c7b      	ldrb	r3, [r7, #17]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800aa1c:	f107 030c 	add.w	r3, r7, #12
 800aa20:	4611      	mov	r1, r2
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7f9 fc88 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f7fc fc4d 	bl	80072cc <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
        lines[i].setPainter(linesPainter[i]);
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	2274      	movs	r2, #116	; 0x74
 800aa36:	fb02 f303 	mul.w	r3, r2, r3
 800aa3a:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	4413      	add	r3, r2
 800aa42:	1d18      	adds	r0, r3, #4
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	2174      	movs	r1, #116	; 0x74
 800aa4a:	fb01 f303 	mul.w	r3, r1, r3
 800aa4e:	4413      	add	r3, r2
 800aa50:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	335c      	adds	r3, #92	; 0x5c
 800aa58:	681c      	ldr	r4, [r3, #0]
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	005b      	lsls	r3, r3, #1
 800aa60:	4413      	add	r3, r2
 800aa62:	00db      	lsls	r3, r3, #3
 800aa64:	f646 0218 	movw	r2, #26648	; 0x6818
 800aa68:	441a      	add	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	3304      	adds	r3, #4
 800aa70:	4619      	mov	r1, r3
 800aa72:	47a0      	blx	r4
        lines[i].setStart(i,0);
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	2274      	movs	r2, #116	; 0x74
 800aa78:	fb02 f303 	mul.w	r3, r2, r3
 800aa7c:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	4413      	add	r3, r2
 800aa84:	3304      	adds	r3, #4
 800aa86:	2200      	movs	r2, #0
 800aa88:	6979      	ldr	r1, [r7, #20]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fd fc80 	bl	8008390 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
        lines[i].setEnd(i,60);
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2274      	movs	r2, #116	; 0x74
 800aa94:	fb02 f303 	mul.w	r3, r2, r3
 800aa98:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	223c      	movs	r2, #60	; 0x3c
 800aaa4:	6979      	ldr	r1, [r7, #20]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fd fc98 	bl	80083dc <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
        lines[i].setLineWidth(1);
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	2274      	movs	r2, #116	; 0x74
 800aab0:	fb02 f303 	mul.w	r3, r2, r3
 800aab4:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	4413      	add	r3, r2
 800aabc:	3304      	adds	r3, #4
 800aabe:	2101      	movs	r1, #1
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fd fcb1 	bl	8008428 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
        lines[i].setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	2274      	movs	r2, #116	; 0x74
 800aaca:	fb02 f303 	mul.w	r3, r2, r3
 800aace:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	4413      	add	r3, r2
 800aad6:	3304      	adds	r3, #4
 800aad8:	2101      	movs	r1, #1
 800aada:	4618      	mov	r0, r3
 800aadc:	f00c fd30 	bl	8017540 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
        add(lines[i]);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2274      	movs	r2, #116	; 0x74
 800aae6:	fb02 f303 	mul.w	r3, r2, r3
 800aaea:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	f00a ffe9 	bl	8015acc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for(int i=0; i < 220; i++)
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	3301      	adds	r3, #1
 800aafe:	617b      	str	r3, [r7, #20]
 800ab00:	e75d      	b.n	800a9be <_ZN7tempBoxC1Ev+0x6e>
    }

}
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4618      	mov	r0, r3
 800ab06:	3718      	adds	r7, #24
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bdb0      	pop	{r4, r5, r7, pc}
 800ab0c:	0802c808 	.word	0x0802c808

0800ab10 <_ZN7tempBox10initializeEv>:

void tempBox::initialize()
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
    tempBoxBase::initialize();
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fe fd1a 	bl	8009554 <_ZN11tempBoxBase10initializeEv>
    tempValues[0] = 25;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2219      	movs	r2, #25
 800ab24:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    tempValues[1] = 25;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2219      	movs	r2, #25
 800ab2c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    tempValues[2] = 25;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2219      	movs	r2, #25
 800ab34:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    tempValues[3] = 25;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2219      	movs	r2, #25
 800ab3c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    tempValues[4] = 25;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2219      	movs	r2, #25
 800ab44:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    tempValues[5]= 25;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2219      	movs	r2, #25
 800ab4c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    numberOfValues = 5;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2205      	movs	r2, #5
 800ab54:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
}
 800ab58:	bf00      	nop
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <_Z41__static_initialization_and_destruction_0ii>:
        float endValue = lerp(tempValues[kFloor], tempValues[kCeil], alpha);
        
        const colortype tempColor = mapTemp(endValue);
        linesPainter[i].setColor(tempColor);
    }
}
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b092      	sub	sp, #72	; 0x48
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	f040 8114 	bne.w	800ad9a <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	f040 810e 	bne.w	800ad9a <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800ab84:	2300      	movs	r3, #0
 800ab86:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab90:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ab94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ab98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800aba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aba4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800aba8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800abac:	041b      	lsls	r3, r3, #16
 800abae:	461a      	mov	r2, r3
 800abb0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800abb4:	021b      	lsls	r3, r3, #8
 800abb6:	431a      	orrs	r2, r3
 800abb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800abbc:	4313      	orrs	r3, r2
 800abbe:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800abc2:	f107 0320 	add.w	r3, r7, #32
 800abc6:	4611      	mov	r1, r2
 800abc8:	4618      	mov	r0, r3
 800abca:	f7f9 fbb5 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800abce:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800abd0:	bf00      	nop
 800abd2:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 800abd4:	4b73      	ldr	r3, [pc, #460]	; (800ada4 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800abd6:	601a      	str	r2, [r3, #0]
 800abd8:	23ff      	movs	r3, #255	; 0xff
 800abda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800abde:	2300      	movs	r3, #0
 800abe0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800abe4:	2300      	movs	r3, #0
 800abe6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800abea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800abf2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800abf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abfa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800abfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800ac02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ac06:	041b      	lsls	r3, r3, #16
 800ac08:	461a      	mov	r2, r3
 800ac0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac0e:	021b      	lsls	r3, r3, #8
 800ac10:	431a      	orrs	r2, r3
 800ac12:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800ac16:	4313      	orrs	r3, r2
 800ac18:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ac1c:	f107 031c 	add.w	r3, r7, #28
 800ac20:	4611      	mov	r1, r2
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7f9 fb88 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800ac28:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800ac2a:	bf00      	nop
 800ac2c:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800ac2e:	4b5e      	ldr	r3, [pc, #376]	; (800ada8 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800ac30:	601a      	str	r2, [r3, #0]
 800ac32:	2300      	movs	r3, #0
 800ac34:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800ac38:	23ff      	movs	r3, #255	; 0xff
 800ac3a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac44:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ac48:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ac4c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ac50:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800ac54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ac58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800ac5c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac60:	041b      	lsls	r3, r3, #16
 800ac62:	461a      	mov	r2, r3
 800ac64:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800ac68:	021b      	lsls	r3, r3, #8
 800ac6a:	431a      	orrs	r2, r3
 800ac6c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ac70:	4313      	orrs	r3, r2
 800ac72:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ac76:	f107 0318 	add.w	r3, r7, #24
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7f9 fb5b 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800ac82:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 800ac84:	bf00      	nop
 800ac86:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 800ac88:	4b48      	ldr	r3, [pc, #288]	; (800adac <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800ac8a:	601a      	str	r2, [r3, #0]
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ac92:	2300      	movs	r3, #0
 800ac94:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800ac98:	23ff      	movs	r3, #255	; 0xff
 800ac9a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800ac9e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aca2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800aca6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800acaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800acae:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800acb2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800acb6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800acba:	041b      	lsls	r3, r3, #16
 800acbc:	461a      	mov	r2, r3
 800acbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800acc2:	021b      	lsls	r3, r3, #8
 800acc4:	431a      	orrs	r2, r3
 800acc6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800acca:	4313      	orrs	r3, r2
 800accc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800acd0:	f107 0314 	add.w	r3, r7, #20
 800acd4:	4611      	mov	r1, r2
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7f9 fb2e 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800acdc:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800acde:	bf00      	nop
 800ace0:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800ace2:	4b33      	ldr	r3, [pc, #204]	; (800adb0 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800ace4:	601a      	str	r2, [r3, #0]
 800ace6:	23f7      	movs	r3, #247	; 0xf7
 800ace8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800acec:	234c      	movs	r3, #76	; 0x4c
 800acee:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800acf2:	2302      	movs	r3, #2
 800acf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800acf8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800acfc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800ad00:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ad04:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800ad08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ad0c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800ad10:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ad14:	041b      	lsls	r3, r3, #16
 800ad16:	461a      	mov	r2, r3
 800ad18:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ad1c:	021b      	lsls	r3, r3, #8
 800ad1e:	431a      	orrs	r2, r3
 800ad20:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ad24:	4313      	orrs	r3, r2
 800ad26:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ad2a:	f107 0310 	add.w	r3, r7, #16
 800ad2e:	4611      	mov	r1, r2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7f9 fb01 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800ad36:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 800ad38:	bf00      	nop
 800ad3a:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 800ad3c:	4b1d      	ldr	r3, [pc, #116]	; (800adb4 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800ad3e:	601a      	str	r2, [r3, #0]
 800ad40:	23f7      	movs	r3, #247	; 0xf7
 800ad42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ad46:	23d2      	movs	r3, #210	; 0xd2
 800ad48:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800ad52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ad56:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800ad5a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ad5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad62:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800ad66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800ad6a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ad6e:	041b      	lsls	r3, r3, #16
 800ad70:	461a      	mov	r2, r3
 800ad72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ad76:	021b      	lsls	r3, r3, #8
 800ad78:	431a      	orrs	r2, r3
 800ad7a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ad84:	f107 030c 	add.w	r3, r7, #12
 800ad88:	4611      	mov	r1, r2
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7f9 fad4 	bl	8004338 <_ZN8touchgfx9colortypeC1Em>
 800ad90:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800ad92:	bf00      	nop
 800ad94:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800ad96:	4b08      	ldr	r3, [pc, #32]	; (800adb8 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800ad98:	601a      	str	r2, [r3, #0]
 800ad9a:	bf00      	nop
 800ad9c:	3748      	adds	r7, #72	; 0x48
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	20023a50 	.word	0x20023a50
 800ada8:	20023a54 	.word	0x20023a54
 800adac:	20023a58 	.word	0x20023a58
 800adb0:	20023a5c 	.word	0x20023a5c
 800adb4:	20023a60 	.word	0x20023a60
 800adb8:	20023a64 	.word	0x20023a64

0800adbc <_GLOBAL__sub_I__ZN7tempBoxC2Ev>:
 800adbc:	b580      	push	{r7, lr}
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800adc4:	2001      	movs	r0, #1
 800adc6:	f7ff fecb 	bl	800ab60 <_Z41__static_initialization_and_destruction_0ii>
 800adca:	bd80      	pop	{r7, pc}

0800adcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800adcc:	b480      	push	{r7}
 800adce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800add0:	4b06      	ldr	r3, [pc, #24]	; (800adec <SystemInit+0x20>)
 800add2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800add6:	4a05      	ldr	r2, [pc, #20]	; (800adec <SystemInit+0x20>)
 800add8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800addc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ade0:	bf00      	nop
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	e000ed00 	.word	0xe000ed00

0800adf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800adf4:	2003      	movs	r0, #3
 800adf6:	f001 fb7a 	bl	800c4ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800adfa:	200f      	movs	r0, #15
 800adfc:	f7f7 ffae 	bl	8002d5c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800ae00:	f7f7 ff84 	bl	8002d0c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	bd80      	pop	{r7, pc}
	...

0800ae0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ae10:	4b06      	ldr	r3, [pc, #24]	; (800ae2c <HAL_IncTick+0x20>)
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	461a      	mov	r2, r3
 800ae16:	4b06      	ldr	r3, [pc, #24]	; (800ae30 <HAL_IncTick+0x24>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	4a04      	ldr	r2, [pc, #16]	; (800ae30 <HAL_IncTick+0x24>)
 800ae1e:	6013      	str	r3, [r2, #0]
}
 800ae20:	bf00      	nop
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	2000001c 	.word	0x2000001c
 800ae30:	20057188 	.word	0x20057188

0800ae34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ae34:	b480      	push	{r7}
 800ae36:	af00      	add	r7, sp, #0
  return uwTick;
 800ae38:	4b03      	ldr	r3, [pc, #12]	; (800ae48 <HAL_GetTick+0x14>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	20057188 	.word	0x20057188

0800ae4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ae54:	f7ff ffee 	bl	800ae34 <HAL_GetTick>
 800ae58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae64:	d005      	beq.n	800ae72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ae66:	4b0a      	ldr	r3, [pc, #40]	; (800ae90 <HAL_Delay+0x44>)
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	4413      	add	r3, r2
 800ae70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ae72:	bf00      	nop
 800ae74:	f7ff ffde 	bl	800ae34 <HAL_GetTick>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d8f7      	bhi.n	800ae74 <HAL_Delay+0x28>
  {
  }
}
 800ae84:	bf00      	nop
 800ae86:	bf00      	nop
 800ae88:	3710      	adds	r7, #16
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	2000001c 	.word	0x2000001c

0800ae94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d101      	bne.n	800aeaa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	e031      	b.n	800af0e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d109      	bne.n	800aec6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7f6 f910 	bl	80010d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeca:	f003 0310 	and.w	r3, r3, #16
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d116      	bne.n	800af00 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aed6:	4b10      	ldr	r3, [pc, #64]	; (800af18 <HAL_ADC_Init+0x84>)
 800aed8:	4013      	ands	r3, r2
 800aeda:	f043 0202 	orr.w	r2, r3, #2
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 faca 	bl	800b47c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef2:	f023 0303 	bic.w	r3, r3, #3
 800aef6:	f043 0201 	orr.w	r2, r3, #1
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	641a      	str	r2, [r3, #64]	; 0x40
 800aefe:	e001      	b.n	800af04 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	ffffeefd 	.word	0xffffeefd

0800af1c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800af24:	2300      	movs	r3, #0
 800af26:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d101      	bne.n	800af36 <HAL_ADC_Start+0x1a>
 800af32:	2302      	movs	r3, #2
 800af34:	e0ad      	b.n	800b092 <HAL_ADC_Start+0x176>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2201      	movs	r2, #1
 800af3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	f003 0301 	and.w	r3, r3, #1
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d018      	beq.n	800af7e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	689a      	ldr	r2, [r3, #8]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f042 0201 	orr.w	r2, r2, #1
 800af5a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800af5c:	4b50      	ldr	r3, [pc, #320]	; (800b0a0 <HAL_ADC_Start+0x184>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a50      	ldr	r2, [pc, #320]	; (800b0a4 <HAL_ADC_Start+0x188>)
 800af62:	fba2 2303 	umull	r2, r3, r2, r3
 800af66:	0c9a      	lsrs	r2, r3, #18
 800af68:	4613      	mov	r3, r2
 800af6a:	005b      	lsls	r3, r3, #1
 800af6c:	4413      	add	r3, r2
 800af6e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800af70:	e002      	b.n	800af78 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	3b01      	subs	r3, #1
 800af76:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1f9      	bne.n	800af72 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	f003 0301 	and.w	r3, r3, #1
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d175      	bne.n	800b078 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af90:	4b45      	ldr	r3, [pc, #276]	; (800b0a8 <HAL_ADC_Start+0x18c>)
 800af92:	4013      	ands	r3, r2
 800af94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d007      	beq.n	800afba <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800afb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800afc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afc6:	d106      	bne.n	800afd6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afcc:	f023 0206 	bic.w	r2, r3, #6
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	645a      	str	r2, [r3, #68]	; 0x44
 800afd4:	e002      	b.n	800afdc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800afec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800afee:	4b2f      	ldr	r3, [pc, #188]	; (800b0ac <HAL_ADC_Start+0x190>)
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	f003 031f 	and.w	r3, r3, #31
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d10f      	bne.n	800b01a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b004:	2b00      	cmp	r3, #0
 800b006:	d143      	bne.n	800b090 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	689a      	ldr	r2, [r3, #8]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b016:	609a      	str	r2, [r3, #8]
 800b018:	e03a      	b.n	800b090 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a24      	ldr	r2, [pc, #144]	; (800b0b0 <HAL_ADC_Start+0x194>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d10e      	bne.n	800b042 <HAL_ADC_Start+0x126>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d107      	bne.n	800b042 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	689a      	ldr	r2, [r3, #8]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b040:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800b042:	4b1a      	ldr	r3, [pc, #104]	; (800b0ac <HAL_ADC_Start+0x190>)
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	f003 0310 	and.w	r3, r3, #16
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d120      	bne.n	800b090 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a18      	ldr	r2, [pc, #96]	; (800b0b4 <HAL_ADC_Start+0x198>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d11b      	bne.n	800b090 <HAL_ADC_Start+0x174>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b062:	2b00      	cmp	r3, #0
 800b064:	d114      	bne.n	800b090 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	689a      	ldr	r2, [r3, #8]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b074:	609a      	str	r2, [r3, #8]
 800b076:	e00b      	b.n	800b090 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07c:	f043 0210 	orr.w	r2, r3, #16
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b088:	f043 0201 	orr.w	r2, r3, #1
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3714      	adds	r7, #20
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	20000014 	.word	0x20000014
 800b0a4:	431bde83 	.word	0x431bde83
 800b0a8:	fffff8fe 	.word	0xfffff8fe
 800b0ac:	40012300 	.word	0x40012300
 800b0b0:	40012000 	.word	0x40012000
 800b0b4:	40012200 	.word	0x40012200

0800b0b8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0d4:	d113      	bne.n	800b0fe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800b0e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0e4:	d10b      	bne.n	800b0fe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ea:	f043 0220 	orr.w	r2, r3, #32
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e063      	b.n	800b1c6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800b0fe:	f7ff fe99 	bl	800ae34 <HAL_GetTick>
 800b102:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800b104:	e021      	b.n	800b14a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b10c:	d01d      	beq.n	800b14a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d007      	beq.n	800b124 <HAL_ADC_PollForConversion+0x6c>
 800b114:	f7ff fe8e 	bl	800ae34 <HAL_GetTick>
 800b118:	4602      	mov	r2, r0
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	429a      	cmp	r2, r3
 800b122:	d212      	bcs.n	800b14a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f003 0302 	and.w	r3, r3, #2
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d00b      	beq.n	800b14a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b136:	f043 0204 	orr.w	r2, r3, #4
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800b146:	2303      	movs	r3, #3
 800b148:	e03d      	b.n	800b1c6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 0302 	and.w	r3, r3, #2
 800b154:	2b02      	cmp	r3, #2
 800b156:	d1d6      	bne.n	800b106 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f06f 0212 	mvn.w	r2, #18
 800b160:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b166:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d123      	bne.n	800b1c4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b180:	2b00      	cmp	r3, #0
 800b182:	d11f      	bne.n	800b1c4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d006      	beq.n	800b1a0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d111      	bne.n	800b1c4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d105      	bne.n	800b1c4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1bc:	f043 0201 	orr.w	r2, r3, #1
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800b1ce:	b480      	push	{r7}
 800b1d0:	b083      	sub	sp, #12
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d101      	bne.n	800b204 <HAL_ADC_ConfigChannel+0x1c>
 800b200:	2302      	movs	r3, #2
 800b202:	e12a      	b.n	800b45a <HAL_ADC_ConfigChannel+0x272>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b09      	cmp	r3, #9
 800b212:	d93a      	bls.n	800b28a <HAL_ADC_ConfigChannel+0xa2>
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b21c:	d035      	beq.n	800b28a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68d9      	ldr	r1, [r3, #12]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	b29b      	uxth	r3, r3
 800b22a:	461a      	mov	r2, r3
 800b22c:	4613      	mov	r3, r2
 800b22e:	005b      	lsls	r3, r3, #1
 800b230:	4413      	add	r3, r2
 800b232:	3b1e      	subs	r3, #30
 800b234:	2207      	movs	r2, #7
 800b236:	fa02 f303 	lsl.w	r3, r2, r3
 800b23a:	43da      	mvns	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	400a      	ands	r2, r1
 800b242:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a87      	ldr	r2, [pc, #540]	; (800b468 <HAL_ADC_ConfigChannel+0x280>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d10a      	bne.n	800b264 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	68d9      	ldr	r1, [r3, #12]
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	061a      	lsls	r2, r3, #24
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	430a      	orrs	r2, r1
 800b260:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b262:	e035      	b.n	800b2d0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	68d9      	ldr	r1, [r3, #12]
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	689a      	ldr	r2, [r3, #8]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	b29b      	uxth	r3, r3
 800b274:	4618      	mov	r0, r3
 800b276:	4603      	mov	r3, r0
 800b278:	005b      	lsls	r3, r3, #1
 800b27a:	4403      	add	r3, r0
 800b27c:	3b1e      	subs	r3, #30
 800b27e:	409a      	lsls	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	430a      	orrs	r2, r1
 800b286:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b288:	e022      	b.n	800b2d0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	6919      	ldr	r1, [r3, #16]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	b29b      	uxth	r3, r3
 800b296:	461a      	mov	r2, r3
 800b298:	4613      	mov	r3, r2
 800b29a:	005b      	lsls	r3, r3, #1
 800b29c:	4413      	add	r3, r2
 800b29e:	2207      	movs	r2, #7
 800b2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a4:	43da      	mvns	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	400a      	ands	r2, r1
 800b2ac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	6919      	ldr	r1, [r3, #16]
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	689a      	ldr	r2, [r3, #8]
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	4618      	mov	r0, r3
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	005b      	lsls	r3, r3, #1
 800b2c4:	4403      	add	r3, r0
 800b2c6:	409a      	lsls	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	430a      	orrs	r2, r1
 800b2ce:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	2b06      	cmp	r3, #6
 800b2d6:	d824      	bhi.n	800b322 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	685a      	ldr	r2, [r3, #4]
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	4413      	add	r3, r2
 800b2e8:	3b05      	subs	r3, #5
 800b2ea:	221f      	movs	r2, #31
 800b2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b2f0:	43da      	mvns	r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	400a      	ands	r2, r1
 800b2f8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	b29b      	uxth	r3, r3
 800b306:	4618      	mov	r0, r3
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	685a      	ldr	r2, [r3, #4]
 800b30c:	4613      	mov	r3, r2
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	4413      	add	r3, r2
 800b312:	3b05      	subs	r3, #5
 800b314:	fa00 f203 	lsl.w	r2, r0, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	430a      	orrs	r2, r1
 800b31e:	635a      	str	r2, [r3, #52]	; 0x34
 800b320:	e04c      	b.n	800b3bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	2b0c      	cmp	r3, #12
 800b328:	d824      	bhi.n	800b374 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	685a      	ldr	r2, [r3, #4]
 800b334:	4613      	mov	r3, r2
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	4413      	add	r3, r2
 800b33a:	3b23      	subs	r3, #35	; 0x23
 800b33c:	221f      	movs	r2, #31
 800b33e:	fa02 f303 	lsl.w	r3, r2, r3
 800b342:	43da      	mvns	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	400a      	ands	r2, r1
 800b34a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	b29b      	uxth	r3, r3
 800b358:	4618      	mov	r0, r3
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	4613      	mov	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	4413      	add	r3, r2
 800b364:	3b23      	subs	r3, #35	; 0x23
 800b366:	fa00 f203 	lsl.w	r2, r0, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	430a      	orrs	r2, r1
 800b370:	631a      	str	r2, [r3, #48]	; 0x30
 800b372:	e023      	b.n	800b3bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	685a      	ldr	r2, [r3, #4]
 800b37e:	4613      	mov	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	3b41      	subs	r3, #65	; 0x41
 800b386:	221f      	movs	r2, #31
 800b388:	fa02 f303 	lsl.w	r3, r2, r3
 800b38c:	43da      	mvns	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	400a      	ands	r2, r1
 800b394:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	685a      	ldr	r2, [r3, #4]
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	4413      	add	r3, r2
 800b3ae:	3b41      	subs	r3, #65	; 0x41
 800b3b0:	fa00 f203 	lsl.w	r2, r0, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	430a      	orrs	r2, r1
 800b3ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a2a      	ldr	r2, [pc, #168]	; (800b46c <HAL_ADC_ConfigChannel+0x284>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d10a      	bne.n	800b3dc <HAL_ADC_ConfigChannel+0x1f4>
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3ce:	d105      	bne.n	800b3dc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800b3d0:	4b27      	ldr	r3, [pc, #156]	; (800b470 <HAL_ADC_ConfigChannel+0x288>)
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	4a26      	ldr	r2, [pc, #152]	; (800b470 <HAL_ADC_ConfigChannel+0x288>)
 800b3d6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800b3da:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a22      	ldr	r2, [pc, #136]	; (800b46c <HAL_ADC_ConfigChannel+0x284>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d109      	bne.n	800b3fa <HAL_ADC_ConfigChannel+0x212>
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b12      	cmp	r3, #18
 800b3ec:	d105      	bne.n	800b3fa <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800b3ee:	4b20      	ldr	r3, [pc, #128]	; (800b470 <HAL_ADC_ConfigChannel+0x288>)
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	4a1f      	ldr	r2, [pc, #124]	; (800b470 <HAL_ADC_ConfigChannel+0x288>)
 800b3f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b3f8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a1b      	ldr	r2, [pc, #108]	; (800b46c <HAL_ADC_ConfigChannel+0x284>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d125      	bne.n	800b450 <HAL_ADC_ConfigChannel+0x268>
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a17      	ldr	r2, [pc, #92]	; (800b468 <HAL_ADC_ConfigChannel+0x280>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d003      	beq.n	800b416 <HAL_ADC_ConfigChannel+0x22e>
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2b11      	cmp	r3, #17
 800b414:	d11c      	bne.n	800b450 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800b416:	4b16      	ldr	r3, [pc, #88]	; (800b470 <HAL_ADC_ConfigChannel+0x288>)
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	4a15      	ldr	r2, [pc, #84]	; (800b470 <HAL_ADC_ConfigChannel+0x288>)
 800b41c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b420:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a10      	ldr	r2, [pc, #64]	; (800b468 <HAL_ADC_ConfigChannel+0x280>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d111      	bne.n	800b450 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800b42c:	4b11      	ldr	r3, [pc, #68]	; (800b474 <HAL_ADC_ConfigChannel+0x28c>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a11      	ldr	r2, [pc, #68]	; (800b478 <HAL_ADC_ConfigChannel+0x290>)
 800b432:	fba2 2303 	umull	r2, r3, r2, r3
 800b436:	0c9a      	lsrs	r2, r3, #18
 800b438:	4613      	mov	r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	005b      	lsls	r3, r3, #1
 800b440:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800b442:	e002      	b.n	800b44a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	3b01      	subs	r3, #1
 800b448:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d1f9      	bne.n	800b444 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	10000012 	.word	0x10000012
 800b46c:	40012000 	.word	0x40012000
 800b470:	40012300 	.word	0x40012300
 800b474:	20000014 	.word	0x20000014
 800b478:	431bde83 	.word	0x431bde83

0800b47c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800b484:	4b78      	ldr	r3, [pc, #480]	; (800b668 <ADC_Init+0x1ec>)
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	4a77      	ldr	r2, [pc, #476]	; (800b668 <ADC_Init+0x1ec>)
 800b48a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800b48e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800b490:	4b75      	ldr	r3, [pc, #468]	; (800b668 <ADC_Init+0x1ec>)
 800b492:	685a      	ldr	r2, [r3, #4]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	4973      	ldr	r1, [pc, #460]	; (800b668 <ADC_Init+0x1ec>)
 800b49a:	4313      	orrs	r3, r2
 800b49c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	685a      	ldr	r2, [r3, #4]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	6859      	ldr	r1, [r3, #4]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	021a      	lsls	r2, r3, #8
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	685a      	ldr	r2, [r3, #4]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800b4d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	6859      	ldr	r1, [r3, #4]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	689a      	ldr	r2, [r3, #8]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	430a      	orrs	r2, r1
 800b4e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	689a      	ldr	r2, [r3, #8]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b4f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	6899      	ldr	r1, [r3, #8]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	68da      	ldr	r2, [r3, #12]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	430a      	orrs	r2, r1
 800b504:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b50a:	4a58      	ldr	r2, [pc, #352]	; (800b66c <ADC_Init+0x1f0>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d022      	beq.n	800b556 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	689a      	ldr	r2, [r3, #8]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b51e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	6899      	ldr	r1, [r3, #8]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	430a      	orrs	r2, r1
 800b530:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	689a      	ldr	r2, [r3, #8]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6899      	ldr	r1, [r3, #8]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	430a      	orrs	r2, r1
 800b552:	609a      	str	r2, [r3, #8]
 800b554:	e00f      	b.n	800b576 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	689a      	ldr	r2, [r3, #8]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b564:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	689a      	ldr	r2, [r3, #8]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b574:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	689a      	ldr	r2, [r3, #8]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f022 0202 	bic.w	r2, r2, #2
 800b584:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	6899      	ldr	r1, [r3, #8]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	699b      	ldr	r3, [r3, #24]
 800b590:	005a      	lsls	r2, r3, #1
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	430a      	orrs	r2, r1
 800b598:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d01b      	beq.n	800b5dc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	685a      	ldr	r2, [r3, #4]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	685a      	ldr	r2, [r3, #4]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800b5c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	6859      	ldr	r1, [r3, #4]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	035a      	lsls	r2, r3, #13
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	430a      	orrs	r2, r1
 800b5d8:	605a      	str	r2, [r3, #4]
 800b5da:	e007      	b.n	800b5ec <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	685a      	ldr	r2, [r3, #4]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b5ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800b5fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	69db      	ldr	r3, [r3, #28]
 800b606:	3b01      	subs	r3, #1
 800b608:	051a      	lsls	r2, r3, #20
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	430a      	orrs	r2, r1
 800b610:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	689a      	ldr	r2, [r3, #8]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b620:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	6899      	ldr	r1, [r3, #8]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b62e:	025a      	lsls	r2, r3, #9
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	430a      	orrs	r2, r1
 800b636:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	689a      	ldr	r2, [r3, #8]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b646:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	6899      	ldr	r1, [r3, #8]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	029a      	lsls	r2, r3, #10
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	430a      	orrs	r2, r1
 800b65a:	609a      	str	r2, [r3, #8]
}
 800b65c:	bf00      	nop
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr
 800b668:	40012300 	.word	0x40012300
 800b66c:	0f000001 	.word	0x0f000001

0800b670 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	e0ed      	b.n	800b85e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d102      	bne.n	800b694 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f7f5 ffd4 	bl	800163c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f022 0202 	bic.w	r2, r2, #2
 800b6a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b6a4:	f7ff fbc6 	bl	800ae34 <HAL_GetTick>
 800b6a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b6aa:	e012      	b.n	800b6d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b6ac:	f7ff fbc2 	bl	800ae34 <HAL_GetTick>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	1ad3      	subs	r3, r2, r3
 800b6b6:	2b0a      	cmp	r3, #10
 800b6b8:	d90b      	bls.n	800b6d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2205      	movs	r2, #5
 800b6ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e0c5      	b.n	800b85e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	f003 0302 	and.w	r3, r3, #2
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d1e5      	bne.n	800b6ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f042 0201 	orr.w	r2, r2, #1
 800b6ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b6f0:	f7ff fba0 	bl	800ae34 <HAL_GetTick>
 800b6f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b6f6:	e012      	b.n	800b71e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b6f8:	f7ff fb9c 	bl	800ae34 <HAL_GetTick>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	2b0a      	cmp	r3, #10
 800b704:	d90b      	bls.n	800b71e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2205      	movs	r2, #5
 800b716:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	e09f      	b.n	800b85e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d0e5      	beq.n	800b6f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	7e1b      	ldrb	r3, [r3, #24]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d108      	bne.n	800b746 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b742:	601a      	str	r2, [r3, #0]
 800b744:	e007      	b.n	800b756 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b754:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	7e5b      	ldrb	r3, [r3, #25]
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d108      	bne.n	800b770 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b76c:	601a      	str	r2, [r3, #0]
 800b76e:	e007      	b.n	800b780 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b77e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	7e9b      	ldrb	r3, [r3, #26]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d108      	bne.n	800b79a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f042 0220 	orr.w	r2, r2, #32
 800b796:	601a      	str	r2, [r3, #0]
 800b798:	e007      	b.n	800b7aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f022 0220 	bic.w	r2, r2, #32
 800b7a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	7edb      	ldrb	r3, [r3, #27]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d108      	bne.n	800b7c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f022 0210 	bic.w	r2, r2, #16
 800b7c0:	601a      	str	r2, [r3, #0]
 800b7c2:	e007      	b.n	800b7d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f042 0210 	orr.w	r2, r2, #16
 800b7d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	7f1b      	ldrb	r3, [r3, #28]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d108      	bne.n	800b7ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f042 0208 	orr.w	r2, r2, #8
 800b7ea:	601a      	str	r2, [r3, #0]
 800b7ec:	e007      	b.n	800b7fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f022 0208 	bic.w	r2, r2, #8
 800b7fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	7f5b      	ldrb	r3, [r3, #29]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d108      	bne.n	800b818 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f042 0204 	orr.w	r2, r2, #4
 800b814:	601a      	str	r2, [r3, #0]
 800b816:	e007      	b.n	800b828 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f022 0204 	bic.w	r2, r2, #4
 800b826:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	689a      	ldr	r2, [r3, #8]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	431a      	orrs	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	691b      	ldr	r3, [r3, #16]
 800b836:	431a      	orrs	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	695b      	ldr	r3, [r3, #20]
 800b83c:	ea42 0103 	orr.w	r1, r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	1e5a      	subs	r2, r3, #1
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	430a      	orrs	r2, r1
 800b84c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
	...

0800b868 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800b868:	b480      	push	{r7}
 800b86a:	b087      	sub	sp, #28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b87e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800b880:	7cfb      	ldrb	r3, [r7, #19]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d003      	beq.n	800b88e <HAL_CAN_ConfigFilter+0x26>
 800b886:	7cfb      	ldrb	r3, [r7, #19]
 800b888:	2b02      	cmp	r3, #2
 800b88a:	f040 80c7 	bne.w	800ba1c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a69      	ldr	r2, [pc, #420]	; (800ba38 <HAL_CAN_ConfigFilter+0x1d0>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d001      	beq.n	800b89c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800b898:	4b68      	ldr	r3, [pc, #416]	; (800ba3c <HAL_CAN_ConfigFilter+0x1d4>)
 800b89a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b8a2:	f043 0201 	orr.w	r2, r3, #1
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	4a63      	ldr	r2, [pc, #396]	; (800ba3c <HAL_CAN_ConfigFilter+0x1d4>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d111      	bne.n	800b8d8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b8ba:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ce:	021b      	lsls	r3, r3, #8
 800b8d0:	431a      	orrs	r2, r3
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	695b      	ldr	r3, [r3, #20]
 800b8dc:	f003 031f 	and.w	r3, r3, #31
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	43db      	mvns	r3, r3
 800b8f2:	401a      	ands	r2, r3
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	69db      	ldr	r3, [r3, #28]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d123      	bne.n	800b94a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	43db      	mvns	r3, r3
 800b90c:	401a      	ands	r2, r3
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b920:	683a      	ldr	r2, [r7, #0]
 800b922:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b924:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	3248      	adds	r2, #72	; 0x48
 800b92a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b93e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b940:	6979      	ldr	r1, [r7, #20]
 800b942:	3348      	adds	r3, #72	; 0x48
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	440b      	add	r3, r1
 800b948:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	69db      	ldr	r3, [r3, #28]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d122      	bne.n	800b998 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	431a      	orrs	r2, r3
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b96e:	683a      	ldr	r2, [r7, #0]
 800b970:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b972:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	3248      	adds	r2, #72	; 0x48
 800b978:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b98c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b98e:	6979      	ldr	r1, [r7, #20]
 800b990:	3348      	adds	r3, #72	; 0x48
 800b992:	00db      	lsls	r3, r3, #3
 800b994:	440b      	add	r3, r1
 800b996:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	699b      	ldr	r3, [r3, #24]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d109      	bne.n	800b9b4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	43db      	mvns	r3, r3
 800b9aa:	401a      	ands	r2, r3
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800b9b2:	e007      	b.n	800b9c4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	431a      	orrs	r2, r3
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	691b      	ldr	r3, [r3, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d109      	bne.n	800b9e0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	43db      	mvns	r3, r3
 800b9d6:	401a      	ands	r2, r3
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b9de:	e007      	b.n	800b9f0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	431a      	orrs	r2, r3
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	6a1b      	ldr	r3, [r3, #32]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d107      	bne.n	800ba08 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	431a      	orrs	r2, r3
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ba0e:	f023 0201 	bic.w	r2, r3, #1
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	e006      	b.n	800ba2a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ba28:	2301      	movs	r3, #1
  }
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	371c      	adds	r7, #28
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	40003400 	.word	0x40003400
 800ba3c:	40006400 	.word	0x40006400

0800ba40 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d12e      	bne.n	800bab2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2202      	movs	r2, #2
 800ba58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f022 0201 	bic.w	r2, r2, #1
 800ba6a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ba6c:	f7ff f9e2 	bl	800ae34 <HAL_GetTick>
 800ba70:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ba72:	e012      	b.n	800ba9a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ba74:	f7ff f9de 	bl	800ae34 <HAL_GetTick>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	2b0a      	cmp	r3, #10
 800ba80:	d90b      	bls.n	800ba9a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2205      	movs	r2, #5
 800ba92:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	e012      	b.n	800bac0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	f003 0301 	and.w	r3, r3, #1
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1e5      	bne.n	800ba74 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800baae:	2300      	movs	r3, #0
 800bab0:	e006      	b.n	800bac0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800babe:	2301      	movs	r3, #1
  }
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800bac8:	b480      	push	{r7}
 800baca:	b089      	sub	sp, #36	; 0x24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
 800bad4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800badc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800bae6:	7ffb      	ldrb	r3, [r7, #31]
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d003      	beq.n	800baf4 <HAL_CAN_AddTxMessage+0x2c>
 800baec:	7ffb      	ldrb	r3, [r7, #31]
 800baee:	2b02      	cmp	r3, #2
 800baf0:	f040 80b8 	bne.w	800bc64 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10a      	bne.n	800bb14 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d105      	bne.n	800bb14 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	f000 80a0 	beq.w	800bc54 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	0e1b      	lsrs	r3, r3, #24
 800bb18:	f003 0303 	and.w	r3, r3, #3
 800bb1c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	2b02      	cmp	r3, #2
 800bb22:	d907      	bls.n	800bb34 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800bb30:	2301      	movs	r3, #1
 800bb32:	e09e      	b.n	800bc72 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800bb34:	2201      	movs	r2, #1
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	409a      	lsls	r2, r3
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d10d      	bne.n	800bb62 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800bb50:	68f9      	ldr	r1, [r7, #12]
 800bb52:	6809      	ldr	r1, [r1, #0]
 800bb54:	431a      	orrs	r2, r3
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	3318      	adds	r3, #24
 800bb5a:	011b      	lsls	r3, r3, #4
 800bb5c:	440b      	add	r3, r1
 800bb5e:	601a      	str	r2, [r3, #0]
 800bb60:	e00f      	b.n	800bb82 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800bb6c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800bb72:	68f9      	ldr	r1, [r7, #12]
 800bb74:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800bb76:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	3318      	adds	r3, #24
 800bb7c:	011b      	lsls	r3, r3, #4
 800bb7e:	440b      	add	r3, r1
 800bb80:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	6819      	ldr	r1, [r3, #0]
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	691a      	ldr	r2, [r3, #16]
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	3318      	adds	r3, #24
 800bb8e:	011b      	lsls	r3, r3, #4
 800bb90:	440b      	add	r3, r1
 800bb92:	3304      	adds	r3, #4
 800bb94:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	7d1b      	ldrb	r3, [r3, #20]
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d111      	bne.n	800bbc2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	3318      	adds	r3, #24
 800bba6:	011b      	lsls	r3, r3, #4
 800bba8:	4413      	add	r3, r2
 800bbaa:	3304      	adds	r3, #4
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	6811      	ldr	r1, [r2, #0]
 800bbb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	3318      	adds	r3, #24
 800bbba:	011b      	lsls	r3, r3, #4
 800bbbc:	440b      	add	r3, r1
 800bbbe:	3304      	adds	r3, #4
 800bbc0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	3307      	adds	r3, #7
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	061a      	lsls	r2, r3, #24
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	3306      	adds	r3, #6
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	041b      	lsls	r3, r3, #16
 800bbd2:	431a      	orrs	r2, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	3305      	adds	r3, #5
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	021b      	lsls	r3, r3, #8
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	3204      	adds	r2, #4
 800bbe2:	7812      	ldrb	r2, [r2, #0]
 800bbe4:	4610      	mov	r0, r2
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	6811      	ldr	r1, [r2, #0]
 800bbea:	ea43 0200 	orr.w	r2, r3, r0
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	011b      	lsls	r3, r3, #4
 800bbf2:	440b      	add	r3, r1
 800bbf4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800bbf8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	3303      	adds	r3, #3
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	061a      	lsls	r2, r3, #24
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	3302      	adds	r3, #2
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	041b      	lsls	r3, r3, #16
 800bc0a:	431a      	orrs	r2, r3
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	021b      	lsls	r3, r3, #8
 800bc14:	4313      	orrs	r3, r2
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	7812      	ldrb	r2, [r2, #0]
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	6811      	ldr	r1, [r2, #0]
 800bc20:	ea43 0200 	orr.w	r2, r3, r0
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	011b      	lsls	r3, r3, #4
 800bc28:	440b      	add	r3, r1
 800bc2a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800bc2e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	3318      	adds	r3, #24
 800bc38:	011b      	lsls	r3, r3, #4
 800bc3a:	4413      	add	r3, r2
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	6811      	ldr	r1, [r2, #0]
 800bc42:	f043 0201 	orr.w	r2, r3, #1
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	3318      	adds	r3, #24
 800bc4a:	011b      	lsls	r3, r3, #4
 800bc4c:	440b      	add	r3, r1
 800bc4e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800bc50:	2300      	movs	r3, #0
 800bc52:	e00e      	b.n	800bc72 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	e006      	b.n	800bc72 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800bc70:	2301      	movs	r3, #1
  }
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3724      	adds	r7, #36	; 0x24
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b087      	sub	sp, #28
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	60f8      	str	r0, [r7, #12]
 800bc86:	60b9      	str	r1, [r7, #8]
 800bc88:	607a      	str	r2, [r7, #4]
 800bc8a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bc92:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800bc94:	7dfb      	ldrb	r3, [r7, #23]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d003      	beq.n	800bca2 <HAL_CAN_GetRxMessage+0x24>
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	f040 80f3 	bne.w	800be88 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10e      	bne.n	800bcc6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	f003 0303 	and.w	r3, r3, #3
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d116      	bne.n	800bce4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e0e7      	b.n	800be96 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	f003 0303 	and.w	r3, r3, #3
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d107      	bne.n	800bce4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	e0d8      	b.n	800be96 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	331b      	adds	r3, #27
 800bcec:	011b      	lsls	r3, r3, #4
 800bcee:	4413      	add	r3, r2
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 0204 	and.w	r2, r3, #4
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10c      	bne.n	800bd1c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	331b      	adds	r3, #27
 800bd0a:	011b      	lsls	r3, r3, #4
 800bd0c:	4413      	add	r3, r2
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	0d5b      	lsrs	r3, r3, #21
 800bd12:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	601a      	str	r2, [r3, #0]
 800bd1a:	e00b      	b.n	800bd34 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	331b      	adds	r3, #27
 800bd24:	011b      	lsls	r3, r3, #4
 800bd26:	4413      	add	r3, r2
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	08db      	lsrs	r3, r3, #3
 800bd2c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	331b      	adds	r3, #27
 800bd3c:	011b      	lsls	r3, r3, #4
 800bd3e:	4413      	add	r3, r2
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f003 0202 	and.w	r2, r3, #2
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	331b      	adds	r3, #27
 800bd52:	011b      	lsls	r3, r3, #4
 800bd54:	4413      	add	r3, r2
 800bd56:	3304      	adds	r3, #4
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f003 020f 	and.w	r2, r3, #15
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	331b      	adds	r3, #27
 800bd6a:	011b      	lsls	r3, r3, #4
 800bd6c:	4413      	add	r3, r2
 800bd6e:	3304      	adds	r3, #4
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	0a1b      	lsrs	r3, r3, #8
 800bd74:	b2da      	uxtb	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	331b      	adds	r3, #27
 800bd82:	011b      	lsls	r3, r3, #4
 800bd84:	4413      	add	r3, r2
 800bd86:	3304      	adds	r3, #4
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	0c1b      	lsrs	r3, r3, #16
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	011b      	lsls	r3, r3, #4
 800bd9a:	4413      	add	r3, r2
 800bd9c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	b2da      	uxtb	r2, r3
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	011b      	lsls	r3, r3, #4
 800bdb0:	4413      	add	r3, r2
 800bdb2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	0a1a      	lsrs	r2, r3, #8
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	b2d2      	uxtb	r2, r2
 800bdc0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	011b      	lsls	r3, r3, #4
 800bdca:	4413      	add	r3, r2
 800bdcc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	0c1a      	lsrs	r2, r3, #16
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	3302      	adds	r3, #2
 800bdd8:	b2d2      	uxtb	r2, r2
 800bdda:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	011b      	lsls	r3, r3, #4
 800bde4:	4413      	add	r3, r2
 800bde6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	0e1a      	lsrs	r2, r3, #24
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	3303      	adds	r3, #3
 800bdf2:	b2d2      	uxtb	r2, r2
 800bdf4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	011b      	lsls	r3, r3, #4
 800bdfe:	4413      	add	r3, r2
 800be00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	3304      	adds	r3, #4
 800be0a:	b2d2      	uxtb	r2, r2
 800be0c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	011b      	lsls	r3, r3, #4
 800be16:	4413      	add	r3, r2
 800be18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	0a1a      	lsrs	r2, r3, #8
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	3305      	adds	r3, #5
 800be24:	b2d2      	uxtb	r2, r2
 800be26:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	011b      	lsls	r3, r3, #4
 800be30:	4413      	add	r3, r2
 800be32:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	0c1a      	lsrs	r2, r3, #16
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	3306      	adds	r3, #6
 800be3e:	b2d2      	uxtb	r2, r2
 800be40:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	011b      	lsls	r3, r3, #4
 800be4a:	4413      	add	r3, r2
 800be4c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	0e1a      	lsrs	r2, r3, #24
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	3307      	adds	r3, #7
 800be58:	b2d2      	uxtb	r2, r2
 800be5a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d108      	bne.n	800be74 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	68da      	ldr	r2, [r3, #12]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f042 0220 	orr.w	r2, r2, #32
 800be70:	60da      	str	r2, [r3, #12]
 800be72:	e007      	b.n	800be84 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	691a      	ldr	r2, [r3, #16]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f042 0220 	orr.w	r2, r2, #32
 800be82:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800be84:	2300      	movs	r3, #0
 800be86:	e006      	b.n	800be96 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800be94:	2301      	movs	r3, #1
  }
}
 800be96:	4618      	mov	r0, r3
 800be98:	371c      	adds	r7, #28
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr

0800bea2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800bea2:	b480      	push	{r7}
 800bea4:	b085      	sub	sp, #20
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 3020 	ldrb.w	r3, [r3, #32]
 800beb2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800beb4:	7bfb      	ldrb	r3, [r7, #15]
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d002      	beq.n	800bec0 <HAL_CAN_ActivateNotification+0x1e>
 800beba:	7bfb      	ldrb	r3, [r7, #15]
 800bebc:	2b02      	cmp	r3, #2
 800bebe:	d109      	bne.n	800bed4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	6959      	ldr	r1, [r3, #20]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	683a      	ldr	r2, [r7, #0]
 800becc:	430a      	orrs	r2, r1
 800bece:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800bed0:	2300      	movs	r3, #0
 800bed2:	e006      	b.n	800bee2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800bee0:	2301      	movs	r3, #1
  }
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b08a      	sub	sp, #40	; 0x28
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800bef6:	2300      	movs	r3, #0
 800bef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	695b      	ldr	r3, [r3, #20]
 800bf00:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	699b      	ldr	r3, [r3, #24]
 800bf28:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800bf2a:	6a3b      	ldr	r3, [r7, #32]
 800bf2c:	f003 0301 	and.w	r3, r3, #1
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d07c      	beq.n	800c02e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	f003 0301 	and.w	r3, r3, #1
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d023      	beq.n	800bf86 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2201      	movs	r2, #1
 800bf44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	f003 0302 	and.w	r3, r3, #2
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d003      	beq.n	800bf58 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 f983 	bl	800c25c <HAL_CAN_TxMailbox0CompleteCallback>
 800bf56:	e016      	b.n	800bf86 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	f003 0304 	and.w	r3, r3, #4
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d004      	beq.n	800bf6c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bf68:	627b      	str	r3, [r7, #36]	; 0x24
 800bf6a:	e00c      	b.n	800bf86 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	f003 0308 	and.w	r3, r3, #8
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d004      	beq.n	800bf80 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800bf76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bf7c:	627b      	str	r3, [r7, #36]	; 0x24
 800bf7e:	e002      	b.n	800bf86 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 f989 	bl	800c298 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d024      	beq.n	800bfda <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d003      	beq.n	800bfac <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f963 	bl	800c270 <HAL_CAN_TxMailbox1CompleteCallback>
 800bfaa:	e016      	b.n	800bfda <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d004      	beq.n	800bfc0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800bfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bfbc:	627b      	str	r3, [r7, #36]	; 0x24
 800bfbe:	e00c      	b.n	800bfda <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d004      	beq.n	800bfd4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800bfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bfd0:	627b      	str	r3, [r7, #36]	; 0x24
 800bfd2:	e002      	b.n	800bfda <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 f969 	bl	800c2ac <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d024      	beq.n	800c02e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bfec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d003      	beq.n	800c000 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 f943 	bl	800c284 <HAL_CAN_TxMailbox2CompleteCallback>
 800bffe:	e016      	b.n	800c02e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c006:	2b00      	cmp	r3, #0
 800c008:	d004      	beq.n	800c014 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800c00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c010:	627b      	str	r3, [r7, #36]	; 0x24
 800c012:	e00c      	b.n	800c02e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d004      	beq.n	800c028 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800c01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c024:	627b      	str	r3, [r7, #36]	; 0x24
 800c026:	e002      	b.n	800c02e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 f949 	bl	800c2c0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800c02e:	6a3b      	ldr	r3, [r7, #32]
 800c030:	f003 0308 	and.w	r3, r3, #8
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00c      	beq.n	800c052 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	f003 0310 	and.w	r3, r3, #16
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d007      	beq.n	800c052 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800c042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c048:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2210      	movs	r2, #16
 800c050:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800c052:	6a3b      	ldr	r3, [r7, #32]
 800c054:	f003 0304 	and.w	r3, r3, #4
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00b      	beq.n	800c074 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	f003 0308 	and.w	r3, r3, #8
 800c062:	2b00      	cmp	r3, #0
 800c064:	d006      	beq.n	800c074 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2208      	movs	r2, #8
 800c06c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f930 	bl	800c2d4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800c074:	6a3b      	ldr	r3, [r7, #32]
 800c076:	f003 0302 	and.w	r3, r3, #2
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d009      	beq.n	800c092 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	f003 0303 	and.w	r3, r3, #3
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d002      	beq.n	800c092 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f7f5 fb89 	bl	80017a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800c092:	6a3b      	ldr	r3, [r7, #32]
 800c094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00c      	beq.n	800c0b6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	f003 0310 	and.w	r3, r3, #16
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d007      	beq.n	800c0b6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800c0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c0ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2210      	movs	r2, #16
 800c0b4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800c0b6:	6a3b      	ldr	r3, [r7, #32]
 800c0b8:	f003 0320 	and.w	r3, r3, #32
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00b      	beq.n	800c0d8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	f003 0308 	and.w	r3, r3, #8
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d006      	beq.n	800c0d8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2208      	movs	r2, #8
 800c0d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 f912 	bl	800c2fc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	f003 0310 	and.w	r3, r3, #16
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d009      	beq.n	800c0f6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	f003 0303 	and.w	r3, r3, #3
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d002      	beq.n	800c0f6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f8f9 	bl	800c2e8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800c0f6:	6a3b      	ldr	r3, [r7, #32]
 800c0f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00b      	beq.n	800c118 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	f003 0310 	and.w	r3, r3, #16
 800c106:	2b00      	cmp	r3, #0
 800c108:	d006      	beq.n	800c118 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2210      	movs	r2, #16
 800c110:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 f8fc 	bl	800c310 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800c118:	6a3b      	ldr	r3, [r7, #32]
 800c11a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00b      	beq.n	800c13a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800c122:	69fb      	ldr	r3, [r7, #28]
 800c124:	f003 0308 	and.w	r3, r3, #8
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d006      	beq.n	800c13a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2208      	movs	r2, #8
 800c132:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 f8f5 	bl	800c324 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800c13a:	6a3b      	ldr	r3, [r7, #32]
 800c13c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c140:	2b00      	cmp	r3, #0
 800c142:	d07b      	beq.n	800c23c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	f003 0304 	and.w	r3, r3, #4
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d072      	beq.n	800c234 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800c14e:	6a3b      	ldr	r3, [r7, #32]
 800c150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c154:	2b00      	cmp	r3, #0
 800c156:	d008      	beq.n	800c16a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d003      	beq.n	800c16a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800c162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c164:	f043 0301 	orr.w	r3, r3, #1
 800c168:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800c16a:	6a3b      	ldr	r3, [r7, #32]
 800c16c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c170:	2b00      	cmp	r3, #0
 800c172:	d008      	beq.n	800c186 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d003      	beq.n	800c186 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800c17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c180:	f043 0302 	orr.w	r3, r3, #2
 800c184:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800c186:	6a3b      	ldr	r3, [r7, #32]
 800c188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d008      	beq.n	800c1a2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800c196:	2b00      	cmp	r3, #0
 800c198:	d003      	beq.n	800c1a2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	f043 0304 	orr.w	r3, r3, #4
 800c1a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800c1a2:	6a3b      	ldr	r3, [r7, #32]
 800c1a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d043      	beq.n	800c234 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d03e      	beq.n	800c234 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c1bc:	2b60      	cmp	r3, #96	; 0x60
 800c1be:	d02b      	beq.n	800c218 <HAL_CAN_IRQHandler+0x32a>
 800c1c0:	2b60      	cmp	r3, #96	; 0x60
 800c1c2:	d82e      	bhi.n	800c222 <HAL_CAN_IRQHandler+0x334>
 800c1c4:	2b50      	cmp	r3, #80	; 0x50
 800c1c6:	d022      	beq.n	800c20e <HAL_CAN_IRQHandler+0x320>
 800c1c8:	2b50      	cmp	r3, #80	; 0x50
 800c1ca:	d82a      	bhi.n	800c222 <HAL_CAN_IRQHandler+0x334>
 800c1cc:	2b40      	cmp	r3, #64	; 0x40
 800c1ce:	d019      	beq.n	800c204 <HAL_CAN_IRQHandler+0x316>
 800c1d0:	2b40      	cmp	r3, #64	; 0x40
 800c1d2:	d826      	bhi.n	800c222 <HAL_CAN_IRQHandler+0x334>
 800c1d4:	2b30      	cmp	r3, #48	; 0x30
 800c1d6:	d010      	beq.n	800c1fa <HAL_CAN_IRQHandler+0x30c>
 800c1d8:	2b30      	cmp	r3, #48	; 0x30
 800c1da:	d822      	bhi.n	800c222 <HAL_CAN_IRQHandler+0x334>
 800c1dc:	2b10      	cmp	r3, #16
 800c1de:	d002      	beq.n	800c1e6 <HAL_CAN_IRQHandler+0x2f8>
 800c1e0:	2b20      	cmp	r3, #32
 800c1e2:	d005      	beq.n	800c1f0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800c1e4:	e01d      	b.n	800c222 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800c1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e8:	f043 0308 	orr.w	r3, r3, #8
 800c1ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c1ee:	e019      	b.n	800c224 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f2:	f043 0310 	orr.w	r3, r3, #16
 800c1f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c1f8:	e014      	b.n	800c224 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fc:	f043 0320 	orr.w	r3, r3, #32
 800c200:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c202:	e00f      	b.n	800c224 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c20a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c20c:	e00a      	b.n	800c224 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c214:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c216:	e005      	b.n	800c224 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800c218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c21e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c220:	e000      	b.n	800c224 <HAL_CAN_IRQHandler+0x336>
            break;
 800c222:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	699a      	ldr	r2, [r3, #24]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c232:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2204      	movs	r2, #4
 800c23a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800c23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d008      	beq.n	800c254 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	431a      	orrs	r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 f872 	bl	800c338 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800c254:	bf00      	nop
 800c256:	3728      	adds	r7, #40	; 0x28
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800c264:	bf00      	nop
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800c278:	bf00      	nop
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800c284:	b480      	push	{r7}
 800c286:	b083      	sub	sp, #12
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800c28c:	bf00      	nop
 800c28e:	370c      	adds	r7, #12
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr

0800c298 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800c298:	b480      	push	{r7}
 800c29a:	b083      	sub	sp, #12
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800c2a0:	bf00      	nop
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr

0800c2ac <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800c2b4:	bf00      	nop
 800c2b6:	370c      	adds	r7, #12
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800c2c8:	bf00      	nop
 800c2ca:	370c      	adds	r7, #12
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800c2dc:	bf00      	nop
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800c2f0:	bf00      	nop
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800c304:	bf00      	nop
 800c306:	370c      	adds	r7, #12
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800c318:	bf00      	nop
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800c32c:	bf00      	nop
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800c340:	bf00      	nop
 800c342:	370c      	adds	r7, #12
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <__NVIC_SetPriorityGrouping>:
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f003 0307 	and.w	r3, r3, #7
 800c35a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c35c:	4b0b      	ldr	r3, [pc, #44]	; (800c38c <__NVIC_SetPriorityGrouping+0x40>)
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c362:	68ba      	ldr	r2, [r7, #8]
 800c364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c368:	4013      	ands	r3, r2
 800c36a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800c374:	4b06      	ldr	r3, [pc, #24]	; (800c390 <__NVIC_SetPriorityGrouping+0x44>)
 800c376:	4313      	orrs	r3, r2
 800c378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c37a:	4a04      	ldr	r2, [pc, #16]	; (800c38c <__NVIC_SetPriorityGrouping+0x40>)
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	60d3      	str	r3, [r2, #12]
}
 800c380:	bf00      	nop
 800c382:	3714      	adds	r7, #20
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr
 800c38c:	e000ed00 	.word	0xe000ed00
 800c390:	05fa0000 	.word	0x05fa0000

0800c394 <__NVIC_GetPriorityGrouping>:
{
 800c394:	b480      	push	{r7}
 800c396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c398:	4b04      	ldr	r3, [pc, #16]	; (800c3ac <__NVIC_GetPriorityGrouping+0x18>)
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	0a1b      	lsrs	r3, r3, #8
 800c39e:	f003 0307 	and.w	r3, r3, #7
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr
 800c3ac:	e000ed00 	.word	0xe000ed00

0800c3b0 <__NVIC_EnableIRQ>:
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c3ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	db0b      	blt.n	800c3da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c3c2:	79fb      	ldrb	r3, [r7, #7]
 800c3c4:	f003 021f 	and.w	r2, r3, #31
 800c3c8:	4907      	ldr	r1, [pc, #28]	; (800c3e8 <__NVIC_EnableIRQ+0x38>)
 800c3ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3ce:	095b      	lsrs	r3, r3, #5
 800c3d0:	2001      	movs	r0, #1
 800c3d2:	fa00 f202 	lsl.w	r2, r0, r2
 800c3d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c3da:	bf00      	nop
 800c3dc:	370c      	adds	r7, #12
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop
 800c3e8:	e000e100 	.word	0xe000e100

0800c3ec <__NVIC_DisableIRQ>:
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c3f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	db12      	blt.n	800c424 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c3fe:	79fb      	ldrb	r3, [r7, #7]
 800c400:	f003 021f 	and.w	r2, r3, #31
 800c404:	490a      	ldr	r1, [pc, #40]	; (800c430 <__NVIC_DisableIRQ+0x44>)
 800c406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c40a:	095b      	lsrs	r3, r3, #5
 800c40c:	2001      	movs	r0, #1
 800c40e:	fa00 f202 	lsl.w	r2, r0, r2
 800c412:	3320      	adds	r3, #32
 800c414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c418:	f3bf 8f4f 	dsb	sy
}
 800c41c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c41e:	f3bf 8f6f 	isb	sy
}
 800c422:	bf00      	nop
}
 800c424:	bf00      	nop
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr
 800c430:	e000e100 	.word	0xe000e100

0800c434 <__NVIC_SetPriority>:
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	4603      	mov	r3, r0
 800c43c:	6039      	str	r1, [r7, #0]
 800c43e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c444:	2b00      	cmp	r3, #0
 800c446:	db0a      	blt.n	800c45e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	b2da      	uxtb	r2, r3
 800c44c:	490c      	ldr	r1, [pc, #48]	; (800c480 <__NVIC_SetPriority+0x4c>)
 800c44e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c452:	0112      	lsls	r2, r2, #4
 800c454:	b2d2      	uxtb	r2, r2
 800c456:	440b      	add	r3, r1
 800c458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c45c:	e00a      	b.n	800c474 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	b2da      	uxtb	r2, r3
 800c462:	4908      	ldr	r1, [pc, #32]	; (800c484 <__NVIC_SetPriority+0x50>)
 800c464:	79fb      	ldrb	r3, [r7, #7]
 800c466:	f003 030f 	and.w	r3, r3, #15
 800c46a:	3b04      	subs	r3, #4
 800c46c:	0112      	lsls	r2, r2, #4
 800c46e:	b2d2      	uxtb	r2, r2
 800c470:	440b      	add	r3, r1
 800c472:	761a      	strb	r2, [r3, #24]
}
 800c474:	bf00      	nop
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr
 800c480:	e000e100 	.word	0xe000e100
 800c484:	e000ed00 	.word	0xe000ed00

0800c488 <NVIC_EncodePriority>:
{
 800c488:	b480      	push	{r7}
 800c48a:	b089      	sub	sp, #36	; 0x24
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f003 0307 	and.w	r3, r3, #7
 800c49a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	f1c3 0307 	rsb	r3, r3, #7
 800c4a2:	2b04      	cmp	r3, #4
 800c4a4:	bf28      	it	cs
 800c4a6:	2304      	movcs	r3, #4
 800c4a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	3304      	adds	r3, #4
 800c4ae:	2b06      	cmp	r3, #6
 800c4b0:	d902      	bls.n	800c4b8 <NVIC_EncodePriority+0x30>
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	3b03      	subs	r3, #3
 800c4b6:	e000      	b.n	800c4ba <NVIC_EncodePriority+0x32>
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c4c0:	69bb      	ldr	r3, [r7, #24]
 800c4c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c4c6:	43da      	mvns	r2, r3
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	401a      	ands	r2, r3
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c4d0:	f04f 31ff 	mov.w	r1, #4294967295
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	fa01 f303 	lsl.w	r3, r1, r3
 800c4da:	43d9      	mvns	r1, r3
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c4e0:	4313      	orrs	r3, r2
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3724      	adds	r7, #36	; 0x24
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr

0800c4ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b082      	sub	sp, #8
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7ff ff28 	bl	800c34c <__NVIC_SetPriorityGrouping>
}
 800c4fc:	bf00      	nop
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c504:	b580      	push	{r7, lr}
 800c506:	b086      	sub	sp, #24
 800c508:	af00      	add	r7, sp, #0
 800c50a:	4603      	mov	r3, r0
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	607a      	str	r2, [r7, #4]
 800c510:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c512:	2300      	movs	r3, #0
 800c514:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c516:	f7ff ff3d 	bl	800c394 <__NVIC_GetPriorityGrouping>
 800c51a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	68b9      	ldr	r1, [r7, #8]
 800c520:	6978      	ldr	r0, [r7, #20]
 800c522:	f7ff ffb1 	bl	800c488 <NVIC_EncodePriority>
 800c526:	4602      	mov	r2, r0
 800c528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c52c:	4611      	mov	r1, r2
 800c52e:	4618      	mov	r0, r3
 800c530:	f7ff ff80 	bl	800c434 <__NVIC_SetPriority>
}
 800c534:	bf00      	nop
 800c536:	3718      	adds	r7, #24
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	4603      	mov	r3, r0
 800c544:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7ff ff30 	bl	800c3b0 <__NVIC_EnableIRQ>
}
 800c550:	bf00      	nop
 800c552:	3708      	adds	r7, #8
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	4603      	mov	r3, r0
 800c560:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c566:	4618      	mov	r0, r3
 800c568:	f7ff ff40 	bl	800c3ec <__NVIC_DisableIRQ>
}
 800c56c:	bf00      	nop
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d101      	bne.n	800c586 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	e054      	b.n	800c630 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	7f5b      	ldrb	r3, [r3, #29]
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d105      	bne.n	800c59c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7f5 fb08 	bl	8001bac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2202      	movs	r2, #2
 800c5a0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	791b      	ldrb	r3, [r3, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d10c      	bne.n	800c5c4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a22      	ldr	r2, [pc, #136]	; (800c638 <HAL_CRC_Init+0xc4>)
 800c5b0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	689a      	ldr	r2, [r3, #8]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f022 0218 	bic.w	r2, r2, #24
 800c5c0:	609a      	str	r2, [r3, #8]
 800c5c2:	e00c      	b.n	800c5de <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6899      	ldr	r1, [r3, #8]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	68db      	ldr	r3, [r3, #12]
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f834 	bl	800c63c <HAL_CRCEx_Polynomial_Set>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d001      	beq.n	800c5de <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e028      	b.n	800c630 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	795b      	ldrb	r3, [r3, #5]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d105      	bne.n	800c5f2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ee:	611a      	str	r2, [r3, #16]
 800c5f0:	e004      	b.n	800c5fc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	6912      	ldr	r2, [r2, #16]
 800c5fa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	695a      	ldr	r2, [r3, #20]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	430a      	orrs	r2, r1
 800c610:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	699a      	ldr	r2, [r3, #24]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	430a      	orrs	r2, r1
 800c626:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800c62e:	2300      	movs	r3, #0
}
 800c630:	4618      	mov	r0, r3
 800c632:	3708      	adds	r7, #8
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	04c11db7 	.word	0x04c11db7

0800c63c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b087      	sub	sp, #28
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c648:	2300      	movs	r3, #0
 800c64a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c64c:	231f      	movs	r3, #31
 800c64e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c650:	bf00      	nop
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	1e5a      	subs	r2, r3, #1
 800c656:	613a      	str	r2, [r7, #16]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d009      	beq.n	800c670 <HAL_CRCEx_Polynomial_Set+0x34>
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	f003 031f 	and.w	r3, r3, #31
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	fa22 f303 	lsr.w	r3, r2, r3
 800c668:	f003 0301 	and.w	r3, r3, #1
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d0f0      	beq.n	800c652 <HAL_CRCEx_Polynomial_Set+0x16>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2b18      	cmp	r3, #24
 800c674:	d846      	bhi.n	800c704 <HAL_CRCEx_Polynomial_Set+0xc8>
 800c676:	a201      	add	r2, pc, #4	; (adr r2, 800c67c <HAL_CRCEx_Polynomial_Set+0x40>)
 800c678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c67c:	0800c70b 	.word	0x0800c70b
 800c680:	0800c705 	.word	0x0800c705
 800c684:	0800c705 	.word	0x0800c705
 800c688:	0800c705 	.word	0x0800c705
 800c68c:	0800c705 	.word	0x0800c705
 800c690:	0800c705 	.word	0x0800c705
 800c694:	0800c705 	.word	0x0800c705
 800c698:	0800c705 	.word	0x0800c705
 800c69c:	0800c6f9 	.word	0x0800c6f9
 800c6a0:	0800c705 	.word	0x0800c705
 800c6a4:	0800c705 	.word	0x0800c705
 800c6a8:	0800c705 	.word	0x0800c705
 800c6ac:	0800c705 	.word	0x0800c705
 800c6b0:	0800c705 	.word	0x0800c705
 800c6b4:	0800c705 	.word	0x0800c705
 800c6b8:	0800c705 	.word	0x0800c705
 800c6bc:	0800c6ed 	.word	0x0800c6ed
 800c6c0:	0800c705 	.word	0x0800c705
 800c6c4:	0800c705 	.word	0x0800c705
 800c6c8:	0800c705 	.word	0x0800c705
 800c6cc:	0800c705 	.word	0x0800c705
 800c6d0:	0800c705 	.word	0x0800c705
 800c6d4:	0800c705 	.word	0x0800c705
 800c6d8:	0800c705 	.word	0x0800c705
 800c6dc:	0800c6e1 	.word	0x0800c6e1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	2b06      	cmp	r3, #6
 800c6e4:	d913      	bls.n	800c70e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c6ea:	e010      	b.n	800c70e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	2b07      	cmp	r3, #7
 800c6f0:	d90f      	bls.n	800c712 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c6f6:	e00c      	b.n	800c712 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	2b0f      	cmp	r3, #15
 800c6fc:	d90b      	bls.n	800c716 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800c6fe:	2301      	movs	r3, #1
 800c700:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c702:	e008      	b.n	800c716 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	75fb      	strb	r3, [r7, #23]
      break;
 800c708:	e006      	b.n	800c718 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c70a:	bf00      	nop
 800c70c:	e004      	b.n	800c718 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c70e:	bf00      	nop
 800c710:	e002      	b.n	800c718 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c712:	bf00      	nop
 800c714:	e000      	b.n	800c718 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c716:	bf00      	nop
  }
  if (status == HAL_OK)
 800c718:	7dfb      	ldrb	r3, [r7, #23]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d10d      	bne.n	800c73a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68ba      	ldr	r2, [r7, #8]
 800c724:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	f023 0118 	bic.w	r1, r3, #24
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	430a      	orrs	r2, r1
 800c738:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800c73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	371c      	adds	r7, #28
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr

0800c748 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b086      	sub	sp, #24
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c750:	2300      	movs	r3, #0
 800c752:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c754:	f7fe fb6e 	bl	800ae34 <HAL_GetTick>
 800c758:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d101      	bne.n	800c764 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c760:	2301      	movs	r3, #1
 800c762:	e099      	b.n	800c898 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2202      	movs	r2, #2
 800c770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f022 0201 	bic.w	r2, r2, #1
 800c782:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c784:	e00f      	b.n	800c7a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c786:	f7fe fb55 	bl	800ae34 <HAL_GetTick>
 800c78a:	4602      	mov	r2, r0
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	2b05      	cmp	r3, #5
 800c792:	d908      	bls.n	800c7a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2220      	movs	r2, #32
 800c798:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2203      	movs	r2, #3
 800c79e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c7a2:	2303      	movs	r3, #3
 800c7a4:	e078      	b.n	800c898 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f003 0301 	and.w	r3, r3, #1
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d1e8      	bne.n	800c786 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c7bc:	697a      	ldr	r2, [r7, #20]
 800c7be:	4b38      	ldr	r3, [pc, #224]	; (800c8a0 <HAL_DMA_Init+0x158>)
 800c7c0:	4013      	ands	r3, r2
 800c7c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	685a      	ldr	r2, [r3, #4]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c7d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c7de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	699b      	ldr	r3, [r3, #24]
 800c7e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c7ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a1b      	ldr	r3, [r3, #32]
 800c7f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c7f2:	697a      	ldr	r2, [r7, #20]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fc:	2b04      	cmp	r3, #4
 800c7fe:	d107      	bne.n	800c810 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c808:	4313      	orrs	r3, r2
 800c80a:	697a      	ldr	r2, [r7, #20]
 800c80c:	4313      	orrs	r3, r2
 800c80e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	697a      	ldr	r2, [r7, #20]
 800c816:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	695b      	ldr	r3, [r3, #20]
 800c81e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	f023 0307 	bic.w	r3, r3, #7
 800c826:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c82c:	697a      	ldr	r2, [r7, #20]
 800c82e:	4313      	orrs	r3, r2
 800c830:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c836:	2b04      	cmp	r3, #4
 800c838:	d117      	bne.n	800c86a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	4313      	orrs	r3, r2
 800c842:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00e      	beq.n	800c86a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 fa99 	bl	800cd84 <DMA_CheckFifoParam>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d008      	beq.n	800c86a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2240      	movs	r2, #64	; 0x40
 800c85c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c866:	2301      	movs	r3, #1
 800c868:	e016      	b.n	800c898 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	697a      	ldr	r2, [r7, #20]
 800c870:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 fa50 	bl	800cd18 <DMA_CalcBaseAndBitshift>
 800c878:	4603      	mov	r3, r0
 800c87a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c880:	223f      	movs	r2, #63	; 0x3f
 800c882:	409a      	lsls	r2, r3
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2201      	movs	r2, #1
 800c892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c896:	2300      	movs	r3, #0
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	e010803f 	.word	0xe010803f

0800c8a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b086      	sub	sp, #24
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
 800c8b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d101      	bne.n	800c8ca <HAL_DMA_Start_IT+0x26>
 800c8c6:	2302      	movs	r3, #2
 800c8c8:	e048      	b.n	800c95c <HAL_DMA_Start_IT+0xb8>
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d137      	bne.n	800c94e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2202      	movs	r2, #2
 800c8e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	68b9      	ldr	r1, [r7, #8]
 800c8f2:	68f8      	ldr	r0, [r7, #12]
 800c8f4:	f000 f9e2 	bl	800ccbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8fc:	223f      	movs	r2, #63	; 0x3f
 800c8fe:	409a      	lsls	r2, r3
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f042 0216 	orr.w	r2, r2, #22
 800c912:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	695a      	ldr	r2, [r3, #20]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c922:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d007      	beq.n	800c93c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f042 0208 	orr.w	r2, r2, #8
 800c93a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f042 0201 	orr.w	r2, r2, #1
 800c94a:	601a      	str	r2, [r3, #0]
 800c94c:	e005      	b.n	800c95a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2200      	movs	r2, #0
 800c952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c956:	2302      	movs	r3, #2
 800c958:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c95a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3718      	adds	r7, #24
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c972:	b2db      	uxtb	r3, r3
 800c974:	2b02      	cmp	r3, #2
 800c976:	d004      	beq.n	800c982 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2280      	movs	r2, #128	; 0x80
 800c97c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c97e:	2301      	movs	r3, #1
 800c980:	e00c      	b.n	800c99c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2205      	movs	r2, #5
 800c986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f022 0201 	bic.w	r2, r2, #1
 800c998:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b086      	sub	sp, #24
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800c9b4:	4b92      	ldr	r3, [pc, #584]	; (800cc00 <HAL_DMA_IRQHandler+0x258>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a92      	ldr	r2, [pc, #584]	; (800cc04 <HAL_DMA_IRQHandler+0x25c>)
 800c9ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c9be:	0a9b      	lsrs	r3, r3, #10
 800c9c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9d2:	2208      	movs	r2, #8
 800c9d4:	409a      	lsls	r2, r3
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	4013      	ands	r3, r2
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d01a      	beq.n	800ca14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f003 0304 	and.w	r3, r3, #4
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d013      	beq.n	800ca14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f022 0204 	bic.w	r2, r2, #4
 800c9fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca00:	2208      	movs	r2, #8
 800ca02:	409a      	lsls	r2, r3
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca0c:	f043 0201 	orr.w	r2, r3, #1
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca18:	2201      	movs	r2, #1
 800ca1a:	409a      	lsls	r2, r3
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	4013      	ands	r3, r2
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d012      	beq.n	800ca4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	695b      	ldr	r3, [r3, #20]
 800ca2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00b      	beq.n	800ca4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca36:	2201      	movs	r2, #1
 800ca38:	409a      	lsls	r2, r3
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca42:	f043 0202 	orr.w	r2, r3, #2
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca4e:	2204      	movs	r2, #4
 800ca50:	409a      	lsls	r2, r3
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	4013      	ands	r3, r2
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d012      	beq.n	800ca80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f003 0302 	and.w	r3, r3, #2
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00b      	beq.n	800ca80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca6c:	2204      	movs	r2, #4
 800ca6e:	409a      	lsls	r2, r3
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca78:	f043 0204 	orr.w	r2, r3, #4
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca84:	2210      	movs	r2, #16
 800ca86:	409a      	lsls	r2, r3
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d043      	beq.n	800cb18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f003 0308 	and.w	r3, r3, #8
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d03c      	beq.n	800cb18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800caa2:	2210      	movs	r2, #16
 800caa4:	409a      	lsls	r2, r3
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d018      	beq.n	800caea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d108      	bne.n	800cad8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d024      	beq.n	800cb18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	4798      	blx	r3
 800cad6:	e01f      	b.n	800cb18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d01b      	beq.n	800cb18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	4798      	blx	r3
 800cae8:	e016      	b.n	800cb18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d107      	bne.n	800cb08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f022 0208 	bic.w	r2, r2, #8
 800cb06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d003      	beq.n	800cb18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb1c:	2220      	movs	r2, #32
 800cb1e:	409a      	lsls	r2, r3
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	4013      	ands	r3, r2
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f000 808e 	beq.w	800cc46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f003 0310 	and.w	r3, r3, #16
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f000 8086 	beq.w	800cc46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb3e:	2220      	movs	r2, #32
 800cb40:	409a      	lsls	r2, r3
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	2b05      	cmp	r3, #5
 800cb50:	d136      	bne.n	800cbc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f022 0216 	bic.w	r2, r2, #22
 800cb60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	695a      	ldr	r2, [r3, #20]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cb70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d103      	bne.n	800cb82 <HAL_DMA_IRQHandler+0x1da>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d007      	beq.n	800cb92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f022 0208 	bic.w	r2, r2, #8
 800cb90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb96:	223f      	movs	r2, #63	; 0x3f
 800cb98:	409a      	lsls	r2, r3
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2200      	movs	r2, #0
 800cba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2201      	movs	r2, #1
 800cbaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d07d      	beq.n	800ccb2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	4798      	blx	r3
        }
        return;
 800cbbe:	e078      	b.n	800ccb2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d01c      	beq.n	800cc08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d108      	bne.n	800cbee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d030      	beq.n	800cc46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	4798      	blx	r3
 800cbec:	e02b      	b.n	800cc46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d027      	beq.n	800cc46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	4798      	blx	r3
 800cbfe:	e022      	b.n	800cc46 <HAL_DMA_IRQHandler+0x29e>
 800cc00:	20000014 	.word	0x20000014
 800cc04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d10f      	bne.n	800cc36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f022 0210 	bic.w	r2, r2, #16
 800cc24:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2201      	movs	r2, #1
 800cc32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d003      	beq.n	800cc46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d032      	beq.n	800ccb4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc52:	f003 0301 	and.w	r3, r3, #1
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d022      	beq.n	800cca0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2205      	movs	r2, #5
 800cc5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f022 0201 	bic.w	r2, r2, #1
 800cc70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	3301      	adds	r3, #1
 800cc76:	60bb      	str	r3, [r7, #8]
 800cc78:	697a      	ldr	r2, [r7, #20]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d307      	bcc.n	800cc8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f003 0301 	and.w	r3, r3, #1
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1f2      	bne.n	800cc72 <HAL_DMA_IRQHandler+0x2ca>
 800cc8c:	e000      	b.n	800cc90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800cc8e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2200      	movs	r2, #0
 800cc94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d005      	beq.n	800ccb4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	4798      	blx	r3
 800ccb0:	e000      	b.n	800ccb4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800ccb2:	bf00      	nop
    }
  }
}
 800ccb4:	3718      	adds	r7, #24
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop

0800ccbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	607a      	str	r2, [r7, #4]
 800ccc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ccd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	683a      	ldr	r2, [r7, #0]
 800cce0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	2b40      	cmp	r3, #64	; 0x40
 800cce8:	d108      	bne.n	800ccfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	68ba      	ldr	r2, [r7, #8]
 800ccf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ccfa:	e007      	b.n	800cd0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	68ba      	ldr	r2, [r7, #8]
 800cd02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	60da      	str	r2, [r3, #12]
}
 800cd0c:	bf00      	nop
 800cd0e:	3714      	adds	r7, #20
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	3b10      	subs	r3, #16
 800cd28:	4a13      	ldr	r2, [pc, #76]	; (800cd78 <DMA_CalcBaseAndBitshift+0x60>)
 800cd2a:	fba2 2303 	umull	r2, r3, r2, r3
 800cd2e:	091b      	lsrs	r3, r3, #4
 800cd30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800cd32:	4a12      	ldr	r2, [pc, #72]	; (800cd7c <DMA_CalcBaseAndBitshift+0x64>)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	4413      	add	r3, r2
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2b03      	cmp	r3, #3
 800cd44:	d908      	bls.n	800cd58 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	4b0c      	ldr	r3, [pc, #48]	; (800cd80 <DMA_CalcBaseAndBitshift+0x68>)
 800cd4e:	4013      	ands	r3, r2
 800cd50:	1d1a      	adds	r2, r3, #4
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	659a      	str	r2, [r3, #88]	; 0x58
 800cd56:	e006      	b.n	800cd66 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	4b08      	ldr	r3, [pc, #32]	; (800cd80 <DMA_CalcBaseAndBitshift+0x68>)
 800cd60:	4013      	ands	r3, r2
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3714      	adds	r7, #20
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	aaaaaaab 	.word	0xaaaaaaab
 800cd7c:	0802c8a4 	.word	0x0802c8a4
 800cd80:	fffffc00 	.word	0xfffffc00

0800cd84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	699b      	ldr	r3, [r3, #24]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d11f      	bne.n	800cdde <DMA_CheckFifoParam+0x5a>
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	2b03      	cmp	r3, #3
 800cda2:	d856      	bhi.n	800ce52 <DMA_CheckFifoParam+0xce>
 800cda4:	a201      	add	r2, pc, #4	; (adr r2, 800cdac <DMA_CheckFifoParam+0x28>)
 800cda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdaa:	bf00      	nop
 800cdac:	0800cdbd 	.word	0x0800cdbd
 800cdb0:	0800cdcf 	.word	0x0800cdcf
 800cdb4:	0800cdbd 	.word	0x0800cdbd
 800cdb8:	0800ce53 	.word	0x0800ce53
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d046      	beq.n	800ce56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cdcc:	e043      	b.n	800ce56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800cdd6:	d140      	bne.n	800ce5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cddc:	e03d      	b.n	800ce5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	699b      	ldr	r3, [r3, #24]
 800cde2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cde6:	d121      	bne.n	800ce2c <DMA_CheckFifoParam+0xa8>
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2b03      	cmp	r3, #3
 800cdec:	d837      	bhi.n	800ce5e <DMA_CheckFifoParam+0xda>
 800cdee:	a201      	add	r2, pc, #4	; (adr r2, 800cdf4 <DMA_CheckFifoParam+0x70>)
 800cdf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf4:	0800ce05 	.word	0x0800ce05
 800cdf8:	0800ce0b 	.word	0x0800ce0b
 800cdfc:	0800ce05 	.word	0x0800ce05
 800ce00:	0800ce1d 	.word	0x0800ce1d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ce04:	2301      	movs	r3, #1
 800ce06:	73fb      	strb	r3, [r7, #15]
      break;
 800ce08:	e030      	b.n	800ce6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d025      	beq.n	800ce62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800ce16:	2301      	movs	r3, #1
 800ce18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ce1a:	e022      	b.n	800ce62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ce24:	d11f      	bne.n	800ce66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800ce26:	2301      	movs	r3, #1
 800ce28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ce2a:	e01c      	b.n	800ce66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	2b02      	cmp	r3, #2
 800ce30:	d903      	bls.n	800ce3a <DMA_CheckFifoParam+0xb6>
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	2b03      	cmp	r3, #3
 800ce36:	d003      	beq.n	800ce40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ce38:	e018      	b.n	800ce6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ce3e:	e015      	b.n	800ce6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00e      	beq.n	800ce6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	73fb      	strb	r3, [r7, #15]
      break;
 800ce50:	e00b      	b.n	800ce6a <DMA_CheckFifoParam+0xe6>
      break;
 800ce52:	bf00      	nop
 800ce54:	e00a      	b.n	800ce6c <DMA_CheckFifoParam+0xe8>
      break;
 800ce56:	bf00      	nop
 800ce58:	e008      	b.n	800ce6c <DMA_CheckFifoParam+0xe8>
      break;
 800ce5a:	bf00      	nop
 800ce5c:	e006      	b.n	800ce6c <DMA_CheckFifoParam+0xe8>
      break;
 800ce5e:	bf00      	nop
 800ce60:	e004      	b.n	800ce6c <DMA_CheckFifoParam+0xe8>
      break;
 800ce62:	bf00      	nop
 800ce64:	e002      	b.n	800ce6c <DMA_CheckFifoParam+0xe8>
      break;   
 800ce66:	bf00      	nop
 800ce68:	e000      	b.n	800ce6c <DMA_CheckFifoParam+0xe8>
      break;
 800ce6a:	bf00      	nop
    }
  } 
  
  return status; 
 800ce6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3714      	adds	r7, #20
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop

0800ce7c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d101      	bne.n	800ce8e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e049      	b.n	800cf22 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d106      	bne.n	800cea8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f7f4 ff00 	bl	8001ca8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2202      	movs	r2, #2
 800ceac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	685a      	ldr	r2, [r3, #4]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	430a      	orrs	r2, r1
 800cec4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cecc:	f023 0107 	bic.w	r1, r3, #7
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	689a      	ldr	r2, [r3, #8]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	430a      	orrs	r2, r1
 800ceda:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cee2:	4b12      	ldr	r3, [pc, #72]	; (800cf2c <HAL_DMA2D_Init+0xb0>)
 800cee4:	4013      	ands	r3, r2
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	68d1      	ldr	r1, [r2, #12]
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	6812      	ldr	r2, [r2, #0]
 800ceee:	430b      	orrs	r3, r1
 800cef0:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	691b      	ldr	r3, [r3, #16]
 800cf00:	051a      	lsls	r2, r3, #20
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	695b      	ldr	r3, [r3, #20]
 800cf06:	055b      	lsls	r3, r3, #21
 800cf08:	431a      	orrs	r2, r3
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	430a      	orrs	r2, r1
 800cf10:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2200      	movs	r2, #0
 800cf16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	ffffc000 	.word	0xffffc000

0800cf30 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f003 0301 	and.w	r3, r3, #1
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d026      	beq.n	800cfa0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d021      	beq.n	800cfa0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cf6a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf70:	f043 0201 	orr.w	r2, r3, #1
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2204      	movs	r2, #4
 800cf84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	69db      	ldr	r3, [r3, #28]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d003      	beq.n	800cfa0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	69db      	ldr	r3, [r3, #28]
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f003 0320 	and.w	r3, r3, #32
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d026      	beq.n	800cff8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d021      	beq.n	800cff8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cfc2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2220      	movs	r2, #32
 800cfca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfd0:	f043 0202 	orr.w	r2, r3, #2
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2204      	movs	r2, #4
 800cfdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	69db      	ldr	r3, [r3, #28]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d003      	beq.n	800cff8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	69db      	ldr	r3, [r3, #28]
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f003 0308 	and.w	r3, r3, #8
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d026      	beq.n	800d050 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d021      	beq.n	800d050 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d01a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2208      	movs	r2, #8
 800d022:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d028:	f043 0204 	orr.w	r2, r3, #4
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2204      	movs	r2, #4
 800d034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2200      	movs	r2, #0
 800d03c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	69db      	ldr	r3, [r3, #28]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d003      	beq.n	800d050 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	69db      	ldr	r3, [r3, #28]
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f003 0304 	and.w	r3, r3, #4
 800d056:	2b00      	cmp	r3, #0
 800d058:	d013      	beq.n	800d082 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00e      	beq.n	800d082 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d072:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2204      	movs	r2, #4
 800d07a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 f853 	bl	800d128 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f003 0302 	and.w	r3, r3, #2
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d024      	beq.n	800d0d6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d092:	2b00      	cmp	r3, #0
 800d094:	d01f      	beq.n	800d0d6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d0a4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2202      	movs	r2, #2
 800d0ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	699b      	ldr	r3, [r3, #24]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d003      	beq.n	800d0d6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	699b      	ldr	r3, [r3, #24]
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f003 0310 	and.w	r3, r3, #16
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d01f      	beq.n	800d120 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d01a      	beq.n	800d120 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	681a      	ldr	r2, [r3, #0]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d0f8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2210      	movs	r2, #16
 800d100:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2201      	movs	r2, #1
 800d10e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f80e 	bl	800d13c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800d120:	bf00      	nop
 800d122:	3710      	adds	r7, #16
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800d130:	bf00      	nop
 800d132:	370c      	adds	r7, #12
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800d144:	bf00      	nop
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800d150:	b480      	push	{r7}
 800d152:	b087      	sub	sp, #28
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d101      	bne.n	800d170 <HAL_DMA2D_ConfigLayer+0x20>
 800d16c:	2302      	movs	r3, #2
 800d16e:	e084      	b.n	800d27a <HAL_DMA2D_ConfigLayer+0x12a>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2202      	movs	r2, #2
 800d17c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800d180:	683a      	ldr	r2, [r7, #0]
 800d182:	4613      	mov	r3, r2
 800d184:	005b      	lsls	r3, r3, #1
 800d186:	4413      	add	r3, r2
 800d188:	00db      	lsls	r3, r3, #3
 800d18a:	3320      	adds	r3, #32
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	4413      	add	r3, r2
 800d190:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	685a      	ldr	r2, [r3, #4]
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	041b      	lsls	r3, r3, #16
 800d19c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	691b      	ldr	r3, [r3, #16]
 800d1a2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d1a4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	695b      	ldr	r3, [r3, #20]
 800d1aa:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800d1b0:	4b35      	ldr	r3, [pc, #212]	; (800d288 <HAL_DMA2D_ConfigLayer+0x138>)
 800d1b2:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	2b0a      	cmp	r3, #10
 800d1ba:	d003      	beq.n	800d1c4 <HAL_DMA2D_ConfigLayer+0x74>
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	2b09      	cmp	r3, #9
 800d1c2:	d107      	bne.n	800d1d4 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d1cc:	697a      	ldr	r2, [r7, #20]
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	617b      	str	r3, [r7, #20]
 800d1d2:	e005      	b.n	800d1e0 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	061b      	lsls	r3, r3, #24
 800d1da:	697a      	ldr	r2, [r7, #20]
 800d1dc:	4313      	orrs	r3, r2
 800d1de:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d120      	bne.n	800d228 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	43db      	mvns	r3, r3
 800d1f0:	ea02 0103 	and.w	r1, r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	697a      	ldr	r2, [r7, #20]
 800d1fa:	430a      	orrs	r2, r1
 800d1fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	693a      	ldr	r2, [r7, #16]
 800d204:	6812      	ldr	r2, [r2, #0]
 800d206:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	2b0a      	cmp	r3, #10
 800d20e:	d003      	beq.n	800d218 <HAL_DMA2D_ConfigLayer+0xc8>
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	2b09      	cmp	r3, #9
 800d216:	d127      	bne.n	800d268 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	68da      	ldr	r2, [r3, #12]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800d224:	629a      	str	r2, [r3, #40]	; 0x28
 800d226:	e01f      	b.n	800d268 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	69da      	ldr	r2, [r3, #28]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	43db      	mvns	r3, r3
 800d232:	ea02 0103 	and.w	r1, r2, r3
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	697a      	ldr	r2, [r7, #20]
 800d23c:	430a      	orrs	r2, r1
 800d23e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	693a      	ldr	r2, [r7, #16]
 800d246:	6812      	ldr	r2, [r2, #0]
 800d248:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	2b0a      	cmp	r3, #10
 800d250:	d003      	beq.n	800d25a <HAL_DMA2D_ConfigLayer+0x10a>
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	2b09      	cmp	r3, #9
 800d258:	d106      	bne.n	800d268 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	68da      	ldr	r2, [r3, #12]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800d266:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2201      	movs	r2, #1
 800d26c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2200      	movs	r2, #0
 800d274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d278:	2300      	movs	r3, #0
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	371c      	adds	r7, #28
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	ff33000f 	.word	0xff33000f

0800d28c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b089      	sub	sp, #36	; 0x24
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800d296:	2300      	movs	r3, #0
 800d298:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800d29a:	2300      	movs	r3, #0
 800d29c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	61fb      	str	r3, [r7, #28]
 800d2aa:	e175      	b.n	800d598 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d2b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	697a      	ldr	r2, [r7, #20]
 800d2bc:	4013      	ands	r3, r2
 800d2be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d2c0:	693a      	ldr	r2, [r7, #16]
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	f040 8164 	bne.w	800d592 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d00b      	beq.n	800d2ea <HAL_GPIO_Init+0x5e>
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	2b02      	cmp	r3, #2
 800d2d8:	d007      	beq.n	800d2ea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d2de:	2b11      	cmp	r3, #17
 800d2e0:	d003      	beq.n	800d2ea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	2b12      	cmp	r3, #18
 800d2e8:	d130      	bne.n	800d34c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	005b      	lsls	r3, r3, #1
 800d2f4:	2203      	movs	r2, #3
 800d2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2fa:	43db      	mvns	r3, r3
 800d2fc:	69ba      	ldr	r2, [r7, #24]
 800d2fe:	4013      	ands	r3, r2
 800d300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	68da      	ldr	r2, [r3, #12]
 800d306:	69fb      	ldr	r3, [r7, #28]
 800d308:	005b      	lsls	r3, r3, #1
 800d30a:	fa02 f303 	lsl.w	r3, r2, r3
 800d30e:	69ba      	ldr	r2, [r7, #24]
 800d310:	4313      	orrs	r3, r2
 800d312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	69ba      	ldr	r2, [r7, #24]
 800d318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d320:	2201      	movs	r2, #1
 800d322:	69fb      	ldr	r3, [r7, #28]
 800d324:	fa02 f303 	lsl.w	r3, r2, r3
 800d328:	43db      	mvns	r3, r3
 800d32a:	69ba      	ldr	r2, [r7, #24]
 800d32c:	4013      	ands	r3, r2
 800d32e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	091b      	lsrs	r3, r3, #4
 800d336:	f003 0201 	and.w	r2, r3, #1
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	fa02 f303 	lsl.w	r3, r2, r3
 800d340:	69ba      	ldr	r2, [r7, #24]
 800d342:	4313      	orrs	r3, r2
 800d344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	69ba      	ldr	r2, [r7, #24]
 800d34a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	005b      	lsls	r3, r3, #1
 800d356:	2203      	movs	r2, #3
 800d358:	fa02 f303 	lsl.w	r3, r2, r3
 800d35c:	43db      	mvns	r3, r3
 800d35e:	69ba      	ldr	r2, [r7, #24]
 800d360:	4013      	ands	r3, r2
 800d362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	689a      	ldr	r2, [r3, #8]
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	005b      	lsls	r3, r3, #1
 800d36c:	fa02 f303 	lsl.w	r3, r2, r3
 800d370:	69ba      	ldr	r2, [r7, #24]
 800d372:	4313      	orrs	r3, r2
 800d374:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	69ba      	ldr	r2, [r7, #24]
 800d37a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	2b02      	cmp	r3, #2
 800d382:	d003      	beq.n	800d38c <HAL_GPIO_Init+0x100>
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	2b12      	cmp	r3, #18
 800d38a:	d123      	bne.n	800d3d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	08da      	lsrs	r2, r3, #3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	3208      	adds	r2, #8
 800d394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	f003 0307 	and.w	r3, r3, #7
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	220f      	movs	r2, #15
 800d3a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d3a8:	43db      	mvns	r3, r3
 800d3aa:	69ba      	ldr	r2, [r7, #24]
 800d3ac:	4013      	ands	r3, r2
 800d3ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	691a      	ldr	r2, [r3, #16]
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	f003 0307 	and.w	r3, r3, #7
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d3c0:	69ba      	ldr	r2, [r7, #24]
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	08da      	lsrs	r2, r3, #3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	3208      	adds	r2, #8
 800d3ce:	69b9      	ldr	r1, [r7, #24]
 800d3d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	005b      	lsls	r3, r3, #1
 800d3de:	2203      	movs	r2, #3
 800d3e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d3e4:	43db      	mvns	r3, r3
 800d3e6:	69ba      	ldr	r2, [r7, #24]
 800d3e8:	4013      	ands	r3, r2
 800d3ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	f003 0203 	and.w	r2, r3, #3
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	005b      	lsls	r3, r3, #1
 800d3f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d3fc:	69ba      	ldr	r2, [r7, #24]
 800d3fe:	4313      	orrs	r3, r2
 800d400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	69ba      	ldr	r2, [r7, #24]
 800d406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d410:	2b00      	cmp	r3, #0
 800d412:	f000 80be 	beq.w	800d592 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d416:	4b66      	ldr	r3, [pc, #408]	; (800d5b0 <HAL_GPIO_Init+0x324>)
 800d418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d41a:	4a65      	ldr	r2, [pc, #404]	; (800d5b0 <HAL_GPIO_Init+0x324>)
 800d41c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d420:	6453      	str	r3, [r2, #68]	; 0x44
 800d422:	4b63      	ldr	r3, [pc, #396]	; (800d5b0 <HAL_GPIO_Init+0x324>)
 800d424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d42a:	60fb      	str	r3, [r7, #12]
 800d42c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800d42e:	4a61      	ldr	r2, [pc, #388]	; (800d5b4 <HAL_GPIO_Init+0x328>)
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	089b      	lsrs	r3, r3, #2
 800d434:	3302      	adds	r3, #2
 800d436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d43a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	f003 0303 	and.w	r3, r3, #3
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	220f      	movs	r2, #15
 800d446:	fa02 f303 	lsl.w	r3, r2, r3
 800d44a:	43db      	mvns	r3, r3
 800d44c:	69ba      	ldr	r2, [r7, #24]
 800d44e:	4013      	ands	r3, r2
 800d450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	4a58      	ldr	r2, [pc, #352]	; (800d5b8 <HAL_GPIO_Init+0x32c>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d037      	beq.n	800d4ca <HAL_GPIO_Init+0x23e>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4a57      	ldr	r2, [pc, #348]	; (800d5bc <HAL_GPIO_Init+0x330>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d031      	beq.n	800d4c6 <HAL_GPIO_Init+0x23a>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4a56      	ldr	r2, [pc, #344]	; (800d5c0 <HAL_GPIO_Init+0x334>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d02b      	beq.n	800d4c2 <HAL_GPIO_Init+0x236>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4a55      	ldr	r2, [pc, #340]	; (800d5c4 <HAL_GPIO_Init+0x338>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d025      	beq.n	800d4be <HAL_GPIO_Init+0x232>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4a54      	ldr	r2, [pc, #336]	; (800d5c8 <HAL_GPIO_Init+0x33c>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d01f      	beq.n	800d4ba <HAL_GPIO_Init+0x22e>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4a53      	ldr	r2, [pc, #332]	; (800d5cc <HAL_GPIO_Init+0x340>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d019      	beq.n	800d4b6 <HAL_GPIO_Init+0x22a>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	4a52      	ldr	r2, [pc, #328]	; (800d5d0 <HAL_GPIO_Init+0x344>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d013      	beq.n	800d4b2 <HAL_GPIO_Init+0x226>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	4a51      	ldr	r2, [pc, #324]	; (800d5d4 <HAL_GPIO_Init+0x348>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d00d      	beq.n	800d4ae <HAL_GPIO_Init+0x222>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	4a50      	ldr	r2, [pc, #320]	; (800d5d8 <HAL_GPIO_Init+0x34c>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d007      	beq.n	800d4aa <HAL_GPIO_Init+0x21e>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4a4f      	ldr	r2, [pc, #316]	; (800d5dc <HAL_GPIO_Init+0x350>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d101      	bne.n	800d4a6 <HAL_GPIO_Init+0x21a>
 800d4a2:	2309      	movs	r3, #9
 800d4a4:	e012      	b.n	800d4cc <HAL_GPIO_Init+0x240>
 800d4a6:	230a      	movs	r3, #10
 800d4a8:	e010      	b.n	800d4cc <HAL_GPIO_Init+0x240>
 800d4aa:	2308      	movs	r3, #8
 800d4ac:	e00e      	b.n	800d4cc <HAL_GPIO_Init+0x240>
 800d4ae:	2307      	movs	r3, #7
 800d4b0:	e00c      	b.n	800d4cc <HAL_GPIO_Init+0x240>
 800d4b2:	2306      	movs	r3, #6
 800d4b4:	e00a      	b.n	800d4cc <HAL_GPIO_Init+0x240>
 800d4b6:	2305      	movs	r3, #5
 800d4b8:	e008      	b.n	800d4cc <HAL_GPIO_Init+0x240>
 800d4ba:	2304      	movs	r3, #4
 800d4bc:	e006      	b.n	800d4cc <HAL_GPIO_Init+0x240>
 800d4be:	2303      	movs	r3, #3
 800d4c0:	e004      	b.n	800d4cc <HAL_GPIO_Init+0x240>
 800d4c2:	2302      	movs	r3, #2
 800d4c4:	e002      	b.n	800d4cc <HAL_GPIO_Init+0x240>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e000      	b.n	800d4cc <HAL_GPIO_Init+0x240>
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	69fa      	ldr	r2, [r7, #28]
 800d4ce:	f002 0203 	and.w	r2, r2, #3
 800d4d2:	0092      	lsls	r2, r2, #2
 800d4d4:	4093      	lsls	r3, r2
 800d4d6:	69ba      	ldr	r2, [r7, #24]
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800d4dc:	4935      	ldr	r1, [pc, #212]	; (800d5b4 <HAL_GPIO_Init+0x328>)
 800d4de:	69fb      	ldr	r3, [r7, #28]
 800d4e0:	089b      	lsrs	r3, r3, #2
 800d4e2:	3302      	adds	r3, #2
 800d4e4:	69ba      	ldr	r2, [r7, #24]
 800d4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d4ea:	4b3d      	ldr	r3, [pc, #244]	; (800d5e0 <HAL_GPIO_Init+0x354>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	43db      	mvns	r3, r3
 800d4f4:	69ba      	ldr	r2, [r7, #24]
 800d4f6:	4013      	ands	r3, r2
 800d4f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d502:	2b00      	cmp	r3, #0
 800d504:	d003      	beq.n	800d50e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800d506:	69ba      	ldr	r2, [r7, #24]
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	4313      	orrs	r3, r2
 800d50c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d50e:	4a34      	ldr	r2, [pc, #208]	; (800d5e0 <HAL_GPIO_Init+0x354>)
 800d510:	69bb      	ldr	r3, [r7, #24]
 800d512:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d514:	4b32      	ldr	r3, [pc, #200]	; (800d5e0 <HAL_GPIO_Init+0x354>)
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	43db      	mvns	r3, r3
 800d51e:	69ba      	ldr	r2, [r7, #24]
 800d520:	4013      	ands	r3, r2
 800d522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d003      	beq.n	800d538 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800d530:	69ba      	ldr	r2, [r7, #24]
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	4313      	orrs	r3, r2
 800d536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d538:	4a29      	ldr	r2, [pc, #164]	; (800d5e0 <HAL_GPIO_Init+0x354>)
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d53e:	4b28      	ldr	r3, [pc, #160]	; (800d5e0 <HAL_GPIO_Init+0x354>)
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	43db      	mvns	r3, r3
 800d548:	69ba      	ldr	r2, [r7, #24]
 800d54a:	4013      	ands	r3, r2
 800d54c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	685b      	ldr	r3, [r3, #4]
 800d552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d556:	2b00      	cmp	r3, #0
 800d558:	d003      	beq.n	800d562 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800d55a:	69ba      	ldr	r2, [r7, #24]
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	4313      	orrs	r3, r2
 800d560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d562:	4a1f      	ldr	r2, [pc, #124]	; (800d5e0 <HAL_GPIO_Init+0x354>)
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d568:	4b1d      	ldr	r3, [pc, #116]	; (800d5e0 <HAL_GPIO_Init+0x354>)
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	43db      	mvns	r3, r3
 800d572:	69ba      	ldr	r2, [r7, #24]
 800d574:	4013      	ands	r3, r2
 800d576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d580:	2b00      	cmp	r3, #0
 800d582:	d003      	beq.n	800d58c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800d584:	69ba      	ldr	r2, [r7, #24]
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	4313      	orrs	r3, r2
 800d58a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d58c:	4a14      	ldr	r2, [pc, #80]	; (800d5e0 <HAL_GPIO_Init+0x354>)
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800d592:	69fb      	ldr	r3, [r7, #28]
 800d594:	3301      	adds	r3, #1
 800d596:	61fb      	str	r3, [r7, #28]
 800d598:	69fb      	ldr	r3, [r7, #28]
 800d59a:	2b0f      	cmp	r3, #15
 800d59c:	f67f ae86 	bls.w	800d2ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800d5a0:	bf00      	nop
 800d5a2:	bf00      	nop
 800d5a4:	3724      	adds	r7, #36	; 0x24
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr
 800d5ae:	bf00      	nop
 800d5b0:	40023800 	.word	0x40023800
 800d5b4:	40013800 	.word	0x40013800
 800d5b8:	40020000 	.word	0x40020000
 800d5bc:	40020400 	.word	0x40020400
 800d5c0:	40020800 	.word	0x40020800
 800d5c4:	40020c00 	.word	0x40020c00
 800d5c8:	40021000 	.word	0x40021000
 800d5cc:	40021400 	.word	0x40021400
 800d5d0:	40021800 	.word	0x40021800
 800d5d4:	40021c00 	.word	0x40021c00
 800d5d8:	40022000 	.word	0x40022000
 800d5dc:	40022400 	.word	0x40022400
 800d5e0:	40013c00 	.word	0x40013c00

0800d5e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b087      	sub	sp, #28
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	617b      	str	r3, [r7, #20]
 800d5fe:	e0d9      	b.n	800d7b4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800d600:	2201      	movs	r2, #1
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	fa02 f303 	lsl.w	r3, r2, r3
 800d608:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	4013      	ands	r3, r2
 800d610:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800d612:	68fa      	ldr	r2, [r7, #12]
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	429a      	cmp	r2, r3
 800d618:	f040 80c9 	bne.w	800d7ae <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800d61c:	4a6b      	ldr	r2, [pc, #428]	; (800d7cc <HAL_GPIO_DeInit+0x1e8>)
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	089b      	lsrs	r3, r3, #2
 800d622:	3302      	adds	r3, #2
 800d624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d628:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	f003 0303 	and.w	r3, r3, #3
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	220f      	movs	r2, #15
 800d634:	fa02 f303 	lsl.w	r3, r2, r3
 800d638:	68ba      	ldr	r2, [r7, #8]
 800d63a:	4013      	ands	r3, r2
 800d63c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4a63      	ldr	r2, [pc, #396]	; (800d7d0 <HAL_GPIO_DeInit+0x1ec>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d037      	beq.n	800d6b6 <HAL_GPIO_DeInit+0xd2>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4a62      	ldr	r2, [pc, #392]	; (800d7d4 <HAL_GPIO_DeInit+0x1f0>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d031      	beq.n	800d6b2 <HAL_GPIO_DeInit+0xce>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4a61      	ldr	r2, [pc, #388]	; (800d7d8 <HAL_GPIO_DeInit+0x1f4>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d02b      	beq.n	800d6ae <HAL_GPIO_DeInit+0xca>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	4a60      	ldr	r2, [pc, #384]	; (800d7dc <HAL_GPIO_DeInit+0x1f8>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d025      	beq.n	800d6aa <HAL_GPIO_DeInit+0xc6>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	4a5f      	ldr	r2, [pc, #380]	; (800d7e0 <HAL_GPIO_DeInit+0x1fc>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d01f      	beq.n	800d6a6 <HAL_GPIO_DeInit+0xc2>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	4a5e      	ldr	r2, [pc, #376]	; (800d7e4 <HAL_GPIO_DeInit+0x200>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d019      	beq.n	800d6a2 <HAL_GPIO_DeInit+0xbe>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	4a5d      	ldr	r2, [pc, #372]	; (800d7e8 <HAL_GPIO_DeInit+0x204>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d013      	beq.n	800d69e <HAL_GPIO_DeInit+0xba>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	4a5c      	ldr	r2, [pc, #368]	; (800d7ec <HAL_GPIO_DeInit+0x208>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d00d      	beq.n	800d69a <HAL_GPIO_DeInit+0xb6>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	4a5b      	ldr	r2, [pc, #364]	; (800d7f0 <HAL_GPIO_DeInit+0x20c>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d007      	beq.n	800d696 <HAL_GPIO_DeInit+0xb2>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	4a5a      	ldr	r2, [pc, #360]	; (800d7f4 <HAL_GPIO_DeInit+0x210>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d101      	bne.n	800d692 <HAL_GPIO_DeInit+0xae>
 800d68e:	2309      	movs	r3, #9
 800d690:	e012      	b.n	800d6b8 <HAL_GPIO_DeInit+0xd4>
 800d692:	230a      	movs	r3, #10
 800d694:	e010      	b.n	800d6b8 <HAL_GPIO_DeInit+0xd4>
 800d696:	2308      	movs	r3, #8
 800d698:	e00e      	b.n	800d6b8 <HAL_GPIO_DeInit+0xd4>
 800d69a:	2307      	movs	r3, #7
 800d69c:	e00c      	b.n	800d6b8 <HAL_GPIO_DeInit+0xd4>
 800d69e:	2306      	movs	r3, #6
 800d6a0:	e00a      	b.n	800d6b8 <HAL_GPIO_DeInit+0xd4>
 800d6a2:	2305      	movs	r3, #5
 800d6a4:	e008      	b.n	800d6b8 <HAL_GPIO_DeInit+0xd4>
 800d6a6:	2304      	movs	r3, #4
 800d6a8:	e006      	b.n	800d6b8 <HAL_GPIO_DeInit+0xd4>
 800d6aa:	2303      	movs	r3, #3
 800d6ac:	e004      	b.n	800d6b8 <HAL_GPIO_DeInit+0xd4>
 800d6ae:	2302      	movs	r3, #2
 800d6b0:	e002      	b.n	800d6b8 <HAL_GPIO_DeInit+0xd4>
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e000      	b.n	800d6b8 <HAL_GPIO_DeInit+0xd4>
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	697a      	ldr	r2, [r7, #20]
 800d6ba:	f002 0203 	and.w	r2, r2, #3
 800d6be:	0092      	lsls	r2, r2, #2
 800d6c0:	4093      	lsls	r3, r2
 800d6c2:	68ba      	ldr	r2, [r7, #8]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d132      	bne.n	800d72e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800d6c8:	4b4b      	ldr	r3, [pc, #300]	; (800d7f8 <HAL_GPIO_DeInit+0x214>)
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	43db      	mvns	r3, r3
 800d6d0:	4949      	ldr	r1, [pc, #292]	; (800d7f8 <HAL_GPIO_DeInit+0x214>)
 800d6d2:	4013      	ands	r3, r2
 800d6d4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800d6d6:	4b48      	ldr	r3, [pc, #288]	; (800d7f8 <HAL_GPIO_DeInit+0x214>)
 800d6d8:	685a      	ldr	r2, [r3, #4]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	43db      	mvns	r3, r3
 800d6de:	4946      	ldr	r1, [pc, #280]	; (800d7f8 <HAL_GPIO_DeInit+0x214>)
 800d6e0:	4013      	ands	r3, r2
 800d6e2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800d6e4:	4b44      	ldr	r3, [pc, #272]	; (800d7f8 <HAL_GPIO_DeInit+0x214>)
 800d6e6:	689a      	ldr	r2, [r3, #8]
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	43db      	mvns	r3, r3
 800d6ec:	4942      	ldr	r1, [pc, #264]	; (800d7f8 <HAL_GPIO_DeInit+0x214>)
 800d6ee:	4013      	ands	r3, r2
 800d6f0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800d6f2:	4b41      	ldr	r3, [pc, #260]	; (800d7f8 <HAL_GPIO_DeInit+0x214>)
 800d6f4:	68da      	ldr	r2, [r3, #12]
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	43db      	mvns	r3, r3
 800d6fa:	493f      	ldr	r1, [pc, #252]	; (800d7f8 <HAL_GPIO_DeInit+0x214>)
 800d6fc:	4013      	ands	r3, r2
 800d6fe:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	f003 0303 	and.w	r3, r3, #3
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	220f      	movs	r2, #15
 800d70a:	fa02 f303 	lsl.w	r3, r2, r3
 800d70e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800d710:	4a2e      	ldr	r2, [pc, #184]	; (800d7cc <HAL_GPIO_DeInit+0x1e8>)
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	089b      	lsrs	r3, r3, #2
 800d716:	3302      	adds	r3, #2
 800d718:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	43da      	mvns	r2, r3
 800d720:	482a      	ldr	r0, [pc, #168]	; (800d7cc <HAL_GPIO_DeInit+0x1e8>)
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	089b      	lsrs	r3, r3, #2
 800d726:	400a      	ands	r2, r1
 800d728:	3302      	adds	r3, #2
 800d72a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	005b      	lsls	r3, r3, #1
 800d736:	2103      	movs	r1, #3
 800d738:	fa01 f303 	lsl.w	r3, r1, r3
 800d73c:	43db      	mvns	r3, r3
 800d73e:	401a      	ands	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	08da      	lsrs	r2, r3, #3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	3208      	adds	r2, #8
 800d74c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	f003 0307 	and.w	r3, r3, #7
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	220f      	movs	r2, #15
 800d75a:	fa02 f303 	lsl.w	r3, r2, r3
 800d75e:	43db      	mvns	r3, r3
 800d760:	697a      	ldr	r2, [r7, #20]
 800d762:	08d2      	lsrs	r2, r2, #3
 800d764:	4019      	ands	r1, r3
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	3208      	adds	r2, #8
 800d76a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	68da      	ldr	r2, [r3, #12]
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	005b      	lsls	r3, r3, #1
 800d776:	2103      	movs	r1, #3
 800d778:	fa01 f303 	lsl.w	r3, r1, r3
 800d77c:	43db      	mvns	r3, r3
 800d77e:	401a      	ands	r2, r3
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	685a      	ldr	r2, [r3, #4]
 800d788:	2101      	movs	r1, #1
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	fa01 f303 	lsl.w	r3, r1, r3
 800d790:	43db      	mvns	r3, r3
 800d792:	401a      	ands	r2, r3
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	689a      	ldr	r2, [r3, #8]
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	005b      	lsls	r3, r3, #1
 800d7a0:	2103      	movs	r1, #3
 800d7a2:	fa01 f303 	lsl.w	r3, r1, r3
 800d7a6:	43db      	mvns	r3, r3
 800d7a8:	401a      	ands	r2, r3
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	617b      	str	r3, [r7, #20]
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	2b0f      	cmp	r3, #15
 800d7b8:	f67f af22 	bls.w	800d600 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800d7bc:	bf00      	nop
 800d7be:	bf00      	nop
 800d7c0:	371c      	adds	r7, #28
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop
 800d7cc:	40013800 	.word	0x40013800
 800d7d0:	40020000 	.word	0x40020000
 800d7d4:	40020400 	.word	0x40020400
 800d7d8:	40020800 	.word	0x40020800
 800d7dc:	40020c00 	.word	0x40020c00
 800d7e0:	40021000 	.word	0x40021000
 800d7e4:	40021400 	.word	0x40021400
 800d7e8:	40021800 	.word	0x40021800
 800d7ec:	40021c00 	.word	0x40021c00
 800d7f0:	40022000 	.word	0x40022000
 800d7f4:	40022400 	.word	0x40022400
 800d7f8:	40013c00 	.word	0x40013c00

0800d7fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b085      	sub	sp, #20
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	460b      	mov	r3, r1
 800d806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	691a      	ldr	r2, [r3, #16]
 800d80c:	887b      	ldrh	r3, [r7, #2]
 800d80e:	4013      	ands	r3, r2
 800d810:	2b00      	cmp	r3, #0
 800d812:	d002      	beq.n	800d81a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d814:	2301      	movs	r3, #1
 800d816:	73fb      	strb	r3, [r7, #15]
 800d818:	e001      	b.n	800d81e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d81a:	2300      	movs	r3, #0
 800d81c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d820:	4618      	mov	r0, r3
 800d822:	3714      	adds	r7, #20
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	460b      	mov	r3, r1
 800d836:	807b      	strh	r3, [r7, #2]
 800d838:	4613      	mov	r3, r2
 800d83a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d83c:	787b      	ldrb	r3, [r7, #1]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d003      	beq.n	800d84a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d842:	887a      	ldrh	r2, [r7, #2]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800d848:	e003      	b.n	800d852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800d84a:	887b      	ldrh	r3, [r7, #2]
 800d84c:	041a      	lsls	r2, r3, #16
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	619a      	str	r2, [r3, #24]
}
 800d852:	bf00      	nop
 800d854:	370c      	adds	r7, #12
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr

0800d85e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d85e:	b480      	push	{r7}
 800d860:	b085      	sub	sp, #20
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
 800d866:	460b      	mov	r3, r1
 800d868:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	695b      	ldr	r3, [r3, #20]
 800d86e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d870:	887a      	ldrh	r2, [r7, #2]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	4013      	ands	r3, r2
 800d876:	041a      	lsls	r2, r3, #16
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	43d9      	mvns	r1, r3
 800d87c:	887b      	ldrh	r3, [r7, #2]
 800d87e:	400b      	ands	r3, r1
 800d880:	431a      	orrs	r2, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	619a      	str	r2, [r3, #24]
}
 800d886:	bf00      	nop
 800d888:	3714      	adds	r7, #20
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
	...

0800d894 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d101      	bne.n	800d8a6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e0bf      	b.n	800da26 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d106      	bne.n	800d8c0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f7f4 feb4 	bl	8002628 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2202      	movs	r2, #2
 800d8c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	699a      	ldr	r2, [r3, #24]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800d8d6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	6999      	ldr	r1, [r3, #24]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	685a      	ldr	r2, [r3, #4]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d8ec:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	691b      	ldr	r3, [r3, #16]
 800d8f2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	430a      	orrs	r2, r1
 800d8fa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	6899      	ldr	r1, [r3, #8]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	4b4a      	ldr	r3, [pc, #296]	; (800da30 <HAL_LTDC_Init+0x19c>)
 800d908:	400b      	ands	r3, r1
 800d90a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	695b      	ldr	r3, [r3, #20]
 800d910:	041b      	lsls	r3, r3, #16
 800d912:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	6899      	ldr	r1, [r3, #8]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	699a      	ldr	r2, [r3, #24]
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	431a      	orrs	r2, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	430a      	orrs	r2, r1
 800d928:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	68d9      	ldr	r1, [r3, #12]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	4b3e      	ldr	r3, [pc, #248]	; (800da30 <HAL_LTDC_Init+0x19c>)
 800d936:	400b      	ands	r3, r1
 800d938:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	69db      	ldr	r3, [r3, #28]
 800d93e:	041b      	lsls	r3, r3, #16
 800d940:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	68d9      	ldr	r1, [r3, #12]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6a1a      	ldr	r2, [r3, #32]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	431a      	orrs	r2, r3
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	430a      	orrs	r2, r1
 800d956:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	6919      	ldr	r1, [r3, #16]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	4b33      	ldr	r3, [pc, #204]	; (800da30 <HAL_LTDC_Init+0x19c>)
 800d964:	400b      	ands	r3, r1
 800d966:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d96c:	041b      	lsls	r3, r3, #16
 800d96e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	6919      	ldr	r1, [r3, #16]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	431a      	orrs	r2, r3
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	430a      	orrs	r2, r1
 800d984:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	6959      	ldr	r1, [r3, #20]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681a      	ldr	r2, [r3, #0]
 800d990:	4b27      	ldr	r3, [pc, #156]	; (800da30 <HAL_LTDC_Init+0x19c>)
 800d992:	400b      	ands	r3, r1
 800d994:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99a:	041b      	lsls	r3, r3, #16
 800d99c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	6959      	ldr	r1, [r3, #20]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	431a      	orrs	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	430a      	orrs	r2, r1
 800d9b2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d9ba:	021b      	lsls	r3, r3, #8
 800d9bc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d9c4:	041b      	lsls	r3, r3, #16
 800d9c6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800d9d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d9de:	68ba      	ldr	r2, [r7, #8]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800d9ea:	431a      	orrs	r2, r3
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	430a      	orrs	r2, r1
 800d9f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f042 0206 	orr.w	r2, r2, #6
 800da02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	699a      	ldr	r2, [r3, #24]
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f042 0201 	orr.w	r2, r2, #1
 800da12:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2200      	movs	r2, #0
 800da18:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2201      	movs	r2, #1
 800da20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800da24:	2300      	movs	r3, #0
}
 800da26:	4618      	mov	r0, r3
 800da28:	3710      	adds	r7, #16
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	f000f800 	.word	0xf000f800

0800da34 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da42:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da4a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f003 0304 	and.w	r3, r3, #4
 800da52:	2b00      	cmp	r3, #0
 800da54:	d023      	beq.n	800da9e <HAL_LTDC_IRQHandler+0x6a>
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	f003 0304 	and.w	r3, r3, #4
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d01e      	beq.n	800da9e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f022 0204 	bic.w	r2, r2, #4
 800da6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2204      	movs	r2, #4
 800da76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800da7e:	f043 0201 	orr.w	r2, r3, #1
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2204      	movs	r2, #4
 800da8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 f86f 	bl	800db7c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f003 0302 	and.w	r3, r3, #2
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d023      	beq.n	800daf0 <HAL_LTDC_IRQHandler+0xbc>
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	f003 0302 	and.w	r3, r3, #2
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d01e      	beq.n	800daf0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f022 0202 	bic.w	r2, r2, #2
 800dac0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2202      	movs	r2, #2
 800dac8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dad0:	f043 0202 	orr.w	r2, r3, #2
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2204      	movs	r2, #4
 800dade:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 f846 	bl	800db7c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f003 0301 	and.w	r3, r3, #1
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d01b      	beq.n	800db32 <HAL_LTDC_IRQHandler+0xfe>
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	f003 0301 	and.w	r3, r3, #1
 800db00:	2b00      	cmp	r3, #0
 800db02:	d016      	beq.n	800db32 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f022 0201 	bic.w	r2, r2, #1
 800db12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2201      	movs	r2, #1
 800db1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2201      	movs	r2, #1
 800db20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2200      	movs	r2, #0
 800db28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f7f7 fec1 	bl	80058b4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f003 0308 	and.w	r3, r3, #8
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d01b      	beq.n	800db74 <HAL_LTDC_IRQHandler+0x140>
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	f003 0308 	and.w	r3, r3, #8
 800db42:	2b00      	cmp	r3, #0
 800db44:	d016      	beq.n	800db74 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f022 0208 	bic.w	r2, r2, #8
 800db54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	2208      	movs	r2, #8
 800db5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2201      	movs	r2, #1
 800db62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2200      	movs	r2, #0
 800db6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 f80e 	bl	800db90 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800db74:	bf00      	nop
 800db76:	3710      	adds	r7, #16
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b083      	sub	sp, #12
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800db84:	bf00      	nop
 800db86:	370c      	adds	r7, #12
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr

0800db90 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800db90:	b480      	push	{r7}
 800db92:	b083      	sub	sp, #12
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800db98:	bf00      	nop
 800db9a:	370c      	adds	r7, #12
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr

0800dba4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800dba4:	b5b0      	push	{r4, r5, r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d101      	bne.n	800dbbe <HAL_LTDC_ConfigLayer+0x1a>
 800dbba:	2302      	movs	r3, #2
 800dbbc:	e02c      	b.n	800dc18 <HAL_LTDC_ConfigLayer+0x74>
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2202      	movs	r2, #2
 800dbca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dbce:	68fa      	ldr	r2, [r7, #12]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2134      	movs	r1, #52	; 0x34
 800dbd4:	fb01 f303 	mul.w	r3, r1, r3
 800dbd8:	4413      	add	r3, r2
 800dbda:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	4614      	mov	r4, r2
 800dbe2:	461d      	mov	r5, r3
 800dbe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbf0:	682b      	ldr	r3, [r5, #0]
 800dbf2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	68b9      	ldr	r1, [r7, #8]
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f000 f849 	bl	800dc90 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2201      	movs	r2, #1
 800dc04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800dc16:	2300      	movs	r3, #0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3710      	adds	r7, #16
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bdb0      	pop	{r4, r5, r7, pc}

0800dc20 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d101      	bne.n	800dc38 <HAL_LTDC_ProgramLineEvent+0x18>
 800dc34:	2302      	movs	r3, #2
 800dc36:	e023      	b.n	800dc80 <HAL_LTDC_ProgramLineEvent+0x60>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2202      	movs	r2, #2
 800dc44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f022 0201 	bic.w	r2, r2, #1
 800dc56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800dc58:	4a0c      	ldr	r2, [pc, #48]	; (800dc8c <HAL_LTDC_ProgramLineEvent+0x6c>)
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f042 0201 	orr.w	r2, r2, #1
 800dc6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2201      	movs	r2, #1
 800dc72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800dc7e:	2300      	movs	r3, #0
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr
 800dc8c:	40016800 	.word	0x40016800

0800dc90 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b089      	sub	sp, #36	; 0x24
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	60b9      	str	r1, [r7, #8]
 800dc9a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	685a      	ldr	r2, [r3, #4]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	0c1b      	lsrs	r3, r3, #16
 800dca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dcac:	4413      	add	r3, r2
 800dcae:	041b      	lsls	r3, r3, #16
 800dcb0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	01db      	lsls	r3, r3, #7
 800dcbc:	4413      	add	r3, r2
 800dcbe:	3384      	adds	r3, #132	; 0x84
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	68fa      	ldr	r2, [r7, #12]
 800dcc4:	6812      	ldr	r2, [r2, #0]
 800dcc6:	4611      	mov	r1, r2
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	01d2      	lsls	r2, r2, #7
 800dccc:	440a      	add	r2, r1
 800dcce:	3284      	adds	r2, #132	; 0x84
 800dcd0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800dcd4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	0c1b      	lsrs	r3, r3, #16
 800dce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dce6:	4413      	add	r3, r2
 800dce8:	1c5a      	adds	r2, r3, #1
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4619      	mov	r1, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	01db      	lsls	r3, r3, #7
 800dcf4:	440b      	add	r3, r1
 800dcf6:	3384      	adds	r3, #132	; 0x84
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	68da      	ldr	r2, [r3, #12]
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	68db      	ldr	r3, [r3, #12]
 800dd0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd0e:	4413      	add	r3, r2
 800dd10:	041b      	lsls	r3, r3, #16
 800dd12:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	461a      	mov	r2, r3
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	01db      	lsls	r3, r3, #7
 800dd1e:	4413      	add	r3, r2
 800dd20:	3384      	adds	r3, #132	; 0x84
 800dd22:	689b      	ldr	r3, [r3, #8]
 800dd24:	68fa      	ldr	r2, [r7, #12]
 800dd26:	6812      	ldr	r2, [r2, #0]
 800dd28:	4611      	mov	r1, r2
 800dd2a:	687a      	ldr	r2, [r7, #4]
 800dd2c:	01d2      	lsls	r2, r2, #7
 800dd2e:	440a      	add	r2, r1
 800dd30:	3284      	adds	r2, #132	; 0x84
 800dd32:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800dd36:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	689a      	ldr	r2, [r3, #8]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	68db      	ldr	r3, [r3, #12]
 800dd42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd46:	4413      	add	r3, r2
 800dd48:	1c5a      	adds	r2, r3, #1
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4619      	mov	r1, r3
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	01db      	lsls	r3, r3, #7
 800dd54:	440b      	add	r3, r1
 800dd56:	3384      	adds	r3, #132	; 0x84
 800dd58:	4619      	mov	r1, r3
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	461a      	mov	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	01db      	lsls	r3, r3, #7
 800dd6a:	4413      	add	r3, r2
 800dd6c:	3384      	adds	r3, #132	; 0x84
 800dd6e:	691b      	ldr	r3, [r3, #16]
 800dd70:	68fa      	ldr	r2, [r7, #12]
 800dd72:	6812      	ldr	r2, [r2, #0]
 800dd74:	4611      	mov	r1, r2
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	01d2      	lsls	r2, r2, #7
 800dd7a:	440a      	add	r2, r1
 800dd7c:	3284      	adds	r2, #132	; 0x84
 800dd7e:	f023 0307 	bic.w	r3, r3, #7
 800dd82:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	461a      	mov	r2, r3
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	01db      	lsls	r3, r3, #7
 800dd8e:	4413      	add	r3, r2
 800dd90:	3384      	adds	r3, #132	; 0x84
 800dd92:	461a      	mov	r2, r3
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	691b      	ldr	r3, [r3, #16]
 800dd98:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dda0:	021b      	lsls	r3, r3, #8
 800dda2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ddaa:	041b      	lsls	r3, r3, #16
 800ddac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	699b      	ldr	r3, [r3, #24]
 800ddb2:	061b      	lsls	r3, r3, #24
 800ddb4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	461a      	mov	r2, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	01db      	lsls	r3, r3, #7
 800ddc0:	4413      	add	r3, r2
 800ddc2:	3384      	adds	r3, #132	; 0x84
 800ddc4:	699b      	ldr	r3, [r3, #24]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	461a      	mov	r2, r3
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	01db      	lsls	r3, r3, #7
 800ddd0:	4413      	add	r3, r2
 800ddd2:	3384      	adds	r3, #132	; 0x84
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dde0:	461a      	mov	r2, r3
 800dde2:	69fb      	ldr	r3, [r7, #28]
 800dde4:	431a      	orrs	r2, r3
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	431a      	orrs	r2, r3
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	4619      	mov	r1, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	01db      	lsls	r3, r3, #7
 800ddf4:	440b      	add	r3, r1
 800ddf6:	3384      	adds	r3, #132	; 0x84
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	4313      	orrs	r3, r2
 800ddfe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	461a      	mov	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	01db      	lsls	r3, r3, #7
 800de0a:	4413      	add	r3, r2
 800de0c:	3384      	adds	r3, #132	; 0x84
 800de0e:	695b      	ldr	r3, [r3, #20]
 800de10:	68fa      	ldr	r2, [r7, #12]
 800de12:	6812      	ldr	r2, [r2, #0]
 800de14:	4611      	mov	r1, r2
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	01d2      	lsls	r2, r2, #7
 800de1a:	440a      	add	r2, r1
 800de1c:	3284      	adds	r2, #132	; 0x84
 800de1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800de22:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	461a      	mov	r2, r3
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	01db      	lsls	r3, r3, #7
 800de2e:	4413      	add	r3, r2
 800de30:	3384      	adds	r3, #132	; 0x84
 800de32:	461a      	mov	r2, r3
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	695b      	ldr	r3, [r3, #20]
 800de38:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	461a      	mov	r2, r3
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	01db      	lsls	r3, r3, #7
 800de44:	4413      	add	r3, r2
 800de46:	3384      	adds	r3, #132	; 0x84
 800de48:	69da      	ldr	r2, [r3, #28]
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	4619      	mov	r1, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	01db      	lsls	r3, r3, #7
 800de54:	440b      	add	r3, r1
 800de56:	3384      	adds	r3, #132	; 0x84
 800de58:	4619      	mov	r1, r3
 800de5a:	4b58      	ldr	r3, [pc, #352]	; (800dfbc <LTDC_SetConfig+0x32c>)
 800de5c:	4013      	ands	r3, r2
 800de5e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	69da      	ldr	r2, [r3, #28]
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	6a1b      	ldr	r3, [r3, #32]
 800de68:	68f9      	ldr	r1, [r7, #12]
 800de6a:	6809      	ldr	r1, [r1, #0]
 800de6c:	4608      	mov	r0, r1
 800de6e:	6879      	ldr	r1, [r7, #4]
 800de70:	01c9      	lsls	r1, r1, #7
 800de72:	4401      	add	r1, r0
 800de74:	3184      	adds	r1, #132	; 0x84
 800de76:	4313      	orrs	r3, r2
 800de78:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	461a      	mov	r2, r3
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	01db      	lsls	r3, r3, #7
 800de84:	4413      	add	r3, r2
 800de86:	3384      	adds	r3, #132	; 0x84
 800de88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	461a      	mov	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	01db      	lsls	r3, r3, #7
 800de94:	4413      	add	r3, r2
 800de96:	3384      	adds	r3, #132	; 0x84
 800de98:	461a      	mov	r2, r3
 800de9a:	2300      	movs	r3, #0
 800de9c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	461a      	mov	r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	01db      	lsls	r3, r3, #7
 800dea8:	4413      	add	r3, r2
 800deaa:	3384      	adds	r3, #132	; 0x84
 800deac:	461a      	mov	r2, r3
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	691b      	ldr	r3, [r3, #16]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d102      	bne.n	800dec2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800debc:	2304      	movs	r3, #4
 800debe:	61fb      	str	r3, [r7, #28]
 800dec0:	e01b      	b.n	800defa <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	691b      	ldr	r3, [r3, #16]
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	d102      	bne.n	800ded0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800deca:	2303      	movs	r3, #3
 800decc:	61fb      	str	r3, [r7, #28]
 800dece:	e014      	b.n	800defa <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	691b      	ldr	r3, [r3, #16]
 800ded4:	2b04      	cmp	r3, #4
 800ded6:	d00b      	beq.n	800def0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800dedc:	2b02      	cmp	r3, #2
 800dede:	d007      	beq.n	800def0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800dee4:	2b03      	cmp	r3, #3
 800dee6:	d003      	beq.n	800def0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800deec:	2b07      	cmp	r3, #7
 800deee:	d102      	bne.n	800def6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800def0:	2302      	movs	r3, #2
 800def2:	61fb      	str	r3, [r7, #28]
 800def4:	e001      	b.n	800defa <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800def6:	2301      	movs	r3, #1
 800def8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	461a      	mov	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	01db      	lsls	r3, r3, #7
 800df04:	4413      	add	r3, r2
 800df06:	3384      	adds	r3, #132	; 0x84
 800df08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0a:	68fa      	ldr	r2, [r7, #12]
 800df0c:	6812      	ldr	r2, [r2, #0]
 800df0e:	4611      	mov	r1, r2
 800df10:	687a      	ldr	r2, [r7, #4]
 800df12:	01d2      	lsls	r2, r2, #7
 800df14:	440a      	add	r2, r1
 800df16:	3284      	adds	r2, #132	; 0x84
 800df18:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800df1c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df22:	69fa      	ldr	r2, [r7, #28]
 800df24:	fb02 f303 	mul.w	r3, r2, r3
 800df28:	041a      	lsls	r2, r3, #16
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	6859      	ldr	r1, [r3, #4]
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	1acb      	subs	r3, r1, r3
 800df34:	69f9      	ldr	r1, [r7, #28]
 800df36:	fb01 f303 	mul.w	r3, r1, r3
 800df3a:	3303      	adds	r3, #3
 800df3c:	68f9      	ldr	r1, [r7, #12]
 800df3e:	6809      	ldr	r1, [r1, #0]
 800df40:	4608      	mov	r0, r1
 800df42:	6879      	ldr	r1, [r7, #4]
 800df44:	01c9      	lsls	r1, r1, #7
 800df46:	4401      	add	r1, r0
 800df48:	3184      	adds	r1, #132	; 0x84
 800df4a:	4313      	orrs	r3, r2
 800df4c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	461a      	mov	r2, r3
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	01db      	lsls	r3, r3, #7
 800df58:	4413      	add	r3, r2
 800df5a:	3384      	adds	r3, #132	; 0x84
 800df5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4619      	mov	r1, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	01db      	lsls	r3, r3, #7
 800df68:	440b      	add	r3, r1
 800df6a:	3384      	adds	r3, #132	; 0x84
 800df6c:	4619      	mov	r1, r3
 800df6e:	4b14      	ldr	r3, [pc, #80]	; (800dfc0 <LTDC_SetConfig+0x330>)
 800df70:	4013      	ands	r3, r2
 800df72:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	461a      	mov	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	01db      	lsls	r3, r3, #7
 800df7e:	4413      	add	r3, r2
 800df80:	3384      	adds	r3, #132	; 0x84
 800df82:	461a      	mov	r2, r3
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df88:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	461a      	mov	r2, r3
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	01db      	lsls	r3, r3, #7
 800df94:	4413      	add	r3, r2
 800df96:	3384      	adds	r3, #132	; 0x84
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	68fa      	ldr	r2, [r7, #12]
 800df9c:	6812      	ldr	r2, [r2, #0]
 800df9e:	4611      	mov	r1, r2
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	01d2      	lsls	r2, r2, #7
 800dfa4:	440a      	add	r2, r1
 800dfa6:	3284      	adds	r2, #132	; 0x84
 800dfa8:	f043 0301 	orr.w	r3, r3, #1
 800dfac:	6013      	str	r3, [r2, #0]
}
 800dfae:	bf00      	nop
 800dfb0:	3724      	adds	r7, #36	; 0x24
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop
 800dfbc:	fffff8f8 	.word	0xfffff8f8
 800dfc0:	fffff800 	.word	0xfffff800

0800dfc4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800dfce:	4b23      	ldr	r3, [pc, #140]	; (800e05c <HAL_PWREx_EnableOverDrive+0x98>)
 800dfd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfd2:	4a22      	ldr	r2, [pc, #136]	; (800e05c <HAL_PWREx_EnableOverDrive+0x98>)
 800dfd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfd8:	6413      	str	r3, [r2, #64]	; 0x40
 800dfda:	4b20      	ldr	r3, [pc, #128]	; (800e05c <HAL_PWREx_EnableOverDrive+0x98>)
 800dfdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dfe2:	603b      	str	r3, [r7, #0]
 800dfe4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800dfe6:	4b1e      	ldr	r3, [pc, #120]	; (800e060 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	4a1d      	ldr	r2, [pc, #116]	; (800e060 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dfec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dff0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800dff2:	f7fc ff1f 	bl	800ae34 <HAL_GetTick>
 800dff6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800dff8:	e009      	b.n	800e00e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800dffa:	f7fc ff1b 	bl	800ae34 <HAL_GetTick>
 800dffe:	4602      	mov	r2, r0
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	1ad3      	subs	r3, r2, r3
 800e004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e008:	d901      	bls.n	800e00e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800e00a:	2303      	movs	r3, #3
 800e00c:	e022      	b.n	800e054 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e00e:	4b14      	ldr	r3, [pc, #80]	; (800e060 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e01a:	d1ee      	bne.n	800dffa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e01c:	4b10      	ldr	r3, [pc, #64]	; (800e060 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a0f      	ldr	r2, [pc, #60]	; (800e060 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e026:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e028:	f7fc ff04 	bl	800ae34 <HAL_GetTick>
 800e02c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e02e:	e009      	b.n	800e044 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e030:	f7fc ff00 	bl	800ae34 <HAL_GetTick>
 800e034:	4602      	mov	r2, r0
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	1ad3      	subs	r3, r2, r3
 800e03a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e03e:	d901      	bls.n	800e044 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800e040:	2303      	movs	r3, #3
 800e042:	e007      	b.n	800e054 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e044:	4b06      	ldr	r3, [pc, #24]	; (800e060 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e04c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e050:	d1ee      	bne.n	800e030 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800e052:	2300      	movs	r3, #0
}
 800e054:	4618      	mov	r0, r3
 800e056:	3708      	adds	r7, #8
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	40023800 	.word	0x40023800
 800e060:	40007000 	.word	0x40007000

0800e064 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b086      	sub	sp, #24
 800e068:	af02      	add	r7, sp, #8
 800e06a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e06c:	f7fc fee2 	bl	800ae34 <HAL_GetTick>
 800e070:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d101      	bne.n	800e07c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800e078:	2301      	movs	r3, #1
 800e07a:	e067      	b.n	800e14c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e082:	b2db      	uxtb	r3, r3
 800e084:	2b00      	cmp	r3, #0
 800e086:	d10b      	bne.n	800e0a0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f7f4 fd89 	bl	8002ba8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800e096:	f241 3188 	movw	r1, #5000	; 0x1388
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 fcf2 	bl	800ea84 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	021a      	lsls	r2, r3, #8
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	430a      	orrs	r2, r1
 800e0b8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0be:	9300      	str	r3, [sp, #0]
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	2120      	movs	r1, #32
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 fd1d 	bl	800eb06 <QSPI_WaitFlagStateUntilTimeout>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800e0d0:	7afb      	ldrb	r3, [r7, #11]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d135      	bne.n	800e142 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	4b1d      	ldr	r3, [pc, #116]	; (800e154 <HAL_QSPI_Init+0xf0>)
 800e0de:	4013      	ands	r3, r2
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	6852      	ldr	r2, [r2, #4]
 800e0e4:	0611      	lsls	r1, r2, #24
 800e0e6:	687a      	ldr	r2, [r7, #4]
 800e0e8:	68d2      	ldr	r2, [r2, #12]
 800e0ea:	4311      	orrs	r1, r2
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	69d2      	ldr	r2, [r2, #28]
 800e0f0:	4311      	orrs	r1, r2
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	6a12      	ldr	r2, [r2, #32]
 800e0f6:	4311      	orrs	r1, r2
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	6812      	ldr	r2, [r2, #0]
 800e0fc:	430b      	orrs	r3, r1
 800e0fe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	685a      	ldr	r2, [r3, #4]
 800e106:	4b14      	ldr	r3, [pc, #80]	; (800e158 <HAL_QSPI_Init+0xf4>)
 800e108:	4013      	ands	r3, r2
 800e10a:	687a      	ldr	r2, [r7, #4]
 800e10c:	6912      	ldr	r2, [r2, #16]
 800e10e:	0411      	lsls	r1, r2, #16
 800e110:	687a      	ldr	r2, [r7, #4]
 800e112:	6952      	ldr	r2, [r2, #20]
 800e114:	4311      	orrs	r1, r2
 800e116:	687a      	ldr	r2, [r7, #4]
 800e118:	6992      	ldr	r2, [r2, #24]
 800e11a:	4311      	orrs	r1, r2
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	6812      	ldr	r2, [r2, #0]
 800e120:	430b      	orrs	r3, r1
 800e122:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f042 0201 	orr.w	r2, r2, #1
 800e132:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2200      	movs	r2, #0
 800e138:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2201      	movs	r2, #1
 800e13e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2200      	movs	r2, #0
 800e146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800e14a:	7afb      	ldrb	r3, [r7, #11]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3710      	adds	r7, #16
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}
 800e154:	00ffff2f 	.word	0x00ffff2f
 800e158:	ffe0f8fe 	.word	0xffe0f8fe

0800e15c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d101      	bne.n	800e16e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800e16a:	2301      	movs	r3, #1
 800e16c:	e016      	b.n	800e19c <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f022 0201 	bic.w	r2, r2, #1
 800e17c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f7f4 fd9c 	bl	8002cbc <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2200      	movs	r2, #0
 800e196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e19a:	2300      	movs	r3, #0
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3708      	adds	r7, #8
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b086      	sub	sp, #24
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	f003 0304 	and.w	r3, r3, #4
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d064      	beq.n	800e290 <HAL_QSPI_IRQHandler+0xec>
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d05f      	beq.n	800e290 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	3320      	adds	r3, #32
 800e1d6:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	2b12      	cmp	r3, #18
 800e1e2:	d125      	bne.n	800e230 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800e1e4:	e01c      	b.n	800e220 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d00f      	beq.n	800e20e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1f2:	781a      	ldrb	r2, [r3, #0]
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1fc:	1c5a      	adds	r2, r3, #1
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e206:	1e5a      	subs	r2, r3, #1
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	62da      	str	r2, [r3, #44]	; 0x2c
 800e20c:	e008      	b.n	800e220 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e21c:	601a      	str	r2, [r3, #0]
          break;
 800e21e:	e033      	b.n	800e288 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	689b      	ldr	r3, [r3, #8]
 800e226:	f003 0304 	and.w	r3, r3, #4
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d1db      	bne.n	800e1e6 <HAL_QSPI_IRQHandler+0x42>
 800e22e:	e02b      	b.n	800e288 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e236:	b2db      	uxtb	r3, r3
 800e238:	2b22      	cmp	r3, #34	; 0x22
 800e23a:	d125      	bne.n	800e288 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800e23c:	e01d      	b.n	800e27a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e242:	2b00      	cmp	r3, #0
 800e244:	d010      	beq.n	800e268 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e24a:	68fa      	ldr	r2, [r7, #12]
 800e24c:	7812      	ldrb	r2, [r2, #0]
 800e24e:	b2d2      	uxtb	r2, r2
 800e250:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e256:	1c5a      	adds	r2, r3, #1
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e260:	1e5a      	subs	r2, r3, #1
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	639a      	str	r2, [r3, #56]	; 0x38
 800e266:	e008      	b.n	800e27a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e276:	601a      	str	r2, [r3, #0]
          break;
 800e278:	e006      	b.n	800e288 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	f003 0304 	and.w	r3, r3, #4
 800e284:	2b00      	cmp	r3, #0
 800e286:	d1da      	bne.n	800e23e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 fbdd 	bl	800ea48 <HAL_QSPI_FifoThresholdCallback>
 800e28e:	e13c      	b.n	800e50a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	f003 0302 	and.w	r3, r3, #2
 800e296:	2b00      	cmp	r3, #0
 800e298:	f000 80b0 	beq.w	800e3fc <HAL_QSPI_IRQHandler+0x258>
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	f000 80aa 	beq.w	800e3fc <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	2202      	movs	r2, #2
 800e2ae:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800e2be:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	2b12      	cmp	r3, #18
 800e2ca:	d120      	bne.n	800e30e <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f003 0304 	and.w	r3, r3, #4
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d011      	beq.n	800e2fe <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f022 0204 	bic.w	r2, r2, #4
 800e2e8:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f022 0201 	bic.w	r2, r2, #1
 800e2fc:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2201      	movs	r2, #1
 800e302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 fb94 	bl	800ea34 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e30c:	e0fa      	b.n	800e504 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e314:	b2db      	uxtb	r3, r3
 800e316:	2b22      	cmp	r3, #34	; 0x22
 800e318:	d143      	bne.n	800e3a2 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f003 0304 	and.w	r3, r3, #4
 800e324:	2b00      	cmp	r3, #0
 800e326:	d012      	beq.n	800e34e <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f022 0204 	bic.w	r2, r2, #4
 800e336:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	681a      	ldr	r2, [r3, #0]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f022 0201 	bic.w	r2, r2, #1
 800e34a:	601a      	str	r2, [r3, #0]
 800e34c:	e021      	b.n	800e392 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	3320      	adds	r3, #32
 800e354:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800e356:	e013      	b.n	800e380 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d017      	beq.n	800e390 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e364:	68fa      	ldr	r2, [r7, #12]
 800e366:	7812      	ldrb	r2, [r2, #0]
 800e368:	b2d2      	uxtb	r2, r2
 800e36a:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e370:	1c5a      	adds	r2, r3, #1
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e37a:	1e5a      	subs	r2, r3, #1
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	689b      	ldr	r3, [r3, #8]
 800e386:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d1e4      	bne.n	800e358 <HAL_QSPI_IRQHandler+0x1b4>
 800e38e:	e000      	b.n	800e392 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800e390:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2201      	movs	r2, #1
 800e396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 fb40 	bl	800ea20 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e3a0:	e0b0      	b.n	800e504 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	2b02      	cmp	r3, #2
 800e3ac:	d107      	bne.n	800e3be <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f000 fb28 	bl	800ea0c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e3bc:	e0a2      	b.n	800e504 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3c4:	b2db      	uxtb	r3, r3
 800e3c6:	2b08      	cmp	r3, #8
 800e3c8:	f040 809c 	bne.w	800e504 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	695a      	ldr	r2, [r3, #20]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800e3da:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2201      	movs	r2, #1
 800e3e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d103      	bne.n	800e3f4 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 fb03 	bl	800e9f8 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e3f2:	e087      	b.n	800e504 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 faf5 	bl	800e9e4 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e3fa:	e083      	b.n	800e504 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	f003 0308 	and.w	r3, r3, #8
 800e402:	2b00      	cmp	r3, #0
 800e404:	d01f      	beq.n	800e446 <HAL_QSPI_IRQHandler+0x2a2>
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d01a      	beq.n	800e446 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	2208      	movs	r2, #8
 800e416:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00b      	beq.n	800e43e <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800e434:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2201      	movs	r2, #1
 800e43a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f000 fb0c 	bl	800ea5c <HAL_QSPI_StatusMatchCallback>
 800e444:	e061      	b.n	800e50a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	f003 0301 	and.w	r3, r3, #1
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d047      	beq.n	800e4e0 <HAL_QSPI_IRQHandler+0x33c>
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e456:	2b00      	cmp	r3, #0
 800e458:	d042      	beq.n	800e4e0 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	2201      	movs	r2, #1
 800e460:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	681a      	ldr	r2, [r3, #0]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800e470:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e476:	f043 0202 	orr.w	r2, r3, #2
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f003 0304 	and.w	r3, r3, #4
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d021      	beq.n	800e4d0 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f022 0204 	bic.w	r2, r2, #4
 800e49a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4a0:	4a1c      	ldr	r2, [pc, #112]	; (800e514 <HAL_QSPI_IRQHandler+0x370>)
 800e4a2:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f7fe fa5b 	bl	800c964 <HAL_DMA_Abort_IT>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d029      	beq.n	800e508 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4b8:	f043 0204 	orr.w	r2, r3, #4
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 fa8b 	bl	800e9e4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e4ce:	e01b      	b.n	800e508 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 fa83 	bl	800e9e4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e4de:	e013      	b.n	800e508 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	f003 0310 	and.w	r3, r3, #16
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d00f      	beq.n	800e50a <HAL_QSPI_IRQHandler+0x366>
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d00a      	beq.n	800e50a <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	2210      	movs	r2, #16
 800e4fa:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f000 fab7 	bl	800ea70 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800e502:	e002      	b.n	800e50a <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e504:	bf00      	nop
 800e506:	e000      	b.n	800e50a <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e508:	bf00      	nop
}
 800e50a:	bf00      	nop
 800e50c:	3718      	adds	r7, #24
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	0800eaa1 	.word	0x0800eaa1

0800e518 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b088      	sub	sp, #32
 800e51c:	af02      	add	r7, sp, #8
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e524:	f7fc fc86 	bl	800ae34 <HAL_GetTick>
 800e528:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e530:	b2db      	uxtb	r3, r3
 800e532:	2b01      	cmp	r3, #1
 800e534:	d101      	bne.n	800e53a <HAL_QSPI_Command+0x22>
 800e536:	2302      	movs	r3, #2
 800e538:	e048      	b.n	800e5cc <HAL_QSPI_Command+0xb4>
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2201      	movs	r2, #1
 800e53e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e548:	b2db      	uxtb	r3, r3
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d137      	bne.n	800e5be <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2200      	movs	r2, #0
 800e552:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2202      	movs	r2, #2
 800e558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	9300      	str	r3, [sp, #0]
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	2200      	movs	r2, #0
 800e564:	2120      	movs	r1, #32
 800e566:	68f8      	ldr	r0, [r7, #12]
 800e568:	f000 facd 	bl	800eb06 <QSPI_WaitFlagStateUntilTimeout>
 800e56c:	4603      	mov	r3, r0
 800e56e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800e570:	7dfb      	ldrb	r3, [r7, #23]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d125      	bne.n	800e5c2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e576:	2200      	movs	r2, #0
 800e578:	68b9      	ldr	r1, [r7, #8]
 800e57a:	68f8      	ldr	r0, [r7, #12]
 800e57c:	f000 fafa 	bl	800eb74 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e584:	2b00      	cmp	r3, #0
 800e586:	d115      	bne.n	800e5b4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	2201      	movs	r2, #1
 800e590:	2102      	movs	r1, #2
 800e592:	68f8      	ldr	r0, [r7, #12]
 800e594:	f000 fab7 	bl	800eb06 <QSPI_WaitFlagStateUntilTimeout>
 800e598:	4603      	mov	r3, r0
 800e59a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800e59c:	7dfb      	ldrb	r3, [r7, #23]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d10f      	bne.n	800e5c2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	2202      	movs	r2, #2
 800e5a8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e5b2:	e006      	b.n	800e5c2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e5bc:	e001      	b.n	800e5c2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800e5be:	2302      	movs	r3, #2
 800e5c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800e5ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3718      	adds	r7, #24
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}

0800e5d4 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b08a      	sub	sp, #40	; 0x28
 800e5d8:	af02      	add	r7, sp, #8
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800e5e4:	f7fc fc26 	bl	800ae34 <HAL_GetTick>
 800e5e8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	3320      	adds	r3, #32
 800e5f0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d101      	bne.n	800e602 <HAL_QSPI_Transmit+0x2e>
 800e5fe:	2302      	movs	r3, #2
 800e600:	e076      	b.n	800e6f0 <HAL_QSPI_Transmit+0x11c>
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2201      	movs	r2, #1
 800e606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e610:	b2db      	uxtb	r3, r3
 800e612:	2b01      	cmp	r3, #1
 800e614:	d165      	bne.n	800e6e2 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2200      	movs	r2, #0
 800e61a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d056      	beq.n	800e6d0 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2212      	movs	r2, #18
 800e626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	691b      	ldr	r3, [r3, #16]
 800e630:	1c5a      	adds	r2, r3, #1
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	691b      	ldr	r3, [r3, #16]
 800e63c:	1c5a      	adds	r2, r3, #1
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	68ba      	ldr	r2, [r7, #8]
 800e646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	695a      	ldr	r2, [r3, #20]
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800e656:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800e658:	e01b      	b.n	800e692 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	9300      	str	r3, [sp, #0]
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	2201      	movs	r2, #1
 800e662:	2104      	movs	r1, #4
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f000 fa4e 	bl	800eb06 <QSPI_WaitFlagStateUntilTimeout>
 800e66a:	4603      	mov	r3, r0
 800e66c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800e66e:	7ffb      	ldrb	r3, [r7, #31]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d113      	bne.n	800e69c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e678:	781a      	ldrb	r2, [r3, #0]
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e682:	1c5a      	adds	r2, r3, #1
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e68c:	1e5a      	subs	r2, r3, #1
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e696:	2b00      	cmp	r3, #0
 800e698:	d1df      	bne.n	800e65a <HAL_QSPI_Transmit+0x86>
 800e69a:	e000      	b.n	800e69e <HAL_QSPI_Transmit+0xca>
          break;
 800e69c:	bf00      	nop
      }

      if (status == HAL_OK)
 800e69e:	7ffb      	ldrb	r3, [r7, #31]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d110      	bne.n	800e6c6 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	9300      	str	r3, [sp, #0]
 800e6a8:	69bb      	ldr	r3, [r7, #24]
 800e6aa:	2201      	movs	r2, #1
 800e6ac:	2102      	movs	r1, #2
 800e6ae:	68f8      	ldr	r0, [r7, #12]
 800e6b0:	f000 fa29 	bl	800eb06 <QSPI_WaitFlagStateUntilTimeout>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800e6b8:	7ffb      	ldrb	r3, [r7, #31]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d103      	bne.n	800e6c6 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2202      	movs	r2, #2
 800e6c4:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e6ce:	e00a      	b.n	800e6e6 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6d4:	f043 0208 	orr.w	r2, r3, #8
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800e6dc:	2301      	movs	r3, #1
 800e6de:	77fb      	strb	r3, [r7, #31]
 800e6e0:	e001      	b.n	800e6e6 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e6e2:	2302      	movs	r3, #2
 800e6e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800e6ee:	7ffb      	ldrb	r3, [r7, #31]
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3720      	adds	r7, #32
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b08a      	sub	sp, #40	; 0x28
 800e6fc:	af02      	add	r7, sp, #8
 800e6fe:	60f8      	str	r0, [r7, #12]
 800e700:	60b9      	str	r1, [r7, #8]
 800e702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e704:	2300      	movs	r3, #0
 800e706:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800e708:	f7fc fb94 	bl	800ae34 <HAL_GetTick>
 800e70c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	699b      	ldr	r3, [r3, #24]
 800e714:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	3320      	adds	r3, #32
 800e71c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e724:	b2db      	uxtb	r3, r3
 800e726:	2b01      	cmp	r3, #1
 800e728:	d101      	bne.n	800e72e <HAL_QSPI_Receive+0x36>
 800e72a:	2302      	movs	r3, #2
 800e72c:	e07d      	b.n	800e82a <HAL_QSPI_Receive+0x132>
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2201      	movs	r2, #1
 800e732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	2b01      	cmp	r3, #1
 800e740:	d16c      	bne.n	800e81c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2200      	movs	r2, #0
 800e746:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d05d      	beq.n	800e80a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2222      	movs	r2, #34	; 0x22
 800e752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	691b      	ldr	r3, [r3, #16]
 800e75c:	1c5a      	adds	r2, r3, #1
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	691b      	ldr	r3, [r3, #16]
 800e768:	1c5a      	adds	r2, r3, #1
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	68ba      	ldr	r2, [r7, #8]
 800e772:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	695b      	ldr	r3, [r3, #20]
 800e77a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e786:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	697a      	ldr	r2, [r7, #20]
 800e78e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800e790:	e01c      	b.n	800e7cc <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	69bb      	ldr	r3, [r7, #24]
 800e798:	2201      	movs	r2, #1
 800e79a:	2106      	movs	r1, #6
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	f000 f9b2 	bl	800eb06 <QSPI_WaitFlagStateUntilTimeout>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800e7a6:	7ffb      	ldrb	r3, [r7, #31]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d114      	bne.n	800e7d6 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7b0:	693a      	ldr	r2, [r7, #16]
 800e7b2:	7812      	ldrb	r2, [r2, #0]
 800e7b4:	b2d2      	uxtb	r2, r2
 800e7b6:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7bc:	1c5a      	adds	r2, r3, #1
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7c6:	1e5a      	subs	r2, r3, #1
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d1de      	bne.n	800e792 <HAL_QSPI_Receive+0x9a>
 800e7d4:	e000      	b.n	800e7d8 <HAL_QSPI_Receive+0xe0>
          break;
 800e7d6:	bf00      	nop
      }

      if (status == HAL_OK)
 800e7d8:	7ffb      	ldrb	r3, [r7, #31]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d110      	bne.n	800e800 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	9300      	str	r3, [sp, #0]
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	2102      	movs	r1, #2
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	f000 f98c 	bl	800eb06 <QSPI_WaitFlagStateUntilTimeout>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800e7f2:	7ffb      	ldrb	r3, [r7, #31]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d103      	bne.n	800e800 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	2202      	movs	r2, #2
 800e7fe:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2201      	movs	r2, #1
 800e804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e808:	e00a      	b.n	800e820 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e80e:	f043 0208 	orr.w	r2, r3, #8
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800e816:	2301      	movs	r3, #1
 800e818:	77fb      	strb	r3, [r7, #31]
 800e81a:	e001      	b.n	800e820 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e81c:	2302      	movs	r3, #2
 800e81e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2200      	movs	r2, #0
 800e824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800e828:	7ffb      	ldrb	r3, [r7, #31]
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3720      	adds	r7, #32
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}

0800e832 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b088      	sub	sp, #32
 800e836:	af02      	add	r7, sp, #8
 800e838:	60f8      	str	r0, [r7, #12]
 800e83a:	60b9      	str	r1, [r7, #8]
 800e83c:	607a      	str	r2, [r7, #4]
 800e83e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e840:	f7fc faf8 	bl	800ae34 <HAL_GetTick>
 800e844:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d101      	bne.n	800e856 <HAL_QSPI_AutoPolling+0x24>
 800e852:	2302      	movs	r3, #2
 800e854:	e060      	b.n	800e918 <HAL_QSPI_AutoPolling+0xe6>
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2201      	movs	r2, #1
 800e85a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e864:	b2db      	uxtb	r3, r3
 800e866:	2b01      	cmp	r3, #1
 800e868:	d14f      	bne.n	800e90a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2200      	movs	r2, #0
 800e86e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2242      	movs	r2, #66	; 0x42
 800e874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	2200      	movs	r2, #0
 800e880:	2120      	movs	r1, #32
 800e882:	68f8      	ldr	r0, [r7, #12]
 800e884:	f000 f93f 	bl	800eb06 <QSPI_WaitFlagStateUntilTimeout>
 800e888:	4603      	mov	r3, r0
 800e88a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800e88c:	7dfb      	ldrb	r3, [r7, #23]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d13d      	bne.n	800e90e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	6812      	ldr	r2, [r2, #0]
 800e89a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	687a      	ldr	r2, [r7, #4]
 800e8a2:	6852      	ldr	r2, [r2, #4]
 800e8a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	6892      	ldr	r2, [r2, #8]
 800e8ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	691b      	ldr	r3, [r3, #16]
 800e8be:	431a      	orrs	r2, r3
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800e8c8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	68da      	ldr	r2, [r3, #12]
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800e8d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e8d6:	68b9      	ldr	r1, [r7, #8]
 800e8d8:	68f8      	ldr	r0, [r7, #12]
 800e8da:	f000 f94b 	bl	800eb74 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	9300      	str	r3, [sp, #0]
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	2108      	movs	r1, #8
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	f000 f90c 	bl	800eb06 <QSPI_WaitFlagStateUntilTimeout>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800e8f2:	7dfb      	ldrb	r3, [r7, #23]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d10a      	bne.n	800e90e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2208      	movs	r2, #8
 800e8fe:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2201      	movs	r2, #1
 800e904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e908:	e001      	b.n	800e90e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800e90a:	2302      	movs	r3, #2
 800e90c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800e916:	7dfb      	ldrb	r3, [r7, #23]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3718      	adds	r7, #24
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b088      	sub	sp, #32
 800e924:	af02      	add	r7, sp, #8
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e92c:	f7fc fa82 	bl	800ae34 <HAL_GetTick>
 800e930:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	2b01      	cmp	r3, #1
 800e93c:	d101      	bne.n	800e942 <HAL_QSPI_MemoryMapped+0x22>
 800e93e:	2302      	movs	r3, #2
 800e940:	e04c      	b.n	800e9dc <HAL_QSPI_MemoryMapped+0xbc>
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2201      	movs	r2, #1
 800e946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e950:	b2db      	uxtb	r3, r3
 800e952:	2b01      	cmp	r3, #1
 800e954:	d13b      	bne.n	800e9ce <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2200      	movs	r2, #0
 800e95a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2282      	movs	r2, #130	; 0x82
 800e960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	2200      	movs	r2, #0
 800e96e:	2120      	movs	r1, #32
 800e970:	68f8      	ldr	r0, [r7, #12]
 800e972:	f000 f8c8 	bl	800eb06 <QSPI_WaitFlagStateUntilTimeout>
 800e976:	4603      	mov	r3, r0
 800e978:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800e97a:	7dfb      	ldrb	r3, [r7, #23]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d128      	bne.n	800e9d2 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f023 0108 	bic.w	r1, r3, #8
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	685a      	ldr	r2, [r3, #4]
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	430a      	orrs	r2, r1
 800e994:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	2b08      	cmp	r3, #8
 800e99c:	d110      	bne.n	800e9c0 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	6812      	ldr	r2, [r2, #0]
 800e9a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	2210      	movs	r2, #16
 800e9ae:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e9be:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800e9c0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800e9c4:	68b9      	ldr	r1, [r7, #8]
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	f000 f8d4 	bl	800eb74 <QSPI_Config>
 800e9cc:	e001      	b.n	800e9d2 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e9ce:	2302      	movs	r3, #2
 800e9d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800e9da:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3718      	adds	r7, #24
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}

0800e9e4 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800e9ec:	bf00      	nop
 800e9ee:	370c      	adds	r7, #12
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr

0800e9f8 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800ea00:	bf00      	nop
 800ea02:	370c      	adds	r7, #12
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800ea14:	bf00      	nop
 800ea16:	370c      	adds	r7, #12
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800ea28:	bf00      	nop
 800ea2a:	370c      	adds	r7, #12
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr

0800ea34 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800ea3c:	bf00      	nop
 800ea3e:	370c      	adds	r7, #12
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr

0800ea48 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800ea50:	bf00      	nop
 800ea52:	370c      	adds	r7, #12
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr

0800ea5c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800ea64:	bf00      	nop
 800ea66:	370c      	adds	r7, #12
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr

0800ea70 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b083      	sub	sp, #12
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800ea78:	bf00      	nop
 800ea7a:	370c      	adds	r7, #12
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	683a      	ldr	r2, [r7, #0]
 800ea92:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ea94:	bf00      	nop
 800ea96:	370c      	adds	r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaac:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2200      	movs	r2, #0
 800eab2:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2200      	movs	r2, #0
 800eab8:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eac0:	b2db      	uxtb	r3, r3
 800eac2:	2b08      	cmp	r3, #8
 800eac4:	d114      	bne.n	800eaf0 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2202      	movs	r2, #2
 800eacc:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800eadc:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f042 0202 	orr.w	r2, r2, #2
 800eaec:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800eaee:	e006      	b.n	800eafe <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f7ff ff73 	bl	800e9e4 <HAL_QSPI_ErrorCallback>
}
 800eafe:	bf00      	nop
 800eb00:	3710      	adds	r7, #16
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b084      	sub	sp, #16
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	60f8      	str	r0, [r7, #12]
 800eb0e:	60b9      	str	r1, [r7, #8]
 800eb10:	603b      	str	r3, [r7, #0]
 800eb12:	4613      	mov	r3, r2
 800eb14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800eb16:	e01a      	b.n	800eb4e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb18:	69bb      	ldr	r3, [r7, #24]
 800eb1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb1e:	d016      	beq.n	800eb4e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb20:	f7fc f988 	bl	800ae34 <HAL_GetTick>
 800eb24:	4602      	mov	r2, r0
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	1ad3      	subs	r3, r2, r3
 800eb2a:	69ba      	ldr	r2, [r7, #24]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d302      	bcc.n	800eb36 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800eb30:	69bb      	ldr	r3, [r7, #24]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d10b      	bne.n	800eb4e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2204      	movs	r2, #4
 800eb3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb42:	f043 0201 	orr.w	r2, r3, #1
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	e00e      	b.n	800eb6c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	689a      	ldr	r2, [r3, #8]
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	4013      	ands	r3, r2
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	bf14      	ite	ne
 800eb5c:	2301      	movne	r3, #1
 800eb5e:	2300      	moveq	r3, #0
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	461a      	mov	r2, r3
 800eb64:	79fb      	ldrb	r3, [r7, #7]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d1d6      	bne.n	800eb18 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800eb6a:	2300      	movs	r3, #0
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800eb74:	b480      	push	{r7}
 800eb76:	b085      	sub	sp, #20
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	60f8      	str	r0, [r7, #12]
 800eb7c:	60b9      	str	r1, [r7, #8]
 800eb7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d009      	beq.n	800eb9c <QSPI_Config+0x28>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800eb8e:	d005      	beq.n	800eb9c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	3a01      	subs	r2, #1
 800eb9a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	699b      	ldr	r3, [r3, #24]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	f000 80b9 	beq.w	800ed18 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	6a1b      	ldr	r3, [r3, #32]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d05f      	beq.n	800ec6e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	68ba      	ldr	r2, [r7, #8]
 800ebb4:	6892      	ldr	r2, [r2, #8]
 800ebb6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	69db      	ldr	r3, [r3, #28]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d031      	beq.n	800ec24 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebc8:	431a      	orrs	r2, r3
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebce:	431a      	orrs	r2, r3
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd4:	431a      	orrs	r2, r3
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	695b      	ldr	r3, [r3, #20]
 800ebda:	049b      	lsls	r3, r3, #18
 800ebdc:	431a      	orrs	r2, r3
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	691b      	ldr	r3, [r3, #16]
 800ebe2:	431a      	orrs	r2, r3
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	6a1b      	ldr	r3, [r3, #32]
 800ebe8:	431a      	orrs	r2, r3
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	68db      	ldr	r3, [r3, #12]
 800ebee:	431a      	orrs	r2, r3
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	69db      	ldr	r3, [r3, #28]
 800ebf4:	431a      	orrs	r2, r3
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	699b      	ldr	r3, [r3, #24]
 800ebfa:	431a      	orrs	r2, r3
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	ea42 0103 	orr.w	r1, r2, r3
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	430a      	orrs	r2, r1
 800ec0c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ec14:	f000 812e 	beq.w	800ee74 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	68ba      	ldr	r2, [r7, #8]
 800ec1e:	6852      	ldr	r2, [r2, #4]
 800ec20:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800ec22:	e127      	b.n	800ee74 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec2c:	431a      	orrs	r2, r3
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec32:	431a      	orrs	r2, r3
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec38:	431a      	orrs	r2, r3
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	695b      	ldr	r3, [r3, #20]
 800ec3e:	049b      	lsls	r3, r3, #18
 800ec40:	431a      	orrs	r2, r3
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	691b      	ldr	r3, [r3, #16]
 800ec46:	431a      	orrs	r2, r3
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	6a1b      	ldr	r3, [r3, #32]
 800ec4c:	431a      	orrs	r2, r3
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	69db      	ldr	r3, [r3, #28]
 800ec52:	431a      	orrs	r2, r3
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	699b      	ldr	r3, [r3, #24]
 800ec58:	431a      	orrs	r2, r3
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	ea42 0103 	orr.w	r1, r2, r3
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	687a      	ldr	r2, [r7, #4]
 800ec68:	430a      	orrs	r2, r1
 800ec6a:	615a      	str	r2, [r3, #20]
}
 800ec6c:	e102      	b.n	800ee74 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	69db      	ldr	r3, [r3, #28]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d02e      	beq.n	800ecd4 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec7e:	431a      	orrs	r2, r3
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec84:	431a      	orrs	r2, r3
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec8a:	431a      	orrs	r2, r3
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	695b      	ldr	r3, [r3, #20]
 800ec90:	049b      	lsls	r3, r3, #18
 800ec92:	431a      	orrs	r2, r3
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	6a1b      	ldr	r3, [r3, #32]
 800ec98:	431a      	orrs	r2, r3
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	431a      	orrs	r2, r3
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	69db      	ldr	r3, [r3, #28]
 800eca4:	431a      	orrs	r2, r3
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	699b      	ldr	r3, [r3, #24]
 800ecaa:	431a      	orrs	r2, r3
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	ea42 0103 	orr.w	r1, r2, r3
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	430a      	orrs	r2, r1
 800ecbc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ecc4:	f000 80d6 	beq.w	800ee74 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	68ba      	ldr	r2, [r7, #8]
 800ecce:	6852      	ldr	r2, [r2, #4]
 800ecd0:	619a      	str	r2, [r3, #24]
}
 800ecd2:	e0cf      	b.n	800ee74 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecdc:	431a      	orrs	r2, r3
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ece2:	431a      	orrs	r2, r3
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece8:	431a      	orrs	r2, r3
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	695b      	ldr	r3, [r3, #20]
 800ecee:	049b      	lsls	r3, r3, #18
 800ecf0:	431a      	orrs	r2, r3
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	6a1b      	ldr	r3, [r3, #32]
 800ecf6:	431a      	orrs	r2, r3
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	69db      	ldr	r3, [r3, #28]
 800ecfc:	431a      	orrs	r2, r3
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	699b      	ldr	r3, [r3, #24]
 800ed02:	431a      	orrs	r2, r3
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	ea42 0103 	orr.w	r1, r2, r3
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	430a      	orrs	r2, r1
 800ed14:	615a      	str	r2, [r3, #20]
}
 800ed16:	e0ad      	b.n	800ee74 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	6a1b      	ldr	r3, [r3, #32]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d058      	beq.n	800edd2 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	68ba      	ldr	r2, [r7, #8]
 800ed26:	6892      	ldr	r2, [r2, #8]
 800ed28:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	69db      	ldr	r3, [r3, #28]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d02d      	beq.n	800ed8e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed3a:	431a      	orrs	r2, r3
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed40:	431a      	orrs	r2, r3
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed46:	431a      	orrs	r2, r3
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	695b      	ldr	r3, [r3, #20]
 800ed4c:	049b      	lsls	r3, r3, #18
 800ed4e:	431a      	orrs	r2, r3
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	691b      	ldr	r3, [r3, #16]
 800ed54:	431a      	orrs	r2, r3
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	6a1b      	ldr	r3, [r3, #32]
 800ed5a:	431a      	orrs	r2, r3
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	431a      	orrs	r2, r3
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	69db      	ldr	r3, [r3, #28]
 800ed66:	431a      	orrs	r2, r3
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	699b      	ldr	r3, [r3, #24]
 800ed6c:	ea42 0103 	orr.w	r1, r2, r3
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	687a      	ldr	r2, [r7, #4]
 800ed76:	430a      	orrs	r2, r1
 800ed78:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ed80:	d078      	beq.n	800ee74 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	68ba      	ldr	r2, [r7, #8]
 800ed88:	6852      	ldr	r2, [r2, #4]
 800ed8a:	619a      	str	r2, [r3, #24]
}
 800ed8c:	e072      	b.n	800ee74 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed96:	431a      	orrs	r2, r3
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed9c:	431a      	orrs	r2, r3
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda2:	431a      	orrs	r2, r3
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	695b      	ldr	r3, [r3, #20]
 800eda8:	049b      	lsls	r3, r3, #18
 800edaa:	431a      	orrs	r2, r3
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	691b      	ldr	r3, [r3, #16]
 800edb0:	431a      	orrs	r2, r3
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	6a1b      	ldr	r3, [r3, #32]
 800edb6:	431a      	orrs	r2, r3
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	69db      	ldr	r3, [r3, #28]
 800edbc:	431a      	orrs	r2, r3
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	699b      	ldr	r3, [r3, #24]
 800edc2:	ea42 0103 	orr.w	r1, r2, r3
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	430a      	orrs	r2, r1
 800edce:	615a      	str	r2, [r3, #20]
}
 800edd0:	e050      	b.n	800ee74 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	69db      	ldr	r3, [r3, #28]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d02a      	beq.n	800ee30 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ede2:	431a      	orrs	r2, r3
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ede8:	431a      	orrs	r2, r3
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edee:	431a      	orrs	r2, r3
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	695b      	ldr	r3, [r3, #20]
 800edf4:	049b      	lsls	r3, r3, #18
 800edf6:	431a      	orrs	r2, r3
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	6a1b      	ldr	r3, [r3, #32]
 800edfc:	431a      	orrs	r2, r3
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	68db      	ldr	r3, [r3, #12]
 800ee02:	431a      	orrs	r2, r3
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	69db      	ldr	r3, [r3, #28]
 800ee08:	431a      	orrs	r2, r3
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	699b      	ldr	r3, [r3, #24]
 800ee0e:	ea42 0103 	orr.w	r1, r2, r3
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	687a      	ldr	r2, [r7, #4]
 800ee18:	430a      	orrs	r2, r1
 800ee1a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ee22:	d027      	beq.n	800ee74 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	68ba      	ldr	r2, [r7, #8]
 800ee2a:	6852      	ldr	r2, [r2, #4]
 800ee2c:	619a      	str	r2, [r3, #24]
}
 800ee2e:	e021      	b.n	800ee74 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d01d      	beq.n	800ee74 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee40:	431a      	orrs	r2, r3
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee46:	431a      	orrs	r2, r3
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee4c:	431a      	orrs	r2, r3
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	695b      	ldr	r3, [r3, #20]
 800ee52:	049b      	lsls	r3, r3, #18
 800ee54:	431a      	orrs	r2, r3
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	6a1b      	ldr	r3, [r3, #32]
 800ee5a:	431a      	orrs	r2, r3
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	69db      	ldr	r3, [r3, #28]
 800ee60:	431a      	orrs	r2, r3
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	699b      	ldr	r3, [r3, #24]
 800ee66:	ea42 0103 	orr.w	r1, r2, r3
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	687a      	ldr	r2, [r7, #4]
 800ee70:	430a      	orrs	r2, r1
 800ee72:	615a      	str	r2, [r3, #20]
}
 800ee74:	bf00      	nop
 800ee76:	3714      	adds	r7, #20
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr

0800ee80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b086      	sub	sp, #24
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d101      	bne.n	800ee96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800ee92:	2301      	movs	r3, #1
 800ee94:	e29b      	b.n	800f3ce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f003 0301 	and.w	r3, r3, #1
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	f000 8087 	beq.w	800efb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800eea4:	4b96      	ldr	r3, [pc, #600]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	f003 030c 	and.w	r3, r3, #12
 800eeac:	2b04      	cmp	r3, #4
 800eeae:	d00c      	beq.n	800eeca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800eeb0:	4b93      	ldr	r3, [pc, #588]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800eeb2:	689b      	ldr	r3, [r3, #8]
 800eeb4:	f003 030c 	and.w	r3, r3, #12
 800eeb8:	2b08      	cmp	r3, #8
 800eeba:	d112      	bne.n	800eee2 <HAL_RCC_OscConfig+0x62>
 800eebc:	4b90      	ldr	r3, [pc, #576]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eec8:	d10b      	bne.n	800eee2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eeca:	4b8d      	ldr	r3, [pc, #564]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d06c      	beq.n	800efb0 <HAL_RCC_OscConfig+0x130>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	685b      	ldr	r3, [r3, #4]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d168      	bne.n	800efb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800eede:	2301      	movs	r3, #1
 800eee0:	e275      	b.n	800f3ce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eeea:	d106      	bne.n	800eefa <HAL_RCC_OscConfig+0x7a>
 800eeec:	4b84      	ldr	r3, [pc, #528]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4a83      	ldr	r2, [pc, #524]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800eef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eef6:	6013      	str	r3, [r2, #0]
 800eef8:	e02e      	b.n	800ef58 <HAL_RCC_OscConfig+0xd8>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d10c      	bne.n	800ef1c <HAL_RCC_OscConfig+0x9c>
 800ef02:	4b7f      	ldr	r3, [pc, #508]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	4a7e      	ldr	r2, [pc, #504]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800ef08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ef0c:	6013      	str	r3, [r2, #0]
 800ef0e:	4b7c      	ldr	r3, [pc, #496]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	4a7b      	ldr	r2, [pc, #492]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800ef14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ef18:	6013      	str	r3, [r2, #0]
 800ef1a:	e01d      	b.n	800ef58 <HAL_RCC_OscConfig+0xd8>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ef24:	d10c      	bne.n	800ef40 <HAL_RCC_OscConfig+0xc0>
 800ef26:	4b76      	ldr	r3, [pc, #472]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	4a75      	ldr	r2, [pc, #468]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800ef2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ef30:	6013      	str	r3, [r2, #0]
 800ef32:	4b73      	ldr	r3, [pc, #460]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4a72      	ldr	r2, [pc, #456]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800ef38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ef3c:	6013      	str	r3, [r2, #0]
 800ef3e:	e00b      	b.n	800ef58 <HAL_RCC_OscConfig+0xd8>
 800ef40:	4b6f      	ldr	r3, [pc, #444]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4a6e      	ldr	r2, [pc, #440]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800ef46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ef4a:	6013      	str	r3, [r2, #0]
 800ef4c:	4b6c      	ldr	r3, [pc, #432]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4a6b      	ldr	r2, [pc, #428]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800ef52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ef56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d013      	beq.n	800ef88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef60:	f7fb ff68 	bl	800ae34 <HAL_GetTick>
 800ef64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef66:	e008      	b.n	800ef7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ef68:	f7fb ff64 	bl	800ae34 <HAL_GetTick>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	1ad3      	subs	r3, r2, r3
 800ef72:	2b64      	cmp	r3, #100	; 0x64
 800ef74:	d901      	bls.n	800ef7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ef76:	2303      	movs	r3, #3
 800ef78:	e229      	b.n	800f3ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef7a:	4b61      	ldr	r3, [pc, #388]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d0f0      	beq.n	800ef68 <HAL_RCC_OscConfig+0xe8>
 800ef86:	e014      	b.n	800efb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef88:	f7fb ff54 	bl	800ae34 <HAL_GetTick>
 800ef8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ef8e:	e008      	b.n	800efa2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ef90:	f7fb ff50 	bl	800ae34 <HAL_GetTick>
 800ef94:	4602      	mov	r2, r0
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	1ad3      	subs	r3, r2, r3
 800ef9a:	2b64      	cmp	r3, #100	; 0x64
 800ef9c:	d901      	bls.n	800efa2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ef9e:	2303      	movs	r3, #3
 800efa0:	e215      	b.n	800f3ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800efa2:	4b57      	ldr	r3, [pc, #348]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d1f0      	bne.n	800ef90 <HAL_RCC_OscConfig+0x110>
 800efae:	e000      	b.n	800efb2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800efb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f003 0302 	and.w	r3, r3, #2
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d069      	beq.n	800f092 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800efbe:	4b50      	ldr	r3, [pc, #320]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800efc0:	689b      	ldr	r3, [r3, #8]
 800efc2:	f003 030c 	and.w	r3, r3, #12
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d00b      	beq.n	800efe2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800efca:	4b4d      	ldr	r3, [pc, #308]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800efcc:	689b      	ldr	r3, [r3, #8]
 800efce:	f003 030c 	and.w	r3, r3, #12
 800efd2:	2b08      	cmp	r3, #8
 800efd4:	d11c      	bne.n	800f010 <HAL_RCC_OscConfig+0x190>
 800efd6:	4b4a      	ldr	r3, [pc, #296]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800efd8:	685b      	ldr	r3, [r3, #4]
 800efda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d116      	bne.n	800f010 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800efe2:	4b47      	ldr	r3, [pc, #284]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	f003 0302 	and.w	r3, r3, #2
 800efea:	2b00      	cmp	r3, #0
 800efec:	d005      	beq.n	800effa <HAL_RCC_OscConfig+0x17a>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	68db      	ldr	r3, [r3, #12]
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	d001      	beq.n	800effa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800eff6:	2301      	movs	r3, #1
 800eff8:	e1e9      	b.n	800f3ce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800effa:	4b41      	ldr	r3, [pc, #260]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	691b      	ldr	r3, [r3, #16]
 800f006:	00db      	lsls	r3, r3, #3
 800f008:	493d      	ldr	r1, [pc, #244]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800f00a:	4313      	orrs	r3, r2
 800f00c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f00e:	e040      	b.n	800f092 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	68db      	ldr	r3, [r3, #12]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d023      	beq.n	800f060 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f018:	4b39      	ldr	r3, [pc, #228]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4a38      	ldr	r2, [pc, #224]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800f01e:	f043 0301 	orr.w	r3, r3, #1
 800f022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f024:	f7fb ff06 	bl	800ae34 <HAL_GetTick>
 800f028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f02a:	e008      	b.n	800f03e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f02c:	f7fb ff02 	bl	800ae34 <HAL_GetTick>
 800f030:	4602      	mov	r2, r0
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	1ad3      	subs	r3, r2, r3
 800f036:	2b02      	cmp	r3, #2
 800f038:	d901      	bls.n	800f03e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800f03a:	2303      	movs	r3, #3
 800f03c:	e1c7      	b.n	800f3ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f03e:	4b30      	ldr	r3, [pc, #192]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	f003 0302 	and.w	r3, r3, #2
 800f046:	2b00      	cmp	r3, #0
 800f048:	d0f0      	beq.n	800f02c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f04a:	4b2d      	ldr	r3, [pc, #180]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	691b      	ldr	r3, [r3, #16]
 800f056:	00db      	lsls	r3, r3, #3
 800f058:	4929      	ldr	r1, [pc, #164]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800f05a:	4313      	orrs	r3, r2
 800f05c:	600b      	str	r3, [r1, #0]
 800f05e:	e018      	b.n	800f092 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f060:	4b27      	ldr	r3, [pc, #156]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	4a26      	ldr	r2, [pc, #152]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800f066:	f023 0301 	bic.w	r3, r3, #1
 800f06a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f06c:	f7fb fee2 	bl	800ae34 <HAL_GetTick>
 800f070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f072:	e008      	b.n	800f086 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f074:	f7fb fede 	bl	800ae34 <HAL_GetTick>
 800f078:	4602      	mov	r2, r0
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	1ad3      	subs	r3, r2, r3
 800f07e:	2b02      	cmp	r3, #2
 800f080:	d901      	bls.n	800f086 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800f082:	2303      	movs	r3, #3
 800f084:	e1a3      	b.n	800f3ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f086:	4b1e      	ldr	r3, [pc, #120]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f003 0302 	and.w	r3, r3, #2
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d1f0      	bne.n	800f074 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f003 0308 	and.w	r3, r3, #8
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d038      	beq.n	800f110 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	695b      	ldr	r3, [r3, #20]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d019      	beq.n	800f0da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f0a6:	4b16      	ldr	r3, [pc, #88]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800f0a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0aa:	4a15      	ldr	r2, [pc, #84]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800f0ac:	f043 0301 	orr.w	r3, r3, #1
 800f0b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f0b2:	f7fb febf 	bl	800ae34 <HAL_GetTick>
 800f0b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f0b8:	e008      	b.n	800f0cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f0ba:	f7fb febb 	bl	800ae34 <HAL_GetTick>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	1ad3      	subs	r3, r2, r3
 800f0c4:	2b02      	cmp	r3, #2
 800f0c6:	d901      	bls.n	800f0cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800f0c8:	2303      	movs	r3, #3
 800f0ca:	e180      	b.n	800f3ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f0cc:	4b0c      	ldr	r3, [pc, #48]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800f0ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0d0:	f003 0302 	and.w	r3, r3, #2
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d0f0      	beq.n	800f0ba <HAL_RCC_OscConfig+0x23a>
 800f0d8:	e01a      	b.n	800f110 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f0da:	4b09      	ldr	r3, [pc, #36]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800f0dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0de:	4a08      	ldr	r2, [pc, #32]	; (800f100 <HAL_RCC_OscConfig+0x280>)
 800f0e0:	f023 0301 	bic.w	r3, r3, #1
 800f0e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f0e6:	f7fb fea5 	bl	800ae34 <HAL_GetTick>
 800f0ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f0ec:	e00a      	b.n	800f104 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f0ee:	f7fb fea1 	bl	800ae34 <HAL_GetTick>
 800f0f2:	4602      	mov	r2, r0
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	1ad3      	subs	r3, r2, r3
 800f0f8:	2b02      	cmp	r3, #2
 800f0fa:	d903      	bls.n	800f104 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800f0fc:	2303      	movs	r3, #3
 800f0fe:	e166      	b.n	800f3ce <HAL_RCC_OscConfig+0x54e>
 800f100:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f104:	4b92      	ldr	r3, [pc, #584]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f108:	f003 0302 	and.w	r3, r3, #2
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d1ee      	bne.n	800f0ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f003 0304 	and.w	r3, r3, #4
 800f118:	2b00      	cmp	r3, #0
 800f11a:	f000 80a4 	beq.w	800f266 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f11e:	4b8c      	ldr	r3, [pc, #560]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f126:	2b00      	cmp	r3, #0
 800f128:	d10d      	bne.n	800f146 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800f12a:	4b89      	ldr	r3, [pc, #548]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f12e:	4a88      	ldr	r2, [pc, #544]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f134:	6413      	str	r3, [r2, #64]	; 0x40
 800f136:	4b86      	ldr	r3, [pc, #536]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f13a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f13e:	60bb      	str	r3, [r7, #8]
 800f140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f142:	2301      	movs	r3, #1
 800f144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f146:	4b83      	ldr	r3, [pc, #524]	; (800f354 <HAL_RCC_OscConfig+0x4d4>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d118      	bne.n	800f184 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800f152:	4b80      	ldr	r3, [pc, #512]	; (800f354 <HAL_RCC_OscConfig+0x4d4>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	4a7f      	ldr	r2, [pc, #508]	; (800f354 <HAL_RCC_OscConfig+0x4d4>)
 800f158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f15c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f15e:	f7fb fe69 	bl	800ae34 <HAL_GetTick>
 800f162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f164:	e008      	b.n	800f178 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f166:	f7fb fe65 	bl	800ae34 <HAL_GetTick>
 800f16a:	4602      	mov	r2, r0
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	1ad3      	subs	r3, r2, r3
 800f170:	2b64      	cmp	r3, #100	; 0x64
 800f172:	d901      	bls.n	800f178 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800f174:	2303      	movs	r3, #3
 800f176:	e12a      	b.n	800f3ce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f178:	4b76      	ldr	r3, [pc, #472]	; (800f354 <HAL_RCC_OscConfig+0x4d4>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f180:	2b00      	cmp	r3, #0
 800f182:	d0f0      	beq.n	800f166 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	689b      	ldr	r3, [r3, #8]
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d106      	bne.n	800f19a <HAL_RCC_OscConfig+0x31a>
 800f18c:	4b70      	ldr	r3, [pc, #448]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f18e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f190:	4a6f      	ldr	r2, [pc, #444]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f192:	f043 0301 	orr.w	r3, r3, #1
 800f196:	6713      	str	r3, [r2, #112]	; 0x70
 800f198:	e02d      	b.n	800f1f6 <HAL_RCC_OscConfig+0x376>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	689b      	ldr	r3, [r3, #8]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d10c      	bne.n	800f1bc <HAL_RCC_OscConfig+0x33c>
 800f1a2:	4b6b      	ldr	r3, [pc, #428]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1a6:	4a6a      	ldr	r2, [pc, #424]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f1a8:	f023 0301 	bic.w	r3, r3, #1
 800f1ac:	6713      	str	r3, [r2, #112]	; 0x70
 800f1ae:	4b68      	ldr	r3, [pc, #416]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1b2:	4a67      	ldr	r2, [pc, #412]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f1b4:	f023 0304 	bic.w	r3, r3, #4
 800f1b8:	6713      	str	r3, [r2, #112]	; 0x70
 800f1ba:	e01c      	b.n	800f1f6 <HAL_RCC_OscConfig+0x376>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	689b      	ldr	r3, [r3, #8]
 800f1c0:	2b05      	cmp	r3, #5
 800f1c2:	d10c      	bne.n	800f1de <HAL_RCC_OscConfig+0x35e>
 800f1c4:	4b62      	ldr	r3, [pc, #392]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f1c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1c8:	4a61      	ldr	r2, [pc, #388]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f1ca:	f043 0304 	orr.w	r3, r3, #4
 800f1ce:	6713      	str	r3, [r2, #112]	; 0x70
 800f1d0:	4b5f      	ldr	r3, [pc, #380]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f1d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1d4:	4a5e      	ldr	r2, [pc, #376]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f1d6:	f043 0301 	orr.w	r3, r3, #1
 800f1da:	6713      	str	r3, [r2, #112]	; 0x70
 800f1dc:	e00b      	b.n	800f1f6 <HAL_RCC_OscConfig+0x376>
 800f1de:	4b5c      	ldr	r3, [pc, #368]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1e2:	4a5b      	ldr	r2, [pc, #364]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f1e4:	f023 0301 	bic.w	r3, r3, #1
 800f1e8:	6713      	str	r3, [r2, #112]	; 0x70
 800f1ea:	4b59      	ldr	r3, [pc, #356]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1ee:	4a58      	ldr	r2, [pc, #352]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f1f0:	f023 0304 	bic.w	r3, r3, #4
 800f1f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	689b      	ldr	r3, [r3, #8]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d015      	beq.n	800f22a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f1fe:	f7fb fe19 	bl	800ae34 <HAL_GetTick>
 800f202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f204:	e00a      	b.n	800f21c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f206:	f7fb fe15 	bl	800ae34 <HAL_GetTick>
 800f20a:	4602      	mov	r2, r0
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	1ad3      	subs	r3, r2, r3
 800f210:	f241 3288 	movw	r2, #5000	; 0x1388
 800f214:	4293      	cmp	r3, r2
 800f216:	d901      	bls.n	800f21c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800f218:	2303      	movs	r3, #3
 800f21a:	e0d8      	b.n	800f3ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f21c:	4b4c      	ldr	r3, [pc, #304]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f21e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f220:	f003 0302 	and.w	r3, r3, #2
 800f224:	2b00      	cmp	r3, #0
 800f226:	d0ee      	beq.n	800f206 <HAL_RCC_OscConfig+0x386>
 800f228:	e014      	b.n	800f254 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f22a:	f7fb fe03 	bl	800ae34 <HAL_GetTick>
 800f22e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f230:	e00a      	b.n	800f248 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f232:	f7fb fdff 	bl	800ae34 <HAL_GetTick>
 800f236:	4602      	mov	r2, r0
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	1ad3      	subs	r3, r2, r3
 800f23c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f240:	4293      	cmp	r3, r2
 800f242:	d901      	bls.n	800f248 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800f244:	2303      	movs	r3, #3
 800f246:	e0c2      	b.n	800f3ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f248:	4b41      	ldr	r3, [pc, #260]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f24a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f24c:	f003 0302 	and.w	r3, r3, #2
 800f250:	2b00      	cmp	r3, #0
 800f252:	d1ee      	bne.n	800f232 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800f254:	7dfb      	ldrb	r3, [r7, #23]
 800f256:	2b01      	cmp	r3, #1
 800f258:	d105      	bne.n	800f266 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f25a:	4b3d      	ldr	r3, [pc, #244]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f25e:	4a3c      	ldr	r2, [pc, #240]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f264:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	699b      	ldr	r3, [r3, #24]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	f000 80ae 	beq.w	800f3cc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f270:	4b37      	ldr	r3, [pc, #220]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f272:	689b      	ldr	r3, [r3, #8]
 800f274:	f003 030c 	and.w	r3, r3, #12
 800f278:	2b08      	cmp	r3, #8
 800f27a:	d06d      	beq.n	800f358 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	699b      	ldr	r3, [r3, #24]
 800f280:	2b02      	cmp	r3, #2
 800f282:	d14b      	bne.n	800f31c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f284:	4b32      	ldr	r3, [pc, #200]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	4a31      	ldr	r2, [pc, #196]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f28a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f28e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f290:	f7fb fdd0 	bl	800ae34 <HAL_GetTick>
 800f294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f296:	e008      	b.n	800f2aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f298:	f7fb fdcc 	bl	800ae34 <HAL_GetTick>
 800f29c:	4602      	mov	r2, r0
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	1ad3      	subs	r3, r2, r3
 800f2a2:	2b02      	cmp	r3, #2
 800f2a4:	d901      	bls.n	800f2aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800f2a6:	2303      	movs	r3, #3
 800f2a8:	e091      	b.n	800f3ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f2aa:	4b29      	ldr	r3, [pc, #164]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d1f0      	bne.n	800f298 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	69da      	ldr	r2, [r3, #28]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6a1b      	ldr	r3, [r3, #32]
 800f2be:	431a      	orrs	r2, r3
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c4:	019b      	lsls	r3, r3, #6
 800f2c6:	431a      	orrs	r2, r3
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2cc:	085b      	lsrs	r3, r3, #1
 800f2ce:	3b01      	subs	r3, #1
 800f2d0:	041b      	lsls	r3, r3, #16
 800f2d2:	431a      	orrs	r2, r3
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2d8:	061b      	lsls	r3, r3, #24
 800f2da:	431a      	orrs	r2, r3
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2e0:	071b      	lsls	r3, r3, #28
 800f2e2:	491b      	ldr	r1, [pc, #108]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f2e8:	4b19      	ldr	r3, [pc, #100]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	4a18      	ldr	r2, [pc, #96]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f2ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f2f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f2f4:	f7fb fd9e 	bl	800ae34 <HAL_GetTick>
 800f2f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f2fa:	e008      	b.n	800f30e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f2fc:	f7fb fd9a 	bl	800ae34 <HAL_GetTick>
 800f300:	4602      	mov	r2, r0
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	1ad3      	subs	r3, r2, r3
 800f306:	2b02      	cmp	r3, #2
 800f308:	d901      	bls.n	800f30e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800f30a:	2303      	movs	r3, #3
 800f30c:	e05f      	b.n	800f3ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f30e:	4b10      	ldr	r3, [pc, #64]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f316:	2b00      	cmp	r3, #0
 800f318:	d0f0      	beq.n	800f2fc <HAL_RCC_OscConfig+0x47c>
 800f31a:	e057      	b.n	800f3cc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f31c:	4b0c      	ldr	r3, [pc, #48]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	4a0b      	ldr	r2, [pc, #44]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f328:	f7fb fd84 	bl	800ae34 <HAL_GetTick>
 800f32c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f32e:	e008      	b.n	800f342 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f330:	f7fb fd80 	bl	800ae34 <HAL_GetTick>
 800f334:	4602      	mov	r2, r0
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	1ad3      	subs	r3, r2, r3
 800f33a:	2b02      	cmp	r3, #2
 800f33c:	d901      	bls.n	800f342 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800f33e:	2303      	movs	r3, #3
 800f340:	e045      	b.n	800f3ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f342:	4b03      	ldr	r3, [pc, #12]	; (800f350 <HAL_RCC_OscConfig+0x4d0>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d1f0      	bne.n	800f330 <HAL_RCC_OscConfig+0x4b0>
 800f34e:	e03d      	b.n	800f3cc <HAL_RCC_OscConfig+0x54c>
 800f350:	40023800 	.word	0x40023800
 800f354:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800f358:	4b1f      	ldr	r3, [pc, #124]	; (800f3d8 <HAL_RCC_OscConfig+0x558>)
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	699b      	ldr	r3, [r3, #24]
 800f362:	2b01      	cmp	r3, #1
 800f364:	d030      	beq.n	800f3c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f370:	429a      	cmp	r2, r3
 800f372:	d129      	bne.n	800f3c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f37e:	429a      	cmp	r2, r3
 800f380:	d122      	bne.n	800f3c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f382:	68fa      	ldr	r2, [r7, #12]
 800f384:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f388:	4013      	ands	r3, r2
 800f38a:	687a      	ldr	r2, [r7, #4]
 800f38c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f38e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f390:	4293      	cmp	r3, r2
 800f392:	d119      	bne.n	800f3c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f39e:	085b      	lsrs	r3, r3, #1
 800f3a0:	3b01      	subs	r3, #1
 800f3a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d10f      	bne.n	800f3c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d107      	bne.n	800f3c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3c2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d001      	beq.n	800f3cc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	e000      	b.n	800f3ce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800f3cc:	2300      	movs	r3, #0
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3718      	adds	r7, #24
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	40023800 	.word	0x40023800

0800f3dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b084      	sub	sp, #16
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d101      	bne.n	800f3f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	e0d0      	b.n	800f596 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f3f4:	4b6a      	ldr	r3, [pc, #424]	; (800f5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f003 030f 	and.w	r3, r3, #15
 800f3fc:	683a      	ldr	r2, [r7, #0]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d910      	bls.n	800f424 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f402:	4b67      	ldr	r3, [pc, #412]	; (800f5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f023 020f 	bic.w	r2, r3, #15
 800f40a:	4965      	ldr	r1, [pc, #404]	; (800f5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	4313      	orrs	r3, r2
 800f410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f412:	4b63      	ldr	r3, [pc, #396]	; (800f5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f003 030f 	and.w	r3, r3, #15
 800f41a:	683a      	ldr	r2, [r7, #0]
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d001      	beq.n	800f424 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800f420:	2301      	movs	r3, #1
 800f422:	e0b8      	b.n	800f596 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	f003 0302 	and.w	r3, r3, #2
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d020      	beq.n	800f472 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	f003 0304 	and.w	r3, r3, #4
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d005      	beq.n	800f448 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f43c:	4b59      	ldr	r3, [pc, #356]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f43e:	689b      	ldr	r3, [r3, #8]
 800f440:	4a58      	ldr	r2, [pc, #352]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f442:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f446:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	f003 0308 	and.w	r3, r3, #8
 800f450:	2b00      	cmp	r3, #0
 800f452:	d005      	beq.n	800f460 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f454:	4b53      	ldr	r3, [pc, #332]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f456:	689b      	ldr	r3, [r3, #8]
 800f458:	4a52      	ldr	r2, [pc, #328]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f45a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f45e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f460:	4b50      	ldr	r3, [pc, #320]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f462:	689b      	ldr	r3, [r3, #8]
 800f464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	689b      	ldr	r3, [r3, #8]
 800f46c:	494d      	ldr	r1, [pc, #308]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f46e:	4313      	orrs	r3, r2
 800f470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f003 0301 	and.w	r3, r3, #1
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d040      	beq.n	800f500 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	2b01      	cmp	r3, #1
 800f484:	d107      	bne.n	800f496 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f486:	4b47      	ldr	r3, [pc, #284]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d115      	bne.n	800f4be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800f492:	2301      	movs	r3, #1
 800f494:	e07f      	b.n	800f596 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	2b02      	cmp	r3, #2
 800f49c:	d107      	bne.n	800f4ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f49e:	4b41      	ldr	r3, [pc, #260]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d109      	bne.n	800f4be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	e073      	b.n	800f596 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f4ae:	4b3d      	ldr	r3, [pc, #244]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f003 0302 	and.w	r3, r3, #2
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d101      	bne.n	800f4be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	e06b      	b.n	800f596 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f4be:	4b39      	ldr	r3, [pc, #228]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f4c0:	689b      	ldr	r3, [r3, #8]
 800f4c2:	f023 0203 	bic.w	r2, r3, #3
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	4936      	ldr	r1, [pc, #216]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f4cc:	4313      	orrs	r3, r2
 800f4ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f4d0:	f7fb fcb0 	bl	800ae34 <HAL_GetTick>
 800f4d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f4d6:	e00a      	b.n	800f4ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f4d8:	f7fb fcac 	bl	800ae34 <HAL_GetTick>
 800f4dc:	4602      	mov	r2, r0
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	1ad3      	subs	r3, r2, r3
 800f4e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d901      	bls.n	800f4ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800f4ea:	2303      	movs	r3, #3
 800f4ec:	e053      	b.n	800f596 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f4ee:	4b2d      	ldr	r3, [pc, #180]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f4f0:	689b      	ldr	r3, [r3, #8]
 800f4f2:	f003 020c 	and.w	r2, r3, #12
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	009b      	lsls	r3, r3, #2
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d1eb      	bne.n	800f4d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f500:	4b27      	ldr	r3, [pc, #156]	; (800f5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	f003 030f 	and.w	r3, r3, #15
 800f508:	683a      	ldr	r2, [r7, #0]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d210      	bcs.n	800f530 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f50e:	4b24      	ldr	r3, [pc, #144]	; (800f5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f023 020f 	bic.w	r2, r3, #15
 800f516:	4922      	ldr	r1, [pc, #136]	; (800f5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	4313      	orrs	r3, r2
 800f51c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f51e:	4b20      	ldr	r3, [pc, #128]	; (800f5a0 <HAL_RCC_ClockConfig+0x1c4>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f003 030f 	and.w	r3, r3, #15
 800f526:	683a      	ldr	r2, [r7, #0]
 800f528:	429a      	cmp	r2, r3
 800f52a:	d001      	beq.n	800f530 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800f52c:	2301      	movs	r3, #1
 800f52e:	e032      	b.n	800f596 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	f003 0304 	and.w	r3, r3, #4
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d008      	beq.n	800f54e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f53c:	4b19      	ldr	r3, [pc, #100]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f53e:	689b      	ldr	r3, [r3, #8]
 800f540:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	68db      	ldr	r3, [r3, #12]
 800f548:	4916      	ldr	r1, [pc, #88]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f54a:	4313      	orrs	r3, r2
 800f54c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f003 0308 	and.w	r3, r3, #8
 800f556:	2b00      	cmp	r3, #0
 800f558:	d009      	beq.n	800f56e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f55a:	4b12      	ldr	r3, [pc, #72]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f55c:	689b      	ldr	r3, [r3, #8]
 800f55e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	691b      	ldr	r3, [r3, #16]
 800f566:	00db      	lsls	r3, r3, #3
 800f568:	490e      	ldr	r1, [pc, #56]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f56a:	4313      	orrs	r3, r2
 800f56c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f56e:	f000 f821 	bl	800f5b4 <HAL_RCC_GetSysClockFreq>
 800f572:	4602      	mov	r2, r0
 800f574:	4b0b      	ldr	r3, [pc, #44]	; (800f5a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f576:	689b      	ldr	r3, [r3, #8]
 800f578:	091b      	lsrs	r3, r3, #4
 800f57a:	f003 030f 	and.w	r3, r3, #15
 800f57e:	490a      	ldr	r1, [pc, #40]	; (800f5a8 <HAL_RCC_ClockConfig+0x1cc>)
 800f580:	5ccb      	ldrb	r3, [r1, r3]
 800f582:	fa22 f303 	lsr.w	r3, r2, r3
 800f586:	4a09      	ldr	r2, [pc, #36]	; (800f5ac <HAL_RCC_ClockConfig+0x1d0>)
 800f588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800f58a:	4b09      	ldr	r3, [pc, #36]	; (800f5b0 <HAL_RCC_ClockConfig+0x1d4>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	4618      	mov	r0, r3
 800f590:	f7f3 fbe4 	bl	8002d5c <HAL_InitTick>

  return HAL_OK;
 800f594:	2300      	movs	r3, #0
}
 800f596:	4618      	mov	r0, r3
 800f598:	3710      	adds	r7, #16
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
 800f59e:	bf00      	nop
 800f5a0:	40023c00 	.word	0x40023c00
 800f5a4:	40023800 	.word	0x40023800
 800f5a8:	0802c88c 	.word	0x0802c88c
 800f5ac:	20000014 	.word	0x20000014
 800f5b0:	20000018 	.word	0x20000018

0800f5b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f5b4:	b5b0      	push	{r4, r5, r7, lr}
 800f5b6:	b084      	sub	sp, #16
 800f5b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800f5ba:	2100      	movs	r1, #0
 800f5bc:	6079      	str	r1, [r7, #4]
 800f5be:	2100      	movs	r1, #0
 800f5c0:	60f9      	str	r1, [r7, #12]
 800f5c2:	2100      	movs	r1, #0
 800f5c4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800f5c6:	2100      	movs	r1, #0
 800f5c8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f5ca:	4952      	ldr	r1, [pc, #328]	; (800f714 <HAL_RCC_GetSysClockFreq+0x160>)
 800f5cc:	6889      	ldr	r1, [r1, #8]
 800f5ce:	f001 010c 	and.w	r1, r1, #12
 800f5d2:	2908      	cmp	r1, #8
 800f5d4:	d00d      	beq.n	800f5f2 <HAL_RCC_GetSysClockFreq+0x3e>
 800f5d6:	2908      	cmp	r1, #8
 800f5d8:	f200 8094 	bhi.w	800f704 <HAL_RCC_GetSysClockFreq+0x150>
 800f5dc:	2900      	cmp	r1, #0
 800f5de:	d002      	beq.n	800f5e6 <HAL_RCC_GetSysClockFreq+0x32>
 800f5e0:	2904      	cmp	r1, #4
 800f5e2:	d003      	beq.n	800f5ec <HAL_RCC_GetSysClockFreq+0x38>
 800f5e4:	e08e      	b.n	800f704 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f5e6:	4b4c      	ldr	r3, [pc, #304]	; (800f718 <HAL_RCC_GetSysClockFreq+0x164>)
 800f5e8:	60bb      	str	r3, [r7, #8]
      break;
 800f5ea:	e08e      	b.n	800f70a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f5ec:	4b4b      	ldr	r3, [pc, #300]	; (800f71c <HAL_RCC_GetSysClockFreq+0x168>)
 800f5ee:	60bb      	str	r3, [r7, #8]
      break;
 800f5f0:	e08b      	b.n	800f70a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f5f2:	4948      	ldr	r1, [pc, #288]	; (800f714 <HAL_RCC_GetSysClockFreq+0x160>)
 800f5f4:	6849      	ldr	r1, [r1, #4]
 800f5f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800f5fa:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800f5fc:	4945      	ldr	r1, [pc, #276]	; (800f714 <HAL_RCC_GetSysClockFreq+0x160>)
 800f5fe:	6849      	ldr	r1, [r1, #4]
 800f600:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800f604:	2900      	cmp	r1, #0
 800f606:	d024      	beq.n	800f652 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f608:	4942      	ldr	r1, [pc, #264]	; (800f714 <HAL_RCC_GetSysClockFreq+0x160>)
 800f60a:	6849      	ldr	r1, [r1, #4]
 800f60c:	0989      	lsrs	r1, r1, #6
 800f60e:	4608      	mov	r0, r1
 800f610:	f04f 0100 	mov.w	r1, #0
 800f614:	f240 14ff 	movw	r4, #511	; 0x1ff
 800f618:	f04f 0500 	mov.w	r5, #0
 800f61c:	ea00 0204 	and.w	r2, r0, r4
 800f620:	ea01 0305 	and.w	r3, r1, r5
 800f624:	493d      	ldr	r1, [pc, #244]	; (800f71c <HAL_RCC_GetSysClockFreq+0x168>)
 800f626:	fb01 f003 	mul.w	r0, r1, r3
 800f62a:	2100      	movs	r1, #0
 800f62c:	fb01 f102 	mul.w	r1, r1, r2
 800f630:	1844      	adds	r4, r0, r1
 800f632:	493a      	ldr	r1, [pc, #232]	; (800f71c <HAL_RCC_GetSysClockFreq+0x168>)
 800f634:	fba2 0101 	umull	r0, r1, r2, r1
 800f638:	1863      	adds	r3, r4, r1
 800f63a:	4619      	mov	r1, r3
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	461a      	mov	r2, r3
 800f640:	f04f 0300 	mov.w	r3, #0
 800f644:	f7f1 f810 	bl	8000668 <__aeabi_uldivmod>
 800f648:	4602      	mov	r2, r0
 800f64a:	460b      	mov	r3, r1
 800f64c:	4613      	mov	r3, r2
 800f64e:	60fb      	str	r3, [r7, #12]
 800f650:	e04a      	b.n	800f6e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f652:	4b30      	ldr	r3, [pc, #192]	; (800f714 <HAL_RCC_GetSysClockFreq+0x160>)
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	099b      	lsrs	r3, r3, #6
 800f658:	461a      	mov	r2, r3
 800f65a:	f04f 0300 	mov.w	r3, #0
 800f65e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f662:	f04f 0100 	mov.w	r1, #0
 800f666:	ea02 0400 	and.w	r4, r2, r0
 800f66a:	ea03 0501 	and.w	r5, r3, r1
 800f66e:	4620      	mov	r0, r4
 800f670:	4629      	mov	r1, r5
 800f672:	f04f 0200 	mov.w	r2, #0
 800f676:	f04f 0300 	mov.w	r3, #0
 800f67a:	014b      	lsls	r3, r1, #5
 800f67c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800f680:	0142      	lsls	r2, r0, #5
 800f682:	4610      	mov	r0, r2
 800f684:	4619      	mov	r1, r3
 800f686:	1b00      	subs	r0, r0, r4
 800f688:	eb61 0105 	sbc.w	r1, r1, r5
 800f68c:	f04f 0200 	mov.w	r2, #0
 800f690:	f04f 0300 	mov.w	r3, #0
 800f694:	018b      	lsls	r3, r1, #6
 800f696:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800f69a:	0182      	lsls	r2, r0, #6
 800f69c:	1a12      	subs	r2, r2, r0
 800f69e:	eb63 0301 	sbc.w	r3, r3, r1
 800f6a2:	f04f 0000 	mov.w	r0, #0
 800f6a6:	f04f 0100 	mov.w	r1, #0
 800f6aa:	00d9      	lsls	r1, r3, #3
 800f6ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f6b0:	00d0      	lsls	r0, r2, #3
 800f6b2:	4602      	mov	r2, r0
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	1912      	adds	r2, r2, r4
 800f6b8:	eb45 0303 	adc.w	r3, r5, r3
 800f6bc:	f04f 0000 	mov.w	r0, #0
 800f6c0:	f04f 0100 	mov.w	r1, #0
 800f6c4:	0299      	lsls	r1, r3, #10
 800f6c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800f6ca:	0290      	lsls	r0, r2, #10
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	460b      	mov	r3, r1
 800f6d0:	4610      	mov	r0, r2
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	f04f 0300 	mov.w	r3, #0
 800f6dc:	f7f0 ffc4 	bl	8000668 <__aeabi_uldivmod>
 800f6e0:	4602      	mov	r2, r0
 800f6e2:	460b      	mov	r3, r1
 800f6e4:	4613      	mov	r3, r2
 800f6e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800f6e8:	4b0a      	ldr	r3, [pc, #40]	; (800f714 <HAL_RCC_GetSysClockFreq+0x160>)
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	0c1b      	lsrs	r3, r3, #16
 800f6ee:	f003 0303 	and.w	r3, r3, #3
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	005b      	lsls	r3, r3, #1
 800f6f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800f6f8:	68fa      	ldr	r2, [r7, #12]
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f700:	60bb      	str	r3, [r7, #8]
      break;
 800f702:	e002      	b.n	800f70a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f704:	4b04      	ldr	r3, [pc, #16]	; (800f718 <HAL_RCC_GetSysClockFreq+0x164>)
 800f706:	60bb      	str	r3, [r7, #8]
      break;
 800f708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f70a:	68bb      	ldr	r3, [r7, #8]
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3710      	adds	r7, #16
 800f710:	46bd      	mov	sp, r7
 800f712:	bdb0      	pop	{r4, r5, r7, pc}
 800f714:	40023800 	.word	0x40023800
 800f718:	00f42400 	.word	0x00f42400
 800f71c:	017d7840 	.word	0x017d7840

0800f720 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f720:	b480      	push	{r7}
 800f722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f724:	4b03      	ldr	r3, [pc, #12]	; (800f734 <HAL_RCC_GetHCLKFreq+0x14>)
 800f726:	681b      	ldr	r3, [r3, #0]
}
 800f728:	4618      	mov	r0, r3
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr
 800f732:	bf00      	nop
 800f734:	20000014 	.word	0x20000014

0800f738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f73c:	f7ff fff0 	bl	800f720 <HAL_RCC_GetHCLKFreq>
 800f740:	4602      	mov	r2, r0
 800f742:	4b05      	ldr	r3, [pc, #20]	; (800f758 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f744:	689b      	ldr	r3, [r3, #8]
 800f746:	0a9b      	lsrs	r3, r3, #10
 800f748:	f003 0307 	and.w	r3, r3, #7
 800f74c:	4903      	ldr	r1, [pc, #12]	; (800f75c <HAL_RCC_GetPCLK1Freq+0x24>)
 800f74e:	5ccb      	ldrb	r3, [r1, r3]
 800f750:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f754:	4618      	mov	r0, r3
 800f756:	bd80      	pop	{r7, pc}
 800f758:	40023800 	.word	0x40023800
 800f75c:	0802c89c 	.word	0x0802c89c

0800f760 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f760:	b480      	push	{r7}
 800f762:	b083      	sub	sp, #12
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	220f      	movs	r2, #15
 800f76e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f770:	4b12      	ldr	r3, [pc, #72]	; (800f7bc <HAL_RCC_GetClockConfig+0x5c>)
 800f772:	689b      	ldr	r3, [r3, #8]
 800f774:	f003 0203 	and.w	r2, r3, #3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f77c:	4b0f      	ldr	r3, [pc, #60]	; (800f7bc <HAL_RCC_GetClockConfig+0x5c>)
 800f77e:	689b      	ldr	r3, [r3, #8]
 800f780:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f788:	4b0c      	ldr	r3, [pc, #48]	; (800f7bc <HAL_RCC_GetClockConfig+0x5c>)
 800f78a:	689b      	ldr	r3, [r3, #8]
 800f78c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800f794:	4b09      	ldr	r3, [pc, #36]	; (800f7bc <HAL_RCC_GetClockConfig+0x5c>)
 800f796:	689b      	ldr	r3, [r3, #8]
 800f798:	08db      	lsrs	r3, r3, #3
 800f79a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f7a2:	4b07      	ldr	r3, [pc, #28]	; (800f7c0 <HAL_RCC_GetClockConfig+0x60>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	f003 020f 	and.w	r2, r3, #15
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	601a      	str	r2, [r3, #0]
}
 800f7ae:	bf00      	nop
 800f7b0:	370c      	adds	r7, #12
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b8:	4770      	bx	lr
 800f7ba:	bf00      	nop
 800f7bc:	40023800 	.word	0x40023800
 800f7c0:	40023c00 	.word	0x40023c00

0800f7c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b088      	sub	sp, #32
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800f7d8:	2300      	movs	r3, #0
 800f7da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	f003 0301 	and.w	r3, r3, #1
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d012      	beq.n	800f812 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800f7ec:	4b69      	ldr	r3, [pc, #420]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f7ee:	689b      	ldr	r3, [r3, #8]
 800f7f0:	4a68      	ldr	r2, [pc, #416]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f7f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f7f6:	6093      	str	r3, [r2, #8]
 800f7f8:	4b66      	ldr	r3, [pc, #408]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f7fa:	689a      	ldr	r2, [r3, #8]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f800:	4964      	ldr	r1, [pc, #400]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f802:	4313      	orrs	r3, r2
 800f804:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d101      	bne.n	800f812 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800f80e:	2301      	movs	r3, #1
 800f810:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d017      	beq.n	800f84e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f81e:	4b5d      	ldr	r3, [pc, #372]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f824:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f82c:	4959      	ldr	r1, [pc, #356]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f82e:	4313      	orrs	r3, r2
 800f830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f83c:	d101      	bne.n	800f842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800f83e:	2301      	movs	r3, #1
 800f840:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f846:	2b00      	cmp	r3, #0
 800f848:	d101      	bne.n	800f84e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800f84a:	2301      	movs	r3, #1
 800f84c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f856:	2b00      	cmp	r3, #0
 800f858:	d017      	beq.n	800f88a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f85a:	4b4e      	ldr	r3, [pc, #312]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f85c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f860:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f868:	494a      	ldr	r1, [pc, #296]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f86a:	4313      	orrs	r3, r2
 800f86c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f878:	d101      	bne.n	800f87e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800f87a:	2301      	movs	r3, #1
 800f87c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f882:	2b00      	cmp	r3, #0
 800f884:	d101      	bne.n	800f88a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800f886:	2301      	movs	r3, #1
 800f888:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f892:	2b00      	cmp	r3, #0
 800f894:	d001      	beq.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800f896:	2301      	movs	r3, #1
 800f898:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	f003 0320 	and.w	r3, r3, #32
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	f000 808b 	beq.w	800f9be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800f8a8:	4b3a      	ldr	r3, [pc, #232]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8ac:	4a39      	ldr	r2, [pc, #228]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f8ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8b2:	6413      	str	r3, [r2, #64]	; 0x40
 800f8b4:	4b37      	ldr	r3, [pc, #220]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f8bc:	60bb      	str	r3, [r7, #8]
 800f8be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f8c0:	4b35      	ldr	r3, [pc, #212]	; (800f998 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	4a34      	ldr	r2, [pc, #208]	; (800f998 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800f8c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f8ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f8cc:	f7fb fab2 	bl	800ae34 <HAL_GetTick>
 800f8d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800f8d2:	e008      	b.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f8d4:	f7fb faae 	bl	800ae34 <HAL_GetTick>
 800f8d8:	4602      	mov	r2, r0
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	1ad3      	subs	r3, r2, r3
 800f8de:	2b64      	cmp	r3, #100	; 0x64
 800f8e0:	d901      	bls.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800f8e2:	2303      	movs	r3, #3
 800f8e4:	e38f      	b.n	8010006 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800f8e6:	4b2c      	ldr	r3, [pc, #176]	; (800f998 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d0f0      	beq.n	800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f8f2:	4b28      	ldr	r3, [pc, #160]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f8f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f8fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d035      	beq.n	800f96e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f90a:	693a      	ldr	r2, [r7, #16]
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d02e      	beq.n	800f96e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f910:	4b20      	ldr	r3, [pc, #128]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f918:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f91a:	4b1e      	ldr	r3, [pc, #120]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f91c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f91e:	4a1d      	ldr	r2, [pc, #116]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f924:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f926:	4b1b      	ldr	r3, [pc, #108]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f92a:	4a1a      	ldr	r2, [pc, #104]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f92c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f930:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800f932:	4a18      	ldr	r2, [pc, #96]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800f938:	4b16      	ldr	r3, [pc, #88]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f93a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f93c:	f003 0301 	and.w	r3, r3, #1
 800f940:	2b01      	cmp	r3, #1
 800f942:	d114      	bne.n	800f96e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f944:	f7fb fa76 	bl	800ae34 <HAL_GetTick>
 800f948:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f94a:	e00a      	b.n	800f962 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f94c:	f7fb fa72 	bl	800ae34 <HAL_GetTick>
 800f950:	4602      	mov	r2, r0
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	1ad3      	subs	r3, r2, r3
 800f956:	f241 3288 	movw	r2, #5000	; 0x1388
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d901      	bls.n	800f962 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800f95e:	2303      	movs	r3, #3
 800f960:	e351      	b.n	8010006 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f962:	4b0c      	ldr	r3, [pc, #48]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f966:	f003 0302 	and.w	r3, r3, #2
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d0ee      	beq.n	800f94c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f97a:	d111      	bne.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800f97c:	4b05      	ldr	r3, [pc, #20]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f97e:	689b      	ldr	r3, [r3, #8]
 800f980:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f988:	4b04      	ldr	r3, [pc, #16]	; (800f99c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800f98a:	400b      	ands	r3, r1
 800f98c:	4901      	ldr	r1, [pc, #4]	; (800f994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f98e:	4313      	orrs	r3, r2
 800f990:	608b      	str	r3, [r1, #8]
 800f992:	e00b      	b.n	800f9ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f994:	40023800 	.word	0x40023800
 800f998:	40007000 	.word	0x40007000
 800f99c:	0ffffcff 	.word	0x0ffffcff
 800f9a0:	4bb3      	ldr	r3, [pc, #716]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9a2:	689b      	ldr	r3, [r3, #8]
 800f9a4:	4ab2      	ldr	r2, [pc, #712]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800f9aa:	6093      	str	r3, [r2, #8]
 800f9ac:	4bb0      	ldr	r3, [pc, #704]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f9b8:	49ad      	ldr	r1, [pc, #692]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9ba:	4313      	orrs	r3, r2
 800f9bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f003 0310 	and.w	r3, r3, #16
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d010      	beq.n	800f9ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f9ca:	4ba9      	ldr	r3, [pc, #676]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9d0:	4aa7      	ldr	r2, [pc, #668]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f9d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800f9da:	4ba5      	ldr	r3, [pc, #660]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9e4:	49a2      	ldr	r1, [pc, #648]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9e6:	4313      	orrs	r3, r2
 800f9e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d00a      	beq.n	800fa0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f9f8:	4b9d      	ldr	r3, [pc, #628]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa06:	499a      	ldr	r1, [pc, #616]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa08:	4313      	orrs	r3, r2
 800fa0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d00a      	beq.n	800fa30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800fa1a:	4b95      	ldr	r3, [pc, #596]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa28:	4991      	ldr	r1, [pc, #580]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa2a:	4313      	orrs	r3, r2
 800fa2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d00a      	beq.n	800fa52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800fa3c:	4b8c      	ldr	r3, [pc, #560]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa4a:	4989      	ldr	r1, [pc, #548]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa4c:	4313      	orrs	r3, r2
 800fa4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d00a      	beq.n	800fa74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800fa5e:	4b84      	ldr	r3, [pc, #528]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa6c:	4980      	ldr	r1, [pc, #512]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa6e:	4313      	orrs	r3, r2
 800fa70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d00a      	beq.n	800fa96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800fa80:	4b7b      	ldr	r3, [pc, #492]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa86:	f023 0203 	bic.w	r2, r3, #3
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa8e:	4978      	ldr	r1, [pc, #480]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa90:	4313      	orrs	r3, r2
 800fa92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d00a      	beq.n	800fab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800faa2:	4b73      	ldr	r3, [pc, #460]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800faa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800faa8:	f023 020c 	bic.w	r2, r3, #12
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fab0:	496f      	ldr	r1, [pc, #444]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fab2:	4313      	orrs	r3, r2
 800fab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d00a      	beq.n	800fada <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800fac4:	4b6a      	ldr	r3, [pc, #424]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800faca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fad2:	4967      	ldr	r1, [pc, #412]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fad4:	4313      	orrs	r3, r2
 800fad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d00a      	beq.n	800fafc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800fae6:	4b62      	ldr	r3, [pc, #392]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800faec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800faf4:	495e      	ldr	r1, [pc, #376]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800faf6:	4313      	orrs	r3, r2
 800faf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d00a      	beq.n	800fb1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800fb08:	4b59      	ldr	r3, [pc, #356]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb16:	4956      	ldr	r1, [pc, #344]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d00a      	beq.n	800fb40 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800fb2a:	4b51      	ldr	r3, [pc, #324]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb38:	494d      	ldr	r1, [pc, #308]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d00a      	beq.n	800fb62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800fb4c:	4b48      	ldr	r3, [pc, #288]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb5a:	4945      	ldr	r1, [pc, #276]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb5c:	4313      	orrs	r3, r2
 800fb5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d00a      	beq.n	800fb84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800fb6e:	4b40      	ldr	r3, [pc, #256]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb7c:	493c      	ldr	r1, [pc, #240]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb7e:	4313      	orrs	r3, r2
 800fb80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d00a      	beq.n	800fba6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fb90:	4b37      	ldr	r3, [pc, #220]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb9e:	4934      	ldr	r1, [pc, #208]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fba0:	4313      	orrs	r3, r2
 800fba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d011      	beq.n	800fbd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800fbb2:	4b2f      	ldr	r3, [pc, #188]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fbb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbb8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbc0:	492b      	ldr	r1, [pc, #172]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fbd0:	d101      	bne.n	800fbd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f003 0308 	and.w	r3, r3, #8
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d001      	beq.n	800fbe6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d00a      	beq.n	800fc08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fbf2:	4b1f      	ldr	r3, [pc, #124]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fbf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbf8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc00:	491b      	ldr	r1, [pc, #108]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fc02:	4313      	orrs	r3, r2
 800fc04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d00b      	beq.n	800fc2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800fc14:	4b16      	ldr	r3, [pc, #88]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fc16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc24:	4912      	ldr	r1, [pc, #72]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fc26:	4313      	orrs	r3, r2
 800fc28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d00b      	beq.n	800fc50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800fc38:	4b0d      	ldr	r3, [pc, #52]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fc3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc3e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc48:	4909      	ldr	r1, [pc, #36]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d00f      	beq.n	800fc7c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fc5c:	4b04      	ldr	r3, [pc, #16]	; (800fc70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fc5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc6c:	e002      	b.n	800fc74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800fc6e:	bf00      	nop
 800fc70:	40023800 	.word	0x40023800
 800fc74:	4986      	ldr	r1, [pc, #536]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fc76:	4313      	orrs	r3, r2
 800fc78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d00b      	beq.n	800fca0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800fc88:	4b81      	ldr	r3, [pc, #516]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fc8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc98:	497d      	ldr	r1, [pc, #500]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fc9a:	4313      	orrs	r3, r2
 800fc9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800fca0:	69fb      	ldr	r3, [r7, #28]
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d006      	beq.n	800fcb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	f000 80d6 	beq.w	800fe60 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800fcb4:	4b76      	ldr	r3, [pc, #472]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4a75      	ldr	r2, [pc, #468]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fcba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fcbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fcc0:	f7fb f8b8 	bl	800ae34 <HAL_GetTick>
 800fcc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800fcc6:	e008      	b.n	800fcda <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800fcc8:	f7fb f8b4 	bl	800ae34 <HAL_GetTick>
 800fccc:	4602      	mov	r2, r0
 800fcce:	697b      	ldr	r3, [r7, #20]
 800fcd0:	1ad3      	subs	r3, r2, r3
 800fcd2:	2b64      	cmp	r3, #100	; 0x64
 800fcd4:	d901      	bls.n	800fcda <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800fcd6:	2303      	movs	r3, #3
 800fcd8:	e195      	b.n	8010006 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800fcda:	4b6d      	ldr	r3, [pc, #436]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d1f0      	bne.n	800fcc8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	f003 0301 	and.w	r3, r3, #1
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d021      	beq.n	800fd36 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d11d      	bne.n	800fd36 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800fcfa:	4b65      	ldr	r3, [pc, #404]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fcfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd00:	0c1b      	lsrs	r3, r3, #16
 800fd02:	f003 0303 	and.w	r3, r3, #3
 800fd06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800fd08:	4b61      	ldr	r3, [pc, #388]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fd0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd0e:	0e1b      	lsrs	r3, r3, #24
 800fd10:	f003 030f 	and.w	r3, r3, #15
 800fd14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	019a      	lsls	r2, r3, #6
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	041b      	lsls	r3, r3, #16
 800fd20:	431a      	orrs	r2, r3
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	061b      	lsls	r3, r3, #24
 800fd26:	431a      	orrs	r2, r3
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	689b      	ldr	r3, [r3, #8]
 800fd2c:	071b      	lsls	r3, r3, #28
 800fd2e:	4958      	ldr	r1, [pc, #352]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fd30:	4313      	orrs	r3, r2
 800fd32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d004      	beq.n	800fd4c <HAL_RCCEx_PeriphCLKConfig+0x588>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fd4a:	d00a      	beq.n	800fd62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d02e      	beq.n	800fdb6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fd60:	d129      	bne.n	800fdb6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800fd62:	4b4b      	ldr	r3, [pc, #300]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fd64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd68:	0c1b      	lsrs	r3, r3, #16
 800fd6a:	f003 0303 	and.w	r3, r3, #3
 800fd6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800fd70:	4b47      	ldr	r3, [pc, #284]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fd72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd76:	0f1b      	lsrs	r3, r3, #28
 800fd78:	f003 0307 	and.w	r3, r3, #7
 800fd7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	019a      	lsls	r2, r3, #6
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	041b      	lsls	r3, r3, #16
 800fd88:	431a      	orrs	r2, r3
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	68db      	ldr	r3, [r3, #12]
 800fd8e:	061b      	lsls	r3, r3, #24
 800fd90:	431a      	orrs	r2, r3
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	071b      	lsls	r3, r3, #28
 800fd96:	493e      	ldr	r1, [pc, #248]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fd98:	4313      	orrs	r3, r2
 800fd9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800fd9e:	4b3c      	ldr	r3, [pc, #240]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fda0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fda4:	f023 021f 	bic.w	r2, r3, #31
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdac:	3b01      	subs	r3, #1
 800fdae:	4938      	ldr	r1, [pc, #224]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fdb0:	4313      	orrs	r3, r2
 800fdb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d01d      	beq.n	800fdfe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800fdc2:	4b33      	ldr	r3, [pc, #204]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fdc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdc8:	0e1b      	lsrs	r3, r3, #24
 800fdca:	f003 030f 	and.w	r3, r3, #15
 800fdce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800fdd0:	4b2f      	ldr	r3, [pc, #188]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fdd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdd6:	0f1b      	lsrs	r3, r3, #28
 800fdd8:	f003 0307 	and.w	r3, r3, #7
 800fddc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	685b      	ldr	r3, [r3, #4]
 800fde2:	019a      	lsls	r2, r3, #6
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	691b      	ldr	r3, [r3, #16]
 800fde8:	041b      	lsls	r3, r3, #16
 800fdea:	431a      	orrs	r2, r3
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	061b      	lsls	r3, r3, #24
 800fdf0:	431a      	orrs	r2, r3
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	071b      	lsls	r3, r3, #28
 800fdf6:	4926      	ldr	r1, [pc, #152]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fdf8:	4313      	orrs	r3, r2
 800fdfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d011      	beq.n	800fe2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	019a      	lsls	r2, r3, #6
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	691b      	ldr	r3, [r3, #16]
 800fe14:	041b      	lsls	r3, r3, #16
 800fe16:	431a      	orrs	r2, r3
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	68db      	ldr	r3, [r3, #12]
 800fe1c:	061b      	lsls	r3, r3, #24
 800fe1e:	431a      	orrs	r2, r3
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	689b      	ldr	r3, [r3, #8]
 800fe24:	071b      	lsls	r3, r3, #28
 800fe26:	491a      	ldr	r1, [pc, #104]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fe28:	4313      	orrs	r3, r2
 800fe2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800fe2e:	4b18      	ldr	r3, [pc, #96]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	4a17      	ldr	r2, [pc, #92]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fe34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fe38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fe3a:	f7fa fffb 	bl	800ae34 <HAL_GetTick>
 800fe3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800fe40:	e008      	b.n	800fe54 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800fe42:	f7fa fff7 	bl	800ae34 <HAL_GetTick>
 800fe46:	4602      	mov	r2, r0
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	1ad3      	subs	r3, r2, r3
 800fe4c:	2b64      	cmp	r3, #100	; 0x64
 800fe4e:	d901      	bls.n	800fe54 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800fe50:	2303      	movs	r3, #3
 800fe52:	e0d8      	b.n	8010006 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800fe54:	4b0e      	ldr	r3, [pc, #56]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d0f0      	beq.n	800fe42 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800fe60:	69bb      	ldr	r3, [r7, #24]
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	f040 80ce 	bne.w	8010004 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800fe68:	4b09      	ldr	r3, [pc, #36]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	4a08      	ldr	r2, [pc, #32]	; (800fe90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fe6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fe72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fe74:	f7fa ffde 	bl	800ae34 <HAL_GetTick>
 800fe78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800fe7a:	e00b      	b.n	800fe94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800fe7c:	f7fa ffda 	bl	800ae34 <HAL_GetTick>
 800fe80:	4602      	mov	r2, r0
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	1ad3      	subs	r3, r2, r3
 800fe86:	2b64      	cmp	r3, #100	; 0x64
 800fe88:	d904      	bls.n	800fe94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800fe8a:	2303      	movs	r3, #3
 800fe8c:	e0bb      	b.n	8010006 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800fe8e:	bf00      	nop
 800fe90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800fe94:	4b5e      	ldr	r3, [pc, #376]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fe9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fea0:	d0ec      	beq.n	800fe7c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d003      	beq.n	800feb6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d009      	beq.n	800feca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d02e      	beq.n	800ff20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d12a      	bne.n	800ff20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800feca:	4b51      	ldr	r3, [pc, #324]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fed0:	0c1b      	lsrs	r3, r3, #16
 800fed2:	f003 0303 	and.w	r3, r3, #3
 800fed6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800fed8:	4b4d      	ldr	r3, [pc, #308]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800feda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fede:	0f1b      	lsrs	r3, r3, #28
 800fee0:	f003 0307 	and.w	r3, r3, #7
 800fee4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	695b      	ldr	r3, [r3, #20]
 800feea:	019a      	lsls	r2, r3, #6
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	041b      	lsls	r3, r3, #16
 800fef0:	431a      	orrs	r2, r3
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	699b      	ldr	r3, [r3, #24]
 800fef6:	061b      	lsls	r3, r3, #24
 800fef8:	431a      	orrs	r2, r3
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	071b      	lsls	r3, r3, #28
 800fefe:	4944      	ldr	r1, [pc, #272]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ff00:	4313      	orrs	r3, r2
 800ff02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ff06:	4b42      	ldr	r3, [pc, #264]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ff08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff14:	3b01      	subs	r3, #1
 800ff16:	021b      	lsls	r3, r3, #8
 800ff18:	493d      	ldr	r1, [pc, #244]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ff1a:	4313      	orrs	r3, r2
 800ff1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d022      	beq.n	800ff72 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ff34:	d11d      	bne.n	800ff72 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ff36:	4b36      	ldr	r3, [pc, #216]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ff38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff3c:	0e1b      	lsrs	r3, r3, #24
 800ff3e:	f003 030f 	and.w	r3, r3, #15
 800ff42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ff44:	4b32      	ldr	r3, [pc, #200]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ff46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff4a:	0f1b      	lsrs	r3, r3, #28
 800ff4c:	f003 0307 	and.w	r3, r3, #7
 800ff50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	695b      	ldr	r3, [r3, #20]
 800ff56:	019a      	lsls	r2, r3, #6
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6a1b      	ldr	r3, [r3, #32]
 800ff5c:	041b      	lsls	r3, r3, #16
 800ff5e:	431a      	orrs	r2, r3
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	061b      	lsls	r3, r3, #24
 800ff64:	431a      	orrs	r2, r3
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	071b      	lsls	r3, r3, #28
 800ff6a:	4929      	ldr	r1, [pc, #164]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ff6c:	4313      	orrs	r3, r2
 800ff6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f003 0308 	and.w	r3, r3, #8
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d028      	beq.n	800ffd0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ff7e:	4b24      	ldr	r3, [pc, #144]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ff80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff84:	0e1b      	lsrs	r3, r3, #24
 800ff86:	f003 030f 	and.w	r3, r3, #15
 800ff8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ff8c:	4b20      	ldr	r3, [pc, #128]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ff8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff92:	0c1b      	lsrs	r3, r3, #16
 800ff94:	f003 0303 	and.w	r3, r3, #3
 800ff98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	695b      	ldr	r3, [r3, #20]
 800ff9e:	019a      	lsls	r2, r3, #6
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	041b      	lsls	r3, r3, #16
 800ffa4:	431a      	orrs	r2, r3
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	061b      	lsls	r3, r3, #24
 800ffaa:	431a      	orrs	r2, r3
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	69db      	ldr	r3, [r3, #28]
 800ffb0:	071b      	lsls	r3, r3, #28
 800ffb2:	4917      	ldr	r1, [pc, #92]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ffb4:	4313      	orrs	r3, r2
 800ffb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ffba:	4b15      	ldr	r3, [pc, #84]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ffbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ffc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc8:	4911      	ldr	r1, [pc, #68]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ffca:	4313      	orrs	r3, r2
 800ffcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ffd0:	4b0f      	ldr	r3, [pc, #60]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	4a0e      	ldr	r2, [pc, #56]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ffd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ffda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ffdc:	f7fa ff2a 	bl	800ae34 <HAL_GetTick>
 800ffe0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ffe2:	e008      	b.n	800fff6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ffe4:	f7fa ff26 	bl	800ae34 <HAL_GetTick>
 800ffe8:	4602      	mov	r2, r0
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	1ad3      	subs	r3, r2, r3
 800ffee:	2b64      	cmp	r3, #100	; 0x64
 800fff0:	d901      	bls.n	800fff6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800fff2:	2303      	movs	r3, #3
 800fff4:	e007      	b.n	8010006 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800fff6:	4b06      	ldr	r3, [pc, #24]	; (8010010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010002:	d1ef      	bne.n	800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8010004:	2300      	movs	r3, #0
}
 8010006:	4618      	mov	r0, r3
 8010008:	3720      	adds	r7, #32
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
 801000e:	bf00      	nop
 8010010:	40023800 	.word	0x40023800

08010014 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d101      	bne.n	8010028 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8010024:	2301      	movs	r3, #1
 8010026:	e025      	b.n	8010074 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801002e:	b2db      	uxtb	r3, r3
 8010030:	2b00      	cmp	r3, #0
 8010032:	d106      	bne.n	8010042 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2200      	movs	r2, #0
 8010038:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f7f1 ff91 	bl	8001f64 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2202      	movs	r2, #2
 8010046:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681a      	ldr	r2, [r3, #0]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	3304      	adds	r3, #4
 8010052:	4619      	mov	r1, r3
 8010054:	4610      	mov	r0, r2
 8010056:	f001 fdd1 	bl	8011bfc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6818      	ldr	r0, [r3, #0]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	685b      	ldr	r3, [r3, #4]
 8010062:	461a      	mov	r2, r3
 8010064:	6839      	ldr	r1, [r7, #0]
 8010066:	f001 fe3b 	bl	8011ce0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2201      	movs	r2, #1
 801006e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8010072:	2300      	movs	r3, #0
}
 8010074:	4618      	mov	r0, r3
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}

0801007c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b084      	sub	sp, #16
 8010080:	af00      	add	r7, sp, #0
 8010082:	60f8      	str	r0, [r7, #12]
 8010084:	60b9      	str	r1, [r7, #8]
 8010086:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801008e:	b2db      	uxtb	r3, r3
 8010090:	2b02      	cmp	r3, #2
 8010092:	d101      	bne.n	8010098 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8010094:	2302      	movs	r3, #2
 8010096:	e018      	b.n	80100ca <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	2202      	movs	r2, #2
 801009c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	68b9      	ldr	r1, [r7, #8]
 80100a8:	4618      	mov	r0, r3
 80100aa:	f001 fe99 	bl	8011de0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	2b02      	cmp	r3, #2
 80100b4:	d104      	bne.n	80100c0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	2205      	movs	r2, #5
 80100ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80100be:	e003      	b.n	80100c8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	2201      	movs	r2, #1
 80100c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80100c8:	2300      	movs	r3, #0
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3710      	adds	r7, #16
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}

080100d2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80100d2:	b580      	push	{r7, lr}
 80100d4:	b082      	sub	sp, #8
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]
 80100da:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80100e2:	b2db      	uxtb	r3, r3
 80100e4:	2b02      	cmp	r3, #2
 80100e6:	d101      	bne.n	80100ec <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80100e8:	2302      	movs	r3, #2
 80100ea:	e00e      	b.n	801010a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2202      	movs	r2, #2
 80100f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	6839      	ldr	r1, [r7, #0]
 80100fa:	4618      	mov	r0, r3
 80100fc:	f001 fe94 	bl	8011e28 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2201      	movs	r2, #1
 8010104:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8010108:	2300      	movs	r3, #0
}
 801010a:	4618      	mov	r0, r3
 801010c:	3708      	adds	r7, #8
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}

08010112 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010112:	b580      	push	{r7, lr}
 8010114:	b082      	sub	sp, #8
 8010116:	af00      	add	r7, sp, #0
 8010118:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d101      	bne.n	8010124 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010120:	2301      	movs	r3, #1
 8010122:	e049      	b.n	80101b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801012a:	b2db      	uxtb	r3, r3
 801012c:	2b00      	cmp	r3, #0
 801012e:	d106      	bne.n	801013e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2200      	movs	r2, #0
 8010134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f7f3 f87f 	bl	800323c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2202      	movs	r2, #2
 8010142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681a      	ldr	r2, [r3, #0]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	3304      	adds	r3, #4
 801014e:	4619      	mov	r1, r3
 8010150:	4610      	mov	r0, r2
 8010152:	f001 f8e9 	bl	8011328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	2201      	movs	r2, #1
 801015a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2201      	movs	r2, #1
 8010162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	2201      	movs	r2, #1
 801016a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2201      	movs	r2, #1
 8010172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2201      	movs	r2, #1
 801017a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2201      	movs	r2, #1
 8010182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2201      	movs	r2, #1
 801018a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2201      	movs	r2, #1
 8010192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2201      	movs	r2, #1
 801019a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2201      	movs	r2, #1
 80101a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2201      	movs	r2, #1
 80101aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	2201      	movs	r2, #1
 80101b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80101b6:	2300      	movs	r3, #0
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3708      	adds	r7, #8
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}

080101c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80101c0:	b480      	push	{r7}
 80101c2:	b085      	sub	sp, #20
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	2b01      	cmp	r3, #1
 80101d2:	d001      	beq.n	80101d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80101d4:	2301      	movs	r3, #1
 80101d6:	e054      	b.n	8010282 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2202      	movs	r2, #2
 80101dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	68da      	ldr	r2, [r3, #12]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	f042 0201 	orr.w	r2, r2, #1
 80101ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	4a26      	ldr	r2, [pc, #152]	; (8010290 <HAL_TIM_Base_Start_IT+0xd0>)
 80101f6:	4293      	cmp	r3, r2
 80101f8:	d022      	beq.n	8010240 <HAL_TIM_Base_Start_IT+0x80>
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010202:	d01d      	beq.n	8010240 <HAL_TIM_Base_Start_IT+0x80>
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	4a22      	ldr	r2, [pc, #136]	; (8010294 <HAL_TIM_Base_Start_IT+0xd4>)
 801020a:	4293      	cmp	r3, r2
 801020c:	d018      	beq.n	8010240 <HAL_TIM_Base_Start_IT+0x80>
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	4a21      	ldr	r2, [pc, #132]	; (8010298 <HAL_TIM_Base_Start_IT+0xd8>)
 8010214:	4293      	cmp	r3, r2
 8010216:	d013      	beq.n	8010240 <HAL_TIM_Base_Start_IT+0x80>
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	4a1f      	ldr	r2, [pc, #124]	; (801029c <HAL_TIM_Base_Start_IT+0xdc>)
 801021e:	4293      	cmp	r3, r2
 8010220:	d00e      	beq.n	8010240 <HAL_TIM_Base_Start_IT+0x80>
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	4a1e      	ldr	r2, [pc, #120]	; (80102a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8010228:	4293      	cmp	r3, r2
 801022a:	d009      	beq.n	8010240 <HAL_TIM_Base_Start_IT+0x80>
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	4a1c      	ldr	r2, [pc, #112]	; (80102a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8010232:	4293      	cmp	r3, r2
 8010234:	d004      	beq.n	8010240 <HAL_TIM_Base_Start_IT+0x80>
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	4a1b      	ldr	r2, [pc, #108]	; (80102a8 <HAL_TIM_Base_Start_IT+0xe8>)
 801023c:	4293      	cmp	r3, r2
 801023e:	d115      	bne.n	801026c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	689a      	ldr	r2, [r3, #8]
 8010246:	4b19      	ldr	r3, [pc, #100]	; (80102ac <HAL_TIM_Base_Start_IT+0xec>)
 8010248:	4013      	ands	r3, r2
 801024a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	2b06      	cmp	r3, #6
 8010250:	d015      	beq.n	801027e <HAL_TIM_Base_Start_IT+0xbe>
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010258:	d011      	beq.n	801027e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f042 0201 	orr.w	r2, r2, #1
 8010268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801026a:	e008      	b.n	801027e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	681a      	ldr	r2, [r3, #0]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	f042 0201 	orr.w	r2, r2, #1
 801027a:	601a      	str	r2, [r3, #0]
 801027c:	e000      	b.n	8010280 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801027e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010280:	2300      	movs	r3, #0
}
 8010282:	4618      	mov	r0, r3
 8010284:	3714      	adds	r7, #20
 8010286:	46bd      	mov	sp, r7
 8010288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028c:	4770      	bx	lr
 801028e:	bf00      	nop
 8010290:	40010000 	.word	0x40010000
 8010294:	40000400 	.word	0x40000400
 8010298:	40000800 	.word	0x40000800
 801029c:	40000c00 	.word	0x40000c00
 80102a0:	40010400 	.word	0x40010400
 80102a4:	40014000 	.word	0x40014000
 80102a8:	40001800 	.word	0x40001800
 80102ac:	00010007 	.word	0x00010007

080102b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d101      	bne.n	80102c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80102be:	2301      	movs	r3, #1
 80102c0:	e049      	b.n	8010356 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d106      	bne.n	80102dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2200      	movs	r2, #0
 80102d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f000 f841 	bl	801035e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2202      	movs	r2, #2
 80102e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681a      	ldr	r2, [r3, #0]
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	3304      	adds	r3, #4
 80102ec:	4619      	mov	r1, r3
 80102ee:	4610      	mov	r0, r2
 80102f0:	f001 f81a 	bl	8011328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2201      	movs	r2, #1
 80102f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2201      	movs	r2, #1
 8010300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2201      	movs	r2, #1
 8010308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2201      	movs	r2, #1
 8010310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2201      	movs	r2, #1
 8010318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2201      	movs	r2, #1
 8010320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2201      	movs	r2, #1
 8010328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2201      	movs	r2, #1
 8010330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2201      	movs	r2, #1
 8010338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2201      	movs	r2, #1
 8010340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2201      	movs	r2, #1
 8010348:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2201      	movs	r2, #1
 8010350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010354:	2300      	movs	r3, #0
}
 8010356:	4618      	mov	r0, r3
 8010358:	3708      	adds	r7, #8
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}

0801035e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801035e:	b480      	push	{r7}
 8010360:	b083      	sub	sp, #12
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010366:	bf00      	nop
 8010368:	370c      	adds	r7, #12
 801036a:	46bd      	mov	sp, r7
 801036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010370:	4770      	bx	lr
	...

08010374 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d109      	bne.n	8010398 <HAL_TIM_PWM_Start+0x24>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801038a:	b2db      	uxtb	r3, r3
 801038c:	2b01      	cmp	r3, #1
 801038e:	bf14      	ite	ne
 8010390:	2301      	movne	r3, #1
 8010392:	2300      	moveq	r3, #0
 8010394:	b2db      	uxtb	r3, r3
 8010396:	e03c      	b.n	8010412 <HAL_TIM_PWM_Start+0x9e>
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	2b04      	cmp	r3, #4
 801039c:	d109      	bne.n	80103b2 <HAL_TIM_PWM_Start+0x3e>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80103a4:	b2db      	uxtb	r3, r3
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	bf14      	ite	ne
 80103aa:	2301      	movne	r3, #1
 80103ac:	2300      	moveq	r3, #0
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	e02f      	b.n	8010412 <HAL_TIM_PWM_Start+0x9e>
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	2b08      	cmp	r3, #8
 80103b6:	d109      	bne.n	80103cc <HAL_TIM_PWM_Start+0x58>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	bf14      	ite	ne
 80103c4:	2301      	movne	r3, #1
 80103c6:	2300      	moveq	r3, #0
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	e022      	b.n	8010412 <HAL_TIM_PWM_Start+0x9e>
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	2b0c      	cmp	r3, #12
 80103d0:	d109      	bne.n	80103e6 <HAL_TIM_PWM_Start+0x72>
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80103d8:	b2db      	uxtb	r3, r3
 80103da:	2b01      	cmp	r3, #1
 80103dc:	bf14      	ite	ne
 80103de:	2301      	movne	r3, #1
 80103e0:	2300      	moveq	r3, #0
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	e015      	b.n	8010412 <HAL_TIM_PWM_Start+0x9e>
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	2b10      	cmp	r3, #16
 80103ea:	d109      	bne.n	8010400 <HAL_TIM_PWM_Start+0x8c>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80103f2:	b2db      	uxtb	r3, r3
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	bf14      	ite	ne
 80103f8:	2301      	movne	r3, #1
 80103fa:	2300      	moveq	r3, #0
 80103fc:	b2db      	uxtb	r3, r3
 80103fe:	e008      	b.n	8010412 <HAL_TIM_PWM_Start+0x9e>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010406:	b2db      	uxtb	r3, r3
 8010408:	2b01      	cmp	r3, #1
 801040a:	bf14      	ite	ne
 801040c:	2301      	movne	r3, #1
 801040e:	2300      	moveq	r3, #0
 8010410:	b2db      	uxtb	r3, r3
 8010412:	2b00      	cmp	r3, #0
 8010414:	d001      	beq.n	801041a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010416:	2301      	movs	r3, #1
 8010418:	e092      	b.n	8010540 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d104      	bne.n	801042a <HAL_TIM_PWM_Start+0xb6>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2202      	movs	r2, #2
 8010424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010428:	e023      	b.n	8010472 <HAL_TIM_PWM_Start+0xfe>
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	2b04      	cmp	r3, #4
 801042e:	d104      	bne.n	801043a <HAL_TIM_PWM_Start+0xc6>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2202      	movs	r2, #2
 8010434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010438:	e01b      	b.n	8010472 <HAL_TIM_PWM_Start+0xfe>
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	2b08      	cmp	r3, #8
 801043e:	d104      	bne.n	801044a <HAL_TIM_PWM_Start+0xd6>
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2202      	movs	r2, #2
 8010444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010448:	e013      	b.n	8010472 <HAL_TIM_PWM_Start+0xfe>
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	2b0c      	cmp	r3, #12
 801044e:	d104      	bne.n	801045a <HAL_TIM_PWM_Start+0xe6>
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2202      	movs	r2, #2
 8010454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010458:	e00b      	b.n	8010472 <HAL_TIM_PWM_Start+0xfe>
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	2b10      	cmp	r3, #16
 801045e:	d104      	bne.n	801046a <HAL_TIM_PWM_Start+0xf6>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2202      	movs	r2, #2
 8010464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010468:	e003      	b.n	8010472 <HAL_TIM_PWM_Start+0xfe>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2202      	movs	r2, #2
 801046e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	2201      	movs	r2, #1
 8010478:	6839      	ldr	r1, [r7, #0]
 801047a:	4618      	mov	r0, r3
 801047c:	f001 faec 	bl	8011a58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4a30      	ldr	r2, [pc, #192]	; (8010548 <HAL_TIM_PWM_Start+0x1d4>)
 8010486:	4293      	cmp	r3, r2
 8010488:	d004      	beq.n	8010494 <HAL_TIM_PWM_Start+0x120>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	4a2f      	ldr	r2, [pc, #188]	; (801054c <HAL_TIM_PWM_Start+0x1d8>)
 8010490:	4293      	cmp	r3, r2
 8010492:	d101      	bne.n	8010498 <HAL_TIM_PWM_Start+0x124>
 8010494:	2301      	movs	r3, #1
 8010496:	e000      	b.n	801049a <HAL_TIM_PWM_Start+0x126>
 8010498:	2300      	movs	r3, #0
 801049a:	2b00      	cmp	r3, #0
 801049c:	d007      	beq.n	80104ae <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80104ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	4a25      	ldr	r2, [pc, #148]	; (8010548 <HAL_TIM_PWM_Start+0x1d4>)
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d022      	beq.n	80104fe <HAL_TIM_PWM_Start+0x18a>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104c0:	d01d      	beq.n	80104fe <HAL_TIM_PWM_Start+0x18a>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	4a22      	ldr	r2, [pc, #136]	; (8010550 <HAL_TIM_PWM_Start+0x1dc>)
 80104c8:	4293      	cmp	r3, r2
 80104ca:	d018      	beq.n	80104fe <HAL_TIM_PWM_Start+0x18a>
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	4a20      	ldr	r2, [pc, #128]	; (8010554 <HAL_TIM_PWM_Start+0x1e0>)
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d013      	beq.n	80104fe <HAL_TIM_PWM_Start+0x18a>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	4a1f      	ldr	r2, [pc, #124]	; (8010558 <HAL_TIM_PWM_Start+0x1e4>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d00e      	beq.n	80104fe <HAL_TIM_PWM_Start+0x18a>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	4a19      	ldr	r2, [pc, #100]	; (801054c <HAL_TIM_PWM_Start+0x1d8>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d009      	beq.n	80104fe <HAL_TIM_PWM_Start+0x18a>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	4a1b      	ldr	r2, [pc, #108]	; (801055c <HAL_TIM_PWM_Start+0x1e8>)
 80104f0:	4293      	cmp	r3, r2
 80104f2:	d004      	beq.n	80104fe <HAL_TIM_PWM_Start+0x18a>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	4a19      	ldr	r2, [pc, #100]	; (8010560 <HAL_TIM_PWM_Start+0x1ec>)
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d115      	bne.n	801052a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	689a      	ldr	r2, [r3, #8]
 8010504:	4b17      	ldr	r3, [pc, #92]	; (8010564 <HAL_TIM_PWM_Start+0x1f0>)
 8010506:	4013      	ands	r3, r2
 8010508:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	2b06      	cmp	r3, #6
 801050e:	d015      	beq.n	801053c <HAL_TIM_PWM_Start+0x1c8>
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010516:	d011      	beq.n	801053c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	681a      	ldr	r2, [r3, #0]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f042 0201 	orr.w	r2, r2, #1
 8010526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010528:	e008      	b.n	801053c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	681a      	ldr	r2, [r3, #0]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f042 0201 	orr.w	r2, r2, #1
 8010538:	601a      	str	r2, [r3, #0]
 801053a:	e000      	b.n	801053e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801053c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801053e:	2300      	movs	r3, #0
}
 8010540:	4618      	mov	r0, r3
 8010542:	3710      	adds	r7, #16
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}
 8010548:	40010000 	.word	0x40010000
 801054c:	40010400 	.word	0x40010400
 8010550:	40000400 	.word	0x40000400
 8010554:	40000800 	.word	0x40000800
 8010558:	40000c00 	.word	0x40000c00
 801055c:	40014000 	.word	0x40014000
 8010560:	40001800 	.word	0x40001800
 8010564:	00010007 	.word	0x00010007

08010568 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b086      	sub	sp, #24
 801056c:	af00      	add	r7, sp, #0
 801056e:	60f8      	str	r0, [r7, #12]
 8010570:	60b9      	str	r1, [r7, #8]
 8010572:	607a      	str	r2, [r7, #4]
 8010574:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d109      	bne.n	8010590 <HAL_TIM_PWM_Start_DMA+0x28>
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010582:	b2db      	uxtb	r3, r3
 8010584:	2b02      	cmp	r3, #2
 8010586:	bf0c      	ite	eq
 8010588:	2301      	moveq	r3, #1
 801058a:	2300      	movne	r3, #0
 801058c:	b2db      	uxtb	r3, r3
 801058e:	e03c      	b.n	801060a <HAL_TIM_PWM_Start_DMA+0xa2>
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	2b04      	cmp	r3, #4
 8010594:	d109      	bne.n	80105aa <HAL_TIM_PWM_Start_DMA+0x42>
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801059c:	b2db      	uxtb	r3, r3
 801059e:	2b02      	cmp	r3, #2
 80105a0:	bf0c      	ite	eq
 80105a2:	2301      	moveq	r3, #1
 80105a4:	2300      	movne	r3, #0
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	e02f      	b.n	801060a <HAL_TIM_PWM_Start_DMA+0xa2>
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	2b08      	cmp	r3, #8
 80105ae:	d109      	bne.n	80105c4 <HAL_TIM_PWM_Start_DMA+0x5c>
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80105b6:	b2db      	uxtb	r3, r3
 80105b8:	2b02      	cmp	r3, #2
 80105ba:	bf0c      	ite	eq
 80105bc:	2301      	moveq	r3, #1
 80105be:	2300      	movne	r3, #0
 80105c0:	b2db      	uxtb	r3, r3
 80105c2:	e022      	b.n	801060a <HAL_TIM_PWM_Start_DMA+0xa2>
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	2b0c      	cmp	r3, #12
 80105c8:	d109      	bne.n	80105de <HAL_TIM_PWM_Start_DMA+0x76>
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80105d0:	b2db      	uxtb	r3, r3
 80105d2:	2b02      	cmp	r3, #2
 80105d4:	bf0c      	ite	eq
 80105d6:	2301      	moveq	r3, #1
 80105d8:	2300      	movne	r3, #0
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	e015      	b.n	801060a <HAL_TIM_PWM_Start_DMA+0xa2>
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	2b10      	cmp	r3, #16
 80105e2:	d109      	bne.n	80105f8 <HAL_TIM_PWM_Start_DMA+0x90>
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80105ea:	b2db      	uxtb	r3, r3
 80105ec:	2b02      	cmp	r3, #2
 80105ee:	bf0c      	ite	eq
 80105f0:	2301      	moveq	r3, #1
 80105f2:	2300      	movne	r3, #0
 80105f4:	b2db      	uxtb	r3, r3
 80105f6:	e008      	b.n	801060a <HAL_TIM_PWM_Start_DMA+0xa2>
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80105fe:	b2db      	uxtb	r3, r3
 8010600:	2b02      	cmp	r3, #2
 8010602:	bf0c      	ite	eq
 8010604:	2301      	moveq	r3, #1
 8010606:	2300      	movne	r3, #0
 8010608:	b2db      	uxtb	r3, r3
 801060a:	2b00      	cmp	r3, #0
 801060c:	d001      	beq.n	8010612 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 801060e:	2302      	movs	r3, #2
 8010610:	e19c      	b.n	801094c <HAL_TIM_PWM_Start_DMA+0x3e4>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d109      	bne.n	801062c <HAL_TIM_PWM_Start_DMA+0xc4>
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801061e:	b2db      	uxtb	r3, r3
 8010620:	2b01      	cmp	r3, #1
 8010622:	bf0c      	ite	eq
 8010624:	2301      	moveq	r3, #1
 8010626:	2300      	movne	r3, #0
 8010628:	b2db      	uxtb	r3, r3
 801062a:	e03c      	b.n	80106a6 <HAL_TIM_PWM_Start_DMA+0x13e>
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	2b04      	cmp	r3, #4
 8010630:	d109      	bne.n	8010646 <HAL_TIM_PWM_Start_DMA+0xde>
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010638:	b2db      	uxtb	r3, r3
 801063a:	2b01      	cmp	r3, #1
 801063c:	bf0c      	ite	eq
 801063e:	2301      	moveq	r3, #1
 8010640:	2300      	movne	r3, #0
 8010642:	b2db      	uxtb	r3, r3
 8010644:	e02f      	b.n	80106a6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	2b08      	cmp	r3, #8
 801064a:	d109      	bne.n	8010660 <HAL_TIM_PWM_Start_DMA+0xf8>
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010652:	b2db      	uxtb	r3, r3
 8010654:	2b01      	cmp	r3, #1
 8010656:	bf0c      	ite	eq
 8010658:	2301      	moveq	r3, #1
 801065a:	2300      	movne	r3, #0
 801065c:	b2db      	uxtb	r3, r3
 801065e:	e022      	b.n	80106a6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	2b0c      	cmp	r3, #12
 8010664:	d109      	bne.n	801067a <HAL_TIM_PWM_Start_DMA+0x112>
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801066c:	b2db      	uxtb	r3, r3
 801066e:	2b01      	cmp	r3, #1
 8010670:	bf0c      	ite	eq
 8010672:	2301      	moveq	r3, #1
 8010674:	2300      	movne	r3, #0
 8010676:	b2db      	uxtb	r3, r3
 8010678:	e015      	b.n	80106a6 <HAL_TIM_PWM_Start_DMA+0x13e>
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	2b10      	cmp	r3, #16
 801067e:	d109      	bne.n	8010694 <HAL_TIM_PWM_Start_DMA+0x12c>
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010686:	b2db      	uxtb	r3, r3
 8010688:	2b01      	cmp	r3, #1
 801068a:	bf0c      	ite	eq
 801068c:	2301      	moveq	r3, #1
 801068e:	2300      	movne	r3, #0
 8010690:	b2db      	uxtb	r3, r3
 8010692:	e008      	b.n	80106a6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801069a:	b2db      	uxtb	r3, r3
 801069c:	2b01      	cmp	r3, #1
 801069e:	bf0c      	ite	eq
 80106a0:	2301      	moveq	r3, #1
 80106a2:	2300      	movne	r3, #0
 80106a4:	b2db      	uxtb	r3, r3
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d034      	beq.n	8010714 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d104      	bne.n	80106ba <HAL_TIM_PWM_Start_DMA+0x152>
 80106b0:	887b      	ldrh	r3, [r7, #2]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d001      	beq.n	80106ba <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 80106b6:	2301      	movs	r3, #1
 80106b8:	e148      	b.n	801094c <HAL_TIM_PWM_Start_DMA+0x3e4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d104      	bne.n	80106ca <HAL_TIM_PWM_Start_DMA+0x162>
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	2202      	movs	r2, #2
 80106c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80106c8:	e026      	b.n	8010718 <HAL_TIM_PWM_Start_DMA+0x1b0>
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	2b04      	cmp	r3, #4
 80106ce:	d104      	bne.n	80106da <HAL_TIM_PWM_Start_DMA+0x172>
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	2202      	movs	r2, #2
 80106d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80106d8:	e01e      	b.n	8010718 <HAL_TIM_PWM_Start_DMA+0x1b0>
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	2b08      	cmp	r3, #8
 80106de:	d104      	bne.n	80106ea <HAL_TIM_PWM_Start_DMA+0x182>
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	2202      	movs	r2, #2
 80106e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80106e8:	e016      	b.n	8010718 <HAL_TIM_PWM_Start_DMA+0x1b0>
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	2b0c      	cmp	r3, #12
 80106ee:	d104      	bne.n	80106fa <HAL_TIM_PWM_Start_DMA+0x192>
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	2202      	movs	r2, #2
 80106f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80106f8:	e00e      	b.n	8010718 <HAL_TIM_PWM_Start_DMA+0x1b0>
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	2b10      	cmp	r3, #16
 80106fe:	d104      	bne.n	801070a <HAL_TIM_PWM_Start_DMA+0x1a2>
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2202      	movs	r2, #2
 8010704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010708:	e006      	b.n	8010718 <HAL_TIM_PWM_Start_DMA+0x1b0>
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	2202      	movs	r2, #2
 801070e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010712:	e001      	b.n	8010718 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8010714:	2301      	movs	r3, #1
 8010716:	e119      	b.n	801094c <HAL_TIM_PWM_Start_DMA+0x3e4>
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	2b0c      	cmp	r3, #12
 801071c:	f200 80ae 	bhi.w	801087c <HAL_TIM_PWM_Start_DMA+0x314>
 8010720:	a201      	add	r2, pc, #4	; (adr r2, 8010728 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8010722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010726:	bf00      	nop
 8010728:	0801075d 	.word	0x0801075d
 801072c:	0801087d 	.word	0x0801087d
 8010730:	0801087d 	.word	0x0801087d
 8010734:	0801087d 	.word	0x0801087d
 8010738:	080107a5 	.word	0x080107a5
 801073c:	0801087d 	.word	0x0801087d
 8010740:	0801087d 	.word	0x0801087d
 8010744:	0801087d 	.word	0x0801087d
 8010748:	080107ed 	.word	0x080107ed
 801074c:	0801087d 	.word	0x0801087d
 8010750:	0801087d 	.word	0x0801087d
 8010754:	0801087d 	.word	0x0801087d
 8010758:	08010835 	.word	0x08010835
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010760:	4a7c      	ldr	r2, [pc, #496]	; (8010954 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8010762:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010768:	4a7b      	ldr	r2, [pc, #492]	; (8010958 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 801076a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010770:	4a7a      	ldr	r2, [pc, #488]	; (801095c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8010772:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010778:	6879      	ldr	r1, [r7, #4]
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	3334      	adds	r3, #52	; 0x34
 8010780:	461a      	mov	r2, r3
 8010782:	887b      	ldrh	r3, [r7, #2]
 8010784:	f7fc f88e 	bl	800c8a4 <HAL_DMA_Start_IT>
 8010788:	4603      	mov	r3, r0
 801078a:	2b00      	cmp	r3, #0
 801078c:	d001      	beq.n	8010792 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 801078e:	2301      	movs	r3, #1
 8010790:	e0dc      	b.n	801094c <HAL_TIM_PWM_Start_DMA+0x3e4>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	68da      	ldr	r2, [r3, #12]
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80107a0:	60da      	str	r2, [r3, #12]
      break;
 80107a2:	e06c      	b.n	801087e <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107a8:	4a6a      	ldr	r2, [pc, #424]	; (8010954 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80107aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107b0:	4a69      	ldr	r2, [pc, #420]	; (8010958 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80107b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107b8:	4a68      	ldr	r2, [pc, #416]	; (801095c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 80107ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80107c0:	6879      	ldr	r1, [r7, #4]
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	3338      	adds	r3, #56	; 0x38
 80107c8:	461a      	mov	r2, r3
 80107ca:	887b      	ldrh	r3, [r7, #2]
 80107cc:	f7fc f86a 	bl	800c8a4 <HAL_DMA_Start_IT>
 80107d0:	4603      	mov	r3, r0
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d001      	beq.n	80107da <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 80107d6:	2301      	movs	r3, #1
 80107d8:	e0b8      	b.n	801094c <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	68da      	ldr	r2, [r3, #12]
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80107e8:	60da      	str	r2, [r3, #12]
      break;
 80107ea:	e048      	b.n	801087e <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107f0:	4a58      	ldr	r2, [pc, #352]	; (8010954 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80107f2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107f8:	4a57      	ldr	r2, [pc, #348]	; (8010958 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80107fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010800:	4a56      	ldr	r2, [pc, #344]	; (801095c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8010802:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010808:	6879      	ldr	r1, [r7, #4]
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	333c      	adds	r3, #60	; 0x3c
 8010810:	461a      	mov	r2, r3
 8010812:	887b      	ldrh	r3, [r7, #2]
 8010814:	f7fc f846 	bl	800c8a4 <HAL_DMA_Start_IT>
 8010818:	4603      	mov	r3, r0
 801081a:	2b00      	cmp	r3, #0
 801081c:	d001      	beq.n	8010822 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 801081e:	2301      	movs	r3, #1
 8010820:	e094      	b.n	801094c <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	68da      	ldr	r2, [r3, #12]
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010830:	60da      	str	r2, [r3, #12]
      break;
 8010832:	e024      	b.n	801087e <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010838:	4a46      	ldr	r2, [pc, #280]	; (8010954 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 801083a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010840:	4a45      	ldr	r2, [pc, #276]	; (8010958 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8010842:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010848:	4a44      	ldr	r2, [pc, #272]	; (801095c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 801084a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010850:	6879      	ldr	r1, [r7, #4]
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	3340      	adds	r3, #64	; 0x40
 8010858:	461a      	mov	r2, r3
 801085a:	887b      	ldrh	r3, [r7, #2]
 801085c:	f7fc f822 	bl	800c8a4 <HAL_DMA_Start_IT>
 8010860:	4603      	mov	r3, r0
 8010862:	2b00      	cmp	r3, #0
 8010864:	d001      	beq.n	801086a <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8010866:	2301      	movs	r3, #1
 8010868:	e070      	b.n	801094c <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	68da      	ldr	r2, [r3, #12]
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010878:	60da      	str	r2, [r3, #12]
      break;
 801087a:	e000      	b.n	801087e <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 801087c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	2201      	movs	r2, #1
 8010884:	68b9      	ldr	r1, [r7, #8]
 8010886:	4618      	mov	r0, r3
 8010888:	f001 f8e6 	bl	8011a58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	4a33      	ldr	r2, [pc, #204]	; (8010960 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8010892:	4293      	cmp	r3, r2
 8010894:	d004      	beq.n	80108a0 <HAL_TIM_PWM_Start_DMA+0x338>
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	4a32      	ldr	r2, [pc, #200]	; (8010964 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 801089c:	4293      	cmp	r3, r2
 801089e:	d101      	bne.n	80108a4 <HAL_TIM_PWM_Start_DMA+0x33c>
 80108a0:	2301      	movs	r3, #1
 80108a2:	e000      	b.n	80108a6 <HAL_TIM_PWM_Start_DMA+0x33e>
 80108a4:	2300      	movs	r3, #0
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d007      	beq.n	80108ba <HAL_TIM_PWM_Start_DMA+0x352>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80108b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	4a28      	ldr	r2, [pc, #160]	; (8010960 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d022      	beq.n	801090a <HAL_TIM_PWM_Start_DMA+0x3a2>
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108cc:	d01d      	beq.n	801090a <HAL_TIM_PWM_Start_DMA+0x3a2>
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	4a25      	ldr	r2, [pc, #148]	; (8010968 <HAL_TIM_PWM_Start_DMA+0x400>)
 80108d4:	4293      	cmp	r3, r2
 80108d6:	d018      	beq.n	801090a <HAL_TIM_PWM_Start_DMA+0x3a2>
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4a23      	ldr	r2, [pc, #140]	; (801096c <HAL_TIM_PWM_Start_DMA+0x404>)
 80108de:	4293      	cmp	r3, r2
 80108e0:	d013      	beq.n	801090a <HAL_TIM_PWM_Start_DMA+0x3a2>
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4a22      	ldr	r2, [pc, #136]	; (8010970 <HAL_TIM_PWM_Start_DMA+0x408>)
 80108e8:	4293      	cmp	r3, r2
 80108ea:	d00e      	beq.n	801090a <HAL_TIM_PWM_Start_DMA+0x3a2>
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	4a1c      	ldr	r2, [pc, #112]	; (8010964 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 80108f2:	4293      	cmp	r3, r2
 80108f4:	d009      	beq.n	801090a <HAL_TIM_PWM_Start_DMA+0x3a2>
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	4a1e      	ldr	r2, [pc, #120]	; (8010974 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80108fc:	4293      	cmp	r3, r2
 80108fe:	d004      	beq.n	801090a <HAL_TIM_PWM_Start_DMA+0x3a2>
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4a1c      	ldr	r2, [pc, #112]	; (8010978 <HAL_TIM_PWM_Start_DMA+0x410>)
 8010906:	4293      	cmp	r3, r2
 8010908:	d115      	bne.n	8010936 <HAL_TIM_PWM_Start_DMA+0x3ce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	689a      	ldr	r2, [r3, #8]
 8010910:	4b1a      	ldr	r3, [pc, #104]	; (801097c <HAL_TIM_PWM_Start_DMA+0x414>)
 8010912:	4013      	ands	r3, r2
 8010914:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	2b06      	cmp	r3, #6
 801091a:	d015      	beq.n	8010948 <HAL_TIM_PWM_Start_DMA+0x3e0>
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010922:	d011      	beq.n	8010948 <HAL_TIM_PWM_Start_DMA+0x3e0>
    {
      __HAL_TIM_ENABLE(htim);
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	681a      	ldr	r2, [r3, #0]
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	f042 0201 	orr.w	r2, r2, #1
 8010932:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010934:	e008      	b.n	8010948 <HAL_TIM_PWM_Start_DMA+0x3e0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	681a      	ldr	r2, [r3, #0]
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f042 0201 	orr.w	r2, r2, #1
 8010944:	601a      	str	r2, [r3, #0]
 8010946:	e000      	b.n	801094a <HAL_TIM_PWM_Start_DMA+0x3e2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010948:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801094a:	2300      	movs	r3, #0
}
 801094c:	4618      	mov	r0, r3
 801094e:	3718      	adds	r7, #24
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}
 8010954:	08011217 	.word	0x08011217
 8010958:	080112bf 	.word	0x080112bf
 801095c:	08011185 	.word	0x08011185
 8010960:	40010000 	.word	0x40010000
 8010964:	40010400 	.word	0x40010400
 8010968:	40000400 	.word	0x40000400
 801096c:	40000800 	.word	0x40000800
 8010970:	40000c00 	.word	0x40000c00
 8010974:	40014000 	.word	0x40014000
 8010978:	40001800 	.word	0x40001800
 801097c:	00010007 	.word	0x00010007

08010980 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	2b0c      	cmp	r3, #12
 801098e:	d855      	bhi.n	8010a3c <HAL_TIM_PWM_Stop_DMA+0xbc>
 8010990:	a201      	add	r2, pc, #4	; (adr r2, 8010998 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8010992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010996:	bf00      	nop
 8010998:	080109cd 	.word	0x080109cd
 801099c:	08010a3d 	.word	0x08010a3d
 80109a0:	08010a3d 	.word	0x08010a3d
 80109a4:	08010a3d 	.word	0x08010a3d
 80109a8:	080109e9 	.word	0x080109e9
 80109ac:	08010a3d 	.word	0x08010a3d
 80109b0:	08010a3d 	.word	0x08010a3d
 80109b4:	08010a3d 	.word	0x08010a3d
 80109b8:	08010a05 	.word	0x08010a05
 80109bc:	08010a3d 	.word	0x08010a3d
 80109c0:	08010a3d 	.word	0x08010a3d
 80109c4:	08010a3d 	.word	0x08010a3d
 80109c8:	08010a21 	.word	0x08010a21
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	68da      	ldr	r2, [r3, #12]
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80109da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7fb ffbf 	bl	800c964 <HAL_DMA_Abort_IT>
      break;
 80109e6:	e02a      	b.n	8010a3e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	68da      	ldr	r2, [r3, #12]
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80109f6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7fb ffb1 	bl	800c964 <HAL_DMA_Abort_IT>
      break;
 8010a02:	e01c      	b.n	8010a3e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	68da      	ldr	r2, [r3, #12]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010a12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7fb ffa3 	bl	800c964 <HAL_DMA_Abort_IT>
      break;
 8010a1e:	e00e      	b.n	8010a3e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	68da      	ldr	r2, [r3, #12]
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010a2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a34:	4618      	mov	r0, r3
 8010a36:	f7fb ff95 	bl	800c964 <HAL_DMA_Abort_IT>
      break;
 8010a3a:	e000      	b.n	8010a3e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8010a3c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	2200      	movs	r2, #0
 8010a44:	6839      	ldr	r1, [r7, #0]
 8010a46:	4618      	mov	r0, r3
 8010a48:	f001 f806 	bl	8011a58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4a36      	ldr	r2, [pc, #216]	; (8010b2c <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8010a52:	4293      	cmp	r3, r2
 8010a54:	d004      	beq.n	8010a60 <HAL_TIM_PWM_Stop_DMA+0xe0>
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	4a35      	ldr	r2, [pc, #212]	; (8010b30 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	d101      	bne.n	8010a64 <HAL_TIM_PWM_Stop_DMA+0xe4>
 8010a60:	2301      	movs	r3, #1
 8010a62:	e000      	b.n	8010a66 <HAL_TIM_PWM_Stop_DMA+0xe6>
 8010a64:	2300      	movs	r3, #0
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d017      	beq.n	8010a9a <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	6a1a      	ldr	r2, [r3, #32]
 8010a70:	f241 1311 	movw	r3, #4369	; 0x1111
 8010a74:	4013      	ands	r3, r2
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d10f      	bne.n	8010a9a <HAL_TIM_PWM_Stop_DMA+0x11a>
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	6a1a      	ldr	r2, [r3, #32]
 8010a80:	f240 4344 	movw	r3, #1092	; 0x444
 8010a84:	4013      	ands	r3, r2
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d107      	bne.n	8010a9a <HAL_TIM_PWM_Stop_DMA+0x11a>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010a98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	6a1a      	ldr	r2, [r3, #32]
 8010aa0:	f241 1311 	movw	r3, #4369	; 0x1111
 8010aa4:	4013      	ands	r3, r2
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d10f      	bne.n	8010aca <HAL_TIM_PWM_Stop_DMA+0x14a>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	6a1a      	ldr	r2, [r3, #32]
 8010ab0:	f240 4344 	movw	r3, #1092	; 0x444
 8010ab4:	4013      	ands	r3, r2
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d107      	bne.n	8010aca <HAL_TIM_PWM_Stop_DMA+0x14a>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	681a      	ldr	r2, [r3, #0]
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f022 0201 	bic.w	r2, r2, #1
 8010ac8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d104      	bne.n	8010ada <HAL_TIM_PWM_Stop_DMA+0x15a>
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010ad8:	e023      	b.n	8010b22 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	2b04      	cmp	r3, #4
 8010ade:	d104      	bne.n	8010aea <HAL_TIM_PWM_Stop_DMA+0x16a>
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010ae8:	e01b      	b.n	8010b22 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	2b08      	cmp	r3, #8
 8010aee:	d104      	bne.n	8010afa <HAL_TIM_PWM_Stop_DMA+0x17a>
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2201      	movs	r2, #1
 8010af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010af8:	e013      	b.n	8010b22 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	2b0c      	cmp	r3, #12
 8010afe:	d104      	bne.n	8010b0a <HAL_TIM_PWM_Stop_DMA+0x18a>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2201      	movs	r2, #1
 8010b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010b08:	e00b      	b.n	8010b22 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	2b10      	cmp	r3, #16
 8010b0e:	d104      	bne.n	8010b1a <HAL_TIM_PWM_Stop_DMA+0x19a>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2201      	movs	r2, #1
 8010b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010b18:	e003      	b.n	8010b22 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8010b22:	2300      	movs	r3, #0
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	3708      	adds	r7, #8
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}
 8010b2c:	40010000 	.word	0x40010000
 8010b30:	40010400 	.word	0x40010400

08010b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b082      	sub	sp, #8
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	691b      	ldr	r3, [r3, #16]
 8010b42:	f003 0302 	and.w	r3, r3, #2
 8010b46:	2b02      	cmp	r3, #2
 8010b48:	d122      	bne.n	8010b90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	f003 0302 	and.w	r3, r3, #2
 8010b54:	2b02      	cmp	r3, #2
 8010b56:	d11b      	bne.n	8010b90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	f06f 0202 	mvn.w	r2, #2
 8010b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2201      	movs	r2, #1
 8010b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	699b      	ldr	r3, [r3, #24]
 8010b6e:	f003 0303 	and.w	r3, r3, #3
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d003      	beq.n	8010b7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f000 fadc 	bl	8011134 <HAL_TIM_IC_CaptureCallback>
 8010b7c:	e005      	b.n	8010b8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f000 face 	bl	8011120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f7ef ff23 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	691b      	ldr	r3, [r3, #16]
 8010b96:	f003 0304 	and.w	r3, r3, #4
 8010b9a:	2b04      	cmp	r3, #4
 8010b9c:	d122      	bne.n	8010be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	68db      	ldr	r3, [r3, #12]
 8010ba4:	f003 0304 	and.w	r3, r3, #4
 8010ba8:	2b04      	cmp	r3, #4
 8010baa:	d11b      	bne.n	8010be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	f06f 0204 	mvn.w	r2, #4
 8010bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	2202      	movs	r2, #2
 8010bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	699b      	ldr	r3, [r3, #24]
 8010bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d003      	beq.n	8010bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f000 fab2 	bl	8011134 <HAL_TIM_IC_CaptureCallback>
 8010bd0:	e005      	b.n	8010bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f000 faa4 	bl	8011120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f7ef fef9 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2200      	movs	r2, #0
 8010be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	691b      	ldr	r3, [r3, #16]
 8010bea:	f003 0308 	and.w	r3, r3, #8
 8010bee:	2b08      	cmp	r3, #8
 8010bf0:	d122      	bne.n	8010c38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	f003 0308 	and.w	r3, r3, #8
 8010bfc:	2b08      	cmp	r3, #8
 8010bfe:	d11b      	bne.n	8010c38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	f06f 0208 	mvn.w	r2, #8
 8010c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2204      	movs	r2, #4
 8010c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	69db      	ldr	r3, [r3, #28]
 8010c16:	f003 0303 	and.w	r3, r3, #3
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d003      	beq.n	8010c26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f000 fa88 	bl	8011134 <HAL_TIM_IC_CaptureCallback>
 8010c24:	e005      	b.n	8010c32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f000 fa7a 	bl	8011120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f7ef fecf 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2200      	movs	r2, #0
 8010c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	691b      	ldr	r3, [r3, #16]
 8010c3e:	f003 0310 	and.w	r3, r3, #16
 8010c42:	2b10      	cmp	r3, #16
 8010c44:	d122      	bne.n	8010c8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	f003 0310 	and.w	r3, r3, #16
 8010c50:	2b10      	cmp	r3, #16
 8010c52:	d11b      	bne.n	8010c8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	f06f 0210 	mvn.w	r2, #16
 8010c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2208      	movs	r2, #8
 8010c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	69db      	ldr	r3, [r3, #28]
 8010c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d003      	beq.n	8010c7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f000 fa5e 	bl	8011134 <HAL_TIM_IC_CaptureCallback>
 8010c78:	e005      	b.n	8010c86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f000 fa50 	bl	8011120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f7ef fea5 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	2200      	movs	r2, #0
 8010c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	691b      	ldr	r3, [r3, #16]
 8010c92:	f003 0301 	and.w	r3, r3, #1
 8010c96:	2b01      	cmp	r3, #1
 8010c98:	d10e      	bne.n	8010cb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	68db      	ldr	r3, [r3, #12]
 8010ca0:	f003 0301 	and.w	r3, r3, #1
 8010ca4:	2b01      	cmp	r3, #1
 8010ca6:	d107      	bne.n	8010cb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	f06f 0201 	mvn.w	r2, #1
 8010cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f7f1 ff34 	bl	8002b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	691b      	ldr	r3, [r3, #16]
 8010cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cc2:	2b80      	cmp	r3, #128	; 0x80
 8010cc4:	d10e      	bne.n	8010ce4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	68db      	ldr	r3, [r3, #12]
 8010ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cd0:	2b80      	cmp	r3, #128	; 0x80
 8010cd2:	d107      	bne.n	8010ce4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f000 ff78 	bl	8011bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	691b      	ldr	r3, [r3, #16]
 8010cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cf2:	d10e      	bne.n	8010d12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cfe:	2b80      	cmp	r3, #128	; 0x80
 8010d00:	d107      	bne.n	8010d12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f000 ff6b 	bl	8011be8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	691b      	ldr	r3, [r3, #16]
 8010d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d1c:	2b40      	cmp	r3, #64	; 0x40
 8010d1e:	d10e      	bne.n	8010d3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	68db      	ldr	r3, [r3, #12]
 8010d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d2a:	2b40      	cmp	r3, #64	; 0x40
 8010d2c:	d107      	bne.n	8010d3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f000 fa0f 	bl	801115c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	691b      	ldr	r3, [r3, #16]
 8010d44:	f003 0320 	and.w	r3, r3, #32
 8010d48:	2b20      	cmp	r3, #32
 8010d4a:	d10e      	bne.n	8010d6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	f003 0320 	and.w	r3, r3, #32
 8010d56:	2b20      	cmp	r3, #32
 8010d58:	d107      	bne.n	8010d6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f06f 0220 	mvn.w	r2, #32
 8010d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f000 ff2b 	bl	8011bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010d6a:	bf00      	nop
 8010d6c:	3708      	adds	r7, #8
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}
	...

08010d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b084      	sub	sp, #16
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	60f8      	str	r0, [r7, #12]
 8010d7c:	60b9      	str	r1, [r7, #8]
 8010d7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d86:	2b01      	cmp	r3, #1
 8010d88:	d101      	bne.n	8010d8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010d8a:	2302      	movs	r3, #2
 8010d8c:	e0fd      	b.n	8010f8a <HAL_TIM_PWM_ConfigChannel+0x216>
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2201      	movs	r2, #1
 8010d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2b14      	cmp	r3, #20
 8010d9a:	f200 80f0 	bhi.w	8010f7e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8010d9e:	a201      	add	r2, pc, #4	; (adr r2, 8010da4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8010da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010da4:	08010df9 	.word	0x08010df9
 8010da8:	08010f7f 	.word	0x08010f7f
 8010dac:	08010f7f 	.word	0x08010f7f
 8010db0:	08010f7f 	.word	0x08010f7f
 8010db4:	08010e39 	.word	0x08010e39
 8010db8:	08010f7f 	.word	0x08010f7f
 8010dbc:	08010f7f 	.word	0x08010f7f
 8010dc0:	08010f7f 	.word	0x08010f7f
 8010dc4:	08010e7b 	.word	0x08010e7b
 8010dc8:	08010f7f 	.word	0x08010f7f
 8010dcc:	08010f7f 	.word	0x08010f7f
 8010dd0:	08010f7f 	.word	0x08010f7f
 8010dd4:	08010ebb 	.word	0x08010ebb
 8010dd8:	08010f7f 	.word	0x08010f7f
 8010ddc:	08010f7f 	.word	0x08010f7f
 8010de0:	08010f7f 	.word	0x08010f7f
 8010de4:	08010efd 	.word	0x08010efd
 8010de8:	08010f7f 	.word	0x08010f7f
 8010dec:	08010f7f 	.word	0x08010f7f
 8010df0:	08010f7f 	.word	0x08010f7f
 8010df4:	08010f3d 	.word	0x08010f3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	68b9      	ldr	r1, [r7, #8]
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f000 fb32 	bl	8011468 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	699a      	ldr	r2, [r3, #24]
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	f042 0208 	orr.w	r2, r2, #8
 8010e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	699a      	ldr	r2, [r3, #24]
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	f022 0204 	bic.w	r2, r2, #4
 8010e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	6999      	ldr	r1, [r3, #24]
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	691a      	ldr	r2, [r3, #16]
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	430a      	orrs	r2, r1
 8010e34:	619a      	str	r2, [r3, #24]
      break;
 8010e36:	e0a3      	b.n	8010f80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	68b9      	ldr	r1, [r7, #8]
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f000 fb84 	bl	801154c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	699a      	ldr	r2, [r3, #24]
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	699a      	ldr	r2, [r3, #24]
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	6999      	ldr	r1, [r3, #24]
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	691b      	ldr	r3, [r3, #16]
 8010e6e:	021a      	lsls	r2, r3, #8
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	430a      	orrs	r2, r1
 8010e76:	619a      	str	r2, [r3, #24]
      break;
 8010e78:	e082      	b.n	8010f80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	68b9      	ldr	r1, [r7, #8]
 8010e80:	4618      	mov	r0, r3
 8010e82:	f000 fbdb 	bl	801163c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	69da      	ldr	r2, [r3, #28]
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	f042 0208 	orr.w	r2, r2, #8
 8010e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	69da      	ldr	r2, [r3, #28]
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	f022 0204 	bic.w	r2, r2, #4
 8010ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	69d9      	ldr	r1, [r3, #28]
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	691a      	ldr	r2, [r3, #16]
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	430a      	orrs	r2, r1
 8010eb6:	61da      	str	r2, [r3, #28]
      break;
 8010eb8:	e062      	b.n	8010f80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	68b9      	ldr	r1, [r7, #8]
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f000 fc31 	bl	8011728 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	69da      	ldr	r2, [r3, #28]
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	69da      	ldr	r2, [r3, #28]
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	69d9      	ldr	r1, [r3, #28]
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	691b      	ldr	r3, [r3, #16]
 8010ef0:	021a      	lsls	r2, r3, #8
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	430a      	orrs	r2, r1
 8010ef8:	61da      	str	r2, [r3, #28]
      break;
 8010efa:	e041      	b.n	8010f80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	68b9      	ldr	r1, [r7, #8]
 8010f02:	4618      	mov	r0, r3
 8010f04:	f000 fc68 	bl	80117d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	f042 0208 	orr.w	r2, r2, #8
 8010f16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f022 0204 	bic.w	r2, r2, #4
 8010f26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	691a      	ldr	r2, [r3, #16]
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	430a      	orrs	r2, r1
 8010f38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010f3a:	e021      	b.n	8010f80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	68b9      	ldr	r1, [r7, #8]
 8010f42:	4618      	mov	r0, r3
 8010f44:	f000 fc9a 	bl	801187c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010f56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010f66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	691b      	ldr	r3, [r3, #16]
 8010f72:	021a      	lsls	r2, r3, #8
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	430a      	orrs	r2, r1
 8010f7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010f7c:	e000      	b.n	8010f80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8010f7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	2200      	movs	r2, #0
 8010f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010f88:	2300      	movs	r3, #0
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3710      	adds	r7, #16
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop

08010f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010fa4:	2b01      	cmp	r3, #1
 8010fa6:	d101      	bne.n	8010fac <HAL_TIM_ConfigClockSource+0x18>
 8010fa8:	2302      	movs	r3, #2
 8010faa:	e0b3      	b.n	8011114 <HAL_TIM_ConfigClockSource+0x180>
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2201      	movs	r2, #1
 8010fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2202      	movs	r2, #2
 8010fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	689b      	ldr	r3, [r3, #8]
 8010fc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010fc4:	68fa      	ldr	r2, [r7, #12]
 8010fc6:	4b55      	ldr	r3, [pc, #340]	; (801111c <HAL_TIM_ConfigClockSource+0x188>)
 8010fc8:	4013      	ands	r3, r2
 8010fca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010fd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	68fa      	ldr	r2, [r7, #12]
 8010fda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010fe4:	d03e      	beq.n	8011064 <HAL_TIM_ConfigClockSource+0xd0>
 8010fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010fea:	f200 8087 	bhi.w	80110fc <HAL_TIM_ConfigClockSource+0x168>
 8010fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ff2:	f000 8085 	beq.w	8011100 <HAL_TIM_ConfigClockSource+0x16c>
 8010ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ffa:	d87f      	bhi.n	80110fc <HAL_TIM_ConfigClockSource+0x168>
 8010ffc:	2b70      	cmp	r3, #112	; 0x70
 8010ffe:	d01a      	beq.n	8011036 <HAL_TIM_ConfigClockSource+0xa2>
 8011000:	2b70      	cmp	r3, #112	; 0x70
 8011002:	d87b      	bhi.n	80110fc <HAL_TIM_ConfigClockSource+0x168>
 8011004:	2b60      	cmp	r3, #96	; 0x60
 8011006:	d050      	beq.n	80110aa <HAL_TIM_ConfigClockSource+0x116>
 8011008:	2b60      	cmp	r3, #96	; 0x60
 801100a:	d877      	bhi.n	80110fc <HAL_TIM_ConfigClockSource+0x168>
 801100c:	2b50      	cmp	r3, #80	; 0x50
 801100e:	d03c      	beq.n	801108a <HAL_TIM_ConfigClockSource+0xf6>
 8011010:	2b50      	cmp	r3, #80	; 0x50
 8011012:	d873      	bhi.n	80110fc <HAL_TIM_ConfigClockSource+0x168>
 8011014:	2b40      	cmp	r3, #64	; 0x40
 8011016:	d058      	beq.n	80110ca <HAL_TIM_ConfigClockSource+0x136>
 8011018:	2b40      	cmp	r3, #64	; 0x40
 801101a:	d86f      	bhi.n	80110fc <HAL_TIM_ConfigClockSource+0x168>
 801101c:	2b30      	cmp	r3, #48	; 0x30
 801101e:	d064      	beq.n	80110ea <HAL_TIM_ConfigClockSource+0x156>
 8011020:	2b30      	cmp	r3, #48	; 0x30
 8011022:	d86b      	bhi.n	80110fc <HAL_TIM_ConfigClockSource+0x168>
 8011024:	2b20      	cmp	r3, #32
 8011026:	d060      	beq.n	80110ea <HAL_TIM_ConfigClockSource+0x156>
 8011028:	2b20      	cmp	r3, #32
 801102a:	d867      	bhi.n	80110fc <HAL_TIM_ConfigClockSource+0x168>
 801102c:	2b00      	cmp	r3, #0
 801102e:	d05c      	beq.n	80110ea <HAL_TIM_ConfigClockSource+0x156>
 8011030:	2b10      	cmp	r3, #16
 8011032:	d05a      	beq.n	80110ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8011034:	e062      	b.n	80110fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	6818      	ldr	r0, [r3, #0]
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	6899      	ldr	r1, [r3, #8]
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	685a      	ldr	r2, [r3, #4]
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	68db      	ldr	r3, [r3, #12]
 8011046:	f000 fce7 	bl	8011a18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	689b      	ldr	r3, [r3, #8]
 8011050:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011058:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	68fa      	ldr	r2, [r7, #12]
 8011060:	609a      	str	r2, [r3, #8]
      break;
 8011062:	e04e      	b.n	8011102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	6818      	ldr	r0, [r3, #0]
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	6899      	ldr	r1, [r3, #8]
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	685a      	ldr	r2, [r3, #4]
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	68db      	ldr	r3, [r3, #12]
 8011074:	f000 fcd0 	bl	8011a18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	689a      	ldr	r2, [r3, #8]
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011086:	609a      	str	r2, [r3, #8]
      break;
 8011088:	e03b      	b.n	8011102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	6818      	ldr	r0, [r3, #0]
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	6859      	ldr	r1, [r3, #4]
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	461a      	mov	r2, r3
 8011098:	f000 fc44 	bl	8011924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	2150      	movs	r1, #80	; 0x50
 80110a2:	4618      	mov	r0, r3
 80110a4:	f000 fc9d 	bl	80119e2 <TIM_ITRx_SetConfig>
      break;
 80110a8:	e02b      	b.n	8011102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6818      	ldr	r0, [r3, #0]
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	6859      	ldr	r1, [r3, #4]
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	68db      	ldr	r3, [r3, #12]
 80110b6:	461a      	mov	r2, r3
 80110b8:	f000 fc63 	bl	8011982 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	2160      	movs	r1, #96	; 0x60
 80110c2:	4618      	mov	r0, r3
 80110c4:	f000 fc8d 	bl	80119e2 <TIM_ITRx_SetConfig>
      break;
 80110c8:	e01b      	b.n	8011102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6818      	ldr	r0, [r3, #0]
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	6859      	ldr	r1, [r3, #4]
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	68db      	ldr	r3, [r3, #12]
 80110d6:	461a      	mov	r2, r3
 80110d8:	f000 fc24 	bl	8011924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	2140      	movs	r1, #64	; 0x40
 80110e2:	4618      	mov	r0, r3
 80110e4:	f000 fc7d 	bl	80119e2 <TIM_ITRx_SetConfig>
      break;
 80110e8:	e00b      	b.n	8011102 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681a      	ldr	r2, [r3, #0]
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	4619      	mov	r1, r3
 80110f4:	4610      	mov	r0, r2
 80110f6:	f000 fc74 	bl	80119e2 <TIM_ITRx_SetConfig>
        break;
 80110fa:	e002      	b.n	8011102 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80110fc:	bf00      	nop
 80110fe:	e000      	b.n	8011102 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8011100:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2201      	movs	r2, #1
 8011106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2200      	movs	r2, #0
 801110e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011112:	2300      	movs	r3, #0
}
 8011114:	4618      	mov	r0, r3
 8011116:	3710      	adds	r7, #16
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}
 801111c:	fffeff88 	.word	0xfffeff88

08011120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011120:	b480      	push	{r7}
 8011122:	b083      	sub	sp, #12
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011128:	bf00      	nop
 801112a:	370c      	adds	r7, #12
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr

08011134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011134:	b480      	push	{r7}
 8011136:	b083      	sub	sp, #12
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801113c:	bf00      	nop
 801113e:	370c      	adds	r7, #12
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr

08011148 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011148:	b480      	push	{r7}
 801114a:	b083      	sub	sp, #12
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8011150:	bf00      	nop
 8011152:	370c      	adds	r7, #12
 8011154:	46bd      	mov	sp, r7
 8011156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115a:	4770      	bx	lr

0801115c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801115c:	b480      	push	{r7}
 801115e:	b083      	sub	sp, #12
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011164:	bf00      	nop
 8011166:	370c      	adds	r7, #12
 8011168:	46bd      	mov	sp, r7
 801116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116e:	4770      	bx	lr

08011170 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8011170:	b480      	push	{r7}
 8011172:	b083      	sub	sp, #12
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8011178:	bf00      	nop
 801117a:	370c      	adds	r7, #12
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr

08011184 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b084      	sub	sp, #16
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011190:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	429a      	cmp	r2, r3
 801119a:	d107      	bne.n	80111ac <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	2201      	movs	r2, #1
 80111a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	2201      	movs	r2, #1
 80111a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80111aa:	e02a      	b.n	8011202 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111b0:	687a      	ldr	r2, [r7, #4]
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d107      	bne.n	80111c6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	2202      	movs	r2, #2
 80111ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2201      	movs	r2, #1
 80111c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80111c4:	e01d      	b.n	8011202 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ca:	687a      	ldr	r2, [r7, #4]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d107      	bne.n	80111e0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2204      	movs	r2, #4
 80111d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	2201      	movs	r2, #1
 80111da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80111de:	e010      	b.n	8011202 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111e4:	687a      	ldr	r2, [r7, #4]
 80111e6:	429a      	cmp	r2, r3
 80111e8:	d107      	bne.n	80111fa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2208      	movs	r2, #8
 80111ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	2201      	movs	r2, #1
 80111f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80111f8:	e003      	b.n	8011202 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	2201      	movs	r2, #1
 80111fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8011202:	68f8      	ldr	r0, [r7, #12]
 8011204:	f7ff ffb4 	bl	8011170 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	2200      	movs	r2, #0
 801120c:	771a      	strb	r2, [r3, #28]
}
 801120e:	bf00      	nop
 8011210:	3710      	adds	r7, #16
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}

08011216 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8011216:	b580      	push	{r7, lr}
 8011218:	b084      	sub	sp, #16
 801121a:	af00      	add	r7, sp, #0
 801121c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011222:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011228:	687a      	ldr	r2, [r7, #4]
 801122a:	429a      	cmp	r2, r3
 801122c:	d10b      	bne.n	8011246 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	2201      	movs	r2, #1
 8011232:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	69db      	ldr	r3, [r3, #28]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d136      	bne.n	80112aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	2201      	movs	r2, #1
 8011240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011244:	e031      	b.n	80112aa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801124a:	687a      	ldr	r2, [r7, #4]
 801124c:	429a      	cmp	r2, r3
 801124e:	d10b      	bne.n	8011268 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	2202      	movs	r2, #2
 8011254:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	69db      	ldr	r3, [r3, #28]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d125      	bne.n	80112aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	2201      	movs	r2, #1
 8011262:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011266:	e020      	b.n	80112aa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801126c:	687a      	ldr	r2, [r7, #4]
 801126e:	429a      	cmp	r2, r3
 8011270:	d10b      	bne.n	801128a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	2204      	movs	r2, #4
 8011276:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	69db      	ldr	r3, [r3, #28]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d114      	bne.n	80112aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	2201      	movs	r2, #1
 8011284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011288:	e00f      	b.n	80112aa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	429a      	cmp	r2, r3
 8011292:	d10a      	bne.n	80112aa <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	2208      	movs	r2, #8
 8011298:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	69db      	ldr	r3, [r3, #28]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d103      	bne.n	80112aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2201      	movs	r2, #1
 80112a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80112aa:	68f8      	ldr	r0, [r7, #12]
 80112ac:	f7ef fb90 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	2200      	movs	r2, #0
 80112b4:	771a      	strb	r2, [r3, #28]
}
 80112b6:	bf00      	nop
 80112b8:	3710      	adds	r7, #16
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}

080112be <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80112be:	b580      	push	{r7, lr}
 80112c0:	b084      	sub	sp, #16
 80112c2:	af00      	add	r7, sp, #0
 80112c4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112ca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112d0:	687a      	ldr	r2, [r7, #4]
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d103      	bne.n	80112de <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2201      	movs	r2, #1
 80112da:	771a      	strb	r2, [r3, #28]
 80112dc:	e019      	b.n	8011312 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112e2:	687a      	ldr	r2, [r7, #4]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d103      	bne.n	80112f0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	2202      	movs	r2, #2
 80112ec:	771a      	strb	r2, [r3, #28]
 80112ee:	e010      	b.n	8011312 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112f4:	687a      	ldr	r2, [r7, #4]
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d103      	bne.n	8011302 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	2204      	movs	r2, #4
 80112fe:	771a      	strb	r2, [r3, #28]
 8011300:	e007      	b.n	8011312 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	429a      	cmp	r2, r3
 801130a:	d102      	bne.n	8011312 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	2208      	movs	r2, #8
 8011310:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8011312:	68f8      	ldr	r0, [r7, #12]
 8011314:	f7ff ff18 	bl	8011148 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2200      	movs	r2, #0
 801131c:	771a      	strb	r2, [r3, #28]
}
 801131e:	bf00      	nop
 8011320:	3710      	adds	r7, #16
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
	...

08011328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011328:	b480      	push	{r7}
 801132a:	b085      	sub	sp, #20
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	4a40      	ldr	r2, [pc, #256]	; (801143c <TIM_Base_SetConfig+0x114>)
 801133c:	4293      	cmp	r3, r2
 801133e:	d013      	beq.n	8011368 <TIM_Base_SetConfig+0x40>
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011346:	d00f      	beq.n	8011368 <TIM_Base_SetConfig+0x40>
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	4a3d      	ldr	r2, [pc, #244]	; (8011440 <TIM_Base_SetConfig+0x118>)
 801134c:	4293      	cmp	r3, r2
 801134e:	d00b      	beq.n	8011368 <TIM_Base_SetConfig+0x40>
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	4a3c      	ldr	r2, [pc, #240]	; (8011444 <TIM_Base_SetConfig+0x11c>)
 8011354:	4293      	cmp	r3, r2
 8011356:	d007      	beq.n	8011368 <TIM_Base_SetConfig+0x40>
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	4a3b      	ldr	r2, [pc, #236]	; (8011448 <TIM_Base_SetConfig+0x120>)
 801135c:	4293      	cmp	r3, r2
 801135e:	d003      	beq.n	8011368 <TIM_Base_SetConfig+0x40>
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	4a3a      	ldr	r2, [pc, #232]	; (801144c <TIM_Base_SetConfig+0x124>)
 8011364:	4293      	cmp	r3, r2
 8011366:	d108      	bne.n	801137a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801136e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	685b      	ldr	r3, [r3, #4]
 8011374:	68fa      	ldr	r2, [r7, #12]
 8011376:	4313      	orrs	r3, r2
 8011378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	4a2f      	ldr	r2, [pc, #188]	; (801143c <TIM_Base_SetConfig+0x114>)
 801137e:	4293      	cmp	r3, r2
 8011380:	d02b      	beq.n	80113da <TIM_Base_SetConfig+0xb2>
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011388:	d027      	beq.n	80113da <TIM_Base_SetConfig+0xb2>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	4a2c      	ldr	r2, [pc, #176]	; (8011440 <TIM_Base_SetConfig+0x118>)
 801138e:	4293      	cmp	r3, r2
 8011390:	d023      	beq.n	80113da <TIM_Base_SetConfig+0xb2>
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	4a2b      	ldr	r2, [pc, #172]	; (8011444 <TIM_Base_SetConfig+0x11c>)
 8011396:	4293      	cmp	r3, r2
 8011398:	d01f      	beq.n	80113da <TIM_Base_SetConfig+0xb2>
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	4a2a      	ldr	r2, [pc, #168]	; (8011448 <TIM_Base_SetConfig+0x120>)
 801139e:	4293      	cmp	r3, r2
 80113a0:	d01b      	beq.n	80113da <TIM_Base_SetConfig+0xb2>
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	4a29      	ldr	r2, [pc, #164]	; (801144c <TIM_Base_SetConfig+0x124>)
 80113a6:	4293      	cmp	r3, r2
 80113a8:	d017      	beq.n	80113da <TIM_Base_SetConfig+0xb2>
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	4a28      	ldr	r2, [pc, #160]	; (8011450 <TIM_Base_SetConfig+0x128>)
 80113ae:	4293      	cmp	r3, r2
 80113b0:	d013      	beq.n	80113da <TIM_Base_SetConfig+0xb2>
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	4a27      	ldr	r2, [pc, #156]	; (8011454 <TIM_Base_SetConfig+0x12c>)
 80113b6:	4293      	cmp	r3, r2
 80113b8:	d00f      	beq.n	80113da <TIM_Base_SetConfig+0xb2>
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	4a26      	ldr	r2, [pc, #152]	; (8011458 <TIM_Base_SetConfig+0x130>)
 80113be:	4293      	cmp	r3, r2
 80113c0:	d00b      	beq.n	80113da <TIM_Base_SetConfig+0xb2>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	4a25      	ldr	r2, [pc, #148]	; (801145c <TIM_Base_SetConfig+0x134>)
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d007      	beq.n	80113da <TIM_Base_SetConfig+0xb2>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	4a24      	ldr	r2, [pc, #144]	; (8011460 <TIM_Base_SetConfig+0x138>)
 80113ce:	4293      	cmp	r3, r2
 80113d0:	d003      	beq.n	80113da <TIM_Base_SetConfig+0xb2>
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	4a23      	ldr	r2, [pc, #140]	; (8011464 <TIM_Base_SetConfig+0x13c>)
 80113d6:	4293      	cmp	r3, r2
 80113d8:	d108      	bne.n	80113ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80113e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	68db      	ldr	r3, [r3, #12]
 80113e6:	68fa      	ldr	r2, [r7, #12]
 80113e8:	4313      	orrs	r3, r2
 80113ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	695b      	ldr	r3, [r3, #20]
 80113f6:	4313      	orrs	r3, r2
 80113f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	68fa      	ldr	r2, [r7, #12]
 80113fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	689a      	ldr	r2, [r3, #8]
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	681a      	ldr	r2, [r3, #0]
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	4a0a      	ldr	r2, [pc, #40]	; (801143c <TIM_Base_SetConfig+0x114>)
 8011414:	4293      	cmp	r3, r2
 8011416:	d003      	beq.n	8011420 <TIM_Base_SetConfig+0xf8>
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	4a0c      	ldr	r2, [pc, #48]	; (801144c <TIM_Base_SetConfig+0x124>)
 801141c:	4293      	cmp	r3, r2
 801141e:	d103      	bne.n	8011428 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	691a      	ldr	r2, [r3, #16]
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2201      	movs	r2, #1
 801142c:	615a      	str	r2, [r3, #20]
}
 801142e:	bf00      	nop
 8011430:	3714      	adds	r7, #20
 8011432:	46bd      	mov	sp, r7
 8011434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011438:	4770      	bx	lr
 801143a:	bf00      	nop
 801143c:	40010000 	.word	0x40010000
 8011440:	40000400 	.word	0x40000400
 8011444:	40000800 	.word	0x40000800
 8011448:	40000c00 	.word	0x40000c00
 801144c:	40010400 	.word	0x40010400
 8011450:	40014000 	.word	0x40014000
 8011454:	40014400 	.word	0x40014400
 8011458:	40014800 	.word	0x40014800
 801145c:	40001800 	.word	0x40001800
 8011460:	40001c00 	.word	0x40001c00
 8011464:	40002000 	.word	0x40002000

08011468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011468:	b480      	push	{r7}
 801146a:	b087      	sub	sp, #28
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6a1b      	ldr	r3, [r3, #32]
 8011476:	f023 0201 	bic.w	r2, r3, #1
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6a1b      	ldr	r3, [r3, #32]
 8011482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	699b      	ldr	r3, [r3, #24]
 801148e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011490:	68fa      	ldr	r2, [r7, #12]
 8011492:	4b2b      	ldr	r3, [pc, #172]	; (8011540 <TIM_OC1_SetConfig+0xd8>)
 8011494:	4013      	ands	r3, r2
 8011496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	f023 0303 	bic.w	r3, r3, #3
 801149e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	68fa      	ldr	r2, [r7, #12]
 80114a6:	4313      	orrs	r3, r2
 80114a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	f023 0302 	bic.w	r3, r3, #2
 80114b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	689b      	ldr	r3, [r3, #8]
 80114b6:	697a      	ldr	r2, [r7, #20]
 80114b8:	4313      	orrs	r3, r2
 80114ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	4a21      	ldr	r2, [pc, #132]	; (8011544 <TIM_OC1_SetConfig+0xdc>)
 80114c0:	4293      	cmp	r3, r2
 80114c2:	d003      	beq.n	80114cc <TIM_OC1_SetConfig+0x64>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	4a20      	ldr	r2, [pc, #128]	; (8011548 <TIM_OC1_SetConfig+0xe0>)
 80114c8:	4293      	cmp	r3, r2
 80114ca:	d10c      	bne.n	80114e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	f023 0308 	bic.w	r3, r3, #8
 80114d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	68db      	ldr	r3, [r3, #12]
 80114d8:	697a      	ldr	r2, [r7, #20]
 80114da:	4313      	orrs	r3, r2
 80114dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	f023 0304 	bic.w	r3, r3, #4
 80114e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	4a16      	ldr	r2, [pc, #88]	; (8011544 <TIM_OC1_SetConfig+0xdc>)
 80114ea:	4293      	cmp	r3, r2
 80114ec:	d003      	beq.n	80114f6 <TIM_OC1_SetConfig+0x8e>
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	4a15      	ldr	r2, [pc, #84]	; (8011548 <TIM_OC1_SetConfig+0xe0>)
 80114f2:	4293      	cmp	r3, r2
 80114f4:	d111      	bne.n	801151a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80114f6:	693b      	ldr	r3, [r7, #16]
 80114f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80114fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80114fe:	693b      	ldr	r3, [r7, #16]
 8011500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	695b      	ldr	r3, [r3, #20]
 801150a:	693a      	ldr	r2, [r7, #16]
 801150c:	4313      	orrs	r3, r2
 801150e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	699b      	ldr	r3, [r3, #24]
 8011514:	693a      	ldr	r2, [r7, #16]
 8011516:	4313      	orrs	r3, r2
 8011518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	693a      	ldr	r2, [r7, #16]
 801151e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	68fa      	ldr	r2, [r7, #12]
 8011524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	685a      	ldr	r2, [r3, #4]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	697a      	ldr	r2, [r7, #20]
 8011532:	621a      	str	r2, [r3, #32]
}
 8011534:	bf00      	nop
 8011536:	371c      	adds	r7, #28
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr
 8011540:	fffeff8f 	.word	0xfffeff8f
 8011544:	40010000 	.word	0x40010000
 8011548:	40010400 	.word	0x40010400

0801154c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801154c:	b480      	push	{r7}
 801154e:	b087      	sub	sp, #28
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
 8011554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6a1b      	ldr	r3, [r3, #32]
 801155a:	f023 0210 	bic.w	r2, r3, #16
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	6a1b      	ldr	r3, [r3, #32]
 8011566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	685b      	ldr	r3, [r3, #4]
 801156c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	699b      	ldr	r3, [r3, #24]
 8011572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011574:	68fa      	ldr	r2, [r7, #12]
 8011576:	4b2e      	ldr	r3, [pc, #184]	; (8011630 <TIM_OC2_SetConfig+0xe4>)
 8011578:	4013      	ands	r3, r2
 801157a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	021b      	lsls	r3, r3, #8
 801158a:	68fa      	ldr	r2, [r7, #12]
 801158c:	4313      	orrs	r3, r2
 801158e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	f023 0320 	bic.w	r3, r3, #32
 8011596:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	689b      	ldr	r3, [r3, #8]
 801159c:	011b      	lsls	r3, r3, #4
 801159e:	697a      	ldr	r2, [r7, #20]
 80115a0:	4313      	orrs	r3, r2
 80115a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	4a23      	ldr	r2, [pc, #140]	; (8011634 <TIM_OC2_SetConfig+0xe8>)
 80115a8:	4293      	cmp	r3, r2
 80115aa:	d003      	beq.n	80115b4 <TIM_OC2_SetConfig+0x68>
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	4a22      	ldr	r2, [pc, #136]	; (8011638 <TIM_OC2_SetConfig+0xec>)
 80115b0:	4293      	cmp	r3, r2
 80115b2:	d10d      	bne.n	80115d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80115ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	68db      	ldr	r3, [r3, #12]
 80115c0:	011b      	lsls	r3, r3, #4
 80115c2:	697a      	ldr	r2, [r7, #20]
 80115c4:	4313      	orrs	r3, r2
 80115c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80115ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	4a18      	ldr	r2, [pc, #96]	; (8011634 <TIM_OC2_SetConfig+0xe8>)
 80115d4:	4293      	cmp	r3, r2
 80115d6:	d003      	beq.n	80115e0 <TIM_OC2_SetConfig+0x94>
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	4a17      	ldr	r2, [pc, #92]	; (8011638 <TIM_OC2_SetConfig+0xec>)
 80115dc:	4293      	cmp	r3, r2
 80115de:	d113      	bne.n	8011608 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80115e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80115ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	695b      	ldr	r3, [r3, #20]
 80115f4:	009b      	lsls	r3, r3, #2
 80115f6:	693a      	ldr	r2, [r7, #16]
 80115f8:	4313      	orrs	r3, r2
 80115fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	699b      	ldr	r3, [r3, #24]
 8011600:	009b      	lsls	r3, r3, #2
 8011602:	693a      	ldr	r2, [r7, #16]
 8011604:	4313      	orrs	r3, r2
 8011606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	693a      	ldr	r2, [r7, #16]
 801160c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	68fa      	ldr	r2, [r7, #12]
 8011612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	685a      	ldr	r2, [r3, #4]
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	697a      	ldr	r2, [r7, #20]
 8011620:	621a      	str	r2, [r3, #32]
}
 8011622:	bf00      	nop
 8011624:	371c      	adds	r7, #28
 8011626:	46bd      	mov	sp, r7
 8011628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162c:	4770      	bx	lr
 801162e:	bf00      	nop
 8011630:	feff8fff 	.word	0xfeff8fff
 8011634:	40010000 	.word	0x40010000
 8011638:	40010400 	.word	0x40010400

0801163c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801163c:	b480      	push	{r7}
 801163e:	b087      	sub	sp, #28
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	6a1b      	ldr	r3, [r3, #32]
 801164a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6a1b      	ldr	r3, [r3, #32]
 8011656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	685b      	ldr	r3, [r3, #4]
 801165c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	69db      	ldr	r3, [r3, #28]
 8011662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011664:	68fa      	ldr	r2, [r7, #12]
 8011666:	4b2d      	ldr	r3, [pc, #180]	; (801171c <TIM_OC3_SetConfig+0xe0>)
 8011668:	4013      	ands	r3, r2
 801166a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	f023 0303 	bic.w	r3, r3, #3
 8011672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	68fa      	ldr	r2, [r7, #12]
 801167a:	4313      	orrs	r3, r2
 801167c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	689b      	ldr	r3, [r3, #8]
 801168a:	021b      	lsls	r3, r3, #8
 801168c:	697a      	ldr	r2, [r7, #20]
 801168e:	4313      	orrs	r3, r2
 8011690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	4a22      	ldr	r2, [pc, #136]	; (8011720 <TIM_OC3_SetConfig+0xe4>)
 8011696:	4293      	cmp	r3, r2
 8011698:	d003      	beq.n	80116a2 <TIM_OC3_SetConfig+0x66>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	4a21      	ldr	r2, [pc, #132]	; (8011724 <TIM_OC3_SetConfig+0xe8>)
 801169e:	4293      	cmp	r3, r2
 80116a0:	d10d      	bne.n	80116be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80116a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	68db      	ldr	r3, [r3, #12]
 80116ae:	021b      	lsls	r3, r3, #8
 80116b0:	697a      	ldr	r2, [r7, #20]
 80116b2:	4313      	orrs	r3, r2
 80116b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80116bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	4a17      	ldr	r2, [pc, #92]	; (8011720 <TIM_OC3_SetConfig+0xe4>)
 80116c2:	4293      	cmp	r3, r2
 80116c4:	d003      	beq.n	80116ce <TIM_OC3_SetConfig+0x92>
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	4a16      	ldr	r2, [pc, #88]	; (8011724 <TIM_OC3_SetConfig+0xe8>)
 80116ca:	4293      	cmp	r3, r2
 80116cc:	d113      	bne.n	80116f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80116d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80116d6:	693b      	ldr	r3, [r7, #16]
 80116d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80116dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	695b      	ldr	r3, [r3, #20]
 80116e2:	011b      	lsls	r3, r3, #4
 80116e4:	693a      	ldr	r2, [r7, #16]
 80116e6:	4313      	orrs	r3, r2
 80116e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	699b      	ldr	r3, [r3, #24]
 80116ee:	011b      	lsls	r3, r3, #4
 80116f0:	693a      	ldr	r2, [r7, #16]
 80116f2:	4313      	orrs	r3, r2
 80116f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	693a      	ldr	r2, [r7, #16]
 80116fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	68fa      	ldr	r2, [r7, #12]
 8011700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	685a      	ldr	r2, [r3, #4]
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	697a      	ldr	r2, [r7, #20]
 801170e:	621a      	str	r2, [r3, #32]
}
 8011710:	bf00      	nop
 8011712:	371c      	adds	r7, #28
 8011714:	46bd      	mov	sp, r7
 8011716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171a:	4770      	bx	lr
 801171c:	fffeff8f 	.word	0xfffeff8f
 8011720:	40010000 	.word	0x40010000
 8011724:	40010400 	.word	0x40010400

08011728 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011728:	b480      	push	{r7}
 801172a:	b087      	sub	sp, #28
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6a1b      	ldr	r3, [r3, #32]
 8011736:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6a1b      	ldr	r3, [r3, #32]
 8011742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	685b      	ldr	r3, [r3, #4]
 8011748:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	69db      	ldr	r3, [r3, #28]
 801174e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011750:	68fa      	ldr	r2, [r7, #12]
 8011752:	4b1e      	ldr	r3, [pc, #120]	; (80117cc <TIM_OC4_SetConfig+0xa4>)
 8011754:	4013      	ands	r3, r2
 8011756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801175e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	021b      	lsls	r3, r3, #8
 8011766:	68fa      	ldr	r2, [r7, #12]
 8011768:	4313      	orrs	r3, r2
 801176a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	689b      	ldr	r3, [r3, #8]
 8011778:	031b      	lsls	r3, r3, #12
 801177a:	693a      	ldr	r2, [r7, #16]
 801177c:	4313      	orrs	r3, r2
 801177e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	4a13      	ldr	r2, [pc, #76]	; (80117d0 <TIM_OC4_SetConfig+0xa8>)
 8011784:	4293      	cmp	r3, r2
 8011786:	d003      	beq.n	8011790 <TIM_OC4_SetConfig+0x68>
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	4a12      	ldr	r2, [pc, #72]	; (80117d4 <TIM_OC4_SetConfig+0xac>)
 801178c:	4293      	cmp	r3, r2
 801178e:	d109      	bne.n	80117a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	695b      	ldr	r3, [r3, #20]
 801179c:	019b      	lsls	r3, r3, #6
 801179e:	697a      	ldr	r2, [r7, #20]
 80117a0:	4313      	orrs	r3, r2
 80117a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	697a      	ldr	r2, [r7, #20]
 80117a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	68fa      	ldr	r2, [r7, #12]
 80117ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	685a      	ldr	r2, [r3, #4]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	693a      	ldr	r2, [r7, #16]
 80117bc:	621a      	str	r2, [r3, #32]
}
 80117be:	bf00      	nop
 80117c0:	371c      	adds	r7, #28
 80117c2:	46bd      	mov	sp, r7
 80117c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c8:	4770      	bx	lr
 80117ca:	bf00      	nop
 80117cc:	feff8fff 	.word	0xfeff8fff
 80117d0:	40010000 	.word	0x40010000
 80117d4:	40010400 	.word	0x40010400

080117d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80117d8:	b480      	push	{r7}
 80117da:	b087      	sub	sp, #28
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
 80117e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6a1b      	ldr	r3, [r3, #32]
 80117e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6a1b      	ldr	r3, [r3, #32]
 80117f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	685b      	ldr	r3, [r3, #4]
 80117f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011800:	68fa      	ldr	r2, [r7, #12]
 8011802:	4b1b      	ldr	r3, [pc, #108]	; (8011870 <TIM_OC5_SetConfig+0x98>)
 8011804:	4013      	ands	r3, r2
 8011806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	68fa      	ldr	r2, [r7, #12]
 801180e:	4313      	orrs	r3, r2
 8011810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011812:	693b      	ldr	r3, [r7, #16]
 8011814:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011818:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	689b      	ldr	r3, [r3, #8]
 801181e:	041b      	lsls	r3, r3, #16
 8011820:	693a      	ldr	r2, [r7, #16]
 8011822:	4313      	orrs	r3, r2
 8011824:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	4a12      	ldr	r2, [pc, #72]	; (8011874 <TIM_OC5_SetConfig+0x9c>)
 801182a:	4293      	cmp	r3, r2
 801182c:	d003      	beq.n	8011836 <TIM_OC5_SetConfig+0x5e>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	4a11      	ldr	r2, [pc, #68]	; (8011878 <TIM_OC5_SetConfig+0xa0>)
 8011832:	4293      	cmp	r3, r2
 8011834:	d109      	bne.n	801184a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801183c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	695b      	ldr	r3, [r3, #20]
 8011842:	021b      	lsls	r3, r3, #8
 8011844:	697a      	ldr	r2, [r7, #20]
 8011846:	4313      	orrs	r3, r2
 8011848:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	697a      	ldr	r2, [r7, #20]
 801184e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	68fa      	ldr	r2, [r7, #12]
 8011854:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	685a      	ldr	r2, [r3, #4]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	693a      	ldr	r2, [r7, #16]
 8011862:	621a      	str	r2, [r3, #32]
}
 8011864:	bf00      	nop
 8011866:	371c      	adds	r7, #28
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr
 8011870:	fffeff8f 	.word	0xfffeff8f
 8011874:	40010000 	.word	0x40010000
 8011878:	40010400 	.word	0x40010400

0801187c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801187c:	b480      	push	{r7}
 801187e:	b087      	sub	sp, #28
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6a1b      	ldr	r3, [r3, #32]
 801188a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6a1b      	ldr	r3, [r3, #32]
 8011896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80118a4:	68fa      	ldr	r2, [r7, #12]
 80118a6:	4b1c      	ldr	r3, [pc, #112]	; (8011918 <TIM_OC6_SetConfig+0x9c>)
 80118a8:	4013      	ands	r3, r2
 80118aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	021b      	lsls	r3, r3, #8
 80118b2:	68fa      	ldr	r2, [r7, #12]
 80118b4:	4313      	orrs	r3, r2
 80118b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80118b8:	693b      	ldr	r3, [r7, #16]
 80118ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80118be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	689b      	ldr	r3, [r3, #8]
 80118c4:	051b      	lsls	r3, r3, #20
 80118c6:	693a      	ldr	r2, [r7, #16]
 80118c8:	4313      	orrs	r3, r2
 80118ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	4a13      	ldr	r2, [pc, #76]	; (801191c <TIM_OC6_SetConfig+0xa0>)
 80118d0:	4293      	cmp	r3, r2
 80118d2:	d003      	beq.n	80118dc <TIM_OC6_SetConfig+0x60>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	4a12      	ldr	r2, [pc, #72]	; (8011920 <TIM_OC6_SetConfig+0xa4>)
 80118d8:	4293      	cmp	r3, r2
 80118da:	d109      	bne.n	80118f0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80118e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	695b      	ldr	r3, [r3, #20]
 80118e8:	029b      	lsls	r3, r3, #10
 80118ea:	697a      	ldr	r2, [r7, #20]
 80118ec:	4313      	orrs	r3, r2
 80118ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	697a      	ldr	r2, [r7, #20]
 80118f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	68fa      	ldr	r2, [r7, #12]
 80118fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	685a      	ldr	r2, [r3, #4]
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	693a      	ldr	r2, [r7, #16]
 8011908:	621a      	str	r2, [r3, #32]
}
 801190a:	bf00      	nop
 801190c:	371c      	adds	r7, #28
 801190e:	46bd      	mov	sp, r7
 8011910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011914:	4770      	bx	lr
 8011916:	bf00      	nop
 8011918:	feff8fff 	.word	0xfeff8fff
 801191c:	40010000 	.word	0x40010000
 8011920:	40010400 	.word	0x40010400

08011924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011924:	b480      	push	{r7}
 8011926:	b087      	sub	sp, #28
 8011928:	af00      	add	r7, sp, #0
 801192a:	60f8      	str	r0, [r7, #12]
 801192c:	60b9      	str	r1, [r7, #8]
 801192e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	6a1b      	ldr	r3, [r3, #32]
 8011934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	6a1b      	ldr	r3, [r3, #32]
 801193a:	f023 0201 	bic.w	r2, r3, #1
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	699b      	ldr	r3, [r3, #24]
 8011946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801194e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	011b      	lsls	r3, r3, #4
 8011954:	693a      	ldr	r2, [r7, #16]
 8011956:	4313      	orrs	r3, r2
 8011958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	f023 030a 	bic.w	r3, r3, #10
 8011960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011962:	697a      	ldr	r2, [r7, #20]
 8011964:	68bb      	ldr	r3, [r7, #8]
 8011966:	4313      	orrs	r3, r2
 8011968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	693a      	ldr	r2, [r7, #16]
 801196e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	697a      	ldr	r2, [r7, #20]
 8011974:	621a      	str	r2, [r3, #32]
}
 8011976:	bf00      	nop
 8011978:	371c      	adds	r7, #28
 801197a:	46bd      	mov	sp, r7
 801197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011980:	4770      	bx	lr

08011982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011982:	b480      	push	{r7}
 8011984:	b087      	sub	sp, #28
 8011986:	af00      	add	r7, sp, #0
 8011988:	60f8      	str	r0, [r7, #12]
 801198a:	60b9      	str	r1, [r7, #8]
 801198c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	6a1b      	ldr	r3, [r3, #32]
 8011992:	f023 0210 	bic.w	r2, r3, #16
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	699b      	ldr	r3, [r3, #24]
 801199e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	6a1b      	ldr	r3, [r3, #32]
 80119a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80119ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	031b      	lsls	r3, r3, #12
 80119b2:	697a      	ldr	r2, [r7, #20]
 80119b4:	4313      	orrs	r3, r2
 80119b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80119be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	011b      	lsls	r3, r3, #4
 80119c4:	693a      	ldr	r2, [r7, #16]
 80119c6:	4313      	orrs	r3, r2
 80119c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	697a      	ldr	r2, [r7, #20]
 80119ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	693a      	ldr	r2, [r7, #16]
 80119d4:	621a      	str	r2, [r3, #32]
}
 80119d6:	bf00      	nop
 80119d8:	371c      	adds	r7, #28
 80119da:	46bd      	mov	sp, r7
 80119dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e0:	4770      	bx	lr

080119e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80119e2:	b480      	push	{r7}
 80119e4:	b085      	sub	sp, #20
 80119e6:	af00      	add	r7, sp, #0
 80119e8:	6078      	str	r0, [r7, #4]
 80119ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	689b      	ldr	r3, [r3, #8]
 80119f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80119f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80119fa:	683a      	ldr	r2, [r7, #0]
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	4313      	orrs	r3, r2
 8011a00:	f043 0307 	orr.w	r3, r3, #7
 8011a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	68fa      	ldr	r2, [r7, #12]
 8011a0a:	609a      	str	r2, [r3, #8]
}
 8011a0c:	bf00      	nop
 8011a0e:	3714      	adds	r7, #20
 8011a10:	46bd      	mov	sp, r7
 8011a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a16:	4770      	bx	lr

08011a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011a18:	b480      	push	{r7}
 8011a1a:	b087      	sub	sp, #28
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	60f8      	str	r0, [r7, #12]
 8011a20:	60b9      	str	r1, [r7, #8]
 8011a22:	607a      	str	r2, [r7, #4]
 8011a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	689b      	ldr	r3, [r3, #8]
 8011a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	021a      	lsls	r2, r3, #8
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	431a      	orrs	r2, r3
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	4313      	orrs	r3, r2
 8011a40:	697a      	ldr	r2, [r7, #20]
 8011a42:	4313      	orrs	r3, r2
 8011a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	697a      	ldr	r2, [r7, #20]
 8011a4a:	609a      	str	r2, [r3, #8]
}
 8011a4c:	bf00      	nop
 8011a4e:	371c      	adds	r7, #28
 8011a50:	46bd      	mov	sp, r7
 8011a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a56:	4770      	bx	lr

08011a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b087      	sub	sp, #28
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	60f8      	str	r0, [r7, #12]
 8011a60:	60b9      	str	r1, [r7, #8]
 8011a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	f003 031f 	and.w	r3, r3, #31
 8011a6a:	2201      	movs	r2, #1
 8011a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8011a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	6a1a      	ldr	r2, [r3, #32]
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	43db      	mvns	r3, r3
 8011a7a:	401a      	ands	r2, r3
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	6a1a      	ldr	r2, [r3, #32]
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	f003 031f 	and.w	r3, r3, #31
 8011a8a:	6879      	ldr	r1, [r7, #4]
 8011a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8011a90:	431a      	orrs	r2, r3
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	621a      	str	r2, [r3, #32]
}
 8011a96:	bf00      	nop
 8011a98:	371c      	adds	r7, #28
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa0:	4770      	bx	lr
	...

08011aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	b085      	sub	sp, #20
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011ab4:	2b01      	cmp	r3, #1
 8011ab6:	d101      	bne.n	8011abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011ab8:	2302      	movs	r3, #2
 8011aba:	e06d      	b.n	8011b98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2201      	movs	r2, #1
 8011ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2202      	movs	r2, #2
 8011ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	685b      	ldr	r3, [r3, #4]
 8011ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	689b      	ldr	r3, [r3, #8]
 8011ada:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	4a30      	ldr	r2, [pc, #192]	; (8011ba4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011ae2:	4293      	cmp	r3, r2
 8011ae4:	d004      	beq.n	8011af0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	4a2f      	ldr	r2, [pc, #188]	; (8011ba8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011aec:	4293      	cmp	r3, r2
 8011aee:	d108      	bne.n	8011b02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011af6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	68fa      	ldr	r2, [r7, #12]
 8011afe:	4313      	orrs	r3, r2
 8011b00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	68fa      	ldr	r2, [r7, #12]
 8011b10:	4313      	orrs	r3, r2
 8011b12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	68fa      	ldr	r2, [r7, #12]
 8011b1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	4a20      	ldr	r2, [pc, #128]	; (8011ba4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011b22:	4293      	cmp	r3, r2
 8011b24:	d022      	beq.n	8011b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b2e:	d01d      	beq.n	8011b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	4a1d      	ldr	r2, [pc, #116]	; (8011bac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d018      	beq.n	8011b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	4a1c      	ldr	r2, [pc, #112]	; (8011bb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011b40:	4293      	cmp	r3, r2
 8011b42:	d013      	beq.n	8011b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	4a1a      	ldr	r2, [pc, #104]	; (8011bb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d00e      	beq.n	8011b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	4a15      	ldr	r2, [pc, #84]	; (8011ba8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011b54:	4293      	cmp	r3, r2
 8011b56:	d009      	beq.n	8011b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	4a16      	ldr	r2, [pc, #88]	; (8011bb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011b5e:	4293      	cmp	r3, r2
 8011b60:	d004      	beq.n	8011b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	4a15      	ldr	r2, [pc, #84]	; (8011bbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	d10c      	bne.n	8011b86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	689b      	ldr	r3, [r3, #8]
 8011b78:	68ba      	ldr	r2, [r7, #8]
 8011b7a:	4313      	orrs	r3, r2
 8011b7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	68ba      	ldr	r2, [r7, #8]
 8011b84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2201      	movs	r2, #1
 8011b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2200      	movs	r2, #0
 8011b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011b96:	2300      	movs	r3, #0
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3714      	adds	r7, #20
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba2:	4770      	bx	lr
 8011ba4:	40010000 	.word	0x40010000
 8011ba8:	40010400 	.word	0x40010400
 8011bac:	40000400 	.word	0x40000400
 8011bb0:	40000800 	.word	0x40000800
 8011bb4:	40000c00 	.word	0x40000c00
 8011bb8:	40014000 	.word	0x40014000
 8011bbc:	40001800 	.word	0x40001800

08011bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	b083      	sub	sp, #12
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011bc8:	bf00      	nop
 8011bca:	370c      	adds	r7, #12
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr

08011bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b083      	sub	sp, #12
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011bdc:	bf00      	nop
 8011bde:	370c      	adds	r7, #12
 8011be0:	46bd      	mov	sp, r7
 8011be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be6:	4770      	bx	lr

08011be8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011be8:	b480      	push	{r7}
 8011bea:	b083      	sub	sp, #12
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011bf0:	bf00      	nop
 8011bf2:	370c      	adds	r7, #12
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfa:	4770      	bx	lr

08011bfc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011bfc:	b480      	push	{r7}
 8011bfe:	b085      	sub	sp, #20
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8011c06:	2300      	movs	r3, #0
 8011c08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	2b01      	cmp	r3, #1
 8011c14:	d027      	beq.n	8011c66 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8011c1c:	68fa      	ldr	r2, [r7, #12]
 8011c1e:	4b2f      	ldr	r3, [pc, #188]	; (8011cdc <FMC_SDRAM_Init+0xe0>)
 8011c20:	4013      	ands	r3, r2
 8011c22:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011c2c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8011c32:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8011c38:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8011c3e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8011c44:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8011c4a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8011c50:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8011c56:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011c58:	68fa      	ldr	r2, [r7, #12]
 8011c5a:	4313      	orrs	r3, r2
 8011c5c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	68fa      	ldr	r2, [r7, #12]
 8011c62:	601a      	str	r2, [r3, #0]
 8011c64:	e032      	b.n	8011ccc <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011c72:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011c7c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8011c82:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011c84:	68fa      	ldr	r2, [r7, #12]
 8011c86:	4313      	orrs	r3, r2
 8011c88:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8011c90:	68ba      	ldr	r2, [r7, #8]
 8011c92:	4b12      	ldr	r3, [pc, #72]	; (8011cdc <FMC_SDRAM_Init+0xe0>)
 8011c94:	4013      	ands	r3, r2
 8011c96:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011ca0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8011ca6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8011cac:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8011cb2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8011cb8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011cba:	68ba      	ldr	r2, [r7, #8]
 8011cbc:	4313      	orrs	r3, r2
 8011cbe:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	68fa      	ldr	r2, [r7, #12]
 8011cc4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	68ba      	ldr	r2, [r7, #8]
 8011cca:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8011ccc:	2300      	movs	r3, #0
}
 8011cce:	4618      	mov	r0, r3
 8011cd0:	3714      	adds	r7, #20
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd8:	4770      	bx	lr
 8011cda:	bf00      	nop
 8011cdc:	ffff8000 	.word	0xffff8000

08011ce0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b087      	sub	sp, #28
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	60f8      	str	r0, [r7, #12]
 8011ce8:	60b9      	str	r1, [r7, #8]
 8011cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8011cec:	2300      	movs	r3, #0
 8011cee:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2b01      	cmp	r3, #1
 8011cf8:	d02e      	beq.n	8011d58 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	689b      	ldr	r3, [r3, #8]
 8011cfe:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011d06:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	685b      	ldr	r3, [r3, #4]
 8011d12:	3b01      	subs	r3, #1
 8011d14:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011d16:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	689b      	ldr	r3, [r3, #8]
 8011d1c:	3b01      	subs	r3, #1
 8011d1e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8011d20:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8011d22:	68bb      	ldr	r3, [r7, #8]
 8011d24:	68db      	ldr	r3, [r3, #12]
 8011d26:	3b01      	subs	r3, #1
 8011d28:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8011d2a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	691b      	ldr	r3, [r3, #16]
 8011d30:	3b01      	subs	r3, #1
 8011d32:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8011d34:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	695b      	ldr	r3, [r3, #20]
 8011d3a:	3b01      	subs	r3, #1
 8011d3c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8011d3e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	699b      	ldr	r3, [r3, #24]
 8011d44:	3b01      	subs	r3, #1
 8011d46:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011d48:	4313      	orrs	r3, r2
 8011d4a:	697a      	ldr	r2, [r7, #20]
 8011d4c:	4313      	orrs	r3, r2
 8011d4e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	697a      	ldr	r2, [r7, #20]
 8011d54:	609a      	str	r2, [r3, #8]
 8011d56:	e039      	b.n	8011dcc <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	689b      	ldr	r3, [r3, #8]
 8011d5c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8011d5e:	697a      	ldr	r2, [r7, #20]
 8011d60:	4b1e      	ldr	r3, [pc, #120]	; (8011ddc <FMC_SDRAM_Timing_Init+0xfc>)
 8011d62:	4013      	ands	r3, r2
 8011d64:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	68db      	ldr	r3, [r3, #12]
 8011d6a:	3b01      	subs	r3, #1
 8011d6c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	695b      	ldr	r3, [r3, #20]
 8011d72:	3b01      	subs	r3, #1
 8011d74:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8011d76:	4313      	orrs	r3, r2
 8011d78:	697a      	ldr	r2, [r7, #20]
 8011d7a:	4313      	orrs	r3, r2
 8011d7c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011d8a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	3b01      	subs	r3, #1
 8011d98:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011d9a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	689b      	ldr	r3, [r3, #8]
 8011da0:	3b01      	subs	r3, #1
 8011da2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8011da4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	691b      	ldr	r3, [r3, #16]
 8011daa:	3b01      	subs	r3, #1
 8011dac:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8011dae:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	699b      	ldr	r3, [r3, #24]
 8011db4:	3b01      	subs	r3, #1
 8011db6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011db8:	4313      	orrs	r3, r2
 8011dba:	693a      	ldr	r2, [r7, #16]
 8011dbc:	4313      	orrs	r3, r2
 8011dbe:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	697a      	ldr	r2, [r7, #20]
 8011dc4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	693a      	ldr	r2, [r7, #16]
 8011dca:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8011dcc:	2300      	movs	r3, #0
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	371c      	adds	r7, #28
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd8:	4770      	bx	lr
 8011dda:	bf00      	nop
 8011ddc:	ff0f0fff 	.word	0xff0f0fff

08011de0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8011de0:	b480      	push	{r7}
 8011de2:	b085      	sub	sp, #20
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	60f8      	str	r0, [r7, #12]
 8011de8:	60b9      	str	r1, [r7, #8]
 8011dea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	691a      	ldr	r2, [r3, #16]
 8011df0:	4b0c      	ldr	r3, [pc, #48]	; (8011e24 <FMC_SDRAM_SendCommand+0x44>)
 8011df2:	4013      	ands	r3, r2
 8011df4:	68ba      	ldr	r2, [r7, #8]
 8011df6:	6811      	ldr	r1, [r2, #0]
 8011df8:	68ba      	ldr	r2, [r7, #8]
 8011dfa:	6852      	ldr	r2, [r2, #4]
 8011dfc:	4311      	orrs	r1, r2
 8011dfe:	68ba      	ldr	r2, [r7, #8]
 8011e00:	6892      	ldr	r2, [r2, #8]
 8011e02:	3a01      	subs	r2, #1
 8011e04:	0152      	lsls	r2, r2, #5
 8011e06:	4311      	orrs	r1, r2
 8011e08:	68ba      	ldr	r2, [r7, #8]
 8011e0a:	68d2      	ldr	r2, [r2, #12]
 8011e0c:	0252      	lsls	r2, r2, #9
 8011e0e:	430a      	orrs	r2, r1
 8011e10:	431a      	orrs	r2, r3
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8011e16:	2300      	movs	r3, #0
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	3714      	adds	r7, #20
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr
 8011e24:	ffc00000 	.word	0xffc00000

08011e28 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b083      	sub	sp, #12
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	695a      	ldr	r2, [r3, #20]
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	005b      	lsls	r3, r3, #1
 8011e3a:	431a      	orrs	r2, r3
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8011e40:	2300      	movs	r3, #0
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	370c      	adds	r7, #12
 8011e46:	46bd      	mov	sp, r7
 8011e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4c:	4770      	bx	lr

08011e4e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011e4e:	b480      	push	{r7}
 8011e50:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8011e52:	bf00      	nop
 8011e54:	46bd      	mov	sp, r7
 8011e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5a:	4770      	bx	lr

08011e5c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011e5c:	b480      	push	{r7}
 8011e5e:	b085      	sub	sp, #20
 8011e60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e62:	f3ef 8305 	mrs	r3, IPSR
 8011e66:	60bb      	str	r3, [r7, #8]
  return(result);
 8011e68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d10f      	bne.n	8011e8e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8011e72:	607b      	str	r3, [r7, #4]
  return(result);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d105      	bne.n	8011e86 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011e7a:	f3ef 8311 	mrs	r3, BASEPRI
 8011e7e:	603b      	str	r3, [r7, #0]
  return(result);
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d007      	beq.n	8011e96 <osKernelInitialize+0x3a>
 8011e86:	4b0e      	ldr	r3, [pc, #56]	; (8011ec0 <osKernelInitialize+0x64>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	2b02      	cmp	r3, #2
 8011e8c:	d103      	bne.n	8011e96 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8011e8e:	f06f 0305 	mvn.w	r3, #5
 8011e92:	60fb      	str	r3, [r7, #12]
 8011e94:	e00c      	b.n	8011eb0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011e96:	4b0a      	ldr	r3, [pc, #40]	; (8011ec0 <osKernelInitialize+0x64>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d105      	bne.n	8011eaa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011e9e:	4b08      	ldr	r3, [pc, #32]	; (8011ec0 <osKernelInitialize+0x64>)
 8011ea0:	2201      	movs	r2, #1
 8011ea2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	60fb      	str	r3, [r7, #12]
 8011ea8:	e002      	b.n	8011eb0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8011eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8011eae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011eb0:	68fb      	ldr	r3, [r7, #12]
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3714      	adds	r7, #20
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebc:	4770      	bx	lr
 8011ebe:	bf00      	nop
 8011ec0:	20023a68 	.word	0x20023a68

08011ec4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b084      	sub	sp, #16
 8011ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011eca:	f3ef 8305 	mrs	r3, IPSR
 8011ece:	60bb      	str	r3, [r7, #8]
  return(result);
 8011ed0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d10f      	bne.n	8011ef6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8011eda:	607b      	str	r3, [r7, #4]
  return(result);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d105      	bne.n	8011eee <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8011ee6:	603b      	str	r3, [r7, #0]
  return(result);
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d007      	beq.n	8011efe <osKernelStart+0x3a>
 8011eee:	4b0f      	ldr	r3, [pc, #60]	; (8011f2c <osKernelStart+0x68>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	2b02      	cmp	r3, #2
 8011ef4:	d103      	bne.n	8011efe <osKernelStart+0x3a>
    stat = osErrorISR;
 8011ef6:	f06f 0305 	mvn.w	r3, #5
 8011efa:	60fb      	str	r3, [r7, #12]
 8011efc:	e010      	b.n	8011f20 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011efe:	4b0b      	ldr	r3, [pc, #44]	; (8011f2c <osKernelStart+0x68>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	2b01      	cmp	r3, #1
 8011f04:	d109      	bne.n	8011f1a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011f06:	f7ff ffa2 	bl	8011e4e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011f0a:	4b08      	ldr	r3, [pc, #32]	; (8011f2c <osKernelStart+0x68>)
 8011f0c:	2202      	movs	r2, #2
 8011f0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011f10:	f002 fb16 	bl	8014540 <vTaskStartScheduler>
      stat = osOK;
 8011f14:	2300      	movs	r3, #0
 8011f16:	60fb      	str	r3, [r7, #12]
 8011f18:	e002      	b.n	8011f20 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8011f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f1e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011f20:	68fb      	ldr	r3, [r7, #12]
}
 8011f22:	4618      	mov	r0, r3
 8011f24:	3710      	adds	r7, #16
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}
 8011f2a:	bf00      	nop
 8011f2c:	20023a68 	.word	0x20023a68

08011f30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b090      	sub	sp, #64	; 0x40
 8011f34:	af04      	add	r7, sp, #16
 8011f36:	60f8      	str	r0, [r7, #12]
 8011f38:	60b9      	str	r1, [r7, #8]
 8011f3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f40:	f3ef 8305 	mrs	r3, IPSR
 8011f44:	61fb      	str	r3, [r7, #28]
  return(result);
 8011f46:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	f040 808f 	bne.w	801206c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8011f52:	61bb      	str	r3, [r7, #24]
  return(result);
 8011f54:	69bb      	ldr	r3, [r7, #24]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d105      	bne.n	8011f66 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8011f5e:	617b      	str	r3, [r7, #20]
  return(result);
 8011f60:	697b      	ldr	r3, [r7, #20]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d003      	beq.n	8011f6e <osThreadNew+0x3e>
 8011f66:	4b44      	ldr	r3, [pc, #272]	; (8012078 <osThreadNew+0x148>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	2b02      	cmp	r3, #2
 8011f6c:	d07e      	beq.n	801206c <osThreadNew+0x13c>
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d07b      	beq.n	801206c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8011f74:	2380      	movs	r3, #128	; 0x80
 8011f76:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8011f78:	2318      	movs	r3, #24
 8011f7a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8011f80:	f04f 33ff 	mov.w	r3, #4294967295
 8011f84:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d045      	beq.n	8012018 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d002      	beq.n	8011f9a <osThreadNew+0x6a>
        name = attr->name;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	699b      	ldr	r3, [r3, #24]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d002      	beq.n	8011fa8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	699b      	ldr	r3, [r3, #24]
 8011fa6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d008      	beq.n	8011fc0 <osThreadNew+0x90>
 8011fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb0:	2b38      	cmp	r3, #56	; 0x38
 8011fb2:	d805      	bhi.n	8011fc0 <osThreadNew+0x90>
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	f003 0301 	and.w	r3, r3, #1
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d001      	beq.n	8011fc4 <osThreadNew+0x94>
        return (NULL);
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	e054      	b.n	801206e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	695b      	ldr	r3, [r3, #20]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d003      	beq.n	8011fd4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	695b      	ldr	r3, [r3, #20]
 8011fd0:	089b      	lsrs	r3, r3, #2
 8011fd2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	689b      	ldr	r3, [r3, #8]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d00e      	beq.n	8011ffa <osThreadNew+0xca>
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	68db      	ldr	r3, [r3, #12]
 8011fe0:	2b5b      	cmp	r3, #91	; 0x5b
 8011fe2:	d90a      	bls.n	8011ffa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d006      	beq.n	8011ffa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	695b      	ldr	r3, [r3, #20]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d002      	beq.n	8011ffa <osThreadNew+0xca>
        mem = 1;
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	623b      	str	r3, [r7, #32]
 8011ff8:	e010      	b.n	801201c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	689b      	ldr	r3, [r3, #8]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d10c      	bne.n	801201c <osThreadNew+0xec>
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	68db      	ldr	r3, [r3, #12]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d108      	bne.n	801201c <osThreadNew+0xec>
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	691b      	ldr	r3, [r3, #16]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d104      	bne.n	801201c <osThreadNew+0xec>
          mem = 0;
 8012012:	2300      	movs	r3, #0
 8012014:	623b      	str	r3, [r7, #32]
 8012016:	e001      	b.n	801201c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8012018:	2300      	movs	r3, #0
 801201a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801201c:	6a3b      	ldr	r3, [r7, #32]
 801201e:	2b01      	cmp	r3, #1
 8012020:	d110      	bne.n	8012044 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8012026:	687a      	ldr	r2, [r7, #4]
 8012028:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801202a:	9202      	str	r2, [sp, #8]
 801202c:	9301      	str	r3, [sp, #4]
 801202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012030:	9300      	str	r3, [sp, #0]
 8012032:	68bb      	ldr	r3, [r7, #8]
 8012034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012038:	68f8      	ldr	r0, [r7, #12]
 801203a:	f002 f8a1 	bl	8014180 <xTaskCreateStatic>
 801203e:	4603      	mov	r3, r0
 8012040:	613b      	str	r3, [r7, #16]
 8012042:	e013      	b.n	801206c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8012044:	6a3b      	ldr	r3, [r7, #32]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d110      	bne.n	801206c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801204c:	b29a      	uxth	r2, r3
 801204e:	f107 0310 	add.w	r3, r7, #16
 8012052:	9301      	str	r3, [sp, #4]
 8012054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012056:	9300      	str	r3, [sp, #0]
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801205c:	68f8      	ldr	r0, [r7, #12]
 801205e:	f002 f8f2 	bl	8014246 <xTaskCreate>
 8012062:	4603      	mov	r3, r0
 8012064:	2b01      	cmp	r3, #1
 8012066:	d001      	beq.n	801206c <osThreadNew+0x13c>
          hTask = NULL;
 8012068:	2300      	movs	r3, #0
 801206a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 801206c:	693b      	ldr	r3, [r7, #16]
}
 801206e:	4618      	mov	r0, r3
 8012070:	3730      	adds	r7, #48	; 0x30
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
 8012076:	bf00      	nop
 8012078:	20023a68 	.word	0x20023a68

0801207c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 801207c:	b480      	push	{r7}
 801207e:	b085      	sub	sp, #20
 8012080:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012082:	f3ef 8305 	mrs	r3, IPSR
 8012086:	60bb      	str	r3, [r7, #8]
  return(result);
 8012088:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801208a:	2b00      	cmp	r3, #0
 801208c:	d10f      	bne.n	80120ae <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801208e:	f3ef 8310 	mrs	r3, PRIMASK
 8012092:	607b      	str	r3, [r7, #4]
  return(result);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d105      	bne.n	80120a6 <osThreadYield+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801209a:	f3ef 8311 	mrs	r3, BASEPRI
 801209e:	603b      	str	r3, [r7, #0]
  return(result);
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d007      	beq.n	80120b6 <osThreadYield+0x3a>
 80120a6:	4b0c      	ldr	r3, [pc, #48]	; (80120d8 <osThreadYield+0x5c>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	2b02      	cmp	r3, #2
 80120ac:	d103      	bne.n	80120b6 <osThreadYield+0x3a>
    stat = osErrorISR;
 80120ae:	f06f 0305 	mvn.w	r3, #5
 80120b2:	60fb      	str	r3, [r7, #12]
 80120b4:	e009      	b.n	80120ca <osThreadYield+0x4e>
  } else {
    stat = osOK;
 80120b6:	2300      	movs	r3, #0
 80120b8:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 80120ba:	4b08      	ldr	r3, [pc, #32]	; (80120dc <osThreadYield+0x60>)
 80120bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120c0:	601a      	str	r2, [r3, #0]
 80120c2:	f3bf 8f4f 	dsb	sy
 80120c6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80120ca:	68fb      	ldr	r3, [r7, #12]
}
 80120cc:	4618      	mov	r0, r3
 80120ce:	3714      	adds	r7, #20
 80120d0:	46bd      	mov	sp, r7
 80120d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d6:	4770      	bx	lr
 80120d8:	20023a68 	.word	0x20023a68
 80120dc:	e000ed04 	.word	0xe000ed04

080120e0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b086      	sub	sp, #24
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80120e8:	f3ef 8305 	mrs	r3, IPSR
 80120ec:	613b      	str	r3, [r7, #16]
  return(result);
 80120ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d10f      	bne.n	8012114 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120f4:	f3ef 8310 	mrs	r3, PRIMASK
 80120f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d105      	bne.n	801210c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012100:	f3ef 8311 	mrs	r3, BASEPRI
 8012104:	60bb      	str	r3, [r7, #8]
  return(result);
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d007      	beq.n	801211c <osDelay+0x3c>
 801210c:	4b0a      	ldr	r3, [pc, #40]	; (8012138 <osDelay+0x58>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	2b02      	cmp	r3, #2
 8012112:	d103      	bne.n	801211c <osDelay+0x3c>
    stat = osErrorISR;
 8012114:	f06f 0305 	mvn.w	r3, #5
 8012118:	617b      	str	r3, [r7, #20]
 801211a:	e007      	b.n	801212c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 801211c:	2300      	movs	r3, #0
 801211e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d002      	beq.n	801212c <osDelay+0x4c>
      vTaskDelay(ticks);
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	f002 f9d4 	bl	80144d4 <vTaskDelay>
    }
  }

  return (stat);
 801212c:	697b      	ldr	r3, [r7, #20]
}
 801212e:	4618      	mov	r0, r3
 8012130:	3718      	adds	r7, #24
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}
 8012136:	bf00      	nop
 8012138:	20023a68 	.word	0x20023a68

0801213c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801213c:	b580      	push	{r7, lr}
 801213e:	b08c      	sub	sp, #48	; 0x30
 8012140:	af02      	add	r7, sp, #8
 8012142:	60f8      	str	r0, [r7, #12]
 8012144:	60b9      	str	r1, [r7, #8]
 8012146:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8012148:	2300      	movs	r3, #0
 801214a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801214c:	f3ef 8305 	mrs	r3, IPSR
 8012150:	61bb      	str	r3, [r7, #24]
  return(result);
 8012152:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8012154:	2b00      	cmp	r3, #0
 8012156:	f040 8086 	bne.w	8012266 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801215a:	f3ef 8310 	mrs	r3, PRIMASK
 801215e:	617b      	str	r3, [r7, #20]
  return(result);
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d105      	bne.n	8012172 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012166:	f3ef 8311 	mrs	r3, BASEPRI
 801216a:	613b      	str	r3, [r7, #16]
  return(result);
 801216c:	693b      	ldr	r3, [r7, #16]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d003      	beq.n	801217a <osSemaphoreNew+0x3e>
 8012172:	4b3f      	ldr	r3, [pc, #252]	; (8012270 <osSemaphoreNew+0x134>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	2b02      	cmp	r3, #2
 8012178:	d075      	beq.n	8012266 <osSemaphoreNew+0x12a>
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d072      	beq.n	8012266 <osSemaphoreNew+0x12a>
 8012180:	68ba      	ldr	r2, [r7, #8]
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	429a      	cmp	r2, r3
 8012186:	d86e      	bhi.n	8012266 <osSemaphoreNew+0x12a>
    mem = -1;
 8012188:	f04f 33ff 	mov.w	r3, #4294967295
 801218c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d015      	beq.n	80121c0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	689b      	ldr	r3, [r3, #8]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d006      	beq.n	80121aa <osSemaphoreNew+0x6e>
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	68db      	ldr	r3, [r3, #12]
 80121a0:	2b4f      	cmp	r3, #79	; 0x4f
 80121a2:	d902      	bls.n	80121aa <osSemaphoreNew+0x6e>
        mem = 1;
 80121a4:	2301      	movs	r3, #1
 80121a6:	623b      	str	r3, [r7, #32]
 80121a8:	e00c      	b.n	80121c4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	689b      	ldr	r3, [r3, #8]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d108      	bne.n	80121c4 <osSemaphoreNew+0x88>
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	68db      	ldr	r3, [r3, #12]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d104      	bne.n	80121c4 <osSemaphoreNew+0x88>
          mem = 0;
 80121ba:	2300      	movs	r3, #0
 80121bc:	623b      	str	r3, [r7, #32]
 80121be:	e001      	b.n	80121c4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80121c0:	2300      	movs	r3, #0
 80121c2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80121c4:	6a3b      	ldr	r3, [r7, #32]
 80121c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ca:	d04c      	beq.n	8012266 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	2b01      	cmp	r3, #1
 80121d0:	d128      	bne.n	8012224 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80121d2:	6a3b      	ldr	r3, [r7, #32]
 80121d4:	2b01      	cmp	r3, #1
 80121d6:	d10a      	bne.n	80121ee <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	689b      	ldr	r3, [r3, #8]
 80121dc:	2203      	movs	r2, #3
 80121de:	9200      	str	r2, [sp, #0]
 80121e0:	2200      	movs	r2, #0
 80121e2:	2100      	movs	r1, #0
 80121e4:	2001      	movs	r0, #1
 80121e6:	f000 ffdf 	bl	80131a8 <xQueueGenericCreateStatic>
 80121ea:	6278      	str	r0, [r7, #36]	; 0x24
 80121ec:	e005      	b.n	80121fa <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80121ee:	2203      	movs	r2, #3
 80121f0:	2100      	movs	r1, #0
 80121f2:	2001      	movs	r0, #1
 80121f4:	f001 f85a 	bl	80132ac <xQueueGenericCreate>
 80121f8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80121fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d022      	beq.n	8012246 <osSemaphoreNew+0x10a>
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d01f      	beq.n	8012246 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012206:	2300      	movs	r3, #0
 8012208:	2200      	movs	r2, #0
 801220a:	2100      	movs	r1, #0
 801220c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801220e:	f001 f925 	bl	801345c <xQueueGenericSend>
 8012212:	4603      	mov	r3, r0
 8012214:	2b01      	cmp	r3, #1
 8012216:	d016      	beq.n	8012246 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8012218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801221a:	f001 fddb 	bl	8013dd4 <vQueueDelete>
            hSemaphore = NULL;
 801221e:	2300      	movs	r3, #0
 8012220:	627b      	str	r3, [r7, #36]	; 0x24
 8012222:	e010      	b.n	8012246 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8012224:	6a3b      	ldr	r3, [r7, #32]
 8012226:	2b01      	cmp	r3, #1
 8012228:	d108      	bne.n	801223c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	689b      	ldr	r3, [r3, #8]
 801222e:	461a      	mov	r2, r3
 8012230:	68b9      	ldr	r1, [r7, #8]
 8012232:	68f8      	ldr	r0, [r7, #12]
 8012234:	f001 f89f 	bl	8013376 <xQueueCreateCountingSemaphoreStatic>
 8012238:	6278      	str	r0, [r7, #36]	; 0x24
 801223a:	e004      	b.n	8012246 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801223c:	68b9      	ldr	r1, [r7, #8]
 801223e:	68f8      	ldr	r0, [r7, #12]
 8012240:	f001 f8d4 	bl	80133ec <xQueueCreateCountingSemaphore>
 8012244:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8012246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012248:	2b00      	cmp	r3, #0
 801224a:	d00c      	beq.n	8012266 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d003      	beq.n	801225a <osSemaphoreNew+0x11e>
          name = attr->name;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	61fb      	str	r3, [r7, #28]
 8012258:	e001      	b.n	801225e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 801225a:	2300      	movs	r3, #0
 801225c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801225e:	69f9      	ldr	r1, [r7, #28]
 8012260:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012262:	f001 ff05 	bl	8014070 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8012266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012268:	4618      	mov	r0, r3
 801226a:	3728      	adds	r7, #40	; 0x28
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}
 8012270:	20023a68 	.word	0x20023a68

08012274 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8012274:	b580      	push	{r7, lr}
 8012276:	b088      	sub	sp, #32
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012282:	2300      	movs	r3, #0
 8012284:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8012286:	69bb      	ldr	r3, [r7, #24]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d103      	bne.n	8012294 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801228c:	f06f 0303 	mvn.w	r3, #3
 8012290:	61fb      	str	r3, [r7, #28]
 8012292:	e04b      	b.n	801232c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012294:	f3ef 8305 	mrs	r3, IPSR
 8012298:	617b      	str	r3, [r7, #20]
  return(result);
 801229a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801229c:	2b00      	cmp	r3, #0
 801229e:	d10f      	bne.n	80122c0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80122a0:	f3ef 8310 	mrs	r3, PRIMASK
 80122a4:	613b      	str	r3, [r7, #16]
  return(result);
 80122a6:	693b      	ldr	r3, [r7, #16]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d105      	bne.n	80122b8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80122ac:	f3ef 8311 	mrs	r3, BASEPRI
 80122b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d026      	beq.n	8012306 <osSemaphoreAcquire+0x92>
 80122b8:	4b1f      	ldr	r3, [pc, #124]	; (8012338 <osSemaphoreAcquire+0xc4>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	2b02      	cmp	r3, #2
 80122be:	d122      	bne.n	8012306 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d003      	beq.n	80122ce <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80122c6:	f06f 0303 	mvn.w	r3, #3
 80122ca:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80122cc:	e02d      	b.n	801232a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80122ce:	2300      	movs	r3, #0
 80122d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80122d2:	f107 0308 	add.w	r3, r7, #8
 80122d6:	461a      	mov	r2, r3
 80122d8:	2100      	movs	r1, #0
 80122da:	69b8      	ldr	r0, [r7, #24]
 80122dc:	f001 fcf4 	bl	8013cc8 <xQueueReceiveFromISR>
 80122e0:	4603      	mov	r3, r0
 80122e2:	2b01      	cmp	r3, #1
 80122e4:	d003      	beq.n	80122ee <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80122e6:	f06f 0302 	mvn.w	r3, #2
 80122ea:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80122ec:	e01d      	b.n	801232a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d01a      	beq.n	801232a <osSemaphoreAcquire+0xb6>
 80122f4:	4b11      	ldr	r3, [pc, #68]	; (801233c <osSemaphoreAcquire+0xc8>)
 80122f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122fa:	601a      	str	r2, [r3, #0]
 80122fc:	f3bf 8f4f 	dsb	sy
 8012300:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8012304:	e011      	b.n	801232a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8012306:	6839      	ldr	r1, [r7, #0]
 8012308:	69b8      	ldr	r0, [r7, #24]
 801230a:	f001 fbc9 	bl	8013aa0 <xQueueSemaphoreTake>
 801230e:	4603      	mov	r3, r0
 8012310:	2b01      	cmp	r3, #1
 8012312:	d00b      	beq.n	801232c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d003      	beq.n	8012322 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 801231a:	f06f 0301 	mvn.w	r3, #1
 801231e:	61fb      	str	r3, [r7, #28]
 8012320:	e004      	b.n	801232c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8012322:	f06f 0302 	mvn.w	r3, #2
 8012326:	61fb      	str	r3, [r7, #28]
 8012328:	e000      	b.n	801232c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 801232a:	bf00      	nop
      }
    }
  }

  return (stat);
 801232c:	69fb      	ldr	r3, [r7, #28]
}
 801232e:	4618      	mov	r0, r3
 8012330:	3720      	adds	r7, #32
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	20023a68 	.word	0x20023a68
 801233c:	e000ed04 	.word	0xe000ed04

08012340 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8012340:	b580      	push	{r7, lr}
 8012342:	b088      	sub	sp, #32
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801234c:	2300      	movs	r3, #0
 801234e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8012350:	69bb      	ldr	r3, [r7, #24]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d103      	bne.n	801235e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8012356:	f06f 0303 	mvn.w	r3, #3
 801235a:	61fb      	str	r3, [r7, #28]
 801235c:	e03e      	b.n	80123dc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801235e:	f3ef 8305 	mrs	r3, IPSR
 8012362:	617b      	str	r3, [r7, #20]
  return(result);
 8012364:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012366:	2b00      	cmp	r3, #0
 8012368:	d10f      	bne.n	801238a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801236a:	f3ef 8310 	mrs	r3, PRIMASK
 801236e:	613b      	str	r3, [r7, #16]
  return(result);
 8012370:	693b      	ldr	r3, [r7, #16]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d105      	bne.n	8012382 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012376:	f3ef 8311 	mrs	r3, BASEPRI
 801237a:	60fb      	str	r3, [r7, #12]
  return(result);
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d01e      	beq.n	80123c0 <osSemaphoreRelease+0x80>
 8012382:	4b19      	ldr	r3, [pc, #100]	; (80123e8 <osSemaphoreRelease+0xa8>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	2b02      	cmp	r3, #2
 8012388:	d11a      	bne.n	80123c0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 801238a:	2300      	movs	r3, #0
 801238c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801238e:	f107 0308 	add.w	r3, r7, #8
 8012392:	4619      	mov	r1, r3
 8012394:	69b8      	ldr	r0, [r7, #24]
 8012396:	f001 fa07 	bl	80137a8 <xQueueGiveFromISR>
 801239a:	4603      	mov	r3, r0
 801239c:	2b01      	cmp	r3, #1
 801239e:	d003      	beq.n	80123a8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80123a0:	f06f 0302 	mvn.w	r3, #2
 80123a4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80123a6:	e018      	b.n	80123da <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d015      	beq.n	80123da <osSemaphoreRelease+0x9a>
 80123ae:	4b0f      	ldr	r3, [pc, #60]	; (80123ec <osSemaphoreRelease+0xac>)
 80123b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123b4:	601a      	str	r2, [r3, #0]
 80123b6:	f3bf 8f4f 	dsb	sy
 80123ba:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80123be:	e00c      	b.n	80123da <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80123c0:	2300      	movs	r3, #0
 80123c2:	2200      	movs	r2, #0
 80123c4:	2100      	movs	r1, #0
 80123c6:	69b8      	ldr	r0, [r7, #24]
 80123c8:	f001 f848 	bl	801345c <xQueueGenericSend>
 80123cc:	4603      	mov	r3, r0
 80123ce:	2b01      	cmp	r3, #1
 80123d0:	d004      	beq.n	80123dc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80123d2:	f06f 0302 	mvn.w	r3, #2
 80123d6:	61fb      	str	r3, [r7, #28]
 80123d8:	e000      	b.n	80123dc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80123da:	bf00      	nop
    }
  }

  return (stat);
 80123dc:	69fb      	ldr	r3, [r7, #28]
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3720      	adds	r7, #32
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}
 80123e6:	bf00      	nop
 80123e8:	20023a68 	.word	0x20023a68
 80123ec:	e000ed04 	.word	0xe000ed04

080123f0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b08c      	sub	sp, #48	; 0x30
 80123f4:	af02      	add	r7, sp, #8
 80123f6:	60f8      	str	r0, [r7, #12]
 80123f8:	60b9      	str	r1, [r7, #8]
 80123fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80123fc:	2300      	movs	r3, #0
 80123fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012400:	f3ef 8305 	mrs	r3, IPSR
 8012404:	61bb      	str	r3, [r7, #24]
  return(result);
 8012406:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012408:	2b00      	cmp	r3, #0
 801240a:	d16f      	bne.n	80124ec <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801240c:	f3ef 8310 	mrs	r3, PRIMASK
 8012410:	617b      	str	r3, [r7, #20]
  return(result);
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d105      	bne.n	8012424 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012418:	f3ef 8311 	mrs	r3, BASEPRI
 801241c:	613b      	str	r3, [r7, #16]
  return(result);
 801241e:	693b      	ldr	r3, [r7, #16]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d003      	beq.n	801242c <osMessageQueueNew+0x3c>
 8012424:	4b34      	ldr	r3, [pc, #208]	; (80124f8 <osMessageQueueNew+0x108>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	2b02      	cmp	r3, #2
 801242a:	d05f      	beq.n	80124ec <osMessageQueueNew+0xfc>
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d05c      	beq.n	80124ec <osMessageQueueNew+0xfc>
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d059      	beq.n	80124ec <osMessageQueueNew+0xfc>
    mem = -1;
 8012438:	f04f 33ff 	mov.w	r3, #4294967295
 801243c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d029      	beq.n	8012498 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	689b      	ldr	r3, [r3, #8]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d012      	beq.n	8012472 <osMessageQueueNew+0x82>
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	68db      	ldr	r3, [r3, #12]
 8012450:	2b4f      	cmp	r3, #79	; 0x4f
 8012452:	d90e      	bls.n	8012472 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012458:	2b00      	cmp	r3, #0
 801245a:	d00a      	beq.n	8012472 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	695a      	ldr	r2, [r3, #20]
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	68b9      	ldr	r1, [r7, #8]
 8012464:	fb01 f303 	mul.w	r3, r1, r3
 8012468:	429a      	cmp	r2, r3
 801246a:	d302      	bcc.n	8012472 <osMessageQueueNew+0x82>
        mem = 1;
 801246c:	2301      	movs	r3, #1
 801246e:	623b      	str	r3, [r7, #32]
 8012470:	e014      	b.n	801249c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	689b      	ldr	r3, [r3, #8]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d110      	bne.n	801249c <osMessageQueueNew+0xac>
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	68db      	ldr	r3, [r3, #12]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d10c      	bne.n	801249c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012486:	2b00      	cmp	r3, #0
 8012488:	d108      	bne.n	801249c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	695b      	ldr	r3, [r3, #20]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d104      	bne.n	801249c <osMessageQueueNew+0xac>
          mem = 0;
 8012492:	2300      	movs	r3, #0
 8012494:	623b      	str	r3, [r7, #32]
 8012496:	e001      	b.n	801249c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8012498:	2300      	movs	r3, #0
 801249a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801249c:	6a3b      	ldr	r3, [r7, #32]
 801249e:	2b01      	cmp	r3, #1
 80124a0:	d10b      	bne.n	80124ba <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	691a      	ldr	r2, [r3, #16]
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	689b      	ldr	r3, [r3, #8]
 80124aa:	2100      	movs	r1, #0
 80124ac:	9100      	str	r1, [sp, #0]
 80124ae:	68b9      	ldr	r1, [r7, #8]
 80124b0:	68f8      	ldr	r0, [r7, #12]
 80124b2:	f000 fe79 	bl	80131a8 <xQueueGenericCreateStatic>
 80124b6:	6278      	str	r0, [r7, #36]	; 0x24
 80124b8:	e008      	b.n	80124cc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80124ba:	6a3b      	ldr	r3, [r7, #32]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d105      	bne.n	80124cc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80124c0:	2200      	movs	r2, #0
 80124c2:	68b9      	ldr	r1, [r7, #8]
 80124c4:	68f8      	ldr	r0, [r7, #12]
 80124c6:	f000 fef1 	bl	80132ac <xQueueGenericCreate>
 80124ca:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80124cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d00c      	beq.n	80124ec <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d003      	beq.n	80124e0 <osMessageQueueNew+0xf0>
        name = attr->name;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	61fb      	str	r3, [r7, #28]
 80124de:	e001      	b.n	80124e4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80124e0:	2300      	movs	r3, #0
 80124e2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80124e4:	69f9      	ldr	r1, [r7, #28]
 80124e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80124e8:	f001 fdc2 	bl	8014070 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80124ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3728      	adds	r7, #40	; 0x28
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}
 80124f6:	bf00      	nop
 80124f8:	20023a68 	.word	0x20023a68

080124fc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b08a      	sub	sp, #40	; 0x28
 8012500:	af00      	add	r7, sp, #0
 8012502:	60f8      	str	r0, [r7, #12]
 8012504:	60b9      	str	r1, [r7, #8]
 8012506:	603b      	str	r3, [r7, #0]
 8012508:	4613      	mov	r3, r2
 801250a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012510:	2300      	movs	r3, #0
 8012512:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012514:	f3ef 8305 	mrs	r3, IPSR
 8012518:	61fb      	str	r3, [r7, #28]
  return(result);
 801251a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801251c:	2b00      	cmp	r3, #0
 801251e:	d10f      	bne.n	8012540 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012520:	f3ef 8310 	mrs	r3, PRIMASK
 8012524:	61bb      	str	r3, [r7, #24]
  return(result);
 8012526:	69bb      	ldr	r3, [r7, #24]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d105      	bne.n	8012538 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801252c:	f3ef 8311 	mrs	r3, BASEPRI
 8012530:	617b      	str	r3, [r7, #20]
  return(result);
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d02c      	beq.n	8012592 <osMessageQueuePut+0x96>
 8012538:	4b28      	ldr	r3, [pc, #160]	; (80125dc <osMessageQueuePut+0xe0>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	2b02      	cmp	r3, #2
 801253e:	d128      	bne.n	8012592 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012540:	6a3b      	ldr	r3, [r7, #32]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d005      	beq.n	8012552 <osMessageQueuePut+0x56>
 8012546:	68bb      	ldr	r3, [r7, #8]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d002      	beq.n	8012552 <osMessageQueuePut+0x56>
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d003      	beq.n	801255a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8012552:	f06f 0303 	mvn.w	r3, #3
 8012556:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012558:	e039      	b.n	80125ce <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 801255a:	2300      	movs	r3, #0
 801255c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801255e:	f107 0210 	add.w	r2, r7, #16
 8012562:	2300      	movs	r3, #0
 8012564:	68b9      	ldr	r1, [r7, #8]
 8012566:	6a38      	ldr	r0, [r7, #32]
 8012568:	f001 f87e 	bl	8013668 <xQueueGenericSendFromISR>
 801256c:	4603      	mov	r3, r0
 801256e:	2b01      	cmp	r3, #1
 8012570:	d003      	beq.n	801257a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8012572:	f06f 0302 	mvn.w	r3, #2
 8012576:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012578:	e029      	b.n	80125ce <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 801257a:	693b      	ldr	r3, [r7, #16]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d026      	beq.n	80125ce <osMessageQueuePut+0xd2>
 8012580:	4b17      	ldr	r3, [pc, #92]	; (80125e0 <osMessageQueuePut+0xe4>)
 8012582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012586:	601a      	str	r2, [r3, #0]
 8012588:	f3bf 8f4f 	dsb	sy
 801258c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012590:	e01d      	b.n	80125ce <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012592:	6a3b      	ldr	r3, [r7, #32]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d002      	beq.n	801259e <osMessageQueuePut+0xa2>
 8012598:	68bb      	ldr	r3, [r7, #8]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d103      	bne.n	80125a6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 801259e:	f06f 0303 	mvn.w	r3, #3
 80125a2:	627b      	str	r3, [r7, #36]	; 0x24
 80125a4:	e014      	b.n	80125d0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80125a6:	2300      	movs	r3, #0
 80125a8:	683a      	ldr	r2, [r7, #0]
 80125aa:	68b9      	ldr	r1, [r7, #8]
 80125ac:	6a38      	ldr	r0, [r7, #32]
 80125ae:	f000 ff55 	bl	801345c <xQueueGenericSend>
 80125b2:	4603      	mov	r3, r0
 80125b4:	2b01      	cmp	r3, #1
 80125b6:	d00b      	beq.n	80125d0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d003      	beq.n	80125c6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80125be:	f06f 0301 	mvn.w	r3, #1
 80125c2:	627b      	str	r3, [r7, #36]	; 0x24
 80125c4:	e004      	b.n	80125d0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80125c6:	f06f 0302 	mvn.w	r3, #2
 80125ca:	627b      	str	r3, [r7, #36]	; 0x24
 80125cc:	e000      	b.n	80125d0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80125ce:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80125d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	3728      	adds	r7, #40	; 0x28
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}
 80125da:	bf00      	nop
 80125dc:	20023a68 	.word	0x20023a68
 80125e0:	e000ed04 	.word	0xe000ed04

080125e4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b08a      	sub	sp, #40	; 0x28
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	60f8      	str	r0, [r7, #12]
 80125ec:	60b9      	str	r1, [r7, #8]
 80125ee:	607a      	str	r2, [r7, #4]
 80125f0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80125f6:	2300      	movs	r3, #0
 80125f8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125fa:	f3ef 8305 	mrs	r3, IPSR
 80125fe:	61fb      	str	r3, [r7, #28]
  return(result);
 8012600:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012602:	2b00      	cmp	r3, #0
 8012604:	d10f      	bne.n	8012626 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012606:	f3ef 8310 	mrs	r3, PRIMASK
 801260a:	61bb      	str	r3, [r7, #24]
  return(result);
 801260c:	69bb      	ldr	r3, [r7, #24]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d105      	bne.n	801261e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012612:	f3ef 8311 	mrs	r3, BASEPRI
 8012616:	617b      	str	r3, [r7, #20]
  return(result);
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d02c      	beq.n	8012678 <osMessageQueueGet+0x94>
 801261e:	4b28      	ldr	r3, [pc, #160]	; (80126c0 <osMessageQueueGet+0xdc>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	2b02      	cmp	r3, #2
 8012624:	d128      	bne.n	8012678 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012626:	6a3b      	ldr	r3, [r7, #32]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d005      	beq.n	8012638 <osMessageQueueGet+0x54>
 801262c:	68bb      	ldr	r3, [r7, #8]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d002      	beq.n	8012638 <osMessageQueueGet+0x54>
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d003      	beq.n	8012640 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8012638:	f06f 0303 	mvn.w	r3, #3
 801263c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801263e:	e038      	b.n	80126b2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8012640:	2300      	movs	r3, #0
 8012642:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012644:	f107 0310 	add.w	r3, r7, #16
 8012648:	461a      	mov	r2, r3
 801264a:	68b9      	ldr	r1, [r7, #8]
 801264c:	6a38      	ldr	r0, [r7, #32]
 801264e:	f001 fb3b 	bl	8013cc8 <xQueueReceiveFromISR>
 8012652:	4603      	mov	r3, r0
 8012654:	2b01      	cmp	r3, #1
 8012656:	d003      	beq.n	8012660 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8012658:	f06f 0302 	mvn.w	r3, #2
 801265c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801265e:	e028      	b.n	80126b2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8012660:	693b      	ldr	r3, [r7, #16]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d025      	beq.n	80126b2 <osMessageQueueGet+0xce>
 8012666:	4b17      	ldr	r3, [pc, #92]	; (80126c4 <osMessageQueueGet+0xe0>)
 8012668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801266c:	601a      	str	r2, [r3, #0]
 801266e:	f3bf 8f4f 	dsb	sy
 8012672:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012676:	e01c      	b.n	80126b2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012678:	6a3b      	ldr	r3, [r7, #32]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d002      	beq.n	8012684 <osMessageQueueGet+0xa0>
 801267e:	68bb      	ldr	r3, [r7, #8]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d103      	bne.n	801268c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8012684:	f06f 0303 	mvn.w	r3, #3
 8012688:	627b      	str	r3, [r7, #36]	; 0x24
 801268a:	e013      	b.n	80126b4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801268c:	683a      	ldr	r2, [r7, #0]
 801268e:	68b9      	ldr	r1, [r7, #8]
 8012690:	6a38      	ldr	r0, [r7, #32]
 8012692:	f001 f91f 	bl	80138d4 <xQueueReceive>
 8012696:	4603      	mov	r3, r0
 8012698:	2b01      	cmp	r3, #1
 801269a:	d00b      	beq.n	80126b4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d003      	beq.n	80126aa <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80126a2:	f06f 0301 	mvn.w	r3, #1
 80126a6:	627b      	str	r3, [r7, #36]	; 0x24
 80126a8:	e004      	b.n	80126b4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80126aa:	f06f 0302 	mvn.w	r3, #2
 80126ae:	627b      	str	r3, [r7, #36]	; 0x24
 80126b0:	e000      	b.n	80126b4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80126b2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80126b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3728      	adds	r7, #40	; 0x28
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
 80126be:	bf00      	nop
 80126c0:	20023a68 	.word	0x20023a68
 80126c4:	e000ed04 	.word	0xe000ed04

080126c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80126c8:	b480      	push	{r7}
 80126ca:	b085      	sub	sp, #20
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	60f8      	str	r0, [r7, #12]
 80126d0:	60b9      	str	r1, [r7, #8]
 80126d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	4a07      	ldr	r2, [pc, #28]	; (80126f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80126d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	4a06      	ldr	r2, [pc, #24]	; (80126f8 <vApplicationGetIdleTaskMemory+0x30>)
 80126de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2280      	movs	r2, #128	; 0x80
 80126e4:	601a      	str	r2, [r3, #0]
}
 80126e6:	bf00      	nop
 80126e8:	3714      	adds	r7, #20
 80126ea:	46bd      	mov	sp, r7
 80126ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f0:	4770      	bx	lr
 80126f2:	bf00      	nop
 80126f4:	20023a6c 	.word	0x20023a6c
 80126f8:	20023ac8 	.word	0x20023ac8

080126fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80126fc:	b480      	push	{r7}
 80126fe:	b085      	sub	sp, #20
 8012700:	af00      	add	r7, sp, #0
 8012702:	60f8      	str	r0, [r7, #12]
 8012704:	60b9      	str	r1, [r7, #8]
 8012706:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	4a07      	ldr	r2, [pc, #28]	; (8012728 <vApplicationGetTimerTaskMemory+0x2c>)
 801270c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801270e:	68bb      	ldr	r3, [r7, #8]
 8012710:	4a06      	ldr	r2, [pc, #24]	; (801272c <vApplicationGetTimerTaskMemory+0x30>)
 8012712:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f44f 7280 	mov.w	r2, #256	; 0x100
 801271a:	601a      	str	r2, [r3, #0]
}
 801271c:	bf00      	nop
 801271e:	3714      	adds	r7, #20
 8012720:	46bd      	mov	sp, r7
 8012722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012726:	4770      	bx	lr
 8012728:	20023cc8 	.word	0x20023cc8
 801272c:	20023d24 	.word	0x20023d24

08012730 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b08a      	sub	sp, #40	; 0x28
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012738:	2300      	movs	r3, #0
 801273a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801273c:	f001 ff6a 	bl	8014614 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012740:	4b5b      	ldr	r3, [pc, #364]	; (80128b0 <pvPortMalloc+0x180>)
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d101      	bne.n	801274c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012748:	f000 f91a 	bl	8012980 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801274c:	4b59      	ldr	r3, [pc, #356]	; (80128b4 <pvPortMalloc+0x184>)
 801274e:	681a      	ldr	r2, [r3, #0]
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	4013      	ands	r3, r2
 8012754:	2b00      	cmp	r3, #0
 8012756:	f040 8092 	bne.w	801287e <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d01f      	beq.n	80127a0 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8012760:	2208      	movs	r2, #8
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	4413      	add	r3, r2
 8012766:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f003 0307 	and.w	r3, r3, #7
 801276e:	2b00      	cmp	r3, #0
 8012770:	d016      	beq.n	80127a0 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	f023 0307 	bic.w	r3, r3, #7
 8012778:	3308      	adds	r3, #8
 801277a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f003 0307 	and.w	r3, r3, #7
 8012782:	2b00      	cmp	r3, #0
 8012784:	d00c      	beq.n	80127a0 <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012786:	f04f 0330 	mov.w	r3, #48	; 0x30
 801278a:	b672      	cpsid	i
 801278c:	f383 8811 	msr	BASEPRI, r3
 8012790:	f3bf 8f6f 	isb	sy
 8012794:	f3bf 8f4f 	dsb	sy
 8012798:	b662      	cpsie	i
 801279a:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801279c:	bf00      	nop
 801279e:	e7fe      	b.n	801279e <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d06b      	beq.n	801287e <pvPortMalloc+0x14e>
 80127a6:	4b44      	ldr	r3, [pc, #272]	; (80128b8 <pvPortMalloc+0x188>)
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	687a      	ldr	r2, [r7, #4]
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d866      	bhi.n	801287e <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80127b0:	4b42      	ldr	r3, [pc, #264]	; (80128bc <pvPortMalloc+0x18c>)
 80127b2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80127b4:	4b41      	ldr	r3, [pc, #260]	; (80128bc <pvPortMalloc+0x18c>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80127ba:	e004      	b.n	80127c6 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80127bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127be:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80127c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80127c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c8:	685b      	ldr	r3, [r3, #4]
 80127ca:	687a      	ldr	r2, [r7, #4]
 80127cc:	429a      	cmp	r2, r3
 80127ce:	d903      	bls.n	80127d8 <pvPortMalloc+0xa8>
 80127d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d1f1      	bne.n	80127bc <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80127d8:	4b35      	ldr	r3, [pc, #212]	; (80128b0 <pvPortMalloc+0x180>)
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127de:	429a      	cmp	r2, r3
 80127e0:	d04d      	beq.n	801287e <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80127e2:	6a3b      	ldr	r3, [r7, #32]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	2208      	movs	r2, #8
 80127e8:	4413      	add	r3, r2
 80127ea:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80127ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ee:	681a      	ldr	r2, [r3, #0]
 80127f0:	6a3b      	ldr	r3, [r7, #32]
 80127f2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80127f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f6:	685a      	ldr	r2, [r3, #4]
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	1ad2      	subs	r2, r2, r3
 80127fc:	2308      	movs	r3, #8
 80127fe:	005b      	lsls	r3, r3, #1
 8012800:	429a      	cmp	r2, r3
 8012802:	d921      	bls.n	8012848 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	4413      	add	r3, r2
 801280a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801280c:	69bb      	ldr	r3, [r7, #24]
 801280e:	f003 0307 	and.w	r3, r3, #7
 8012812:	2b00      	cmp	r3, #0
 8012814:	d00c      	beq.n	8012830 <pvPortMalloc+0x100>
	__asm volatile
 8012816:	f04f 0330 	mov.w	r3, #48	; 0x30
 801281a:	b672      	cpsid	i
 801281c:	f383 8811 	msr	BASEPRI, r3
 8012820:	f3bf 8f6f 	isb	sy
 8012824:	f3bf 8f4f 	dsb	sy
 8012828:	b662      	cpsie	i
 801282a:	613b      	str	r3, [r7, #16]
}
 801282c:	bf00      	nop
 801282e:	e7fe      	b.n	801282e <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012832:	685a      	ldr	r2, [r3, #4]
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	1ad2      	subs	r2, r2, r3
 8012838:	69bb      	ldr	r3, [r7, #24]
 801283a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801283e:	687a      	ldr	r2, [r7, #4]
 8012840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012842:	69b8      	ldr	r0, [r7, #24]
 8012844:	f000 f8fe 	bl	8012a44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012848:	4b1b      	ldr	r3, [pc, #108]	; (80128b8 <pvPortMalloc+0x188>)
 801284a:	681a      	ldr	r2, [r3, #0]
 801284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801284e:	685b      	ldr	r3, [r3, #4]
 8012850:	1ad3      	subs	r3, r2, r3
 8012852:	4a19      	ldr	r2, [pc, #100]	; (80128b8 <pvPortMalloc+0x188>)
 8012854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012856:	4b18      	ldr	r3, [pc, #96]	; (80128b8 <pvPortMalloc+0x188>)
 8012858:	681a      	ldr	r2, [r3, #0]
 801285a:	4b19      	ldr	r3, [pc, #100]	; (80128c0 <pvPortMalloc+0x190>)
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	429a      	cmp	r2, r3
 8012860:	d203      	bcs.n	801286a <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012862:	4b15      	ldr	r3, [pc, #84]	; (80128b8 <pvPortMalloc+0x188>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	4a16      	ldr	r2, [pc, #88]	; (80128c0 <pvPortMalloc+0x190>)
 8012868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286c:	685a      	ldr	r2, [r3, #4]
 801286e:	4b11      	ldr	r3, [pc, #68]	; (80128b4 <pvPortMalloc+0x184>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	431a      	orrs	r2, r3
 8012874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287a:	2200      	movs	r2, #0
 801287c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801287e:	f001 fed7 	bl	8014630 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012882:	69fb      	ldr	r3, [r7, #28]
 8012884:	f003 0307 	and.w	r3, r3, #7
 8012888:	2b00      	cmp	r3, #0
 801288a:	d00c      	beq.n	80128a6 <pvPortMalloc+0x176>
	__asm volatile
 801288c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012890:	b672      	cpsid	i
 8012892:	f383 8811 	msr	BASEPRI, r3
 8012896:	f3bf 8f6f 	isb	sy
 801289a:	f3bf 8f4f 	dsb	sy
 801289e:	b662      	cpsie	i
 80128a0:	60fb      	str	r3, [r7, #12]
}
 80128a2:	bf00      	nop
 80128a4:	e7fe      	b.n	80128a4 <pvPortMalloc+0x174>
	return pvReturn;
 80128a6:	69fb      	ldr	r3, [r7, #28]
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	3728      	adds	r7, #40	; 0x28
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}
 80128b0:	2005612c 	.word	0x2005612c
 80128b4:	20056138 	.word	0x20056138
 80128b8:	20056130 	.word	0x20056130
 80128bc:	20056124 	.word	0x20056124
 80128c0:	20056134 	.word	0x20056134

080128c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b086      	sub	sp, #24
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d04c      	beq.n	8012970 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80128d6:	2308      	movs	r3, #8
 80128d8:	425b      	negs	r3, r3
 80128da:	697a      	ldr	r2, [r7, #20]
 80128dc:	4413      	add	r3, r2
 80128de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80128e0:	697b      	ldr	r3, [r7, #20]
 80128e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80128e4:	693b      	ldr	r3, [r7, #16]
 80128e6:	685a      	ldr	r2, [r3, #4]
 80128e8:	4b23      	ldr	r3, [pc, #140]	; (8012978 <vPortFree+0xb4>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	4013      	ands	r3, r2
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d10c      	bne.n	801290c <vPortFree+0x48>
	__asm volatile
 80128f2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80128f6:	b672      	cpsid	i
 80128f8:	f383 8811 	msr	BASEPRI, r3
 80128fc:	f3bf 8f6f 	isb	sy
 8012900:	f3bf 8f4f 	dsb	sy
 8012904:	b662      	cpsie	i
 8012906:	60fb      	str	r3, [r7, #12]
}
 8012908:	bf00      	nop
 801290a:	e7fe      	b.n	801290a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d00c      	beq.n	801292e <vPortFree+0x6a>
	__asm volatile
 8012914:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012918:	b672      	cpsid	i
 801291a:	f383 8811 	msr	BASEPRI, r3
 801291e:	f3bf 8f6f 	isb	sy
 8012922:	f3bf 8f4f 	dsb	sy
 8012926:	b662      	cpsie	i
 8012928:	60bb      	str	r3, [r7, #8]
}
 801292a:	bf00      	nop
 801292c:	e7fe      	b.n	801292c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801292e:	693b      	ldr	r3, [r7, #16]
 8012930:	685a      	ldr	r2, [r3, #4]
 8012932:	4b11      	ldr	r3, [pc, #68]	; (8012978 <vPortFree+0xb4>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	4013      	ands	r3, r2
 8012938:	2b00      	cmp	r3, #0
 801293a:	d019      	beq.n	8012970 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801293c:	693b      	ldr	r3, [r7, #16]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d115      	bne.n	8012970 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012944:	693b      	ldr	r3, [r7, #16]
 8012946:	685a      	ldr	r2, [r3, #4]
 8012948:	4b0b      	ldr	r3, [pc, #44]	; (8012978 <vPortFree+0xb4>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	43db      	mvns	r3, r3
 801294e:	401a      	ands	r2, r3
 8012950:	693b      	ldr	r3, [r7, #16]
 8012952:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012954:	f001 fe5e 	bl	8014614 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012958:	693b      	ldr	r3, [r7, #16]
 801295a:	685a      	ldr	r2, [r3, #4]
 801295c:	4b07      	ldr	r3, [pc, #28]	; (801297c <vPortFree+0xb8>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	4413      	add	r3, r2
 8012962:	4a06      	ldr	r2, [pc, #24]	; (801297c <vPortFree+0xb8>)
 8012964:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012966:	6938      	ldr	r0, [r7, #16]
 8012968:	f000 f86c 	bl	8012a44 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801296c:	f001 fe60 	bl	8014630 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012970:	bf00      	nop
 8012972:	3718      	adds	r7, #24
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}
 8012978:	20056138 	.word	0x20056138
 801297c:	20056130 	.word	0x20056130

08012980 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012980:	b480      	push	{r7}
 8012982:	b085      	sub	sp, #20
 8012984:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012986:	f44f 3348 	mov.w	r3, #204800	; 0x32000
 801298a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801298c:	4b27      	ldr	r3, [pc, #156]	; (8012a2c <prvHeapInit+0xac>)
 801298e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	f003 0307 	and.w	r3, r3, #7
 8012996:	2b00      	cmp	r3, #0
 8012998:	d00c      	beq.n	80129b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	3307      	adds	r3, #7
 801299e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	f023 0307 	bic.w	r3, r3, #7
 80129a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80129a8:	68ba      	ldr	r2, [r7, #8]
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	1ad3      	subs	r3, r2, r3
 80129ae:	4a1f      	ldr	r2, [pc, #124]	; (8012a2c <prvHeapInit+0xac>)
 80129b0:	4413      	add	r3, r2
 80129b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80129b8:	4a1d      	ldr	r2, [pc, #116]	; (8012a30 <prvHeapInit+0xb0>)
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80129be:	4b1c      	ldr	r3, [pc, #112]	; (8012a30 <prvHeapInit+0xb0>)
 80129c0:	2200      	movs	r2, #0
 80129c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	68ba      	ldr	r2, [r7, #8]
 80129c8:	4413      	add	r3, r2
 80129ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80129cc:	2208      	movs	r2, #8
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	1a9b      	subs	r3, r3, r2
 80129d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	f023 0307 	bic.w	r3, r3, #7
 80129da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	4a15      	ldr	r2, [pc, #84]	; (8012a34 <prvHeapInit+0xb4>)
 80129e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80129e2:	4b14      	ldr	r3, [pc, #80]	; (8012a34 <prvHeapInit+0xb4>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	2200      	movs	r2, #0
 80129e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80129ea:	4b12      	ldr	r3, [pc, #72]	; (8012a34 <prvHeapInit+0xb4>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	2200      	movs	r2, #0
 80129f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	68fa      	ldr	r2, [r7, #12]
 80129fa:	1ad2      	subs	r2, r2, r3
 80129fc:	683b      	ldr	r3, [r7, #0]
 80129fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012a00:	4b0c      	ldr	r3, [pc, #48]	; (8012a34 <prvHeapInit+0xb4>)
 8012a02:	681a      	ldr	r2, [r3, #0]
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	685b      	ldr	r3, [r3, #4]
 8012a0c:	4a0a      	ldr	r2, [pc, #40]	; (8012a38 <prvHeapInit+0xb8>)
 8012a0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	4a09      	ldr	r2, [pc, #36]	; (8012a3c <prvHeapInit+0xbc>)
 8012a16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012a18:	4b09      	ldr	r3, [pc, #36]	; (8012a40 <prvHeapInit+0xc0>)
 8012a1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012a1e:	601a      	str	r2, [r3, #0]
}
 8012a20:	bf00      	nop
 8012a22:	3714      	adds	r7, #20
 8012a24:	46bd      	mov	sp, r7
 8012a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2a:	4770      	bx	lr
 8012a2c:	20024124 	.word	0x20024124
 8012a30:	20056124 	.word	0x20056124
 8012a34:	2005612c 	.word	0x2005612c
 8012a38:	20056134 	.word	0x20056134
 8012a3c:	20056130 	.word	0x20056130
 8012a40:	20056138 	.word	0x20056138

08012a44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012a44:	b480      	push	{r7}
 8012a46:	b085      	sub	sp, #20
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012a4c:	4b28      	ldr	r3, [pc, #160]	; (8012af0 <prvInsertBlockIntoFreeList+0xac>)
 8012a4e:	60fb      	str	r3, [r7, #12]
 8012a50:	e002      	b.n	8012a58 <prvInsertBlockIntoFreeList+0x14>
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	60fb      	str	r3, [r7, #12]
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	d8f7      	bhi.n	8012a52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	685b      	ldr	r3, [r3, #4]
 8012a6a:	68ba      	ldr	r2, [r7, #8]
 8012a6c:	4413      	add	r3, r2
 8012a6e:	687a      	ldr	r2, [r7, #4]
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d108      	bne.n	8012a86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	685a      	ldr	r2, [r3, #4]
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	685b      	ldr	r3, [r3, #4]
 8012a7c:	441a      	add	r2, r3
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	685b      	ldr	r3, [r3, #4]
 8012a8e:	68ba      	ldr	r2, [r7, #8]
 8012a90:	441a      	add	r2, r3
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	429a      	cmp	r2, r3
 8012a98:	d118      	bne.n	8012acc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	681a      	ldr	r2, [r3, #0]
 8012a9e:	4b15      	ldr	r3, [pc, #84]	; (8012af4 <prvInsertBlockIntoFreeList+0xb0>)
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	d00d      	beq.n	8012ac2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	685a      	ldr	r2, [r3, #4]
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	685b      	ldr	r3, [r3, #4]
 8012ab0:	441a      	add	r2, r3
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	681a      	ldr	r2, [r3, #0]
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	601a      	str	r2, [r3, #0]
 8012ac0:	e008      	b.n	8012ad4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012ac2:	4b0c      	ldr	r3, [pc, #48]	; (8012af4 <prvInsertBlockIntoFreeList+0xb0>)
 8012ac4:	681a      	ldr	r2, [r3, #0]
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	601a      	str	r2, [r3, #0]
 8012aca:	e003      	b.n	8012ad4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	681a      	ldr	r2, [r3, #0]
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012ad4:	68fa      	ldr	r2, [r7, #12]
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	429a      	cmp	r2, r3
 8012ada:	d002      	beq.n	8012ae2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	687a      	ldr	r2, [r7, #4]
 8012ae0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ae2:	bf00      	nop
 8012ae4:	3714      	adds	r7, #20
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aec:	4770      	bx	lr
 8012aee:	bf00      	nop
 8012af0:	20056124 	.word	0x20056124
 8012af4:	2005612c 	.word	0x2005612c

08012af8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012af8:	b480      	push	{r7}
 8012afa:	b083      	sub	sp, #12
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f103 0208 	add.w	r2, r3, #8
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8012b10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f103 0208 	add.w	r2, r3, #8
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f103 0208 	add.w	r2, r3, #8
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	2200      	movs	r2, #0
 8012b2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012b2c:	bf00      	nop
 8012b2e:	370c      	adds	r7, #12
 8012b30:	46bd      	mov	sp, r7
 8012b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b36:	4770      	bx	lr

08012b38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012b38:	b480      	push	{r7}
 8012b3a:	b083      	sub	sp, #12
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2200      	movs	r2, #0
 8012b44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012b46:	bf00      	nop
 8012b48:	370c      	adds	r7, #12
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b50:	4770      	bx	lr

08012b52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012b52:	b480      	push	{r7}
 8012b54:	b085      	sub	sp, #20
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	6078      	str	r0, [r7, #4]
 8012b5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	685b      	ldr	r3, [r3, #4]
 8012b60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	68fa      	ldr	r2, [r7, #12]
 8012b66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	689a      	ldr	r2, [r3, #8]
 8012b6c:	683b      	ldr	r3, [r7, #0]
 8012b6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	689b      	ldr	r3, [r3, #8]
 8012b74:	683a      	ldr	r2, [r7, #0]
 8012b76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	683a      	ldr	r2, [r7, #0]
 8012b7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	687a      	ldr	r2, [r7, #4]
 8012b82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	1c5a      	adds	r2, r3, #1
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	601a      	str	r2, [r3, #0]
}
 8012b8e:	bf00      	nop
 8012b90:	3714      	adds	r7, #20
 8012b92:	46bd      	mov	sp, r7
 8012b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b98:	4770      	bx	lr

08012b9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012b9a:	b480      	push	{r7}
 8012b9c:	b085      	sub	sp, #20
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	6078      	str	r0, [r7, #4]
 8012ba2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bb0:	d103      	bne.n	8012bba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	691b      	ldr	r3, [r3, #16]
 8012bb6:	60fb      	str	r3, [r7, #12]
 8012bb8:	e00c      	b.n	8012bd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	3308      	adds	r3, #8
 8012bbe:	60fb      	str	r3, [r7, #12]
 8012bc0:	e002      	b.n	8012bc8 <vListInsert+0x2e>
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	685b      	ldr	r3, [r3, #4]
 8012bc6:	60fb      	str	r3, [r7, #12]
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	685b      	ldr	r3, [r3, #4]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	68ba      	ldr	r2, [r7, #8]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d2f6      	bcs.n	8012bc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	685a      	ldr	r2, [r3, #4]
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	685b      	ldr	r3, [r3, #4]
 8012be0:	683a      	ldr	r2, [r7, #0]
 8012be2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	68fa      	ldr	r2, [r7, #12]
 8012be8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	683a      	ldr	r2, [r7, #0]
 8012bee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	687a      	ldr	r2, [r7, #4]
 8012bf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	1c5a      	adds	r2, r3, #1
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	601a      	str	r2, [r3, #0]
}
 8012c00:	bf00      	nop
 8012c02:	3714      	adds	r7, #20
 8012c04:	46bd      	mov	sp, r7
 8012c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0a:	4770      	bx	lr

08012c0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	b085      	sub	sp, #20
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	691b      	ldr	r3, [r3, #16]
 8012c18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	685b      	ldr	r3, [r3, #4]
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	6892      	ldr	r2, [r2, #8]
 8012c22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	689b      	ldr	r3, [r3, #8]
 8012c28:	687a      	ldr	r2, [r7, #4]
 8012c2a:	6852      	ldr	r2, [r2, #4]
 8012c2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	685b      	ldr	r3, [r3, #4]
 8012c32:	687a      	ldr	r2, [r7, #4]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d103      	bne.n	8012c40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	689a      	ldr	r2, [r3, #8]
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2200      	movs	r2, #0
 8012c44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	1e5a      	subs	r2, r3, #1
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	681b      	ldr	r3, [r3, #0]
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3714      	adds	r7, #20
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5e:	4770      	bx	lr

08012c60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012c60:	b480      	push	{r7}
 8012c62:	b085      	sub	sp, #20
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	60f8      	str	r0, [r7, #12]
 8012c68:	60b9      	str	r1, [r7, #8]
 8012c6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	3b04      	subs	r3, #4
 8012c70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	3b04      	subs	r3, #4
 8012c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012c80:	68bb      	ldr	r3, [r7, #8]
 8012c82:	f023 0201 	bic.w	r2, r3, #1
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	3b04      	subs	r3, #4
 8012c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012c90:	4a0c      	ldr	r2, [pc, #48]	; (8012cc4 <pxPortInitialiseStack+0x64>)
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	3b14      	subs	r3, #20
 8012c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012c9c:	687a      	ldr	r2, [r7, #4]
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	3b04      	subs	r3, #4
 8012ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	f06f 0202 	mvn.w	r2, #2
 8012cae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	3b20      	subs	r3, #32
 8012cb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
}
 8012cb8:	4618      	mov	r0, r3
 8012cba:	3714      	adds	r7, #20
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc2:	4770      	bx	lr
 8012cc4:	08012cc9 	.word	0x08012cc9

08012cc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012cc8:	b480      	push	{r7}
 8012cca:	b085      	sub	sp, #20
 8012ccc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012cd2:	4b14      	ldr	r3, [pc, #80]	; (8012d24 <prvTaskExitError+0x5c>)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cda:	d00c      	beq.n	8012cf6 <prvTaskExitError+0x2e>
	__asm volatile
 8012cdc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012ce0:	b672      	cpsid	i
 8012ce2:	f383 8811 	msr	BASEPRI, r3
 8012ce6:	f3bf 8f6f 	isb	sy
 8012cea:	f3bf 8f4f 	dsb	sy
 8012cee:	b662      	cpsie	i
 8012cf0:	60fb      	str	r3, [r7, #12]
}
 8012cf2:	bf00      	nop
 8012cf4:	e7fe      	b.n	8012cf4 <prvTaskExitError+0x2c>
	__asm volatile
 8012cf6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012cfa:	b672      	cpsid	i
 8012cfc:	f383 8811 	msr	BASEPRI, r3
 8012d00:	f3bf 8f6f 	isb	sy
 8012d04:	f3bf 8f4f 	dsb	sy
 8012d08:	b662      	cpsie	i
 8012d0a:	60bb      	str	r3, [r7, #8]
}
 8012d0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012d0e:	bf00      	nop
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d0fc      	beq.n	8012d10 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012d16:	bf00      	nop
 8012d18:	bf00      	nop
 8012d1a:	3714      	adds	r7, #20
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d22:	4770      	bx	lr
 8012d24:	20000020 	.word	0x20000020
	...

08012d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012d30:	4b07      	ldr	r3, [pc, #28]	; (8012d50 <pxCurrentTCBConst2>)
 8012d32:	6819      	ldr	r1, [r3, #0]
 8012d34:	6808      	ldr	r0, [r1, #0]
 8012d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d3a:	f380 8809 	msr	PSP, r0
 8012d3e:	f3bf 8f6f 	isb	sy
 8012d42:	f04f 0000 	mov.w	r0, #0
 8012d46:	f380 8811 	msr	BASEPRI, r0
 8012d4a:	4770      	bx	lr
 8012d4c:	f3af 8000 	nop.w

08012d50 <pxCurrentTCBConst2>:
 8012d50:	20056144 	.word	0x20056144
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012d54:	bf00      	nop
 8012d56:	bf00      	nop

08012d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012d58:	4808      	ldr	r0, [pc, #32]	; (8012d7c <prvPortStartFirstTask+0x24>)
 8012d5a:	6800      	ldr	r0, [r0, #0]
 8012d5c:	6800      	ldr	r0, [r0, #0]
 8012d5e:	f380 8808 	msr	MSP, r0
 8012d62:	f04f 0000 	mov.w	r0, #0
 8012d66:	f380 8814 	msr	CONTROL, r0
 8012d6a:	b662      	cpsie	i
 8012d6c:	b661      	cpsie	f
 8012d6e:	f3bf 8f4f 	dsb	sy
 8012d72:	f3bf 8f6f 	isb	sy
 8012d76:	df00      	svc	0
 8012d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012d7a:	bf00      	nop
 8012d7c:	e000ed08 	.word	0xe000ed08

08012d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b084      	sub	sp, #16
 8012d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012d86:	4b37      	ldr	r3, [pc, #220]	; (8012e64 <xPortStartScheduler+0xe4>)
 8012d88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	781b      	ldrb	r3, [r3, #0]
 8012d8e:	b2db      	uxtb	r3, r3
 8012d90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	22ff      	movs	r2, #255	; 0xff
 8012d96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	781b      	ldrb	r3, [r3, #0]
 8012d9c:	b2db      	uxtb	r3, r3
 8012d9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012da0:	78fb      	ldrb	r3, [r7, #3]
 8012da2:	b2db      	uxtb	r3, r3
 8012da4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012da8:	b2da      	uxtb	r2, r3
 8012daa:	4b2f      	ldr	r3, [pc, #188]	; (8012e68 <xPortStartScheduler+0xe8>)
 8012dac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012dae:	4b2f      	ldr	r3, [pc, #188]	; (8012e6c <xPortStartScheduler+0xec>)
 8012db0:	2207      	movs	r2, #7
 8012db2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012db4:	e009      	b.n	8012dca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012db6:	4b2d      	ldr	r3, [pc, #180]	; (8012e6c <xPortStartScheduler+0xec>)
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	3b01      	subs	r3, #1
 8012dbc:	4a2b      	ldr	r2, [pc, #172]	; (8012e6c <xPortStartScheduler+0xec>)
 8012dbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012dc0:	78fb      	ldrb	r3, [r7, #3]
 8012dc2:	b2db      	uxtb	r3, r3
 8012dc4:	005b      	lsls	r3, r3, #1
 8012dc6:	b2db      	uxtb	r3, r3
 8012dc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012dca:	78fb      	ldrb	r3, [r7, #3]
 8012dcc:	b2db      	uxtb	r3, r3
 8012dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012dd2:	2b80      	cmp	r3, #128	; 0x80
 8012dd4:	d0ef      	beq.n	8012db6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012dd6:	4b25      	ldr	r3, [pc, #148]	; (8012e6c <xPortStartScheduler+0xec>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	f1c3 0307 	rsb	r3, r3, #7
 8012dde:	2b04      	cmp	r3, #4
 8012de0:	d00c      	beq.n	8012dfc <xPortStartScheduler+0x7c>
	__asm volatile
 8012de2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012de6:	b672      	cpsid	i
 8012de8:	f383 8811 	msr	BASEPRI, r3
 8012dec:	f3bf 8f6f 	isb	sy
 8012df0:	f3bf 8f4f 	dsb	sy
 8012df4:	b662      	cpsie	i
 8012df6:	60bb      	str	r3, [r7, #8]
}
 8012df8:	bf00      	nop
 8012dfa:	e7fe      	b.n	8012dfa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012dfc:	4b1b      	ldr	r3, [pc, #108]	; (8012e6c <xPortStartScheduler+0xec>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	021b      	lsls	r3, r3, #8
 8012e02:	4a1a      	ldr	r2, [pc, #104]	; (8012e6c <xPortStartScheduler+0xec>)
 8012e04:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012e06:	4b19      	ldr	r3, [pc, #100]	; (8012e6c <xPortStartScheduler+0xec>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012e0e:	4a17      	ldr	r2, [pc, #92]	; (8012e6c <xPortStartScheduler+0xec>)
 8012e10:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	b2da      	uxtb	r2, r3
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012e1a:	4b15      	ldr	r3, [pc, #84]	; (8012e70 <xPortStartScheduler+0xf0>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	4a14      	ldr	r2, [pc, #80]	; (8012e70 <xPortStartScheduler+0xf0>)
 8012e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012e24:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012e26:	4b12      	ldr	r3, [pc, #72]	; (8012e70 <xPortStartScheduler+0xf0>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	4a11      	ldr	r2, [pc, #68]	; (8012e70 <xPortStartScheduler+0xf0>)
 8012e2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012e30:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012e32:	f000 f8dd 	bl	8012ff0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012e36:	4b0f      	ldr	r3, [pc, #60]	; (8012e74 <xPortStartScheduler+0xf4>)
 8012e38:	2200      	movs	r2, #0
 8012e3a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012e3c:	f000 f8fc 	bl	8013038 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012e40:	4b0d      	ldr	r3, [pc, #52]	; (8012e78 <xPortStartScheduler+0xf8>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	4a0c      	ldr	r2, [pc, #48]	; (8012e78 <xPortStartScheduler+0xf8>)
 8012e46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012e4a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012e4c:	f7ff ff84 	bl	8012d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012e50:	f001 fd5a 	bl	8014908 <vTaskSwitchContext>
	prvTaskExitError();
 8012e54:	f7ff ff38 	bl	8012cc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012e58:	2300      	movs	r3, #0
}
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	3710      	adds	r7, #16
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}
 8012e62:	bf00      	nop
 8012e64:	e000e400 	.word	0xe000e400
 8012e68:	2005613c 	.word	0x2005613c
 8012e6c:	20056140 	.word	0x20056140
 8012e70:	e000ed20 	.word	0xe000ed20
 8012e74:	20000020 	.word	0x20000020
 8012e78:	e000ef34 	.word	0xe000ef34

08012e7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012e7c:	b480      	push	{r7}
 8012e7e:	b083      	sub	sp, #12
 8012e80:	af00      	add	r7, sp, #0
	__asm volatile
 8012e82:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012e86:	b672      	cpsid	i
 8012e88:	f383 8811 	msr	BASEPRI, r3
 8012e8c:	f3bf 8f6f 	isb	sy
 8012e90:	f3bf 8f4f 	dsb	sy
 8012e94:	b662      	cpsie	i
 8012e96:	607b      	str	r3, [r7, #4]
}
 8012e98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012e9a:	4b10      	ldr	r3, [pc, #64]	; (8012edc <vPortEnterCritical+0x60>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	3301      	adds	r3, #1
 8012ea0:	4a0e      	ldr	r2, [pc, #56]	; (8012edc <vPortEnterCritical+0x60>)
 8012ea2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012ea4:	4b0d      	ldr	r3, [pc, #52]	; (8012edc <vPortEnterCritical+0x60>)
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	d111      	bne.n	8012ed0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012eac:	4b0c      	ldr	r3, [pc, #48]	; (8012ee0 <vPortEnterCritical+0x64>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	b2db      	uxtb	r3, r3
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d00c      	beq.n	8012ed0 <vPortEnterCritical+0x54>
	__asm volatile
 8012eb6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012eba:	b672      	cpsid	i
 8012ebc:	f383 8811 	msr	BASEPRI, r3
 8012ec0:	f3bf 8f6f 	isb	sy
 8012ec4:	f3bf 8f4f 	dsb	sy
 8012ec8:	b662      	cpsie	i
 8012eca:	603b      	str	r3, [r7, #0]
}
 8012ecc:	bf00      	nop
 8012ece:	e7fe      	b.n	8012ece <vPortEnterCritical+0x52>
	}
}
 8012ed0:	bf00      	nop
 8012ed2:	370c      	adds	r7, #12
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eda:	4770      	bx	lr
 8012edc:	20000020 	.word	0x20000020
 8012ee0:	e000ed04 	.word	0xe000ed04

08012ee4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012ee4:	b480      	push	{r7}
 8012ee6:	b083      	sub	sp, #12
 8012ee8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012eea:	4b13      	ldr	r3, [pc, #76]	; (8012f38 <vPortExitCritical+0x54>)
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d10c      	bne.n	8012f0c <vPortExitCritical+0x28>
	__asm volatile
 8012ef2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012ef6:	b672      	cpsid	i
 8012ef8:	f383 8811 	msr	BASEPRI, r3
 8012efc:	f3bf 8f6f 	isb	sy
 8012f00:	f3bf 8f4f 	dsb	sy
 8012f04:	b662      	cpsie	i
 8012f06:	607b      	str	r3, [r7, #4]
}
 8012f08:	bf00      	nop
 8012f0a:	e7fe      	b.n	8012f0a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012f0c:	4b0a      	ldr	r3, [pc, #40]	; (8012f38 <vPortExitCritical+0x54>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	3b01      	subs	r3, #1
 8012f12:	4a09      	ldr	r2, [pc, #36]	; (8012f38 <vPortExitCritical+0x54>)
 8012f14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012f16:	4b08      	ldr	r3, [pc, #32]	; (8012f38 <vPortExitCritical+0x54>)
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d105      	bne.n	8012f2a <vPortExitCritical+0x46>
 8012f1e:	2300      	movs	r3, #0
 8012f20:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012f28:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012f2a:	bf00      	nop
 8012f2c:	370c      	adds	r7, #12
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f34:	4770      	bx	lr
 8012f36:	bf00      	nop
 8012f38:	20000020 	.word	0x20000020
 8012f3c:	00000000 	.word	0x00000000

08012f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012f40:	f3ef 8009 	mrs	r0, PSP
 8012f44:	f3bf 8f6f 	isb	sy
 8012f48:	4b15      	ldr	r3, [pc, #84]	; (8012fa0 <pxCurrentTCBConst>)
 8012f4a:	681a      	ldr	r2, [r3, #0]
 8012f4c:	f01e 0f10 	tst.w	lr, #16
 8012f50:	bf08      	it	eq
 8012f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f5a:	6010      	str	r0, [r2, #0]
 8012f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012f60:	f04f 0030 	mov.w	r0, #48	; 0x30
 8012f64:	b672      	cpsid	i
 8012f66:	f380 8811 	msr	BASEPRI, r0
 8012f6a:	f3bf 8f4f 	dsb	sy
 8012f6e:	f3bf 8f6f 	isb	sy
 8012f72:	b662      	cpsie	i
 8012f74:	f001 fcc8 	bl	8014908 <vTaskSwitchContext>
 8012f78:	f04f 0000 	mov.w	r0, #0
 8012f7c:	f380 8811 	msr	BASEPRI, r0
 8012f80:	bc09      	pop	{r0, r3}
 8012f82:	6819      	ldr	r1, [r3, #0]
 8012f84:	6808      	ldr	r0, [r1, #0]
 8012f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f8a:	f01e 0f10 	tst.w	lr, #16
 8012f8e:	bf08      	it	eq
 8012f90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012f94:	f380 8809 	msr	PSP, r0
 8012f98:	f3bf 8f6f 	isb	sy
 8012f9c:	4770      	bx	lr
 8012f9e:	bf00      	nop

08012fa0 <pxCurrentTCBConst>:
 8012fa0:	20056144 	.word	0x20056144
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012fa4:	bf00      	nop
 8012fa6:	bf00      	nop

08012fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
	__asm volatile
 8012fae:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012fb2:	b672      	cpsid	i
 8012fb4:	f383 8811 	msr	BASEPRI, r3
 8012fb8:	f3bf 8f6f 	isb	sy
 8012fbc:	f3bf 8f4f 	dsb	sy
 8012fc0:	b662      	cpsie	i
 8012fc2:	607b      	str	r3, [r7, #4]
}
 8012fc4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012fc6:	f001 fbe3 	bl	8014790 <xTaskIncrementTick>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d003      	beq.n	8012fd8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012fd0:	4b06      	ldr	r3, [pc, #24]	; (8012fec <SysTick_Handler+0x44>)
 8012fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fd6:	601a      	str	r2, [r3, #0]
 8012fd8:	2300      	movs	r3, #0
 8012fda:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	f383 8811 	msr	BASEPRI, r3
}
 8012fe2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012fe4:	bf00      	nop
 8012fe6:	3708      	adds	r7, #8
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}
 8012fec:	e000ed04 	.word	0xe000ed04

08012ff0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012ff0:	b480      	push	{r7}
 8012ff2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012ff4:	4b0b      	ldr	r3, [pc, #44]	; (8013024 <vPortSetupTimerInterrupt+0x34>)
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012ffa:	4b0b      	ldr	r3, [pc, #44]	; (8013028 <vPortSetupTimerInterrupt+0x38>)
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013000:	4b0a      	ldr	r3, [pc, #40]	; (801302c <vPortSetupTimerInterrupt+0x3c>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	4a0a      	ldr	r2, [pc, #40]	; (8013030 <vPortSetupTimerInterrupt+0x40>)
 8013006:	fba2 2303 	umull	r2, r3, r2, r3
 801300a:	099b      	lsrs	r3, r3, #6
 801300c:	4a09      	ldr	r2, [pc, #36]	; (8013034 <vPortSetupTimerInterrupt+0x44>)
 801300e:	3b01      	subs	r3, #1
 8013010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013012:	4b04      	ldr	r3, [pc, #16]	; (8013024 <vPortSetupTimerInterrupt+0x34>)
 8013014:	2207      	movs	r2, #7
 8013016:	601a      	str	r2, [r3, #0]
}
 8013018:	bf00      	nop
 801301a:	46bd      	mov	sp, r7
 801301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013020:	4770      	bx	lr
 8013022:	bf00      	nop
 8013024:	e000e010 	.word	0xe000e010
 8013028:	e000e018 	.word	0xe000e018
 801302c:	20000014 	.word	0x20000014
 8013030:	10624dd3 	.word	0x10624dd3
 8013034:	e000e014 	.word	0xe000e014

08013038 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013038:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013048 <vPortEnableVFP+0x10>
 801303c:	6801      	ldr	r1, [r0, #0]
 801303e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013042:	6001      	str	r1, [r0, #0]
 8013044:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013046:	bf00      	nop
 8013048:	e000ed88 	.word	0xe000ed88

0801304c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801304c:	b480      	push	{r7}
 801304e:	b085      	sub	sp, #20
 8013050:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013052:	f3ef 8305 	mrs	r3, IPSR
 8013056:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	2b0f      	cmp	r3, #15
 801305c:	d916      	bls.n	801308c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801305e:	4a19      	ldr	r2, [pc, #100]	; (80130c4 <vPortValidateInterruptPriority+0x78>)
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	4413      	add	r3, r2
 8013064:	781b      	ldrb	r3, [r3, #0]
 8013066:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013068:	4b17      	ldr	r3, [pc, #92]	; (80130c8 <vPortValidateInterruptPriority+0x7c>)
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	7afa      	ldrb	r2, [r7, #11]
 801306e:	429a      	cmp	r2, r3
 8013070:	d20c      	bcs.n	801308c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8013072:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013076:	b672      	cpsid	i
 8013078:	f383 8811 	msr	BASEPRI, r3
 801307c:	f3bf 8f6f 	isb	sy
 8013080:	f3bf 8f4f 	dsb	sy
 8013084:	b662      	cpsie	i
 8013086:	607b      	str	r3, [r7, #4]
}
 8013088:	bf00      	nop
 801308a:	e7fe      	b.n	801308a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801308c:	4b0f      	ldr	r3, [pc, #60]	; (80130cc <vPortValidateInterruptPriority+0x80>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013094:	4b0e      	ldr	r3, [pc, #56]	; (80130d0 <vPortValidateInterruptPriority+0x84>)
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	429a      	cmp	r2, r3
 801309a:	d90c      	bls.n	80130b6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801309c:	f04f 0330 	mov.w	r3, #48	; 0x30
 80130a0:	b672      	cpsid	i
 80130a2:	f383 8811 	msr	BASEPRI, r3
 80130a6:	f3bf 8f6f 	isb	sy
 80130aa:	f3bf 8f4f 	dsb	sy
 80130ae:	b662      	cpsie	i
 80130b0:	603b      	str	r3, [r7, #0]
}
 80130b2:	bf00      	nop
 80130b4:	e7fe      	b.n	80130b4 <vPortValidateInterruptPriority+0x68>
	}
 80130b6:	bf00      	nop
 80130b8:	3714      	adds	r7, #20
 80130ba:	46bd      	mov	sp, r7
 80130bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c0:	4770      	bx	lr
 80130c2:	bf00      	nop
 80130c4:	e000e3f0 	.word	0xe000e3f0
 80130c8:	2005613c 	.word	0x2005613c
 80130cc:	e000ed0c 	.word	0xe000ed0c
 80130d0:	20056140 	.word	0x20056140

080130d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b084      	sub	sp, #16
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
 80130dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d10c      	bne.n	8013102 <xQueueGenericReset+0x2e>
	__asm volatile
 80130e8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80130ec:	b672      	cpsid	i
 80130ee:	f383 8811 	msr	BASEPRI, r3
 80130f2:	f3bf 8f6f 	isb	sy
 80130f6:	f3bf 8f4f 	dsb	sy
 80130fa:	b662      	cpsie	i
 80130fc:	60bb      	str	r3, [r7, #8]
}
 80130fe:	bf00      	nop
 8013100:	e7fe      	b.n	8013100 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8013102:	f7ff febb 	bl	8012e7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	681a      	ldr	r2, [r3, #0]
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801310e:	68f9      	ldr	r1, [r7, #12]
 8013110:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013112:	fb01 f303 	mul.w	r3, r1, r3
 8013116:	441a      	add	r2, r3
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	2200      	movs	r2, #0
 8013120:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	681a      	ldr	r2, [r3, #0]
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	681a      	ldr	r2, [r3, #0]
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013132:	3b01      	subs	r3, #1
 8013134:	68f9      	ldr	r1, [r7, #12]
 8013136:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013138:	fb01 f303 	mul.w	r3, r1, r3
 801313c:	441a      	add	r2, r3
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	22ff      	movs	r2, #255	; 0xff
 8013146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	22ff      	movs	r2, #255	; 0xff
 801314e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d114      	bne.n	8013182 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	691b      	ldr	r3, [r3, #16]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d01a      	beq.n	8013196 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	3310      	adds	r3, #16
 8013164:	4618      	mov	r0, r3
 8013166:	f001 fc83 	bl	8014a70 <xTaskRemoveFromEventList>
 801316a:	4603      	mov	r3, r0
 801316c:	2b00      	cmp	r3, #0
 801316e:	d012      	beq.n	8013196 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013170:	4b0c      	ldr	r3, [pc, #48]	; (80131a4 <xQueueGenericReset+0xd0>)
 8013172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013176:	601a      	str	r2, [r3, #0]
 8013178:	f3bf 8f4f 	dsb	sy
 801317c:	f3bf 8f6f 	isb	sy
 8013180:	e009      	b.n	8013196 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	3310      	adds	r3, #16
 8013186:	4618      	mov	r0, r3
 8013188:	f7ff fcb6 	bl	8012af8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	3324      	adds	r3, #36	; 0x24
 8013190:	4618      	mov	r0, r3
 8013192:	f7ff fcb1 	bl	8012af8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013196:	f7ff fea5 	bl	8012ee4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801319a:	2301      	movs	r3, #1
}
 801319c:	4618      	mov	r0, r3
 801319e:	3710      	adds	r7, #16
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	e000ed04 	.word	0xe000ed04

080131a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b08e      	sub	sp, #56	; 0x38
 80131ac:	af02      	add	r7, sp, #8
 80131ae:	60f8      	str	r0, [r7, #12]
 80131b0:	60b9      	str	r1, [r7, #8]
 80131b2:	607a      	str	r2, [r7, #4]
 80131b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d10c      	bne.n	80131d6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80131bc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80131c0:	b672      	cpsid	i
 80131c2:	f383 8811 	msr	BASEPRI, r3
 80131c6:	f3bf 8f6f 	isb	sy
 80131ca:	f3bf 8f4f 	dsb	sy
 80131ce:	b662      	cpsie	i
 80131d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80131d2:	bf00      	nop
 80131d4:	e7fe      	b.n	80131d4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d10c      	bne.n	80131f6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80131dc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80131e0:	b672      	cpsid	i
 80131e2:	f383 8811 	msr	BASEPRI, r3
 80131e6:	f3bf 8f6f 	isb	sy
 80131ea:	f3bf 8f4f 	dsb	sy
 80131ee:	b662      	cpsie	i
 80131f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80131f2:	bf00      	nop
 80131f4:	e7fe      	b.n	80131f4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d002      	beq.n	8013202 <xQueueGenericCreateStatic+0x5a>
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d001      	beq.n	8013206 <xQueueGenericCreateStatic+0x5e>
 8013202:	2301      	movs	r3, #1
 8013204:	e000      	b.n	8013208 <xQueueGenericCreateStatic+0x60>
 8013206:	2300      	movs	r3, #0
 8013208:	2b00      	cmp	r3, #0
 801320a:	d10c      	bne.n	8013226 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 801320c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013210:	b672      	cpsid	i
 8013212:	f383 8811 	msr	BASEPRI, r3
 8013216:	f3bf 8f6f 	isb	sy
 801321a:	f3bf 8f4f 	dsb	sy
 801321e:	b662      	cpsie	i
 8013220:	623b      	str	r3, [r7, #32]
}
 8013222:	bf00      	nop
 8013224:	e7fe      	b.n	8013224 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d102      	bne.n	8013232 <xQueueGenericCreateStatic+0x8a>
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d101      	bne.n	8013236 <xQueueGenericCreateStatic+0x8e>
 8013232:	2301      	movs	r3, #1
 8013234:	e000      	b.n	8013238 <xQueueGenericCreateStatic+0x90>
 8013236:	2300      	movs	r3, #0
 8013238:	2b00      	cmp	r3, #0
 801323a:	d10c      	bne.n	8013256 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 801323c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013240:	b672      	cpsid	i
 8013242:	f383 8811 	msr	BASEPRI, r3
 8013246:	f3bf 8f6f 	isb	sy
 801324a:	f3bf 8f4f 	dsb	sy
 801324e:	b662      	cpsie	i
 8013250:	61fb      	str	r3, [r7, #28]
}
 8013252:	bf00      	nop
 8013254:	e7fe      	b.n	8013254 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013256:	2350      	movs	r3, #80	; 0x50
 8013258:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801325a:	697b      	ldr	r3, [r7, #20]
 801325c:	2b50      	cmp	r3, #80	; 0x50
 801325e:	d00c      	beq.n	801327a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8013260:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013264:	b672      	cpsid	i
 8013266:	f383 8811 	msr	BASEPRI, r3
 801326a:	f3bf 8f6f 	isb	sy
 801326e:	f3bf 8f4f 	dsb	sy
 8013272:	b662      	cpsie	i
 8013274:	61bb      	str	r3, [r7, #24]
}
 8013276:	bf00      	nop
 8013278:	e7fe      	b.n	8013278 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801327a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013282:	2b00      	cmp	r3, #0
 8013284:	d00d      	beq.n	80132a2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013288:	2201      	movs	r2, #1
 801328a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801328e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013294:	9300      	str	r3, [sp, #0]
 8013296:	4613      	mov	r3, r2
 8013298:	687a      	ldr	r2, [r7, #4]
 801329a:	68b9      	ldr	r1, [r7, #8]
 801329c:	68f8      	ldr	r0, [r7, #12]
 801329e:	f000 f847 	bl	8013330 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80132a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80132a4:	4618      	mov	r0, r3
 80132a6:	3730      	adds	r7, #48	; 0x30
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}

080132ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b08a      	sub	sp, #40	; 0x28
 80132b0:	af02      	add	r7, sp, #8
 80132b2:	60f8      	str	r0, [r7, #12]
 80132b4:	60b9      	str	r1, [r7, #8]
 80132b6:	4613      	mov	r3, r2
 80132b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d10c      	bne.n	80132da <xQueueGenericCreate+0x2e>
	__asm volatile
 80132c0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80132c4:	b672      	cpsid	i
 80132c6:	f383 8811 	msr	BASEPRI, r3
 80132ca:	f3bf 8f6f 	isb	sy
 80132ce:	f3bf 8f4f 	dsb	sy
 80132d2:	b662      	cpsie	i
 80132d4:	613b      	str	r3, [r7, #16]
}
 80132d6:	bf00      	nop
 80132d8:	e7fe      	b.n	80132d8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d102      	bne.n	80132e6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80132e0:	2300      	movs	r3, #0
 80132e2:	61fb      	str	r3, [r7, #28]
 80132e4:	e004      	b.n	80132f0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	68ba      	ldr	r2, [r7, #8]
 80132ea:	fb02 f303 	mul.w	r3, r2, r3
 80132ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80132f0:	69fb      	ldr	r3, [r7, #28]
 80132f2:	3350      	adds	r3, #80	; 0x50
 80132f4:	4618      	mov	r0, r3
 80132f6:	f7ff fa1b 	bl	8012730 <pvPortMalloc>
 80132fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80132fc:	69bb      	ldr	r3, [r7, #24]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d011      	beq.n	8013326 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013302:	69bb      	ldr	r3, [r7, #24]
 8013304:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	3350      	adds	r3, #80	; 0x50
 801330a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801330c:	69bb      	ldr	r3, [r7, #24]
 801330e:	2200      	movs	r2, #0
 8013310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013314:	79fa      	ldrb	r2, [r7, #7]
 8013316:	69bb      	ldr	r3, [r7, #24]
 8013318:	9300      	str	r3, [sp, #0]
 801331a:	4613      	mov	r3, r2
 801331c:	697a      	ldr	r2, [r7, #20]
 801331e:	68b9      	ldr	r1, [r7, #8]
 8013320:	68f8      	ldr	r0, [r7, #12]
 8013322:	f000 f805 	bl	8013330 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013326:	69bb      	ldr	r3, [r7, #24]
	}
 8013328:	4618      	mov	r0, r3
 801332a:	3720      	adds	r7, #32
 801332c:	46bd      	mov	sp, r7
 801332e:	bd80      	pop	{r7, pc}

08013330 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b084      	sub	sp, #16
 8013334:	af00      	add	r7, sp, #0
 8013336:	60f8      	str	r0, [r7, #12]
 8013338:	60b9      	str	r1, [r7, #8]
 801333a:	607a      	str	r2, [r7, #4]
 801333c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d103      	bne.n	801334c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013344:	69bb      	ldr	r3, [r7, #24]
 8013346:	69ba      	ldr	r2, [r7, #24]
 8013348:	601a      	str	r2, [r3, #0]
 801334a:	e002      	b.n	8013352 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801334c:	69bb      	ldr	r3, [r7, #24]
 801334e:	687a      	ldr	r2, [r7, #4]
 8013350:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013352:	69bb      	ldr	r3, [r7, #24]
 8013354:	68fa      	ldr	r2, [r7, #12]
 8013356:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013358:	69bb      	ldr	r3, [r7, #24]
 801335a:	68ba      	ldr	r2, [r7, #8]
 801335c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801335e:	2101      	movs	r1, #1
 8013360:	69b8      	ldr	r0, [r7, #24]
 8013362:	f7ff feb7 	bl	80130d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013366:	69bb      	ldr	r3, [r7, #24]
 8013368:	78fa      	ldrb	r2, [r7, #3]
 801336a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801336e:	bf00      	nop
 8013370:	3710      	adds	r7, #16
 8013372:	46bd      	mov	sp, r7
 8013374:	bd80      	pop	{r7, pc}

08013376 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013376:	b580      	push	{r7, lr}
 8013378:	b08a      	sub	sp, #40	; 0x28
 801337a:	af02      	add	r7, sp, #8
 801337c:	60f8      	str	r0, [r7, #12]
 801337e:	60b9      	str	r1, [r7, #8]
 8013380:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d10c      	bne.n	80133a2 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8013388:	f04f 0330 	mov.w	r3, #48	; 0x30
 801338c:	b672      	cpsid	i
 801338e:	f383 8811 	msr	BASEPRI, r3
 8013392:	f3bf 8f6f 	isb	sy
 8013396:	f3bf 8f4f 	dsb	sy
 801339a:	b662      	cpsie	i
 801339c:	61bb      	str	r3, [r7, #24]
}
 801339e:	bf00      	nop
 80133a0:	e7fe      	b.n	80133a0 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80133a2:	68ba      	ldr	r2, [r7, #8]
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	429a      	cmp	r2, r3
 80133a8:	d90c      	bls.n	80133c4 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 80133aa:	f04f 0330 	mov.w	r3, #48	; 0x30
 80133ae:	b672      	cpsid	i
 80133b0:	f383 8811 	msr	BASEPRI, r3
 80133b4:	f3bf 8f6f 	isb	sy
 80133b8:	f3bf 8f4f 	dsb	sy
 80133bc:	b662      	cpsie	i
 80133be:	617b      	str	r3, [r7, #20]
}
 80133c0:	bf00      	nop
 80133c2:	e7fe      	b.n	80133c2 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80133c4:	2302      	movs	r3, #2
 80133c6:	9300      	str	r3, [sp, #0]
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	2200      	movs	r2, #0
 80133cc:	2100      	movs	r1, #0
 80133ce:	68f8      	ldr	r0, [r7, #12]
 80133d0:	f7ff feea 	bl	80131a8 <xQueueGenericCreateStatic>
 80133d4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80133d6:	69fb      	ldr	r3, [r7, #28]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d002      	beq.n	80133e2 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80133dc:	69fb      	ldr	r3, [r7, #28]
 80133de:	68ba      	ldr	r2, [r7, #8]
 80133e0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80133e2:	69fb      	ldr	r3, [r7, #28]
	}
 80133e4:	4618      	mov	r0, r3
 80133e6:	3720      	adds	r7, #32
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}

080133ec <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b086      	sub	sp, #24
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
 80133f4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d10c      	bne.n	8013416 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80133fc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013400:	b672      	cpsid	i
 8013402:	f383 8811 	msr	BASEPRI, r3
 8013406:	f3bf 8f6f 	isb	sy
 801340a:	f3bf 8f4f 	dsb	sy
 801340e:	b662      	cpsie	i
 8013410:	613b      	str	r3, [r7, #16]
}
 8013412:	bf00      	nop
 8013414:	e7fe      	b.n	8013414 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013416:	683a      	ldr	r2, [r7, #0]
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	429a      	cmp	r2, r3
 801341c:	d90c      	bls.n	8013438 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 801341e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013422:	b672      	cpsid	i
 8013424:	f383 8811 	msr	BASEPRI, r3
 8013428:	f3bf 8f6f 	isb	sy
 801342c:	f3bf 8f4f 	dsb	sy
 8013430:	b662      	cpsie	i
 8013432:	60fb      	str	r3, [r7, #12]
}
 8013434:	bf00      	nop
 8013436:	e7fe      	b.n	8013436 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013438:	2202      	movs	r2, #2
 801343a:	2100      	movs	r1, #0
 801343c:	6878      	ldr	r0, [r7, #4]
 801343e:	f7ff ff35 	bl	80132ac <xQueueGenericCreate>
 8013442:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8013444:	697b      	ldr	r3, [r7, #20]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d002      	beq.n	8013450 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	683a      	ldr	r2, [r7, #0]
 801344e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013450:	697b      	ldr	r3, [r7, #20]
	}
 8013452:	4618      	mov	r0, r3
 8013454:	3718      	adds	r7, #24
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
	...

0801345c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801345c:	b580      	push	{r7, lr}
 801345e:	b08e      	sub	sp, #56	; 0x38
 8013460:	af00      	add	r7, sp, #0
 8013462:	60f8      	str	r0, [r7, #12]
 8013464:	60b9      	str	r1, [r7, #8]
 8013466:	607a      	str	r2, [r7, #4]
 8013468:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801346a:	2300      	movs	r3, #0
 801346c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013474:	2b00      	cmp	r3, #0
 8013476:	d10c      	bne.n	8013492 <xQueueGenericSend+0x36>
	__asm volatile
 8013478:	f04f 0330 	mov.w	r3, #48	; 0x30
 801347c:	b672      	cpsid	i
 801347e:	f383 8811 	msr	BASEPRI, r3
 8013482:	f3bf 8f6f 	isb	sy
 8013486:	f3bf 8f4f 	dsb	sy
 801348a:	b662      	cpsie	i
 801348c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801348e:	bf00      	nop
 8013490:	e7fe      	b.n	8013490 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d103      	bne.n	80134a0 <xQueueGenericSend+0x44>
 8013498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801349c:	2b00      	cmp	r3, #0
 801349e:	d101      	bne.n	80134a4 <xQueueGenericSend+0x48>
 80134a0:	2301      	movs	r3, #1
 80134a2:	e000      	b.n	80134a6 <xQueueGenericSend+0x4a>
 80134a4:	2300      	movs	r3, #0
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d10c      	bne.n	80134c4 <xQueueGenericSend+0x68>
	__asm volatile
 80134aa:	f04f 0330 	mov.w	r3, #48	; 0x30
 80134ae:	b672      	cpsid	i
 80134b0:	f383 8811 	msr	BASEPRI, r3
 80134b4:	f3bf 8f6f 	isb	sy
 80134b8:	f3bf 8f4f 	dsb	sy
 80134bc:	b662      	cpsie	i
 80134be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80134c0:	bf00      	nop
 80134c2:	e7fe      	b.n	80134c2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	2b02      	cmp	r3, #2
 80134c8:	d103      	bne.n	80134d2 <xQueueGenericSend+0x76>
 80134ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134ce:	2b01      	cmp	r3, #1
 80134d0:	d101      	bne.n	80134d6 <xQueueGenericSend+0x7a>
 80134d2:	2301      	movs	r3, #1
 80134d4:	e000      	b.n	80134d8 <xQueueGenericSend+0x7c>
 80134d6:	2300      	movs	r3, #0
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d10c      	bne.n	80134f6 <xQueueGenericSend+0x9a>
	__asm volatile
 80134dc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80134e0:	b672      	cpsid	i
 80134e2:	f383 8811 	msr	BASEPRI, r3
 80134e6:	f3bf 8f6f 	isb	sy
 80134ea:	f3bf 8f4f 	dsb	sy
 80134ee:	b662      	cpsie	i
 80134f0:	623b      	str	r3, [r7, #32]
}
 80134f2:	bf00      	nop
 80134f4:	e7fe      	b.n	80134f4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80134f6:	f001 fc81 	bl	8014dfc <xTaskGetSchedulerState>
 80134fa:	4603      	mov	r3, r0
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d102      	bne.n	8013506 <xQueueGenericSend+0xaa>
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d101      	bne.n	801350a <xQueueGenericSend+0xae>
 8013506:	2301      	movs	r3, #1
 8013508:	e000      	b.n	801350c <xQueueGenericSend+0xb0>
 801350a:	2300      	movs	r3, #0
 801350c:	2b00      	cmp	r3, #0
 801350e:	d10c      	bne.n	801352a <xQueueGenericSend+0xce>
	__asm volatile
 8013510:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013514:	b672      	cpsid	i
 8013516:	f383 8811 	msr	BASEPRI, r3
 801351a:	f3bf 8f6f 	isb	sy
 801351e:	f3bf 8f4f 	dsb	sy
 8013522:	b662      	cpsie	i
 8013524:	61fb      	str	r3, [r7, #28]
}
 8013526:	bf00      	nop
 8013528:	e7fe      	b.n	8013528 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801352a:	f7ff fca7 	bl	8012e7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013536:	429a      	cmp	r2, r3
 8013538:	d302      	bcc.n	8013540 <xQueueGenericSend+0xe4>
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	2b02      	cmp	r3, #2
 801353e:	d129      	bne.n	8013594 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013540:	683a      	ldr	r2, [r7, #0]
 8013542:	68b9      	ldr	r1, [r7, #8]
 8013544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013546:	f000 fc82 	bl	8013e4e <prvCopyDataToQueue>
 801354a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013550:	2b00      	cmp	r3, #0
 8013552:	d010      	beq.n	8013576 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013556:	3324      	adds	r3, #36	; 0x24
 8013558:	4618      	mov	r0, r3
 801355a:	f001 fa89 	bl	8014a70 <xTaskRemoveFromEventList>
 801355e:	4603      	mov	r3, r0
 8013560:	2b00      	cmp	r3, #0
 8013562:	d013      	beq.n	801358c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013564:	4b3f      	ldr	r3, [pc, #252]	; (8013664 <xQueueGenericSend+0x208>)
 8013566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801356a:	601a      	str	r2, [r3, #0]
 801356c:	f3bf 8f4f 	dsb	sy
 8013570:	f3bf 8f6f 	isb	sy
 8013574:	e00a      	b.n	801358c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013578:	2b00      	cmp	r3, #0
 801357a:	d007      	beq.n	801358c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801357c:	4b39      	ldr	r3, [pc, #228]	; (8013664 <xQueueGenericSend+0x208>)
 801357e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013582:	601a      	str	r2, [r3, #0]
 8013584:	f3bf 8f4f 	dsb	sy
 8013588:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801358c:	f7ff fcaa 	bl	8012ee4 <vPortExitCritical>
				return pdPASS;
 8013590:	2301      	movs	r3, #1
 8013592:	e063      	b.n	801365c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d103      	bne.n	80135a2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801359a:	f7ff fca3 	bl	8012ee4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801359e:	2300      	movs	r3, #0
 80135a0:	e05c      	b.n	801365c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80135a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d106      	bne.n	80135b6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80135a8:	f107 0314 	add.w	r3, r7, #20
 80135ac:	4618      	mov	r0, r3
 80135ae:	f001 fac5 	bl	8014b3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80135b2:	2301      	movs	r3, #1
 80135b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80135b6:	f7ff fc95 	bl	8012ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80135ba:	f001 f82b 	bl	8014614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80135be:	f7ff fc5d 	bl	8012e7c <vPortEnterCritical>
 80135c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80135c8:	b25b      	sxtb	r3, r3
 80135ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135ce:	d103      	bne.n	80135d8 <xQueueGenericSend+0x17c>
 80135d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d2:	2200      	movs	r2, #0
 80135d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80135d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80135de:	b25b      	sxtb	r3, r3
 80135e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135e4:	d103      	bne.n	80135ee <xQueueGenericSend+0x192>
 80135e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135e8:	2200      	movs	r2, #0
 80135ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80135ee:	f7ff fc79 	bl	8012ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80135f2:	1d3a      	adds	r2, r7, #4
 80135f4:	f107 0314 	add.w	r3, r7, #20
 80135f8:	4611      	mov	r1, r2
 80135fa:	4618      	mov	r0, r3
 80135fc:	f001 fab4 	bl	8014b68 <xTaskCheckForTimeOut>
 8013600:	4603      	mov	r3, r0
 8013602:	2b00      	cmp	r3, #0
 8013604:	d124      	bne.n	8013650 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013608:	f000 fd19 	bl	801403e <prvIsQueueFull>
 801360c:	4603      	mov	r3, r0
 801360e:	2b00      	cmp	r3, #0
 8013610:	d018      	beq.n	8013644 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013614:	3310      	adds	r3, #16
 8013616:	687a      	ldr	r2, [r7, #4]
 8013618:	4611      	mov	r1, r2
 801361a:	4618      	mov	r0, r3
 801361c:	f001 f9d4 	bl	80149c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013622:	f000 fca4 	bl	8013f6e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013626:	f001 f803 	bl	8014630 <xTaskResumeAll>
 801362a:	4603      	mov	r3, r0
 801362c:	2b00      	cmp	r3, #0
 801362e:	f47f af7c 	bne.w	801352a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8013632:	4b0c      	ldr	r3, [pc, #48]	; (8013664 <xQueueGenericSend+0x208>)
 8013634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013638:	601a      	str	r2, [r3, #0]
 801363a:	f3bf 8f4f 	dsb	sy
 801363e:	f3bf 8f6f 	isb	sy
 8013642:	e772      	b.n	801352a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013646:	f000 fc92 	bl	8013f6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801364a:	f000 fff1 	bl	8014630 <xTaskResumeAll>
 801364e:	e76c      	b.n	801352a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013652:	f000 fc8c 	bl	8013f6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013656:	f000 ffeb 	bl	8014630 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801365a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801365c:	4618      	mov	r0, r3
 801365e:	3738      	adds	r7, #56	; 0x38
 8013660:	46bd      	mov	sp, r7
 8013662:	bd80      	pop	{r7, pc}
 8013664:	e000ed04 	.word	0xe000ed04

08013668 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b08e      	sub	sp, #56	; 0x38
 801366c:	af00      	add	r7, sp, #0
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	60b9      	str	r1, [r7, #8]
 8013672:	607a      	str	r2, [r7, #4]
 8013674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801367c:	2b00      	cmp	r3, #0
 801367e:	d10c      	bne.n	801369a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8013680:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013684:	b672      	cpsid	i
 8013686:	f383 8811 	msr	BASEPRI, r3
 801368a:	f3bf 8f6f 	isb	sy
 801368e:	f3bf 8f4f 	dsb	sy
 8013692:	b662      	cpsie	i
 8013694:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013696:	bf00      	nop
 8013698:	e7fe      	b.n	8013698 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801369a:	68bb      	ldr	r3, [r7, #8]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d103      	bne.n	80136a8 <xQueueGenericSendFromISR+0x40>
 80136a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d101      	bne.n	80136ac <xQueueGenericSendFromISR+0x44>
 80136a8:	2301      	movs	r3, #1
 80136aa:	e000      	b.n	80136ae <xQueueGenericSendFromISR+0x46>
 80136ac:	2300      	movs	r3, #0
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d10c      	bne.n	80136cc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80136b2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80136b6:	b672      	cpsid	i
 80136b8:	f383 8811 	msr	BASEPRI, r3
 80136bc:	f3bf 8f6f 	isb	sy
 80136c0:	f3bf 8f4f 	dsb	sy
 80136c4:	b662      	cpsie	i
 80136c6:	623b      	str	r3, [r7, #32]
}
 80136c8:	bf00      	nop
 80136ca:	e7fe      	b.n	80136ca <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80136cc:	683b      	ldr	r3, [r7, #0]
 80136ce:	2b02      	cmp	r3, #2
 80136d0:	d103      	bne.n	80136da <xQueueGenericSendFromISR+0x72>
 80136d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136d6:	2b01      	cmp	r3, #1
 80136d8:	d101      	bne.n	80136de <xQueueGenericSendFromISR+0x76>
 80136da:	2301      	movs	r3, #1
 80136dc:	e000      	b.n	80136e0 <xQueueGenericSendFromISR+0x78>
 80136de:	2300      	movs	r3, #0
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d10c      	bne.n	80136fe <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80136e4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80136e8:	b672      	cpsid	i
 80136ea:	f383 8811 	msr	BASEPRI, r3
 80136ee:	f3bf 8f6f 	isb	sy
 80136f2:	f3bf 8f4f 	dsb	sy
 80136f6:	b662      	cpsie	i
 80136f8:	61fb      	str	r3, [r7, #28]
}
 80136fa:	bf00      	nop
 80136fc:	e7fe      	b.n	80136fc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80136fe:	f7ff fca5 	bl	801304c <vPortValidateInterruptPriority>
	__asm volatile
 8013702:	f3ef 8211 	mrs	r2, BASEPRI
 8013706:	f04f 0330 	mov.w	r3, #48	; 0x30
 801370a:	b672      	cpsid	i
 801370c:	f383 8811 	msr	BASEPRI, r3
 8013710:	f3bf 8f6f 	isb	sy
 8013714:	f3bf 8f4f 	dsb	sy
 8013718:	b662      	cpsie	i
 801371a:	61ba      	str	r2, [r7, #24]
 801371c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801371e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013720:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801372a:	429a      	cmp	r2, r3
 801372c:	d302      	bcc.n	8013734 <xQueueGenericSendFromISR+0xcc>
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	2b02      	cmp	r3, #2
 8013732:	d12c      	bne.n	801378e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801373a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801373e:	683a      	ldr	r2, [r7, #0]
 8013740:	68b9      	ldr	r1, [r7, #8]
 8013742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013744:	f000 fb83 	bl	8013e4e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013748:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013750:	d112      	bne.n	8013778 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013756:	2b00      	cmp	r3, #0
 8013758:	d016      	beq.n	8013788 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801375c:	3324      	adds	r3, #36	; 0x24
 801375e:	4618      	mov	r0, r3
 8013760:	f001 f986 	bl	8014a70 <xTaskRemoveFromEventList>
 8013764:	4603      	mov	r3, r0
 8013766:	2b00      	cmp	r3, #0
 8013768:	d00e      	beq.n	8013788 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d00b      	beq.n	8013788 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	2201      	movs	r2, #1
 8013774:	601a      	str	r2, [r3, #0]
 8013776:	e007      	b.n	8013788 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013778:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801377c:	3301      	adds	r3, #1
 801377e:	b2db      	uxtb	r3, r3
 8013780:	b25a      	sxtb	r2, r3
 8013782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013788:	2301      	movs	r3, #1
 801378a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801378c:	e001      	b.n	8013792 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801378e:	2300      	movs	r3, #0
 8013790:	637b      	str	r3, [r7, #52]	; 0x34
 8013792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013794:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	f383 8811 	msr	BASEPRI, r3
}
 801379c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801379e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	3738      	adds	r7, #56	; 0x38
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}

080137a8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b08e      	sub	sp, #56	; 0x38
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
 80137b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80137b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d10c      	bne.n	80137d6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80137bc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80137c0:	b672      	cpsid	i
 80137c2:	f383 8811 	msr	BASEPRI, r3
 80137c6:	f3bf 8f6f 	isb	sy
 80137ca:	f3bf 8f4f 	dsb	sy
 80137ce:	b662      	cpsie	i
 80137d0:	623b      	str	r3, [r7, #32]
}
 80137d2:	bf00      	nop
 80137d4:	e7fe      	b.n	80137d4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80137d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d00c      	beq.n	80137f8 <xQueueGiveFromISR+0x50>
	__asm volatile
 80137de:	f04f 0330 	mov.w	r3, #48	; 0x30
 80137e2:	b672      	cpsid	i
 80137e4:	f383 8811 	msr	BASEPRI, r3
 80137e8:	f3bf 8f6f 	isb	sy
 80137ec:	f3bf 8f4f 	dsb	sy
 80137f0:	b662      	cpsie	i
 80137f2:	61fb      	str	r3, [r7, #28]
}
 80137f4:	bf00      	nop
 80137f6:	e7fe      	b.n	80137f6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80137f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d103      	bne.n	8013808 <xQueueGiveFromISR+0x60>
 8013800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013802:	689b      	ldr	r3, [r3, #8]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d101      	bne.n	801380c <xQueueGiveFromISR+0x64>
 8013808:	2301      	movs	r3, #1
 801380a:	e000      	b.n	801380e <xQueueGiveFromISR+0x66>
 801380c:	2300      	movs	r3, #0
 801380e:	2b00      	cmp	r3, #0
 8013810:	d10c      	bne.n	801382c <xQueueGiveFromISR+0x84>
	__asm volatile
 8013812:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013816:	b672      	cpsid	i
 8013818:	f383 8811 	msr	BASEPRI, r3
 801381c:	f3bf 8f6f 	isb	sy
 8013820:	f3bf 8f4f 	dsb	sy
 8013824:	b662      	cpsie	i
 8013826:	61bb      	str	r3, [r7, #24]
}
 8013828:	bf00      	nop
 801382a:	e7fe      	b.n	801382a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801382c:	f7ff fc0e 	bl	801304c <vPortValidateInterruptPriority>
	__asm volatile
 8013830:	f3ef 8211 	mrs	r2, BASEPRI
 8013834:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013838:	b672      	cpsid	i
 801383a:	f383 8811 	msr	BASEPRI, r3
 801383e:	f3bf 8f6f 	isb	sy
 8013842:	f3bf 8f4f 	dsb	sy
 8013846:	b662      	cpsie	i
 8013848:	617a      	str	r2, [r7, #20]
 801384a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801384c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801384e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013854:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801385a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801385c:	429a      	cmp	r2, r3
 801385e:	d22b      	bcs.n	80138b8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013862:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801386c:	1c5a      	adds	r2, r3, #1
 801386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013870:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013872:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013876:	f1b3 3fff 	cmp.w	r3, #4294967295
 801387a:	d112      	bne.n	80138a2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013880:	2b00      	cmp	r3, #0
 8013882:	d016      	beq.n	80138b2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013886:	3324      	adds	r3, #36	; 0x24
 8013888:	4618      	mov	r0, r3
 801388a:	f001 f8f1 	bl	8014a70 <xTaskRemoveFromEventList>
 801388e:	4603      	mov	r3, r0
 8013890:	2b00      	cmp	r3, #0
 8013892:	d00e      	beq.n	80138b2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013894:	683b      	ldr	r3, [r7, #0]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d00b      	beq.n	80138b2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	2201      	movs	r2, #1
 801389e:	601a      	str	r2, [r3, #0]
 80138a0:	e007      	b.n	80138b2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80138a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138a6:	3301      	adds	r3, #1
 80138a8:	b2db      	uxtb	r3, r3
 80138aa:	b25a      	sxtb	r2, r3
 80138ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80138b2:	2301      	movs	r3, #1
 80138b4:	637b      	str	r3, [r7, #52]	; 0x34
 80138b6:	e001      	b.n	80138bc <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80138b8:	2300      	movs	r3, #0
 80138ba:	637b      	str	r3, [r7, #52]	; 0x34
 80138bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138be:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	f383 8811 	msr	BASEPRI, r3
}
 80138c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80138c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80138ca:	4618      	mov	r0, r3
 80138cc:	3738      	adds	r7, #56	; 0x38
 80138ce:	46bd      	mov	sp, r7
 80138d0:	bd80      	pop	{r7, pc}
	...

080138d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b08c      	sub	sp, #48	; 0x30
 80138d8:	af00      	add	r7, sp, #0
 80138da:	60f8      	str	r0, [r7, #12]
 80138dc:	60b9      	str	r1, [r7, #8]
 80138de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80138e0:	2300      	movs	r3, #0
 80138e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80138e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d10c      	bne.n	8013908 <xQueueReceive+0x34>
	__asm volatile
 80138ee:	f04f 0330 	mov.w	r3, #48	; 0x30
 80138f2:	b672      	cpsid	i
 80138f4:	f383 8811 	msr	BASEPRI, r3
 80138f8:	f3bf 8f6f 	isb	sy
 80138fc:	f3bf 8f4f 	dsb	sy
 8013900:	b662      	cpsie	i
 8013902:	623b      	str	r3, [r7, #32]
}
 8013904:	bf00      	nop
 8013906:	e7fe      	b.n	8013906 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013908:	68bb      	ldr	r3, [r7, #8]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d103      	bne.n	8013916 <xQueueReceive+0x42>
 801390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013912:	2b00      	cmp	r3, #0
 8013914:	d101      	bne.n	801391a <xQueueReceive+0x46>
 8013916:	2301      	movs	r3, #1
 8013918:	e000      	b.n	801391c <xQueueReceive+0x48>
 801391a:	2300      	movs	r3, #0
 801391c:	2b00      	cmp	r3, #0
 801391e:	d10c      	bne.n	801393a <xQueueReceive+0x66>
	__asm volatile
 8013920:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013924:	b672      	cpsid	i
 8013926:	f383 8811 	msr	BASEPRI, r3
 801392a:	f3bf 8f6f 	isb	sy
 801392e:	f3bf 8f4f 	dsb	sy
 8013932:	b662      	cpsie	i
 8013934:	61fb      	str	r3, [r7, #28]
}
 8013936:	bf00      	nop
 8013938:	e7fe      	b.n	8013938 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801393a:	f001 fa5f 	bl	8014dfc <xTaskGetSchedulerState>
 801393e:	4603      	mov	r3, r0
 8013940:	2b00      	cmp	r3, #0
 8013942:	d102      	bne.n	801394a <xQueueReceive+0x76>
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d101      	bne.n	801394e <xQueueReceive+0x7a>
 801394a:	2301      	movs	r3, #1
 801394c:	e000      	b.n	8013950 <xQueueReceive+0x7c>
 801394e:	2300      	movs	r3, #0
 8013950:	2b00      	cmp	r3, #0
 8013952:	d10c      	bne.n	801396e <xQueueReceive+0x9a>
	__asm volatile
 8013954:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013958:	b672      	cpsid	i
 801395a:	f383 8811 	msr	BASEPRI, r3
 801395e:	f3bf 8f6f 	isb	sy
 8013962:	f3bf 8f4f 	dsb	sy
 8013966:	b662      	cpsie	i
 8013968:	61bb      	str	r3, [r7, #24]
}
 801396a:	bf00      	nop
 801396c:	e7fe      	b.n	801396c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801396e:	f7ff fa85 	bl	8012e7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013976:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801397a:	2b00      	cmp	r3, #0
 801397c:	d01f      	beq.n	80139be <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801397e:	68b9      	ldr	r1, [r7, #8]
 8013980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013982:	f000 face 	bl	8013f22 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013988:	1e5a      	subs	r2, r3, #1
 801398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801398c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013990:	691b      	ldr	r3, [r3, #16]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d00f      	beq.n	80139b6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013998:	3310      	adds	r3, #16
 801399a:	4618      	mov	r0, r3
 801399c:	f001 f868 	bl	8014a70 <xTaskRemoveFromEventList>
 80139a0:	4603      	mov	r3, r0
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d007      	beq.n	80139b6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80139a6:	4b3d      	ldr	r3, [pc, #244]	; (8013a9c <xQueueReceive+0x1c8>)
 80139a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139ac:	601a      	str	r2, [r3, #0]
 80139ae:	f3bf 8f4f 	dsb	sy
 80139b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80139b6:	f7ff fa95 	bl	8012ee4 <vPortExitCritical>
				return pdPASS;
 80139ba:	2301      	movs	r3, #1
 80139bc:	e069      	b.n	8013a92 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d103      	bne.n	80139cc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80139c4:	f7ff fa8e 	bl	8012ee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80139c8:	2300      	movs	r3, #0
 80139ca:	e062      	b.n	8013a92 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80139cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d106      	bne.n	80139e0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80139d2:	f107 0310 	add.w	r3, r7, #16
 80139d6:	4618      	mov	r0, r3
 80139d8:	f001 f8b0 	bl	8014b3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80139dc:	2301      	movs	r3, #1
 80139de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80139e0:	f7ff fa80 	bl	8012ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80139e4:	f000 fe16 	bl	8014614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80139e8:	f7ff fa48 	bl	8012e7c <vPortEnterCritical>
 80139ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80139f2:	b25b      	sxtb	r3, r3
 80139f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139f8:	d103      	bne.n	8013a02 <xQueueReceive+0x12e>
 80139fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139fc:	2200      	movs	r2, #0
 80139fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a08:	b25b      	sxtb	r3, r3
 8013a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a0e:	d103      	bne.n	8013a18 <xQueueReceive+0x144>
 8013a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a12:	2200      	movs	r2, #0
 8013a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013a18:	f7ff fa64 	bl	8012ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013a1c:	1d3a      	adds	r2, r7, #4
 8013a1e:	f107 0310 	add.w	r3, r7, #16
 8013a22:	4611      	mov	r1, r2
 8013a24:	4618      	mov	r0, r3
 8013a26:	f001 f89f 	bl	8014b68 <xTaskCheckForTimeOut>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d123      	bne.n	8013a78 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a32:	f000 faee 	bl	8014012 <prvIsQueueEmpty>
 8013a36:	4603      	mov	r3, r0
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d017      	beq.n	8013a6c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a3e:	3324      	adds	r3, #36	; 0x24
 8013a40:	687a      	ldr	r2, [r7, #4]
 8013a42:	4611      	mov	r1, r2
 8013a44:	4618      	mov	r0, r3
 8013a46:	f000 ffbf 	bl	80149c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a4c:	f000 fa8f 	bl	8013f6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013a50:	f000 fdee 	bl	8014630 <xTaskResumeAll>
 8013a54:	4603      	mov	r3, r0
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d189      	bne.n	801396e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8013a5a:	4b10      	ldr	r3, [pc, #64]	; (8013a9c <xQueueReceive+0x1c8>)
 8013a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a60:	601a      	str	r2, [r3, #0]
 8013a62:	f3bf 8f4f 	dsb	sy
 8013a66:	f3bf 8f6f 	isb	sy
 8013a6a:	e780      	b.n	801396e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a6e:	f000 fa7e 	bl	8013f6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013a72:	f000 fddd 	bl	8014630 <xTaskResumeAll>
 8013a76:	e77a      	b.n	801396e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a7a:	f000 fa78 	bl	8013f6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013a7e:	f000 fdd7 	bl	8014630 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a84:	f000 fac5 	bl	8014012 <prvIsQueueEmpty>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	f43f af6f 	beq.w	801396e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013a90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3730      	adds	r7, #48	; 0x30
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}
 8013a9a:	bf00      	nop
 8013a9c:	e000ed04 	.word	0xe000ed04

08013aa0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b08e      	sub	sp, #56	; 0x38
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
 8013aa8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013aaa:	2300      	movs	r3, #0
 8013aac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d10c      	bne.n	8013ad6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8013abc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013ac0:	b672      	cpsid	i
 8013ac2:	f383 8811 	msr	BASEPRI, r3
 8013ac6:	f3bf 8f6f 	isb	sy
 8013aca:	f3bf 8f4f 	dsb	sy
 8013ace:	b662      	cpsie	i
 8013ad0:	623b      	str	r3, [r7, #32]
}
 8013ad2:	bf00      	nop
 8013ad4:	e7fe      	b.n	8013ad4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d00c      	beq.n	8013af8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8013ade:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013ae2:	b672      	cpsid	i
 8013ae4:	f383 8811 	msr	BASEPRI, r3
 8013ae8:	f3bf 8f6f 	isb	sy
 8013aec:	f3bf 8f4f 	dsb	sy
 8013af0:	b662      	cpsie	i
 8013af2:	61fb      	str	r3, [r7, #28]
}
 8013af4:	bf00      	nop
 8013af6:	e7fe      	b.n	8013af6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013af8:	f001 f980 	bl	8014dfc <xTaskGetSchedulerState>
 8013afc:	4603      	mov	r3, r0
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d102      	bne.n	8013b08 <xQueueSemaphoreTake+0x68>
 8013b02:	683b      	ldr	r3, [r7, #0]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d101      	bne.n	8013b0c <xQueueSemaphoreTake+0x6c>
 8013b08:	2301      	movs	r3, #1
 8013b0a:	e000      	b.n	8013b0e <xQueueSemaphoreTake+0x6e>
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d10c      	bne.n	8013b2c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8013b12:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013b16:	b672      	cpsid	i
 8013b18:	f383 8811 	msr	BASEPRI, r3
 8013b1c:	f3bf 8f6f 	isb	sy
 8013b20:	f3bf 8f4f 	dsb	sy
 8013b24:	b662      	cpsie	i
 8013b26:	61bb      	str	r3, [r7, #24]
}
 8013b28:	bf00      	nop
 8013b2a:	e7fe      	b.n	8013b2a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013b2c:	f7ff f9a6 	bl	8012e7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b34:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d024      	beq.n	8013b86 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b3e:	1e5a      	subs	r2, r3, #1
 8013b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b42:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d104      	bne.n	8013b56 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013b4c:	f001 fad4 	bl	80150f8 <pvTaskIncrementMutexHeldCount>
 8013b50:	4602      	mov	r2, r0
 8013b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b54:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b58:	691b      	ldr	r3, [r3, #16]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d00f      	beq.n	8013b7e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b60:	3310      	adds	r3, #16
 8013b62:	4618      	mov	r0, r3
 8013b64:	f000 ff84 	bl	8014a70 <xTaskRemoveFromEventList>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d007      	beq.n	8013b7e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013b6e:	4b55      	ldr	r3, [pc, #340]	; (8013cc4 <xQueueSemaphoreTake+0x224>)
 8013b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b74:	601a      	str	r2, [r3, #0]
 8013b76:	f3bf 8f4f 	dsb	sy
 8013b7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013b7e:	f7ff f9b1 	bl	8012ee4 <vPortExitCritical>
				return pdPASS;
 8013b82:	2301      	movs	r3, #1
 8013b84:	e099      	b.n	8013cba <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d113      	bne.n	8013bb4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d00c      	beq.n	8013bac <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8013b92:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013b96:	b672      	cpsid	i
 8013b98:	f383 8811 	msr	BASEPRI, r3
 8013b9c:	f3bf 8f6f 	isb	sy
 8013ba0:	f3bf 8f4f 	dsb	sy
 8013ba4:	b662      	cpsie	i
 8013ba6:	617b      	str	r3, [r7, #20]
}
 8013ba8:	bf00      	nop
 8013baa:	e7fe      	b.n	8013baa <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013bac:	f7ff f99a 	bl	8012ee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	e082      	b.n	8013cba <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d106      	bne.n	8013bc8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013bba:	f107 030c 	add.w	r3, r7, #12
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f000 ffbc 	bl	8014b3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013bc8:	f7ff f98c 	bl	8012ee4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013bcc:	f000 fd22 	bl	8014614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013bd0:	f7ff f954 	bl	8012e7c <vPortEnterCritical>
 8013bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013bda:	b25b      	sxtb	r3, r3
 8013bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013be0:	d103      	bne.n	8013bea <xQueueSemaphoreTake+0x14a>
 8013be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be4:	2200      	movs	r2, #0
 8013be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013bf0:	b25b      	sxtb	r3, r3
 8013bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bf6:	d103      	bne.n	8013c00 <xQueueSemaphoreTake+0x160>
 8013bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013c00:	f7ff f970 	bl	8012ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013c04:	463a      	mov	r2, r7
 8013c06:	f107 030c 	add.w	r3, r7, #12
 8013c0a:	4611      	mov	r1, r2
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f000 ffab 	bl	8014b68 <xTaskCheckForTimeOut>
 8013c12:	4603      	mov	r3, r0
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d132      	bne.n	8013c7e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013c18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c1a:	f000 f9fa 	bl	8014012 <prvIsQueueEmpty>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d026      	beq.n	8013c72 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d109      	bne.n	8013c40 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8013c2c:	f7ff f926 	bl	8012e7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c32:	689b      	ldr	r3, [r3, #8]
 8013c34:	4618      	mov	r0, r3
 8013c36:	f001 f8ff 	bl	8014e38 <xTaskPriorityInherit>
 8013c3a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013c3c:	f7ff f952 	bl	8012ee4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c42:	3324      	adds	r3, #36	; 0x24
 8013c44:	683a      	ldr	r2, [r7, #0]
 8013c46:	4611      	mov	r1, r2
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f000 febd 	bl	80149c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013c4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c50:	f000 f98d 	bl	8013f6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013c54:	f000 fcec 	bl	8014630 <xTaskResumeAll>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	f47f af66 	bne.w	8013b2c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8013c60:	4b18      	ldr	r3, [pc, #96]	; (8013cc4 <xQueueSemaphoreTake+0x224>)
 8013c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c66:	601a      	str	r2, [r3, #0]
 8013c68:	f3bf 8f4f 	dsb	sy
 8013c6c:	f3bf 8f6f 	isb	sy
 8013c70:	e75c      	b.n	8013b2c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013c72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c74:	f000 f97b 	bl	8013f6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013c78:	f000 fcda 	bl	8014630 <xTaskResumeAll>
 8013c7c:	e756      	b.n	8013b2c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013c7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c80:	f000 f975 	bl	8013f6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013c84:	f000 fcd4 	bl	8014630 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013c88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c8a:	f000 f9c2 	bl	8014012 <prvIsQueueEmpty>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	f43f af4b 	beq.w	8013b2c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d00d      	beq.n	8013cb8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8013c9c:	f7ff f8ee 	bl	8012e7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013ca0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ca2:	f000 f8bc 	bl	8013e1e <prvGetDisinheritPriorityAfterTimeout>
 8013ca6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013caa:	689b      	ldr	r3, [r3, #8]
 8013cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f001 f99c 	bl	8014fec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013cb4:	f7ff f916 	bl	8012ee4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013cb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	3738      	adds	r7, #56	; 0x38
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	bd80      	pop	{r7, pc}
 8013cc2:	bf00      	nop
 8013cc4:	e000ed04 	.word	0xe000ed04

08013cc8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b08e      	sub	sp, #56	; 0x38
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	60f8      	str	r0, [r7, #12]
 8013cd0:	60b9      	str	r1, [r7, #8]
 8013cd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d10c      	bne.n	8013cf8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8013cde:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013ce2:	b672      	cpsid	i
 8013ce4:	f383 8811 	msr	BASEPRI, r3
 8013ce8:	f3bf 8f6f 	isb	sy
 8013cec:	f3bf 8f4f 	dsb	sy
 8013cf0:	b662      	cpsie	i
 8013cf2:	623b      	str	r3, [r7, #32]
}
 8013cf4:	bf00      	nop
 8013cf6:	e7fe      	b.n	8013cf6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013cf8:	68bb      	ldr	r3, [r7, #8]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d103      	bne.n	8013d06 <xQueueReceiveFromISR+0x3e>
 8013cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d101      	bne.n	8013d0a <xQueueReceiveFromISR+0x42>
 8013d06:	2301      	movs	r3, #1
 8013d08:	e000      	b.n	8013d0c <xQueueReceiveFromISR+0x44>
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d10c      	bne.n	8013d2a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8013d10:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013d14:	b672      	cpsid	i
 8013d16:	f383 8811 	msr	BASEPRI, r3
 8013d1a:	f3bf 8f6f 	isb	sy
 8013d1e:	f3bf 8f4f 	dsb	sy
 8013d22:	b662      	cpsie	i
 8013d24:	61fb      	str	r3, [r7, #28]
}
 8013d26:	bf00      	nop
 8013d28:	e7fe      	b.n	8013d28 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013d2a:	f7ff f98f 	bl	801304c <vPortValidateInterruptPriority>
	__asm volatile
 8013d2e:	f3ef 8211 	mrs	r2, BASEPRI
 8013d32:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013d36:	b672      	cpsid	i
 8013d38:	f383 8811 	msr	BASEPRI, r3
 8013d3c:	f3bf 8f6f 	isb	sy
 8013d40:	f3bf 8f4f 	dsb	sy
 8013d44:	b662      	cpsie	i
 8013d46:	61ba      	str	r2, [r7, #24]
 8013d48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013d4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d02f      	beq.n	8013dba <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013d64:	68b9      	ldr	r1, [r7, #8]
 8013d66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d68:	f000 f8db 	bl	8013f22 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d6e:	1e5a      	subs	r2, r3, #1
 8013d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d72:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013d74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d7c:	d112      	bne.n	8013da4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d80:	691b      	ldr	r3, [r3, #16]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d016      	beq.n	8013db4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d88:	3310      	adds	r3, #16
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f000 fe70 	bl	8014a70 <xTaskRemoveFromEventList>
 8013d90:	4603      	mov	r3, r0
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d00e      	beq.n	8013db4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d00b      	beq.n	8013db4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2201      	movs	r2, #1
 8013da0:	601a      	str	r2, [r3, #0]
 8013da2:	e007      	b.n	8013db4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013da8:	3301      	adds	r3, #1
 8013daa:	b2db      	uxtb	r3, r3
 8013dac:	b25a      	sxtb	r2, r3
 8013dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013db4:	2301      	movs	r3, #1
 8013db6:	637b      	str	r3, [r7, #52]	; 0x34
 8013db8:	e001      	b.n	8013dbe <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8013dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013dc2:	693b      	ldr	r3, [r7, #16]
 8013dc4:	f383 8811 	msr	BASEPRI, r3
}
 8013dc8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013dcc:	4618      	mov	r0, r3
 8013dce:	3738      	adds	r7, #56	; 0x38
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	bd80      	pop	{r7, pc}

08013dd4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b084      	sub	sp, #16
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d10c      	bne.n	8013e00 <vQueueDelete+0x2c>
	__asm volatile
 8013de6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013dea:	b672      	cpsid	i
 8013dec:	f383 8811 	msr	BASEPRI, r3
 8013df0:	f3bf 8f6f 	isb	sy
 8013df4:	f3bf 8f4f 	dsb	sy
 8013df8:	b662      	cpsie	i
 8013dfa:	60bb      	str	r3, [r7, #8]
}
 8013dfc:	bf00      	nop
 8013dfe:	e7fe      	b.n	8013dfe <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013e00:	68f8      	ldr	r0, [r7, #12]
 8013e02:	f000 f95f 	bl	80140c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d102      	bne.n	8013e16 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8013e10:	68f8      	ldr	r0, [r7, #12]
 8013e12:	f7fe fd57 	bl	80128c4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013e16:	bf00      	nop
 8013e18:	3710      	adds	r7, #16
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}

08013e1e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013e1e:	b480      	push	{r7}
 8013e20:	b085      	sub	sp, #20
 8013e22:	af00      	add	r7, sp, #0
 8013e24:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d006      	beq.n	8013e3c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8013e38:	60fb      	str	r3, [r7, #12]
 8013e3a:	e001      	b.n	8013e40 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013e40:	68fb      	ldr	r3, [r7, #12]
	}
 8013e42:	4618      	mov	r0, r3
 8013e44:	3714      	adds	r7, #20
 8013e46:	46bd      	mov	sp, r7
 8013e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4c:	4770      	bx	lr

08013e4e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013e4e:	b580      	push	{r7, lr}
 8013e50:	b086      	sub	sp, #24
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	60f8      	str	r0, [r7, #12]
 8013e56:	60b9      	str	r1, [r7, #8]
 8013e58:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e62:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d10d      	bne.n	8013e88 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d14d      	bne.n	8013f10 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	689b      	ldr	r3, [r3, #8]
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f001 f845 	bl	8014f08 <xTaskPriorityDisinherit>
 8013e7e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	2200      	movs	r2, #0
 8013e84:	609a      	str	r2, [r3, #8]
 8013e86:	e043      	b.n	8013f10 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d119      	bne.n	8013ec2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	6858      	ldr	r0, [r3, #4]
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e96:	461a      	mov	r2, r3
 8013e98:	68b9      	ldr	r1, [r7, #8]
 8013e9a:	f012 fe27 	bl	8026aec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	685a      	ldr	r2, [r3, #4]
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ea6:	441a      	add	r2, r3
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	685a      	ldr	r2, [r3, #4]
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	689b      	ldr	r3, [r3, #8]
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d32b      	bcc.n	8013f10 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	681a      	ldr	r2, [r3, #0]
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	605a      	str	r2, [r3, #4]
 8013ec0:	e026      	b.n	8013f10 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	68d8      	ldr	r0, [r3, #12]
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013eca:	461a      	mov	r2, r3
 8013ecc:	68b9      	ldr	r1, [r7, #8]
 8013ece:	f012 fe0d 	bl	8026aec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	68da      	ldr	r2, [r3, #12]
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013eda:	425b      	negs	r3, r3
 8013edc:	441a      	add	r2, r3
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	68da      	ldr	r2, [r3, #12]
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	429a      	cmp	r2, r3
 8013eec:	d207      	bcs.n	8013efe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	689a      	ldr	r2, [r3, #8]
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ef6:	425b      	negs	r3, r3
 8013ef8:	441a      	add	r2, r3
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	2b02      	cmp	r3, #2
 8013f02:	d105      	bne.n	8013f10 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013f04:	693b      	ldr	r3, [r7, #16]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d002      	beq.n	8013f10 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013f0a:	693b      	ldr	r3, [r7, #16]
 8013f0c:	3b01      	subs	r3, #1
 8013f0e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013f10:	693b      	ldr	r3, [r7, #16]
 8013f12:	1c5a      	adds	r2, r3, #1
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013f18:	697b      	ldr	r3, [r7, #20]
}
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	3718      	adds	r7, #24
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}

08013f22 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013f22:	b580      	push	{r7, lr}
 8013f24:	b082      	sub	sp, #8
 8013f26:	af00      	add	r7, sp, #0
 8013f28:	6078      	str	r0, [r7, #4]
 8013f2a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d018      	beq.n	8013f66 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	68da      	ldr	r2, [r3, #12]
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f3c:	441a      	add	r2, r3
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	68da      	ldr	r2, [r3, #12]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	689b      	ldr	r3, [r3, #8]
 8013f4a:	429a      	cmp	r2, r3
 8013f4c:	d303      	bcc.n	8013f56 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681a      	ldr	r2, [r3, #0]
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	68d9      	ldr	r1, [r3, #12]
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f5e:	461a      	mov	r2, r3
 8013f60:	6838      	ldr	r0, [r7, #0]
 8013f62:	f012 fdc3 	bl	8026aec <memcpy>
	}
}
 8013f66:	bf00      	nop
 8013f68:	3708      	adds	r7, #8
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	bd80      	pop	{r7, pc}

08013f6e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013f6e:	b580      	push	{r7, lr}
 8013f70:	b084      	sub	sp, #16
 8013f72:	af00      	add	r7, sp, #0
 8013f74:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013f76:	f7fe ff81 	bl	8012e7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f80:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013f82:	e011      	b.n	8013fa8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d012      	beq.n	8013fb2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	3324      	adds	r3, #36	; 0x24
 8013f90:	4618      	mov	r0, r3
 8013f92:	f000 fd6d 	bl	8014a70 <xTaskRemoveFromEventList>
 8013f96:	4603      	mov	r3, r0
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d001      	beq.n	8013fa0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013f9c:	f000 fe4a 	bl	8014c34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013fa0:	7bfb      	ldrb	r3, [r7, #15]
 8013fa2:	3b01      	subs	r3, #1
 8013fa4:	b2db      	uxtb	r3, r3
 8013fa6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	dce9      	bgt.n	8013f84 <prvUnlockQueue+0x16>
 8013fb0:	e000      	b.n	8013fb4 <prvUnlockQueue+0x46>
					break;
 8013fb2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	22ff      	movs	r2, #255	; 0xff
 8013fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013fbc:	f7fe ff92 	bl	8012ee4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013fc0:	f7fe ff5c 	bl	8012e7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013fca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013fcc:	e011      	b.n	8013ff2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	691b      	ldr	r3, [r3, #16]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d012      	beq.n	8013ffc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	3310      	adds	r3, #16
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f000 fd48 	bl	8014a70 <xTaskRemoveFromEventList>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d001      	beq.n	8013fea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013fe6:	f000 fe25 	bl	8014c34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013fea:	7bbb      	ldrb	r3, [r7, #14]
 8013fec:	3b01      	subs	r3, #1
 8013fee:	b2db      	uxtb	r3, r3
 8013ff0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	dce9      	bgt.n	8013fce <prvUnlockQueue+0x60>
 8013ffa:	e000      	b.n	8013ffe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013ffc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	22ff      	movs	r2, #255	; 0xff
 8014002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014006:	f7fe ff6d 	bl	8012ee4 <vPortExitCritical>
}
 801400a:	bf00      	nop
 801400c:	3710      	adds	r7, #16
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}

08014012 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014012:	b580      	push	{r7, lr}
 8014014:	b084      	sub	sp, #16
 8014016:	af00      	add	r7, sp, #0
 8014018:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801401a:	f7fe ff2f 	bl	8012e7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014022:	2b00      	cmp	r3, #0
 8014024:	d102      	bne.n	801402c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014026:	2301      	movs	r3, #1
 8014028:	60fb      	str	r3, [r7, #12]
 801402a:	e001      	b.n	8014030 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801402c:	2300      	movs	r3, #0
 801402e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014030:	f7fe ff58 	bl	8012ee4 <vPortExitCritical>

	return xReturn;
 8014034:	68fb      	ldr	r3, [r7, #12]
}
 8014036:	4618      	mov	r0, r3
 8014038:	3710      	adds	r7, #16
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}

0801403e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801403e:	b580      	push	{r7, lr}
 8014040:	b084      	sub	sp, #16
 8014042:	af00      	add	r7, sp, #0
 8014044:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014046:	f7fe ff19 	bl	8012e7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014052:	429a      	cmp	r2, r3
 8014054:	d102      	bne.n	801405c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014056:	2301      	movs	r3, #1
 8014058:	60fb      	str	r3, [r7, #12]
 801405a:	e001      	b.n	8014060 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801405c:	2300      	movs	r3, #0
 801405e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014060:	f7fe ff40 	bl	8012ee4 <vPortExitCritical>

	return xReturn;
 8014064:	68fb      	ldr	r3, [r7, #12]
}
 8014066:	4618      	mov	r0, r3
 8014068:	3710      	adds	r7, #16
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
	...

08014070 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014070:	b480      	push	{r7}
 8014072:	b085      	sub	sp, #20
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801407a:	2300      	movs	r3, #0
 801407c:	60fb      	str	r3, [r7, #12]
 801407e:	e014      	b.n	80140aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014080:	4a0f      	ldr	r2, [pc, #60]	; (80140c0 <vQueueAddToRegistry+0x50>)
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d10b      	bne.n	80140a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801408c:	490c      	ldr	r1, [pc, #48]	; (80140c0 <vQueueAddToRegistry+0x50>)
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	683a      	ldr	r2, [r7, #0]
 8014092:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014096:	4a0a      	ldr	r2, [pc, #40]	; (80140c0 <vQueueAddToRegistry+0x50>)
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	00db      	lsls	r3, r3, #3
 801409c:	4413      	add	r3, r2
 801409e:	687a      	ldr	r2, [r7, #4]
 80140a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80140a2:	e006      	b.n	80140b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	3301      	adds	r3, #1
 80140a8:	60fb      	str	r3, [r7, #12]
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	2b07      	cmp	r3, #7
 80140ae:	d9e7      	bls.n	8014080 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80140b0:	bf00      	nop
 80140b2:	bf00      	nop
 80140b4:	3714      	adds	r7, #20
 80140b6:	46bd      	mov	sp, r7
 80140b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140bc:	4770      	bx	lr
 80140be:	bf00      	nop
 80140c0:	2005718c 	.word	0x2005718c

080140c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80140c4:	b480      	push	{r7}
 80140c6:	b085      	sub	sp, #20
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80140cc:	2300      	movs	r3, #0
 80140ce:	60fb      	str	r3, [r7, #12]
 80140d0:	e016      	b.n	8014100 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80140d2:	4a10      	ldr	r2, [pc, #64]	; (8014114 <vQueueUnregisterQueue+0x50>)
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	00db      	lsls	r3, r3, #3
 80140d8:	4413      	add	r3, r2
 80140da:	685b      	ldr	r3, [r3, #4]
 80140dc:	687a      	ldr	r2, [r7, #4]
 80140de:	429a      	cmp	r2, r3
 80140e0:	d10b      	bne.n	80140fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80140e2:	4a0c      	ldr	r2, [pc, #48]	; (8014114 <vQueueUnregisterQueue+0x50>)
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	2100      	movs	r1, #0
 80140e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80140ec:	4a09      	ldr	r2, [pc, #36]	; (8014114 <vQueueUnregisterQueue+0x50>)
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	00db      	lsls	r3, r3, #3
 80140f2:	4413      	add	r3, r2
 80140f4:	2200      	movs	r2, #0
 80140f6:	605a      	str	r2, [r3, #4]
				break;
 80140f8:	e006      	b.n	8014108 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	3301      	adds	r3, #1
 80140fe:	60fb      	str	r3, [r7, #12]
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	2b07      	cmp	r3, #7
 8014104:	d9e5      	bls.n	80140d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8014106:	bf00      	nop
 8014108:	bf00      	nop
 801410a:	3714      	adds	r7, #20
 801410c:	46bd      	mov	sp, r7
 801410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014112:	4770      	bx	lr
 8014114:	2005718c 	.word	0x2005718c

08014118 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014118:	b580      	push	{r7, lr}
 801411a:	b086      	sub	sp, #24
 801411c:	af00      	add	r7, sp, #0
 801411e:	60f8      	str	r0, [r7, #12]
 8014120:	60b9      	str	r1, [r7, #8]
 8014122:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014128:	f7fe fea8 	bl	8012e7c <vPortEnterCritical>
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014132:	b25b      	sxtb	r3, r3
 8014134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014138:	d103      	bne.n	8014142 <vQueueWaitForMessageRestricted+0x2a>
 801413a:	697b      	ldr	r3, [r7, #20]
 801413c:	2200      	movs	r2, #0
 801413e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014148:	b25b      	sxtb	r3, r3
 801414a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801414e:	d103      	bne.n	8014158 <vQueueWaitForMessageRestricted+0x40>
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	2200      	movs	r2, #0
 8014154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014158:	f7fe fec4 	bl	8012ee4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014160:	2b00      	cmp	r3, #0
 8014162:	d106      	bne.n	8014172 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	3324      	adds	r3, #36	; 0x24
 8014168:	687a      	ldr	r2, [r7, #4]
 801416a:	68b9      	ldr	r1, [r7, #8]
 801416c:	4618      	mov	r0, r3
 801416e:	f000 fc51 	bl	8014a14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014172:	6978      	ldr	r0, [r7, #20]
 8014174:	f7ff fefb 	bl	8013f6e <prvUnlockQueue>
	}
 8014178:	bf00      	nop
 801417a:	3718      	adds	r7, #24
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}

08014180 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014180:	b580      	push	{r7, lr}
 8014182:	b08e      	sub	sp, #56	; 0x38
 8014184:	af04      	add	r7, sp, #16
 8014186:	60f8      	str	r0, [r7, #12]
 8014188:	60b9      	str	r1, [r7, #8]
 801418a:	607a      	str	r2, [r7, #4]
 801418c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801418e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014190:	2b00      	cmp	r3, #0
 8014192:	d10c      	bne.n	80141ae <xTaskCreateStatic+0x2e>
	__asm volatile
 8014194:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014198:	b672      	cpsid	i
 801419a:	f383 8811 	msr	BASEPRI, r3
 801419e:	f3bf 8f6f 	isb	sy
 80141a2:	f3bf 8f4f 	dsb	sy
 80141a6:	b662      	cpsie	i
 80141a8:	623b      	str	r3, [r7, #32]
}
 80141aa:	bf00      	nop
 80141ac:	e7fe      	b.n	80141ac <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80141ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d10c      	bne.n	80141ce <xTaskCreateStatic+0x4e>
	__asm volatile
 80141b4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80141b8:	b672      	cpsid	i
 80141ba:	f383 8811 	msr	BASEPRI, r3
 80141be:	f3bf 8f6f 	isb	sy
 80141c2:	f3bf 8f4f 	dsb	sy
 80141c6:	b662      	cpsie	i
 80141c8:	61fb      	str	r3, [r7, #28]
}
 80141ca:	bf00      	nop
 80141cc:	e7fe      	b.n	80141cc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80141ce:	235c      	movs	r3, #92	; 0x5c
 80141d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80141d2:	693b      	ldr	r3, [r7, #16]
 80141d4:	2b5c      	cmp	r3, #92	; 0x5c
 80141d6:	d00c      	beq.n	80141f2 <xTaskCreateStatic+0x72>
	__asm volatile
 80141d8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80141dc:	b672      	cpsid	i
 80141de:	f383 8811 	msr	BASEPRI, r3
 80141e2:	f3bf 8f6f 	isb	sy
 80141e6:	f3bf 8f4f 	dsb	sy
 80141ea:	b662      	cpsie	i
 80141ec:	61bb      	str	r3, [r7, #24]
}
 80141ee:	bf00      	nop
 80141f0:	e7fe      	b.n	80141f0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80141f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80141f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d01e      	beq.n	8014238 <xTaskCreateStatic+0xb8>
 80141fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d01b      	beq.n	8014238 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014202:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014208:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801420c:	2202      	movs	r2, #2
 801420e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014212:	2300      	movs	r3, #0
 8014214:	9303      	str	r3, [sp, #12]
 8014216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014218:	9302      	str	r3, [sp, #8]
 801421a:	f107 0314 	add.w	r3, r7, #20
 801421e:	9301      	str	r3, [sp, #4]
 8014220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014222:	9300      	str	r3, [sp, #0]
 8014224:	683b      	ldr	r3, [r7, #0]
 8014226:	687a      	ldr	r2, [r7, #4]
 8014228:	68b9      	ldr	r1, [r7, #8]
 801422a:	68f8      	ldr	r0, [r7, #12]
 801422c:	f000 f850 	bl	80142d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014232:	f000 f8df 	bl	80143f4 <prvAddNewTaskToReadyList>
 8014236:	e001      	b.n	801423c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8014238:	2300      	movs	r3, #0
 801423a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801423c:	697b      	ldr	r3, [r7, #20]
	}
 801423e:	4618      	mov	r0, r3
 8014240:	3728      	adds	r7, #40	; 0x28
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}

08014246 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014246:	b580      	push	{r7, lr}
 8014248:	b08c      	sub	sp, #48	; 0x30
 801424a:	af04      	add	r7, sp, #16
 801424c:	60f8      	str	r0, [r7, #12]
 801424e:	60b9      	str	r1, [r7, #8]
 8014250:	603b      	str	r3, [r7, #0]
 8014252:	4613      	mov	r3, r2
 8014254:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014256:	88fb      	ldrh	r3, [r7, #6]
 8014258:	009b      	lsls	r3, r3, #2
 801425a:	4618      	mov	r0, r3
 801425c:	f7fe fa68 	bl	8012730 <pvPortMalloc>
 8014260:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014262:	697b      	ldr	r3, [r7, #20]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d00e      	beq.n	8014286 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014268:	205c      	movs	r0, #92	; 0x5c
 801426a:	f7fe fa61 	bl	8012730 <pvPortMalloc>
 801426e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014270:	69fb      	ldr	r3, [r7, #28]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d003      	beq.n	801427e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014276:	69fb      	ldr	r3, [r7, #28]
 8014278:	697a      	ldr	r2, [r7, #20]
 801427a:	631a      	str	r2, [r3, #48]	; 0x30
 801427c:	e005      	b.n	801428a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801427e:	6978      	ldr	r0, [r7, #20]
 8014280:	f7fe fb20 	bl	80128c4 <vPortFree>
 8014284:	e001      	b.n	801428a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014286:	2300      	movs	r3, #0
 8014288:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801428a:	69fb      	ldr	r3, [r7, #28]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d017      	beq.n	80142c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	2200      	movs	r2, #0
 8014294:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014298:	88fa      	ldrh	r2, [r7, #6]
 801429a:	2300      	movs	r3, #0
 801429c:	9303      	str	r3, [sp, #12]
 801429e:	69fb      	ldr	r3, [r7, #28]
 80142a0:	9302      	str	r3, [sp, #8]
 80142a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a4:	9301      	str	r3, [sp, #4]
 80142a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a8:	9300      	str	r3, [sp, #0]
 80142aa:	683b      	ldr	r3, [r7, #0]
 80142ac:	68b9      	ldr	r1, [r7, #8]
 80142ae:	68f8      	ldr	r0, [r7, #12]
 80142b0:	f000 f80e 	bl	80142d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80142b4:	69f8      	ldr	r0, [r7, #28]
 80142b6:	f000 f89d 	bl	80143f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80142ba:	2301      	movs	r3, #1
 80142bc:	61bb      	str	r3, [r7, #24]
 80142be:	e002      	b.n	80142c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80142c0:	f04f 33ff 	mov.w	r3, #4294967295
 80142c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80142c6:	69bb      	ldr	r3, [r7, #24]
	}
 80142c8:	4618      	mov	r0, r3
 80142ca:	3720      	adds	r7, #32
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd80      	pop	{r7, pc}

080142d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b088      	sub	sp, #32
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	60f8      	str	r0, [r7, #12]
 80142d8:	60b9      	str	r1, [r7, #8]
 80142da:	607a      	str	r2, [r7, #4]
 80142dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80142de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	009b      	lsls	r3, r3, #2
 80142e6:	461a      	mov	r2, r3
 80142e8:	21a5      	movs	r1, #165	; 0xa5
 80142ea:	f012 fc0d 	bl	8026b08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80142ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142f2:	6879      	ldr	r1, [r7, #4]
 80142f4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80142f8:	440b      	add	r3, r1
 80142fa:	009b      	lsls	r3, r3, #2
 80142fc:	4413      	add	r3, r2
 80142fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014300:	69bb      	ldr	r3, [r7, #24]
 8014302:	f023 0307 	bic.w	r3, r3, #7
 8014306:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014308:	69bb      	ldr	r3, [r7, #24]
 801430a:	f003 0307 	and.w	r3, r3, #7
 801430e:	2b00      	cmp	r3, #0
 8014310:	d00c      	beq.n	801432c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8014312:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014316:	b672      	cpsid	i
 8014318:	f383 8811 	msr	BASEPRI, r3
 801431c:	f3bf 8f6f 	isb	sy
 8014320:	f3bf 8f4f 	dsb	sy
 8014324:	b662      	cpsie	i
 8014326:	617b      	str	r3, [r7, #20]
}
 8014328:	bf00      	nop
 801432a:	e7fe      	b.n	801432a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d01f      	beq.n	8014372 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014332:	2300      	movs	r3, #0
 8014334:	61fb      	str	r3, [r7, #28]
 8014336:	e012      	b.n	801435e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014338:	68ba      	ldr	r2, [r7, #8]
 801433a:	69fb      	ldr	r3, [r7, #28]
 801433c:	4413      	add	r3, r2
 801433e:	7819      	ldrb	r1, [r3, #0]
 8014340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014342:	69fb      	ldr	r3, [r7, #28]
 8014344:	4413      	add	r3, r2
 8014346:	3334      	adds	r3, #52	; 0x34
 8014348:	460a      	mov	r2, r1
 801434a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801434c:	68ba      	ldr	r2, [r7, #8]
 801434e:	69fb      	ldr	r3, [r7, #28]
 8014350:	4413      	add	r3, r2
 8014352:	781b      	ldrb	r3, [r3, #0]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d006      	beq.n	8014366 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014358:	69fb      	ldr	r3, [r7, #28]
 801435a:	3301      	adds	r3, #1
 801435c:	61fb      	str	r3, [r7, #28]
 801435e:	69fb      	ldr	r3, [r7, #28]
 8014360:	2b0f      	cmp	r3, #15
 8014362:	d9e9      	bls.n	8014338 <prvInitialiseNewTask+0x68>
 8014364:	e000      	b.n	8014368 <prvInitialiseNewTask+0x98>
			{
				break;
 8014366:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801436a:	2200      	movs	r2, #0
 801436c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014370:	e003      	b.n	801437a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014374:	2200      	movs	r2, #0
 8014376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801437c:	2b37      	cmp	r3, #55	; 0x37
 801437e:	d901      	bls.n	8014384 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014380:	2337      	movs	r3, #55	; 0x37
 8014382:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014388:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801438c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801438e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014392:	2200      	movs	r2, #0
 8014394:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014398:	3304      	adds	r3, #4
 801439a:	4618      	mov	r0, r3
 801439c:	f7fe fbcc 	bl	8012b38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80143a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143a2:	3318      	adds	r3, #24
 80143a4:	4618      	mov	r0, r3
 80143a6:	f7fe fbc7 	bl	8012b38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80143aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80143b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80143b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80143ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80143c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143c2:	2200      	movs	r2, #0
 80143c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80143c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143c8:	2200      	movs	r2, #0
 80143ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80143ce:	683a      	ldr	r2, [r7, #0]
 80143d0:	68f9      	ldr	r1, [r7, #12]
 80143d2:	69b8      	ldr	r0, [r7, #24]
 80143d4:	f7fe fc44 	bl	8012c60 <pxPortInitialiseStack>
 80143d8:	4602      	mov	r2, r0
 80143da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80143de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d002      	beq.n	80143ea <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80143e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80143ea:	bf00      	nop
 80143ec:	3720      	adds	r7, #32
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd80      	pop	{r7, pc}
	...

080143f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b082      	sub	sp, #8
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80143fc:	f7fe fd3e 	bl	8012e7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014400:	4b2d      	ldr	r3, [pc, #180]	; (80144b8 <prvAddNewTaskToReadyList+0xc4>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	3301      	adds	r3, #1
 8014406:	4a2c      	ldr	r2, [pc, #176]	; (80144b8 <prvAddNewTaskToReadyList+0xc4>)
 8014408:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801440a:	4b2c      	ldr	r3, [pc, #176]	; (80144bc <prvAddNewTaskToReadyList+0xc8>)
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d109      	bne.n	8014426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014412:	4a2a      	ldr	r2, [pc, #168]	; (80144bc <prvAddNewTaskToReadyList+0xc8>)
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014418:	4b27      	ldr	r3, [pc, #156]	; (80144b8 <prvAddNewTaskToReadyList+0xc4>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	2b01      	cmp	r3, #1
 801441e:	d110      	bne.n	8014442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014420:	f000 fc2c 	bl	8014c7c <prvInitialiseTaskLists>
 8014424:	e00d      	b.n	8014442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014426:	4b26      	ldr	r3, [pc, #152]	; (80144c0 <prvAddNewTaskToReadyList+0xcc>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d109      	bne.n	8014442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801442e:	4b23      	ldr	r3, [pc, #140]	; (80144bc <prvAddNewTaskToReadyList+0xc8>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014438:	429a      	cmp	r2, r3
 801443a:	d802      	bhi.n	8014442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801443c:	4a1f      	ldr	r2, [pc, #124]	; (80144bc <prvAddNewTaskToReadyList+0xc8>)
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014442:	4b20      	ldr	r3, [pc, #128]	; (80144c4 <prvAddNewTaskToReadyList+0xd0>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	3301      	adds	r3, #1
 8014448:	4a1e      	ldr	r2, [pc, #120]	; (80144c4 <prvAddNewTaskToReadyList+0xd0>)
 801444a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801444c:	4b1d      	ldr	r3, [pc, #116]	; (80144c4 <prvAddNewTaskToReadyList+0xd0>)
 801444e:	681a      	ldr	r2, [r3, #0]
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014458:	4b1b      	ldr	r3, [pc, #108]	; (80144c8 <prvAddNewTaskToReadyList+0xd4>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	429a      	cmp	r2, r3
 801445e:	d903      	bls.n	8014468 <prvAddNewTaskToReadyList+0x74>
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014464:	4a18      	ldr	r2, [pc, #96]	; (80144c8 <prvAddNewTaskToReadyList+0xd4>)
 8014466:	6013      	str	r3, [r2, #0]
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801446c:	4613      	mov	r3, r2
 801446e:	009b      	lsls	r3, r3, #2
 8014470:	4413      	add	r3, r2
 8014472:	009b      	lsls	r3, r3, #2
 8014474:	4a15      	ldr	r2, [pc, #84]	; (80144cc <prvAddNewTaskToReadyList+0xd8>)
 8014476:	441a      	add	r2, r3
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	3304      	adds	r3, #4
 801447c:	4619      	mov	r1, r3
 801447e:	4610      	mov	r0, r2
 8014480:	f7fe fb67 	bl	8012b52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014484:	f7fe fd2e 	bl	8012ee4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014488:	4b0d      	ldr	r3, [pc, #52]	; (80144c0 <prvAddNewTaskToReadyList+0xcc>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d00e      	beq.n	80144ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014490:	4b0a      	ldr	r3, [pc, #40]	; (80144bc <prvAddNewTaskToReadyList+0xc8>)
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801449a:	429a      	cmp	r2, r3
 801449c:	d207      	bcs.n	80144ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801449e:	4b0c      	ldr	r3, [pc, #48]	; (80144d0 <prvAddNewTaskToReadyList+0xdc>)
 80144a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144a4:	601a      	str	r2, [r3, #0]
 80144a6:	f3bf 8f4f 	dsb	sy
 80144aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80144ae:	bf00      	nop
 80144b0:	3708      	adds	r7, #8
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}
 80144b6:	bf00      	nop
 80144b8:	20056618 	.word	0x20056618
 80144bc:	20056144 	.word	0x20056144
 80144c0:	20056624 	.word	0x20056624
 80144c4:	20056634 	.word	0x20056634
 80144c8:	20056620 	.word	0x20056620
 80144cc:	20056148 	.word	0x20056148
 80144d0:	e000ed04 	.word	0xe000ed04

080144d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b084      	sub	sp, #16
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80144dc:	2300      	movs	r3, #0
 80144de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d019      	beq.n	801451a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80144e6:	4b14      	ldr	r3, [pc, #80]	; (8014538 <vTaskDelay+0x64>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d00c      	beq.n	8014508 <vTaskDelay+0x34>
	__asm volatile
 80144ee:	f04f 0330 	mov.w	r3, #48	; 0x30
 80144f2:	b672      	cpsid	i
 80144f4:	f383 8811 	msr	BASEPRI, r3
 80144f8:	f3bf 8f6f 	isb	sy
 80144fc:	f3bf 8f4f 	dsb	sy
 8014500:	b662      	cpsie	i
 8014502:	60bb      	str	r3, [r7, #8]
}
 8014504:	bf00      	nop
 8014506:	e7fe      	b.n	8014506 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8014508:	f000 f884 	bl	8014614 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801450c:	2100      	movs	r1, #0
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	f000 fe06 	bl	8015120 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014514:	f000 f88c 	bl	8014630 <xTaskResumeAll>
 8014518:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d107      	bne.n	8014530 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8014520:	4b06      	ldr	r3, [pc, #24]	; (801453c <vTaskDelay+0x68>)
 8014522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014526:	601a      	str	r2, [r3, #0]
 8014528:	f3bf 8f4f 	dsb	sy
 801452c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014530:	bf00      	nop
 8014532:	3710      	adds	r7, #16
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}
 8014538:	20056640 	.word	0x20056640
 801453c:	e000ed04 	.word	0xe000ed04

08014540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b08a      	sub	sp, #40	; 0x28
 8014544:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014546:	2300      	movs	r3, #0
 8014548:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801454a:	2300      	movs	r3, #0
 801454c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801454e:	463a      	mov	r2, r7
 8014550:	1d39      	adds	r1, r7, #4
 8014552:	f107 0308 	add.w	r3, r7, #8
 8014556:	4618      	mov	r0, r3
 8014558:	f7fe f8b6 	bl	80126c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801455c:	6839      	ldr	r1, [r7, #0]
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	68ba      	ldr	r2, [r7, #8]
 8014562:	9202      	str	r2, [sp, #8]
 8014564:	9301      	str	r3, [sp, #4]
 8014566:	2300      	movs	r3, #0
 8014568:	9300      	str	r3, [sp, #0]
 801456a:	2300      	movs	r3, #0
 801456c:	460a      	mov	r2, r1
 801456e:	4923      	ldr	r1, [pc, #140]	; (80145fc <vTaskStartScheduler+0xbc>)
 8014570:	4823      	ldr	r0, [pc, #140]	; (8014600 <vTaskStartScheduler+0xc0>)
 8014572:	f7ff fe05 	bl	8014180 <xTaskCreateStatic>
 8014576:	4603      	mov	r3, r0
 8014578:	4a22      	ldr	r2, [pc, #136]	; (8014604 <vTaskStartScheduler+0xc4>)
 801457a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801457c:	4b21      	ldr	r3, [pc, #132]	; (8014604 <vTaskStartScheduler+0xc4>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d002      	beq.n	801458a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014584:	2301      	movs	r3, #1
 8014586:	617b      	str	r3, [r7, #20]
 8014588:	e001      	b.n	801458e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801458a:	2300      	movs	r3, #0
 801458c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801458e:	697b      	ldr	r3, [r7, #20]
 8014590:	2b01      	cmp	r3, #1
 8014592:	d102      	bne.n	801459a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014594:	f000 fe18 	bl	80151c8 <xTimerCreateTimerTask>
 8014598:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801459a:	697b      	ldr	r3, [r7, #20]
 801459c:	2b01      	cmp	r3, #1
 801459e:	d118      	bne.n	80145d2 <vTaskStartScheduler+0x92>
	__asm volatile
 80145a0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80145a4:	b672      	cpsid	i
 80145a6:	f383 8811 	msr	BASEPRI, r3
 80145aa:	f3bf 8f6f 	isb	sy
 80145ae:	f3bf 8f4f 	dsb	sy
 80145b2:	b662      	cpsie	i
 80145b4:	613b      	str	r3, [r7, #16]
}
 80145b6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80145b8:	4b13      	ldr	r3, [pc, #76]	; (8014608 <vTaskStartScheduler+0xc8>)
 80145ba:	f04f 32ff 	mov.w	r2, #4294967295
 80145be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80145c0:	4b12      	ldr	r3, [pc, #72]	; (801460c <vTaskStartScheduler+0xcc>)
 80145c2:	2201      	movs	r2, #1
 80145c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80145c6:	4b12      	ldr	r3, [pc, #72]	; (8014610 <vTaskStartScheduler+0xd0>)
 80145c8:	2200      	movs	r2, #0
 80145ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80145cc:	f7fe fbd8 	bl	8012d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80145d0:	e010      	b.n	80145f4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145d8:	d10c      	bne.n	80145f4 <vTaskStartScheduler+0xb4>
	__asm volatile
 80145da:	f04f 0330 	mov.w	r3, #48	; 0x30
 80145de:	b672      	cpsid	i
 80145e0:	f383 8811 	msr	BASEPRI, r3
 80145e4:	f3bf 8f6f 	isb	sy
 80145e8:	f3bf 8f4f 	dsb	sy
 80145ec:	b662      	cpsie	i
 80145ee:	60fb      	str	r3, [r7, #12]
}
 80145f0:	bf00      	nop
 80145f2:	e7fe      	b.n	80145f2 <vTaskStartScheduler+0xb2>
}
 80145f4:	bf00      	nop
 80145f6:	3718      	adds	r7, #24
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}
 80145fc:	0802be2c 	.word	0x0802be2c
 8014600:	08014c4d 	.word	0x08014c4d
 8014604:	2005663c 	.word	0x2005663c
 8014608:	20056638 	.word	0x20056638
 801460c:	20056624 	.word	0x20056624
 8014610:	2005661c 	.word	0x2005661c

08014614 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014614:	b480      	push	{r7}
 8014616:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014618:	4b04      	ldr	r3, [pc, #16]	; (801462c <vTaskSuspendAll+0x18>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	3301      	adds	r3, #1
 801461e:	4a03      	ldr	r2, [pc, #12]	; (801462c <vTaskSuspendAll+0x18>)
 8014620:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014622:	bf00      	nop
 8014624:	46bd      	mov	sp, r7
 8014626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462a:	4770      	bx	lr
 801462c:	20056640 	.word	0x20056640

08014630 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b084      	sub	sp, #16
 8014634:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014636:	2300      	movs	r3, #0
 8014638:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801463a:	2300      	movs	r3, #0
 801463c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801463e:	4b43      	ldr	r3, [pc, #268]	; (801474c <xTaskResumeAll+0x11c>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d10c      	bne.n	8014660 <xTaskResumeAll+0x30>
	__asm volatile
 8014646:	f04f 0330 	mov.w	r3, #48	; 0x30
 801464a:	b672      	cpsid	i
 801464c:	f383 8811 	msr	BASEPRI, r3
 8014650:	f3bf 8f6f 	isb	sy
 8014654:	f3bf 8f4f 	dsb	sy
 8014658:	b662      	cpsie	i
 801465a:	603b      	str	r3, [r7, #0]
}
 801465c:	bf00      	nop
 801465e:	e7fe      	b.n	801465e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014660:	f7fe fc0c 	bl	8012e7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014664:	4b39      	ldr	r3, [pc, #228]	; (801474c <xTaskResumeAll+0x11c>)
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	3b01      	subs	r3, #1
 801466a:	4a38      	ldr	r2, [pc, #224]	; (801474c <xTaskResumeAll+0x11c>)
 801466c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801466e:	4b37      	ldr	r3, [pc, #220]	; (801474c <xTaskResumeAll+0x11c>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d162      	bne.n	801473c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014676:	4b36      	ldr	r3, [pc, #216]	; (8014750 <xTaskResumeAll+0x120>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d05e      	beq.n	801473c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801467e:	e02f      	b.n	80146e0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014680:	4b34      	ldr	r3, [pc, #208]	; (8014754 <xTaskResumeAll+0x124>)
 8014682:	68db      	ldr	r3, [r3, #12]
 8014684:	68db      	ldr	r3, [r3, #12]
 8014686:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	3318      	adds	r3, #24
 801468c:	4618      	mov	r0, r3
 801468e:	f7fe fabd 	bl	8012c0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	3304      	adds	r3, #4
 8014696:	4618      	mov	r0, r3
 8014698:	f7fe fab8 	bl	8012c0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146a0:	4b2d      	ldr	r3, [pc, #180]	; (8014758 <xTaskResumeAll+0x128>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	429a      	cmp	r2, r3
 80146a6:	d903      	bls.n	80146b0 <xTaskResumeAll+0x80>
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146ac:	4a2a      	ldr	r2, [pc, #168]	; (8014758 <xTaskResumeAll+0x128>)
 80146ae:	6013      	str	r3, [r2, #0]
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146b4:	4613      	mov	r3, r2
 80146b6:	009b      	lsls	r3, r3, #2
 80146b8:	4413      	add	r3, r2
 80146ba:	009b      	lsls	r3, r3, #2
 80146bc:	4a27      	ldr	r2, [pc, #156]	; (801475c <xTaskResumeAll+0x12c>)
 80146be:	441a      	add	r2, r3
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	3304      	adds	r3, #4
 80146c4:	4619      	mov	r1, r3
 80146c6:	4610      	mov	r0, r2
 80146c8:	f7fe fa43 	bl	8012b52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146d0:	4b23      	ldr	r3, [pc, #140]	; (8014760 <xTaskResumeAll+0x130>)
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146d6:	429a      	cmp	r2, r3
 80146d8:	d302      	bcc.n	80146e0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80146da:	4b22      	ldr	r3, [pc, #136]	; (8014764 <xTaskResumeAll+0x134>)
 80146dc:	2201      	movs	r2, #1
 80146de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80146e0:	4b1c      	ldr	r3, [pc, #112]	; (8014754 <xTaskResumeAll+0x124>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d1cb      	bne.n	8014680 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d001      	beq.n	80146f2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80146ee:	f000 fb65 	bl	8014dbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80146f2:	4b1d      	ldr	r3, [pc, #116]	; (8014768 <xTaskResumeAll+0x138>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d010      	beq.n	8014720 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80146fe:	f000 f847 	bl	8014790 <xTaskIncrementTick>
 8014702:	4603      	mov	r3, r0
 8014704:	2b00      	cmp	r3, #0
 8014706:	d002      	beq.n	801470e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8014708:	4b16      	ldr	r3, [pc, #88]	; (8014764 <xTaskResumeAll+0x134>)
 801470a:	2201      	movs	r2, #1
 801470c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	3b01      	subs	r3, #1
 8014712:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d1f1      	bne.n	80146fe <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 801471a:	4b13      	ldr	r3, [pc, #76]	; (8014768 <xTaskResumeAll+0x138>)
 801471c:	2200      	movs	r2, #0
 801471e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014720:	4b10      	ldr	r3, [pc, #64]	; (8014764 <xTaskResumeAll+0x134>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d009      	beq.n	801473c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014728:	2301      	movs	r3, #1
 801472a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801472c:	4b0f      	ldr	r3, [pc, #60]	; (801476c <xTaskResumeAll+0x13c>)
 801472e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014732:	601a      	str	r2, [r3, #0]
 8014734:	f3bf 8f4f 	dsb	sy
 8014738:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801473c:	f7fe fbd2 	bl	8012ee4 <vPortExitCritical>

	return xAlreadyYielded;
 8014740:	68bb      	ldr	r3, [r7, #8]
}
 8014742:	4618      	mov	r0, r3
 8014744:	3710      	adds	r7, #16
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}
 801474a:	bf00      	nop
 801474c:	20056640 	.word	0x20056640
 8014750:	20056618 	.word	0x20056618
 8014754:	200565d8 	.word	0x200565d8
 8014758:	20056620 	.word	0x20056620
 801475c:	20056148 	.word	0x20056148
 8014760:	20056144 	.word	0x20056144
 8014764:	2005662c 	.word	0x2005662c
 8014768:	20056628 	.word	0x20056628
 801476c:	e000ed04 	.word	0xe000ed04

08014770 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014770:	b480      	push	{r7}
 8014772:	b083      	sub	sp, #12
 8014774:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014776:	4b05      	ldr	r3, [pc, #20]	; (801478c <xTaskGetTickCount+0x1c>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801477c:	687b      	ldr	r3, [r7, #4]
}
 801477e:	4618      	mov	r0, r3
 8014780:	370c      	adds	r7, #12
 8014782:	46bd      	mov	sp, r7
 8014784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014788:	4770      	bx	lr
 801478a:	bf00      	nop
 801478c:	2005661c 	.word	0x2005661c

08014790 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b086      	sub	sp, #24
 8014794:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014796:	2300      	movs	r3, #0
 8014798:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801479a:	4b50      	ldr	r3, [pc, #320]	; (80148dc <xTaskIncrementTick+0x14c>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	f040 808b 	bne.w	80148ba <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80147a4:	4b4e      	ldr	r3, [pc, #312]	; (80148e0 <xTaskIncrementTick+0x150>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	3301      	adds	r3, #1
 80147aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80147ac:	4a4c      	ldr	r2, [pc, #304]	; (80148e0 <xTaskIncrementTick+0x150>)
 80147ae:	693b      	ldr	r3, [r7, #16]
 80147b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80147b2:	693b      	ldr	r3, [r7, #16]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d122      	bne.n	80147fe <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80147b8:	4b4a      	ldr	r3, [pc, #296]	; (80148e4 <xTaskIncrementTick+0x154>)
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d00c      	beq.n	80147dc <xTaskIncrementTick+0x4c>
	__asm volatile
 80147c2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80147c6:	b672      	cpsid	i
 80147c8:	f383 8811 	msr	BASEPRI, r3
 80147cc:	f3bf 8f6f 	isb	sy
 80147d0:	f3bf 8f4f 	dsb	sy
 80147d4:	b662      	cpsie	i
 80147d6:	603b      	str	r3, [r7, #0]
}
 80147d8:	bf00      	nop
 80147da:	e7fe      	b.n	80147da <xTaskIncrementTick+0x4a>
 80147dc:	4b41      	ldr	r3, [pc, #260]	; (80148e4 <xTaskIncrementTick+0x154>)
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	60fb      	str	r3, [r7, #12]
 80147e2:	4b41      	ldr	r3, [pc, #260]	; (80148e8 <xTaskIncrementTick+0x158>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	4a3f      	ldr	r2, [pc, #252]	; (80148e4 <xTaskIncrementTick+0x154>)
 80147e8:	6013      	str	r3, [r2, #0]
 80147ea:	4a3f      	ldr	r2, [pc, #252]	; (80148e8 <xTaskIncrementTick+0x158>)
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	6013      	str	r3, [r2, #0]
 80147f0:	4b3e      	ldr	r3, [pc, #248]	; (80148ec <xTaskIncrementTick+0x15c>)
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	3301      	adds	r3, #1
 80147f6:	4a3d      	ldr	r2, [pc, #244]	; (80148ec <xTaskIncrementTick+0x15c>)
 80147f8:	6013      	str	r3, [r2, #0]
 80147fa:	f000 fadf 	bl	8014dbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80147fe:	4b3c      	ldr	r3, [pc, #240]	; (80148f0 <xTaskIncrementTick+0x160>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	693a      	ldr	r2, [r7, #16]
 8014804:	429a      	cmp	r2, r3
 8014806:	d349      	bcc.n	801489c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014808:	4b36      	ldr	r3, [pc, #216]	; (80148e4 <xTaskIncrementTick+0x154>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d104      	bne.n	801481c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014812:	4b37      	ldr	r3, [pc, #220]	; (80148f0 <xTaskIncrementTick+0x160>)
 8014814:	f04f 32ff 	mov.w	r2, #4294967295
 8014818:	601a      	str	r2, [r3, #0]
					break;
 801481a:	e03f      	b.n	801489c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801481c:	4b31      	ldr	r3, [pc, #196]	; (80148e4 <xTaskIncrementTick+0x154>)
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	68db      	ldr	r3, [r3, #12]
 8014822:	68db      	ldr	r3, [r3, #12]
 8014824:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014826:	68bb      	ldr	r3, [r7, #8]
 8014828:	685b      	ldr	r3, [r3, #4]
 801482a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801482c:	693a      	ldr	r2, [r7, #16]
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	429a      	cmp	r2, r3
 8014832:	d203      	bcs.n	801483c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014834:	4a2e      	ldr	r2, [pc, #184]	; (80148f0 <xTaskIncrementTick+0x160>)
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801483a:	e02f      	b.n	801489c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801483c:	68bb      	ldr	r3, [r7, #8]
 801483e:	3304      	adds	r3, #4
 8014840:	4618      	mov	r0, r3
 8014842:	f7fe f9e3 	bl	8012c0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014846:	68bb      	ldr	r3, [r7, #8]
 8014848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801484a:	2b00      	cmp	r3, #0
 801484c:	d004      	beq.n	8014858 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	3318      	adds	r3, #24
 8014852:	4618      	mov	r0, r3
 8014854:	f7fe f9da 	bl	8012c0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014858:	68bb      	ldr	r3, [r7, #8]
 801485a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801485c:	4b25      	ldr	r3, [pc, #148]	; (80148f4 <xTaskIncrementTick+0x164>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	429a      	cmp	r2, r3
 8014862:	d903      	bls.n	801486c <xTaskIncrementTick+0xdc>
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014868:	4a22      	ldr	r2, [pc, #136]	; (80148f4 <xTaskIncrementTick+0x164>)
 801486a:	6013      	str	r3, [r2, #0]
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014870:	4613      	mov	r3, r2
 8014872:	009b      	lsls	r3, r3, #2
 8014874:	4413      	add	r3, r2
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	4a1f      	ldr	r2, [pc, #124]	; (80148f8 <xTaskIncrementTick+0x168>)
 801487a:	441a      	add	r2, r3
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	3304      	adds	r3, #4
 8014880:	4619      	mov	r1, r3
 8014882:	4610      	mov	r0, r2
 8014884:	f7fe f965 	bl	8012b52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801488c:	4b1b      	ldr	r3, [pc, #108]	; (80148fc <xTaskIncrementTick+0x16c>)
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014892:	429a      	cmp	r2, r3
 8014894:	d3b8      	bcc.n	8014808 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8014896:	2301      	movs	r3, #1
 8014898:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801489a:	e7b5      	b.n	8014808 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801489c:	4b17      	ldr	r3, [pc, #92]	; (80148fc <xTaskIncrementTick+0x16c>)
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148a2:	4915      	ldr	r1, [pc, #84]	; (80148f8 <xTaskIncrementTick+0x168>)
 80148a4:	4613      	mov	r3, r2
 80148a6:	009b      	lsls	r3, r3, #2
 80148a8:	4413      	add	r3, r2
 80148aa:	009b      	lsls	r3, r3, #2
 80148ac:	440b      	add	r3, r1
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	2b01      	cmp	r3, #1
 80148b2:	d907      	bls.n	80148c4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80148b4:	2301      	movs	r3, #1
 80148b6:	617b      	str	r3, [r7, #20]
 80148b8:	e004      	b.n	80148c4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80148ba:	4b11      	ldr	r3, [pc, #68]	; (8014900 <xTaskIncrementTick+0x170>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	3301      	adds	r3, #1
 80148c0:	4a0f      	ldr	r2, [pc, #60]	; (8014900 <xTaskIncrementTick+0x170>)
 80148c2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80148c4:	4b0f      	ldr	r3, [pc, #60]	; (8014904 <xTaskIncrementTick+0x174>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d001      	beq.n	80148d0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80148cc:	2301      	movs	r3, #1
 80148ce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80148d0:	697b      	ldr	r3, [r7, #20]
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	3718      	adds	r7, #24
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	bf00      	nop
 80148dc:	20056640 	.word	0x20056640
 80148e0:	2005661c 	.word	0x2005661c
 80148e4:	200565d0 	.word	0x200565d0
 80148e8:	200565d4 	.word	0x200565d4
 80148ec:	20056630 	.word	0x20056630
 80148f0:	20056638 	.word	0x20056638
 80148f4:	20056620 	.word	0x20056620
 80148f8:	20056148 	.word	0x20056148
 80148fc:	20056144 	.word	0x20056144
 8014900:	20056628 	.word	0x20056628
 8014904:	2005662c 	.word	0x2005662c

08014908 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014908:	b480      	push	{r7}
 801490a:	b085      	sub	sp, #20
 801490c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801490e:	4b29      	ldr	r3, [pc, #164]	; (80149b4 <vTaskSwitchContext+0xac>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d003      	beq.n	801491e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014916:	4b28      	ldr	r3, [pc, #160]	; (80149b8 <vTaskSwitchContext+0xb0>)
 8014918:	2201      	movs	r2, #1
 801491a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801491c:	e043      	b.n	80149a6 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 801491e:	4b26      	ldr	r3, [pc, #152]	; (80149b8 <vTaskSwitchContext+0xb0>)
 8014920:	2200      	movs	r2, #0
 8014922:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014924:	4b25      	ldr	r3, [pc, #148]	; (80149bc <vTaskSwitchContext+0xb4>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	60fb      	str	r3, [r7, #12]
 801492a:	e012      	b.n	8014952 <vTaskSwitchContext+0x4a>
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d10c      	bne.n	801494c <vTaskSwitchContext+0x44>
	__asm volatile
 8014932:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014936:	b672      	cpsid	i
 8014938:	f383 8811 	msr	BASEPRI, r3
 801493c:	f3bf 8f6f 	isb	sy
 8014940:	f3bf 8f4f 	dsb	sy
 8014944:	b662      	cpsie	i
 8014946:	607b      	str	r3, [r7, #4]
}
 8014948:	bf00      	nop
 801494a:	e7fe      	b.n	801494a <vTaskSwitchContext+0x42>
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	3b01      	subs	r3, #1
 8014950:	60fb      	str	r3, [r7, #12]
 8014952:	491b      	ldr	r1, [pc, #108]	; (80149c0 <vTaskSwitchContext+0xb8>)
 8014954:	68fa      	ldr	r2, [r7, #12]
 8014956:	4613      	mov	r3, r2
 8014958:	009b      	lsls	r3, r3, #2
 801495a:	4413      	add	r3, r2
 801495c:	009b      	lsls	r3, r3, #2
 801495e:	440b      	add	r3, r1
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d0e2      	beq.n	801492c <vTaskSwitchContext+0x24>
 8014966:	68fa      	ldr	r2, [r7, #12]
 8014968:	4613      	mov	r3, r2
 801496a:	009b      	lsls	r3, r3, #2
 801496c:	4413      	add	r3, r2
 801496e:	009b      	lsls	r3, r3, #2
 8014970:	4a13      	ldr	r2, [pc, #76]	; (80149c0 <vTaskSwitchContext+0xb8>)
 8014972:	4413      	add	r3, r2
 8014974:	60bb      	str	r3, [r7, #8]
 8014976:	68bb      	ldr	r3, [r7, #8]
 8014978:	685b      	ldr	r3, [r3, #4]
 801497a:	685a      	ldr	r2, [r3, #4]
 801497c:	68bb      	ldr	r3, [r7, #8]
 801497e:	605a      	str	r2, [r3, #4]
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	685a      	ldr	r2, [r3, #4]
 8014984:	68bb      	ldr	r3, [r7, #8]
 8014986:	3308      	adds	r3, #8
 8014988:	429a      	cmp	r2, r3
 801498a:	d104      	bne.n	8014996 <vTaskSwitchContext+0x8e>
 801498c:	68bb      	ldr	r3, [r7, #8]
 801498e:	685b      	ldr	r3, [r3, #4]
 8014990:	685a      	ldr	r2, [r3, #4]
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	605a      	str	r2, [r3, #4]
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	685b      	ldr	r3, [r3, #4]
 801499a:	68db      	ldr	r3, [r3, #12]
 801499c:	4a09      	ldr	r2, [pc, #36]	; (80149c4 <vTaskSwitchContext+0xbc>)
 801499e:	6013      	str	r3, [r2, #0]
 80149a0:	4a06      	ldr	r2, [pc, #24]	; (80149bc <vTaskSwitchContext+0xb4>)
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	6013      	str	r3, [r2, #0]
}
 80149a6:	bf00      	nop
 80149a8:	3714      	adds	r7, #20
 80149aa:	46bd      	mov	sp, r7
 80149ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b0:	4770      	bx	lr
 80149b2:	bf00      	nop
 80149b4:	20056640 	.word	0x20056640
 80149b8:	2005662c 	.word	0x2005662c
 80149bc:	20056620 	.word	0x20056620
 80149c0:	20056148 	.word	0x20056148
 80149c4:	20056144 	.word	0x20056144

080149c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b084      	sub	sp, #16
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
 80149d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d10c      	bne.n	80149f2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80149d8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80149dc:	b672      	cpsid	i
 80149de:	f383 8811 	msr	BASEPRI, r3
 80149e2:	f3bf 8f6f 	isb	sy
 80149e6:	f3bf 8f4f 	dsb	sy
 80149ea:	b662      	cpsie	i
 80149ec:	60fb      	str	r3, [r7, #12]
}
 80149ee:	bf00      	nop
 80149f0:	e7fe      	b.n	80149f0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80149f2:	4b07      	ldr	r3, [pc, #28]	; (8014a10 <vTaskPlaceOnEventList+0x48>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	3318      	adds	r3, #24
 80149f8:	4619      	mov	r1, r3
 80149fa:	6878      	ldr	r0, [r7, #4]
 80149fc:	f7fe f8cd 	bl	8012b9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014a00:	2101      	movs	r1, #1
 8014a02:	6838      	ldr	r0, [r7, #0]
 8014a04:	f000 fb8c 	bl	8015120 <prvAddCurrentTaskToDelayedList>
}
 8014a08:	bf00      	nop
 8014a0a:	3710      	adds	r7, #16
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd80      	pop	{r7, pc}
 8014a10:	20056144 	.word	0x20056144

08014a14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b086      	sub	sp, #24
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	60f8      	str	r0, [r7, #12]
 8014a1c:	60b9      	str	r1, [r7, #8]
 8014a1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d10c      	bne.n	8014a40 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8014a26:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014a2a:	b672      	cpsid	i
 8014a2c:	f383 8811 	msr	BASEPRI, r3
 8014a30:	f3bf 8f6f 	isb	sy
 8014a34:	f3bf 8f4f 	dsb	sy
 8014a38:	b662      	cpsie	i
 8014a3a:	617b      	str	r3, [r7, #20]
}
 8014a3c:	bf00      	nop
 8014a3e:	e7fe      	b.n	8014a3e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014a40:	4b0a      	ldr	r3, [pc, #40]	; (8014a6c <vTaskPlaceOnEventListRestricted+0x58>)
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	3318      	adds	r3, #24
 8014a46:	4619      	mov	r1, r3
 8014a48:	68f8      	ldr	r0, [r7, #12]
 8014a4a:	f7fe f882 	bl	8012b52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d002      	beq.n	8014a5a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8014a54:	f04f 33ff 	mov.w	r3, #4294967295
 8014a58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014a5a:	6879      	ldr	r1, [r7, #4]
 8014a5c:	68b8      	ldr	r0, [r7, #8]
 8014a5e:	f000 fb5f 	bl	8015120 <prvAddCurrentTaskToDelayedList>
	}
 8014a62:	bf00      	nop
 8014a64:	3718      	adds	r7, #24
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}
 8014a6a:	bf00      	nop
 8014a6c:	20056144 	.word	0x20056144

08014a70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b086      	sub	sp, #24
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	68db      	ldr	r3, [r3, #12]
 8014a7c:	68db      	ldr	r3, [r3, #12]
 8014a7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014a80:	693b      	ldr	r3, [r7, #16]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d10c      	bne.n	8014aa0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8014a86:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014a8a:	b672      	cpsid	i
 8014a8c:	f383 8811 	msr	BASEPRI, r3
 8014a90:	f3bf 8f6f 	isb	sy
 8014a94:	f3bf 8f4f 	dsb	sy
 8014a98:	b662      	cpsie	i
 8014a9a:	60fb      	str	r3, [r7, #12]
}
 8014a9c:	bf00      	nop
 8014a9e:	e7fe      	b.n	8014a9e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014aa0:	693b      	ldr	r3, [r7, #16]
 8014aa2:	3318      	adds	r3, #24
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	f7fe f8b1 	bl	8012c0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014aaa:	4b1e      	ldr	r3, [pc, #120]	; (8014b24 <xTaskRemoveFromEventList+0xb4>)
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d11d      	bne.n	8014aee <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014ab2:	693b      	ldr	r3, [r7, #16]
 8014ab4:	3304      	adds	r3, #4
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f7fe f8a8 	bl	8012c0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014abc:	693b      	ldr	r3, [r7, #16]
 8014abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ac0:	4b19      	ldr	r3, [pc, #100]	; (8014b28 <xTaskRemoveFromEventList+0xb8>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	d903      	bls.n	8014ad0 <xTaskRemoveFromEventList+0x60>
 8014ac8:	693b      	ldr	r3, [r7, #16]
 8014aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014acc:	4a16      	ldr	r2, [pc, #88]	; (8014b28 <xTaskRemoveFromEventList+0xb8>)
 8014ace:	6013      	str	r3, [r2, #0]
 8014ad0:	693b      	ldr	r3, [r7, #16]
 8014ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ad4:	4613      	mov	r3, r2
 8014ad6:	009b      	lsls	r3, r3, #2
 8014ad8:	4413      	add	r3, r2
 8014ada:	009b      	lsls	r3, r3, #2
 8014adc:	4a13      	ldr	r2, [pc, #76]	; (8014b2c <xTaskRemoveFromEventList+0xbc>)
 8014ade:	441a      	add	r2, r3
 8014ae0:	693b      	ldr	r3, [r7, #16]
 8014ae2:	3304      	adds	r3, #4
 8014ae4:	4619      	mov	r1, r3
 8014ae6:	4610      	mov	r0, r2
 8014ae8:	f7fe f833 	bl	8012b52 <vListInsertEnd>
 8014aec:	e005      	b.n	8014afa <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014aee:	693b      	ldr	r3, [r7, #16]
 8014af0:	3318      	adds	r3, #24
 8014af2:	4619      	mov	r1, r3
 8014af4:	480e      	ldr	r0, [pc, #56]	; (8014b30 <xTaskRemoveFromEventList+0xc0>)
 8014af6:	f7fe f82c 	bl	8012b52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014afa:	693b      	ldr	r3, [r7, #16]
 8014afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014afe:	4b0d      	ldr	r3, [pc, #52]	; (8014b34 <xTaskRemoveFromEventList+0xc4>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d905      	bls.n	8014b14 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014b08:	2301      	movs	r3, #1
 8014b0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014b0c:	4b0a      	ldr	r3, [pc, #40]	; (8014b38 <xTaskRemoveFromEventList+0xc8>)
 8014b0e:	2201      	movs	r2, #1
 8014b10:	601a      	str	r2, [r3, #0]
 8014b12:	e001      	b.n	8014b18 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8014b14:	2300      	movs	r3, #0
 8014b16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014b18:	697b      	ldr	r3, [r7, #20]
}
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	3718      	adds	r7, #24
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd80      	pop	{r7, pc}
 8014b22:	bf00      	nop
 8014b24:	20056640 	.word	0x20056640
 8014b28:	20056620 	.word	0x20056620
 8014b2c:	20056148 	.word	0x20056148
 8014b30:	200565d8 	.word	0x200565d8
 8014b34:	20056144 	.word	0x20056144
 8014b38:	2005662c 	.word	0x2005662c

08014b3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014b3c:	b480      	push	{r7}
 8014b3e:	b083      	sub	sp, #12
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014b44:	4b06      	ldr	r3, [pc, #24]	; (8014b60 <vTaskInternalSetTimeOutState+0x24>)
 8014b46:	681a      	ldr	r2, [r3, #0]
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014b4c:	4b05      	ldr	r3, [pc, #20]	; (8014b64 <vTaskInternalSetTimeOutState+0x28>)
 8014b4e:	681a      	ldr	r2, [r3, #0]
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	605a      	str	r2, [r3, #4]
}
 8014b54:	bf00      	nop
 8014b56:	370c      	adds	r7, #12
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5e:	4770      	bx	lr
 8014b60:	20056630 	.word	0x20056630
 8014b64:	2005661c 	.word	0x2005661c

08014b68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b088      	sub	sp, #32
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d10c      	bne.n	8014b92 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8014b78:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b7c:	b672      	cpsid	i
 8014b7e:	f383 8811 	msr	BASEPRI, r3
 8014b82:	f3bf 8f6f 	isb	sy
 8014b86:	f3bf 8f4f 	dsb	sy
 8014b8a:	b662      	cpsie	i
 8014b8c:	613b      	str	r3, [r7, #16]
}
 8014b8e:	bf00      	nop
 8014b90:	e7fe      	b.n	8014b90 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d10c      	bne.n	8014bb2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8014b98:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b9c:	b672      	cpsid	i
 8014b9e:	f383 8811 	msr	BASEPRI, r3
 8014ba2:	f3bf 8f6f 	isb	sy
 8014ba6:	f3bf 8f4f 	dsb	sy
 8014baa:	b662      	cpsie	i
 8014bac:	60fb      	str	r3, [r7, #12]
}
 8014bae:	bf00      	nop
 8014bb0:	e7fe      	b.n	8014bb0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8014bb2:	f7fe f963 	bl	8012e7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014bb6:	4b1d      	ldr	r3, [pc, #116]	; (8014c2c <xTaskCheckForTimeOut+0xc4>)
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	685b      	ldr	r3, [r3, #4]
 8014bc0:	69ba      	ldr	r2, [r7, #24]
 8014bc2:	1ad3      	subs	r3, r2, r3
 8014bc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bce:	d102      	bne.n	8014bd6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	61fb      	str	r3, [r7, #28]
 8014bd4:	e023      	b.n	8014c1e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	681a      	ldr	r2, [r3, #0]
 8014bda:	4b15      	ldr	r3, [pc, #84]	; (8014c30 <xTaskCheckForTimeOut+0xc8>)
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	429a      	cmp	r2, r3
 8014be0:	d007      	beq.n	8014bf2 <xTaskCheckForTimeOut+0x8a>
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	685b      	ldr	r3, [r3, #4]
 8014be6:	69ba      	ldr	r2, [r7, #24]
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d302      	bcc.n	8014bf2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014bec:	2301      	movs	r3, #1
 8014bee:	61fb      	str	r3, [r7, #28]
 8014bf0:	e015      	b.n	8014c1e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	697a      	ldr	r2, [r7, #20]
 8014bf8:	429a      	cmp	r2, r3
 8014bfa:	d20b      	bcs.n	8014c14 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014bfc:	683b      	ldr	r3, [r7, #0]
 8014bfe:	681a      	ldr	r2, [r3, #0]
 8014c00:	697b      	ldr	r3, [r7, #20]
 8014c02:	1ad2      	subs	r2, r2, r3
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014c08:	6878      	ldr	r0, [r7, #4]
 8014c0a:	f7ff ff97 	bl	8014b3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014c0e:	2300      	movs	r3, #0
 8014c10:	61fb      	str	r3, [r7, #28]
 8014c12:	e004      	b.n	8014c1e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8014c14:	683b      	ldr	r3, [r7, #0]
 8014c16:	2200      	movs	r2, #0
 8014c18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014c1e:	f7fe f961 	bl	8012ee4 <vPortExitCritical>

	return xReturn;
 8014c22:	69fb      	ldr	r3, [r7, #28]
}
 8014c24:	4618      	mov	r0, r3
 8014c26:	3720      	adds	r7, #32
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}
 8014c2c:	2005661c 	.word	0x2005661c
 8014c30:	20056630 	.word	0x20056630

08014c34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014c34:	b480      	push	{r7}
 8014c36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014c38:	4b03      	ldr	r3, [pc, #12]	; (8014c48 <vTaskMissedYield+0x14>)
 8014c3a:	2201      	movs	r2, #1
 8014c3c:	601a      	str	r2, [r3, #0]
}
 8014c3e:	bf00      	nop
 8014c40:	46bd      	mov	sp, r7
 8014c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c46:	4770      	bx	lr
 8014c48:	2005662c 	.word	0x2005662c

08014c4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b082      	sub	sp, #8
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014c54:	f000 f852 	bl	8014cfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014c58:	4b06      	ldr	r3, [pc, #24]	; (8014c74 <prvIdleTask+0x28>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	2b01      	cmp	r3, #1
 8014c5e:	d9f9      	bls.n	8014c54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014c60:	4b05      	ldr	r3, [pc, #20]	; (8014c78 <prvIdleTask+0x2c>)
 8014c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c66:	601a      	str	r2, [r3, #0]
 8014c68:	f3bf 8f4f 	dsb	sy
 8014c6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014c70:	e7f0      	b.n	8014c54 <prvIdleTask+0x8>
 8014c72:	bf00      	nop
 8014c74:	20056148 	.word	0x20056148
 8014c78:	e000ed04 	.word	0xe000ed04

08014c7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b082      	sub	sp, #8
 8014c80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014c82:	2300      	movs	r3, #0
 8014c84:	607b      	str	r3, [r7, #4]
 8014c86:	e00c      	b.n	8014ca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014c88:	687a      	ldr	r2, [r7, #4]
 8014c8a:	4613      	mov	r3, r2
 8014c8c:	009b      	lsls	r3, r3, #2
 8014c8e:	4413      	add	r3, r2
 8014c90:	009b      	lsls	r3, r3, #2
 8014c92:	4a12      	ldr	r2, [pc, #72]	; (8014cdc <prvInitialiseTaskLists+0x60>)
 8014c94:	4413      	add	r3, r2
 8014c96:	4618      	mov	r0, r3
 8014c98:	f7fd ff2e 	bl	8012af8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	3301      	adds	r3, #1
 8014ca0:	607b      	str	r3, [r7, #4]
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	2b37      	cmp	r3, #55	; 0x37
 8014ca6:	d9ef      	bls.n	8014c88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014ca8:	480d      	ldr	r0, [pc, #52]	; (8014ce0 <prvInitialiseTaskLists+0x64>)
 8014caa:	f7fd ff25 	bl	8012af8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014cae:	480d      	ldr	r0, [pc, #52]	; (8014ce4 <prvInitialiseTaskLists+0x68>)
 8014cb0:	f7fd ff22 	bl	8012af8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014cb4:	480c      	ldr	r0, [pc, #48]	; (8014ce8 <prvInitialiseTaskLists+0x6c>)
 8014cb6:	f7fd ff1f 	bl	8012af8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014cba:	480c      	ldr	r0, [pc, #48]	; (8014cec <prvInitialiseTaskLists+0x70>)
 8014cbc:	f7fd ff1c 	bl	8012af8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014cc0:	480b      	ldr	r0, [pc, #44]	; (8014cf0 <prvInitialiseTaskLists+0x74>)
 8014cc2:	f7fd ff19 	bl	8012af8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014cc6:	4b0b      	ldr	r3, [pc, #44]	; (8014cf4 <prvInitialiseTaskLists+0x78>)
 8014cc8:	4a05      	ldr	r2, [pc, #20]	; (8014ce0 <prvInitialiseTaskLists+0x64>)
 8014cca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014ccc:	4b0a      	ldr	r3, [pc, #40]	; (8014cf8 <prvInitialiseTaskLists+0x7c>)
 8014cce:	4a05      	ldr	r2, [pc, #20]	; (8014ce4 <prvInitialiseTaskLists+0x68>)
 8014cd0:	601a      	str	r2, [r3, #0]
}
 8014cd2:	bf00      	nop
 8014cd4:	3708      	adds	r7, #8
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd80      	pop	{r7, pc}
 8014cda:	bf00      	nop
 8014cdc:	20056148 	.word	0x20056148
 8014ce0:	200565a8 	.word	0x200565a8
 8014ce4:	200565bc 	.word	0x200565bc
 8014ce8:	200565d8 	.word	0x200565d8
 8014cec:	200565ec 	.word	0x200565ec
 8014cf0:	20056604 	.word	0x20056604
 8014cf4:	200565d0 	.word	0x200565d0
 8014cf8:	200565d4 	.word	0x200565d4

08014cfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b082      	sub	sp, #8
 8014d00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014d02:	e019      	b.n	8014d38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014d04:	f7fe f8ba 	bl	8012e7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d08:	4b10      	ldr	r3, [pc, #64]	; (8014d4c <prvCheckTasksWaitingTermination+0x50>)
 8014d0a:	68db      	ldr	r3, [r3, #12]
 8014d0c:	68db      	ldr	r3, [r3, #12]
 8014d0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	3304      	adds	r3, #4
 8014d14:	4618      	mov	r0, r3
 8014d16:	f7fd ff79 	bl	8012c0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014d1a:	4b0d      	ldr	r3, [pc, #52]	; (8014d50 <prvCheckTasksWaitingTermination+0x54>)
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	3b01      	subs	r3, #1
 8014d20:	4a0b      	ldr	r2, [pc, #44]	; (8014d50 <prvCheckTasksWaitingTermination+0x54>)
 8014d22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014d24:	4b0b      	ldr	r3, [pc, #44]	; (8014d54 <prvCheckTasksWaitingTermination+0x58>)
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	3b01      	subs	r3, #1
 8014d2a:	4a0a      	ldr	r2, [pc, #40]	; (8014d54 <prvCheckTasksWaitingTermination+0x58>)
 8014d2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014d2e:	f7fe f8d9 	bl	8012ee4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f000 f810 	bl	8014d58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014d38:	4b06      	ldr	r3, [pc, #24]	; (8014d54 <prvCheckTasksWaitingTermination+0x58>)
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d1e1      	bne.n	8014d04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014d40:	bf00      	nop
 8014d42:	bf00      	nop
 8014d44:	3708      	adds	r7, #8
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bd80      	pop	{r7, pc}
 8014d4a:	bf00      	nop
 8014d4c:	200565ec 	.word	0x200565ec
 8014d50:	20056618 	.word	0x20056618
 8014d54:	20056600 	.word	0x20056600

08014d58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b084      	sub	sp, #16
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d108      	bne.n	8014d7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d6e:	4618      	mov	r0, r3
 8014d70:	f7fd fda8 	bl	80128c4 <vPortFree>
				vPortFree( pxTCB );
 8014d74:	6878      	ldr	r0, [r7, #4]
 8014d76:	f7fd fda5 	bl	80128c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014d7a:	e01a      	b.n	8014db2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014d82:	2b01      	cmp	r3, #1
 8014d84:	d103      	bne.n	8014d8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014d86:	6878      	ldr	r0, [r7, #4]
 8014d88:	f7fd fd9c 	bl	80128c4 <vPortFree>
	}
 8014d8c:	e011      	b.n	8014db2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014d94:	2b02      	cmp	r3, #2
 8014d96:	d00c      	beq.n	8014db2 <prvDeleteTCB+0x5a>
	__asm volatile
 8014d98:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014d9c:	b672      	cpsid	i
 8014d9e:	f383 8811 	msr	BASEPRI, r3
 8014da2:	f3bf 8f6f 	isb	sy
 8014da6:	f3bf 8f4f 	dsb	sy
 8014daa:	b662      	cpsie	i
 8014dac:	60fb      	str	r3, [r7, #12]
}
 8014dae:	bf00      	nop
 8014db0:	e7fe      	b.n	8014db0 <prvDeleteTCB+0x58>
	}
 8014db2:	bf00      	nop
 8014db4:	3710      	adds	r7, #16
 8014db6:	46bd      	mov	sp, r7
 8014db8:	bd80      	pop	{r7, pc}
	...

08014dbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014dbc:	b480      	push	{r7}
 8014dbe:	b083      	sub	sp, #12
 8014dc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014dc2:	4b0c      	ldr	r3, [pc, #48]	; (8014df4 <prvResetNextTaskUnblockTime+0x38>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d104      	bne.n	8014dd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014dcc:	4b0a      	ldr	r3, [pc, #40]	; (8014df8 <prvResetNextTaskUnblockTime+0x3c>)
 8014dce:	f04f 32ff 	mov.w	r2, #4294967295
 8014dd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014dd4:	e008      	b.n	8014de8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014dd6:	4b07      	ldr	r3, [pc, #28]	; (8014df4 <prvResetNextTaskUnblockTime+0x38>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	68db      	ldr	r3, [r3, #12]
 8014ddc:	68db      	ldr	r3, [r3, #12]
 8014dde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	685b      	ldr	r3, [r3, #4]
 8014de4:	4a04      	ldr	r2, [pc, #16]	; (8014df8 <prvResetNextTaskUnblockTime+0x3c>)
 8014de6:	6013      	str	r3, [r2, #0]
}
 8014de8:	bf00      	nop
 8014dea:	370c      	adds	r7, #12
 8014dec:	46bd      	mov	sp, r7
 8014dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df2:	4770      	bx	lr
 8014df4:	200565d0 	.word	0x200565d0
 8014df8:	20056638 	.word	0x20056638

08014dfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014dfc:	b480      	push	{r7}
 8014dfe:	b083      	sub	sp, #12
 8014e00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014e02:	4b0b      	ldr	r3, [pc, #44]	; (8014e30 <xTaskGetSchedulerState+0x34>)
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d102      	bne.n	8014e10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014e0a:	2301      	movs	r3, #1
 8014e0c:	607b      	str	r3, [r7, #4]
 8014e0e:	e008      	b.n	8014e22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014e10:	4b08      	ldr	r3, [pc, #32]	; (8014e34 <xTaskGetSchedulerState+0x38>)
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d102      	bne.n	8014e1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014e18:	2302      	movs	r3, #2
 8014e1a:	607b      	str	r3, [r7, #4]
 8014e1c:	e001      	b.n	8014e22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014e1e:	2300      	movs	r3, #0
 8014e20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014e22:	687b      	ldr	r3, [r7, #4]
	}
 8014e24:	4618      	mov	r0, r3
 8014e26:	370c      	adds	r7, #12
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2e:	4770      	bx	lr
 8014e30:	20056624 	.word	0x20056624
 8014e34:	20056640 	.word	0x20056640

08014e38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b084      	sub	sp, #16
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014e44:	2300      	movs	r3, #0
 8014e46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d051      	beq.n	8014ef2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014e4e:	68bb      	ldr	r3, [r7, #8]
 8014e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e52:	4b2a      	ldr	r3, [pc, #168]	; (8014efc <xTaskPriorityInherit+0xc4>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e58:	429a      	cmp	r2, r3
 8014e5a:	d241      	bcs.n	8014ee0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014e5c:	68bb      	ldr	r3, [r7, #8]
 8014e5e:	699b      	ldr	r3, [r3, #24]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	db06      	blt.n	8014e72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014e64:	4b25      	ldr	r3, [pc, #148]	; (8014efc <xTaskPriorityInherit+0xc4>)
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014e6e:	68bb      	ldr	r3, [r7, #8]
 8014e70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014e72:	68bb      	ldr	r3, [r7, #8]
 8014e74:	6959      	ldr	r1, [r3, #20]
 8014e76:	68bb      	ldr	r3, [r7, #8]
 8014e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e7a:	4613      	mov	r3, r2
 8014e7c:	009b      	lsls	r3, r3, #2
 8014e7e:	4413      	add	r3, r2
 8014e80:	009b      	lsls	r3, r3, #2
 8014e82:	4a1f      	ldr	r2, [pc, #124]	; (8014f00 <xTaskPriorityInherit+0xc8>)
 8014e84:	4413      	add	r3, r2
 8014e86:	4299      	cmp	r1, r3
 8014e88:	d122      	bne.n	8014ed0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e8a:	68bb      	ldr	r3, [r7, #8]
 8014e8c:	3304      	adds	r3, #4
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f7fd febc 	bl	8012c0c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014e94:	4b19      	ldr	r3, [pc, #100]	; (8014efc <xTaskPriorityInherit+0xc4>)
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e9a:	68bb      	ldr	r3, [r7, #8]
 8014e9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014e9e:	68bb      	ldr	r3, [r7, #8]
 8014ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ea2:	4b18      	ldr	r3, [pc, #96]	; (8014f04 <xTaskPriorityInherit+0xcc>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	429a      	cmp	r2, r3
 8014ea8:	d903      	bls.n	8014eb2 <xTaskPriorityInherit+0x7a>
 8014eaa:	68bb      	ldr	r3, [r7, #8]
 8014eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eae:	4a15      	ldr	r2, [pc, #84]	; (8014f04 <xTaskPriorityInherit+0xcc>)
 8014eb0:	6013      	str	r3, [r2, #0]
 8014eb2:	68bb      	ldr	r3, [r7, #8]
 8014eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014eb6:	4613      	mov	r3, r2
 8014eb8:	009b      	lsls	r3, r3, #2
 8014eba:	4413      	add	r3, r2
 8014ebc:	009b      	lsls	r3, r3, #2
 8014ebe:	4a10      	ldr	r2, [pc, #64]	; (8014f00 <xTaskPriorityInherit+0xc8>)
 8014ec0:	441a      	add	r2, r3
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	3304      	adds	r3, #4
 8014ec6:	4619      	mov	r1, r3
 8014ec8:	4610      	mov	r0, r2
 8014eca:	f7fd fe42 	bl	8012b52 <vListInsertEnd>
 8014ece:	e004      	b.n	8014eda <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014ed0:	4b0a      	ldr	r3, [pc, #40]	; (8014efc <xTaskPriorityInherit+0xc4>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014eda:	2301      	movs	r3, #1
 8014edc:	60fb      	str	r3, [r7, #12]
 8014ede:	e008      	b.n	8014ef2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014ee0:	68bb      	ldr	r3, [r7, #8]
 8014ee2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014ee4:	4b05      	ldr	r3, [pc, #20]	; (8014efc <xTaskPriorityInherit+0xc4>)
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eea:	429a      	cmp	r2, r3
 8014eec:	d201      	bcs.n	8014ef2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014eee:	2301      	movs	r3, #1
 8014ef0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014ef2:	68fb      	ldr	r3, [r7, #12]
	}
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	3710      	adds	r7, #16
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	bd80      	pop	{r7, pc}
 8014efc:	20056144 	.word	0x20056144
 8014f00:	20056148 	.word	0x20056148
 8014f04:	20056620 	.word	0x20056620

08014f08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b086      	sub	sp, #24
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014f14:	2300      	movs	r3, #0
 8014f16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d05a      	beq.n	8014fd4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014f1e:	4b30      	ldr	r3, [pc, #192]	; (8014fe0 <xTaskPriorityDisinherit+0xd8>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	693a      	ldr	r2, [r7, #16]
 8014f24:	429a      	cmp	r2, r3
 8014f26:	d00c      	beq.n	8014f42 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8014f28:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014f2c:	b672      	cpsid	i
 8014f2e:	f383 8811 	msr	BASEPRI, r3
 8014f32:	f3bf 8f6f 	isb	sy
 8014f36:	f3bf 8f4f 	dsb	sy
 8014f3a:	b662      	cpsie	i
 8014f3c:	60fb      	str	r3, [r7, #12]
}
 8014f3e:	bf00      	nop
 8014f40:	e7fe      	b.n	8014f40 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8014f42:	693b      	ldr	r3, [r7, #16]
 8014f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d10c      	bne.n	8014f64 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8014f4a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014f4e:	b672      	cpsid	i
 8014f50:	f383 8811 	msr	BASEPRI, r3
 8014f54:	f3bf 8f6f 	isb	sy
 8014f58:	f3bf 8f4f 	dsb	sy
 8014f5c:	b662      	cpsie	i
 8014f5e:	60bb      	str	r3, [r7, #8]
}
 8014f60:	bf00      	nop
 8014f62:	e7fe      	b.n	8014f62 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8014f64:	693b      	ldr	r3, [r7, #16]
 8014f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f68:	1e5a      	subs	r2, r3, #1
 8014f6a:	693b      	ldr	r3, [r7, #16]
 8014f6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014f6e:	693b      	ldr	r3, [r7, #16]
 8014f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f72:	693b      	ldr	r3, [r7, #16]
 8014f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014f76:	429a      	cmp	r2, r3
 8014f78:	d02c      	beq.n	8014fd4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014f7a:	693b      	ldr	r3, [r7, #16]
 8014f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d128      	bne.n	8014fd4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	3304      	adds	r3, #4
 8014f86:	4618      	mov	r0, r3
 8014f88:	f7fd fe40 	bl	8012c0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014f8c:	693b      	ldr	r3, [r7, #16]
 8014f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014f90:	693b      	ldr	r3, [r7, #16]
 8014f92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f94:	693b      	ldr	r3, [r7, #16]
 8014f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014f9c:	693b      	ldr	r3, [r7, #16]
 8014f9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fa4:	4b0f      	ldr	r3, [pc, #60]	; (8014fe4 <xTaskPriorityDisinherit+0xdc>)
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	429a      	cmp	r2, r3
 8014faa:	d903      	bls.n	8014fb4 <xTaskPriorityDisinherit+0xac>
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fb0:	4a0c      	ldr	r2, [pc, #48]	; (8014fe4 <xTaskPriorityDisinherit+0xdc>)
 8014fb2:	6013      	str	r3, [r2, #0]
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fb8:	4613      	mov	r3, r2
 8014fba:	009b      	lsls	r3, r3, #2
 8014fbc:	4413      	add	r3, r2
 8014fbe:	009b      	lsls	r3, r3, #2
 8014fc0:	4a09      	ldr	r2, [pc, #36]	; (8014fe8 <xTaskPriorityDisinherit+0xe0>)
 8014fc2:	441a      	add	r2, r3
 8014fc4:	693b      	ldr	r3, [r7, #16]
 8014fc6:	3304      	adds	r3, #4
 8014fc8:	4619      	mov	r1, r3
 8014fca:	4610      	mov	r0, r2
 8014fcc:	f7fd fdc1 	bl	8012b52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014fd4:	697b      	ldr	r3, [r7, #20]
	}
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	3718      	adds	r7, #24
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}
 8014fde:	bf00      	nop
 8014fe0:	20056144 	.word	0x20056144
 8014fe4:	20056620 	.word	0x20056620
 8014fe8:	20056148 	.word	0x20056148

08014fec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b088      	sub	sp, #32
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
 8014ff4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014ffa:	2301      	movs	r3, #1
 8014ffc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d06e      	beq.n	80150e2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015004:	69bb      	ldr	r3, [r7, #24]
 8015006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015008:	2b00      	cmp	r3, #0
 801500a:	d10c      	bne.n	8015026 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 801500c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015010:	b672      	cpsid	i
 8015012:	f383 8811 	msr	BASEPRI, r3
 8015016:	f3bf 8f6f 	isb	sy
 801501a:	f3bf 8f4f 	dsb	sy
 801501e:	b662      	cpsie	i
 8015020:	60fb      	str	r3, [r7, #12]
}
 8015022:	bf00      	nop
 8015024:	e7fe      	b.n	8015024 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015026:	69bb      	ldr	r3, [r7, #24]
 8015028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801502a:	683a      	ldr	r2, [r7, #0]
 801502c:	429a      	cmp	r2, r3
 801502e:	d902      	bls.n	8015036 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015030:	683b      	ldr	r3, [r7, #0]
 8015032:	61fb      	str	r3, [r7, #28]
 8015034:	e002      	b.n	801503c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015036:	69bb      	ldr	r3, [r7, #24]
 8015038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801503a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801503c:	69bb      	ldr	r3, [r7, #24]
 801503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015040:	69fa      	ldr	r2, [r7, #28]
 8015042:	429a      	cmp	r2, r3
 8015044:	d04d      	beq.n	80150e2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015046:	69bb      	ldr	r3, [r7, #24]
 8015048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801504a:	697a      	ldr	r2, [r7, #20]
 801504c:	429a      	cmp	r2, r3
 801504e:	d148      	bne.n	80150e2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015050:	4b26      	ldr	r3, [pc, #152]	; (80150ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	69ba      	ldr	r2, [r7, #24]
 8015056:	429a      	cmp	r2, r3
 8015058:	d10c      	bne.n	8015074 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 801505a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801505e:	b672      	cpsid	i
 8015060:	f383 8811 	msr	BASEPRI, r3
 8015064:	f3bf 8f6f 	isb	sy
 8015068:	f3bf 8f4f 	dsb	sy
 801506c:	b662      	cpsie	i
 801506e:	60bb      	str	r3, [r7, #8]
}
 8015070:	bf00      	nop
 8015072:	e7fe      	b.n	8015072 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015074:	69bb      	ldr	r3, [r7, #24]
 8015076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015078:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801507a:	69bb      	ldr	r3, [r7, #24]
 801507c:	69fa      	ldr	r2, [r7, #28]
 801507e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015080:	69bb      	ldr	r3, [r7, #24]
 8015082:	699b      	ldr	r3, [r3, #24]
 8015084:	2b00      	cmp	r3, #0
 8015086:	db04      	blt.n	8015092 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015088:	69fb      	ldr	r3, [r7, #28]
 801508a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801508e:	69bb      	ldr	r3, [r7, #24]
 8015090:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015092:	69bb      	ldr	r3, [r7, #24]
 8015094:	6959      	ldr	r1, [r3, #20]
 8015096:	693a      	ldr	r2, [r7, #16]
 8015098:	4613      	mov	r3, r2
 801509a:	009b      	lsls	r3, r3, #2
 801509c:	4413      	add	r3, r2
 801509e:	009b      	lsls	r3, r3, #2
 80150a0:	4a13      	ldr	r2, [pc, #76]	; (80150f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80150a2:	4413      	add	r3, r2
 80150a4:	4299      	cmp	r1, r3
 80150a6:	d11c      	bne.n	80150e2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80150a8:	69bb      	ldr	r3, [r7, #24]
 80150aa:	3304      	adds	r3, #4
 80150ac:	4618      	mov	r0, r3
 80150ae:	f7fd fdad 	bl	8012c0c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80150b2:	69bb      	ldr	r3, [r7, #24]
 80150b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150b6:	4b0f      	ldr	r3, [pc, #60]	; (80150f4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	429a      	cmp	r2, r3
 80150bc:	d903      	bls.n	80150c6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 80150be:	69bb      	ldr	r3, [r7, #24]
 80150c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150c2:	4a0c      	ldr	r2, [pc, #48]	; (80150f4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80150c4:	6013      	str	r3, [r2, #0]
 80150c6:	69bb      	ldr	r3, [r7, #24]
 80150c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150ca:	4613      	mov	r3, r2
 80150cc:	009b      	lsls	r3, r3, #2
 80150ce:	4413      	add	r3, r2
 80150d0:	009b      	lsls	r3, r3, #2
 80150d2:	4a07      	ldr	r2, [pc, #28]	; (80150f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80150d4:	441a      	add	r2, r3
 80150d6:	69bb      	ldr	r3, [r7, #24]
 80150d8:	3304      	adds	r3, #4
 80150da:	4619      	mov	r1, r3
 80150dc:	4610      	mov	r0, r2
 80150de:	f7fd fd38 	bl	8012b52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80150e2:	bf00      	nop
 80150e4:	3720      	adds	r7, #32
 80150e6:	46bd      	mov	sp, r7
 80150e8:	bd80      	pop	{r7, pc}
 80150ea:	bf00      	nop
 80150ec:	20056144 	.word	0x20056144
 80150f0:	20056148 	.word	0x20056148
 80150f4:	20056620 	.word	0x20056620

080150f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80150f8:	b480      	push	{r7}
 80150fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80150fc:	4b07      	ldr	r3, [pc, #28]	; (801511c <pvTaskIncrementMutexHeldCount+0x24>)
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d004      	beq.n	801510e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015104:	4b05      	ldr	r3, [pc, #20]	; (801511c <pvTaskIncrementMutexHeldCount+0x24>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801510a:	3201      	adds	r2, #1
 801510c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801510e:	4b03      	ldr	r3, [pc, #12]	; (801511c <pvTaskIncrementMutexHeldCount+0x24>)
 8015110:	681b      	ldr	r3, [r3, #0]
	}
 8015112:	4618      	mov	r0, r3
 8015114:	46bd      	mov	sp, r7
 8015116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511a:	4770      	bx	lr
 801511c:	20056144 	.word	0x20056144

08015120 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b084      	sub	sp, #16
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
 8015128:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801512a:	4b21      	ldr	r3, [pc, #132]	; (80151b0 <prvAddCurrentTaskToDelayedList+0x90>)
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015130:	4b20      	ldr	r3, [pc, #128]	; (80151b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	3304      	adds	r3, #4
 8015136:	4618      	mov	r0, r3
 8015138:	f7fd fd68 	bl	8012c0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015142:	d10a      	bne.n	801515a <prvAddCurrentTaskToDelayedList+0x3a>
 8015144:	683b      	ldr	r3, [r7, #0]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d007      	beq.n	801515a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801514a:	4b1a      	ldr	r3, [pc, #104]	; (80151b4 <prvAddCurrentTaskToDelayedList+0x94>)
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	3304      	adds	r3, #4
 8015150:	4619      	mov	r1, r3
 8015152:	4819      	ldr	r0, [pc, #100]	; (80151b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8015154:	f7fd fcfd 	bl	8012b52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015158:	e026      	b.n	80151a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801515a:	68fa      	ldr	r2, [r7, #12]
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	4413      	add	r3, r2
 8015160:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015162:	4b14      	ldr	r3, [pc, #80]	; (80151b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	68ba      	ldr	r2, [r7, #8]
 8015168:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801516a:	68ba      	ldr	r2, [r7, #8]
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	429a      	cmp	r2, r3
 8015170:	d209      	bcs.n	8015186 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015172:	4b12      	ldr	r3, [pc, #72]	; (80151bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8015174:	681a      	ldr	r2, [r3, #0]
 8015176:	4b0f      	ldr	r3, [pc, #60]	; (80151b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	3304      	adds	r3, #4
 801517c:	4619      	mov	r1, r3
 801517e:	4610      	mov	r0, r2
 8015180:	f7fd fd0b 	bl	8012b9a <vListInsert>
}
 8015184:	e010      	b.n	80151a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015186:	4b0e      	ldr	r3, [pc, #56]	; (80151c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015188:	681a      	ldr	r2, [r3, #0]
 801518a:	4b0a      	ldr	r3, [pc, #40]	; (80151b4 <prvAddCurrentTaskToDelayedList+0x94>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	3304      	adds	r3, #4
 8015190:	4619      	mov	r1, r3
 8015192:	4610      	mov	r0, r2
 8015194:	f7fd fd01 	bl	8012b9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015198:	4b0a      	ldr	r3, [pc, #40]	; (80151c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	68ba      	ldr	r2, [r7, #8]
 801519e:	429a      	cmp	r2, r3
 80151a0:	d202      	bcs.n	80151a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80151a2:	4a08      	ldr	r2, [pc, #32]	; (80151c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80151a4:	68bb      	ldr	r3, [r7, #8]
 80151a6:	6013      	str	r3, [r2, #0]
}
 80151a8:	bf00      	nop
 80151aa:	3710      	adds	r7, #16
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bd80      	pop	{r7, pc}
 80151b0:	2005661c 	.word	0x2005661c
 80151b4:	20056144 	.word	0x20056144
 80151b8:	20056604 	.word	0x20056604
 80151bc:	200565d4 	.word	0x200565d4
 80151c0:	200565d0 	.word	0x200565d0
 80151c4:	20056638 	.word	0x20056638

080151c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b08a      	sub	sp, #40	; 0x28
 80151cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80151ce:	2300      	movs	r3, #0
 80151d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80151d2:	f000 fb15 	bl	8015800 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80151d6:	4b1d      	ldr	r3, [pc, #116]	; (801524c <xTimerCreateTimerTask+0x84>)
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d021      	beq.n	8015222 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80151de:	2300      	movs	r3, #0
 80151e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80151e2:	2300      	movs	r3, #0
 80151e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80151e6:	1d3a      	adds	r2, r7, #4
 80151e8:	f107 0108 	add.w	r1, r7, #8
 80151ec:	f107 030c 	add.w	r3, r7, #12
 80151f0:	4618      	mov	r0, r3
 80151f2:	f7fd fa83 	bl	80126fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80151f6:	6879      	ldr	r1, [r7, #4]
 80151f8:	68bb      	ldr	r3, [r7, #8]
 80151fa:	68fa      	ldr	r2, [r7, #12]
 80151fc:	9202      	str	r2, [sp, #8]
 80151fe:	9301      	str	r3, [sp, #4]
 8015200:	2302      	movs	r3, #2
 8015202:	9300      	str	r3, [sp, #0]
 8015204:	2300      	movs	r3, #0
 8015206:	460a      	mov	r2, r1
 8015208:	4911      	ldr	r1, [pc, #68]	; (8015250 <xTimerCreateTimerTask+0x88>)
 801520a:	4812      	ldr	r0, [pc, #72]	; (8015254 <xTimerCreateTimerTask+0x8c>)
 801520c:	f7fe ffb8 	bl	8014180 <xTaskCreateStatic>
 8015210:	4603      	mov	r3, r0
 8015212:	4a11      	ldr	r2, [pc, #68]	; (8015258 <xTimerCreateTimerTask+0x90>)
 8015214:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015216:	4b10      	ldr	r3, [pc, #64]	; (8015258 <xTimerCreateTimerTask+0x90>)
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d001      	beq.n	8015222 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801521e:	2301      	movs	r3, #1
 8015220:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015222:	697b      	ldr	r3, [r7, #20]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d10c      	bne.n	8015242 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8015228:	f04f 0330 	mov.w	r3, #48	; 0x30
 801522c:	b672      	cpsid	i
 801522e:	f383 8811 	msr	BASEPRI, r3
 8015232:	f3bf 8f6f 	isb	sy
 8015236:	f3bf 8f4f 	dsb	sy
 801523a:	b662      	cpsie	i
 801523c:	613b      	str	r3, [r7, #16]
}
 801523e:	bf00      	nop
 8015240:	e7fe      	b.n	8015240 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8015242:	697b      	ldr	r3, [r7, #20]
}
 8015244:	4618      	mov	r0, r3
 8015246:	3718      	adds	r7, #24
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}
 801524c:	20056674 	.word	0x20056674
 8015250:	0802be34 	.word	0x0802be34
 8015254:	08015399 	.word	0x08015399
 8015258:	20056678 	.word	0x20056678

0801525c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b08a      	sub	sp, #40	; 0x28
 8015260:	af00      	add	r7, sp, #0
 8015262:	60f8      	str	r0, [r7, #12]
 8015264:	60b9      	str	r1, [r7, #8]
 8015266:	607a      	str	r2, [r7, #4]
 8015268:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801526a:	2300      	movs	r3, #0
 801526c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d10c      	bne.n	801528e <xTimerGenericCommand+0x32>
	__asm volatile
 8015274:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015278:	b672      	cpsid	i
 801527a:	f383 8811 	msr	BASEPRI, r3
 801527e:	f3bf 8f6f 	isb	sy
 8015282:	f3bf 8f4f 	dsb	sy
 8015286:	b662      	cpsie	i
 8015288:	623b      	str	r3, [r7, #32]
}
 801528a:	bf00      	nop
 801528c:	e7fe      	b.n	801528c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801528e:	4b1a      	ldr	r3, [pc, #104]	; (80152f8 <xTimerGenericCommand+0x9c>)
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d02a      	beq.n	80152ec <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015296:	68bb      	ldr	r3, [r7, #8]
 8015298:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80152a2:	68bb      	ldr	r3, [r7, #8]
 80152a4:	2b05      	cmp	r3, #5
 80152a6:	dc18      	bgt.n	80152da <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80152a8:	f7ff fda8 	bl	8014dfc <xTaskGetSchedulerState>
 80152ac:	4603      	mov	r3, r0
 80152ae:	2b02      	cmp	r3, #2
 80152b0:	d109      	bne.n	80152c6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80152b2:	4b11      	ldr	r3, [pc, #68]	; (80152f8 <xTimerGenericCommand+0x9c>)
 80152b4:	6818      	ldr	r0, [r3, #0]
 80152b6:	f107 0110 	add.w	r1, r7, #16
 80152ba:	2300      	movs	r3, #0
 80152bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152be:	f7fe f8cd 	bl	801345c <xQueueGenericSend>
 80152c2:	6278      	str	r0, [r7, #36]	; 0x24
 80152c4:	e012      	b.n	80152ec <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80152c6:	4b0c      	ldr	r3, [pc, #48]	; (80152f8 <xTimerGenericCommand+0x9c>)
 80152c8:	6818      	ldr	r0, [r3, #0]
 80152ca:	f107 0110 	add.w	r1, r7, #16
 80152ce:	2300      	movs	r3, #0
 80152d0:	2200      	movs	r2, #0
 80152d2:	f7fe f8c3 	bl	801345c <xQueueGenericSend>
 80152d6:	6278      	str	r0, [r7, #36]	; 0x24
 80152d8:	e008      	b.n	80152ec <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80152da:	4b07      	ldr	r3, [pc, #28]	; (80152f8 <xTimerGenericCommand+0x9c>)
 80152dc:	6818      	ldr	r0, [r3, #0]
 80152de:	f107 0110 	add.w	r1, r7, #16
 80152e2:	2300      	movs	r3, #0
 80152e4:	683a      	ldr	r2, [r7, #0]
 80152e6:	f7fe f9bf 	bl	8013668 <xQueueGenericSendFromISR>
 80152ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80152ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	3728      	adds	r7, #40	; 0x28
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bd80      	pop	{r7, pc}
 80152f6:	bf00      	nop
 80152f8:	20056674 	.word	0x20056674

080152fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b088      	sub	sp, #32
 8015300:	af02      	add	r7, sp, #8
 8015302:	6078      	str	r0, [r7, #4]
 8015304:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015306:	4b23      	ldr	r3, [pc, #140]	; (8015394 <prvProcessExpiredTimer+0x98>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	68db      	ldr	r3, [r3, #12]
 801530c:	68db      	ldr	r3, [r3, #12]
 801530e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015310:	697b      	ldr	r3, [r7, #20]
 8015312:	3304      	adds	r3, #4
 8015314:	4618      	mov	r0, r3
 8015316:	f7fd fc79 	bl	8012c0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801531a:	697b      	ldr	r3, [r7, #20]
 801531c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015320:	f003 0304 	and.w	r3, r3, #4
 8015324:	2b00      	cmp	r3, #0
 8015326:	d024      	beq.n	8015372 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015328:	697b      	ldr	r3, [r7, #20]
 801532a:	699a      	ldr	r2, [r3, #24]
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	18d1      	adds	r1, r2, r3
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	683a      	ldr	r2, [r7, #0]
 8015334:	6978      	ldr	r0, [r7, #20]
 8015336:	f000 f8d3 	bl	80154e0 <prvInsertTimerInActiveList>
 801533a:	4603      	mov	r3, r0
 801533c:	2b00      	cmp	r3, #0
 801533e:	d021      	beq.n	8015384 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015340:	2300      	movs	r3, #0
 8015342:	9300      	str	r3, [sp, #0]
 8015344:	2300      	movs	r3, #0
 8015346:	687a      	ldr	r2, [r7, #4]
 8015348:	2100      	movs	r1, #0
 801534a:	6978      	ldr	r0, [r7, #20]
 801534c:	f7ff ff86 	bl	801525c <xTimerGenericCommand>
 8015350:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015352:	693b      	ldr	r3, [r7, #16]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d115      	bne.n	8015384 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8015358:	f04f 0330 	mov.w	r3, #48	; 0x30
 801535c:	b672      	cpsid	i
 801535e:	f383 8811 	msr	BASEPRI, r3
 8015362:	f3bf 8f6f 	isb	sy
 8015366:	f3bf 8f4f 	dsb	sy
 801536a:	b662      	cpsie	i
 801536c:	60fb      	str	r3, [r7, #12]
}
 801536e:	bf00      	nop
 8015370:	e7fe      	b.n	8015370 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015378:	f023 0301 	bic.w	r3, r3, #1
 801537c:	b2da      	uxtb	r2, r3
 801537e:	697b      	ldr	r3, [r7, #20]
 8015380:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015384:	697b      	ldr	r3, [r7, #20]
 8015386:	6a1b      	ldr	r3, [r3, #32]
 8015388:	6978      	ldr	r0, [r7, #20]
 801538a:	4798      	blx	r3
}
 801538c:	bf00      	nop
 801538e:	3718      	adds	r7, #24
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}
 8015394:	2005666c 	.word	0x2005666c

08015398 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b084      	sub	sp, #16
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80153a0:	f107 0308 	add.w	r3, r7, #8
 80153a4:	4618      	mov	r0, r3
 80153a6:	f000 f857 	bl	8015458 <prvGetNextExpireTime>
 80153aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	4619      	mov	r1, r3
 80153b0:	68f8      	ldr	r0, [r7, #12]
 80153b2:	f000 f803 	bl	80153bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80153b6:	f000 f8d5 	bl	8015564 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80153ba:	e7f1      	b.n	80153a0 <prvTimerTask+0x8>

080153bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b084      	sub	sp, #16
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
 80153c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80153c6:	f7ff f925 	bl	8014614 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80153ca:	f107 0308 	add.w	r3, r7, #8
 80153ce:	4618      	mov	r0, r3
 80153d0:	f000 f866 	bl	80154a0 <prvSampleTimeNow>
 80153d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80153d6:	68bb      	ldr	r3, [r7, #8]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d130      	bne.n	801543e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80153dc:	683b      	ldr	r3, [r7, #0]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d10a      	bne.n	80153f8 <prvProcessTimerOrBlockTask+0x3c>
 80153e2:	687a      	ldr	r2, [r7, #4]
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	429a      	cmp	r2, r3
 80153e8:	d806      	bhi.n	80153f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80153ea:	f7ff f921 	bl	8014630 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80153ee:	68f9      	ldr	r1, [r7, #12]
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f7ff ff83 	bl	80152fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80153f6:	e024      	b.n	8015442 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d008      	beq.n	8015410 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80153fe:	4b13      	ldr	r3, [pc, #76]	; (801544c <prvProcessTimerOrBlockTask+0x90>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d101      	bne.n	801540c <prvProcessTimerOrBlockTask+0x50>
 8015408:	2301      	movs	r3, #1
 801540a:	e000      	b.n	801540e <prvProcessTimerOrBlockTask+0x52>
 801540c:	2300      	movs	r3, #0
 801540e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015410:	4b0f      	ldr	r3, [pc, #60]	; (8015450 <prvProcessTimerOrBlockTask+0x94>)
 8015412:	6818      	ldr	r0, [r3, #0]
 8015414:	687a      	ldr	r2, [r7, #4]
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	1ad3      	subs	r3, r2, r3
 801541a:	683a      	ldr	r2, [r7, #0]
 801541c:	4619      	mov	r1, r3
 801541e:	f7fe fe7b 	bl	8014118 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015422:	f7ff f905 	bl	8014630 <xTaskResumeAll>
 8015426:	4603      	mov	r3, r0
 8015428:	2b00      	cmp	r3, #0
 801542a:	d10a      	bne.n	8015442 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801542c:	4b09      	ldr	r3, [pc, #36]	; (8015454 <prvProcessTimerOrBlockTask+0x98>)
 801542e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015432:	601a      	str	r2, [r3, #0]
 8015434:	f3bf 8f4f 	dsb	sy
 8015438:	f3bf 8f6f 	isb	sy
}
 801543c:	e001      	b.n	8015442 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801543e:	f7ff f8f7 	bl	8014630 <xTaskResumeAll>
}
 8015442:	bf00      	nop
 8015444:	3710      	adds	r7, #16
 8015446:	46bd      	mov	sp, r7
 8015448:	bd80      	pop	{r7, pc}
 801544a:	bf00      	nop
 801544c:	20056670 	.word	0x20056670
 8015450:	20056674 	.word	0x20056674
 8015454:	e000ed04 	.word	0xe000ed04

08015458 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015458:	b480      	push	{r7}
 801545a:	b085      	sub	sp, #20
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015460:	4b0e      	ldr	r3, [pc, #56]	; (801549c <prvGetNextExpireTime+0x44>)
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d101      	bne.n	801546e <prvGetNextExpireTime+0x16>
 801546a:	2201      	movs	r2, #1
 801546c:	e000      	b.n	8015470 <prvGetNextExpireTime+0x18>
 801546e:	2200      	movs	r2, #0
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d105      	bne.n	8015488 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801547c:	4b07      	ldr	r3, [pc, #28]	; (801549c <prvGetNextExpireTime+0x44>)
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	68db      	ldr	r3, [r3, #12]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	60fb      	str	r3, [r7, #12]
 8015486:	e001      	b.n	801548c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015488:	2300      	movs	r3, #0
 801548a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801548c:	68fb      	ldr	r3, [r7, #12]
}
 801548e:	4618      	mov	r0, r3
 8015490:	3714      	adds	r7, #20
 8015492:	46bd      	mov	sp, r7
 8015494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015498:	4770      	bx	lr
 801549a:	bf00      	nop
 801549c:	2005666c 	.word	0x2005666c

080154a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b084      	sub	sp, #16
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80154a8:	f7ff f962 	bl	8014770 <xTaskGetTickCount>
 80154ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80154ae:	4b0b      	ldr	r3, [pc, #44]	; (80154dc <prvSampleTimeNow+0x3c>)
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	68fa      	ldr	r2, [r7, #12]
 80154b4:	429a      	cmp	r2, r3
 80154b6:	d205      	bcs.n	80154c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80154b8:	f000 f93c 	bl	8015734 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	2201      	movs	r2, #1
 80154c0:	601a      	str	r2, [r3, #0]
 80154c2:	e002      	b.n	80154ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	2200      	movs	r2, #0
 80154c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80154ca:	4a04      	ldr	r2, [pc, #16]	; (80154dc <prvSampleTimeNow+0x3c>)
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80154d0:	68fb      	ldr	r3, [r7, #12]
}
 80154d2:	4618      	mov	r0, r3
 80154d4:	3710      	adds	r7, #16
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}
 80154da:	bf00      	nop
 80154dc:	2005667c 	.word	0x2005667c

080154e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b086      	sub	sp, #24
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	60f8      	str	r0, [r7, #12]
 80154e8:	60b9      	str	r1, [r7, #8]
 80154ea:	607a      	str	r2, [r7, #4]
 80154ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80154ee:	2300      	movs	r3, #0
 80154f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	68ba      	ldr	r2, [r7, #8]
 80154f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	68fa      	ldr	r2, [r7, #12]
 80154fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80154fe:	68ba      	ldr	r2, [r7, #8]
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	429a      	cmp	r2, r3
 8015504:	d812      	bhi.n	801552c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015506:	687a      	ldr	r2, [r7, #4]
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	1ad2      	subs	r2, r2, r3
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	699b      	ldr	r3, [r3, #24]
 8015510:	429a      	cmp	r2, r3
 8015512:	d302      	bcc.n	801551a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015514:	2301      	movs	r3, #1
 8015516:	617b      	str	r3, [r7, #20]
 8015518:	e01b      	b.n	8015552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801551a:	4b10      	ldr	r3, [pc, #64]	; (801555c <prvInsertTimerInActiveList+0x7c>)
 801551c:	681a      	ldr	r2, [r3, #0]
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	3304      	adds	r3, #4
 8015522:	4619      	mov	r1, r3
 8015524:	4610      	mov	r0, r2
 8015526:	f7fd fb38 	bl	8012b9a <vListInsert>
 801552a:	e012      	b.n	8015552 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801552c:	687a      	ldr	r2, [r7, #4]
 801552e:	683b      	ldr	r3, [r7, #0]
 8015530:	429a      	cmp	r2, r3
 8015532:	d206      	bcs.n	8015542 <prvInsertTimerInActiveList+0x62>
 8015534:	68ba      	ldr	r2, [r7, #8]
 8015536:	683b      	ldr	r3, [r7, #0]
 8015538:	429a      	cmp	r2, r3
 801553a:	d302      	bcc.n	8015542 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801553c:	2301      	movs	r3, #1
 801553e:	617b      	str	r3, [r7, #20]
 8015540:	e007      	b.n	8015552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015542:	4b07      	ldr	r3, [pc, #28]	; (8015560 <prvInsertTimerInActiveList+0x80>)
 8015544:	681a      	ldr	r2, [r3, #0]
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	3304      	adds	r3, #4
 801554a:	4619      	mov	r1, r3
 801554c:	4610      	mov	r0, r2
 801554e:	f7fd fb24 	bl	8012b9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015552:	697b      	ldr	r3, [r7, #20]
}
 8015554:	4618      	mov	r0, r3
 8015556:	3718      	adds	r7, #24
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}
 801555c:	20056670 	.word	0x20056670
 8015560:	2005666c 	.word	0x2005666c

08015564 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015564:	b580      	push	{r7, lr}
 8015566:	b08e      	sub	sp, #56	; 0x38
 8015568:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801556a:	e0d0      	b.n	801570e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	2b00      	cmp	r3, #0
 8015570:	da1a      	bge.n	80155a8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015572:	1d3b      	adds	r3, r7, #4
 8015574:	3304      	adds	r3, #4
 8015576:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801557a:	2b00      	cmp	r3, #0
 801557c:	d10c      	bne.n	8015598 <prvProcessReceivedCommands+0x34>
	__asm volatile
 801557e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015582:	b672      	cpsid	i
 8015584:	f383 8811 	msr	BASEPRI, r3
 8015588:	f3bf 8f6f 	isb	sy
 801558c:	f3bf 8f4f 	dsb	sy
 8015590:	b662      	cpsie	i
 8015592:	61fb      	str	r3, [r7, #28]
}
 8015594:	bf00      	nop
 8015596:	e7fe      	b.n	8015596 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801559e:	6850      	ldr	r0, [r2, #4]
 80155a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155a2:	6892      	ldr	r2, [r2, #8]
 80155a4:	4611      	mov	r1, r2
 80155a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	f2c0 80ae 	blt.w	801570c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80155b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155b6:	695b      	ldr	r3, [r3, #20]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d004      	beq.n	80155c6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80155bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155be:	3304      	adds	r3, #4
 80155c0:	4618      	mov	r0, r3
 80155c2:	f7fd fb23 	bl	8012c0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80155c6:	463b      	mov	r3, r7
 80155c8:	4618      	mov	r0, r3
 80155ca:	f7ff ff69 	bl	80154a0 <prvSampleTimeNow>
 80155ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	2b09      	cmp	r3, #9
 80155d4:	f200 809b 	bhi.w	801570e <prvProcessReceivedCommands+0x1aa>
 80155d8:	a201      	add	r2, pc, #4	; (adr r2, 80155e0 <prvProcessReceivedCommands+0x7c>)
 80155da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155de:	bf00      	nop
 80155e0:	08015609 	.word	0x08015609
 80155e4:	08015609 	.word	0x08015609
 80155e8:	08015609 	.word	0x08015609
 80155ec:	08015681 	.word	0x08015681
 80155f0:	08015695 	.word	0x08015695
 80155f4:	080156e3 	.word	0x080156e3
 80155f8:	08015609 	.word	0x08015609
 80155fc:	08015609 	.word	0x08015609
 8015600:	08015681 	.word	0x08015681
 8015604:	08015695 	.word	0x08015695
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801560a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801560e:	f043 0301 	orr.w	r3, r3, #1
 8015612:	b2da      	uxtb	r2, r3
 8015614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801561a:	68ba      	ldr	r2, [r7, #8]
 801561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801561e:	699b      	ldr	r3, [r3, #24]
 8015620:	18d1      	adds	r1, r2, r3
 8015622:	68bb      	ldr	r3, [r7, #8]
 8015624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015628:	f7ff ff5a 	bl	80154e0 <prvInsertTimerInActiveList>
 801562c:	4603      	mov	r3, r0
 801562e:	2b00      	cmp	r3, #0
 8015630:	d06d      	beq.n	801570e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015634:	6a1b      	ldr	r3, [r3, #32]
 8015636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015638:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801563c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015640:	f003 0304 	and.w	r3, r3, #4
 8015644:	2b00      	cmp	r3, #0
 8015646:	d062      	beq.n	801570e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015648:	68ba      	ldr	r2, [r7, #8]
 801564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801564c:	699b      	ldr	r3, [r3, #24]
 801564e:	441a      	add	r2, r3
 8015650:	2300      	movs	r3, #0
 8015652:	9300      	str	r3, [sp, #0]
 8015654:	2300      	movs	r3, #0
 8015656:	2100      	movs	r1, #0
 8015658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801565a:	f7ff fdff 	bl	801525c <xTimerGenericCommand>
 801565e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015660:	6a3b      	ldr	r3, [r7, #32]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d153      	bne.n	801570e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8015666:	f04f 0330 	mov.w	r3, #48	; 0x30
 801566a:	b672      	cpsid	i
 801566c:	f383 8811 	msr	BASEPRI, r3
 8015670:	f3bf 8f6f 	isb	sy
 8015674:	f3bf 8f4f 	dsb	sy
 8015678:	b662      	cpsie	i
 801567a:	61bb      	str	r3, [r7, #24]
}
 801567c:	bf00      	nop
 801567e:	e7fe      	b.n	801567e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015686:	f023 0301 	bic.w	r3, r3, #1
 801568a:	b2da      	uxtb	r2, r3
 801568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801568e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015692:	e03c      	b.n	801570e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801569a:	f043 0301 	orr.w	r3, r3, #1
 801569e:	b2da      	uxtb	r2, r3
 80156a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80156a6:	68ba      	ldr	r2, [r7, #8]
 80156a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80156ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156ae:	699b      	ldr	r3, [r3, #24]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d10c      	bne.n	80156ce <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80156b4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80156b8:	b672      	cpsid	i
 80156ba:	f383 8811 	msr	BASEPRI, r3
 80156be:	f3bf 8f6f 	isb	sy
 80156c2:	f3bf 8f4f 	dsb	sy
 80156c6:	b662      	cpsie	i
 80156c8:	617b      	str	r3, [r7, #20]
}
 80156ca:	bf00      	nop
 80156cc:	e7fe      	b.n	80156cc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80156ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156d0:	699a      	ldr	r2, [r3, #24]
 80156d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156d4:	18d1      	adds	r1, r2, r3
 80156d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80156dc:	f7ff ff00 	bl	80154e0 <prvInsertTimerInActiveList>
					break;
 80156e0:	e015      	b.n	801570e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80156e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156e8:	f003 0302 	and.w	r3, r3, #2
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d103      	bne.n	80156f8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80156f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80156f2:	f7fd f8e7 	bl	80128c4 <vPortFree>
 80156f6:	e00a      	b.n	801570e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80156f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156fe:	f023 0301 	bic.w	r3, r3, #1
 8015702:	b2da      	uxtb	r2, r3
 8015704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801570a:	e000      	b.n	801570e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801570c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801570e:	4b08      	ldr	r3, [pc, #32]	; (8015730 <prvProcessReceivedCommands+0x1cc>)
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	1d39      	adds	r1, r7, #4
 8015714:	2200      	movs	r2, #0
 8015716:	4618      	mov	r0, r3
 8015718:	f7fe f8dc 	bl	80138d4 <xQueueReceive>
 801571c:	4603      	mov	r3, r0
 801571e:	2b00      	cmp	r3, #0
 8015720:	f47f af24 	bne.w	801556c <prvProcessReceivedCommands+0x8>
	}
}
 8015724:	bf00      	nop
 8015726:	bf00      	nop
 8015728:	3730      	adds	r7, #48	; 0x30
 801572a:	46bd      	mov	sp, r7
 801572c:	bd80      	pop	{r7, pc}
 801572e:	bf00      	nop
 8015730:	20056674 	.word	0x20056674

08015734 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b088      	sub	sp, #32
 8015738:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801573a:	e04a      	b.n	80157d2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801573c:	4b2e      	ldr	r3, [pc, #184]	; (80157f8 <prvSwitchTimerLists+0xc4>)
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	68db      	ldr	r3, [r3, #12]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015746:	4b2c      	ldr	r3, [pc, #176]	; (80157f8 <prvSwitchTimerLists+0xc4>)
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	68db      	ldr	r3, [r3, #12]
 801574c:	68db      	ldr	r3, [r3, #12]
 801574e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	3304      	adds	r3, #4
 8015754:	4618      	mov	r0, r3
 8015756:	f7fd fa59 	bl	8012c0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	6a1b      	ldr	r3, [r3, #32]
 801575e:	68f8      	ldr	r0, [r7, #12]
 8015760:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015768:	f003 0304 	and.w	r3, r3, #4
 801576c:	2b00      	cmp	r3, #0
 801576e:	d030      	beq.n	80157d2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	699b      	ldr	r3, [r3, #24]
 8015774:	693a      	ldr	r2, [r7, #16]
 8015776:	4413      	add	r3, r2
 8015778:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801577a:	68ba      	ldr	r2, [r7, #8]
 801577c:	693b      	ldr	r3, [r7, #16]
 801577e:	429a      	cmp	r2, r3
 8015780:	d90e      	bls.n	80157a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	68ba      	ldr	r2, [r7, #8]
 8015786:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	68fa      	ldr	r2, [r7, #12]
 801578c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801578e:	4b1a      	ldr	r3, [pc, #104]	; (80157f8 <prvSwitchTimerLists+0xc4>)
 8015790:	681a      	ldr	r2, [r3, #0]
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	3304      	adds	r3, #4
 8015796:	4619      	mov	r1, r3
 8015798:	4610      	mov	r0, r2
 801579a:	f7fd f9fe 	bl	8012b9a <vListInsert>
 801579e:	e018      	b.n	80157d2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80157a0:	2300      	movs	r3, #0
 80157a2:	9300      	str	r3, [sp, #0]
 80157a4:	2300      	movs	r3, #0
 80157a6:	693a      	ldr	r2, [r7, #16]
 80157a8:	2100      	movs	r1, #0
 80157aa:	68f8      	ldr	r0, [r7, #12]
 80157ac:	f7ff fd56 	bl	801525c <xTimerGenericCommand>
 80157b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d10c      	bne.n	80157d2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80157b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80157bc:	b672      	cpsid	i
 80157be:	f383 8811 	msr	BASEPRI, r3
 80157c2:	f3bf 8f6f 	isb	sy
 80157c6:	f3bf 8f4f 	dsb	sy
 80157ca:	b662      	cpsie	i
 80157cc:	603b      	str	r3, [r7, #0]
}
 80157ce:	bf00      	nop
 80157d0:	e7fe      	b.n	80157d0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80157d2:	4b09      	ldr	r3, [pc, #36]	; (80157f8 <prvSwitchTimerLists+0xc4>)
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d1af      	bne.n	801573c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80157dc:	4b06      	ldr	r3, [pc, #24]	; (80157f8 <prvSwitchTimerLists+0xc4>)
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80157e2:	4b06      	ldr	r3, [pc, #24]	; (80157fc <prvSwitchTimerLists+0xc8>)
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	4a04      	ldr	r2, [pc, #16]	; (80157f8 <prvSwitchTimerLists+0xc4>)
 80157e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80157ea:	4a04      	ldr	r2, [pc, #16]	; (80157fc <prvSwitchTimerLists+0xc8>)
 80157ec:	697b      	ldr	r3, [r7, #20]
 80157ee:	6013      	str	r3, [r2, #0]
}
 80157f0:	bf00      	nop
 80157f2:	3718      	adds	r7, #24
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bd80      	pop	{r7, pc}
 80157f8:	2005666c 	.word	0x2005666c
 80157fc:	20056670 	.word	0x20056670

08015800 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b082      	sub	sp, #8
 8015804:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015806:	f7fd fb39 	bl	8012e7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801580a:	4b15      	ldr	r3, [pc, #84]	; (8015860 <prvCheckForValidListAndQueue+0x60>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d120      	bne.n	8015854 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015812:	4814      	ldr	r0, [pc, #80]	; (8015864 <prvCheckForValidListAndQueue+0x64>)
 8015814:	f7fd f970 	bl	8012af8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015818:	4813      	ldr	r0, [pc, #76]	; (8015868 <prvCheckForValidListAndQueue+0x68>)
 801581a:	f7fd f96d 	bl	8012af8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801581e:	4b13      	ldr	r3, [pc, #76]	; (801586c <prvCheckForValidListAndQueue+0x6c>)
 8015820:	4a10      	ldr	r2, [pc, #64]	; (8015864 <prvCheckForValidListAndQueue+0x64>)
 8015822:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015824:	4b12      	ldr	r3, [pc, #72]	; (8015870 <prvCheckForValidListAndQueue+0x70>)
 8015826:	4a10      	ldr	r2, [pc, #64]	; (8015868 <prvCheckForValidListAndQueue+0x68>)
 8015828:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801582a:	2300      	movs	r3, #0
 801582c:	9300      	str	r3, [sp, #0]
 801582e:	4b11      	ldr	r3, [pc, #68]	; (8015874 <prvCheckForValidListAndQueue+0x74>)
 8015830:	4a11      	ldr	r2, [pc, #68]	; (8015878 <prvCheckForValidListAndQueue+0x78>)
 8015832:	2110      	movs	r1, #16
 8015834:	200a      	movs	r0, #10
 8015836:	f7fd fcb7 	bl	80131a8 <xQueueGenericCreateStatic>
 801583a:	4603      	mov	r3, r0
 801583c:	4a08      	ldr	r2, [pc, #32]	; (8015860 <prvCheckForValidListAndQueue+0x60>)
 801583e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015840:	4b07      	ldr	r3, [pc, #28]	; (8015860 <prvCheckForValidListAndQueue+0x60>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d005      	beq.n	8015854 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015848:	4b05      	ldr	r3, [pc, #20]	; (8015860 <prvCheckForValidListAndQueue+0x60>)
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	490b      	ldr	r1, [pc, #44]	; (801587c <prvCheckForValidListAndQueue+0x7c>)
 801584e:	4618      	mov	r0, r3
 8015850:	f7fe fc0e 	bl	8014070 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015854:	f7fd fb46 	bl	8012ee4 <vPortExitCritical>
}
 8015858:	bf00      	nop
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
 801585e:	bf00      	nop
 8015860:	20056674 	.word	0x20056674
 8015864:	20056644 	.word	0x20056644
 8015868:	20056658 	.word	0x20056658
 801586c:	2005666c 	.word	0x2005666c
 8015870:	20056670 	.word	0x20056670
 8015874:	20056720 	.word	0x20056720
 8015878:	20056680 	.word	0x20056680
 801587c:	0802be3c 	.word	0x0802be3c

08015880 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8015880:	8880      	ldrh	r0, [r0, #4]
 8015882:	4770      	bx	lr

08015884 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015884:	2300      	movs	r3, #0
 8015886:	8083      	strh	r3, [r0, #4]
 8015888:	4770      	bx	lr
	...

0801588c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801588e:	6803      	ldr	r3, [r0, #0]
 8015890:	460e      	mov	r6, r1
 8015892:	2100      	movs	r1, #0
 8015894:	4605      	mov	r5, r0
 8015896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015898:	4798      	blx	r3
 801589a:	4604      	mov	r4, r0
 801589c:	682b      	ldr	r3, [r5, #0]
 801589e:	4628      	mov	r0, r5
 80158a0:	1b34      	subs	r4, r6, r4
 80158a2:	6a1b      	ldr	r3, [r3, #32]
 80158a4:	b2a4      	uxth	r4, r4
 80158a6:	4798      	blx	r3
 80158a8:	88ab      	ldrh	r3, [r5, #4]
 80158aa:	fbb4 f4f0 	udiv	r4, r4, r0
 80158ae:	42a3      	cmp	r3, r4
 80158b0:	d805      	bhi.n	80158be <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80158b2:	4b0e      	ldr	r3, [pc, #56]	; (80158ec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80158b4:	211e      	movs	r1, #30
 80158b6:	4a0e      	ldr	r2, [pc, #56]	; (80158f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80158b8:	480e      	ldr	r0, [pc, #56]	; (80158f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80158ba:	f011 f899 	bl	80269f0 <__assert_func>
 80158be:	682b      	ldr	r3, [r5, #0]
 80158c0:	2100      	movs	r1, #0
 80158c2:	4628      	mov	r0, r5
 80158c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158c6:	4798      	blx	r3
 80158c8:	682b      	ldr	r3, [r5, #0]
 80158ca:	4607      	mov	r7, r0
 80158cc:	4628      	mov	r0, r5
 80158ce:	6a1b      	ldr	r3, [r3, #32]
 80158d0:	4798      	blx	r3
 80158d2:	1bf3      	subs	r3, r6, r7
 80158d4:	b29b      	uxth	r3, r3
 80158d6:	fbb3 f2f0 	udiv	r2, r3, r0
 80158da:	fb02 3010 	mls	r0, r2, r0, r3
 80158de:	b118      	cbz	r0, 80158e8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80158e0:	4b05      	ldr	r3, [pc, #20]	; (80158f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80158e2:	211f      	movs	r1, #31
 80158e4:	4a02      	ldr	r2, [pc, #8]	; (80158f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80158e6:	e7e7      	b.n	80158b8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80158e8:	4620      	mov	r0, r4
 80158ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158ec:	0802c8ac 	.word	0x0802c8ac
 80158f0:	0802ca1a 	.word	0x0802ca1a
 80158f4:	0802c8c1 	.word	0x0802c8c1
 80158f8:	0802c8ef 	.word	0x0802c8ef

080158fc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80158fc:	b538      	push	{r3, r4, r5, lr}
 80158fe:	6803      	ldr	r3, [r0, #0]
 8015900:	460d      	mov	r5, r1
 8015902:	4604      	mov	r4, r0
 8015904:	6a1b      	ldr	r3, [r3, #32]
 8015906:	4798      	blx	r3
 8015908:	4285      	cmp	r5, r0
 801590a:	d905      	bls.n	8015918 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801590c:	4b0c      	ldr	r3, [pc, #48]	; (8015940 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801590e:	2130      	movs	r1, #48	; 0x30
 8015910:	4a0c      	ldr	r2, [pc, #48]	; (8015944 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015912:	480d      	ldr	r0, [pc, #52]	; (8015948 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8015914:	f011 f86c 	bl	80269f0 <__assert_func>
 8015918:	6823      	ldr	r3, [r4, #0]
 801591a:	4620      	mov	r0, r4
 801591c:	88a5      	ldrh	r5, [r4, #4]
 801591e:	69db      	ldr	r3, [r3, #28]
 8015920:	4798      	blx	r3
 8015922:	4285      	cmp	r5, r0
 8015924:	d303      	bcc.n	801592e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8015926:	4b09      	ldr	r3, [pc, #36]	; (801594c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8015928:	2131      	movs	r1, #49	; 0x31
 801592a:	4a06      	ldr	r2, [pc, #24]	; (8015944 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801592c:	e7f1      	b.n	8015912 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801592e:	6823      	ldr	r3, [r4, #0]
 8015930:	4620      	mov	r0, r4
 8015932:	88a1      	ldrh	r1, [r4, #4]
 8015934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015936:	4798      	blx	r3
 8015938:	88a3      	ldrh	r3, [r4, #4]
 801593a:	3301      	adds	r3, #1
 801593c:	80a3      	strh	r3, [r4, #4]
 801593e:	bd38      	pop	{r3, r4, r5, pc}
 8015940:	0802c969 	.word	0x0802c969
 8015944:	0802ca5d 	.word	0x0802ca5d
 8015948:	0802c8c1 	.word	0x0802c8c1
 801594c:	0802c980 	.word	0x0802c980

08015950 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015950:	b570      	push	{r4, r5, r6, lr}
 8015952:	6803      	ldr	r3, [r0, #0]
 8015954:	4616      	mov	r6, r2
 8015956:	4604      	mov	r4, r0
 8015958:	460d      	mov	r5, r1
 801595a:	6a1b      	ldr	r3, [r3, #32]
 801595c:	4798      	blx	r3
 801595e:	4286      	cmp	r6, r0
 8015960:	d905      	bls.n	801596e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8015962:	4b06      	ldr	r3, [pc, #24]	; (801597c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8015964:	213a      	movs	r1, #58	; 0x3a
 8015966:	4a06      	ldr	r2, [pc, #24]	; (8015980 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8015968:	4806      	ldr	r0, [pc, #24]	; (8015984 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801596a:	f011 f841 	bl	80269f0 <__assert_func>
 801596e:	6823      	ldr	r3, [r4, #0]
 8015970:	4629      	mov	r1, r5
 8015972:	4620      	mov	r0, r4
 8015974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801597a:	4718      	bx	r3
 801597c:	0802c969 	.word	0x0802c969
 8015980:	0802c9d0 	.word	0x0802c9d0
 8015984:	0802c8c1 	.word	0x0802c8c1

08015988 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8015988:	4770      	bx	lr
	...

0801598c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801598c:	4a02      	ldr	r2, [pc, #8]	; (8015998 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801598e:	6002      	str	r2, [r0, #0]
 8015990:	2200      	movs	r2, #0
 8015992:	8082      	strh	r2, [r0, #4]
 8015994:	4770      	bx	lr
 8015996:	bf00      	nop
 8015998:	0802c9a4 	.word	0x0802c9a4

0801599c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801599c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801599e:	2000      	movs	r0, #0
 80159a0:	b12b      	cbz	r3, 80159ae <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80159a2:	b920      	cbnz	r0, 80159ae <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80159a4:	1a5a      	subs	r2, r3, r1
 80159a6:	699b      	ldr	r3, [r3, #24]
 80159a8:	4250      	negs	r0, r2
 80159aa:	4150      	adcs	r0, r2
 80159ac:	e7f8      	b.n	80159a0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80159ae:	4770      	bx	lr

080159b0 <_ZN8touchgfx9Container9removeAllEv>:
 80159b0:	2200      	movs	r2, #0
 80159b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80159b4:	b123      	cbz	r3, 80159c0 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80159b6:	6999      	ldr	r1, [r3, #24]
 80159b8:	6281      	str	r1, [r0, #40]	; 0x28
 80159ba:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80159be:	e7f8      	b.n	80159b2 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80159c0:	4770      	bx	lr

080159c2 <_ZN8touchgfx9Container6unlinkEv>:
 80159c2:	2300      	movs	r3, #0
 80159c4:	6283      	str	r3, [r0, #40]	; 0x28
 80159c6:	4770      	bx	lr

080159c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80159c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159cc:	461f      	mov	r7, r3
 80159ce:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80159d2:	460d      	mov	r5, r1
 80159d4:	4616      	mov	r6, r2
 80159d6:	b103      	cbz	r3, 80159da <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80159d8:	6038      	str	r0, [r7, #0]
 80159da:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80159dc:	b314      	cbz	r4, 8015a24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80159de:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80159e2:	b1eb      	cbz	r3, 8015a20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80159e4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80159e8:	428d      	cmp	r5, r1
 80159ea:	db19      	blt.n	8015a20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80159ec:	b289      	uxth	r1, r1
 80159ee:	8923      	ldrh	r3, [r4, #8]
 80159f0:	440b      	add	r3, r1
 80159f2:	b21b      	sxth	r3, r3
 80159f4:	429d      	cmp	r5, r3
 80159f6:	da13      	bge.n	8015a20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80159f8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80159fc:	4296      	cmp	r6, r2
 80159fe:	db0f      	blt.n	8015a20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015a00:	b292      	uxth	r2, r2
 8015a02:	8963      	ldrh	r3, [r4, #10]
 8015a04:	4413      	add	r3, r2
 8015a06:	b21b      	sxth	r3, r3
 8015a08:	429e      	cmp	r6, r3
 8015a0a:	da09      	bge.n	8015a20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015a0c:	6823      	ldr	r3, [r4, #0]
 8015a0e:	1ab2      	subs	r2, r6, r2
 8015a10:	1a69      	subs	r1, r5, r1
 8015a12:	4620      	mov	r0, r4
 8015a14:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8015a18:	b212      	sxth	r2, r2
 8015a1a:	463b      	mov	r3, r7
 8015a1c:	b209      	sxth	r1, r1
 8015a1e:	47c0      	blx	r8
 8015a20:	69a4      	ldr	r4, [r4, #24]
 8015a22:	e7db      	b.n	80159dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a28 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8015a28:	2200      	movs	r2, #0
 8015a2a:	8002      	strh	r2, [r0, #0]
 8015a2c:	8042      	strh	r2, [r0, #2]
 8015a2e:	8082      	strh	r2, [r0, #4]
 8015a30:	80c2      	strh	r2, [r0, #6]
 8015a32:	4770      	bx	lr

08015a34 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015a34:	b570      	push	{r4, r5, r6, lr}
 8015a36:	460d      	mov	r5, r1
 8015a38:	4616      	mov	r6, r2
 8015a3a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015a3c:	b13c      	cbz	r4, 8015a4e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015a3e:	6823      	ldr	r3, [r4, #0]
 8015a40:	4620      	mov	r0, r4
 8015a42:	4632      	mov	r2, r6
 8015a44:	4629      	mov	r1, r5
 8015a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a48:	4798      	blx	r3
 8015a4a:	69a4      	ldr	r4, [r4, #24]
 8015a4c:	e7f6      	b.n	8015a3c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015a4e:	bd70      	pop	{r4, r5, r6, pc}

08015a50 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015a50:	b538      	push	{r3, r4, r5, lr}
 8015a52:	460d      	mov	r5, r1
 8015a54:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015a56:	b134      	cbz	r4, 8015a66 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015a58:	682b      	ldr	r3, [r5, #0]
 8015a5a:	4621      	mov	r1, r4
 8015a5c:	4628      	mov	r0, r5
 8015a5e:	689b      	ldr	r3, [r3, #8]
 8015a60:	4798      	blx	r3
 8015a62:	69a4      	ldr	r4, [r4, #24]
 8015a64:	e7f7      	b.n	8015a56 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8015a66:	bd38      	pop	{r3, r4, r5, pc}

08015a68 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015a68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015a6a:	b19b      	cbz	r3, 8015a94 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015a6c:	428b      	cmp	r3, r1
 8015a6e:	d109      	bne.n	8015a84 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015a70:	699a      	ldr	r2, [r3, #24]
 8015a72:	2100      	movs	r1, #0
 8015a74:	6159      	str	r1, [r3, #20]
 8015a76:	6282      	str	r2, [r0, #40]	; 0x28
 8015a78:	b902      	cbnz	r2, 8015a7c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8015a7a:	4770      	bx	lr
 8015a7c:	6199      	str	r1, [r3, #24]
 8015a7e:	4770      	bx	lr
 8015a80:	4613      	mov	r3, r2
 8015a82:	b13a      	cbz	r2, 8015a94 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015a84:	699a      	ldr	r2, [r3, #24]
 8015a86:	428a      	cmp	r2, r1
 8015a88:	d1fa      	bne.n	8015a80 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8015a8a:	698a      	ldr	r2, [r1, #24]
 8015a8c:	619a      	str	r2, [r3, #24]
 8015a8e:	2300      	movs	r3, #0
 8015a90:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015a94:	4770      	bx	lr

08015a96 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8015a96:	b410      	push	{r4}
 8015a98:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015a9a:	4604      	mov	r4, r0
 8015a9c:	b92b      	cbnz	r3, 8015aaa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015a9e:	6803      	ldr	r3, [r0, #0]
 8015aa0:	4611      	mov	r1, r2
 8015aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015aa8:	4718      	bx	r3
 8015aaa:	b941      	cbnz	r1, 8015abe <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015aac:	6193      	str	r3, [r2, #24]
 8015aae:	6282      	str	r2, [r0, #40]	; 0x28
 8015ab0:	6154      	str	r4, [r2, #20]
 8015ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ab6:	4770      	bx	lr
 8015ab8:	4603      	mov	r3, r0
 8015aba:	2800      	cmp	r0, #0
 8015abc:	d0f9      	beq.n	8015ab2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015abe:	4299      	cmp	r1, r3
 8015ac0:	6998      	ldr	r0, [r3, #24]
 8015ac2:	d1f9      	bne.n	8015ab8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015ac4:	6190      	str	r0, [r2, #24]
 8015ac6:	618a      	str	r2, [r1, #24]
 8015ac8:	e7f2      	b.n	8015ab0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08015acc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015acc:	4288      	cmp	r0, r1
 8015ace:	b508      	push	{r3, lr}
 8015ad0:	d105      	bne.n	8015ade <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8015ad2:	4b11      	ldr	r3, [pc, #68]	; (8015b18 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8015ad4:	2121      	movs	r1, #33	; 0x21
 8015ad6:	4a11      	ldr	r2, [pc, #68]	; (8015b1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015ad8:	4811      	ldr	r0, [pc, #68]	; (8015b20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8015ada:	f010 ff89 	bl	80269f0 <__assert_func>
 8015ade:	694b      	ldr	r3, [r1, #20]
 8015ae0:	b11b      	cbz	r3, 8015aea <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8015ae2:	4b10      	ldr	r3, [pc, #64]	; (8015b24 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8015ae4:	2122      	movs	r1, #34	; 0x22
 8015ae6:	4a0d      	ldr	r2, [pc, #52]	; (8015b1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015ae8:	e7f6      	b.n	8015ad8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015aea:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8015aee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015af0:	b913      	cbnz	r3, 8015af8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8015af2:	6281      	str	r1, [r0, #40]	; 0x28
 8015af4:	bd08      	pop	{r3, pc}
 8015af6:	4613      	mov	r3, r2
 8015af8:	699a      	ldr	r2, [r3, #24]
 8015afa:	b12a      	cbz	r2, 8015b08 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015afc:	428b      	cmp	r3, r1
 8015afe:	d1fa      	bne.n	8015af6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015b00:	4b09      	ldr	r3, [pc, #36]	; (8015b28 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015b02:	2133      	movs	r1, #51	; 0x33
 8015b04:	4a05      	ldr	r2, [pc, #20]	; (8015b1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015b06:	e7e7      	b.n	8015ad8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015b08:	428b      	cmp	r3, r1
 8015b0a:	d103      	bne.n	8015b14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015b0c:	4b06      	ldr	r3, [pc, #24]	; (8015b28 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015b0e:	2136      	movs	r1, #54	; 0x36
 8015b10:	4a02      	ldr	r2, [pc, #8]	; (8015b1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015b12:	e7e1      	b.n	8015ad8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015b14:	6199      	str	r1, [r3, #24]
 8015b16:	e7ed      	b.n	8015af4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8015b18:	0802ca9b 	.word	0x0802ca9b
 8015b1c:	0802cbec 	.word	0x0802cbec
 8015b20:	0802cac7 	.word	0x0802cac7
 8015b24:	0802cafa 	.word	0x0802cafa
 8015b28:	0802cb30 	.word	0x0802cb30

08015b2c <_ZN8touchgfx4RectaNERKS0_>:
 8015b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b30:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015b34:	888c      	ldrh	r4, [r1, #4]
 8015b36:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015b3a:	443c      	add	r4, r7
 8015b3c:	b2a4      	uxth	r4, r4
 8015b3e:	fa0f f884 	sxth.w	r8, r4
 8015b42:	45c1      	cmp	r9, r8
 8015b44:	da2f      	bge.n	8015ba6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015b46:	8882      	ldrh	r2, [r0, #4]
 8015b48:	444a      	add	r2, r9
 8015b4a:	b292      	uxth	r2, r2
 8015b4c:	fa0f fe82 	sxth.w	lr, r2
 8015b50:	4577      	cmp	r7, lr
 8015b52:	da28      	bge.n	8015ba6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015b54:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015b58:	88cb      	ldrh	r3, [r1, #6]
 8015b5a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015b5e:	442b      	add	r3, r5
 8015b60:	b21b      	sxth	r3, r3
 8015b62:	429e      	cmp	r6, r3
 8015b64:	da1f      	bge.n	8015ba6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015b66:	88c3      	ldrh	r3, [r0, #6]
 8015b68:	4433      	add	r3, r6
 8015b6a:	b29b      	uxth	r3, r3
 8015b6c:	fa0f fc83 	sxth.w	ip, r3
 8015b70:	4565      	cmp	r5, ip
 8015b72:	da18      	bge.n	8015ba6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015b74:	454f      	cmp	r7, r9
 8015b76:	bfb8      	it	lt
 8015b78:	464f      	movlt	r7, r9
 8015b7a:	42b5      	cmp	r5, r6
 8015b7c:	bfb8      	it	lt
 8015b7e:	4635      	movlt	r5, r6
 8015b80:	45f0      	cmp	r8, lr
 8015b82:	bfd8      	it	le
 8015b84:	4622      	movle	r2, r4
 8015b86:	1bd2      	subs	r2, r2, r7
 8015b88:	8082      	strh	r2, [r0, #4]
 8015b8a:	884a      	ldrh	r2, [r1, #2]
 8015b8c:	88c9      	ldrh	r1, [r1, #6]
 8015b8e:	8007      	strh	r7, [r0, #0]
 8015b90:	440a      	add	r2, r1
 8015b92:	8045      	strh	r5, [r0, #2]
 8015b94:	b292      	uxth	r2, r2
 8015b96:	b211      	sxth	r1, r2
 8015b98:	458c      	cmp	ip, r1
 8015b9a:	bfa8      	it	ge
 8015b9c:	4613      	movge	r3, r2
 8015b9e:	1b5b      	subs	r3, r3, r5
 8015ba0:	80c3      	strh	r3, [r0, #6]
 8015ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ba6:	2300      	movs	r3, #0
 8015ba8:	8003      	strh	r3, [r0, #0]
 8015baa:	8043      	strh	r3, [r0, #2]
 8015bac:	8083      	strh	r3, [r0, #4]
 8015bae:	80c3      	strh	r3, [r0, #6]
 8015bb0:	e7f7      	b.n	8015ba2 <_ZN8touchgfx4RectaNERKS0_+0x76>

08015bb2 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015bb2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	dd06      	ble.n	8015bc8 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8015bba:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015bbe:	2800      	cmp	r0, #0
 8015bc0:	bfcc      	ite	gt
 8015bc2:	2000      	movgt	r0, #0
 8015bc4:	2001      	movle	r0, #1
 8015bc6:	4770      	bx	lr
 8015bc8:	2001      	movs	r0, #1
 8015bca:	4770      	bx	lr

08015bcc <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	4604      	mov	r4, r0
 8015bd4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015bd6:	8003      	strh	r3, [r0, #0]
 8015bd8:	8043      	strh	r3, [r0, #2]
 8015bda:	8083      	strh	r3, [r0, #4]
 8015bdc:	80c3      	strh	r3, [r0, #6]
 8015bde:	2d00      	cmp	r5, #0
 8015be0:	d040      	beq.n	8015c64 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015be2:	1d28      	adds	r0, r5, #4
 8015be4:	f7ff ffe5 	bl	8015bb2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015be8:	b988      	cbnz	r0, 8015c0e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015bea:	4620      	mov	r0, r4
 8015bec:	f7ff ffe1 	bl	8015bb2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015bf0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015bf4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015bf8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015bfc:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015c00:	b138      	cbz	r0, 8015c12 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015c02:	8022      	strh	r2, [r4, #0]
 8015c04:	8063      	strh	r3, [r4, #2]
 8015c06:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015c0a:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015c0e:	69ad      	ldr	r5, [r5, #24]
 8015c10:	e7e5      	b.n	8015bde <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015c12:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015c16:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015c1a:	4290      	cmp	r0, r2
 8015c1c:	4607      	mov	r7, r0
 8015c1e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015c22:	460e      	mov	r6, r1
 8015c24:	bfa8      	it	ge
 8015c26:	4617      	movge	r7, r2
 8015c28:	4299      	cmp	r1, r3
 8015c2a:	4472      	add	r2, lr
 8015c2c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015c30:	bfa8      	it	ge
 8015c32:	461e      	movge	r6, r3
 8015c34:	4440      	add	r0, r8
 8015c36:	4471      	add	r1, lr
 8015c38:	4463      	add	r3, ip
 8015c3a:	b200      	sxth	r0, r0
 8015c3c:	8027      	strh	r7, [r4, #0]
 8015c3e:	b212      	sxth	r2, r2
 8015c40:	8066      	strh	r6, [r4, #2]
 8015c42:	b209      	sxth	r1, r1
 8015c44:	b21b      	sxth	r3, r3
 8015c46:	4290      	cmp	r0, r2
 8015c48:	bfac      	ite	ge
 8015c4a:	ebc7 0200 	rsbge	r2, r7, r0
 8015c4e:	ebc7 0202 	rsblt	r2, r7, r2
 8015c52:	4299      	cmp	r1, r3
 8015c54:	bfac      	ite	ge
 8015c56:	ebc6 0301 	rsbge	r3, r6, r1
 8015c5a:	ebc6 0303 	rsblt	r3, r6, r3
 8015c5e:	80a2      	strh	r2, [r4, #4]
 8015c60:	80e3      	strh	r3, [r4, #6]
 8015c62:	e7d4      	b.n	8015c0e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015c64:	4620      	mov	r0, r4
 8015c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015c6a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015c6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015c6e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015c72:	b383      	cbz	r3, 8015cd6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015c74:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015c76:	b374      	cbz	r4, 8015cd6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015c78:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015c7c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015c80:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015c84:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015c88:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015c8c:	b303      	cbz	r3, 8015cd0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015c8e:	4668      	mov	r0, sp
 8015c90:	1d21      	adds	r1, r4, #4
 8015c92:	f8ad 5000 	strh.w	r5, [sp]
 8015c96:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015c9a:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015c9e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015ca2:	f7ff ff43 	bl	8015b2c <_ZN8touchgfx4RectaNERKS0_>
 8015ca6:	4668      	mov	r0, sp
 8015ca8:	f7ff ff83 	bl	8015bb2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015cac:	b980      	cbnz	r0, 8015cd0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015cae:	f8bd 3000 	ldrh.w	r3, [sp]
 8015cb2:	4669      	mov	r1, sp
 8015cb4:	88a2      	ldrh	r2, [r4, #4]
 8015cb6:	4620      	mov	r0, r4
 8015cb8:	1a9b      	subs	r3, r3, r2
 8015cba:	88e2      	ldrh	r2, [r4, #6]
 8015cbc:	f8ad 3000 	strh.w	r3, [sp]
 8015cc0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015cc4:	1a9b      	subs	r3, r3, r2
 8015cc6:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015cca:	6823      	ldr	r3, [r4, #0]
 8015ccc:	689b      	ldr	r3, [r3, #8]
 8015cce:	4798      	blx	r3
 8015cd0:	69a4      	ldr	r4, [r4, #24]
 8015cd2:	2c00      	cmp	r4, #0
 8015cd4:	d1d8      	bne.n	8015c88 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015cd6:	b002      	add	sp, #8
 8015cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015cdc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015cdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015cde:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015ce2:	460d      	mov	r5, r1
 8015ce4:	4616      	mov	r6, r2
 8015ce6:	b323      	cbz	r3, 8015d32 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015ce8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015cea:	b314      	cbz	r4, 8015d32 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015cec:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015cf0:	b1eb      	cbz	r3, 8015d2e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015cf2:	6828      	ldr	r0, [r5, #0]
 8015cf4:	466b      	mov	r3, sp
 8015cf6:	6869      	ldr	r1, [r5, #4]
 8015cf8:	c303      	stmia	r3!, {r0, r1}
 8015cfa:	4668      	mov	r0, sp
 8015cfc:	1d21      	adds	r1, r4, #4
 8015cfe:	f7ff ff15 	bl	8015b2c <_ZN8touchgfx4RectaNERKS0_>
 8015d02:	4668      	mov	r0, sp
 8015d04:	f7ff ff55 	bl	8015bb2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015d08:	b988      	cbnz	r0, 8015d2e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015d0a:	f8bd 3000 	ldrh.w	r3, [sp]
 8015d0e:	4669      	mov	r1, sp
 8015d10:	88a2      	ldrh	r2, [r4, #4]
 8015d12:	4620      	mov	r0, r4
 8015d14:	1a9b      	subs	r3, r3, r2
 8015d16:	88e2      	ldrh	r2, [r4, #6]
 8015d18:	f8ad 3000 	strh.w	r3, [sp]
 8015d1c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015d20:	1a9b      	subs	r3, r3, r2
 8015d22:	4632      	mov	r2, r6
 8015d24:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015d28:	6823      	ldr	r3, [r4, #0]
 8015d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d2c:	4798      	blx	r3
 8015d2e:	69a4      	ldr	r4, [r4, #24]
 8015d30:	e7db      	b.n	8015cea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015d32:	b002      	add	sp, #8
 8015d34:	bd70      	pop	{r4, r5, r6, pc}

08015d36 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015d36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015d3a:	4770      	bx	lr

08015d3c <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8015d3c:	4770      	bx	lr

08015d3e <_ZN8touchgfx3HAL10FlushCacheEv>:
 8015d3e:	4770      	bx	lr

08015d40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015d40:	6803      	ldr	r3, [r0, #0]
 8015d42:	b513      	push	{r0, r1, r4, lr}
 8015d44:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8015d48:	2300      	movs	r3, #0
 8015d4a:	e9cd 3300 	strd	r3, r3, [sp]
 8015d4e:	466b      	mov	r3, sp
 8015d50:	47a0      	blx	r4
 8015d52:	b002      	add	sp, #8
 8015d54:	bd10      	pop	{r4, pc}

08015d56 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015d56:	2301      	movs	r3, #1
 8015d58:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015d5c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015d60:	4770      	bx	lr

08015d62 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015d62:	2301      	movs	r3, #1
 8015d64:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015d68:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015d6c:	4770      	bx	lr

08015d6e <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015d6e:	6843      	ldr	r3, [r0, #4]
 8015d70:	2201      	movs	r2, #1
 8015d72:	725a      	strb	r2, [r3, #9]
 8015d74:	6840      	ldr	r0, [r0, #4]
 8015d76:	6803      	ldr	r3, [r0, #0]
 8015d78:	691b      	ldr	r3, [r3, #16]
 8015d7a:	4718      	bx	r3

08015d7c <_ZN8touchgfx3HAL8flushDMAEv>:
 8015d7c:	6840      	ldr	r0, [r0, #4]
 8015d7e:	6803      	ldr	r3, [r0, #0]
 8015d80:	689b      	ldr	r3, [r3, #8]
 8015d82:	4718      	bx	r3

08015d84 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8015d84:	b530      	push	{r4, r5, lr}
 8015d86:	b08b      	sub	sp, #44	; 0x2c
 8015d88:	6804      	ldr	r4, [r0, #0]
 8015d8a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8015d8e:	9508      	str	r5, [sp, #32]
 8015d90:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8015d94:	9507      	str	r5, [sp, #28]
 8015d96:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8015d9a:	9506      	str	r5, [sp, #24]
 8015d9c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8015da0:	9505      	str	r5, [sp, #20]
 8015da2:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8015da6:	9504      	str	r5, [sp, #16]
 8015da8:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8015dac:	9503      	str	r5, [sp, #12]
 8015dae:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015db2:	9502      	str	r5, [sp, #8]
 8015db4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8015db8:	e9cd 3500 	strd	r3, r5, [sp]
 8015dbc:	4613      	mov	r3, r2
 8015dbe:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	47a0      	blx	r4
 8015dc4:	b00b      	add	sp, #44	; 0x2c
 8015dc6:	bd30      	pop	{r4, r5, pc}

08015dc8 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015dc8:	4b04      	ldr	r3, [pc, #16]	; (8015ddc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015dca:	781b      	ldrb	r3, [r3, #0]
 8015dcc:	b123      	cbz	r3, 8015dd8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015dce:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015dd2:	f080 0001 	eor.w	r0, r0, #1
 8015dd6:	4770      	bx	lr
 8015dd8:	2001      	movs	r0, #1
 8015dda:	4770      	bx	lr
 8015ddc:	2005677a 	.word	0x2005677a

08015de0 <_ZN8touchgfx3HAL8endFrameEv>:
 8015de0:	b510      	push	{r4, lr}
 8015de2:	4604      	mov	r4, r0
 8015de4:	6840      	ldr	r0, [r0, #4]
 8015de6:	6803      	ldr	r3, [r0, #0]
 8015de8:	689b      	ldr	r3, [r3, #8]
 8015dea:	4798      	blx	r3
 8015dec:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015df0:	b113      	cbz	r3, 8015df8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015df2:	2301      	movs	r3, #1
 8015df4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015df8:	bd10      	pop	{r4, pc}

08015dfa <_ZN8touchgfx3HAL10initializeEv>:
 8015dfa:	b510      	push	{r4, lr}
 8015dfc:	4604      	mov	r4, r0
 8015dfe:	f7ed fdd9 	bl	80039b4 <_ZN8touchgfx10OSWrappers10initializeEv>
 8015e02:	6860      	ldr	r0, [r4, #4]
 8015e04:	6803      	ldr	r3, [r0, #0]
 8015e06:	68db      	ldr	r3, [r3, #12]
 8015e08:	4798      	blx	r3
 8015e0a:	68e0      	ldr	r0, [r4, #12]
 8015e0c:	6803      	ldr	r3, [r0, #0]
 8015e0e:	689b      	ldr	r3, [r3, #8]
 8015e10:	4798      	blx	r3
 8015e12:	6823      	ldr	r3, [r4, #0]
 8015e14:	4620      	mov	r0, r4
 8015e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e1c:	4718      	bx	r3

08015e1e <_ZN8touchgfx3HAL9taskEntryEv>:
 8015e1e:	b508      	push	{r3, lr}
 8015e20:	6803      	ldr	r3, [r0, #0]
 8015e22:	4604      	mov	r4, r0
 8015e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015e26:	4798      	blx	r3
 8015e28:	6823      	ldr	r3, [r4, #0]
 8015e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e2c:	4620      	mov	r0, r4
 8015e2e:	4798      	blx	r3
 8015e30:	f7ed fe36 	bl	8003aa0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015e34:	6823      	ldr	r3, [r4, #0]
 8015e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015e38:	e7f8      	b.n	8015e2c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08015e3c <_ZN8touchgfx3HAL4tickEv>:
 8015e3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015e3e:	6803      	ldr	r3, [r0, #0]
 8015e40:	4604      	mov	r4, r0
 8015e42:	4d5c      	ldr	r5, [pc, #368]	; (8015fb4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015e44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015e48:	4798      	blx	r3
 8015e4a:	2800      	cmp	r0, #0
 8015e4c:	f000 8097 	beq.w	8015f7e <_ZN8touchgfx3HAL4tickEv+0x142>
 8015e50:	2001      	movs	r0, #1
 8015e52:	2600      	movs	r6, #0
 8015e54:	f7ed fb80 	bl	8003558 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015e58:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015e5c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015e60:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015e64:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015e68:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015e6c:	b133      	cbz	r3, 8015e7c <_ZN8touchgfx3HAL4tickEv+0x40>
 8015e6e:	6823      	ldr	r3, [r4, #0]
 8015e70:	4620      	mov	r0, r4
 8015e72:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015e76:	4798      	blx	r3
 8015e78:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015e7c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015e80:	2601      	movs	r6, #1
 8015e82:	6862      	ldr	r2, [r4, #4]
 8015e84:	f083 0301 	eor.w	r3, r3, #1
 8015e88:	702e      	strb	r6, [r5, #0]
 8015e8a:	7253      	strb	r3, [r2, #9]
 8015e8c:	f003 fcac 	bl	80197e8 <_ZN8touchgfx11Application11getInstanceEv>
 8015e90:	6803      	ldr	r3, [r0, #0]
 8015e92:	4631      	mov	r1, r6
 8015e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e96:	4798      	blx	r3
 8015e98:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015e9c:	b90b      	cbnz	r3, 8015ea2 <_ZN8touchgfx3HAL4tickEv+0x66>
 8015e9e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015ea2:	f003 fca1 	bl	80197e8 <_ZN8touchgfx11Application11getInstanceEv>
 8015ea6:	6803      	ldr	r3, [r0, #0]
 8015ea8:	695b      	ldr	r3, [r3, #20]
 8015eaa:	4798      	blx	r3
 8015eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015eae:	6803      	ldr	r3, [r0, #0]
 8015eb0:	691b      	ldr	r3, [r3, #16]
 8015eb2:	4798      	blx	r3
 8015eb4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015eb8:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015ebc:	3b01      	subs	r3, #1
 8015ebe:	b2db      	uxtb	r3, r3
 8015ec0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015ec4:	b10a      	cbz	r2, 8015eca <_ZN8touchgfx3HAL4tickEv+0x8e>
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d1eb      	bne.n	8015ea2 <_ZN8touchgfx3HAL4tickEv+0x66>
 8015eca:	4a3b      	ldr	r2, [pc, #236]	; (8015fb8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015ecc:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015ed0:	7813      	ldrb	r3, [r2, #0]
 8015ed2:	3301      	adds	r3, #1
 8015ed4:	b25b      	sxtb	r3, r3
 8015ed6:	4299      	cmp	r1, r3
 8015ed8:	7013      	strb	r3, [r2, #0]
 8015eda:	dc10      	bgt.n	8015efe <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015edc:	2300      	movs	r3, #0
 8015ede:	68e0      	ldr	r0, [r4, #12]
 8015ee0:	a902      	add	r1, sp, #8
 8015ee2:	7013      	strb	r3, [r2, #0]
 8015ee4:	aa03      	add	r2, sp, #12
 8015ee6:	6803      	ldr	r3, [r0, #0]
 8015ee8:	68db      	ldr	r3, [r3, #12]
 8015eea:	4798      	blx	r3
 8015eec:	6823      	ldr	r3, [r4, #0]
 8015eee:	2800      	cmp	r0, #0
 8015ef0:	d051      	beq.n	8015f96 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8015ef2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015ef6:	4620      	mov	r0, r4
 8015ef8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015efc:	4798      	blx	r3
 8015efe:	2300      	movs	r3, #0
 8015f00:	6960      	ldr	r0, [r4, #20]
 8015f02:	f88d 3007 	strb.w	r3, [sp, #7]
 8015f06:	b158      	cbz	r0, 8015f20 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015f08:	6803      	ldr	r3, [r0, #0]
 8015f0a:	f10d 0107 	add.w	r1, sp, #7
 8015f0e:	68db      	ldr	r3, [r3, #12]
 8015f10:	4798      	blx	r3
 8015f12:	b128      	cbz	r0, 8015f20 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f16:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015f1a:	6803      	ldr	r3, [r0, #0]
 8015f1c:	68db      	ldr	r3, [r3, #12]
 8015f1e:	4798      	blx	r3
 8015f20:	f104 001c 	add.w	r0, r4, #28
 8015f24:	f00e ff5e 	bl	8024de4 <_ZN8touchgfx8Gestures4tickEv>
 8015f28:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015f2c:	b30b      	cbz	r3, 8015f72 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015f2e:	6920      	ldr	r0, [r4, #16]
 8015f30:	6803      	ldr	r3, [r0, #0]
 8015f32:	691b      	ldr	r3, [r3, #16]
 8015f34:	4798      	blx	r3
 8015f36:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015f38:	4606      	mov	r6, r0
 8015f3a:	b903      	cbnz	r3, 8015f3e <_ZN8touchgfx3HAL4tickEv+0x102>
 8015f3c:	6720      	str	r0, [r4, #112]	; 0x70
 8015f3e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015f40:	4a1e      	ldr	r2, [pc, #120]	; (8015fbc <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015f42:	1af3      	subs	r3, r6, r3
 8015f44:	4293      	cmp	r3, r2
 8015f46:	d914      	bls.n	8015f72 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015f48:	6920      	ldr	r0, [r4, #16]
 8015f4a:	6803      	ldr	r3, [r0, #0]
 8015f4c:	699b      	ldr	r3, [r3, #24]
 8015f4e:	4798      	blx	r3
 8015f50:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015f52:	2264      	movs	r2, #100	; 0x64
 8015f54:	1af3      	subs	r3, r6, r3
 8015f56:	fbb3 f3f2 	udiv	r3, r3, r2
 8015f5a:	fbb0 f0f3 	udiv	r0, r0, r3
 8015f5e:	2800      	cmp	r0, #0
 8015f60:	dc1e      	bgt.n	8015fa0 <_ZN8touchgfx3HAL4tickEv+0x164>
 8015f62:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015f66:	6920      	ldr	r0, [r4, #16]
 8015f68:	2100      	movs	r1, #0
 8015f6a:	6803      	ldr	r3, [r0, #0]
 8015f6c:	69db      	ldr	r3, [r3, #28]
 8015f6e:	4798      	blx	r3
 8015f70:	6726      	str	r6, [r4, #112]	; 0x70
 8015f72:	f003 fc39 	bl	80197e8 <_ZN8touchgfx11Application11getInstanceEv>
 8015f76:	6803      	ldr	r3, [r0, #0]
 8015f78:	2100      	movs	r1, #0
 8015f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f7c:	4798      	blx	r3
 8015f7e:	6823      	ldr	r3, [r4, #0]
 8015f80:	4620      	mov	r0, r4
 8015f82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015f86:	4798      	blx	r3
 8015f88:	2001      	movs	r0, #1
 8015f8a:	f7ed faf0 	bl	800356e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015f8e:	2300      	movs	r3, #0
 8015f90:	702b      	strb	r3, [r5, #0]
 8015f92:	b004      	add	sp, #16
 8015f94:	bd70      	pop	{r4, r5, r6, pc}
 8015f96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	4798      	blx	r3
 8015f9e:	e7ae      	b.n	8015efe <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015fa0:	2863      	cmp	r0, #99	; 0x63
 8015fa2:	bfcb      	itete	gt
 8015fa4:	2300      	movgt	r3, #0
 8015fa6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015faa:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015fae:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015fb2:	e7d8      	b.n	8015f66 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015fb4:	20056780 	.word	0x20056780
 8015fb8:	20056781 	.word	0x20056781
 8015fbc:	05f5e100 	.word	0x05f5e100

08015fc0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015fc0:	f7ed bd3a 	b.w	8003a38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015fc4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015fc4:	6581      	str	r1, [r0, #88]	; 0x58
 8015fc6:	301c      	adds	r0, #28
 8015fc8:	f00e bf0a 	b.w	8024de0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015fcc <_ZN8touchgfx3HAL5touchEll>:
 8015fcc:	b530      	push	{r4, r5, lr}
 8015fce:	b087      	sub	sp, #28
 8015fd0:	4604      	mov	r4, r0
 8015fd2:	a804      	add	r0, sp, #16
 8015fd4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015fd8:	f003 f9f2 	bl	80193c0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015fdc:	9b04      	ldr	r3, [sp, #16]
 8015fde:	a906      	add	r1, sp, #24
 8015fe0:	a803      	add	r0, sp, #12
 8015fe2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015fe6:	9b05      	ldr	r3, [sp, #20]
 8015fe8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015fec:	f003 fa26 	bl	801943c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015ff0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015ff4:	f104 001c 	add.w	r0, r4, #28
 8015ff8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015ffc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016000:	b189      	cbz	r1, 8016026 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8016002:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8016006:	9300      	str	r3, [sp, #0]
 8016008:	4613      	mov	r3, r2
 801600a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801600e:	462a      	mov	r2, r5
 8016010:	f00e fef6 	bl	8024e00 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016014:	b128      	cbz	r0, 8016022 <_ZN8touchgfx3HAL5touchEll+0x56>
 8016016:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801601a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801601c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016020:	6623      	str	r3, [r4, #96]	; 0x60
 8016022:	b007      	add	sp, #28
 8016024:	bd30      	pop	{r4, r5, pc}
 8016026:	f00e ff2f 	bl	8024e88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801602a:	2301      	movs	r3, #1
 801602c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016030:	e7f1      	b.n	8016016 <_ZN8touchgfx3HAL5touchEll+0x4a>

08016032 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8016032:	b570      	push	{r4, r5, r6, lr}
 8016034:	2b00      	cmp	r3, #0
 8016036:	d050      	beq.n	80160da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016038:	ea81 0002 	eor.w	r0, r1, r2
 801603c:	07c6      	lsls	r6, r0, #31
 801603e:	d508      	bpl.n	8016052 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8016040:	3a01      	subs	r2, #1
 8016042:	18cc      	adds	r4, r1, r3
 8016044:	42a1      	cmp	r1, r4
 8016046:	d048      	beq.n	80160da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016048:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801604c:	f801 0b01 	strb.w	r0, [r1], #1
 8016050:	e7f8      	b.n	8016044 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8016052:	07d5      	lsls	r5, r2, #31
 8016054:	bf42      	ittt	mi
 8016056:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801605a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801605e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8016062:	2b01      	cmp	r3, #1
 8016064:	d915      	bls.n	8016092 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016066:	ea82 0001 	eor.w	r0, r2, r1
 801606a:	0784      	lsls	r4, r0, #30
 801606c:	d02d      	beq.n	80160ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801606e:	1e94      	subs	r4, r2, #2
 8016070:	4608      	mov	r0, r1
 8016072:	18ce      	adds	r6, r1, r3
 8016074:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8016078:	f820 5b02 	strh.w	r5, [r0], #2
 801607c:	1a35      	subs	r5, r6, r0
 801607e:	2d01      	cmp	r5, #1
 8016080:	d8f8      	bhi.n	8016074 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8016082:	1e98      	subs	r0, r3, #2
 8016084:	f003 0301 	and.w	r3, r3, #1
 8016088:	f020 0001 	bic.w	r0, r0, #1
 801608c:	3002      	adds	r0, #2
 801608e:	4401      	add	r1, r0
 8016090:	4402      	add	r2, r0
 8016092:	1f14      	subs	r4, r2, #4
 8016094:	4608      	mov	r0, r1
 8016096:	18ce      	adds	r6, r1, r3
 8016098:	1a35      	subs	r5, r6, r0
 801609a:	2d03      	cmp	r5, #3
 801609c:	d810      	bhi.n	80160c0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801609e:	089c      	lsrs	r4, r3, #2
 80160a0:	00a0      	lsls	r0, r4, #2
 80160a2:	4401      	add	r1, r0
 80160a4:	3801      	subs	r0, #1
 80160a6:	4402      	add	r2, r0
 80160a8:	f06f 0003 	mvn.w	r0, #3
 80160ac:	fb00 3404 	mla	r4, r0, r4, r3
 80160b0:	440c      	add	r4, r1
 80160b2:	42a1      	cmp	r1, r4
 80160b4:	d011      	beq.n	80160da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80160b6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80160ba:	f801 3b01 	strb.w	r3, [r1], #1
 80160be:	e7f8      	b.n	80160b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 80160c0:	f854 5f04 	ldr.w	r5, [r4, #4]!
 80160c4:	f840 5b04 	str.w	r5, [r0], #4
 80160c8:	e7e6      	b.n	8016098 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 80160ca:	0790      	lsls	r0, r2, #30
 80160cc:	d0e1      	beq.n	8016092 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80160ce:	f832 0b02 	ldrh.w	r0, [r2], #2
 80160d2:	3b02      	subs	r3, #2
 80160d4:	f821 0b02 	strh.w	r0, [r1], #2
 80160d8:	e7db      	b.n	8016092 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80160da:	2001      	movs	r0, #1
 80160dc:	bd70      	pop	{r4, r5, r6, pc}

080160de <_ZN8touchgfx3HAL7noTouchEv>:
 80160de:	b510      	push	{r4, lr}
 80160e0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80160e4:	4604      	mov	r4, r0
 80160e6:	b153      	cbz	r3, 80160fe <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80160e8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80160ec:	2101      	movs	r1, #1
 80160ee:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80160f2:	301c      	adds	r0, #28
 80160f4:	f00e fec8 	bl	8024e88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80160f8:	2300      	movs	r3, #0
 80160fa:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80160fe:	bd10      	pop	{r4, pc}

08016100 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8016100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016104:	4604      	mov	r4, r0
 8016106:	6980      	ldr	r0, [r0, #24]
 8016108:	b085      	sub	sp, #20
 801610a:	460f      	mov	r7, r1
 801610c:	4690      	mov	r8, r2
 801610e:	4699      	mov	r9, r3
 8016110:	b930      	cbnz	r0, 8016120 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8016112:	4b1c      	ldr	r3, [pc, #112]	; (8016184 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8016114:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8016118:	4a1b      	ldr	r2, [pc, #108]	; (8016188 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801611a:	481c      	ldr	r0, [pc, #112]	; (801618c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 801611c:	f010 fc68 	bl	80269f0 <__assert_func>
 8016120:	ad04      	add	r5, sp, #16
 8016122:	2600      	movs	r6, #0
 8016124:	f845 6d04 	str.w	r6, [r5, #-4]!
 8016128:	6806      	ldr	r6, [r0, #0]
 801612a:	9501      	str	r5, [sp, #4]
 801612c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8016130:	9500      	str	r5, [sp, #0]
 8016132:	6835      	ldr	r5, [r6, #0]
 8016134:	47a8      	blx	r5
 8016136:	4d16      	ldr	r5, [pc, #88]	; (8016190 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8016138:	4606      	mov	r6, r0
 801613a:	f8a5 9000 	strh.w	r9, [r5]
 801613e:	f7f0 fa99 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 8016142:	6803      	ldr	r3, [r0, #0]
 8016144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016146:	4798      	blx	r3
 8016148:	2801      	cmp	r0, #1
 801614a:	d012      	beq.n	8016172 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 801614c:	d306      	bcc.n	801615c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 801614e:	280d      	cmp	r0, #13
 8016150:	d80b      	bhi.n	801616a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8016152:	4b10      	ldr	r3, [pc, #64]	; (8016194 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8016154:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8016158:	4a0b      	ldr	r2, [pc, #44]	; (8016188 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801615a:	e7de      	b.n	801611a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801615c:	882b      	ldrh	r3, [r5, #0]
 801615e:	fb08 7203 	mla	r2, r8, r3, r7
 8016162:	9b03      	ldr	r3, [sp, #12]
 8016164:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8016168:	63e3      	str	r3, [r4, #60]	; 0x3c
 801616a:	4630      	mov	r0, r6
 801616c:	b005      	add	sp, #20
 801616e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016172:	882a      	ldrh	r2, [r5, #0]
 8016174:	9b03      	ldr	r3, [sp, #12]
 8016176:	fb08 7202 	mla	r2, r8, r2, r7
 801617a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801617e:	1a9a      	subs	r2, r3, r2
 8016180:	63e2      	str	r2, [r4, #60]	; 0x3c
 8016182:	e7f2      	b.n	801616a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8016184:	0802cd94 	.word	0x0802cd94
 8016188:	0802d119 	.word	0x0802d119
 801618c:	0802cdd9 	.word	0x0802cdd9
 8016190:	20056776 	.word	0x20056776
 8016194:	0802cdff 	.word	0x0802cdff

08016198 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8016198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801619a:	b08b      	sub	sp, #44	; 0x2c
 801619c:	4617      	mov	r7, r2
 801619e:	4604      	mov	r4, r0
 80161a0:	460e      	mov	r6, r1
 80161a2:	461d      	mov	r5, r3
 80161a4:	f7f0 fa66 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 80161a8:	6803      	ldr	r3, [r0, #0]
 80161aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ac:	4798      	blx	r3
 80161ae:	4b0f      	ldr	r3, [pc, #60]	; (80161ec <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x54>)
 80161b0:	6822      	ldr	r2, [r4, #0]
 80161b2:	4631      	mov	r1, r6
 80161b4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80161b8:	881b      	ldrh	r3, [r3, #0]
 80161ba:	4620      	mov	r0, r4
 80161bc:	9306      	str	r3, [sp, #24]
 80161be:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80161c2:	9305      	str	r3, [sp, #20]
 80161c4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80161c8:	9304      	str	r3, [sp, #16]
 80161ca:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80161ce:	9303      	str	r3, [sp, #12]
 80161d0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80161d4:	9302      	str	r3, [sp, #8]
 80161d6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80161da:	e9cd 5300 	strd	r5, r3, [sp]
 80161de:	463b      	mov	r3, r7
 80161e0:	6b95      	ldr	r5, [r2, #56]	; 0x38
 80161e2:	2200      	movs	r2, #0
 80161e4:	47a8      	blx	r5
 80161e6:	b00b      	add	sp, #44	; 0x2c
 80161e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161ea:	bf00      	nop
 80161ec:	20056776 	.word	0x20056776

080161f0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80161f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161f4:	4698      	mov	r8, r3
 80161f6:	6803      	ldr	r3, [r0, #0]
 80161f8:	b08b      	sub	sp, #44	; 0x2c
 80161fa:	4617      	mov	r7, r2
 80161fc:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80161fe:	460e      	mov	r6, r1
 8016200:	4b11      	ldr	r3, [pc, #68]	; (8016248 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8016202:	4604      	mov	r4, r0
 8016204:	f8b3 9000 	ldrh.w	r9, [r3]
 8016208:	f7f0 fa34 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 801620c:	6803      	ldr	r3, [r0, #0]
 801620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016210:	4798      	blx	r3
 8016212:	2302      	movs	r3, #2
 8016214:	9008      	str	r0, [sp, #32]
 8016216:	2200      	movs	r2, #0
 8016218:	4631      	mov	r1, r6
 801621a:	4620      	mov	r0, r4
 801621c:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8016220:	2301      	movs	r3, #1
 8016222:	9305      	str	r3, [sp, #20]
 8016224:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8016228:	9304      	str	r3, [sp, #16]
 801622a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801622e:	9303      	str	r3, [sp, #12]
 8016230:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016234:	9302      	str	r3, [sp, #8]
 8016236:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801623a:	e9cd 8300 	strd	r8, r3, [sp]
 801623e:	463b      	mov	r3, r7
 8016240:	47a8      	blx	r5
 8016242:	b00b      	add	sp, #44	; 0x2c
 8016244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016248:	20056776 	.word	0x20056776

0801624c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801624c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016250:	4698      	mov	r8, r3
 8016252:	6803      	ldr	r3, [r0, #0]
 8016254:	b087      	sub	sp, #28
 8016256:	460e      	mov	r6, r1
 8016258:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801625a:	4617      	mov	r7, r2
 801625c:	4b0d      	ldr	r3, [pc, #52]	; (8016294 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801625e:	4604      	mov	r4, r0
 8016260:	f8b3 9000 	ldrh.w	r9, [r3]
 8016264:	f7f0 fa06 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 8016268:	6803      	ldr	r3, [r0, #0]
 801626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801626c:	4798      	blx	r3
 801626e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8016272:	463a      	mov	r2, r7
 8016274:	4631      	mov	r1, r6
 8016276:	9302      	str	r3, [sp, #8]
 8016278:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801627c:	9301      	str	r3, [sp, #4]
 801627e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016282:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8016286:	9300      	str	r3, [sp, #0]
 8016288:	4620      	mov	r0, r4
 801628a:	4643      	mov	r3, r8
 801628c:	47a8      	blx	r5
 801628e:	b007      	add	sp, #28
 8016290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016294:	20056776 	.word	0x20056776

08016298 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801629c:	4604      	mov	r4, r0
 801629e:	b08f      	sub	sp, #60	; 0x3c
 80162a0:	4610      	mov	r0, r2
 80162a2:	460d      	mov	r5, r1
 80162a4:	4691      	mov	r9, r2
 80162a6:	461e      	mov	r6, r3
 80162a8:	f006 fabc 	bl	801c824 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80162ac:	2800      	cmp	r0, #0
 80162ae:	f000 80b3 	beq.w	8016418 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x180>
 80162b2:	6823      	ldr	r3, [r4, #0]
 80162b4:	4620      	mov	r0, r4
 80162b6:	f8df b190 	ldr.w	fp, [pc, #400]	; 8016448 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>
 80162ba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80162be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162c0:	4798      	blx	r3
 80162c2:	6823      	ldr	r3, [r4, #0]
 80162c4:	4620      	mov	r0, r4
 80162c6:	f8df a184 	ldr.w	sl, [pc, #388]	; 801644c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 80162ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162cc:	4798      	blx	r3
 80162ce:	f8bb 3000 	ldrh.w	r3, [fp]
 80162d2:	4f5a      	ldr	r7, [pc, #360]	; (801643c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 80162d4:	9300      	str	r3, [sp, #0]
 80162d6:	f8ba 3000 	ldrh.w	r3, [sl]
 80162da:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80162de:	4640      	mov	r0, r8
 80162e0:	9301      	str	r3, [sp, #4]
 80162e2:	883b      	ldrh	r3, [r7, #0]
 80162e4:	9302      	str	r3, [sp, #8]
 80162e6:	4b56      	ldr	r3, [pc, #344]	; (8016440 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80162e8:	881a      	ldrh	r2, [r3, #0]
 80162ea:	9304      	str	r3, [sp, #16]
 80162ec:	9203      	str	r2, [sp, #12]
 80162ee:	f006 fb53 	bl	801c998 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80162f2:	8038      	strh	r0, [r7, #0]
 80162f4:	4640      	mov	r0, r8
 80162f6:	f006 fb89 	bl	801ca0c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80162fa:	9b04      	ldr	r3, [sp, #16]
 80162fc:	8018      	strh	r0, [r3, #0]
 80162fe:	4b51      	ldr	r3, [pc, #324]	; (8016444 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016300:	781b      	ldrb	r3, [r3, #0]
 8016302:	2b00      	cmp	r3, #0
 8016304:	f040 808b 	bne.w	801641e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x186>
 8016308:	883b      	ldrh	r3, [r7, #0]
 801630a:	f8aa 0000 	strh.w	r0, [sl]
 801630e:	f8ab 3000 	strh.w	r3, [fp]
 8016312:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016314:	4648      	mov	r0, r9
 8016316:	6c27      	ldr	r7, [r4, #64]	; 0x40
 8016318:	9304      	str	r3, [sp, #16]
 801631a:	f006 fa83 	bl	801c824 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801631e:	2200      	movs	r2, #0
 8016320:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8016324:	4611      	mov	r1, r2
 8016326:	4628      	mov	r0, r5
 8016328:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801632c:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8016330:	f7ef fe18 	bl	8005f64 <_ZN8touchgfx8Drawable5setXYEss>
 8016334:	2301      	movs	r3, #1
 8016336:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801633a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801633e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016342:	2b00      	cmp	r3, #0
 8016344:	dd71      	ble.n	801642a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 8016346:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801634a:	2b00      	cmp	r3, #0
 801634c:	dd6d      	ble.n	801642a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 801634e:	462a      	mov	r2, r5
 8016350:	ab0a      	add	r3, sp, #40	; 0x28
 8016352:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016356:	6851      	ldr	r1, [r2, #4]
 8016358:	c303      	stmia	r3!, {r0, r1}
 801635a:	4631      	mov	r1, r6
 801635c:	a80a      	add	r0, sp, #40	; 0x28
 801635e:	f7ff fbe5 	bl	8015b2c <_ZN8touchgfx4RectaNERKS0_>
 8016362:	4b36      	ldr	r3, [pc, #216]	; (801643c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8016364:	2600      	movs	r6, #0
 8016366:	f9b3 2000 	ldrsh.w	r2, [r3]
 801636a:	4b35      	ldr	r3, [pc, #212]	; (8016440 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 801636c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8016370:	aa0a      	add	r2, sp, #40	; 0x28
 8016372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016376:	960c      	str	r6, [sp, #48]	; 0x30
 8016378:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801637c:	ab08      	add	r3, sp, #32
 801637e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016382:	e883 0003 	stmia.w	r3, {r0, r1}
 8016386:	4618      	mov	r0, r3
 8016388:	a90c      	add	r1, sp, #48	; 0x30
 801638a:	f7ff fbcf 	bl	8015b2c <_ZN8touchgfx4RectaNERKS0_>
 801638e:	a807      	add	r0, sp, #28
 8016390:	f006 fc00 	bl	801cb94 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016394:	4680      	mov	r8, r0
 8016396:	f7f0 f96d 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 801639a:	6802      	ldr	r2, [r0, #0]
 801639c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801639e:	4790      	blx	r2
 80163a0:	4580      	cmp	r8, r0
 80163a2:	d049      	beq.n	8016438 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a0>
 80163a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80163a6:	b150      	cbz	r0, 80163be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 80163a8:	a807      	add	r0, sp, #28
 80163aa:	f006 fbf3 	bl	801cb94 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80163ae:	4606      	mov	r6, r0
 80163b0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80163b2:	6803      	ldr	r3, [r0, #0]
 80163b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163b6:	4798      	blx	r3
 80163b8:	1a33      	subs	r3, r6, r0
 80163ba:	4258      	negs	r0, r3
 80163bc:	4158      	adcs	r0, r3
 80163be:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80163c2:	2600      	movs	r6, #0
 80163c4:	696b      	ldr	r3, [r5, #20]
 80163c6:	a908      	add	r1, sp, #32
 80163c8:	682a      	ldr	r2, [r5, #0]
 80163ca:	4628      	mov	r0, r5
 80163cc:	9305      	str	r3, [sp, #20]
 80163ce:	616e      	str	r6, [r5, #20]
 80163d0:	6892      	ldr	r2, [r2, #8]
 80163d2:	4790      	blx	r2
 80163d4:	9b05      	ldr	r3, [sp, #20]
 80163d6:	4652      	mov	r2, sl
 80163d8:	4649      	mov	r1, r9
 80163da:	616b      	str	r3, [r5, #20]
 80163dc:	4628      	mov	r0, r5
 80163de:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80163e2:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80163e6:	f7ef fdbd 	bl	8005f64 <_ZN8touchgfx8Drawable5setXYEss>
 80163ea:	9b04      	ldr	r3, [sp, #16]
 80163ec:	9a00      	ldr	r2, [sp, #0]
 80163ee:	4620      	mov	r0, r4
 80163f0:	e9c4 370f 	strd	r3, r7, [r4, #60]	; 0x3c
 80163f4:	4b14      	ldr	r3, [pc, #80]	; (8016448 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80163f6:	801a      	strh	r2, [r3, #0]
 80163f8:	9a01      	ldr	r2, [sp, #4]
 80163fa:	4b14      	ldr	r3, [pc, #80]	; (801644c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80163fc:	801a      	strh	r2, [r3, #0]
 80163fe:	9a02      	ldr	r2, [sp, #8]
 8016400:	4b0e      	ldr	r3, [pc, #56]	; (801643c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8016402:	801a      	strh	r2, [r3, #0]
 8016404:	4b0e      	ldr	r3, [pc, #56]	; (8016440 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8016406:	9a03      	ldr	r2, [sp, #12]
 8016408:	801a      	strh	r2, [r3, #0]
 801640a:	6823      	ldr	r3, [r4, #0]
 801640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801640e:	4798      	blx	r3
 8016410:	6823      	ldr	r3, [r4, #0]
 8016412:	4620      	mov	r0, r4
 8016414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016416:	4798      	blx	r3
 8016418:	b00f      	add	sp, #60	; 0x3c
 801641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801641e:	883b      	ldrh	r3, [r7, #0]
 8016420:	f8ab 0000 	strh.w	r0, [fp]
 8016424:	f8aa 3000 	strh.w	r3, [sl]
 8016428:	e773      	b.n	8016312 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801642a:	462a      	mov	r2, r5
 801642c:	ab0a      	add	r3, sp, #40	; 0x28
 801642e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016432:	6851      	ldr	r1, [r2, #4]
 8016434:	c303      	stmia	r3!, {r0, r1}
 8016436:	e794      	b.n	8016362 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xca>
 8016438:	4630      	mov	r0, r6
 801643a:	e7c0      	b.n	80163be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 801643c:	20056770 	.word	0x20056770
 8016440:	20056772 	.word	0x20056772
 8016444:	20056774 	.word	0x20056774
 8016448:	20056776 	.word	0x20056776
 801644c:	20056778 	.word	0x20056778

08016450 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8016450:	4b07      	ldr	r3, [pc, #28]	; (8016470 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8016452:	b510      	push	{r4, lr}
 8016454:	781b      	ldrb	r3, [r3, #0]
 8016456:	4604      	mov	r4, r0
 8016458:	b13b      	cbz	r3, 801646a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801645a:	6803      	ldr	r3, [r0, #0]
 801645c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801645e:	4798      	blx	r3
 8016460:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016462:	4283      	cmp	r3, r0
 8016464:	d101      	bne.n	801646a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016466:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016468:	bd10      	pop	{r4, pc}
 801646a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801646c:	e7fc      	b.n	8016468 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801646e:	bf00      	nop
 8016470:	2005677a 	.word	0x2005677a

08016474 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8016474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016478:	b088      	sub	sp, #32
 801647a:	4692      	mov	sl, r2
 801647c:	461c      	mov	r4, r3
 801647e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016482:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8016486:	2500      	movs	r5, #0
 8016488:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 801648c:	4606      	mov	r6, r0
 801648e:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8016492:	fb09 a404 	mla	r4, r9, r4, sl
 8016496:	9503      	str	r5, [sp, #12]
 8016498:	f8ad 8014 	strh.w	r8, [sp, #20]
 801649c:	f8ad 7016 	strh.w	r7, [sp, #22]
 80164a0:	f88d 501c 	strb.w	r5, [sp, #28]
 80164a4:	e9cd 3100 	strd	r3, r1, [sp]
 80164a8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80164ac:	f8ad 3018 	strh.w	r3, [sp, #24]
 80164b0:	f7ff ffce 	bl	8016450 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80164b4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80164b8:	f8ad 901a 	strh.w	r9, [sp, #26]
 80164bc:	f88d 501e 	strb.w	r5, [sp, #30]
 80164c0:	9404      	str	r4, [sp, #16]
 80164c2:	f88d 501d 	strb.w	r5, [sp, #29]
 80164c6:	f1b8 0f00 	cmp.w	r8, #0
 80164ca:	d000      	beq.n	80164ce <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5a>
 80164cc:	b937      	cbnz	r7, 80164dc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x68>
 80164ce:	4b0d      	ldr	r3, [pc, #52]	; (8016504 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x90>)
 80164d0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80164d4:	4a0c      	ldr	r2, [pc, #48]	; (8016508 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 80164d6:	480d      	ldr	r0, [pc, #52]	; (801650c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 80164d8:	f010 fa8a 	bl	80269f0 <__assert_func>
 80164dc:	6833      	ldr	r3, [r6, #0]
 80164de:	4630      	mov	r0, r6
 80164e0:	9c00      	ldr	r4, [sp, #0]
 80164e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164e4:	4798      	blx	r3
 80164e6:	4220      	tst	r0, r4
 80164e8:	d104      	bne.n	80164f4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x80>
 80164ea:	4b09      	ldr	r3, [pc, #36]	; (8016510 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 80164ec:	f240 2105 	movw	r1, #517	; 0x205
 80164f0:	4a05      	ldr	r2, [pc, #20]	; (8016508 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 80164f2:	e7f0      	b.n	80164d6 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 80164f4:	6870      	ldr	r0, [r6, #4]
 80164f6:	4669      	mov	r1, sp
 80164f8:	6803      	ldr	r3, [r0, #0]
 80164fa:	685b      	ldr	r3, [r3, #4]
 80164fc:	4798      	blx	r3
 80164fe:	b008      	add	sp, #32
 8016500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016504:	0802cc27 	.word	0x0802cc27
 8016508:	0802cf54 	.word	0x0802cf54
 801650c:	0802cdd9 	.word	0x0802cdd9
 8016510:	0802cc5f 	.word	0x0802cc5f

08016514 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8016514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016518:	b089      	sub	sp, #36	; 0x24
 801651a:	4693      	mov	fp, r2
 801651c:	461d      	mov	r5, r3
 801651e:	2400      	movs	r4, #0
 8016520:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8016524:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016528:	468a      	mov	sl, r1
 801652a:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 801652e:	fb09 b505 	mla	r5, r9, r5, fp
 8016532:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8016536:	4606      	mov	r6, r0
 8016538:	9403      	str	r4, [sp, #12]
 801653a:	e9cd 3400 	strd	r3, r4, [sp]
 801653e:	f7ff ff87 	bl	8016450 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016542:	f8ad 8014 	strh.w	r8, [sp, #20]
 8016546:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801654a:	f8ad 7016 	strh.w	r7, [sp, #22]
 801654e:	f8ad 4018 	strh.w	r4, [sp, #24]
 8016552:	9504      	str	r5, [sp, #16]
 8016554:	f8ad 901a 	strh.w	r9, [sp, #26]
 8016558:	f8cd a00c 	str.w	sl, [sp, #12]
 801655c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8016560:	f88d 401e 	strb.w	r4, [sp, #30]
 8016564:	f1b8 0f00 	cmp.w	r8, #0
 8016568:	d000      	beq.n	801656c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x58>
 801656a:	b937      	cbnz	r7, 801657a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x66>
 801656c:	4b0d      	ldr	r3, [pc, #52]	; (80165a4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x90>)
 801656e:	f240 2119 	movw	r1, #537	; 0x219
 8016572:	4a0d      	ldr	r2, [pc, #52]	; (80165a8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8016574:	480d      	ldr	r0, [pc, #52]	; (80165ac <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8016576:	f010 fa3b 	bl	80269f0 <__assert_func>
 801657a:	6833      	ldr	r3, [r6, #0]
 801657c:	4630      	mov	r0, r6
 801657e:	9c00      	ldr	r4, [sp, #0]
 8016580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016582:	4798      	blx	r3
 8016584:	4220      	tst	r0, r4
 8016586:	d104      	bne.n	8016592 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x7e>
 8016588:	4b09      	ldr	r3, [pc, #36]	; (80165b0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 801658a:	f240 211a 	movw	r1, #538	; 0x21a
 801658e:	4a06      	ldr	r2, [pc, #24]	; (80165a8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8016590:	e7f0      	b.n	8016574 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 8016592:	6870      	ldr	r0, [r6, #4]
 8016594:	4669      	mov	r1, sp
 8016596:	6803      	ldr	r3, [r0, #0]
 8016598:	685b      	ldr	r3, [r3, #4]
 801659a:	4798      	blx	r3
 801659c:	b009      	add	sp, #36	; 0x24
 801659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165a2:	bf00      	nop
 80165a4:	0802cca4 	.word	0x0802cca4
 80165a8:	0802cfca 	.word	0x0802cfca
 80165ac:	0802cdd9 	.word	0x0802cdd9
 80165b0:	0802ccdc 	.word	0x0802ccdc

080165b4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80165b4:	b508      	push	{r3, lr}
 80165b6:	290d      	cmp	r1, #13
 80165b8:	d817      	bhi.n	80165ea <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80165ba:	e8df f001 	tbb	[pc, r1]
 80165be:	090b      	.short	0x090b
 80165c0:	0d0d0d07 	.word	0x0d0d0d07
 80165c4:	1414140d 	.word	0x1414140d
 80165c8:	0d0d1414 	.word	0x0d0d1414
 80165cc:	2020      	movs	r0, #32
 80165ce:	bd08      	pop	{r3, pc}
 80165d0:	2018      	movs	r0, #24
 80165d2:	e7fc      	b.n	80165ce <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80165d4:	2010      	movs	r0, #16
 80165d6:	e7fa      	b.n	80165ce <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80165d8:	4b05      	ldr	r3, [pc, #20]	; (80165f0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80165da:	f240 2177 	movw	r1, #631	; 0x277
 80165de:	4a05      	ldr	r2, [pc, #20]	; (80165f4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80165e0:	4805      	ldr	r0, [pc, #20]	; (80165f8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80165e2:	f010 fa05 	bl	80269f0 <__assert_func>
 80165e6:	2008      	movs	r0, #8
 80165e8:	e7f1      	b.n	80165ce <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80165ea:	2000      	movs	r0, #0
 80165ec:	e7ef      	b.n	80165ce <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80165ee:	bf00      	nop
 80165f0:	0802ce55 	.word	0x0802ce55
 80165f4:	0802d2e3 	.word	0x0802d2e3
 80165f8:	0802cdd9 	.word	0x0802cdd9

080165fc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80165fc:	b570      	push	{r4, r5, r6, lr}
 80165fe:	460d      	mov	r5, r1
 8016600:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8016604:	4616      	mov	r6, r2
 8016606:	461c      	mov	r4, r3
 8016608:	f7ff ffd4 	bl	80165b4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 801660c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8016610:	10c0      	asrs	r0, r0, #3
 8016612:	fb06 5101 	mla	r1, r6, r1, r5
 8016616:	fb00 4001 	mla	r0, r0, r1, r4
 801661a:	bd70      	pop	{r4, r5, r6, pc}

0801661c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801661c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016620:	b08a      	sub	sp, #40	; 0x28
 8016622:	f04f 0c00 	mov.w	ip, #0
 8016626:	4604      	mov	r4, r0
 8016628:	469a      	mov	sl, r3
 801662a:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801662e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8016632:	2d0b      	cmp	r5, #11
 8016634:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8016638:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801663c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8016640:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8016644:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8016648:	f8cd c014 	str.w	ip, [sp, #20]
 801664c:	d129      	bne.n	80166a2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x86>
 801664e:	2080      	movs	r0, #128	; 0x80
 8016650:	9204      	str	r2, [sp, #16]
 8016652:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8016656:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801665a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801665e:	f8ad 701c 	strh.w	r7, [sp, #28]
 8016662:	f8ad 601e 	strh.w	r6, [sp, #30]
 8016666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801666a:	4620      	mov	r0, r4
 801666c:	f7ff fef0 	bl	8016450 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016670:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8016674:	4603      	mov	r3, r0
 8016676:	4651      	mov	r1, sl
 8016678:	4620      	mov	r0, r4
 801667a:	e9cd 9800 	strd	r9, r8, [sp]
 801667e:	f7ff ffbd 	bl	80165fc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016682:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8016686:	9006      	str	r0, [sp, #24]
 8016688:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801668c:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8016690:	b107      	cbz	r7, 8016694 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x78>
 8016692:	b9d6      	cbnz	r6, 80166ca <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xae>
 8016694:	4b17      	ldr	r3, [pc, #92]	; (80166f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8016696:	f240 11cf 	movw	r1, #463	; 0x1cf
 801669a:	4a17      	ldr	r2, [pc, #92]	; (80166f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 801669c:	4817      	ldr	r0, [pc, #92]	; (80166fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 801669e:	f010 f9a7 	bl	80269f0 <__assert_func>
 80166a2:	2d02      	cmp	r5, #2
 80166a4:	d108      	bne.n	80166b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x9c>
 80166a6:	2bff      	cmp	r3, #255	; 0xff
 80166a8:	d104      	bne.n	80166b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x98>
 80166aa:	2800      	cmp	r0, #0
 80166ac:	bf14      	ite	ne
 80166ae:	2040      	movne	r0, #64	; 0x40
 80166b0:	2020      	moveq	r0, #32
 80166b2:	e7cd      	b.n	8016650 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 80166b4:	2040      	movs	r0, #64	; 0x40
 80166b6:	e7cb      	b.n	8016650 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 80166b8:	2bff      	cmp	r3, #255	; 0xff
 80166ba:	d104      	bne.n	80166c6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xaa>
 80166bc:	2800      	cmp	r0, #0
 80166be:	bf14      	ite	ne
 80166c0:	2004      	movne	r0, #4
 80166c2:	2001      	moveq	r0, #1
 80166c4:	e7c4      	b.n	8016650 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 80166c6:	2004      	movs	r0, #4
 80166c8:	e7c2      	b.n	8016650 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 80166ca:	6823      	ldr	r3, [r4, #0]
 80166cc:	4620      	mov	r0, r4
 80166ce:	9d02      	ldr	r5, [sp, #8]
 80166d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166d2:	4798      	blx	r3
 80166d4:	4228      	tst	r0, r5
 80166d6:	d104      	bne.n	80166e2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc6>
 80166d8:	4b09      	ldr	r3, [pc, #36]	; (8016700 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe4>)
 80166da:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80166de:	4a06      	ldr	r2, [pc, #24]	; (80166f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80166e0:	e7dc      	b.n	801669c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x80>
 80166e2:	6860      	ldr	r0, [r4, #4]
 80166e4:	a902      	add	r1, sp, #8
 80166e6:	6803      	ldr	r3, [r0, #0]
 80166e8:	685b      	ldr	r3, [r3, #4]
 80166ea:	4798      	blx	r3
 80166ec:	b00a      	add	sp, #40	; 0x28
 80166ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166f2:	bf00      	nop
 80166f4:	0802cc27 	.word	0x0802cc27
 80166f8:	0802d17d 	.word	0x0802d17d
 80166fc:	0802cdd9 	.word	0x0802cdd9
 8016700:	0802cc5f 	.word	0x0802cc5f

08016704 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8016704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016708:	b08b      	sub	sp, #44	; 0x2c
 801670a:	469b      	mov	fp, r3
 801670c:	4604      	mov	r4, r0
 801670e:	4692      	mov	sl, r2
 8016710:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8016714:	2600      	movs	r6, #0
 8016716:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801671a:	4689      	mov	r9, r1
 801671c:	2fff      	cmp	r7, #255	; 0xff
 801671e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8016722:	9605      	str	r6, [sp, #20]
 8016724:	bf14      	ite	ne
 8016726:	2308      	movne	r3, #8
 8016728:	2302      	moveq	r3, #2
 801672a:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801672e:	f7ff fe8f 	bl	8016450 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016732:	465a      	mov	r2, fp
 8016734:	4603      	mov	r3, r0
 8016736:	4651      	mov	r1, sl
 8016738:	4620      	mov	r0, r4
 801673a:	e9cd 8500 	strd	r8, r5, [sp]
 801673e:	f7ff ff5d 	bl	80165fc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016742:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016746:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801674a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801674e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016752:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8016756:	f8ad 301e 	strh.w	r3, [sp, #30]
 801675a:	6823      	ldr	r3, [r4, #0]
 801675c:	9d02      	ldr	r5, [sp, #8]
 801675e:	9006      	str	r0, [sp, #24]
 8016760:	4620      	mov	r0, r4
 8016762:	f8ad 6020 	strh.w	r6, [sp, #32]
 8016766:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 801676a:	f8cd 9014 	str.w	r9, [sp, #20]
 801676e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8016772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016774:	4798      	blx	r3
 8016776:	4228      	tst	r0, r5
 8016778:	d106      	bne.n	8016788 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801677a:	4b07      	ldr	r3, [pc, #28]	; (8016798 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801677c:	f240 212e 	movw	r1, #558	; 0x22e
 8016780:	4a06      	ldr	r2, [pc, #24]	; (801679c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8016782:	4807      	ldr	r0, [pc, #28]	; (80167a0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8016784:	f010 f934 	bl	80269f0 <__assert_func>
 8016788:	6860      	ldr	r0, [r4, #4]
 801678a:	a902      	add	r1, sp, #8
 801678c:	6803      	ldr	r3, [r0, #0]
 801678e:	685b      	ldr	r3, [r3, #4]
 8016790:	4798      	blx	r3
 8016792:	b00b      	add	sp, #44	; 0x2c
 8016794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016798:	0802cc5f 	.word	0x0802cc5f
 801679c:	0802d24e 	.word	0x0802d24e
 80167a0:	0802cdd9 	.word	0x0802cdd9

080167a4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80167a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80167a8:	461f      	mov	r7, r3
 80167aa:	4b0b      	ldr	r3, [pc, #44]	; (80167d8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80167ac:	460d      	mov	r5, r1
 80167ae:	4616      	mov	r6, r2
 80167b0:	f8b3 8000 	ldrh.w	r8, [r3]
 80167b4:	4604      	mov	r4, r0
 80167b6:	f7ef ff5d 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 80167ba:	6803      	ldr	r3, [r0, #0]
 80167bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167be:	4798      	blx	r3
 80167c0:	463b      	mov	r3, r7
 80167c2:	4632      	mov	r2, r6
 80167c4:	4629      	mov	r1, r5
 80167c6:	e9cd 8000 	strd	r8, r0, [sp]
 80167ca:	4620      	mov	r0, r4
 80167cc:	f7ff ff16 	bl	80165fc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80167d0:	b002      	add	sp, #8
 80167d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167d6:	bf00      	nop
 80167d8:	20056776 	.word	0x20056776

080167dc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80167dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167e0:	4698      	mov	r8, r3
 80167e2:	b088      	sub	sp, #32
 80167e4:	2300      	movs	r3, #0
 80167e6:	4617      	mov	r7, r2
 80167e8:	4604      	mov	r4, r0
 80167ea:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80167ee:	9303      	str	r3, [sp, #12]
 80167f0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80167f4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80167f8:	f8ad 6014 	strh.w	r6, [sp, #20]
 80167fc:	f8ad 5016 	strh.w	r5, [sp, #22]
 8016800:	e9cd 3100 	strd	r3, r1, [sp]
 8016804:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016808:	f8ad 3018 	strh.w	r3, [sp, #24]
 801680c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8016810:	f88d 301c 	strb.w	r3, [sp, #28]
 8016814:	f7ff fe1c 	bl	8016450 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016818:	4642      	mov	r2, r8
 801681a:	4603      	mov	r3, r0
 801681c:	4639      	mov	r1, r7
 801681e:	4620      	mov	r0, r4
 8016820:	f7ff ffc0 	bl	80167a4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016824:	4b16      	ldr	r3, [pc, #88]	; (8016880 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8016826:	9004      	str	r0, [sp, #16]
 8016828:	881b      	ldrh	r3, [r3, #0]
 801682a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801682e:	f7ef ff21 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 8016832:	6803      	ldr	r3, [r0, #0]
 8016834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016836:	4798      	blx	r3
 8016838:	f88d 001e 	strb.w	r0, [sp, #30]
 801683c:	f88d 001d 	strb.w	r0, [sp, #29]
 8016840:	b106      	cbz	r6, 8016844 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8016842:	b935      	cbnz	r5, 8016852 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8016844:	4b0f      	ldr	r3, [pc, #60]	; (8016884 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8016846:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 801684a:	4a0f      	ldr	r2, [pc, #60]	; (8016888 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801684c:	480f      	ldr	r0, [pc, #60]	; (801688c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801684e:	f010 f8cf 	bl	80269f0 <__assert_func>
 8016852:	6823      	ldr	r3, [r4, #0]
 8016854:	4620      	mov	r0, r4
 8016856:	9d00      	ldr	r5, [sp, #0]
 8016858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801685a:	4798      	blx	r3
 801685c:	4228      	tst	r0, r5
 801685e:	d104      	bne.n	801686a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8016860:	4b0b      	ldr	r3, [pc, #44]	; (8016890 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8016862:	f240 11ed 	movw	r1, #493	; 0x1ed
 8016866:	4a08      	ldr	r2, [pc, #32]	; (8016888 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016868:	e7f0      	b.n	801684c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801686a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801686c:	4669      	mov	r1, sp
 801686e:	6860      	ldr	r0, [r4, #4]
 8016870:	9303      	str	r3, [sp, #12]
 8016872:	6803      	ldr	r3, [r0, #0]
 8016874:	685b      	ldr	r3, [r3, #4]
 8016876:	4798      	blx	r3
 8016878:	b008      	add	sp, #32
 801687a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801687e:	bf00      	nop
 8016880:	20056776 	.word	0x20056776
 8016884:	0802cc27 	.word	0x0802cc27
 8016888:	0802d02f 	.word	0x0802d02f
 801688c:	0802cdd9 	.word	0x0802cdd9
 8016890:	0802cc5f 	.word	0x0802cc5f

08016894 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016894:	b570      	push	{r4, r5, r6, lr}
 8016896:	b08a      	sub	sp, #40	; 0x28
 8016898:	4604      	mov	r4, r0
 801689a:	466b      	mov	r3, sp
 801689c:	e883 0006 	stmia.w	r3, {r1, r2}
 80168a0:	4b1f      	ldr	r3, [pc, #124]	; (8016920 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 80168a2:	781b      	ldrb	r3, [r3, #0]
 80168a4:	b933      	cbnz	r3, 80168b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 80168a6:	4b1f      	ldr	r3, [pc, #124]	; (8016924 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80168a8:	f240 213f 	movw	r1, #575	; 0x23f
 80168ac:	4a1e      	ldr	r2, [pc, #120]	; (8016928 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80168ae:	481f      	ldr	r0, [pc, #124]	; (801692c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80168b0:	f010 f89e 	bl	80269f0 <__assert_func>
 80168b4:	2300      	movs	r3, #0
 80168b6:	f8bd 5000 	ldrh.w	r5, [sp]
 80168ba:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80168be:	9305      	str	r3, [sp, #20]
 80168c0:	2301      	movs	r3, #1
 80168c2:	9302      	str	r3, [sp, #8]
 80168c4:	6803      	ldr	r3, [r0, #0]
 80168c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168c8:	4798      	blx	r3
 80168ca:	4632      	mov	r2, r6
 80168cc:	4629      	mov	r1, r5
 80168ce:	4603      	mov	r3, r0
 80168d0:	4620      	mov	r0, r4
 80168d2:	f7ff ff67 	bl	80167a4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80168d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80168d8:	9003      	str	r0, [sp, #12]
 80168da:	9306      	str	r3, [sp, #24]
 80168dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80168e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80168e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80168e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80168ec:	4b10      	ldr	r3, [pc, #64]	; (8016930 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80168ee:	881b      	ldrh	r3, [r3, #0]
 80168f0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80168f4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80168f8:	f7ef febc 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 80168fc:	6803      	ldr	r3, [r0, #0]
 80168fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016900:	4798      	blx	r3
 8016902:	23ff      	movs	r3, #255	; 0xff
 8016904:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016908:	a902      	add	r1, sp, #8
 801690a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801690e:	6860      	ldr	r0, [r4, #4]
 8016910:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016914:	6803      	ldr	r3, [r0, #0]
 8016916:	685b      	ldr	r3, [r3, #4]
 8016918:	4798      	blx	r3
 801691a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801691c:	b00a      	add	sp, #40	; 0x28
 801691e:	bd70      	pop	{r4, r5, r6, pc}
 8016920:	2005677b 	.word	0x2005677b
 8016924:	0802cd26 	.word	0x0802cd26
 8016928:	0802d0d3 	.word	0x0802d0d3
 801692c:	0802cdd9 	.word	0x0802cdd9
 8016930:	20056776 	.word	0x20056776

08016934 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016936:	b08b      	sub	sp, #44	; 0x2c
 8016938:	4604      	mov	r4, r0
 801693a:	466d      	mov	r5, sp
 801693c:	e885 0006 	stmia.w	r5, {r1, r2}
 8016940:	461d      	mov	r5, r3
 8016942:	2300      	movs	r3, #0
 8016944:	f8bd 6000 	ldrh.w	r6, [sp]
 8016948:	9305      	str	r3, [sp, #20]
 801694a:	2301      	movs	r3, #1
 801694c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016950:	9302      	str	r3, [sp, #8]
 8016952:	6803      	ldr	r3, [r0, #0]
 8016954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016956:	4798      	blx	r3
 8016958:	463a      	mov	r2, r7
 801695a:	4631      	mov	r1, r6
 801695c:	4603      	mov	r3, r0
 801695e:	4620      	mov	r0, r4
 8016960:	f7ff ff20 	bl	80167a4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016964:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016968:	9003      	str	r0, [sp, #12]
 801696a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801696e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016972:	9506      	str	r5, [sp, #24]
 8016974:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016978:	4b0d      	ldr	r3, [pc, #52]	; (80169b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801697a:	881b      	ldrh	r3, [r3, #0]
 801697c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016980:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016982:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016986:	f7ef fe75 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 801698a:	6803      	ldr	r3, [r0, #0]
 801698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801698e:	4798      	blx	r3
 8016990:	23ff      	movs	r3, #255	; 0xff
 8016992:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016996:	a902      	add	r1, sp, #8
 8016998:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801699c:	6860      	ldr	r0, [r4, #4]
 801699e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80169a2:	6803      	ldr	r3, [r0, #0]
 80169a4:	685b      	ldr	r3, [r3, #4]
 80169a6:	4798      	blx	r3
 80169a8:	4628      	mov	r0, r5
 80169aa:	b00b      	add	sp, #44	; 0x2c
 80169ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169ae:	bf00      	nop
 80169b0:	20056776 	.word	0x20056776

080169b4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80169b4:	b570      	push	{r4, r5, r6, lr}
 80169b6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80169ba:	4604      	mov	r4, r0
 80169bc:	b19b      	cbz	r3, 80169e6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80169be:	2002      	movs	r0, #2
 80169c0:	f7ec fde0 	bl	8003584 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80169c4:	2300      	movs	r3, #0
 80169c6:	4620      	mov	r0, r4
 80169c8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80169cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80169d0:	6823      	ldr	r3, [r4, #0]
 80169d2:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 80169d6:	f7ff fd3b 	bl	8016450 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80169da:	4601      	mov	r1, r0
 80169dc:	4620      	mov	r0, r4
 80169de:	462b      	mov	r3, r5
 80169e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169e4:	4718      	bx	r3
 80169e6:	bd70      	pop	{r4, r5, r6, pc}

080169e8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80169e8:	b538      	push	{r3, r4, r5, lr}
 80169ea:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 80169ee:	4604      	mov	r4, r0
 80169f0:	460d      	mov	r5, r1
 80169f2:	428a      	cmp	r2, r1
 80169f4:	d008      	beq.n	8016a08 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 80169f6:	2a01      	cmp	r2, #1
 80169f8:	6803      	ldr	r3, [r0, #0]
 80169fa:	d106      	bne.n	8016a0a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 80169fc:	b929      	cbnz	r1, 8016a0a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 80169fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8016a02:	4798      	blx	r3
 8016a04:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8016a08:	bd38      	pop	{r3, r4, r5, pc}
 8016a0a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016a0e:	4620      	mov	r0, r4
 8016a10:	e7f7      	b.n	8016a02 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08016a14 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8016a14:	4b0d      	ldr	r3, [pc, #52]	; (8016a4c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8016a16:	b510      	push	{r4, lr}
 8016a18:	781b      	ldrb	r3, [r3, #0]
 8016a1a:	4604      	mov	r4, r0
 8016a1c:	b95b      	cbnz	r3, 8016a36 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016a1e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8016a22:	2b02      	cmp	r3, #2
 8016a24:	d007      	beq.n	8016a36 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016a26:	6840      	ldr	r0, [r0, #4]
 8016a28:	f000 f93a 	bl	8016ca0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016a2c:	b118      	cbz	r0, 8016a36 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016a2e:	6862      	ldr	r2, [r4, #4]
 8016a30:	7a53      	ldrb	r3, [r2, #9]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d0fc      	beq.n	8016a30 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016a36:	f7ec fff1 	bl	8003a1c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016a3a:	4620      	mov	r0, r4
 8016a3c:	2100      	movs	r1, #0
 8016a3e:	f7ff ffd3 	bl	80169e8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016a42:	4620      	mov	r0, r4
 8016a44:	f7ff fd04 	bl	8016450 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016a48:	bd10      	pop	{r4, pc}
 8016a4a:	bf00      	nop
 8016a4c:	2005677a 	.word	0x2005677a

08016a50 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016a50:	4770      	bx	lr

08016a52 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8016a52:	2000      	movs	r0, #0
 8016a54:	4770      	bx	lr

08016a56 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016a56:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016a5a:	1a13      	subs	r3, r2, r0
 8016a5c:	4258      	negs	r0, r3
 8016a5e:	4158      	adcs	r0, r3
 8016a60:	4770      	bx	lr

08016a62 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016a62:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016a66:	1a9b      	subs	r3, r3, r2
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	bfdc      	itt	le
 8016a6c:	6882      	ldrle	r2, [r0, #8]
 8016a6e:	189b      	addle	r3, r3, r2
 8016a70:	2b01      	cmp	r3, #1
 8016a72:	bfcc      	ite	gt
 8016a74:	2000      	movgt	r0, #0
 8016a76:	2001      	movle	r0, #1
 8016a78:	4770      	bx	lr

08016a7a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016a7a:	6902      	ldr	r2, [r0, #16]
 8016a7c:	6840      	ldr	r0, [r0, #4]
 8016a7e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8016a82:	4770      	bx	lr

08016a84 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016a84:	6803      	ldr	r3, [r0, #0]
 8016a86:	691b      	ldr	r3, [r3, #16]
 8016a88:	4718      	bx	r3

08016a8a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016a8a:	4770      	bx	lr

08016a8c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016a8c:	4770      	bx	lr
	...

08016a90 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016a90:	2301      	movs	r3, #1
 8016a92:	b570      	push	{r4, r5, r6, lr}
 8016a94:	7203      	strb	r3, [r0, #8]
 8016a96:	4604      	mov	r4, r0
 8016a98:	6840      	ldr	r0, [r0, #4]
 8016a9a:	6803      	ldr	r3, [r0, #0]
 8016a9c:	699b      	ldr	r3, [r3, #24]
 8016a9e:	4798      	blx	r3
 8016aa0:	6803      	ldr	r3, [r0, #0]
 8016aa2:	4605      	mov	r5, r0
 8016aa4:	2b40      	cmp	r3, #64	; 0x40
 8016aa6:	d039      	beq.n	8016b1c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016aa8:	d815      	bhi.n	8016ad6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8016aaa:	2b04      	cmp	r3, #4
 8016aac:	d022      	beq.n	8016af4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016aae:	d808      	bhi.n	8016ac2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016ab0:	2b01      	cmp	r3, #1
 8016ab2:	d033      	beq.n	8016b1c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016ab4:	2b02      	cmp	r3, #2
 8016ab6:	d108      	bne.n	8016aca <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8016ab8:	6823      	ldr	r3, [r4, #0]
 8016aba:	4620      	mov	r0, r4
 8016abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016abe:	4798      	blx	r3
 8016ac0:	e025      	b.n	8016b0e <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8016ac2:	2b08      	cmp	r3, #8
 8016ac4:	d01e      	beq.n	8016b04 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8016ac6:	2b20      	cmp	r3, #32
 8016ac8:	d028      	beq.n	8016b1c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016aca:	4b17      	ldr	r3, [pc, #92]	; (8016b28 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8016acc:	218b      	movs	r1, #139	; 0x8b
 8016ace:	4a17      	ldr	r2, [pc, #92]	; (8016b2c <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8016ad0:	4817      	ldr	r0, [pc, #92]	; (8016b30 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8016ad2:	f00f ff8d 	bl	80269f0 <__assert_func>
 8016ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ada:	d01f      	beq.n	8016b1c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016adc:	d804      	bhi.n	8016ae8 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 8016ade:	2b80      	cmp	r3, #128	; 0x80
 8016ae0:	d01c      	beq.n	8016b1c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ae6:	e7ef      	b.n	8016ac8 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8016ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016aec:	d016      	beq.n	8016b1c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016af2:	e7e0      	b.n	8016ab6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8016af4:	6823      	ldr	r3, [r4, #0]
 8016af6:	7f01      	ldrb	r1, [r0, #28]
 8016af8:	4620      	mov	r0, r4
 8016afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016afc:	4798      	blx	r3
 8016afe:	6823      	ldr	r3, [r4, #0]
 8016b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b02:	e006      	b.n	8016b12 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8016b04:	6823      	ldr	r3, [r4, #0]
 8016b06:	7f01      	ldrb	r1, [r0, #28]
 8016b08:	4620      	mov	r0, r4
 8016b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b0c:	4798      	blx	r3
 8016b0e:	6823      	ldr	r3, [r4, #0]
 8016b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b12:	4629      	mov	r1, r5
 8016b14:	4620      	mov	r0, r4
 8016b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b1a:	4718      	bx	r3
 8016b1c:	6823      	ldr	r3, [r4, #0]
 8016b1e:	4620      	mov	r0, r4
 8016b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b22:	4798      	blx	r3
 8016b24:	e7eb      	b.n	8016afe <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8016b26:	bf00      	nop
 8016b28:	0802d32c 	.word	0x0802d32c
 8016b2c:	0802d43c 	.word	0x0802d43c
 8016b30:	0802d351 	.word	0x0802d351

08016b34 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016b34:	b570      	push	{r4, r5, r6, lr}
 8016b36:	4604      	mov	r4, r0
 8016b38:	460e      	mov	r6, r1
 8016b3a:	6860      	ldr	r0, [r4, #4]
 8016b3c:	6803      	ldr	r3, [r0, #0]
 8016b3e:	685b      	ldr	r3, [r3, #4]
 8016b40:	4798      	blx	r3
 8016b42:	2800      	cmp	r0, #0
 8016b44:	d1f9      	bne.n	8016b3a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016b46:	4d0d      	ldr	r5, [pc, #52]	; (8016b7c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016b48:	6828      	ldr	r0, [r5, #0]
 8016b4a:	6803      	ldr	r3, [r0, #0]
 8016b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016b4e:	4798      	blx	r3
 8016b50:	f7ec ff7e 	bl	8003a50 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016b54:	6828      	ldr	r0, [r5, #0]
 8016b56:	2101      	movs	r1, #1
 8016b58:	f7ff ff46 	bl	80169e8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016b5c:	6860      	ldr	r0, [r4, #4]
 8016b5e:	4631      	mov	r1, r6
 8016b60:	6803      	ldr	r3, [r0, #0]
 8016b62:	689b      	ldr	r3, [r3, #8]
 8016b64:	4798      	blx	r3
 8016b66:	6823      	ldr	r3, [r4, #0]
 8016b68:	4620      	mov	r0, r4
 8016b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b6c:	4798      	blx	r3
 8016b6e:	6828      	ldr	r0, [r5, #0]
 8016b70:	6803      	ldr	r3, [r0, #0]
 8016b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b78:	4718      	bx	r3
 8016b7a:	bf00      	nop
 8016b7c:	2005677c 	.word	0x2005677c

08016b80 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016b80:	b508      	push	{r3, lr}
 8016b82:	f7ec ff4b 	bl	8003a1c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016b86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016b8a:	f7ec bf55 	b.w	8003a38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016b8e <_ZN8touchgfx13DMA_Interface5startEv>:
 8016b8e:	b510      	push	{r4, lr}
 8016b90:	4604      	mov	r4, r0
 8016b92:	6840      	ldr	r0, [r0, #4]
 8016b94:	6803      	ldr	r3, [r0, #0]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	4798      	blx	r3
 8016b9a:	b948      	cbnz	r0, 8016bb0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016b9c:	7a63      	ldrb	r3, [r4, #9]
 8016b9e:	b13b      	cbz	r3, 8016bb0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016ba0:	7a23      	ldrb	r3, [r4, #8]
 8016ba2:	b92b      	cbnz	r3, 8016bb0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016ba4:	6823      	ldr	r3, [r4, #0]
 8016ba6:	4620      	mov	r0, r4
 8016ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bae:	4718      	bx	r3
 8016bb0:	bd10      	pop	{r4, pc}
	...

08016bb4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016bb4:	b510      	push	{r4, lr}
 8016bb6:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8016bba:	1b12      	subs	r2, r2, r4
 8016bbc:	2a00      	cmp	r2, #0
 8016bbe:	bfdc      	itt	le
 8016bc0:	6883      	ldrle	r3, [r0, #8]
 8016bc2:	18d2      	addle	r2, r2, r3
 8016bc4:	2a01      	cmp	r2, #1
 8016bc6:	dd18      	ble.n	8016bfa <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8016bc8:	6843      	ldr	r3, [r0, #4]
 8016bca:	f101 021c 	add.w	r2, r1, #28
 8016bce:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8016bd2:	f851 4b04 	ldr.w	r4, [r1], #4
 8016bd6:	4291      	cmp	r1, r2
 8016bd8:	f843 4b04 	str.w	r4, [r3], #4
 8016bdc:	d1f9      	bne.n	8016bd2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8016bde:	880a      	ldrh	r2, [r1, #0]
 8016be0:	801a      	strh	r2, [r3, #0]
 8016be2:	788a      	ldrb	r2, [r1, #2]
 8016be4:	709a      	strb	r2, [r3, #2]
 8016be6:	68c3      	ldr	r3, [r0, #12]
 8016be8:	6882      	ldr	r2, [r0, #8]
 8016bea:	f3bf 8f5b 	dmb	ish
 8016bee:	3301      	adds	r3, #1
 8016bf0:	429a      	cmp	r2, r3
 8016bf2:	bfd8      	it	le
 8016bf4:	1a9b      	suble	r3, r3, r2
 8016bf6:	60c3      	str	r3, [r0, #12]
 8016bf8:	bd10      	pop	{r4, pc}
 8016bfa:	4b03      	ldr	r3, [pc, #12]	; (8016c08 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8016bfc:	2139      	movs	r1, #57	; 0x39
 8016bfe:	4a03      	ldr	r2, [pc, #12]	; (8016c0c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8016c00:	4803      	ldr	r0, [pc, #12]	; (8016c10 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8016c02:	f00f fef5 	bl	80269f0 <__assert_func>
 8016c06:	bf00      	nop
 8016c08:	0802d377 	.word	0x0802d377
 8016c0c:	0802d46c 	.word	0x0802d46c
 8016c10:	0802d351 	.word	0x0802d351

08016c14 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016c14:	b510      	push	{r4, lr}
 8016c16:	6803      	ldr	r3, [r0, #0]
 8016c18:	4604      	mov	r4, r0
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	4798      	blx	r3
 8016c1e:	b128      	cbz	r0, 8016c2c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016c20:	4b07      	ldr	r3, [pc, #28]	; (8016c40 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8016c22:	213f      	movs	r1, #63	; 0x3f
 8016c24:	4a07      	ldr	r2, [pc, #28]	; (8016c44 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8016c26:	4808      	ldr	r0, [pc, #32]	; (8016c48 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8016c28:	f00f fee2 	bl	80269f0 <__assert_func>
 8016c2c:	6923      	ldr	r3, [r4, #16]
 8016c2e:	68a2      	ldr	r2, [r4, #8]
 8016c30:	f3bf 8f5b 	dmb	ish
 8016c34:	3301      	adds	r3, #1
 8016c36:	429a      	cmp	r2, r3
 8016c38:	bfd8      	it	le
 8016c3a:	1a9b      	suble	r3, r3, r2
 8016c3c:	6123      	str	r3, [r4, #16]
 8016c3e:	bd10      	pop	{r4, pc}
 8016c40:	0802d39a 	.word	0x0802d39a
 8016c44:	0802d4ba 	.word	0x0802d4ba
 8016c48:	0802d351 	.word	0x0802d351

08016c4c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016c4c:	b570      	push	{r4, r5, r6, lr}
 8016c4e:	4604      	mov	r4, r0
 8016c50:	6840      	ldr	r0, [r0, #4]
 8016c52:	6803      	ldr	r3, [r0, #0]
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	4798      	blx	r3
 8016c58:	4605      	mov	r5, r0
 8016c5a:	b930      	cbnz	r0, 8016c6a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016c5c:	7a23      	ldrb	r3, [r4, #8]
 8016c5e:	b123      	cbz	r3, 8016c6a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016c60:	6860      	ldr	r0, [r4, #4]
 8016c62:	6803      	ldr	r3, [r0, #0]
 8016c64:	695b      	ldr	r3, [r3, #20]
 8016c66:	4798      	blx	r3
 8016c68:	7225      	strb	r5, [r4, #8]
 8016c6a:	6860      	ldr	r0, [r4, #4]
 8016c6c:	6803      	ldr	r3, [r0, #0]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	4798      	blx	r3
 8016c72:	b928      	cbnz	r0, 8016c80 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016c74:	6823      	ldr	r3, [r4, #0]
 8016c76:	4620      	mov	r0, r4
 8016c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c7e:	4718      	bx	r3
 8016c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c84:	f7ec bef0 	b.w	8003a68 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016c88 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016c88:	b510      	push	{r4, lr}
 8016c8a:	6082      	str	r2, [r0, #8]
 8016c8c:	2200      	movs	r2, #0
 8016c8e:	4c03      	ldr	r4, [pc, #12]	; (8016c9c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016c90:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016c94:	e9c0 4100 	strd	r4, r1, [r0]
 8016c98:	bd10      	pop	{r4, pc}
 8016c9a:	bf00      	nop
 8016c9c:	0802d420 	.word	0x0802d420

08016ca0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016ca0:	6840      	ldr	r0, [r0, #4]
 8016ca2:	6803      	ldr	r3, [r0, #0]
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	4718      	bx	r3

08016ca8 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8016ca8:	2001      	movs	r0, #1
 8016caa:	4770      	bx	lr

08016cac <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8016cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016cb0:	460d      	mov	r5, r1
 8016cb2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016cb6:	b085      	sub	sp, #20
 8016cb8:	4690      	mov	r8, r2
 8016cba:	4411      	add	r1, r2
 8016cbc:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016cc0:	4699      	mov	r9, r3
 8016cc2:	6803      	ldr	r3, [r0, #0]
 8016cc4:	60c1      	str	r1, [r0, #12]
 8016cc6:	4604      	mov	r4, r0
 8016cc8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016cca:	440a      	add	r2, r1
 8016ccc:	6102      	str	r2, [r0, #16]
 8016cce:	68db      	ldr	r3, [r3, #12]
 8016cd0:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8016cd4:	4798      	blx	r3
 8016cd6:	2800      	cmp	r0, #0
 8016cd8:	d03a      	beq.n	8016d50 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa4>
 8016cda:	44c8      	add	r8, r9
 8016cdc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016ce0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016ce4:	4445      	add	r5, r8
 8016ce6:	442e      	add	r6, r5
 8016ce8:	6823      	ldr	r3, [r4, #0]
 8016cea:	f10d 020f 	add.w	r2, sp, #15
 8016cee:	a903      	add	r1, sp, #12
 8016cf0:	4620      	mov	r0, r4
 8016cf2:	9200      	str	r2, [sp, #0]
 8016cf4:	f10d 020d 	add.w	r2, sp, #13
 8016cf8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8016cfc:	f10d 030e 	add.w	r3, sp, #14
 8016d00:	47c0      	blx	r8
 8016d02:	b1f0      	cbz	r0, 8016d42 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x96>
 8016d04:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016d08:	7a20      	ldrb	r0, [r4, #8]
 8016d0a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016d0e:	4358      	muls	r0, r3
 8016d10:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8016d14:	1c43      	adds	r3, r0, #1
 8016d16:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016d1a:	7838      	ldrb	r0, [r7, #0]
 8016d1c:	121b      	asrs	r3, r3, #8
 8016d1e:	fb10 f003 	smulbb	r0, r0, r3
 8016d22:	b283      	uxth	r3, r0
 8016d24:	1c58      	adds	r0, r3, #1
 8016d26:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016d2a:	6823      	ldr	r3, [r4, #0]
 8016d2c:	1200      	asrs	r0, r0, #8
 8016d2e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8016d32:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016d36:	28ff      	cmp	r0, #255	; 0xff
 8016d38:	d10d      	bne.n	8016d56 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xaa>
 8016d3a:	9100      	str	r1, [sp, #0]
 8016d3c:	4629      	mov	r1, r5
 8016d3e:	4620      	mov	r0, r4
 8016d40:	47c0      	blx	r8
 8016d42:	68e3      	ldr	r3, [r4, #12]
 8016d44:	3503      	adds	r5, #3
 8016d46:	3701      	adds	r7, #1
 8016d48:	3301      	adds	r3, #1
 8016d4a:	42ae      	cmp	r6, r5
 8016d4c:	60e3      	str	r3, [r4, #12]
 8016d4e:	d8cb      	bhi.n	8016ce8 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x3c>
 8016d50:	b005      	add	sp, #20
 8016d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d56:	fa1f fc80 	uxth.w	ip, r0
 8016d5a:	43c0      	mvns	r0, r0
 8016d5c:	f895 e002 	ldrb.w	lr, [r5, #2]
 8016d60:	fb12 f20c 	smulbb	r2, r2, ip
 8016d64:	b2c0      	uxtb	r0, r0
 8016d66:	fb13 f30c 	smulbb	r3, r3, ip
 8016d6a:	fb0e 2200 	mla	r2, lr, r0, r2
 8016d6e:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016d72:	fb11 f10c 	smulbb	r1, r1, ip
 8016d76:	fb0e 3300 	mla	r3, lr, r0, r3
 8016d7a:	f895 e000 	ldrb.w	lr, [r5]
 8016d7e:	b292      	uxth	r2, r2
 8016d80:	b29b      	uxth	r3, r3
 8016d82:	fb0e 1000 	mla	r0, lr, r0, r1
 8016d86:	1c59      	adds	r1, r3, #1
 8016d88:	b280      	uxth	r0, r0
 8016d8a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8016d8e:	1c51      	adds	r1, r2, #1
 8016d90:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016d94:	1c41      	adds	r1, r0, #1
 8016d96:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016d9a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8016d9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016da2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016da6:	9000      	str	r0, [sp, #0]
 8016da8:	e7c8      	b.n	8016d3c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x90>

08016daa <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8016daa:	f89d 0000 	ldrb.w	r0, [sp]
 8016dae:	704b      	strb	r3, [r1, #1]
 8016db0:	7008      	strb	r0, [r1, #0]
 8016db2:	708a      	strb	r2, [r1, #2]
 8016db4:	4770      	bx	lr

08016db6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8016db6:	4413      	add	r3, r2
 8016db8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016dbe:	4419      	add	r1, r3
 8016dc0:	7a03      	ldrb	r3, [r0, #8]
 8016dc2:	e9dd 6406 	ldrd	r6, r4, [sp, #24]
 8016dc6:	2bff      	cmp	r3, #255	; 0xff
 8016dc8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016dcc:	440e      	add	r6, r1
 8016dce:	d13d      	bne.n	8016e4c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x96>
 8016dd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016dd4:	3103      	adds	r1, #3
 8016dd6:	7d87      	ldrb	r7, [r0, #22]
 8016dd8:	2bff      	cmp	r3, #255	; 0xff
 8016dda:	d10a      	bne.n	8016df2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3c>
 8016ddc:	f801 7c03 	strb.w	r7, [r1, #-3]
 8016de0:	7d43      	ldrb	r3, [r0, #21]
 8016de2:	f801 3c02 	strb.w	r3, [r1, #-2]
 8016de6:	7d03      	ldrb	r3, [r0, #20]
 8016de8:	f801 3c01 	strb.w	r3, [r1, #-1]
 8016dec:	428e      	cmp	r6, r1
 8016dee:	d8ef      	bhi.n	8016dd0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x1a>
 8016df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016df2:	b29a      	uxth	r2, r3
 8016df4:	43db      	mvns	r3, r3
 8016df6:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8016dfa:	fb17 f702 	smulbb	r7, r7, r2
 8016dfe:	b2db      	uxtb	r3, r3
 8016e00:	fb05 7503 	mla	r5, r5, r3, r7
 8016e04:	b2ad      	uxth	r5, r5
 8016e06:	1c6f      	adds	r7, r5, #1
 8016e08:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8016e0c:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 8016e10:	fb17 f703 	smulbb	r7, r7, r3
 8016e14:	122d      	asrs	r5, r5, #8
 8016e16:	f801 5c03 	strb.w	r5, [r1, #-3]
 8016e1a:	7d45      	ldrb	r5, [r0, #21]
 8016e1c:	fb05 7502 	mla	r5, r5, r2, r7
 8016e20:	b2ad      	uxth	r5, r5
 8016e22:	1c6f      	adds	r7, r5, #1
 8016e24:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8016e28:	122d      	asrs	r5, r5, #8
 8016e2a:	f801 5c02 	strb.w	r5, [r1, #-2]
 8016e2e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8016e32:	7d07      	ldrb	r7, [r0, #20]
 8016e34:	fb15 f303 	smulbb	r3, r5, r3
 8016e38:	fb07 3202 	mla	r2, r7, r2, r3
 8016e3c:	b292      	uxth	r2, r2
 8016e3e:	1c53      	adds	r3, r2, #1
 8016e40:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8016e44:	1212      	asrs	r2, r2, #8
 8016e46:	f801 2c01 	strb.w	r2, [r1, #-1]
 8016e4a:	e7cf      	b.n	8016dec <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x36>
 8016e4c:	3103      	adds	r1, #3
 8016e4e:	f814 2b01 	ldrb.w	r2, [r4], #1
 8016e52:	428e      	cmp	r6, r1
 8016e54:	7a03      	ldrb	r3, [r0, #8]
 8016e56:	f101 0103 	add.w	r1, r1, #3
 8016e5a:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8016e5e:	fb02 f303 	mul.w	r3, r2, r3
 8016e62:	f103 0201 	add.w	r2, r3, #1
 8016e66:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016e6a:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016e6e:	b295      	uxth	r5, r2
 8016e70:	ea6f 0202 	mvn.w	r2, r2
 8016e74:	b2d3      	uxtb	r3, r2
 8016e76:	7d82      	ldrb	r2, [r0, #22]
 8016e78:	fb1c fc03 	smulbb	ip, ip, r3
 8016e7c:	fb02 c205 	mla	r2, r2, r5, ip
 8016e80:	b292      	uxth	r2, r2
 8016e82:	f102 0c01 	add.w	ip, r2, #1
 8016e86:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016e8a:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8016e8e:	fb1c fc03 	smulbb	ip, ip, r3
 8016e92:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016e96:	f801 2c06 	strb.w	r2, [r1, #-6]
 8016e9a:	7d42      	ldrb	r2, [r0, #21]
 8016e9c:	fb02 c205 	mla	r2, r2, r5, ip
 8016ea0:	b292      	uxth	r2, r2
 8016ea2:	f102 0c01 	add.w	ip, r2, #1
 8016ea6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016eaa:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016eae:	f801 2c05 	strb.w	r2, [r1, #-5]
 8016eb2:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8016eb6:	f890 c014 	ldrb.w	ip, [r0, #20]
 8016eba:	fb12 f303 	smulbb	r3, r2, r3
 8016ebe:	fb0c 3305 	mla	r3, ip, r5, r3
 8016ec2:	b29b      	uxth	r3, r3
 8016ec4:	f103 0201 	add.w	r2, r3, #1
 8016ec8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016ecc:	ea4f 2323 	mov.w	r3, r3, asr #8
 8016ed0:	f801 3c04 	strb.w	r3, [r1, #-4]
 8016ed4:	d8bb      	bhi.n	8016e4e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x98>
 8016ed6:	e78b      	b.n	8016df0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3a>

08016ed8 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8016ed8:	b510      	push	{r4, lr}
 8016eda:	7d04      	ldrb	r4, [r0, #20]
 8016edc:	700c      	strb	r4, [r1, #0]
 8016ede:	7d41      	ldrb	r1, [r0, #21]
 8016ee0:	7011      	strb	r1, [r2, #0]
 8016ee2:	7d82      	ldrb	r2, [r0, #22]
 8016ee4:	2001      	movs	r0, #1
 8016ee6:	701a      	strb	r2, [r3, #0]
 8016ee8:	22ff      	movs	r2, #255	; 0xff
 8016eea:	9b02      	ldr	r3, [sp, #8]
 8016eec:	701a      	strb	r2, [r3, #0]
 8016eee:	bd10      	pop	{r4, pc}

08016ef0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8016ef0:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8016ef4:	4770      	bx	lr

08016ef6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8016ef6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8016efa:	4770      	bx	lr

08016efc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8016efc:	6281      	str	r1, [r0, #40]	; 0x28
 8016efe:	4770      	bx	lr

08016f00 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8016f00:	b510      	push	{r4, lr}
 8016f02:	2200      	movs	r2, #0
 8016f04:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8016f08:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8016f0c:	8002      	strh	r2, [r0, #0]
 8016f0e:	8042      	strh	r2, [r0, #2]
 8016f10:	8084      	strh	r4, [r0, #4]
 8016f12:	80c1      	strh	r1, [r0, #6]
 8016f14:	bd10      	pop	{r4, pc}

08016f16 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8016f16:	2200      	movs	r2, #0
 8016f18:	8002      	strh	r2, [r0, #0]
 8016f1a:	8042      	strh	r2, [r0, #2]
 8016f1c:	8082      	strh	r2, [r0, #4]
 8016f1e:	80c2      	strh	r2, [r0, #6]
 8016f20:	4770      	bx	lr
	...

08016f24 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8016f24:	b508      	push	{r3, lr}
 8016f26:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016f28:	b928      	cbnz	r0, 8016f36 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8016f2a:	4b03      	ldr	r3, [pc, #12]	; (8016f38 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8016f2c:	2126      	movs	r1, #38	; 0x26
 8016f2e:	4a03      	ldr	r2, [pc, #12]	; (8016f3c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8016f30:	4803      	ldr	r0, [pc, #12]	; (8016f40 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8016f32:	f00f fd5d 	bl	80269f0 <__assert_func>
 8016f36:	bd08      	pop	{r3, pc}
 8016f38:	0802d52c 	.word	0x0802d52c
 8016f3c:	0802d60c 	.word	0x0802d60c
 8016f40:	0802d553 	.word	0x0802d553

08016f44 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016f44:	b510      	push	{r4, lr}
 8016f46:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016f4a:	888a      	ldrh	r2, [r1, #4]
 8016f4c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016f50:	4422      	add	r2, r4
 8016f52:	b212      	sxth	r2, r2
 8016f54:	4293      	cmp	r3, r2
 8016f56:	da15      	bge.n	8016f84 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016f58:	8882      	ldrh	r2, [r0, #4]
 8016f5a:	4413      	add	r3, r2
 8016f5c:	b21b      	sxth	r3, r3
 8016f5e:	429c      	cmp	r4, r3
 8016f60:	da10      	bge.n	8016f84 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016f62:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016f66:	88c9      	ldrh	r1, [r1, #6]
 8016f68:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016f6c:	4419      	add	r1, r3
 8016f6e:	b209      	sxth	r1, r1
 8016f70:	428a      	cmp	r2, r1
 8016f72:	da07      	bge.n	8016f84 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016f74:	88c0      	ldrh	r0, [r0, #6]
 8016f76:	4410      	add	r0, r2
 8016f78:	b200      	sxth	r0, r0
 8016f7a:	4283      	cmp	r3, r0
 8016f7c:	bfac      	ite	ge
 8016f7e:	2000      	movge	r0, #0
 8016f80:	2001      	movlt	r0, #1
 8016f82:	bd10      	pop	{r4, pc}
 8016f84:	2000      	movs	r0, #0
 8016f86:	e7fc      	b.n	8016f82 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08016f88 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f8c:	b08b      	sub	sp, #44	; 0x2c
 8016f8e:	4604      	mov	r4, r0
 8016f90:	6808      	ldr	r0, [r1, #0]
 8016f92:	f04f 0a00 	mov.w	sl, #0
 8016f96:	6849      	ldr	r1, [r1, #4]
 8016f98:	ab04      	add	r3, sp, #16
 8016f9a:	f647 7bff 	movw	fp, #32767	; 0x7fff
 8016f9e:	c303      	stmia	r3!, {r0, r1}
 8016fa0:	4b35      	ldr	r3, [pc, #212]	; (8017078 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 8016fa2:	4621      	mov	r1, r4
 8016fa4:	a806      	add	r0, sp, #24
 8016fa6:	781b      	ldrb	r3, [r3, #0]
 8016fa8:	2b01      	cmp	r3, #1
 8016faa:	6823      	ldr	r3, [r4, #0]
 8016fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016fae:	bf1f      	itttt	ne
 8016fb0:	f10d 090e 	addne.w	r9, sp, #14
 8016fb4:	ae05      	addne	r6, sp, #20
 8016fb6:	f10d 0516 	addne.w	r5, sp, #22
 8016fba:	f10d 0812 	addne.w	r8, sp, #18
 8016fbe:	bf01      	itttt	eq
 8016fc0:	f10d 0916 	addeq.w	r9, sp, #22
 8016fc4:	f10d 060e 	addeq.w	r6, sp, #14
 8016fc8:	ad05      	addeq	r5, sp, #20
 8016fca:	f10d 0810 	addeq.w	r8, sp, #16
 8016fce:	4798      	blx	r3
 8016fd0:	f9b5 3000 	ldrsh.w	r3, [r5]
 8016fd4:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d042      	beq.n	8017062 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 8016fdc:	4293      	cmp	r3, r2
 8016fde:	bfa8      	it	ge
 8016fe0:	4613      	movge	r3, r2
 8016fe2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016fe6:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8016fea:	2f00      	cmp	r7, #0
 8016fec:	dd21      	ble.n	8017032 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 8016fee:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8016ff2:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8016ff6:	f9b6 2000 	ldrsh.w	r2, [r6]
 8016ffa:	f9b9 3000 	ldrsh.w	r3, [r9]
 8016ffe:	f8ad 0020 	strh.w	r0, [sp, #32]
 8017002:	a808      	add	r0, sp, #32
 8017004:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8017008:	a906      	add	r1, sp, #24
 801700a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801700e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017012:	f7ff ff97 	bl	8016f44 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017016:	9001      	str	r0, [sp, #4]
 8017018:	b1d0      	cbz	r0, 8017050 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 801701a:	6822      	ldr	r2, [r4, #0]
 801701c:	a908      	add	r1, sp, #32
 801701e:	4620      	mov	r0, r4
 8017020:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8017022:	4790      	blx	r2
 8017024:	b9a0      	cbnz	r0, 8017050 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8017026:	107f      	asrs	r7, r7, #1
 8017028:	9b01      	ldr	r3, [sp, #4]
 801702a:	f8ad 700e 	strh.w	r7, [sp, #14]
 801702e:	469a      	mov	sl, r3
 8017030:	e7d9      	b.n	8016fe6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8017032:	d10d      	bne.n	8017050 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8017034:	2301      	movs	r3, #1
 8017036:	f8ad 300e 	strh.w	r3, [sp, #14]
 801703a:	f8b8 2000 	ldrh.w	r2, [r8]
 801703e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8017042:	440a      	add	r2, r1
 8017044:	f8a8 2000 	strh.w	r2, [r8]
 8017048:	882b      	ldrh	r3, [r5, #0]
 801704a:	1a5b      	subs	r3, r3, r1
 801704c:	802b      	strh	r3, [r5, #0]
 801704e:	e7bf      	b.n	8016fd0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017050:	f1ba 0f00 	cmp.w	sl, #0
 8017054:	d0f1      	beq.n	801703a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8017056:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 801705a:	455b      	cmp	r3, fp
 801705c:	bf08      	it	eq
 801705e:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8017060:	e7eb      	b.n	801703a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8017062:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017066:	429a      	cmp	r2, r3
 8017068:	bf04      	itt	eq
 801706a:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801706e:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8017070:	b00b      	add	sp, #44	; 0x2c
 8017072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017076:	bf00      	nop
 8017078:	20056774 	.word	0x20056774

0801707c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801707c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801707e:	b085      	sub	sp, #20
 8017080:	6803      	ldr	r3, [r0, #0]
 8017082:	4604      	mov	r4, r0
 8017084:	4601      	mov	r1, r0
 8017086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017088:	4668      	mov	r0, sp
 801708a:	4798      	blx	r3
 801708c:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8017090:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8017094:	2300      	movs	r3, #0
 8017096:	a902      	add	r1, sp, #8
 8017098:	4668      	mov	r0, sp
 801709a:	9302      	str	r3, [sp, #8]
 801709c:	f8ad 600c 	strh.w	r6, [sp, #12]
 80170a0:	f8ad 500e 	strh.w	r5, [sp, #14]
 80170a4:	f7ff ff4e 	bl	8016f44 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80170a8:	b340      	cbz	r0, 80170fc <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 80170aa:	f9bd 2000 	ldrsh.w	r2, [sp]
 80170ae:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 80170b2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80170b6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80170ba:	443a      	add	r2, r7
 80170bc:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 80170c0:	f8ad 0000 	strh.w	r0, [sp]
 80170c4:	b292      	uxth	r2, r2
 80170c6:	f8ad 1002 	strh.w	r1, [sp, #2]
 80170ca:	b217      	sxth	r7, r2
 80170cc:	42be      	cmp	r6, r7
 80170ce:	bfd8      	it	le
 80170d0:	b2b2      	uxthle	r2, r6
 80170d2:	1a12      	subs	r2, r2, r0
 80170d4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80170d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80170dc:	4413      	add	r3, r2
 80170de:	b29b      	uxth	r3, r3
 80170e0:	b21a      	sxth	r2, r3
 80170e2:	4295      	cmp	r5, r2
 80170e4:	bfd8      	it	le
 80170e6:	b2ab      	uxthle	r3, r5
 80170e8:	1a5b      	subs	r3, r3, r1
 80170ea:	f8ad 3006 	strh.w	r3, [sp, #6]
 80170ee:	6823      	ldr	r3, [r4, #0]
 80170f0:	4669      	mov	r1, sp
 80170f2:	4620      	mov	r0, r4
 80170f4:	691b      	ldr	r3, [r3, #16]
 80170f6:	4798      	blx	r3
 80170f8:	b005      	add	sp, #20
 80170fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170fc:	e9cd 0000 	strd	r0, r0, [sp]
 8017100:	e7f5      	b.n	80170ee <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

08017104 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8017104:	2200      	movs	r2, #0
 8017106:	2101      	movs	r1, #1
 8017108:	8082      	strh	r2, [r0, #4]
 801710a:	80c2      	strh	r2, [r0, #6]
 801710c:	8102      	strh	r2, [r0, #8]
 801710e:	8142      	strh	r2, [r0, #10]
 8017110:	8182      	strh	r2, [r0, #12]
 8017112:	81c2      	strh	r2, [r0, #14]
 8017114:	8202      	strh	r2, [r0, #16]
 8017116:	8242      	strh	r2, [r0, #18]
 8017118:	61c2      	str	r2, [r0, #28]
 801711a:	8402      	strh	r2, [r0, #32]
 801711c:	8442      	strh	r2, [r0, #34]	; 0x22
 801711e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8017122:	6282      	str	r2, [r0, #40]	; 0x28
 8017124:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8017128:	4905      	ldr	r1, [pc, #20]	; (8017140 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 801712a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801712e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017132:	6001      	str	r1, [r0, #0]
 8017134:	8582      	strh	r2, [r0, #44]	; 0x2c
 8017136:	22ff      	movs	r2, #255	; 0xff
 8017138:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801713c:	4770      	bx	lr
 801713e:	bf00      	nop
 8017140:	0802d598 	.word	0x0802d598

08017144 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8017144:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8017148:	4602      	mov	r2, r0
 801714a:	cb03      	ldmia	r3!, {r0, r1}
 801714c:	6010      	str	r0, [r2, #0]
 801714e:	4610      	mov	r0, r2
 8017150:	6051      	str	r1, [r2, #4]
 8017152:	4770      	bx	lr

08017154 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8017154:	b507      	push	{r0, r1, r2, lr}
 8017156:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801715a:	ab01      	add	r3, sp, #4
 801715c:	6809      	ldr	r1, [r1, #0]
 801715e:	6800      	ldr	r0, [r0, #0]
 8017160:	f003 fc74 	bl	801aa4c <_ZN8touchgfx6muldivElllRl>
 8017164:	b003      	add	sp, #12
 8017166:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801716c <_ZN8touchgfx7CWRUtil4sineEi>:
 801716c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017170:	fb90 f3f2 	sdiv	r3, r0, r2
 8017174:	fb03 0312 	mls	r3, r3, r2, r0
 8017178:	4413      	add	r3, r2
 801717a:	fb93 f0f2 	sdiv	r0, r3, r2
 801717e:	fb02 3010 	mls	r0, r2, r0, r3
 8017182:	4b0a      	ldr	r3, [pc, #40]	; (80171ac <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8017184:	285a      	cmp	r0, #90	; 0x5a
 8017186:	dc02      	bgt.n	801718e <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8017188:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801718c:	4770      	bx	lr
 801718e:	28b4      	cmp	r0, #180	; 0xb4
 8017190:	dc02      	bgt.n	8017198 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8017192:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8017196:	e7f7      	b.n	8017188 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8017198:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801719c:	bfd4      	ite	le
 801719e:	38b4      	suble	r0, #180	; 0xb4
 80171a0:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 80171a4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80171a8:	4240      	negs	r0, r0
 80171aa:	4770      	bx	lr
 80171ac:	0802d6b6 	.word	0x0802d6b6

080171b0 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 80171b0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80171b4:	f04f 0300 	mov.w	r3, #0
 80171b8:	bf2c      	ite	cs
 80171ba:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 80171be:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 80171c2:	1899      	adds	r1, r3, r2
 80171c4:	4288      	cmp	r0, r1
 80171c6:	bf24      	itt	cs
 80171c8:	1853      	addcs	r3, r2, r1
 80171ca:	1a40      	subcs	r0, r0, r1
 80171cc:	0892      	lsrs	r2, r2, #2
 80171ce:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80171d2:	d1f6      	bne.n	80171c2 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 80171d4:	4618      	mov	r0, r3
 80171d6:	4770      	bx	lr

080171d8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 80171d8:	b510      	push	{r4, lr}
 80171da:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 80171de:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 80171e2:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80171e6:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 80171ea:	139b      	asrs	r3, r3, #14
 80171ec:	13a4      	asrs	r4, r4, #14
 80171ee:	429c      	cmp	r4, r3
 80171f0:	bfb8      	it	lt
 80171f2:	461c      	movlt	r4, r3
 80171f4:	2c01      	cmp	r4, #1
 80171f6:	dd07      	ble.n	8017208 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 80171f8:	fb91 f1f4 	sdiv	r1, r1, r4
 80171fc:	fb90 f0f4 	sdiv	r0, r0, r4
 8017200:	f7ff ffea 	bl	80171d8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8017204:	4360      	muls	r0, r4
 8017206:	bd10      	pop	{r4, pc}
 8017208:	4340      	muls	r0, r0
 801720a:	fb01 0001 	mla	r0, r1, r1, r0
 801720e:	f7ff ffcf 	bl	80171b0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8017212:	e7f8      	b.n	8017206 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08017214 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8017214:	2800      	cmp	r0, #0
 8017216:	b508      	push	{r3, lr}
 8017218:	da05      	bge.n	8017226 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801721a:	4240      	negs	r0, r0
 801721c:	f7ff fffa 	bl	8017214 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8017220:	4240      	negs	r0, r0
 8017222:	b240      	sxtb	r0, r0
 8017224:	bd08      	pop	{r3, pc}
 8017226:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801722a:	dc11      	bgt.n	8017250 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 801722c:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8017230:	dd09      	ble.n	8017246 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8017232:	4340      	muls	r0, r0
 8017234:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8017238:	f7ff ffba 	bl	80171b0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801723c:	f7ff ffea 	bl	8017214 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8017240:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8017244:	e7ed      	b.n	8017222 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8017246:	3003      	adds	r0, #3
 8017248:	4b02      	ldr	r3, [pc, #8]	; (8017254 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801724a:	10c0      	asrs	r0, r0, #3
 801724c:	5618      	ldrsb	r0, [r3, r0]
 801724e:	e7e9      	b.n	8017224 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8017250:	2000      	movs	r0, #0
 8017252:	e7e7      	b.n	8017224 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8017254:	0802d65a 	.word	0x0802d65a

08017258 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8017258:	1e03      	subs	r3, r0, #0
 801725a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801725c:	460c      	mov	r4, r1
 801725e:	4615      	mov	r5, r2
 8017260:	db01      	blt.n	8017266 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8017262:	2900      	cmp	r1, #0
 8017264:	da06      	bge.n	8017274 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8017266:	4b10      	ldr	r3, [pc, #64]	; (80172a8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x50>)
 8017268:	f44f 714b 	mov.w	r1, #812	; 0x32c
 801726c:	4a0f      	ldr	r2, [pc, #60]	; (80172ac <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 801726e:	4810      	ldr	r0, [pc, #64]	; (80172b0 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8017270:	f00f fbbe 	bl	80269f0 <__assert_func>
 8017274:	4299      	cmp	r1, r3
 8017276:	dd07      	ble.n	8017288 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x30>
 8017278:	4619      	mov	r1, r3
 801727a:	4620      	mov	r0, r4
 801727c:	f7ff ffec 	bl	8017258 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017280:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8017284:	b003      	add	sp, #12
 8017286:	bd30      	pop	{r4, r5, pc}
 8017288:	f7ff ffa6 	bl	80171d8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801728c:	6028      	str	r0, [r5, #0]
 801728e:	2800      	cmp	r0, #0
 8017290:	d0f8      	beq.n	8017284 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 8017292:	4602      	mov	r2, r0
 8017294:	ab01      	add	r3, sp, #4
 8017296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801729a:	4620      	mov	r0, r4
 801729c:	f003 fbd6 	bl	801aa4c <_ZN8touchgfx6muldivElllRl>
 80172a0:	f7ff ffb8 	bl	8017214 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80172a4:	e7ee      	b.n	8017284 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 80172a6:	bf00      	nop
 80172a8:	0802d76c 	.word	0x0802d76c
 80172ac:	0802d830 	.word	0x0802d830
 80172b0:	0802d77d 	.word	0x0802d77d

080172b4 <_ZN8touchgfx4LineC1Ev>:
 80172b4:	b510      	push	{r4, lr}
 80172b6:	4604      	mov	r4, r0
 80172b8:	f7ff ff24 	bl	8017104 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80172bc:	4b0c      	ldr	r3, [pc, #48]	; (80172f0 <_ZN8touchgfx4LineC1Ev+0x3c>)
 80172be:	2220      	movs	r2, #32
 80172c0:	4620      	mov	r0, r4
 80172c2:	6023      	str	r3, [r4, #0]
 80172c4:	2300      	movs	r3, #0
 80172c6:	6422      	str	r2, [r4, #64]	; 0x40
 80172c8:	2212      	movs	r2, #18
 80172ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80172ce:	6722      	str	r2, [r4, #112]	; 0x70
 80172d0:	60a3      	str	r3, [r4, #8]
 80172d2:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 80172d6:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 80172da:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80172de:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 80172e2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 80172e6:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 80172ea:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 80172ee:	bd10      	pop	{r4, pc}
 80172f0:	0802d7bc 	.word	0x0802d7bc

080172f4 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 80172f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172f8:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80172fa:	4604      	mov	r4, r0
 80172fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80172fe:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8017300:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8017302:	1af6      	subs	r6, r6, r3
 8017304:	eba5 0502 	sub.w	r5, r5, r2
 8017308:	f040 808e 	bne.w	8017428 <_ZN8touchgfx4Line17updateCachedShapeEv+0x134>
 801730c:	b955      	cbnz	r5, 8017324 <_ZN8touchgfx4Line17updateCachedShapeEv+0x30>
 801730e:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8017312:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017316:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801731a:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801731e:	b003      	add	sp, #12
 8017320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017324:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 8017328:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 801732c:	f04f 0802 	mov.w	r8, #2
 8017330:	463a      	mov	r2, r7
 8017332:	4629      	mov	r1, r5
 8017334:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017336:	f003 fba8 	bl	801aa8a <_ZN8touchgfx6muldivElll>
 801733a:	4631      	mov	r1, r6
 801733c:	463a      	mov	r2, r7
 801733e:	fb90 f5f8 	sdiv	r5, r0, r8
 8017342:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017344:	f003 fba1 	bl	801aa8a <_ZN8touchgfx6muldivElll>
 8017348:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 801734c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 801734e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8017350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017352:	fb90 f0f8 	sdiv	r0, r0, r8
 8017356:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801735a:	eba8 0305 	sub.w	r3, r8, r5
 801735e:	f1ba 0f00 	cmp.w	sl, #0
 8017362:	f040 80b8 	bne.w	80174d6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e2>
 8017366:	64a3      	str	r3, [r4, #72]	; 0x48
 8017368:	1843      	adds	r3, r0, r1
 801736a:	65a3      	str	r3, [r4, #88]	; 0x58
 801736c:	1b7b      	subs	r3, r7, r5
 801736e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017370:	1983      	adds	r3, r0, r6
 8017372:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017374:	19eb      	adds	r3, r5, r7
 8017376:	6523      	str	r3, [r4, #80]	; 0x50
 8017378:	1a33      	subs	r3, r6, r0
 801737a:	6623      	str	r3, [r4, #96]	; 0x60
 801737c:	eb05 0308 	add.w	r3, r5, r8
 8017380:	6563      	str	r3, [r4, #84]	; 0x54
 8017382:	1a0b      	subs	r3, r1, r0
 8017384:	f8d4 e048 	ldr.w	lr, [r4, #72]	; 0x48
 8017388:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 801738c:	6663      	str	r3, [r4, #100]	; 0x64
 801738e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8017392:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
 8017396:	4672      	mov	r2, lr
 8017398:	9301      	str	r3, [sp, #4]
 801739a:	f8cd c000 	str.w	ip, [sp]
 801739e:	f859 bb04 	ldr.w	fp, [r9], #4
 80173a2:	9b00      	ldr	r3, [sp, #0]
 80173a4:	45de      	cmp	lr, fp
 80173a6:	bfa8      	it	ge
 80173a8:	46de      	movge	lr, fp
 80173aa:	455a      	cmp	r2, fp
 80173ac:	bfb8      	it	lt
 80173ae:	465a      	movlt	r2, fp
 80173b0:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 80173b4:	45dc      	cmp	ip, fp
 80173b6:	bfa8      	it	ge
 80173b8:	46dc      	movge	ip, fp
 80173ba:	455b      	cmp	r3, fp
 80173bc:	bfb8      	it	lt
 80173be:	465b      	movlt	r3, fp
 80173c0:	9300      	str	r3, [sp, #0]
 80173c2:	9b01      	ldr	r3, [sp, #4]
 80173c4:	454b      	cmp	r3, r9
 80173c6:	d1ea      	bne.n	801739e <_ZN8touchgfx4Line17updateCachedShapeEv+0xaa>
 80173c8:	f04f 0920 	mov.w	r9, #32
 80173cc:	9b00      	ldr	r3, [sp, #0]
 80173ce:	f1ba 0f01 	cmp.w	sl, #1
 80173d2:	fb92 f2f9 	sdiv	r2, r2, r9
 80173d6:	fb93 f3f9 	sdiv	r3, r3, r9
 80173da:	fb9e fef9 	sdiv	lr, lr, r9
 80173de:	fb9c fcf9 	sdiv	ip, ip, r9
 80173e2:	f102 0201 	add.w	r2, r2, #1
 80173e6:	f103 0301 	add.w	r3, r3, #1
 80173ea:	f8a4 e068 	strh.w	lr, [r4, #104]	; 0x68
 80173ee:	f8a4 c06a 	strh.w	ip, [r4, #106]	; 0x6a
 80173f2:	eba2 0e0e 	sub.w	lr, r2, lr
 80173f6:	eba3 0c0c 	sub.w	ip, r3, ip
 80173fa:	f8a4 e06c 	strh.w	lr, [r4, #108]	; 0x6c
 80173fe:	f8a4 c06e 	strh.w	ip, [r4, #110]	; 0x6e
 8017402:	d18c      	bne.n	801731e <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 8017404:	eba8 0305 	sub.w	r3, r8, r5
 8017408:	64a3      	str	r3, [r4, #72]	; 0x48
 801740a:	1843      	adds	r3, r0, r1
 801740c:	65a3      	str	r3, [r4, #88]	; 0x58
 801740e:	1b7b      	subs	r3, r7, r5
 8017410:	442f      	add	r7, r5
 8017412:	4445      	add	r5, r8
 8017414:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017416:	1983      	adds	r3, r0, r6
 8017418:	1a36      	subs	r6, r6, r0
 801741a:	1a08      	subs	r0, r1, r0
 801741c:	65e3      	str	r3, [r4, #92]	; 0x5c
 801741e:	6527      	str	r7, [r4, #80]	; 0x50
 8017420:	6626      	str	r6, [r4, #96]	; 0x60
 8017422:	6565      	str	r5, [r4, #84]	; 0x54
 8017424:	6660      	str	r0, [r4, #100]	; 0x64
 8017426:	e77a      	b.n	801731e <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 8017428:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 801742c:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8017430:	2d00      	cmp	r5, #0
 8017432:	f43f af7b 	beq.w	801732c <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 8017436:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801743a:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801743e:	fb93 f2f7 	sdiv	r2, r3, r7
 8017442:	fb07 3312 	mls	r3, r7, r2, r3
 8017446:	b34b      	cbz	r3, 801749c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a8>
 8017448:	fb97 f2f3 	sdiv	r2, r7, r3
 801744c:	fb03 7712 	mls	r7, r3, r2, r7
 8017450:	2f00      	cmp	r7, #0
 8017452:	d1f4      	bne.n	801743e <_ZN8touchgfx4Line17updateCachedShapeEv+0x14a>
 8017454:	2b01      	cmp	r3, #1
 8017456:	f24b 5204 	movw	r2, #46340	; 0xb504
 801745a:	bf18      	it	ne
 801745c:	fb96 f6f3 	sdivne	r6, r6, r3
 8017460:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8017464:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8017468:	bf18      	it	ne
 801746a:	fb95 f5f3 	sdivne	r5, r5, r3
 801746e:	4291      	cmp	r1, r2
 8017470:	dd16      	ble.n	80174a0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1ac>
 8017472:	2d00      	cmp	r5, #0
 8017474:	da47      	bge.n	8017506 <_ZN8touchgfx4Line17updateCachedShapeEv+0x212>
 8017476:	4b26      	ldr	r3, [pc, #152]	; (8017510 <_ZN8touchgfx4Line17updateCachedShapeEv+0x21c>)
 8017478:	429d      	cmp	r5, r3
 801747a:	da25      	bge.n	80174c8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d4>
 801747c:	426a      	negs	r2, r5
 801747e:	f24b 5304 	movw	r3, #46340	; 0xb504
 8017482:	fb91 f1f3 	sdiv	r1, r1, r3
 8017486:	fb92 f3f3 	sdiv	r3, r2, r3
 801748a:	4299      	cmp	r1, r3
 801748c:	bfcc      	ite	gt
 801748e:	1c4b      	addgt	r3, r1, #1
 8017490:	3301      	addle	r3, #1
 8017492:	fb96 f6f3 	sdiv	r6, r6, r3
 8017496:	fb95 f5f3 	sdiv	r5, r5, r3
 801749a:	e00f      	b.n	80174bc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 801749c:	463b      	mov	r3, r7
 801749e:	e7d9      	b.n	8017454 <_ZN8touchgfx4Line17updateCachedShapeEv+0x160>
 80174a0:	2d00      	cmp	r5, #0
 80174a2:	fb92 f2f1 	sdiv	r2, r2, r1
 80174a6:	da11      	bge.n	80174cc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d8>
 80174a8:	4269      	negs	r1, r5
 80174aa:	f24b 5304 	movw	r3, #46340	; 0xb504
 80174ae:	fb93 f3f1 	sdiv	r3, r3, r1
 80174b2:	429a      	cmp	r2, r3
 80174b4:	bfa8      	it	ge
 80174b6:	461a      	movge	r2, r3
 80174b8:	4356      	muls	r6, r2
 80174ba:	4355      	muls	r5, r2
 80174bc:	4629      	mov	r1, r5
 80174be:	4630      	mov	r0, r6
 80174c0:	f7ff fe8a 	bl	80171d8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80174c4:	4607      	mov	r7, r0
 80174c6:	e731      	b.n	801732c <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 80174c8:	2200      	movs	r2, #0
 80174ca:	e7ed      	b.n	80174a8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b4>
 80174cc:	4629      	mov	r1, r5
 80174ce:	e7ec      	b.n	80174aa <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 80174d0:	4629      	mov	r1, r5
 80174d2:	2200      	movs	r2, #0
 80174d4:	e7e9      	b.n	80174aa <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 80174d6:	1a1b      	subs	r3, r3, r0
 80174d8:	64a3      	str	r3, [r4, #72]	; 0x48
 80174da:	1843      	adds	r3, r0, r1
 80174dc:	1b5b      	subs	r3, r3, r5
 80174de:	65a3      	str	r3, [r4, #88]	; 0x58
 80174e0:	1b7b      	subs	r3, r7, r5
 80174e2:	4403      	add	r3, r0
 80174e4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80174e6:	1983      	adds	r3, r0, r6
 80174e8:	442b      	add	r3, r5
 80174ea:	65e3      	str	r3, [r4, #92]	; 0x5c
 80174ec:	19eb      	adds	r3, r5, r7
 80174ee:	4403      	add	r3, r0
 80174f0:	6523      	str	r3, [r4, #80]	; 0x50
 80174f2:	1a33      	subs	r3, r6, r0
 80174f4:	442b      	add	r3, r5
 80174f6:	6623      	str	r3, [r4, #96]	; 0x60
 80174f8:	eb05 0308 	add.w	r3, r5, r8
 80174fc:	1a1b      	subs	r3, r3, r0
 80174fe:	6563      	str	r3, [r4, #84]	; 0x54
 8017500:	1a0b      	subs	r3, r1, r0
 8017502:	1b5b      	subs	r3, r3, r5
 8017504:	e73e      	b.n	8017384 <_ZN8touchgfx4Line17updateCachedShapeEv+0x90>
 8017506:	4295      	cmp	r5, r2
 8017508:	dde2      	ble.n	80174d0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1dc>
 801750a:	462a      	mov	r2, r5
 801750c:	e7b7      	b.n	801747e <_ZN8touchgfx4Line17updateCachedShapeEv+0x18a>
 801750e:	bf00      	nop
 8017510:	ffff4afc 	.word	0xffff4afc

08017514 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8017514:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017516:	428b      	cmp	r3, r1
 8017518:	d102      	bne.n	8017520 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 801751a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801751c:	4293      	cmp	r3, r2
 801751e:	d003      	beq.n	8017528 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8017520:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8017524:	f7ff bee6 	b.w	80172f4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8017528:	4770      	bx	lr

0801752a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 801752a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801752c:	428b      	cmp	r3, r1
 801752e:	d102      	bne.n	8017536 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8017530:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8017532:	4293      	cmp	r3, r2
 8017534:	d003      	beq.n	801753e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8017536:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 801753a:	f7ff bedb 	b.w	80172f4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801753e:	4770      	bx	lr

08017540 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8017540:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8017544:	f7ff bed6 	b.w	80172f4 <_ZN8touchgfx4Line17updateCachedShapeEv>

08017548 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8017548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801754c:	b0b3      	sub	sp, #204	; 0xcc
 801754e:	4604      	mov	r4, r0
 8017550:	460a      	mov	r2, r1
 8017552:	4601      	mov	r1, r0
 8017554:	a803      	add	r0, sp, #12
 8017556:	ad32      	add	r5, sp, #200	; 0xc8
 8017558:	f00d fd48 	bl	8024fec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801755c:	2300      	movs	r3, #0
 801755e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8017560:	f845 3dc8 	str.w	r3, [r5, #-200]!
 8017564:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017566:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017568:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801756a:	1ac0      	subs	r0, r0, r3
 801756c:	eba1 0102 	sub.w	r1, r1, r2
 8017570:	d43c      	bmi.n	80175ec <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8017572:	2900      	cmp	r1, #0
 8017574:	462a      	mov	r2, r5
 8017576:	db33      	blt.n	80175e0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8017578:	f7ff fe6e 	bl	8017258 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801757c:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8017580:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8017582:	a803      	add	r0, sp, #12
 8017584:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017586:	f00d fefc 	bl	8025382 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801758a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801758c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801758e:	a803      	add	r0, sp, #12
 8017590:	f00d fe86 	bl	80252a0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017594:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017598:	2b01      	cmp	r3, #1
 801759a:	d137      	bne.n	801760c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801759c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801759e:	2eb3      	cmp	r6, #179	; 0xb3
 80175a0:	dc34      	bgt.n	801760c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 80175a2:	eba7 0906 	sub.w	r9, r7, r6
 80175a6:	4648      	mov	r0, r9
 80175a8:	f7ff fde0 	bl	801716c <_ZN8touchgfx7CWRUtil4sineEi>
 80175ac:	a901      	add	r1, sp, #4
 80175ae:	9001      	str	r0, [sp, #4]
 80175b0:	4628      	mov	r0, r5
 80175b2:	f7ff fdcf 	bl	8017154 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80175b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80175b8:	eb00 0801 	add.w	r8, r0, r1
 80175bc:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 80175c0:	f7ff fdd4 	bl	801716c <_ZN8touchgfx7CWRUtil4sineEi>
 80175c4:	a902      	add	r1, sp, #8
 80175c6:	9002      	str	r0, [sp, #8]
 80175c8:	4628      	mov	r0, r5
 80175ca:	f7ff fdc3 	bl	8017154 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80175ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80175d0:	4641      	mov	r1, r8
 80175d2:	1a12      	subs	r2, r2, r0
 80175d4:	a803      	add	r0, sp, #12
 80175d6:	f00d fe63 	bl	80252a0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80175da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80175dc:	441e      	add	r6, r3
 80175de:	e7de      	b.n	801759e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 80175e0:	4249      	negs	r1, r1
 80175e2:	f7ff fe39 	bl	8017258 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80175e6:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 80175ea:	e7c9      	b.n	8017580 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80175ec:	2900      	cmp	r1, #0
 80175ee:	f1c0 0000 	rsb	r0, r0, #0
 80175f2:	462a      	mov	r2, r5
 80175f4:	db04      	blt.n	8017600 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 80175f6:	f7ff fe2f 	bl	8017258 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80175fa:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 80175fe:	e7bf      	b.n	8017580 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8017600:	4249      	negs	r1, r1
 8017602:	f7ff fe29 	bl	8017258 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017606:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 801760a:	e7b9      	b.n	8017580 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801760c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801760e:	a803      	add	r0, sp, #12
 8017610:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8017612:	f00d fe45 	bl	80252a0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017616:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017618:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801761a:	a803      	add	r0, sp, #12
 801761c:	f00d fe40 	bl	80252a0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017620:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017624:	2b01      	cmp	r3, #1
 8017626:	d123      	bne.n	8017670 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8017628:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801762a:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 801762e:	2e00      	cmp	r6, #0
 8017630:	dd1e      	ble.n	8017670 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8017632:	eb06 0907 	add.w	r9, r6, r7
 8017636:	4648      	mov	r0, r9
 8017638:	f7ff fd98 	bl	801716c <_ZN8touchgfx7CWRUtil4sineEi>
 801763c:	a901      	add	r1, sp, #4
 801763e:	9001      	str	r0, [sp, #4]
 8017640:	4628      	mov	r0, r5
 8017642:	f7ff fd87 	bl	8017154 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017646:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017648:	eb00 0801 	add.w	r8, r0, r1
 801764c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8017650:	f7ff fd8c 	bl	801716c <_ZN8touchgfx7CWRUtil4sineEi>
 8017654:	a902      	add	r1, sp, #8
 8017656:	9002      	str	r0, [sp, #8]
 8017658:	4628      	mov	r0, r5
 801765a:	f7ff fd7b 	bl	8017154 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801765e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017660:	4641      	mov	r1, r8
 8017662:	1a12      	subs	r2, r2, r0
 8017664:	a803      	add	r0, sp, #12
 8017666:	f00d fe1b 	bl	80252a0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801766a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801766c:	1af6      	subs	r6, r6, r3
 801766e:	e7de      	b.n	801762e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8017670:	21ff      	movs	r1, #255	; 0xff
 8017672:	a803      	add	r0, sp, #12
 8017674:	f00d ff89 	bl	802558a <_ZN8touchgfx6Canvas6renderEh>
 8017678:	4604      	mov	r4, r0
 801767a:	a803      	add	r0, sp, #12
 801767c:	f00d ffc4 	bl	8025608 <_ZN8touchgfx6CanvasD1Ev>
 8017680:	4620      	mov	r0, r4
 8017682:	b033      	add	sp, #204	; 0xcc
 8017684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017688 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8017688:	2200      	movs	r2, #0
 801768a:	8002      	strh	r2, [r0, #0]
 801768c:	8042      	strh	r2, [r0, #2]
 801768e:	8082      	strh	r2, [r0, #4]
 8017690:	80c2      	strh	r2, [r0, #6]
 8017692:	4770      	bx	lr

08017694 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8017694:	b570      	push	{r4, r5, r6, lr}
 8017696:	6803      	ldr	r3, [r0, #0]
 8017698:	4604      	mov	r4, r0
 801769a:	4615      	mov	r5, r2
 801769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801769e:	4798      	blx	r3
 80176a0:	6823      	ldr	r3, [r4, #0]
 80176a2:	4629      	mov	r1, r5
 80176a4:	4620      	mov	r0, r4
 80176a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80176a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176ac:	4718      	bx	r3
	...

080176b0 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80176b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80176b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80176b6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80176b8:	4299      	cmp	r1, r3
 80176ba:	d029      	beq.n	8017710 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 80176bc:	4b15      	ldr	r3, [pc, #84]	; (8017714 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	b92b      	cbnz	r3, 80176ce <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 80176c2:	4b15      	ldr	r3, [pc, #84]	; (8017718 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80176c4:	21ae      	movs	r1, #174	; 0xae
 80176c6:	4a15      	ldr	r2, [pc, #84]	; (801771c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80176c8:	4815      	ldr	r0, [pc, #84]	; (8017720 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80176ca:	f00f f991 	bl	80269f0 <__assert_func>
 80176ce:	4a15      	ldr	r2, [pc, #84]	; (8017724 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 80176d0:	8812      	ldrh	r2, [r2, #0]
 80176d2:	428a      	cmp	r2, r1
 80176d4:	d803      	bhi.n	80176de <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 80176d6:	4b14      	ldr	r3, [pc, #80]	; (8017728 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 80176d8:	21af      	movs	r1, #175	; 0xaf
 80176da:	4a10      	ldr	r2, [pc, #64]	; (801771c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80176dc:	e7f4      	b.n	80176c8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 80176de:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80176e2:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80176e6:	4b11      	ldr	r3, [pc, #68]	; (801772c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 80176e8:	7854      	ldrb	r4, [r2, #1]
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80176f0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80176f4:	682b      	ldr	r3, [r5, #0]
 80176f6:	69de      	ldr	r6, [r3, #28]
 80176f8:	4b0d      	ldr	r3, [pc, #52]	; (8017730 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 80176fa:	6818      	ldr	r0, [r3, #0]
 80176fc:	f7f1 fcba 	bl	8009074 <_ZNK8touchgfx5Texts7getTextEt>
 8017700:	2300      	movs	r3, #0
 8017702:	4602      	mov	r2, r0
 8017704:	4621      	mov	r1, r4
 8017706:	9300      	str	r3, [sp, #0]
 8017708:	4628      	mov	r0, r5
 801770a:	47b0      	blx	r6
 801770c:	b002      	add	sp, #8
 801770e:	bd70      	pop	{r4, r5, r6, pc}
 8017710:	2000      	movs	r0, #0
 8017712:	e7fb      	b.n	801770c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8017714:	200567ec 	.word	0x200567ec
 8017718:	0802d89b 	.word	0x0802d89b
 801771c:	0802d9d0 	.word	0x0802d9d0
 8017720:	0802d8dd 	.word	0x0802d8dd
 8017724:	200567f0 	.word	0x200567f0
 8017728:	0802d906 	.word	0x0802d906
 801772c:	200567f4 	.word	0x200567f4
 8017730:	200567f8 	.word	0x200567f8

08017734 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8017734:	b570      	push	{r4, r5, r6, lr}
 8017736:	6803      	ldr	r3, [r0, #0]
 8017738:	4604      	mov	r4, r0
 801773a:	b28d      	uxth	r5, r1
 801773c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801773e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8017740:	4b10      	ldr	r3, [pc, #64]	; (8017784 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	b92b      	cbnz	r3, 8017752 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8017746:	4b10      	ldr	r3, [pc, #64]	; (8017788 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8017748:	21ae      	movs	r1, #174	; 0xae
 801774a:	4a10      	ldr	r2, [pc, #64]	; (801778c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801774c:	4810      	ldr	r0, [pc, #64]	; (8017790 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801774e:	f00f f94f 	bl	80269f0 <__assert_func>
 8017752:	4910      	ldr	r1, [pc, #64]	; (8017794 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8017754:	8809      	ldrh	r1, [r1, #0]
 8017756:	4291      	cmp	r1, r2
 8017758:	d803      	bhi.n	8017762 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801775a:	4b0f      	ldr	r3, [pc, #60]	; (8017798 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 801775c:	21af      	movs	r1, #175	; 0xaf
 801775e:	4a0b      	ldr	r2, [pc, #44]	; (801778c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8017760:	e7f4      	b.n	801774c <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8017762:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8017766:	4b0d      	ldr	r3, [pc, #52]	; (801779c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801776e:	6803      	ldr	r3, [r0, #0]
 8017770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017772:	4798      	blx	r3
 8017774:	1a29      	subs	r1, r5, r0
 8017776:	4633      	mov	r3, r6
 8017778:	4620      	mov	r0, r4
 801777a:	b209      	sxth	r1, r1
 801777c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017780:	4718      	bx	r3
 8017782:	bf00      	nop
 8017784:	200567ec 	.word	0x200567ec
 8017788:	0802d89b 	.word	0x0802d89b
 801778c:	0802d9d0 	.word	0x0802d9d0
 8017790:	0802d8dd 	.word	0x0802d8dd
 8017794:	200567f0 	.word	0x200567f0
 8017798:	0802d906 	.word	0x0802d906
 801779c:	200567f4 	.word	0x200567f4

080177a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80177a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80177a8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80177aa:	b08c      	sub	sp, #48	; 0x30
 80177ac:	4604      	mov	r4, r0
 80177ae:	4293      	cmp	r3, r2
 80177b0:	4688      	mov	r8, r1
 80177b2:	d05f      	beq.n	8017874 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80177b4:	4e31      	ldr	r6, [pc, #196]	; (801787c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 80177b6:	6832      	ldr	r2, [r6, #0]
 80177b8:	b92a      	cbnz	r2, 80177c6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 80177ba:	4b31      	ldr	r3, [pc, #196]	; (8017880 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 80177bc:	21ae      	movs	r1, #174	; 0xae
 80177be:	4a31      	ldr	r2, [pc, #196]	; (8017884 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80177c0:	4831      	ldr	r0, [pc, #196]	; (8017888 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 80177c2:	f00f f915 	bl	80269f0 <__assert_func>
 80177c6:	4d31      	ldr	r5, [pc, #196]	; (801788c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 80177c8:	8829      	ldrh	r1, [r5, #0]
 80177ca:	4299      	cmp	r1, r3
 80177cc:	d803      	bhi.n	80177d6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 80177ce:	4b30      	ldr	r3, [pc, #192]	; (8017890 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 80177d0:	21af      	movs	r1, #175	; 0xaf
 80177d2:	4a2c      	ldr	r2, [pc, #176]	; (8017884 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80177d4:	e7f4      	b.n	80177c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 80177d6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80177da:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80177de:	4b2d      	ldr	r3, [pc, #180]	; (8017894 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80177e6:	2a00      	cmp	r2, #0
 80177e8:	d044      	beq.n	8017874 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80177ea:	784b      	ldrb	r3, [r1, #1]
 80177ec:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80177f0:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80177f4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80177f8:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80177fc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8017800:	4b25      	ldr	r3, [pc, #148]	; (8017898 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8017802:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 801780c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8017810:	9207      	str	r2, [sp, #28]
 8017812:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017814:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017818:	f88d a020 	strb.w	sl, [sp, #32]
 801781c:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8017820:	9009      	str	r0, [sp, #36]	; 0x24
 8017822:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8017826:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801782a:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801782e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8017832:	b10a      	cbz	r2, 8017838 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8017834:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8017836:	b907      	cbnz	r7, 801783a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8017838:	689f      	ldr	r7, [r3, #8]
 801783a:	f10d 0914 	add.w	r9, sp, #20
 801783e:	4621      	mov	r1, r4
 8017840:	4648      	mov	r0, r9
 8017842:	f002 fff5 	bl	801a830 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017846:	6833      	ldr	r3, [r6, #0]
 8017848:	2b00      	cmp	r3, #0
 801784a:	d0b6      	beq.n	80177ba <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 801784c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801784e:	882b      	ldrh	r3, [r5, #0]
 8017850:	428b      	cmp	r3, r1
 8017852:	d9bc      	bls.n	80177ce <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8017854:	4b11      	ldr	r3, [pc, #68]	; (801789c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8017856:	6818      	ldr	r0, [r3, #0]
 8017858:	f7f1 fc0c 	bl	8009074 <_ZNK8touchgfx5Texts7getTextEt>
 801785c:	2300      	movs	r3, #0
 801785e:	9001      	str	r0, [sp, #4]
 8017860:	4638      	mov	r0, r7
 8017862:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017866:	ab07      	add	r3, sp, #28
 8017868:	9300      	str	r3, [sp, #0]
 801786a:	4643      	mov	r3, r8
 801786c:	e899 0006 	ldmia.w	r9, {r1, r2}
 8017870:	f7f1 fb91 	bl	8008f96 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017874:	b00c      	add	sp, #48	; 0x30
 8017876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801787a:	bf00      	nop
 801787c:	200567ec 	.word	0x200567ec
 8017880:	0802d89b 	.word	0x0802d89b
 8017884:	0802d9d0 	.word	0x0802d9d0
 8017888:	0802d8dd 	.word	0x0802d8dd
 801788c:	200567f0 	.word	0x200567f0
 8017890:	0802d906 	.word	0x0802d906
 8017894:	200567f4 	.word	0x200567f4
 8017898:	2005677c 	.word	0x2005677c
 801789c:	200567f8 	.word	0x200567f8

080178a0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80178a0:	b40e      	push	{r1, r2, r3}
 80178a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80178a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178aa:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80178ac:	b09a      	sub	sp, #104	; 0x68
 80178ae:	4605      	mov	r5, r0
 80178b0:	4293      	cmp	r3, r2
 80178b2:	d067      	beq.n	8017984 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>
 80178b4:	aa24      	add	r2, sp, #144	; 0x90
 80178b6:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8017998 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>
 80178ba:	9202      	str	r2, [sp, #8]
 80178bc:	f8da 2000 	ldr.w	r2, [sl]
 80178c0:	b92a      	cbnz	r2, 80178ce <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 80178c2:	4b31      	ldr	r3, [pc, #196]	; (8017988 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 80178c4:	21ae      	movs	r1, #174	; 0xae
 80178c6:	4a31      	ldr	r2, [pc, #196]	; (801798c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 80178c8:	4831      	ldr	r0, [pc, #196]	; (8017990 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 80178ca:	f00f f891 	bl	80269f0 <__assert_func>
 80178ce:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 801799c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>
 80178d2:	f8b8 1000 	ldrh.w	r1, [r8]
 80178d6:	4299      	cmp	r1, r3
 80178d8:	d803      	bhi.n	80178e2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 80178da:	4b2e      	ldr	r3, [pc, #184]	; (8017994 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 80178dc:	21af      	movs	r1, #175	; 0xaf
 80178de:	4a2b      	ldr	r2, [pc, #172]	; (801798c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 80178e0:	e7f2      	b.n	80178c8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 80178e2:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80179a0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 80178e6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80178ea:	f8d9 3000 	ldr.w	r3, [r9]
 80178ee:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80178f2:	6823      	ldr	r3, [r4, #0]
 80178f4:	4620      	mov	r0, r4
 80178f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178f8:	4798      	blx	r3
 80178fa:	4607      	mov	r7, r0
 80178fc:	b206      	sxth	r6, r0
 80178fe:	a803      	add	r0, sp, #12
 8017900:	f003 fc55 	bl	801b1ae <_ZN8touchgfx12TextProviderC1Ev>
 8017904:	6823      	ldr	r3, [r4, #0]
 8017906:	4620      	mov	r0, r4
 8017908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801790a:	4798      	blx	r3
 801790c:	6823      	ldr	r3, [r4, #0]
 801790e:	4683      	mov	fp, r0
 8017910:	4620      	mov	r0, r4
 8017912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017914:	4798      	blx	r3
 8017916:	465b      	mov	r3, fp
 8017918:	9000      	str	r0, [sp, #0]
 801791a:	a803      	add	r0, sp, #12
 801791c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801791e:	9a02      	ldr	r2, [sp, #8]
 8017920:	f003 fc92 	bl	801b248 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017924:	f8da 3000 	ldr.w	r3, [sl]
 8017928:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
 801792c:	2b00      	cmp	r3, #0
 801792e:	d0c8      	beq.n	80178c2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8017930:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8017932:	f8b8 0000 	ldrh.w	r0, [r8]
 8017936:	4290      	cmp	r0, r2
 8017938:	d9cf      	bls.n	80178da <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801793a:	eb03 0442 	add.w	r4, r3, r2, lsl #1
 801793e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017942:	f8d9 3000 	ldr.w	r3, [r9]
 8017946:	7862      	ldrb	r2, [r4, #1]
 8017948:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 801794c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017950:	9400      	str	r4, [sp, #0]
 8017952:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017956:	a803      	add	r0, sp, #12
 8017958:	f001 fad1 	bl	8018efe <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801795c:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8017960:	b203      	sxth	r3, r0
 8017962:	18b1      	adds	r1, r6, r2
 8017964:	2900      	cmp	r1, #0
 8017966:	dd0b      	ble.n	8017980 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>
 8017968:	3b01      	subs	r3, #1
 801796a:	fb13 f302 	smulbb	r3, r3, r2
 801796e:	fb17 3300 	smlabb	r3, r7, r0, r3
 8017972:	b21e      	sxth	r6, r3
 8017974:	4630      	mov	r0, r6
 8017976:	b01a      	add	sp, #104	; 0x68
 8017978:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801797c:	b003      	add	sp, #12
 801797e:	4770      	bx	lr
 8017980:	2b00      	cmp	r3, #0
 8017982:	dcf7      	bgt.n	8017974 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8017984:	2600      	movs	r6, #0
 8017986:	e7f5      	b.n	8017974 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8017988:	0802d89b 	.word	0x0802d89b
 801798c:	0802d9d0 	.word	0x0802d9d0
 8017990:	0802d8dd 	.word	0x0802d8dd
 8017994:	0802d906 	.word	0x0802d906
 8017998:	200567ec 	.word	0x200567ec
 801799c:	200567f0 	.word	0x200567f0
 80179a0:	200567f4 	.word	0x200567f4

080179a4 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80179a4:	b570      	push	{r4, r5, r6, lr}
 80179a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80179aa:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80179ac:	4604      	mov	r4, r0
 80179ae:	4299      	cmp	r1, r3
 80179b0:	d01e      	beq.n	80179f0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 80179b2:	6803      	ldr	r3, [r0, #0]
 80179b4:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 80179b6:	4b0f      	ldr	r3, [pc, #60]	; (80179f4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	b92b      	cbnz	r3, 80179c8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 80179bc:	4b0e      	ldr	r3, [pc, #56]	; (80179f8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 80179be:	21ae      	movs	r1, #174	; 0xae
 80179c0:	4a0e      	ldr	r2, [pc, #56]	; (80179fc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80179c2:	480f      	ldr	r0, [pc, #60]	; (8017a00 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 80179c4:	f00f f814 	bl	80269f0 <__assert_func>
 80179c8:	4b0e      	ldr	r3, [pc, #56]	; (8017a04 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 80179ca:	881b      	ldrh	r3, [r3, #0]
 80179cc:	428b      	cmp	r3, r1
 80179ce:	d803      	bhi.n	80179d8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 80179d0:	4b0d      	ldr	r3, [pc, #52]	; (8017a08 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 80179d2:	21af      	movs	r1, #175	; 0xaf
 80179d4:	4a09      	ldr	r2, [pc, #36]	; (80179fc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80179d6:	e7f4      	b.n	80179c2 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 80179d8:	4b0c      	ldr	r3, [pc, #48]	; (8017a0c <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 80179da:	6818      	ldr	r0, [r3, #0]
 80179dc:	f7f1 fb4a 	bl	8009074 <_ZNK8touchgfx5Texts7getTextEt>
 80179e0:	2300      	movs	r3, #0
 80179e2:	4601      	mov	r1, r0
 80179e4:	46ac      	mov	ip, r5
 80179e6:	4620      	mov	r0, r4
 80179e8:	461a      	mov	r2, r3
 80179ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80179ee:	4760      	bx	ip
 80179f0:	2000      	movs	r0, #0
 80179f2:	bd70      	pop	{r4, r5, r6, pc}
 80179f4:	200567ec 	.word	0x200567ec
 80179f8:	0802d89b 	.word	0x0802d89b
 80179fc:	0802d9d0 	.word	0x0802d9d0
 8017a00:	0802d8dd 	.word	0x0802d8dd
 8017a04:	200567f0 	.word	0x200567f0
 8017a08:	0802d906 	.word	0x0802d906
 8017a0c:	200567f8 	.word	0x200567f8

08017a10 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017a10:	b538      	push	{r3, r4, r5, lr}
 8017a12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a16:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017a18:	4604      	mov	r4, r0
 8017a1a:	429a      	cmp	r2, r3
 8017a1c:	d014      	beq.n	8017a48 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8017a1e:	6803      	ldr	r3, [r0, #0]
 8017a20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017a22:	4798      	blx	r3
 8017a24:	6823      	ldr	r3, [r4, #0]
 8017a26:	4605      	mov	r5, r0
 8017a28:	4620      	mov	r0, r4
 8017a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017a2c:	4798      	blx	r3
 8017a2e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017a32:	b22d      	sxth	r5, r5
 8017a34:	4601      	mov	r1, r0
 8017a36:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017a3a:	bf06      	itte	eq
 8017a3c:	4602      	moveq	r2, r0
 8017a3e:	4629      	moveq	r1, r5
 8017a40:	462a      	movne	r2, r5
 8017a42:	4620      	mov	r0, r4
 8017a44:	f7ee faea 	bl	800601c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017a48:	bd38      	pop	{r3, r4, r5, pc}

08017a4a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8017a4a:	888a      	ldrh	r2, [r1, #4]
 8017a4c:	8582      	strh	r2, [r0, #44]	; 0x2c
 8017a4e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017a52:	b922      	cbnz	r2, 8017a5e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8017a54:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017a58:	b90b      	cbnz	r3, 8017a5e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8017a5a:	f7ff bfd9 	b.w	8017a10 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8017a5e:	4770      	bx	lr

08017a60 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017a60:	2300      	movs	r3, #0
 8017a62:	8083      	strh	r3, [r0, #4]
 8017a64:	80c3      	strh	r3, [r0, #6]
 8017a66:	8003      	strh	r3, [r0, #0]
 8017a68:	8043      	strh	r3, [r0, #2]
 8017a6a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017a6e:	2bff      	cmp	r3, #255	; 0xff
 8017a70:	bf01      	itttt	eq
 8017a72:	890b      	ldrheq	r3, [r1, #8]
 8017a74:	8083      	strheq	r3, [r0, #4]
 8017a76:	894b      	ldrheq	r3, [r1, #10]
 8017a78:	80c3      	strheq	r3, [r0, #6]
 8017a7a:	4770      	bx	lr

08017a7c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a7e:	4604      	mov	r4, r0
 8017a80:	466b      	mov	r3, sp
 8017a82:	6808      	ldr	r0, [r1, #0]
 8017a84:	6849      	ldr	r1, [r1, #4]
 8017a86:	c303      	stmia	r3!, {r0, r1}
 8017a88:	6823      	ldr	r3, [r4, #0]
 8017a8a:	4669      	mov	r1, sp
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a90:	4798      	blx	r3
 8017a92:	4b08      	ldr	r3, [pc, #32]	; (8017ab4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017a9a:	b10a      	cbz	r2, 8017aa0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017a9c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017a9e:	b900      	cbnz	r0, 8017aa2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017aa0:	6898      	ldr	r0, [r3, #8]
 8017aa2:	6803      	ldr	r3, [r0, #0]
 8017aa4:	4669      	mov	r1, sp
 8017aa6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017aa8:	699d      	ldr	r5, [r3, #24]
 8017aaa:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017aae:	47a8      	blx	r5
 8017ab0:	b003      	add	sp, #12
 8017ab2:	bd30      	pop	{r4, r5, pc}
 8017ab4:	2005677c 	.word	0x2005677c

08017ab8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8017ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017aba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017abe:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017ac0:	4606      	mov	r6, r0
 8017ac2:	4299      	cmp	r1, r3
 8017ac4:	d02a      	beq.n	8017b1c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8017ac6:	4b16      	ldr	r3, [pc, #88]	; (8017b20 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	b92b      	cbnz	r3, 8017ad8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8017acc:	4b15      	ldr	r3, [pc, #84]	; (8017b24 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8017ace:	21ae      	movs	r1, #174	; 0xae
 8017ad0:	4a15      	ldr	r2, [pc, #84]	; (8017b28 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8017ad2:	4816      	ldr	r0, [pc, #88]	; (8017b2c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8017ad4:	f00e ff8c 	bl	80269f0 <__assert_func>
 8017ad8:	4a15      	ldr	r2, [pc, #84]	; (8017b30 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8017ada:	8812      	ldrh	r2, [r2, #0]
 8017adc:	428a      	cmp	r2, r1
 8017ade:	d803      	bhi.n	8017ae8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8017ae0:	4b14      	ldr	r3, [pc, #80]	; (8017b34 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8017ae2:	21af      	movs	r1, #175	; 0xaf
 8017ae4:	4a10      	ldr	r2, [pc, #64]	; (8017b28 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8017ae6:	e7f4      	b.n	8017ad2 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8017ae8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017aec:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017af0:	4b11      	ldr	r3, [pc, #68]	; (8017b38 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8017af2:	7854      	ldrb	r4, [r2, #1]
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8017afa:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8017afe:	682b      	ldr	r3, [r5, #0]
 8017b00:	69df      	ldr	r7, [r3, #28]
 8017b02:	4b0e      	ldr	r3, [pc, #56]	; (8017b3c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8017b04:	6818      	ldr	r0, [r3, #0]
 8017b06:	f7f1 fab5 	bl	8009074 <_ZNK8touchgfx5Texts7getTextEt>
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	4602      	mov	r2, r0
 8017b0e:	4621      	mov	r1, r4
 8017b10:	9300      	str	r3, [sp, #0]
 8017b12:	4628      	mov	r0, r5
 8017b14:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8017b16:	47b8      	blx	r7
 8017b18:	b003      	add	sp, #12
 8017b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b1c:	2000      	movs	r0, #0
 8017b1e:	e7fb      	b.n	8017b18 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8017b20:	200567ec 	.word	0x200567ec
 8017b24:	0802d89b 	.word	0x0802d89b
 8017b28:	0802dadc 	.word	0x0802dadc
 8017b2c:	0802d8dd 	.word	0x0802d8dd
 8017b30:	200567f0 	.word	0x200567f0
 8017b34:	0802d906 	.word	0x0802d906
 8017b38:	200567f4 	.word	0x200567f4
 8017b3c:	200567f8 	.word	0x200567f8

08017b40 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8017b40:	b570      	push	{r4, r5, r6, lr}
 8017b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b46:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017b48:	4604      	mov	r4, r0
 8017b4a:	4299      	cmp	r1, r3
 8017b4c:	d01e      	beq.n	8017b8c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8017b4e:	6803      	ldr	r3, [r0, #0]
 8017b50:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8017b52:	4b0f      	ldr	r3, [pc, #60]	; (8017b90 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	b92b      	cbnz	r3, 8017b64 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8017b58:	4b0e      	ldr	r3, [pc, #56]	; (8017b94 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8017b5a:	21ae      	movs	r1, #174	; 0xae
 8017b5c:	4a0e      	ldr	r2, [pc, #56]	; (8017b98 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8017b5e:	480f      	ldr	r0, [pc, #60]	; (8017b9c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8017b60:	f00e ff46 	bl	80269f0 <__assert_func>
 8017b64:	4b0e      	ldr	r3, [pc, #56]	; (8017ba0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8017b66:	881b      	ldrh	r3, [r3, #0]
 8017b68:	428b      	cmp	r3, r1
 8017b6a:	d803      	bhi.n	8017b74 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8017b6c:	4b0d      	ldr	r3, [pc, #52]	; (8017ba4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8017b6e:	21af      	movs	r1, #175	; 0xaf
 8017b70:	4a09      	ldr	r2, [pc, #36]	; (8017b98 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8017b72:	e7f4      	b.n	8017b5e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8017b74:	4b0c      	ldr	r3, [pc, #48]	; (8017ba8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8017b76:	6818      	ldr	r0, [r3, #0]
 8017b78:	f7f1 fa7c 	bl	8009074 <_ZNK8touchgfx5Texts7getTextEt>
 8017b7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8017b7e:	4601      	mov	r1, r0
 8017b80:	46ac      	mov	ip, r5
 8017b82:	4620      	mov	r0, r4
 8017b84:	2300      	movs	r3, #0
 8017b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b8a:	4760      	bx	ip
 8017b8c:	2000      	movs	r0, #0
 8017b8e:	bd70      	pop	{r4, r5, r6, pc}
 8017b90:	200567ec 	.word	0x200567ec
 8017b94:	0802d89b 	.word	0x0802d89b
 8017b98:	0802dadc 	.word	0x0802dadc
 8017b9c:	0802d8dd 	.word	0x0802d8dd
 8017ba0:	200567f0 	.word	0x200567f0
 8017ba4:	0802d906 	.word	0x0802d906
 8017ba8:	200567f8 	.word	0x200567f8

08017bac <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8017bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017bb4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017bb6:	b08c      	sub	sp, #48	; 0x30
 8017bb8:	4604      	mov	r4, r0
 8017bba:	4293      	cmp	r3, r2
 8017bbc:	460e      	mov	r6, r1
 8017bbe:	d05d      	beq.n	8017c7c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8017bc0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8017ca0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8017bc4:	f8d8 2000 	ldr.w	r2, [r8]
 8017bc8:	b92a      	cbnz	r2, 8017bd6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8017bca:	4b2e      	ldr	r3, [pc, #184]	; (8017c84 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8017bcc:	21ae      	movs	r1, #174	; 0xae
 8017bce:	4a2e      	ldr	r2, [pc, #184]	; (8017c88 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8017bd0:	482e      	ldr	r0, [pc, #184]	; (8017c8c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8017bd2:	f00e ff0d 	bl	80269f0 <__assert_func>
 8017bd6:	4f2e      	ldr	r7, [pc, #184]	; (8017c90 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8017bd8:	8839      	ldrh	r1, [r7, #0]
 8017bda:	4299      	cmp	r1, r3
 8017bdc:	d803      	bhi.n	8017be6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8017bde:	4b2d      	ldr	r3, [pc, #180]	; (8017c94 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8017be0:	21af      	movs	r1, #175	; 0xaf
 8017be2:	4a29      	ldr	r2, [pc, #164]	; (8017c88 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8017be4:	e7f4      	b.n	8017bd0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8017be6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017bea:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017bee:	4b2a      	ldr	r3, [pc, #168]	; (8017c98 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017bf6:	2a00      	cmp	r2, #0
 8017bf8:	d040      	beq.n	8017c7c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8017bfa:	784b      	ldrb	r3, [r1, #1]
 8017bfc:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8017c00:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8017c04:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8017c08:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8017c0c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017c10:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8017c14:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8017c18:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017c1c:	ad05      	add	r5, sp, #20
 8017c1e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017c20:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8017c24:	9207      	str	r2, [sp, #28]
 8017c26:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8017c2a:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8017c2e:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8017c32:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8017c36:	f88d a020 	strb.w	sl, [sp, #32]
 8017c3a:	9009      	str	r0, [sp, #36]	; 0x24
 8017c3c:	f7ee fd1a 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 8017c40:	4621      	mov	r1, r4
 8017c42:	4681      	mov	r9, r0
 8017c44:	4628      	mov	r0, r5
 8017c46:	f002 fdf3 	bl	801a830 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d0bb      	beq.n	8017bca <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8017c52:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017c54:	883b      	ldrh	r3, [r7, #0]
 8017c56:	428b      	cmp	r3, r1
 8017c58:	d9c1      	bls.n	8017bde <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8017c5a:	4b10      	ldr	r3, [pc, #64]	; (8017c9c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8017c5c:	6818      	ldr	r0, [r3, #0]
 8017c5e:	f7f1 fa09 	bl	8009074 <_ZNK8touchgfx5Texts7getTextEt>
 8017c62:	2300      	movs	r3, #0
 8017c64:	9303      	str	r3, [sp, #12]
 8017c66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017c68:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8017c6c:	ab07      	add	r3, sp, #28
 8017c6e:	4648      	mov	r0, r9
 8017c70:	9300      	str	r3, [sp, #0]
 8017c72:	4633      	mov	r3, r6
 8017c74:	e895 0006 	ldmia.w	r5, {r1, r2}
 8017c78:	f7f1 f98d 	bl	8008f96 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017c7c:	b00c      	add	sp, #48	; 0x30
 8017c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c82:	bf00      	nop
 8017c84:	0802d89b 	.word	0x0802d89b
 8017c88:	0802dadc 	.word	0x0802dadc
 8017c8c:	0802d8dd 	.word	0x0802d8dd
 8017c90:	200567f0 	.word	0x200567f0
 8017c94:	0802d906 	.word	0x0802d906
 8017c98:	200567f4 	.word	0x200567f4
 8017c9c:	200567f8 	.word	0x200567f8
 8017ca0:	200567ec 	.word	0x200567ec

08017ca4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8017ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ca8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8017caa:	4604      	mov	r4, r0
 8017cac:	460e      	mov	r6, r1
 8017cae:	b08e      	sub	sp, #56	; 0x38
 8017cb0:	b218      	sxth	r0, r3
 8017cb2:	8921      	ldrh	r1, [r4, #8]
 8017cb4:	005b      	lsls	r3, r3, #1
 8017cb6:	8962      	ldrh	r2, [r4, #10]
 8017cb8:	f8ad 0000 	strh.w	r0, [sp]
 8017cbc:	b29b      	uxth	r3, r3
 8017cbe:	f8ad 0002 	strh.w	r0, [sp, #2]
 8017cc2:	1ac9      	subs	r1, r1, r3
 8017cc4:	1ad3      	subs	r3, r2, r3
 8017cc6:	b209      	sxth	r1, r1
 8017cc8:	b21b      	sxth	r3, r3
 8017cca:	2900      	cmp	r1, #0
 8017ccc:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017cd0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017cd4:	dd5e      	ble.n	8017d94 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	dd5c      	ble.n	8017d94 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8017cda:	6830      	ldr	r0, [r6, #0]
 8017cdc:	ab02      	add	r3, sp, #8
 8017cde:	6871      	ldr	r1, [r6, #4]
 8017ce0:	c303      	stmia	r3!, {r0, r1}
 8017ce2:	4669      	mov	r1, sp
 8017ce4:	a802      	add	r0, sp, #8
 8017ce6:	f7fd ff21 	bl	8015b2c <_ZN8touchgfx4RectaNERKS0_>
 8017cea:	4620      	mov	r0, r4
 8017cec:	a902      	add	r1, sp, #8
 8017cee:	f7ff fec5 	bl	8017a7c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8017cf2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8017cf4:	2800      	cmp	r0, #0
 8017cf6:	d05f      	beq.n	8017db8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8017cf8:	8963      	ldrh	r3, [r4, #10]
 8017cfa:	b202      	sxth	r2, r0
 8017cfc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8017d00:	2500      	movs	r5, #0
 8017d02:	1a1f      	subs	r7, r3, r0
 8017d04:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8017d08:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017d0c:	b21b      	sxth	r3, r3
 8017d0e:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8017d12:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8017d16:	af04      	add	r7, sp, #16
 8017d18:	1a09      	subs	r1, r1, r0
 8017d1a:	9506      	str	r5, [sp, #24]
 8017d1c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8017d20:	f8ad 5020 	strh.w	r5, [sp, #32]
 8017d24:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8017d28:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8017d2c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8017d30:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8017d34:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017d38:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8017d3c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8017d40:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017d44:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017d48:	ab06      	add	r3, sp, #24
 8017d4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017d4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017d52:	e887 0003 	stmia.w	r7, {r0, r1}
 8017d56:	4631      	mov	r1, r6
 8017d58:	4638      	mov	r0, r7
 8017d5a:	f7fd fee7 	bl	8015b2c <_ZN8touchgfx4RectaNERKS0_>
 8017d5e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	dd12      	ble.n	8017d8c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8017d66:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	dd0e      	ble.n	8017d8c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8017d6e:	6823      	ldr	r3, [r4, #0]
 8017d70:	4639      	mov	r1, r7
 8017d72:	4620      	mov	r0, r4
 8017d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d76:	4798      	blx	r3
 8017d78:	f7ee fc7c 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 8017d7c:	6803      	ldr	r3, [r0, #0]
 8017d7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017d80:	4639      	mov	r1, r7
 8017d82:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8017d86:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017d8a:	47c0      	blx	r8
 8017d8c:	3501      	adds	r5, #1
 8017d8e:	2d04      	cmp	r5, #4
 8017d90:	d1da      	bne.n	8017d48 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8017d92:	e011      	b.n	8017db8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8017d94:	6830      	ldr	r0, [r6, #0]
 8017d96:	ab06      	add	r3, sp, #24
 8017d98:	6871      	ldr	r1, [r6, #4]
 8017d9a:	c303      	stmia	r3!, {r0, r1}
 8017d9c:	6823      	ldr	r3, [r4, #0]
 8017d9e:	a906      	add	r1, sp, #24
 8017da0:	4620      	mov	r0, r4
 8017da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017da4:	4798      	blx	r3
 8017da6:	f7ee fc65 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 8017daa:	6803      	ldr	r3, [r0, #0]
 8017dac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017dae:	a906      	add	r1, sp, #24
 8017db0:	699d      	ldr	r5, [r3, #24]
 8017db2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017db6:	47a8      	blx	r5
 8017db8:	b00e      	add	sp, #56	; 0x38
 8017dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017dc0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8017dc0:	4b02      	ldr	r3, [pc, #8]	; (8017dcc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8017dc2:	6018      	str	r0, [r3, #0]
 8017dc4:	4b02      	ldr	r3, [pc, #8]	; (8017dd0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8017dc6:	6019      	str	r1, [r3, #0]
 8017dc8:	4770      	bx	lr
 8017dca:	bf00      	nop
 8017dcc:	20056784 	.word	0x20056784
 8017dd0:	20056798 	.word	0x20056798

08017dd4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8017dd4:	b538      	push	{r3, r4, r5, lr}
 8017dd6:	4c2b      	ldr	r4, [pc, #172]	; (8017e84 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8017dd8:	4b2b      	ldr	r3, [pc, #172]	; (8017e88 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8017dda:	6821      	ldr	r1, [r4, #0]
 8017ddc:	681a      	ldr	r2, [r3, #0]
 8017dde:	4281      	cmp	r1, r0
 8017de0:	4d2a      	ldr	r5, [pc, #168]	; (8017e8c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8017de2:	492b      	ldr	r1, [pc, #172]	; (8017e90 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8017de4:	d108      	bne.n	8017df8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017de6:	682b      	ldr	r3, [r5, #0]
 8017de8:	4293      	cmp	r3, r2
 8017dea:	d105      	bne.n	8017df8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017dec:	6808      	ldr	r0, [r1, #0]
 8017dee:	280f      	cmp	r0, #15
 8017df0:	bf94      	ite	ls
 8017df2:	2000      	movls	r0, #0
 8017df4:	2001      	movhi	r0, #1
 8017df6:	bd38      	pop	{r3, r4, r5, pc}
 8017df8:	4b26      	ldr	r3, [pc, #152]	; (8017e94 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8017dfa:	6020      	str	r0, [r4, #0]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	602a      	str	r2, [r5, #0]
 8017e00:	4298      	cmp	r0, r3
 8017e02:	d905      	bls.n	8017e10 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8017e04:	4b24      	ldr	r3, [pc, #144]	; (8017e98 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017e06:	2137      	movs	r1, #55	; 0x37
 8017e08:	4a24      	ldr	r2, [pc, #144]	; (8017e9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017e0a:	4825      	ldr	r0, [pc, #148]	; (8017ea0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8017e0c:	f00e fdf0 	bl	80269f0 <__assert_func>
 8017e10:	f010 0403 	ands.w	r4, r0, #3
 8017e14:	bf1f      	itttt	ne
 8017e16:	f1c4 0504 	rsbne	r5, r4, #4
 8017e1a:	3b04      	subne	r3, #4
 8017e1c:	1952      	addne	r2, r2, r5
 8017e1e:	191b      	addne	r3, r3, r4
 8017e20:	4d20      	ldr	r5, [pc, #128]	; (8017ea4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8017e22:	4402      	add	r2, r0
 8017e24:	1a1b      	subs	r3, r3, r0
 8017e26:	3001      	adds	r0, #1
 8017e28:	602a      	str	r2, [r5, #0]
 8017e2a:	f020 0401 	bic.w	r4, r0, #1
 8017e2e:	42a3      	cmp	r3, r4
 8017e30:	d203      	bcs.n	8017e3a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8017e32:	4b19      	ldr	r3, [pc, #100]	; (8017e98 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017e34:	214a      	movs	r1, #74	; 0x4a
 8017e36:	4a19      	ldr	r2, [pc, #100]	; (8017e9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017e38:	e7e7      	b.n	8017e0a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017e3a:	f010 0002 	ands.w	r0, r0, #2
 8017e3e:	bf1f      	itttt	ne
 8017e40:	f1c0 0504 	rsbne	r5, r0, #4
 8017e44:	1952      	addne	r2, r2, r5
 8017e46:	1f05      	subne	r5, r0, #4
 8017e48:	195b      	addne	r3, r3, r5
 8017e4a:	4422      	add	r2, r4
 8017e4c:	4d16      	ldr	r5, [pc, #88]	; (8017ea8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8017e4e:	1b1b      	subs	r3, r3, r4
 8017e50:	602a      	str	r2, [r5, #0]
 8017e52:	429c      	cmp	r4, r3
 8017e54:	d903      	bls.n	8017e5e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8017e56:	4b10      	ldr	r3, [pc, #64]	; (8017e98 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017e58:	215d      	movs	r1, #93	; 0x5d
 8017e5a:	4a10      	ldr	r2, [pc, #64]	; (8017e9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017e5c:	e7d5      	b.n	8017e0a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017e5e:	b120      	cbz	r0, 8017e6a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8017e60:	f1c0 0504 	rsb	r5, r0, #4
 8017e64:	3804      	subs	r0, #4
 8017e66:	442a      	add	r2, r5
 8017e68:	4403      	add	r3, r0
 8017e6a:	1b1b      	subs	r3, r3, r4
 8017e6c:	4422      	add	r2, r4
 8017e6e:	480f      	ldr	r0, [pc, #60]	; (8017eac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8017e70:	2b0f      	cmp	r3, #15
 8017e72:	600b      	str	r3, [r1, #0]
 8017e74:	6002      	str	r2, [r0, #0]
 8017e76:	d803      	bhi.n	8017e80 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8017e78:	4b0d      	ldr	r3, [pc, #52]	; (8017eb0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8017e7a:	2170      	movs	r1, #112	; 0x70
 8017e7c:	4a07      	ldr	r2, [pc, #28]	; (8017e9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017e7e:	e7c4      	b.n	8017e0a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017e80:	2001      	movs	r0, #1
 8017e82:	e7b8      	b.n	8017df6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8017e84:	2005678c 	.word	0x2005678c
 8017e88:	20056784 	.word	0x20056784
 8017e8c:	20056794 	.word	0x20056794
 8017e90:	2005679c 	.word	0x2005679c
 8017e94:	20056798 	.word	0x20056798
 8017e98:	0802db70 	.word	0x0802db70
 8017e9c:	0802dc38 	.word	0x0802dc38
 8017ea0:	0802dba9 	.word	0x0802dba9
 8017ea4:	200567a0 	.word	0x200567a0
 8017ea8:	20056790 	.word	0x20056790
 8017eac:	20056788 	.word	0x20056788
 8017eb0:	0802dbf3 	.word	0x0802dbf3

08017eb4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8017eb4:	4b04      	ldr	r3, [pc, #16]	; (8017ec8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8017eb6:	6818      	ldr	r0, [r3, #0]
 8017eb8:	b120      	cbz	r0, 8017ec4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8017eba:	4b04      	ldr	r3, [pc, #16]	; (8017ecc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8017ebc:	6818      	ldr	r0, [r3, #0]
 8017ebe:	3000      	adds	r0, #0
 8017ec0:	bf18      	it	ne
 8017ec2:	2001      	movne	r0, #1
 8017ec4:	4770      	bx	lr
 8017ec6:	bf00      	nop
 8017ec8:	20056784 	.word	0x20056784
 8017ecc:	20056798 	.word	0x20056798

08017ed0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8017ed0:	4b01      	ldr	r3, [pc, #4]	; (8017ed8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8017ed2:	6818      	ldr	r0, [r3, #0]
 8017ed4:	4770      	bx	lr
 8017ed6:	bf00      	nop
 8017ed8:	2005678c 	.word	0x2005678c

08017edc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8017edc:	4b01      	ldr	r3, [pc, #4]	; (8017ee4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8017ede:	6818      	ldr	r0, [r3, #0]
 8017ee0:	4770      	bx	lr
 8017ee2:	bf00      	nop
 8017ee4:	20056794 	.word	0x20056794

08017ee8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8017ee8:	4b01      	ldr	r3, [pc, #4]	; (8017ef0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8017eea:	6818      	ldr	r0, [r3, #0]
 8017eec:	4770      	bx	lr
 8017eee:	bf00      	nop
 8017ef0:	200567a0 	.word	0x200567a0

08017ef4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8017ef4:	4b01      	ldr	r3, [pc, #4]	; (8017efc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8017ef6:	6818      	ldr	r0, [r3, #0]
 8017ef8:	4770      	bx	lr
 8017efa:	bf00      	nop
 8017efc:	20056790 	.word	0x20056790

08017f00 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8017f00:	4b01      	ldr	r3, [pc, #4]	; (8017f08 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8017f02:	6818      	ldr	r0, [r3, #0]
 8017f04:	4770      	bx	lr
 8017f06:	bf00      	nop
 8017f08:	20056788 	.word	0x20056788

08017f0c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8017f0c:	4b01      	ldr	r3, [pc, #4]	; (8017f14 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8017f0e:	6818      	ldr	r0, [r3, #0]
 8017f10:	4770      	bx	lr
 8017f12:	bf00      	nop
 8017f14:	2005679c 	.word	0x2005679c

08017f18 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8017f18:	4b01      	ldr	r3, [pc, #4]	; (8017f20 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8017f1a:	6019      	str	r1, [r3, #0]
 8017f1c:	4770      	bx	lr
 8017f1e:	bf00      	nop
 8017f20:	200567a4 	.word	0x200567a4

08017f24 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f28:	4696      	mov	lr, r2
 8017f2a:	b097      	sub	sp, #92	; 0x5c
 8017f2c:	4605      	mov	r5, r0
 8017f2e:	4614      	mov	r4, r2
 8017f30:	460e      	mov	r6, r1
 8017f32:	461f      	mov	r7, r3
 8017f34:	f10d 0c1c 	add.w	ip, sp, #28
 8017f38:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8017f3c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8017f40:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8017f44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017f48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017f4c:	f8de 3000 	ldr.w	r3, [lr]
 8017f50:	f104 0e14 	add.w	lr, r4, #20
 8017f54:	f8cc 3000 	str.w	r3, [ip]
 8017f58:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017f5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017f60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017f64:	f8de 3000 	ldr.w	r3, [lr]
 8017f68:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017f6c:	f8cc 3000 	str.w	r3, [ip]
 8017f70:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017f74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017f78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017f7c:	f8de 3000 	ldr.w	r3, [lr]
 8017f80:	4631      	mov	r1, r6
 8017f82:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017f84:	4628      	mov	r0, r5
 8017f86:	f8cc 3000 	str.w	r3, [ip]
 8017f8a:	682b      	ldr	r3, [r5, #0]
 8017f8c:	9201      	str	r2, [sp, #4]
 8017f8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017f90:	f8cd 8008 	str.w	r8, [sp, #8]
 8017f94:	9200      	str	r2, [sp, #0]
 8017f96:	aa07      	add	r2, sp, #28
 8017f98:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017f9c:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8017fa0:	463b      	mov	r3, r7
 8017fa2:	47d8      	blx	fp
 8017fa4:	46a6      	mov	lr, r4
 8017fa6:	f10d 0c1c 	add.w	ip, sp, #28
 8017faa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017fae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017fb2:	f8de 3000 	ldr.w	r3, [lr]
 8017fb6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017fba:	343c      	adds	r4, #60	; 0x3c
 8017fbc:	f8cc 3000 	str.w	r3, [ip]
 8017fc0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017fc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017fc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017fcc:	f8de 3000 	ldr.w	r3, [lr]
 8017fd0:	f8cc 3000 	str.w	r3, [ip]
 8017fd4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017fda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017fde:	6823      	ldr	r3, [r4, #0]
 8017fe0:	4631      	mov	r1, r6
 8017fe2:	4628      	mov	r0, r5
 8017fe4:	f8cc 3000 	str.w	r3, [ip]
 8017fe8:	682b      	ldr	r3, [r5, #0]
 8017fea:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017fee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017ff0:	f8cd 8008 	str.w	r8, [sp, #8]
 8017ff4:	9201      	str	r2, [sp, #4]
 8017ff6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017ff8:	9200      	str	r2, [sp, #0]
 8017ffa:	aa07      	add	r2, sp, #28
 8017ffc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8017ffe:	463b      	mov	r3, r7
 8018000:	47a0      	blx	r4
 8018002:	b017      	add	sp, #92	; 0x5c
 8018004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018008 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018008:	2000      	movs	r0, #0
 801800a:	4770      	bx	lr

0801800c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801800c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018010:	b08d      	sub	sp, #52	; 0x34
 8018012:	4688      	mov	r8, r1
 8018014:	f8d3 c000 	ldr.w	ip, [r3]
 8018018:	9916      	ldr	r1, [sp, #88]	; 0x58
 801801a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801801e:	680f      	ldr	r7, [r1, #0]
 8018020:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8018024:	eba7 070c 	sub.w	r7, r7, ip
 8018028:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801802c:	edd3 6a07 	vldr	s13, [r3, #28]
 8018030:	42bc      	cmp	r4, r7
 8018032:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018034:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8018038:	bfa8      	it	ge
 801803a:	463c      	movge	r4, r7
 801803c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8018040:	f9ba 1000 	ldrsh.w	r1, [sl]
 8018044:	ee07 4a90 	vmov	s15, r4
 8018048:	eb09 0e0c 	add.w	lr, r9, ip
 801804c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8018050:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018054:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8018058:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801805c:	4571      	cmp	r1, lr
 801805e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018062:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018066:	ee25 5a27 	vmul.f32	s10, s10, s15
 801806a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801806e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8018072:	ee32 1a05 	vadd.f32	s2, s4, s10
 8018076:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801807a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801807e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018082:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018086:	f340 808c 	ble.w	80181a2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801808a:	eba1 060e 	sub.w	r6, r1, lr
 801808e:	fb96 f5f4 	sdiv	r5, r6, r4
 8018092:	ee07 5a10 	vmov	s14, r5
 8018096:	2d00      	cmp	r5, #0
 8018098:	fb04 6615 	mls	r6, r4, r5, r6
 801809c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80180a0:	eea7 0a04 	vfma.f32	s0, s14, s8
 80180a4:	eee7 0a24 	vfma.f32	s1, s14, s9
 80180a8:	eea7 1a05 	vfma.f32	s2, s14, s10
 80180ac:	dd12      	ble.n	80180d4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80180ae:	ee70 6a44 	vsub.f32	s13, s0, s8
 80180b2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80180b6:	ee31 2a45 	vsub.f32	s4, s2, s10
 80180ba:	eef5 6a40 	vcmp.f32	s13, #0.0
 80180be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180c2:	bf14      	ite	ne
 80180c4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80180c8:	eeb0 7a67 	vmoveq.f32	s14, s15
 80180cc:	ee61 1a87 	vmul.f32	s3, s3, s14
 80180d0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80180d4:	fb05 f204 	mul.w	r2, r5, r4
 80180d8:	1abf      	subs	r7, r7, r2
 80180da:	4494      	add	ip, r2
 80180dc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80180e0:	4411      	add	r1, r2
 80180e2:	eb09 020c 	add.w	r2, r9, ip
 80180e6:	b209      	sxth	r1, r1
 80180e8:	443a      	add	r2, r7
 80180ea:	428a      	cmp	r2, r1
 80180ec:	bfc4      	itt	gt
 80180ee:	eba1 0209 	subgt.w	r2, r1, r9
 80180f2:	eba2 070c 	subgt.w	r7, r2, ip
 80180f6:	2f00      	cmp	r7, #0
 80180f8:	dd50      	ble.n	801819c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80180fa:	fb97 f1f4 	sdiv	r1, r7, r4
 80180fe:	fb04 7211 	mls	r2, r4, r1, r7
 8018102:	b90a      	cbnz	r2, 8018108 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8018104:	3901      	subs	r1, #1
 8018106:	4622      	mov	r2, r4
 8018108:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801810c:	6840      	ldr	r0, [r0, #4]
 801810e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8018112:	44b6      	add	lr, r6
 8018114:	f8d0 a000 	ldr.w	sl, [r0]
 8018118:	2900      	cmp	r1, #0
 801811a:	bfcc      	ite	gt
 801811c:	46a1      	movgt	r9, r4
 801811e:	4691      	movle	r9, r2
 8018120:	900b      	str	r0, [sp, #44]	; 0x2c
 8018122:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018124:	fb04 e505 	mla	r5, r4, r5, lr
 8018128:	eef0 6a42 	vmov.f32	s13, s4
 801812c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8018130:	9008      	str	r0, [sp, #32]
 8018132:	eeb0 7a61 	vmov.f32	s14, s3
 8018136:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018138:	695b      	ldr	r3, [r3, #20]
 801813a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801813e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8018142:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018146:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018148:	445b      	add	r3, fp
 801814a:	9307      	str	r3, [sp, #28]
 801814c:	ee16 3a90 	vmov	r3, s13
 8018150:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8018154:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018158:	ee21 3a23 	vmul.f32	s6, s2, s7
 801815c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018160:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018164:	ee17 7a90 	vmov	r7, s15
 8018168:	ee73 7a42 	vsub.f32	s15, s6, s4
 801816c:	fb97 f7f4 	sdiv	r7, r7, r4
 8018170:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018174:	ee17 ca90 	vmov	ip, s15
 8018178:	fb9c fcf4 	sdiv	ip, ip, r4
 801817c:	fb0c 3306 	mla	r3, ip, r6, r3
 8018180:	9302      	str	r3, [sp, #8]
 8018182:	ee17 3a10 	vmov	r3, s14
 8018186:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801818a:	fb07 3706 	mla	r7, r7, r6, r3
 801818e:	eba9 0306 	sub.w	r3, r9, r6
 8018192:	e9cd 4700 	strd	r4, r7, [sp]
 8018196:	f8da 4008 	ldr.w	r4, [sl, #8]
 801819a:	47a0      	blx	r4
 801819c:	b00d      	add	sp, #52	; 0x34
 801819e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181a2:	2500      	movs	r5, #0
 80181a4:	462e      	mov	r6, r5
 80181a6:	e799      	b.n	80180dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080181a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80181a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181ac:	b0db      	sub	sp, #364	; 0x16c
 80181ae:	461d      	mov	r5, r3
 80181b0:	4614      	mov	r4, r2
 80181b2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80181b6:	910f      	str	r1, [sp, #60]	; 0x3c
 80181b8:	4629      	mov	r1, r5
 80181ba:	930a      	str	r3, [sp, #40]	; 0x28
 80181bc:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80181c0:	9009      	str	r0, [sp, #36]	; 0x24
 80181c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80181c4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80181c8:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80181cc:	9310      	str	r3, [sp, #64]	; 0x40
 80181ce:	6803      	ldr	r3, [r0, #0]
 80181d0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80181d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80181d6:	47b8      	blx	r7
 80181d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181da:	6058      	str	r0, [r3, #4]
 80181dc:	2800      	cmp	r0, #0
 80181de:	f000 83a1 	beq.w	8018924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80181e2:	682b      	ldr	r3, [r5, #0]
 80181e4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80181e8:	ed94 7a02 	vldr	s14, [r4, #8]
 80181ec:	9314      	str	r3, [sp, #80]	; 0x50
 80181ee:	686b      	ldr	r3, [r5, #4]
 80181f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80181f4:	9315      	str	r3, [sp, #84]	; 0x54
 80181f6:	4bc1      	ldr	r3, [pc, #772]	; (80184fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80181f8:	7819      	ldrb	r1, [r3, #0]
 80181fa:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80181fe:	2900      	cmp	r1, #0
 8018200:	bf16      	itet	ne
 8018202:	4619      	movne	r1, r3
 8018204:	4611      	moveq	r1, r2
 8018206:	4613      	movne	r3, r2
 8018208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801820c:	9116      	str	r1, [sp, #88]	; 0x58
 801820e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8018212:	f240 8387 	bls.w	8018924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018216:	ed94 7a07 	vldr	s14, [r4, #28]
 801821a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801821e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018222:	f240 837f 	bls.w	8018924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018226:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801822a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801822e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018232:	f240 8377 	bls.w	8018924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018236:	6822      	ldr	r2, [r4, #0]
 8018238:	4bb1      	ldr	r3, [pc, #708]	; (8018500 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801823a:	429a      	cmp	r2, r3
 801823c:	f2c0 8372 	blt.w	8018924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018240:	49b0      	ldr	r1, [pc, #704]	; (8018504 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8018242:	6963      	ldr	r3, [r4, #20]
 8018244:	428a      	cmp	r2, r1
 8018246:	f300 836d 	bgt.w	8018924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801824a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801824e:	48ae      	ldr	r0, [pc, #696]	; (8018508 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8018250:	33ff      	adds	r3, #255	; 0xff
 8018252:	4283      	cmp	r3, r0
 8018254:	f200 8366 	bhi.w	8018924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018258:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801825a:	4dac      	ldr	r5, [pc, #688]	; (801850c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801825c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018260:	33ff      	adds	r3, #255	; 0xff
 8018262:	42ab      	cmp	r3, r5
 8018264:	f200 835e 	bhi.w	8018924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018268:	6862      	ldr	r2, [r4, #4]
 801826a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801826e:	33ff      	adds	r3, #255	; 0xff
 8018270:	4283      	cmp	r3, r0
 8018272:	f200 8357 	bhi.w	8018924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018276:	69a1      	ldr	r1, [r4, #24]
 8018278:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801827c:	33ff      	adds	r3, #255	; 0xff
 801827e:	4283      	cmp	r3, r0
 8018280:	f200 8350 	bhi.w	8018924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018284:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018286:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801828a:	30ff      	adds	r0, #255	; 0xff
 801828c:	42a8      	cmp	r0, r5
 801828e:	f200 8349 	bhi.w	8018924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018292:	428a      	cmp	r2, r1
 8018294:	f280 8110 	bge.w	80184b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8018298:	429a      	cmp	r2, r3
 801829a:	f300 8119 	bgt.w	80184d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801829e:	4299      	cmp	r1, r3
 80182a0:	f280 811d 	bge.w	80184de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80182a4:	2502      	movs	r5, #2
 80182a6:	2701      	movs	r7, #1
 80182a8:	46a9      	mov	r9, r5
 80182aa:	46b8      	mov	r8, r7
 80182ac:	f04f 0a00 	mov.w	sl, #0
 80182b0:	4621      	mov	r1, r4
 80182b2:	a849      	add	r0, sp, #292	; 0x124
 80182b4:	f003 fd3e 	bl	801bd34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80182b8:	4622      	mov	r2, r4
 80182ba:	4653      	mov	r3, sl
 80182bc:	a949      	add	r1, sp, #292	; 0x124
 80182be:	f8cd 9000 	str.w	r9, [sp]
 80182c2:	a819      	add	r0, sp, #100	; 0x64
 80182c4:	f003 fe66 	bl	801bf94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80182c8:	4622      	mov	r2, r4
 80182ca:	4653      	mov	r3, sl
 80182cc:	a949      	add	r1, sp, #292	; 0x124
 80182ce:	f8cd 8000 	str.w	r8, [sp]
 80182d2:	a829      	add	r0, sp, #164	; 0xa4
 80182d4:	f003 fe5e 	bl	801bf94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80182d8:	4643      	mov	r3, r8
 80182da:	4622      	mov	r2, r4
 80182dc:	a949      	add	r1, sp, #292	; 0x124
 80182de:	f8cd 9000 	str.w	r9, [sp]
 80182e2:	a839      	add	r0, sp, #228	; 0xe4
 80182e4:	f003 fe56 	bl	801bf94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80182e8:	42af      	cmp	r7, r5
 80182ea:	af12      	add	r7, sp, #72	; 0x48
 80182ec:	bfb7      	itett	lt
 80182ee:	2300      	movlt	r3, #0
 80182f0:	2301      	movge	r3, #1
 80182f2:	ad29      	addlt	r5, sp, #164	; 0xa4
 80182f4:	ac19      	addlt	r4, sp, #100	; 0x64
 80182f6:	bfb1      	iteee	lt
 80182f8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80182fa:	ad19      	addge	r5, sp, #100	; 0x64
 80182fc:	930e      	strge	r3, [sp, #56]	; 0x38
 80182fe:	ac29      	addge	r4, sp, #164	; 0xa4
 8018300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018302:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018306:	e887 0003 	stmia.w	r7, {r0, r1}
 801830a:	b928      	cbnz	r0, 8018318 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801830c:	4b80      	ldr	r3, [pc, #512]	; (8018510 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801830e:	6818      	ldr	r0, [r3, #0]
 8018310:	6803      	ldr	r3, [r0, #0]
 8018312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018314:	4798      	blx	r3
 8018316:	6038      	str	r0, [r7, #0]
 8018318:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801831a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801831e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018322:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018324:	930c      	str	r3, [sp, #48]	; 0x30
 8018326:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018328:	6963      	ldr	r3, [r4, #20]
 801832a:	440b      	add	r3, r1
 801832c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018330:	4408      	add	r0, r1
 8018332:	b200      	sxth	r0, r0
 8018334:	4283      	cmp	r3, r0
 8018336:	900d      	str	r0, [sp, #52]	; 0x34
 8018338:	f280 80dd 	bge.w	80184f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801833c:	428b      	cmp	r3, r1
 801833e:	da08      	bge.n	8018352 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018340:	2a00      	cmp	r2, #0
 8018342:	dd06      	ble.n	8018352 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018344:	1acb      	subs	r3, r1, r3
 8018346:	429a      	cmp	r2, r3
 8018348:	f2c0 80e4 	blt.w	8018514 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801834c:	2b00      	cmp	r3, #0
 801834e:	f300 80e2 	bgt.w	8018516 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8018352:	6967      	ldr	r7, [r4, #20]
 8018354:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801835a:	443b      	add	r3, r7
 801835c:	461f      	mov	r7, r3
 801835e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018360:	1bdf      	subs	r7, r3, r7
 8018362:	4297      	cmp	r7, r2
 8018364:	bfa8      	it	ge
 8018366:	4617      	movge	r7, r2
 8018368:	2f00      	cmp	r7, #0
 801836a:	f340 8166 	ble.w	801863a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801836e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018370:	6829      	ldr	r1, [r5, #0]
 8018372:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018376:	f9bb 3000 	ldrsh.w	r3, [fp]
 801837a:	4411      	add	r1, r2
 801837c:	6820      	ldr	r0, [r4, #0]
 801837e:	4299      	cmp	r1, r3
 8018380:	dd1a      	ble.n	80183b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018382:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018386:	4402      	add	r2, r0
 8018388:	440b      	add	r3, r1
 801838a:	b21b      	sxth	r3, r3
 801838c:	429a      	cmp	r2, r3
 801838e:	dc13      	bgt.n	80183b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018390:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018392:	a912      	add	r1, sp, #72	; 0x48
 8018394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018396:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	9206      	str	r2, [sp, #24]
 801839c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801839e:	9500      	str	r5, [sp, #0]
 80183a0:	9205      	str	r2, [sp, #20]
 80183a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80183a4:	e9cd b203 	strd	fp, r2, [sp, #12]
 80183a8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80183aa:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80183ae:	aa49      	add	r2, sp, #292	; 0x124
 80183b0:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 80183b4:	4623      	mov	r3, r4
 80183b6:	47c8      	blx	r9
 80183b8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80183bc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80183c0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80183c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80183c8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80183cc:	68a1      	ldr	r1, [r4, #8]
 80183ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80183d2:	ed94 6a08 	vldr	s12, [r4, #32]
 80183d6:	edd4 6a07 	vldr	s13, [r4, #28]
 80183da:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80183de:	ee76 6a86 	vadd.f32	s13, s13, s12
 80183e2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80183e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80183ea:	edc4 6a07 	vstr	s13, [r4, #28]
 80183ee:	441a      	add	r2, r3
 80183f0:	6963      	ldr	r3, [r4, #20]
 80183f2:	3301      	adds	r3, #1
 80183f4:	6022      	str	r2, [r4, #0]
 80183f6:	6163      	str	r3, [r4, #20]
 80183f8:	69a3      	ldr	r3, [r4, #24]
 80183fa:	3b01      	subs	r3, #1
 80183fc:	61a3      	str	r3, [r4, #24]
 80183fe:	6923      	ldr	r3, [r4, #16]
 8018400:	440b      	add	r3, r1
 8018402:	68e1      	ldr	r1, [r4, #12]
 8018404:	428b      	cmp	r3, r1
 8018406:	6123      	str	r3, [r4, #16]
 8018408:	db15      	blt.n	8018436 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801840a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801840e:	3201      	adds	r2, #1
 8018410:	1a5b      	subs	r3, r3, r1
 8018412:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018416:	6022      	str	r2, [r4, #0]
 8018418:	6123      	str	r3, [r4, #16]
 801841a:	edc4 6a07 	vstr	s13, [r4, #28]
 801841e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018422:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018426:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801842a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801842e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018432:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018436:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801843a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801843e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018442:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018446:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801844a:	68a9      	ldr	r1, [r5, #8]
 801844c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018450:	ed95 6a08 	vldr	s12, [r5, #32]
 8018454:	edd5 6a07 	vldr	s13, [r5, #28]
 8018458:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801845c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018460:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018464:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018468:	edc5 6a07 	vstr	s13, [r5, #28]
 801846c:	441a      	add	r2, r3
 801846e:	696b      	ldr	r3, [r5, #20]
 8018470:	3301      	adds	r3, #1
 8018472:	602a      	str	r2, [r5, #0]
 8018474:	616b      	str	r3, [r5, #20]
 8018476:	69ab      	ldr	r3, [r5, #24]
 8018478:	3b01      	subs	r3, #1
 801847a:	61ab      	str	r3, [r5, #24]
 801847c:	692b      	ldr	r3, [r5, #16]
 801847e:	440b      	add	r3, r1
 8018480:	68e9      	ldr	r1, [r5, #12]
 8018482:	428b      	cmp	r3, r1
 8018484:	612b      	str	r3, [r5, #16]
 8018486:	db15      	blt.n	80184b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8018488:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801848c:	3201      	adds	r2, #1
 801848e:	1a5b      	subs	r3, r3, r1
 8018490:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018494:	602a      	str	r2, [r5, #0]
 8018496:	612b      	str	r3, [r5, #16]
 8018498:	edc5 6a07 	vstr	s13, [r5, #28]
 801849c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80184a0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80184a4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80184a8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80184ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80184b0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80184b4:	3f01      	subs	r7, #1
 80184b6:	e757      	b.n	8018368 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80184b8:	4299      	cmp	r1, r3
 80184ba:	dc13      	bgt.n	80184e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80184bc:	429a      	cmp	r2, r3
 80184be:	da14      	bge.n	80184ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80184c0:	2502      	movs	r5, #2
 80184c2:	2703      	movs	r7, #3
 80184c4:	f04f 0800 	mov.w	r8, #0
 80184c8:	46a9      	mov	r9, r5
 80184ca:	f04f 0a01 	mov.w	sl, #1
 80184ce:	e6ef      	b.n	80182b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80184d0:	2501      	movs	r5, #1
 80184d2:	2700      	movs	r7, #0
 80184d4:	46a9      	mov	r9, r5
 80184d6:	46b8      	mov	r8, r7
 80184d8:	f04f 0a02 	mov.w	sl, #2
 80184dc:	e6e8      	b.n	80182b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80184de:	2501      	movs	r5, #1
 80184e0:	2702      	movs	r7, #2
 80184e2:	e6e1      	b.n	80182a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80184e4:	2500      	movs	r5, #0
 80184e6:	2701      	movs	r7, #1
 80184e8:	e7f4      	b.n	80184d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80184ea:	2702      	movs	r7, #2
 80184ec:	2503      	movs	r5, #3
 80184ee:	f04f 0900 	mov.w	r9, #0
 80184f2:	46b8      	mov	r8, r7
 80184f4:	e7e9      	b.n	80184ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80184f6:	4613      	mov	r3, r2
 80184f8:	e728      	b.n	801834c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80184fa:	bf00      	nop
 80184fc:	20056774 	.word	0x20056774
 8018500:	fffd8f01 	.word	0xfffd8f01
 8018504:	00027100 	.word	0x00027100
 8018508:	0004e1ff 	.word	0x0004e1ff
 801850c:	0004e1fe 	.word	0x0004e1fe
 8018510:	2005677c 	.word	0x2005677c
 8018514:	4613      	mov	r3, r2
 8018516:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018518:	469e      	mov	lr, r3
 801851a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801851c:	469c      	mov	ip, r3
 801851e:	9111      	str	r1, [sp, #68]	; 0x44
 8018520:	f04f 0900 	mov.w	r9, #0
 8018524:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8018528:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801852c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8018530:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8018534:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8018538:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801853c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8018540:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8018544:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8018548:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801854c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8018550:	f1bc 0f00 	cmp.w	ip, #0
 8018554:	d147      	bne.n	80185e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018556:	eb03 0c07 	add.w	ip, r3, r7
 801855a:	1ad7      	subs	r7, r2, r3
 801855c:	f1b9 0f00 	cmp.w	r9, #0
 8018560:	d009      	beq.n	8018576 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018562:	9029      	str	r0, [sp, #164]	; 0xa4
 8018564:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8018568:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801856c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8018570:	912d      	str	r1, [sp, #180]	; 0xb4
 8018572:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8018576:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018578:	f04f 0800 	mov.w	r8, #0
 801857c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018580:	9111      	str	r1, [sp, #68]	; 0x44
 8018582:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018586:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801858a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801858e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018592:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018596:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801859a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801859e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80185a2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80185a6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80185aa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80185ae:	f1be 0f00 	cmp.w	lr, #0
 80185b2:	d031      	beq.n	8018618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80185b4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80185b6:	4450      	add	r0, sl
 80185b8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80185bc:	4431      	add	r1, r6
 80185be:	ee37 7a04 	vadd.f32	s14, s14, s8
 80185c2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80185c6:	4549      	cmp	r1, r9
 80185c8:	db08      	blt.n	80185dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80185ca:	ee77 7a85 	vadd.f32	s15, s15, s10
 80185ce:	3001      	adds	r0, #1
 80185d0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80185d4:	eba1 0109 	sub.w	r1, r1, r9
 80185d8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80185dc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80185e0:	f04f 0801 	mov.w	r8, #1
 80185e4:	e7e3      	b.n	80185ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80185e6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80185e8:	4450      	add	r0, sl
 80185ea:	ee37 7a24 	vadd.f32	s14, s14, s9
 80185ee:	4431      	add	r1, r6
 80185f0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80185f4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80185f8:	4541      	cmp	r1, r8
 80185fa:	db08      	blt.n	801860e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80185fc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018600:	3001      	adds	r0, #1
 8018602:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018606:	eba1 0108 	sub.w	r1, r1, r8
 801860a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801860e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018612:	f04f 0901 	mov.w	r9, #1
 8018616:	e79b      	b.n	8018550 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8018618:	449c      	add	ip, r3
 801861a:	1aff      	subs	r7, r7, r3
 801861c:	f1b8 0f00 	cmp.w	r8, #0
 8018620:	d009      	beq.n	8018636 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8018622:	9019      	str	r0, [sp, #100]	; 0x64
 8018624:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018628:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801862c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018630:	911d      	str	r1, [sp, #116]	; 0x74
 8018632:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018636:	1ad2      	subs	r2, r2, r3
 8018638:	e68b      	b.n	8018352 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801863a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801863c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801863e:	2b00      	cmp	r3, #0
 8018640:	f000 80d1 	beq.w	80187e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018644:	ad19      	add	r5, sp, #100	; 0x64
 8018646:	ac39      	add	r4, sp, #228	; 0xe4
 8018648:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801864a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801864e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018652:	930c      	str	r3, [sp, #48]	; 0x30
 8018654:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018656:	6963      	ldr	r3, [r4, #20]
 8018658:	440b      	add	r3, r1
 801865a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801865e:	4408      	add	r0, r1
 8018660:	b200      	sxth	r0, r0
 8018662:	4283      	cmp	r3, r0
 8018664:	900d      	str	r0, [sp, #52]	; 0x34
 8018666:	f280 80c1 	bge.w	80187ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801866a:	428b      	cmp	r3, r1
 801866c:	da08      	bge.n	8018680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801866e:	2a00      	cmp	r2, #0
 8018670:	dd06      	ble.n	8018680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018672:	1acb      	subs	r3, r1, r3
 8018674:	429a      	cmp	r2, r3
 8018676:	f2c0 80bb 	blt.w	80187f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801867a:	2b00      	cmp	r3, #0
 801867c:	f300 80b9 	bgt.w	80187f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018680:	6967      	ldr	r7, [r4, #20]
 8018682:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018686:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018688:	443b      	add	r3, r7
 801868a:	461f      	mov	r7, r3
 801868c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801868e:	1bdf      	subs	r7, r3, r7
 8018690:	4297      	cmp	r7, r2
 8018692:	bfa8      	it	ge
 8018694:	4617      	movge	r7, r2
 8018696:	2f00      	cmp	r7, #0
 8018698:	f340 813c 	ble.w	8018914 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801869c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801869e:	6829      	ldr	r1, [r5, #0]
 80186a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80186a4:	f9bb 3000 	ldrsh.w	r3, [fp]
 80186a8:	4411      	add	r1, r2
 80186aa:	6820      	ldr	r0, [r4, #0]
 80186ac:	4299      	cmp	r1, r3
 80186ae:	dd1a      	ble.n	80186e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80186b0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80186b4:	4402      	add	r2, r0
 80186b6:	440b      	add	r3, r1
 80186b8:	b21b      	sxth	r3, r3
 80186ba:	429a      	cmp	r2, r3
 80186bc:	dc13      	bgt.n	80186e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80186be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80186c0:	a912      	add	r1, sp, #72	; 0x48
 80186c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	9206      	str	r2, [sp, #24]
 80186ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80186cc:	9500      	str	r5, [sp, #0]
 80186ce:	9205      	str	r2, [sp, #20]
 80186d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80186d2:	e9cd b203 	strd	fp, r2, [sp, #12]
 80186d6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80186d8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80186dc:	aa49      	add	r2, sp, #292	; 0x124
 80186de:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 80186e2:	4623      	mov	r3, r4
 80186e4:	47c8      	blx	r9
 80186e6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80186ea:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80186ee:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80186f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80186f6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80186fa:	68a1      	ldr	r1, [r4, #8]
 80186fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018700:	ed94 6a08 	vldr	s12, [r4, #32]
 8018704:	edd4 6a07 	vldr	s13, [r4, #28]
 8018708:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801870c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018710:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018714:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018718:	edc4 6a07 	vstr	s13, [r4, #28]
 801871c:	441a      	add	r2, r3
 801871e:	6963      	ldr	r3, [r4, #20]
 8018720:	3301      	adds	r3, #1
 8018722:	6022      	str	r2, [r4, #0]
 8018724:	6163      	str	r3, [r4, #20]
 8018726:	69a3      	ldr	r3, [r4, #24]
 8018728:	3b01      	subs	r3, #1
 801872a:	61a3      	str	r3, [r4, #24]
 801872c:	6923      	ldr	r3, [r4, #16]
 801872e:	440b      	add	r3, r1
 8018730:	68e1      	ldr	r1, [r4, #12]
 8018732:	428b      	cmp	r3, r1
 8018734:	6123      	str	r3, [r4, #16]
 8018736:	db15      	blt.n	8018764 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018738:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801873c:	3201      	adds	r2, #1
 801873e:	1a5b      	subs	r3, r3, r1
 8018740:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018744:	6022      	str	r2, [r4, #0]
 8018746:	6123      	str	r3, [r4, #16]
 8018748:	edc4 6a07 	vstr	s13, [r4, #28]
 801874c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018750:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018754:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018758:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801875c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018760:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018764:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018768:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801876c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018774:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018778:	68a9      	ldr	r1, [r5, #8]
 801877a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801877e:	ed95 6a08 	vldr	s12, [r5, #32]
 8018782:	edd5 6a07 	vldr	s13, [r5, #28]
 8018786:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801878a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801878e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018792:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018796:	edc5 6a07 	vstr	s13, [r5, #28]
 801879a:	441a      	add	r2, r3
 801879c:	696b      	ldr	r3, [r5, #20]
 801879e:	3301      	adds	r3, #1
 80187a0:	602a      	str	r2, [r5, #0]
 80187a2:	616b      	str	r3, [r5, #20]
 80187a4:	69ab      	ldr	r3, [r5, #24]
 80187a6:	3b01      	subs	r3, #1
 80187a8:	61ab      	str	r3, [r5, #24]
 80187aa:	692b      	ldr	r3, [r5, #16]
 80187ac:	440b      	add	r3, r1
 80187ae:	68e9      	ldr	r1, [r5, #12]
 80187b0:	428b      	cmp	r3, r1
 80187b2:	612b      	str	r3, [r5, #16]
 80187b4:	db15      	blt.n	80187e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80187b6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80187ba:	3201      	adds	r2, #1
 80187bc:	1a5b      	subs	r3, r3, r1
 80187be:	ee76 6a26 	vadd.f32	s13, s12, s13
 80187c2:	602a      	str	r2, [r5, #0]
 80187c4:	612b      	str	r3, [r5, #16]
 80187c6:	edc5 6a07 	vstr	s13, [r5, #28]
 80187ca:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80187ce:	ee36 7a87 	vadd.f32	s14, s13, s14
 80187d2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80187d6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80187da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80187de:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80187e2:	3f01      	subs	r7, #1
 80187e4:	e757      	b.n	8018696 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80187e6:	ad39      	add	r5, sp, #228	; 0xe4
 80187e8:	ac19      	add	r4, sp, #100	; 0x64
 80187ea:	e72d      	b.n	8018648 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80187ec:	4613      	mov	r3, r2
 80187ee:	e744      	b.n	801867a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80187f0:	4613      	mov	r3, r2
 80187f2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80187f4:	469e      	mov	lr, r3
 80187f6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80187fa:	461f      	mov	r7, r3
 80187fc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8018800:	f04f 0900 	mov.w	r9, #0
 8018804:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8018808:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801880c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8018810:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8018814:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8018818:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801881a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801881e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8018822:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8018826:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801882a:	960e      	str	r6, [sp, #56]	; 0x38
 801882c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8018830:	2f00      	cmp	r7, #0
 8018832:	d146      	bne.n	80188c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018834:	449c      	add	ip, r3
 8018836:	1ad7      	subs	r7, r2, r3
 8018838:	f1b9 0f00 	cmp.w	r9, #0
 801883c:	d009      	beq.n	8018852 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801883e:	9039      	str	r0, [sp, #228]	; 0xe4
 8018840:	913d      	str	r1, [sp, #244]	; 0xf4
 8018842:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8018846:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801884a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801884e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8018852:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018854:	f04f 0800 	mov.w	r8, #0
 8018858:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801885c:	910e      	str	r1, [sp, #56]	; 0x38
 801885e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018862:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018866:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801886a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801886e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018872:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018876:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801887a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801887e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018882:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8018886:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801888a:	f1be 0f00 	cmp.w	lr, #0
 801888e:	d030      	beq.n	80188f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018890:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018892:	4450      	add	r0, sl
 8018894:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018898:	4431      	add	r1, r6
 801889a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801889e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80188a2:	4549      	cmp	r1, r9
 80188a4:	db08      	blt.n	80188b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80188a6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80188aa:	3001      	adds	r0, #1
 80188ac:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80188b0:	eba1 0109 	sub.w	r1, r1, r9
 80188b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80188b8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80188bc:	f04f 0801 	mov.w	r8, #1
 80188c0:	e7e3      	b.n	801888a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80188c2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80188c4:	4450      	add	r0, sl
 80188c6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80188ca:	4431      	add	r1, r6
 80188cc:	ee77 7a84 	vadd.f32	s15, s15, s8
 80188d0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80188d4:	4541      	cmp	r1, r8
 80188d6:	db08      	blt.n	80188ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80188d8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80188dc:	3001      	adds	r0, #1
 80188de:	ee37 7a25 	vadd.f32	s14, s14, s11
 80188e2:	eba1 0108 	sub.w	r1, r1, r8
 80188e6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80188ea:	3f01      	subs	r7, #1
 80188ec:	f04f 0901 	mov.w	r9, #1
 80188f0:	e79e      	b.n	8018830 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80188f2:	449c      	add	ip, r3
 80188f4:	1aff      	subs	r7, r7, r3
 80188f6:	f1b8 0f00 	cmp.w	r8, #0
 80188fa:	d009      	beq.n	8018910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80188fc:	9019      	str	r0, [sp, #100]	; 0x64
 80188fe:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018902:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8018906:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801890a:	911d      	str	r1, [sp, #116]	; 0x74
 801890c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018910:	1ad2      	subs	r2, r2, r3
 8018912:	e6b5      	b.n	8018680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018914:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	b923      	cbnz	r3, 8018924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801891a:	4b04      	ldr	r3, [pc, #16]	; (801892c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801891c:	6818      	ldr	r0, [r3, #0]
 801891e:	6803      	ldr	r3, [r0, #0]
 8018920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018922:	4798      	blx	r3
 8018924:	b05b      	add	sp, #364	; 0x16c
 8018926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801892a:	bf00      	nop
 801892c:	2005677c 	.word	0x2005677c

08018930 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8018930:	b570      	push	{r4, r5, r6, lr}
 8018932:	4604      	mov	r4, r0
 8018934:	2500      	movs	r5, #0
 8018936:	9804      	ldr	r0, [sp, #16]
 8018938:	7223      	strb	r3, [r4, #8]
 801893a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801893e:	8025      	strh	r5, [r4, #0]
 8018940:	6061      	str	r1, [r4, #4]
 8018942:	7263      	strb	r3, [r4, #9]
 8018944:	60e0      	str	r0, [r4, #12]
 8018946:	8222      	strh	r2, [r4, #16]
 8018948:	8265      	strh	r5, [r4, #18]
 801894a:	82a5      	strh	r5, [r4, #20]
 801894c:	82e5      	strh	r5, [r4, #22]
 801894e:	8325      	strh	r5, [r4, #24]
 8018950:	8365      	strh	r5, [r4, #26]
 8018952:	83a5      	strh	r5, [r4, #28]
 8018954:	77a5      	strb	r5, [r4, #30]
 8018956:	6803      	ldr	r3, [r0, #0]
 8018958:	695b      	ldr	r3, [r3, #20]
 801895a:	4798      	blx	r3
 801895c:	4606      	mov	r6, r0
 801895e:	b1f8      	cbz	r0, 80189a0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8018960:	68e0      	ldr	r0, [r4, #12]
 8018962:	4631      	mov	r1, r6
 8018964:	6803      	ldr	r3, [r0, #0]
 8018966:	68db      	ldr	r3, [r3, #12]
 8018968:	4798      	blx	r3
 801896a:	7b43      	ldrb	r3, [r0, #13]
 801896c:	7a82      	ldrb	r2, [r0, #10]
 801896e:	4605      	mov	r5, r0
 8018970:	005b      	lsls	r3, r3, #1
 8018972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018976:	4313      	orrs	r3, r2
 8018978:	83a3      	strh	r3, [r4, #28]
 801897a:	7a63      	ldrb	r3, [r4, #9]
 801897c:	2b04      	cmp	r3, #4
 801897e:	d10f      	bne.n	80189a0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8018980:	68e0      	ldr	r0, [r4, #12]
 8018982:	462a      	mov	r2, r5
 8018984:	4631      	mov	r1, r6
 8018986:	6803      	ldr	r3, [r0, #0]
 8018988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801898a:	4798      	blx	r3
 801898c:	7b6b      	ldrb	r3, [r5, #13]
 801898e:	005b      	lsls	r3, r3, #1
 8018990:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018994:	7aab      	ldrb	r3, [r5, #10]
 8018996:	4313      	orrs	r3, r2
 8018998:	4418      	add	r0, r3
 801899a:	8ba3      	ldrh	r3, [r4, #28]
 801899c:	4418      	add	r0, r3
 801899e:	83a0      	strh	r0, [r4, #28]
 80189a0:	4620      	mov	r0, r4
 80189a2:	bd70      	pop	{r4, r5, r6, pc}

080189a4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80189a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189a8:	2400      	movs	r4, #0
 80189aa:	b085      	sub	sp, #20
 80189ac:	4681      	mov	r9, r0
 80189ae:	4688      	mov	r8, r1
 80189b0:	4692      	mov	sl, r2
 80189b2:	469b      	mov	fp, r3
 80189b4:	4627      	mov	r7, r4
 80189b6:	4625      	mov	r5, r4
 80189b8:	4626      	mov	r6, r4
 80189ba:	4554      	cmp	r4, sl
 80189bc:	da2a      	bge.n	8018a14 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80189be:	2300      	movs	r3, #0
 80189c0:	9303      	str	r3, [sp, #12]
 80189c2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80189c6:	429d      	cmp	r5, r3
 80189c8:	d004      	beq.n	80189d4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80189ca:	f242 030b 	movw	r3, #8203	; 0x200b
 80189ce:	429d      	cmp	r5, r3
 80189d0:	bf18      	it	ne
 80189d2:	462f      	movne	r7, r5
 80189d4:	ab03      	add	r3, sp, #12
 80189d6:	4642      	mov	r2, r8
 80189d8:	4659      	mov	r1, fp
 80189da:	4648      	mov	r0, r9
 80189dc:	f002 ff30 	bl	801b840 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80189e0:	4605      	mov	r5, r0
 80189e2:	b1b8      	cbz	r0, 8018a14 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80189e4:	280a      	cmp	r0, #10
 80189e6:	d015      	beq.n	8018a14 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80189e8:	9a03      	ldr	r2, [sp, #12]
 80189ea:	b18a      	cbz	r2, 8018a10 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80189ec:	7b50      	ldrb	r0, [r2, #13]
 80189ee:	4639      	mov	r1, r7
 80189f0:	7a93      	ldrb	r3, [r2, #10]
 80189f2:	0040      	lsls	r0, r0, #1
 80189f4:	8895      	ldrh	r5, [r2, #4]
 80189f6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80189fa:	4303      	orrs	r3, r0
 80189fc:	4640      	mov	r0, r8
 80189fe:	9301      	str	r3, [sp, #4]
 8018a00:	f8d8 3000 	ldr.w	r3, [r8]
 8018a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a06:	4798      	blx	r3
 8018a08:	9b01      	ldr	r3, [sp, #4]
 8018a0a:	4418      	add	r0, r3
 8018a0c:	4406      	add	r6, r0
 8018a0e:	b2b6      	uxth	r6, r6
 8018a10:	3401      	adds	r4, #1
 8018a12:	e7d2      	b.n	80189ba <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8018a14:	4630      	mov	r0, r6
 8018a16:	b005      	add	sp, #20
 8018a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018a1c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8018a1c:	2a02      	cmp	r2, #2
 8018a1e:	b530      	push	{r4, r5, lr}
 8018a20:	d011      	beq.n	8018a46 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8018a22:	2a03      	cmp	r2, #3
 8018a24:	d01c      	beq.n	8018a60 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8018a26:	2a01      	cmp	r2, #1
 8018a28:	d10c      	bne.n	8018a44 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018a2a:	888b      	ldrh	r3, [r1, #4]
 8018a2c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8018a30:	8801      	ldrh	r1, [r0, #0]
 8018a32:	1a9b      	subs	r3, r3, r2
 8018a34:	8844      	ldrh	r4, [r0, #2]
 8018a36:	1a5b      	subs	r3, r3, r1
 8018a38:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018a3c:	8004      	strh	r4, [r0, #0]
 8018a3e:	8043      	strh	r3, [r0, #2]
 8018a40:	8081      	strh	r1, [r0, #4]
 8018a42:	80c2      	strh	r2, [r0, #6]
 8018a44:	bd30      	pop	{r4, r5, pc}
 8018a46:	88cb      	ldrh	r3, [r1, #6]
 8018a48:	88c2      	ldrh	r2, [r0, #6]
 8018a4a:	1a9b      	subs	r3, r3, r2
 8018a4c:	8842      	ldrh	r2, [r0, #2]
 8018a4e:	1a9b      	subs	r3, r3, r2
 8018a50:	888a      	ldrh	r2, [r1, #4]
 8018a52:	8881      	ldrh	r1, [r0, #4]
 8018a54:	8043      	strh	r3, [r0, #2]
 8018a56:	1a52      	subs	r2, r2, r1
 8018a58:	8801      	ldrh	r1, [r0, #0]
 8018a5a:	1a52      	subs	r2, r2, r1
 8018a5c:	8002      	strh	r2, [r0, #0]
 8018a5e:	e7f1      	b.n	8018a44 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018a60:	88cb      	ldrh	r3, [r1, #6]
 8018a62:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018a66:	8841      	ldrh	r1, [r0, #2]
 8018a68:	1a9b      	subs	r3, r3, r2
 8018a6a:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018a6e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018a72:	1a5b      	subs	r3, r3, r1
 8018a74:	8045      	strh	r5, [r0, #2]
 8018a76:	8082      	strh	r2, [r0, #4]
 8018a78:	8003      	strh	r3, [r0, #0]
 8018a7a:	80c4      	strh	r4, [r0, #6]
 8018a7c:	e7e2      	b.n	8018a44 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08018a7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8018a7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a82:	b09f      	sub	sp, #124	; 0x7c
 8018a84:	9116      	str	r1, [sp, #88]	; 0x58
 8018a86:	9317      	str	r3, [sp, #92]	; 0x5c
 8018a88:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018a8a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018a8c:	8809      	ldrh	r1, [r1, #0]
 8018a8e:	889b      	ldrh	r3, [r3, #4]
 8018a90:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8018a94:	440b      	add	r3, r1
 8018a96:	9212      	str	r2, [sp, #72]	; 0x48
 8018a98:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8018a9c:	b21b      	sxth	r3, r3
 8018a9e:	9011      	str	r0, [sp, #68]	; 0x44
 8018aa0:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8018aa4:	9310      	str	r3, [sp, #64]	; 0x40
 8018aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8018aaa:	7a59      	ldrb	r1, [r3, #9]
 8018aac:	7a1b      	ldrb	r3, [r3, #8]
 8018aae:	9114      	str	r1, [sp, #80]	; 0x50
 8018ab0:	9315      	str	r3, [sp, #84]	; 0x54
 8018ab2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018ab4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018ab8:	2a00      	cmp	r2, #0
 8018aba:	d067      	beq.n	8018b8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8018abc:	f898 3010 	ldrb.w	r3, [r8, #16]
 8018ac0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8018ac2:	2b04      	cmp	r3, #4
 8018ac4:	bf14      	ite	ne
 8018ac6:	2301      	movne	r3, #1
 8018ac8:	2302      	moveq	r3, #2
 8018aca:	4413      	add	r3, r2
 8018acc:	f04f 0900 	mov.w	r9, #0
 8018ad0:	930f      	str	r3, [sp, #60]	; 0x3c
 8018ad2:	464c      	mov	r4, r9
 8018ad4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8018ad8:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8018adc:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8018ae0:	4293      	cmp	r3, r2
 8018ae2:	f280 808c 	bge.w	8018bfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8018ae6:	2300      	movs	r3, #0
 8018ae8:	931c      	str	r3, [sp, #112]	; 0x70
 8018aea:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018aee:	429c      	cmp	r4, r3
 8018af0:	d006      	beq.n	8018b00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8018af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018af4:	f242 020b 	movw	r2, #8203	; 0x200b
 8018af8:	4294      	cmp	r4, r2
 8018afa:	bf18      	it	ne
 8018afc:	4623      	movne	r3, r4
 8018afe:	930d      	str	r3, [sp, #52]	; 0x34
 8018b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b02:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8018b04:	f8d8 2000 	ldr.w	r2, [r8]
 8018b08:	428b      	cmp	r3, r1
 8018b0a:	db41      	blt.n	8018b90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8018b0c:	6813      	ldr	r3, [r2, #0]
 8018b0e:	4610      	mov	r0, r2
 8018b10:	695b      	ldr	r3, [r3, #20]
 8018b12:	4798      	blx	r3
 8018b14:	4604      	mov	r4, r0
 8018b16:	f8d8 0000 	ldr.w	r0, [r8]
 8018b1a:	aa1d      	add	r2, sp, #116	; 0x74
 8018b1c:	4621      	mov	r1, r4
 8018b1e:	6803      	ldr	r3, [r0, #0]
 8018b20:	689e      	ldr	r6, [r3, #8]
 8018b22:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018b26:	47b0      	blx	r6
 8018b28:	901c      	str	r0, [sp, #112]	; 0x70
 8018b2a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018b2e:	429c      	cmp	r4, r3
 8018b30:	f000 80ea 	beq.w	8018d08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018b34:	f242 030b 	movw	r3, #8203	; 0x200b
 8018b38:	429c      	cmp	r4, r3
 8018b3a:	f000 80e5 	beq.w	8018d08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018b3e:	2c00      	cmp	r4, #0
 8018b40:	f000 80f7 	beq.w	8018d32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018b44:	2c0a      	cmp	r4, #10
 8018b46:	d060      	beq.n	8018c0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018b48:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018b4a:	b36a      	cbz	r2, 8018ba8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8018b4c:	8894      	ldrh	r4, [r2, #4]
 8018b4e:	f1bb 0f00 	cmp.w	fp, #0
 8018b52:	d03b      	beq.n	8018bcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8018b54:	f892 900d 	ldrb.w	r9, [r2, #13]
 8018b58:	f1bb 0f01 	cmp.w	fp, #1
 8018b5c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8018b60:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8018b64:	f892 900a 	ldrb.w	r9, [r2, #10]
 8018b68:	ea49 0903 	orr.w	r9, r9, r3
 8018b6c:	d134      	bne.n	8018bd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8018b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018b70:	eba5 0509 	sub.w	r5, r5, r9
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d14f      	bne.n	8018c18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018b78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018b7a:	eb09 0305 	add.w	r3, r9, r5
 8018b7e:	4413      	add	r3, r2
 8018b80:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018b82:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018b86:	4293      	cmp	r3, r2
 8018b88:	da51      	bge.n	8018c2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8018b8a:	e038      	b.n	8018bfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8018b8c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018b8e:	e79d      	b.n	8018acc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8018b90:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018b94:	4659      	mov	r1, fp
 8018b96:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018b98:	9301      	str	r3, [sp, #4]
 8018b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8018b9c:	9300      	str	r3, [sp, #0]
 8018b9e:	ab1c      	add	r3, sp, #112	; 0x70
 8018ba0:	f002 fea6 	bl	801b8f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018ba4:	4604      	mov	r4, r0
 8018ba6:	e7c0      	b.n	8018b2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8018ba8:	f8d8 0000 	ldr.w	r0, [r8]
 8018bac:	6803      	ldr	r3, [r0, #0]
 8018bae:	691b      	ldr	r3, [r3, #16]
 8018bb0:	4798      	blx	r3
 8018bb2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018bb6:	4298      	cmp	r0, r3
 8018bb8:	f000 80a6 	beq.w	8018d08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018bbc:	f242 030b 	movw	r3, #8203	; 0x200b
 8018bc0:	4298      	cmp	r0, r3
 8018bc2:	f000 80a1 	beq.w	8018d08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018bc6:	f1bb 0f00 	cmp.w	fp, #0
 8018bca:	d100      	bne.n	8018bce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8018bcc:	444d      	add	r5, r9
 8018bce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018bd0:	2a00      	cmp	r2, #0
 8018bd2:	d1bf      	bne.n	8018b54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8018bd4:	4691      	mov	r9, r2
 8018bd6:	e097      	b.n	8018d08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018bd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	f000 80ab 	beq.w	8018d36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8018be0:	f1bb 0f00 	cmp.w	fp, #0
 8018be4:	d118      	bne.n	8018c18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018be6:	f8d8 0000 	ldr.w	r0, [r8]
 8018bea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018bec:	6803      	ldr	r3, [r0, #0]
 8018bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018bf0:	4798      	blx	r3
 8018bf2:	4405      	add	r5, r0
 8018bf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018bf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018bf8:	1aeb      	subs	r3, r5, r3
 8018bfa:	4293      	cmp	r3, r2
 8018bfc:	dd17      	ble.n	8018c2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8018bfe:	2c00      	cmp	r4, #0
 8018c00:	f000 8097 	beq.w	8018d32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018c04:	2c0a      	cmp	r4, #10
 8018c06:	f040 8085 	bne.w	8018d14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8018c0a:	240a      	movs	r4, #10
 8018c0c:	fab4 f084 	clz	r0, r4
 8018c10:	0940      	lsrs	r0, r0, #5
 8018c12:	b01f      	add	sp, #124	; 0x7c
 8018c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c18:	f8d8 0000 	ldr.w	r0, [r8]
 8018c1c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018c1e:	6803      	ldr	r3, [r0, #0]
 8018c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c22:	4798      	blx	r3
 8018c24:	f1bb 0f01 	cmp.w	fp, #1
 8018c28:	eba5 0500 	sub.w	r5, r5, r0
 8018c2c:	d0a4      	beq.n	8018b78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8018c2e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018c30:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018c32:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8018c36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018c3a:	7b43      	ldrb	r3, [r0, #13]
 8018c3c:	4429      	add	r1, r5
 8018c3e:	015b      	lsls	r3, r3, #5
 8018c40:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018c44:	7983      	ldrb	r3, [r0, #6]
 8018c46:	4313      	orrs	r3, r2
 8018c48:	440b      	add	r3, r1
 8018c4a:	42b3      	cmp	r3, r6
 8018c4c:	db5c      	blt.n	8018d08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018c4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018c50:	4299      	cmp	r1, r3
 8018c52:	da59      	bge.n	8018d08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018c54:	f8d8 0000 	ldr.w	r0, [r8]
 8018c58:	42ae      	cmp	r6, r5
 8018c5a:	6803      	ldr	r3, [r0, #0]
 8018c5c:	bfcc      	ite	gt
 8018c5e:	1b76      	subgt	r6, r6, r5
 8018c60:	2600      	movle	r6, #0
 8018c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c64:	bfc8      	it	gt
 8018c66:	b2b6      	uxthgt	r6, r6
 8018c68:	4798      	blx	r3
 8018c6a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018c6c:	7b5a      	ldrb	r2, [r3, #13]
 8018c6e:	00d1      	lsls	r1, r2, #3
 8018c70:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8018c74:	7a19      	ldrb	r1, [r3, #8]
 8018c76:	4339      	orrs	r1, r7
 8018c78:	0657      	lsls	r7, r2, #25
 8018c7a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8018c7c:	bf48      	it	mi
 8018c7e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8018c82:	4407      	add	r7, r0
 8018c84:	bf48      	it	mi
 8018c86:	b209      	sxthmi	r1, r1
 8018c88:	1a7f      	subs	r7, r7, r1
 8018c8a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018c8c:	b2bf      	uxth	r7, r7
 8018c8e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8018c92:	fa0f fa87 	sxth.w	sl, r7
 8018c96:	4551      	cmp	r1, sl
 8018c98:	dd3a      	ble.n	8018d10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8018c9a:	0112      	lsls	r2, r2, #4
 8018c9c:	79d8      	ldrb	r0, [r3, #7]
 8018c9e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018ca2:	4302      	orrs	r2, r0
 8018ca4:	4492      	add	sl, r2
 8018ca6:	4551      	cmp	r1, sl
 8018ca8:	dc2e      	bgt.n	8018d08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018caa:	1bcf      	subs	r7, r1, r7
 8018cac:	468a      	mov	sl, r1
 8018cae:	b2bf      	uxth	r7, r7
 8018cb0:	9319      	str	r3, [sp, #100]	; 0x64
 8018cb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018cb4:	f8d8 0000 	ldr.w	r0, [r8]
 8018cb8:	681a      	ldr	r2, [r3, #0]
 8018cba:	6801      	ldr	r1, [r0, #0]
 8018cbc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8018cbe:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018cc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8018cc2:	9218      	str	r2, [sp, #96]	; 0x60
 8018cc4:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8018cc6:	4788      	blx	r1
 8018cc8:	f898 1006 	ldrb.w	r1, [r8, #6]
 8018ccc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018cce:	910b      	str	r1, [sp, #44]	; 0x2c
 8018cd0:	f898 100e 	ldrb.w	r1, [r8, #14]
 8018cd4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018cd6:	910a      	str	r1, [sp, #40]	; 0x28
 8018cd8:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8018cdc:	9109      	str	r1, [sp, #36]	; 0x24
 8018cde:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8018ce2:	9305      	str	r3, [sp, #20]
 8018ce4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018ce6:	9206      	str	r2, [sp, #24]
 8018ce8:	e9cd a601 	strd	sl, r6, [sp, #4]
 8018cec:	442e      	add	r6, r5
 8018cee:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8018cf2:	b236      	sxth	r6, r6
 8018cf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018cf6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018cfa:	9600      	str	r6, [sp, #0]
 8018cfc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018cfe:	681a      	ldr	r2, [r3, #0]
 8018d00:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018d02:	685b      	ldr	r3, [r3, #4]
 8018d04:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018d06:	47b0      	blx	r6
 8018d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018d0a:	3301      	adds	r3, #1
 8018d0c:	930e      	str	r3, [sp, #56]	; 0x38
 8018d0e:	e6e5      	b.n	8018adc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8018d10:	2700      	movs	r7, #0
 8018d12:	e7cd      	b.n	8018cb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8018d14:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018d16:	3501      	adds	r5, #1
 8018d18:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018d1a:	429d      	cmp	r5, r3
 8018d1c:	f6bf af76 	bge.w	8018c0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018d20:	4659      	mov	r1, fp
 8018d22:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018d24:	f7f0 f886 	bl	8008e34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018d28:	4604      	mov	r4, r0
 8018d2a:	b110      	cbz	r0, 8018d32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018d2c:	280a      	cmp	r0, #10
 8018d2e:	d1f2      	bne.n	8018d16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8018d30:	e76b      	b.n	8018c0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018d32:	2400      	movs	r4, #0
 8018d34:	e76a      	b.n	8018c0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018d36:	f1bb 0f00 	cmp.w	fp, #0
 8018d3a:	f43f af5b 	beq.w	8018bf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018d3e:	e776      	b.n	8018c2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08018d40 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018d40:	b530      	push	{r4, r5, lr}
 8018d42:	8a44      	ldrh	r4, [r0, #18]
 8018d44:	8ac5      	ldrh	r5, [r0, #22]
 8018d46:	82c3      	strh	r3, [r0, #22]
 8018d48:	442c      	add	r4, r5
 8018d4a:	1ae4      	subs	r4, r4, r3
 8018d4c:	8b03      	ldrh	r3, [r0, #24]
 8018d4e:	8244      	strh	r4, [r0, #18]
 8018d50:	8a84      	ldrh	r4, [r0, #20]
 8018d52:	4422      	add	r2, r4
 8018d54:	440c      	add	r4, r1
 8018d56:	1a59      	subs	r1, r3, r1
 8018d58:	8342      	strh	r2, [r0, #26]
 8018d5a:	8284      	strh	r4, [r0, #20]
 8018d5c:	8301      	strh	r1, [r0, #24]
 8018d5e:	bd30      	pop	{r4, r5, pc}

08018d60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8018d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d64:	7a43      	ldrb	r3, [r0, #9]
 8018d66:	b087      	sub	sp, #28
 8018d68:	4604      	mov	r4, r0
 8018d6a:	460f      	mov	r7, r1
 8018d6c:	1eda      	subs	r2, r3, #3
 8018d6e:	b2d2      	uxtb	r2, r2
 8018d70:	2900      	cmp	r1, #0
 8018d72:	d036      	beq.n	8018de2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8018d74:	2a01      	cmp	r2, #1
 8018d76:	d932      	bls.n	8018dde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8018d78:	1e58      	subs	r0, r3, #1
 8018d7a:	f1d0 0b00 	rsbs	fp, r0, #0
 8018d7e:	eb4b 0b00 	adc.w	fp, fp, r0
 8018d82:	1e99      	subs	r1, r3, #2
 8018d84:	424b      	negs	r3, r1
 8018d86:	414b      	adcs	r3, r1
 8018d88:	9303      	str	r3, [sp, #12]
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8018d90:	2500      	movs	r5, #0
 8018d92:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8018d96:	46a9      	mov	r9, r5
 8018d98:	8265      	strh	r5, [r4, #18]
 8018d9a:	82a5      	strh	r5, [r4, #20]
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	9305      	str	r3, [sp, #20]
 8018da0:	8823      	ldrh	r3, [r4, #0]
 8018da2:	2b20      	cmp	r3, #32
 8018da4:	d02b      	beq.n	8018dfe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8018da6:	eba3 020a 	sub.w	r2, r3, sl
 8018daa:	4256      	negs	r6, r2
 8018dac:	4156      	adcs	r6, r2
 8018dae:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018db2:	4293      	cmp	r3, r2
 8018db4:	d004      	beq.n	8018dc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8018db6:	4553      	cmp	r3, sl
 8018db8:	bf16      	itet	ne
 8018dba:	4699      	movne	r9, r3
 8018dbc:	2601      	moveq	r6, #1
 8018dbe:	2600      	movne	r6, #0
 8018dc0:	ab05      	add	r3, sp, #20
 8018dc2:	68e2      	ldr	r2, [r4, #12]
 8018dc4:	7a21      	ldrb	r1, [r4, #8]
 8018dc6:	6860      	ldr	r0, [r4, #4]
 8018dc8:	f002 fd3a 	bl	801b840 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018dcc:	8020      	strh	r0, [r4, #0]
 8018dce:	b9c8      	cbnz	r0, 8018e04 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8018dd0:	8b22      	ldrh	r2, [r4, #24]
 8018dd2:	2300      	movs	r3, #0
 8018dd4:	4611      	mov	r1, r2
 8018dd6:	4620      	mov	r0, r4
 8018dd8:	f7ff ffb2 	bl	8018d40 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018ddc:	e066      	b.n	8018eac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8018dde:	468b      	mov	fp, r1
 8018de0:	e7cf      	b.n	8018d82 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8018de2:	3b01      	subs	r3, #1
 8018de4:	2a01      	cmp	r2, #1
 8018de6:	9103      	str	r1, [sp, #12]
 8018de8:	468b      	mov	fp, r1
 8018dea:	bf8c      	ite	hi
 8018dec:	2200      	movhi	r2, #0
 8018dee:	2201      	movls	r2, #1
 8018df0:	2b01      	cmp	r3, #1
 8018df2:	9202      	str	r2, [sp, #8]
 8018df4:	bf8c      	ite	hi
 8018df6:	2300      	movhi	r3, #0
 8018df8:	2301      	movls	r3, #1
 8018dfa:	9301      	str	r3, [sp, #4]
 8018dfc:	e7c8      	b.n	8018d90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8018dfe:	4699      	mov	r9, r3
 8018e00:	2601      	movs	r6, #1
 8018e02:	e7dd      	b.n	8018dc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8018e04:	8ae3      	ldrh	r3, [r4, #22]
 8018e06:	280a      	cmp	r0, #10
 8018e08:	f103 0301 	add.w	r3, r3, #1
 8018e0c:	82e3      	strh	r3, [r4, #22]
 8018e0e:	d0df      	beq.n	8018dd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8018e10:	9a05      	ldr	r2, [sp, #20]
 8018e12:	bb42      	cbnz	r2, 8018e66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8018e14:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018e18:	4298      	cmp	r0, r3
 8018e1a:	d001      	beq.n	8018e20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018e1c:	4550      	cmp	r0, sl
 8018e1e:	d1bd      	bne.n	8018d9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018e20:	8823      	ldrh	r3, [r4, #0]
 8018e22:	8b21      	ldrh	r1, [r4, #24]
 8018e24:	2b20      	cmp	r3, #32
 8018e26:	d001      	beq.n	8018e2c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8018e28:	4553      	cmp	r3, sl
 8018e2a:	d131      	bne.n	8018e90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8018e2c:	2e00      	cmp	r6, #0
 8018e2e:	bf0a      	itet	eq
 8018e30:	460d      	moveq	r5, r1
 8018e32:	4630      	movne	r0, r6
 8018e34:	2001      	moveq	r0, #1
 8018e36:	440a      	add	r2, r1
 8018e38:	8aa3      	ldrh	r3, [r4, #20]
 8018e3a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8018e3e:	b292      	uxth	r2, r2
 8018e40:	8322      	strh	r2, [r4, #24]
 8018e42:	4413      	add	r3, r2
 8018e44:	2f00      	cmp	r7, #0
 8018e46:	d03a      	beq.n	8018ebe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8018e48:	f1bb 0f00 	cmp.w	fp, #0
 8018e4c:	d102      	bne.n	8018e54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8018e4e:	9903      	ldr	r1, [sp, #12]
 8018e50:	b301      	cbz	r1, 8018e94 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018e52:	b1f8      	cbz	r0, 8018e94 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018e54:	8ba1      	ldrh	r1, [r4, #28]
 8018e56:	4419      	add	r1, r3
 8018e58:	458c      	cmp	ip, r1
 8018e5a:	da2a      	bge.n	8018eb2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018e5c:	8a61      	ldrh	r1, [r4, #18]
 8018e5e:	b341      	cbz	r1, 8018eb2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018e60:	4563      	cmp	r3, ip
 8018e62:	dd9b      	ble.n	8018d9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018e64:	e01c      	b.n	8018ea0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8018e66:	8893      	ldrh	r3, [r2, #4]
 8018e68:	4649      	mov	r1, r9
 8018e6a:	8023      	strh	r3, [r4, #0]
 8018e6c:	f892 800d 	ldrb.w	r8, [r2, #13]
 8018e70:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8018e74:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8018e78:	f892 800a 	ldrb.w	r8, [r2, #10]
 8018e7c:	ea48 0800 	orr.w	r8, r8, r0
 8018e80:	68e0      	ldr	r0, [r4, #12]
 8018e82:	6803      	ldr	r3, [r0, #0]
 8018e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e86:	4798      	blx	r3
 8018e88:	eb08 0200 	add.w	r2, r8, r0
 8018e8c:	b292      	uxth	r2, r2
 8018e8e:	e7c7      	b.n	8018e20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018e90:	2000      	movs	r0, #0
 8018e92:	e7d0      	b.n	8018e36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8018e94:	4563      	cmp	r3, ip
 8018e96:	dd81      	ble.n	8018d9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018e98:	8a63      	ldrh	r3, [r4, #18]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	f43f af7e 	beq.w	8018d9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018ea0:	2301      	movs	r3, #1
 8018ea2:	8ba2      	ldrh	r2, [r4, #28]
 8018ea4:	77a3      	strb	r3, [r4, #30]
 8018ea6:	8b63      	ldrh	r3, [r4, #26]
 8018ea8:	4413      	add	r3, r2
 8018eaa:	8363      	strh	r3, [r4, #26]
 8018eac:	b007      	add	sp, #28
 8018eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eb2:	2300      	movs	r3, #0
 8018eb4:	4611      	mov	r1, r2
 8018eb6:	4620      	mov	r0, r4
 8018eb8:	f7ff ff42 	bl	8018d40 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018ebc:	e76e      	b.n	8018d9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018ebe:	4563      	cmp	r3, ip
 8018ec0:	dd14      	ble.n	8018eec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8018ec2:	9b02      	ldr	r3, [sp, #8]
 8018ec4:	b113      	cbz	r3, 8018ecc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8018ec6:	2301      	movs	r3, #1
 8018ec8:	460a      	mov	r2, r1
 8018eca:	e783      	b.n	8018dd4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8018ecc:	9b01      	ldr	r3, [sp, #4]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	f43f af64 	beq.w	8018d9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018ed4:	2800      	cmp	r0, #0
 8018ed6:	f47f af61 	bne.w	8018d9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018eda:	b116      	cbz	r6, 8018ee2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8018edc:	2301      	movs	r3, #1
 8018ede:	462a      	mov	r2, r5
 8018ee0:	e779      	b.n	8018dd6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8018ee2:	8a63      	ldrh	r3, [r4, #18]
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	f43f af59 	beq.w	8018d9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018eea:	e7df      	b.n	8018eac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8018eec:	2800      	cmp	r0, #0
 8018eee:	f47f af55 	bne.w	8018d9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018ef2:	2e00      	cmp	r6, #0
 8018ef4:	f43f af52 	beq.w	8018d9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018ef8:	2301      	movs	r3, #1
 8018efa:	462a      	mov	r2, r5
 8018efc:	e7db      	b.n	8018eb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08018efe <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018efe:	b530      	push	{r4, r5, lr}
 8018f00:	4605      	mov	r5, r0
 8018f02:	b08b      	sub	sp, #44	; 0x2c
 8018f04:	b191      	cbz	r1, 8018f2c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8018f06:	2401      	movs	r4, #1
 8018f08:	e9cd 3100 	strd	r3, r1, [sp]
 8018f0c:	4613      	mov	r3, r2
 8018f0e:	4601      	mov	r1, r0
 8018f10:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8018f14:	a802      	add	r0, sp, #8
 8018f16:	f7ff fd0b 	bl	8018930 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018f1a:	2100      	movs	r1, #0
 8018f1c:	a802      	add	r0, sp, #8
 8018f1e:	f7ff ff1f 	bl	8018d60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018f22:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018f26:	b163      	cbz	r3, 8018f42 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8018f28:	3401      	adds	r4, #1
 8018f2a:	e7f6      	b.n	8018f1a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8018f2c:	2401      	movs	r4, #1
 8018f2e:	f002 fd7f 	bl	801ba30 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018f32:	280a      	cmp	r0, #10
 8018f34:	4628      	mov	r0, r5
 8018f36:	bf08      	it	eq
 8018f38:	3401      	addeq	r4, #1
 8018f3a:	f002 fd79 	bl	801ba30 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018f3e:	2800      	cmp	r0, #0
 8018f40:	d1f7      	bne.n	8018f32 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8018f42:	b2a0      	uxth	r0, r4
 8018f44:	b00b      	add	sp, #44	; 0x2c
 8018f46:	bd30      	pop	{r4, r5, pc}

08018f48 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f4c:	b0df      	sub	sp, #380	; 0x17c
 8018f4e:	4689      	mov	r9, r1
 8018f50:	461c      	mov	r4, r3
 8018f52:	f8dd a1a0 	ldr.w	sl, [sp, #416]	; 0x1a0
 8018f56:	900a      	str	r0, [sp, #40]	; 0x28
 8018f58:	f1ba 0f00 	cmp.w	sl, #0
 8018f5c:	f000 80b1 	beq.w	80190c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	f000 80ad 	beq.w	80190c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018f68:	7ba3      	ldrb	r3, [r4, #14]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	f000 80a9 	beq.w	80190c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018f70:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8018f74:	6810      	ldr	r0, [r2, #0]
 8018f76:	6851      	ldr	r1, [r2, #4]
 8018f78:	2500      	movs	r5, #0
 8018f7a:	4643      	mov	r3, r8
 8018f7c:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8018f80:	950f      	str	r5, [sp, #60]	; 0x3c
 8018f82:	af19      	add	r7, sp, #100	; 0x64
 8018f84:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8018f88:	79a2      	ldrb	r2, [r4, #6]
 8018f8a:	c303      	stmia	r3!, {r0, r1}
 8018f8c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8018f90:	a90f      	add	r1, sp, #60	; 0x3c
 8018f92:	4640      	mov	r0, r8
 8018f94:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8018f98:	f7ff fd40 	bl	8018a1c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018f9c:	a90f      	add	r1, sp, #60	; 0x3c
 8018f9e:	79a2      	ldrb	r2, [r4, #6]
 8018fa0:	4608      	mov	r0, r1
 8018fa2:	f7ff fd3b 	bl	8018a1c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018fa6:	4638      	mov	r0, r7
 8018fa8:	f002 f901 	bl	801b1ae <_ZN8touchgfx12TextProviderC1Ev>
 8018fac:	6820      	ldr	r0, [r4, #0]
 8018fae:	6803      	ldr	r3, [r0, #0]
 8018fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018fb2:	4798      	blx	r3
 8018fb4:	4606      	mov	r6, r0
 8018fb6:	6820      	ldr	r0, [r4, #0]
 8018fb8:	6803      	ldr	r3, [r0, #0]
 8018fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018fbc:	4798      	blx	r3
 8018fbe:	4633      	mov	r3, r6
 8018fc0:	9000      	str	r0, [sp, #0]
 8018fc2:	4651      	mov	r1, sl
 8018fc4:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8018fc6:	4638      	mov	r0, r7
 8018fc8:	f002 f93e 	bl	801b248 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018fcc:	7923      	ldrb	r3, [r4, #4]
 8018fce:	6820      	ldr	r0, [r4, #0]
 8018fd0:	9308      	str	r3, [sp, #32]
 8018fd2:	6803      	ldr	r3, [r0, #0]
 8018fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018fd6:	4798      	blx	r3
 8018fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018fdc:	181e      	adds	r6, r3, r0
 8018fde:	42ae      	cmp	r6, r5
 8018fe0:	dd06      	ble.n	8018ff0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8018fe2:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8018fe6:	4282      	cmp	r2, r0
 8018fe8:	bfa4      	itt	ge
 8018fea:	189d      	addge	r5, r3, r2
 8018fec:	fb95 f5f6 	sdivge	r5, r5, r6
 8018ff0:	a830      	add	r0, sp, #192	; 0xc0
 8018ff2:	f002 f8dc 	bl	801b1ae <_ZN8touchgfx12TextProviderC1Ev>
 8018ff6:	7c23      	ldrb	r3, [r4, #16]
 8018ff8:	b17b      	cbz	r3, 801901a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8018ffa:	6820      	ldr	r0, [r4, #0]
 8018ffc:	6803      	ldr	r3, [r0, #0]
 8018ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019000:	4798      	blx	r3
 8019002:	4683      	mov	fp, r0
 8019004:	6820      	ldr	r0, [r4, #0]
 8019006:	6803      	ldr	r3, [r0, #0]
 8019008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801900a:	4798      	blx	r3
 801900c:	465b      	mov	r3, fp
 801900e:	9000      	str	r0, [sp, #0]
 8019010:	4651      	mov	r1, sl
 8019012:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8019014:	a830      	add	r0, sp, #192	; 0xc0
 8019016:	f002 f917 	bl	801b248 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801901a:	7c21      	ldrb	r1, [r4, #16]
 801901c:	a811      	add	r0, sp, #68	; 0x44
 801901e:	7963      	ldrb	r3, [r4, #5]
 8019020:	9101      	str	r1, [sp, #4]
 8019022:	6821      	ldr	r1, [r4, #0]
 8019024:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8019028:	9100      	str	r1, [sp, #0]
 801902a:	a930      	add	r1, sp, #192	; 0xc0
 801902c:	f7ff fc80 	bl	8018930 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019030:	7c23      	ldrb	r3, [r4, #16]
 8019032:	b9bb      	cbnz	r3, 8019064 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11c>
 8019034:	fa1f fa86 	uxth.w	sl, r6
 8019038:	2d00      	cmp	r5, #0
 801903a:	dd45      	ble.n	80190c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801903c:	4638      	mov	r0, r7
 801903e:	f002 fcf7 	bl	801ba30 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019042:	2800      	cmp	r0, #0
 8019044:	d03d      	beq.n	80190c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8019046:	280a      	cmp	r0, #10
 8019048:	d1f6      	bne.n	8019038 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 801904a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801904e:	3d01      	subs	r5, #1
 8019050:	4453      	add	r3, sl
 8019052:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019056:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801905a:	eba3 030a 	sub.w	r3, r3, sl
 801905e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8019062:	e7e9      	b.n	8019038 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 8019064:	0073      	lsls	r3, r6, #1
 8019066:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801906a:	fa1f fa86 	uxth.w	sl, r6
 801906e:	9309      	str	r3, [sp, #36]	; 0x24
 8019070:	2d00      	cmp	r5, #0
 8019072:	dd29      	ble.n	80190c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019074:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8019078:	a811      	add	r0, sp, #68	; 0x44
 801907a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801907c:	428b      	cmp	r3, r1
 801907e:	bfd4      	ite	le
 8019080:	2100      	movle	r1, #0
 8019082:	2101      	movgt	r1, #1
 8019084:	f7ff fe6c 	bl	8018d60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019088:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801908c:	3b01      	subs	r3, #1
 801908e:	b29b      	uxth	r3, r3
 8019090:	455b      	cmp	r3, fp
 8019092:	930b      	str	r3, [sp, #44]	; 0x2c
 8019094:	d005      	beq.n	80190a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15a>
 8019096:	7961      	ldrb	r1, [r4, #5]
 8019098:	4638      	mov	r0, r7
 801909a:	f7ef fecb 	bl	8008e34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801909e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80190a0:	e7f4      	b.n	801908c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 80190a2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80190a6:	3d01      	subs	r5, #1
 80190a8:	4453      	add	r3, sl
 80190aa:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80190ae:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80190b2:	eba3 030a 	sub.w	r3, r3, sl
 80190b6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80190ba:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d1d6      	bne.n	8019070 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x128>
 80190c2:	b05f      	add	sp, #380	; 0x17c
 80190c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190c8:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 80190cc:	ad47      	add	r5, sp, #284	; 0x11c
 80190ce:	f04f 0b00 	mov.w	fp, #0
 80190d2:	7c23      	ldrb	r3, [r4, #16]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d067      	beq.n	80191a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 80190d8:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80190dc:	a811      	add	r0, sp, #68	; 0x44
 80190de:	458a      	cmp	sl, r1
 80190e0:	bfd4      	ite	le
 80190e2:	2100      	movle	r1, #0
 80190e4:	2101      	movgt	r1, #1
 80190e6:	f7ff fe3b 	bl	8018d60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80190ea:	9b08      	ldr	r3, [sp, #32]
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d056      	beq.n	801919e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80190f0:	7c23      	ldrb	r3, [r4, #16]
 80190f2:	225c      	movs	r2, #92	; 0x5c
 80190f4:	4639      	mov	r1, r7
 80190f6:	4628      	mov	r0, r5
 80190f8:	9309      	str	r3, [sp, #36]	; 0x24
 80190fa:	f00d fcf7 	bl	8026aec <memcpy>
 80190fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019100:	2b00      	cmp	r3, #0
 8019102:	d059      	beq.n	80191b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8019104:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8019108:	7922      	ldrb	r2, [r4, #4]
 801910a:	2a01      	cmp	r2, #1
 801910c:	d13d      	bne.n	801918a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801910e:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8019112:	1ac0      	subs	r0, r0, r3
 8019114:	2302      	movs	r3, #2
 8019116:	fb90 f0f3 	sdiv	r0, r0, r3
 801911a:	b200      	sxth	r0, r0
 801911c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8019120:	4418      	add	r0, r3
 8019122:	7c23      	ldrb	r3, [r4, #16]
 8019124:	f8ad 011c 	strh.w	r0, [sp, #284]	; 0x11c
 8019128:	2b00      	cmp	r3, #0
 801912a:	d03a      	beq.n	80191a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801912c:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8019130:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8019134:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8019138:	9500      	str	r5, [sp, #0]
 801913a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801913c:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8019140:	e9cd b703 	strd	fp, r7, [sp, #12]
 8019144:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8019148:	464a      	mov	r2, r9
 801914a:	2100      	movs	r1, #0
 801914c:	f7ff fc97 	bl	8018a7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8019150:	2800      	cmp	r0, #0
 8019152:	d1b6      	bne.n	80190c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8019154:	b2b2      	uxth	r2, r6
 8019156:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801915a:	4611      	mov	r1, r2
 801915c:	4413      	add	r3, r2
 801915e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8019162:	b21b      	sxth	r3, r3
 8019164:	1a52      	subs	r2, r2, r1
 8019166:	7c21      	ldrb	r1, [r4, #16]
 8019168:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801916c:	b212      	sxth	r2, r2
 801916e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8019172:	b109      	cbz	r1, 8019178 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 8019174:	42b2      	cmp	r2, r6
 8019176:	dba4      	blt.n	80190c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8019178:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801917c:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8019180:	440a      	add	r2, r1
 8019182:	b212      	sxth	r2, r2
 8019184:	4293      	cmp	r3, r2
 8019186:	dda4      	ble.n	80190d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 8019188:	e79b      	b.n	80190c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801918a:	2a02      	cmp	r2, #2
 801918c:	d105      	bne.n	801919a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801918e:	7be2      	ldrb	r2, [r4, #15]
 8019190:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8019194:	1a80      	subs	r0, r0, r2
 8019196:	1ac0      	subs	r0, r0, r3
 8019198:	e7bf      	b.n	801911a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d2>
 801919a:	2000      	movs	r0, #0
 801919c:	e7be      	b.n	801911c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801919e:	7be0      	ldrb	r0, [r4, #15]
 80191a0:	e7bc      	b.n	801911c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 80191a2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80191a6:	e7c3      	b.n	8019130 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 80191a8:	9b08      	ldr	r3, [sp, #32]
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d0f7      	beq.n	801919e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80191ae:	225c      	movs	r2, #92	; 0x5c
 80191b0:	4639      	mov	r1, r7
 80191b2:	4628      	mov	r0, r5
 80191b4:	f00d fc9a 	bl	8026aec <memcpy>
 80191b8:	2300      	movs	r3, #0
 80191ba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80191be:	6821      	ldr	r1, [r4, #0]
 80191c0:	4628      	mov	r0, r5
 80191c2:	f7ff fbef 	bl	80189a4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80191c6:	b203      	sxth	r3, r0
 80191c8:	e79e      	b.n	8019108 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>

080191ca <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80191ca:	2b02      	cmp	r3, #2
 80191cc:	b510      	push	{r4, lr}
 80191ce:	f9b0 4000 	ldrsh.w	r4, [r0]
 80191d2:	d00b      	beq.n	80191ec <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 80191d4:	2b03      	cmp	r3, #3
 80191d6:	d00e      	beq.n	80191f6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 80191d8:	2b01      	cmp	r3, #1
 80191da:	d001      	beq.n	80191e0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 80191dc:	1860      	adds	r0, r4, r1
 80191de:	bd10      	pop	{r4, pc}
 80191e0:	8880      	ldrh	r0, [r0, #4]
 80191e2:	4420      	add	r0, r4
 80191e4:	b200      	sxth	r0, r0
 80191e6:	1a80      	subs	r0, r0, r2
 80191e8:	3801      	subs	r0, #1
 80191ea:	e7f8      	b.n	80191de <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 80191ec:	8880      	ldrh	r0, [r0, #4]
 80191ee:	4420      	add	r0, r4
 80191f0:	b200      	sxth	r0, r0
 80191f2:	1a40      	subs	r0, r0, r1
 80191f4:	e7f8      	b.n	80191e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80191f6:	18a0      	adds	r0, r4, r2
 80191f8:	e7f1      	b.n	80191de <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080191fa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80191fa:	2b02      	cmp	r3, #2
 80191fc:	b510      	push	{r4, lr}
 80191fe:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8019202:	d006      	beq.n	8019212 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8019204:	2b03      	cmp	r3, #3
 8019206:	d00a      	beq.n	801921e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8019208:	2b01      	cmp	r3, #1
 801920a:	bf14      	ite	ne
 801920c:	18a0      	addne	r0, r4, r2
 801920e:	1860      	addeq	r0, r4, r1
 8019210:	bd10      	pop	{r4, pc}
 8019212:	88c0      	ldrh	r0, [r0, #6]
 8019214:	4420      	add	r0, r4
 8019216:	b200      	sxth	r0, r0
 8019218:	1a80      	subs	r0, r0, r2
 801921a:	3801      	subs	r0, #1
 801921c:	e7f8      	b.n	8019210 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801921e:	88c0      	ldrh	r0, [r0, #6]
 8019220:	4420      	add	r0, r4
 8019222:	b200      	sxth	r0, r0
 8019224:	1a40      	subs	r0, r0, r1
 8019226:	e7f8      	b.n	801921a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

08019228 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8019228:	4b01      	ldr	r3, [pc, #4]	; (8019230 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801922a:	2200      	movs	r2, #0
 801922c:	601a      	str	r2, [r3, #0]
 801922e:	4770      	bx	lr
 8019230:	200567a4 	.word	0x200567a4

08019234 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8019234:	4603      	mov	r3, r0
 8019236:	b1c8      	cbz	r0, 801926c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8019238:	0c02      	lsrs	r2, r0, #16
 801923a:	0412      	lsls	r2, r2, #16
 801923c:	b9a2      	cbnz	r2, 8019268 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801923e:	0403      	lsls	r3, r0, #16
 8019240:	2010      	movs	r0, #16
 8019242:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019246:	bf04      	itt	eq
 8019248:	021b      	lsleq	r3, r3, #8
 801924a:	3008      	addeq	r0, #8
 801924c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019250:	bf04      	itt	eq
 8019252:	011b      	lsleq	r3, r3, #4
 8019254:	3004      	addeq	r0, #4
 8019256:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801925a:	bf04      	itt	eq
 801925c:	009b      	lsleq	r3, r3, #2
 801925e:	3002      	addeq	r0, #2
 8019260:	2b00      	cmp	r3, #0
 8019262:	db04      	blt.n	801926e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8019264:	3001      	adds	r0, #1
 8019266:	4770      	bx	lr
 8019268:	2000      	movs	r0, #0
 801926a:	e7ea      	b.n	8019242 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801926c:	2020      	movs	r0, #32
 801926e:	4770      	bx	lr

08019270 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8019270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019274:	b087      	sub	sp, #28
 8019276:	4681      	mov	r9, r0
 8019278:	4698      	mov	r8, r3
 801927a:	4610      	mov	r0, r2
 801927c:	460d      	mov	r5, r1
 801927e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8019282:	b981      	cbnz	r1, 80192a6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8019284:	b14b      	cbz	r3, 801929a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8019286:	460b      	mov	r3, r1
 8019288:	464a      	mov	r2, r9
 801928a:	4641      	mov	r1, r8
 801928c:	e9cd 4700 	strd	r4, r7, [sp]
 8019290:	f7ff ffee 	bl	8019270 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019294:	b007      	add	sp, #28
 8019296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801929a:	f04f 33ff 	mov.w	r3, #4294967295
 801929e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80192a2:	603b      	str	r3, [r7, #0]
 80192a4:	e7f6      	b.n	8019294 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80192a6:	fa32 fa01 	lsrs.w	sl, r2, r1
 80192aa:	d107      	bne.n	80192bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 80192ac:	fb09 f602 	mul.w	r6, r9, r2
 80192b0:	fbb6 f0f4 	udiv	r0, r6, r4
 80192b4:	fb04 6610 	mls	r6, r4, r0, r6
 80192b8:	603e      	str	r6, [r7, #0]
 80192ba:	e7eb      	b.n	8019294 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80192bc:	2601      	movs	r6, #1
 80192be:	fa09 fb01 	lsl.w	fp, r9, r1
 80192c2:	408e      	lsls	r6, r1
 80192c4:	fbbb f3f4 	udiv	r3, fp, r4
 80192c8:	3e01      	subs	r6, #1
 80192ca:	9302      	str	r3, [sp, #8]
 80192cc:	fb0a f303 	mul.w	r3, sl, r3
 80192d0:	4016      	ands	r6, r2
 80192d2:	9303      	str	r3, [sp, #12]
 80192d4:	4630      	mov	r0, r6
 80192d6:	f7ff ffad 	bl	8019234 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80192da:	464a      	mov	r2, r9
 80192dc:	460b      	mov	r3, r1
 80192de:	4601      	mov	r1, r0
 80192e0:	4630      	mov	r0, r6
 80192e2:	e9cd 4700 	strd	r4, r7, [sp]
 80192e6:	f7ff ffc3 	bl	8019270 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80192ea:	9b02      	ldr	r3, [sp, #8]
 80192ec:	4606      	mov	r6, r0
 80192ee:	eb05 0108 	add.w	r1, r5, r8
 80192f2:	fb04 bb13 	mls	fp, r4, r3, fp
 80192f6:	4658      	mov	r0, fp
 80192f8:	f7ff ff9c 	bl	8019234 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80192fc:	ab05      	add	r3, sp, #20
 80192fe:	465a      	mov	r2, fp
 8019300:	e9cd 4300 	strd	r4, r3, [sp]
 8019304:	4603      	mov	r3, r0
 8019306:	4650      	mov	r0, sl
 8019308:	f7ff ffb2 	bl	8019270 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801930c:	6839      	ldr	r1, [r7, #0]
 801930e:	9a05      	ldr	r2, [sp, #20]
 8019310:	9b03      	ldr	r3, [sp, #12]
 8019312:	4411      	add	r1, r2
 8019314:	fbb1 f2f4 	udiv	r2, r1, r4
 8019318:	18d3      	adds	r3, r2, r3
 801931a:	fb04 1412 	mls	r4, r4, r2, r1
 801931e:	441e      	add	r6, r3
 8019320:	603c      	str	r4, [r7, #0]
 8019322:	4430      	add	r0, r6
 8019324:	e7b6      	b.n	8019294 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08019326 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8019326:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801932a:	b085      	sub	sp, #20
 801932c:	f1b0 0900 	subs.w	r9, r0, #0
 8019330:	461d      	mov	r5, r3
 8019332:	4617      	mov	r7, r2
 8019334:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019336:	bfbb      	ittet	lt
 8019338:	f1c9 0900 	rsblt	r9, r9, #0
 801933c:	f04f 36ff 	movlt.w	r6, #4294967295
 8019340:	2601      	movge	r6, #1
 8019342:	6823      	ldrlt	r3, [r4, #0]
 8019344:	bfbc      	itt	lt
 8019346:	425b      	neglt	r3, r3
 8019348:	6023      	strlt	r3, [r4, #0]
 801934a:	2a00      	cmp	r2, #0
 801934c:	da04      	bge.n	8019358 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801934e:	6823      	ldr	r3, [r4, #0]
 8019350:	4257      	negs	r7, r2
 8019352:	4276      	negs	r6, r6
 8019354:	425b      	negs	r3, r3
 8019356:	6023      	str	r3, [r4, #0]
 8019358:	2d00      	cmp	r5, #0
 801935a:	4638      	mov	r0, r7
 801935c:	bfba      	itte	lt
 801935e:	426d      	neglt	r5, r5
 8019360:	f04f 38ff 	movlt.w	r8, #4294967295
 8019364:	f04f 0801 	movge.w	r8, #1
 8019368:	f7ff ff64 	bl	8019234 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801936c:	ab03      	add	r3, sp, #12
 801936e:	463a      	mov	r2, r7
 8019370:	e9cd 5300 	strd	r5, r3, [sp]
 8019374:	4603      	mov	r3, r0
 8019376:	4648      	mov	r0, r9
 8019378:	f7ff ff7a 	bl	8019270 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801937c:	6823      	ldr	r3, [r4, #0]
 801937e:	9a03      	ldr	r2, [sp, #12]
 8019380:	4546      	cmp	r6, r8
 8019382:	441a      	add	r2, r3
 8019384:	fb92 f3f5 	sdiv	r3, r2, r5
 8019388:	4418      	add	r0, r3
 801938a:	fb05 2313 	mls	r3, r5, r3, r2
 801938e:	bf18      	it	ne
 8019390:	4240      	negne	r0, r0
 8019392:	1c72      	adds	r2, r6, #1
 8019394:	6023      	str	r3, [r4, #0]
 8019396:	d105      	bne.n	80193a4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8019398:	2b00      	cmp	r3, #0
 801939a:	f1c3 0200 	rsb	r2, r3, #0
 801939e:	db0b      	blt.n	80193b8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80193a0:	6022      	str	r2, [r4, #0]
 80193a2:	e006      	b.n	80193b2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80193a4:	2e01      	cmp	r6, #1
 80193a6:	d104      	bne.n	80193b2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	da02      	bge.n	80193b2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80193ac:	442b      	add	r3, r5
 80193ae:	3801      	subs	r0, #1
 80193b0:	6023      	str	r3, [r4, #0]
 80193b2:	b005      	add	sp, #20
 80193b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80193b8:	3801      	subs	r0, #1
 80193ba:	1b52      	subs	r2, r2, r5
 80193bc:	e7f0      	b.n	80193a0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080193c0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80193c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80193c4:	4c1c      	ldr	r4, [pc, #112]	; (8019438 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80193c6:	4605      	mov	r5, r0
 80193c8:	6807      	ldr	r7, [r0, #0]
 80193ca:	69a3      	ldr	r3, [r4, #24]
 80193cc:	b92b      	cbnz	r3, 80193da <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80193ce:	6840      	ldr	r0, [r0, #4]
 80193d0:	e9c5 7000 	strd	r7, r0, [r5]
 80193d4:	b004      	add	sp, #16
 80193d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193da:	f04f 0802 	mov.w	r8, #2
 80193de:	68a2      	ldr	r2, [r4, #8]
 80193e0:	ae04      	add	r6, sp, #16
 80193e2:	6820      	ldr	r0, [r4, #0]
 80193e4:	fb93 f1f8 	sdiv	r1, r3, r8
 80193e8:	440a      	add	r2, r1
 80193ea:	69e1      	ldr	r1, [r4, #28]
 80193ec:	f846 2d04 	str.w	r2, [r6, #-4]!
 80193f0:	463a      	mov	r2, r7
 80193f2:	9600      	str	r6, [sp, #0]
 80193f4:	f7ff ff97 	bl	8019326 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80193f8:	69a3      	ldr	r3, [r4, #24]
 80193fa:	4607      	mov	r7, r0
 80193fc:	686a      	ldr	r2, [r5, #4]
 80193fe:	6a21      	ldr	r1, [r4, #32]
 8019400:	9600      	str	r6, [sp, #0]
 8019402:	6860      	ldr	r0, [r4, #4]
 8019404:	f7ff ff8f 	bl	8019326 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019408:	69a3      	ldr	r3, [r4, #24]
 801940a:	6962      	ldr	r2, [r4, #20]
 801940c:	4407      	add	r7, r0
 801940e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019410:	9600      	str	r6, [sp, #0]
 8019412:	68e0      	ldr	r0, [r4, #12]
 8019414:	fb93 f8f8 	sdiv	r8, r3, r8
 8019418:	4442      	add	r2, r8
 801941a:	9203      	str	r2, [sp, #12]
 801941c:	682a      	ldr	r2, [r5, #0]
 801941e:	f7ff ff82 	bl	8019326 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019422:	4680      	mov	r8, r0
 8019424:	9600      	str	r6, [sp, #0]
 8019426:	69a3      	ldr	r3, [r4, #24]
 8019428:	686a      	ldr	r2, [r5, #4]
 801942a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801942c:	6920      	ldr	r0, [r4, #16]
 801942e:	f7ff ff7a 	bl	8019326 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019432:	4440      	add	r0, r8
 8019434:	e7cc      	b.n	80193d0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8019436:	bf00      	nop
 8019438:	200567a8 	.word	0x200567a8

0801943c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801943c:	4b07      	ldr	r3, [pc, #28]	; (801945c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801943e:	b510      	push	{r4, lr}
 8019440:	781b      	ldrb	r3, [r3, #0]
 8019442:	2b01      	cmp	r3, #1
 8019444:	d108      	bne.n	8019458 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8019446:	4b06      	ldr	r3, [pc, #24]	; (8019460 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8019448:	880c      	ldrh	r4, [r1, #0]
 801944a:	881b      	ldrh	r3, [r3, #0]
 801944c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019450:	3b01      	subs	r3, #1
 8019452:	1b1b      	subs	r3, r3, r4
 8019454:	8003      	strh	r3, [r0, #0]
 8019456:	800a      	strh	r2, [r1, #0]
 8019458:	bd10      	pop	{r4, pc}
 801945a:	bf00      	nop
 801945c:	20056774 	.word	0x20056774
 8019460:	20056778 	.word	0x20056778

08019464 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019464:	4b0a      	ldr	r3, [pc, #40]	; (8019490 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8019466:	b510      	push	{r4, lr}
 8019468:	781b      	ldrb	r3, [r3, #0]
 801946a:	2b01      	cmp	r3, #1
 801946c:	d10e      	bne.n	801948c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801946e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019472:	8843      	ldrh	r3, [r0, #2]
 8019474:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019478:	18ca      	adds	r2, r1, r3
 801947a:	4b06      	ldr	r3, [pc, #24]	; (8019494 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801947c:	8044      	strh	r4, [r0, #2]
 801947e:	881b      	ldrh	r3, [r3, #0]
 8019480:	1a9b      	subs	r3, r3, r2
 8019482:	8003      	strh	r3, [r0, #0]
 8019484:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019488:	8081      	strh	r1, [r0, #4]
 801948a:	80c3      	strh	r3, [r0, #6]
 801948c:	bd10      	pop	{r4, pc}
 801948e:	bf00      	nop
 8019490:	20056774 	.word	0x20056774
 8019494:	20056770 	.word	0x20056770

08019498 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019498:	4b07      	ldr	r3, [pc, #28]	; (80194b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801949a:	b510      	push	{r4, lr}
 801949c:	781b      	ldrb	r3, [r3, #0]
 801949e:	2b01      	cmp	r3, #1
 80194a0:	d108      	bne.n	80194b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80194a2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80194a6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80194aa:	8003      	strh	r3, [r0, #0]
 80194ac:	8893      	ldrh	r3, [r2, #4]
 80194ae:	3b01      	subs	r3, #1
 80194b0:	1b1b      	subs	r3, r3, r4
 80194b2:	800b      	strh	r3, [r1, #0]
 80194b4:	bd10      	pop	{r4, pc}
 80194b6:	bf00      	nop
 80194b8:	20056774 	.word	0x20056774

080194bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80194bc:	4b08      	ldr	r3, [pc, #32]	; (80194e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80194be:	b513      	push	{r0, r1, r4, lr}
 80194c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80194c4:	2400      	movs	r4, #0
 80194c6:	4b07      	ldr	r3, [pc, #28]	; (80194e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 80194c8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80194cc:	466a      	mov	r2, sp
 80194ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194d2:	9400      	str	r4, [sp, #0]
 80194d4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80194d8:	f7ff ffde 	bl	8019498 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80194dc:	b002      	add	sp, #8
 80194de:	bd10      	pop	{r4, pc}
 80194e0:	20056770 	.word	0x20056770
 80194e4:	20056772 	.word	0x20056772

080194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80194e8:	4b0a      	ldr	r3, [pc, #40]	; (8019514 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80194ea:	460a      	mov	r2, r1
 80194ec:	b510      	push	{r4, lr}
 80194ee:	781b      	ldrb	r3, [r3, #0]
 80194f0:	2b01      	cmp	r3, #1
 80194f2:	d10d      	bne.n	8019510 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80194f4:	8881      	ldrh	r1, [r0, #4]
 80194f6:	8803      	ldrh	r3, [r0, #0]
 80194f8:	440b      	add	r3, r1
 80194fa:	4601      	mov	r1, r0
 80194fc:	3b01      	subs	r3, #1
 80194fe:	f821 3b02 	strh.w	r3, [r1], #2
 8019502:	f7ff ffc9 	bl	8019498 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019506:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801950a:	88c2      	ldrh	r2, [r0, #6]
 801950c:	80c3      	strh	r3, [r0, #6]
 801950e:	8082      	strh	r2, [r0, #4]
 8019510:	bd10      	pop	{r4, pc}
 8019512:	bf00      	nop
 8019514:	20056774 	.word	0x20056774

08019518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019518:	4b09      	ldr	r3, [pc, #36]	; (8019540 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801951a:	b507      	push	{r0, r1, r2, lr}
 801951c:	2100      	movs	r1, #0
 801951e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019522:	4b08      	ldr	r3, [pc, #32]	; (8019544 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8019524:	9100      	str	r1, [sp, #0]
 8019526:	4669      	mov	r1, sp
 8019528:	f9b3 3000 	ldrsh.w	r3, [r3]
 801952c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019530:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019534:	f7ff ffd8 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019538:	b003      	add	sp, #12
 801953a:	f85d fb04 	ldr.w	pc, [sp], #4
 801953e:	bf00      	nop
 8019540:	20056770 	.word	0x20056770
 8019544:	20056772 	.word	0x20056772

08019548 <_ZN8touchgfx11Application13requestRedrawEv>:
 8019548:	4b06      	ldr	r3, [pc, #24]	; (8019564 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801954a:	2100      	movs	r1, #0
 801954c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019550:	4b05      	ldr	r3, [pc, #20]	; (8019568 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8019552:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8019556:	f9b3 3000 	ldrsh.w	r3, [r3]
 801955a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801955e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8019562:	4770      	bx	lr
 8019564:	20056770 	.word	0x20056770
 8019568:	20056772 	.word	0x20056772

0801956c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801956c:	4b03      	ldr	r3, [pc, #12]	; (801957c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801956e:	6818      	ldr	r0, [r3, #0]
 8019570:	b110      	cbz	r0, 8019578 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019572:	6803      	ldr	r3, [r0, #0]
 8019574:	699b      	ldr	r3, [r3, #24]
 8019576:	4718      	bx	r3
 8019578:	4770      	bx	lr
 801957a:	bf00      	nop
 801957c:	200567d8 	.word	0x200567d8

08019580 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019580:	4770      	bx	lr
	...

08019584 <_ZN8touchgfx11Application4drawEv>:
 8019584:	4b09      	ldr	r3, [pc, #36]	; (80195ac <_ZN8touchgfx11Application4drawEv+0x28>)
 8019586:	b507      	push	{r0, r1, r2, lr}
 8019588:	f9b3 2000 	ldrsh.w	r2, [r3]
 801958c:	2100      	movs	r1, #0
 801958e:	4b08      	ldr	r3, [pc, #32]	; (80195b0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019590:	9100      	str	r1, [sp, #0]
 8019592:	4669      	mov	r1, sp
 8019594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019598:	f8ad 2004 	strh.w	r2, [sp, #4]
 801959c:	f8ad 3006 	strh.w	r3, [sp, #6]
 80195a0:	6803      	ldr	r3, [r0, #0]
 80195a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195a4:	4798      	blx	r3
 80195a6:	b003      	add	sp, #12
 80195a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80195ac:	20056770 	.word	0x20056770
 80195b0:	20056772 	.word	0x20056772

080195b4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80195b4:	4b03      	ldr	r3, [pc, #12]	; (80195c4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80195b6:	6818      	ldr	r0, [r3, #0]
 80195b8:	b110      	cbz	r0, 80195c0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80195ba:	6803      	ldr	r3, [r0, #0]
 80195bc:	69db      	ldr	r3, [r3, #28]
 80195be:	4718      	bx	r3
 80195c0:	4770      	bx	lr
 80195c2:	bf00      	nop
 80195c4:	200567d8 	.word	0x200567d8

080195c8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80195c8:	4b03      	ldr	r3, [pc, #12]	; (80195d8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80195ca:	6818      	ldr	r0, [r3, #0]
 80195cc:	b110      	cbz	r0, 80195d4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80195ce:	6803      	ldr	r3, [r0, #0]
 80195d0:	6a1b      	ldr	r3, [r3, #32]
 80195d2:	4718      	bx	r3
 80195d4:	4770      	bx	lr
 80195d6:	bf00      	nop
 80195d8:	200567d8 	.word	0x200567d8

080195dc <_ZN8touchgfx11Application14handleKeyEventEh>:
 80195dc:	4b03      	ldr	r3, [pc, #12]	; (80195ec <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80195de:	6818      	ldr	r0, [r3, #0]
 80195e0:	b110      	cbz	r0, 80195e8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80195e2:	6803      	ldr	r3, [r0, #0]
 80195e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195e6:	4718      	bx	r3
 80195e8:	4770      	bx	lr
 80195ea:	bf00      	nop
 80195ec:	200567d8 	.word	0x200567d8

080195f0 <_ZN8touchgfx11Application15handleTickEventEv>:
 80195f0:	b570      	push	{r4, r5, r6, lr}
 80195f2:	4d34      	ldr	r5, [pc, #208]	; (80196c4 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 80195f4:	4604      	mov	r4, r0
 80195f6:	6828      	ldr	r0, [r5, #0]
 80195f8:	b140      	cbz	r0, 801960c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80195fa:	7a03      	ldrb	r3, [r0, #8]
 80195fc:	b933      	cbnz	r3, 801960c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80195fe:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8019602:	6803      	ldr	r3, [r0, #0]
 8019604:	689b      	ldr	r3, [r3, #8]
 8019606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801960a:	4718      	bx	r3
 801960c:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8019610:	b97b      	cbnz	r3, 8019632 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019612:	b170      	cbz	r0, 8019632 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019614:	7a03      	ldrb	r3, [r0, #8]
 8019616:	b163      	cbz	r3, 8019632 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019618:	4b2b      	ldr	r3, [pc, #172]	; (80196c8 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801961a:	6818      	ldr	r0, [r3, #0]
 801961c:	b110      	cbz	r0, 8019624 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801961e:	6803      	ldr	r3, [r0, #0]
 8019620:	691b      	ldr	r3, [r3, #16]
 8019622:	4798      	blx	r3
 8019624:	6828      	ldr	r0, [r5, #0]
 8019626:	6803      	ldr	r3, [r0, #0]
 8019628:	68db      	ldr	r3, [r3, #12]
 801962a:	4798      	blx	r3
 801962c:	2301      	movs	r3, #1
 801962e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8019632:	2500      	movs	r5, #0
 8019634:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8019638:	42a8      	cmp	r0, r5
 801963a:	dd0c      	ble.n	8019656 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801963c:	1963      	adds	r3, r4, r5
 801963e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8019642:	b132      	cbz	r2, 8019652 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8019644:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8019648:	4413      	add	r3, r2
 801964a:	6858      	ldr	r0, [r3, #4]
 801964c:	6803      	ldr	r3, [r0, #0]
 801964e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019650:	4798      	blx	r3
 8019652:	3501      	adds	r5, #1
 8019654:	e7ee      	b.n	8019634 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8019656:	2300      	movs	r3, #0
 8019658:	461a      	mov	r2, r3
 801965a:	4298      	cmp	r0, r3
 801965c:	d114      	bne.n	8019688 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801965e:	1d25      	adds	r5, r4, #4
 8019660:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8019664:	1e48      	subs	r0, r1, #1
 8019666:	b280      	uxth	r0, r0
 8019668:	4291      	cmp	r1, r2
 801966a:	dd24      	ble.n	80196b6 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801966c:	4288      	cmp	r0, r1
 801966e:	d2fb      	bcs.n	8019668 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8019670:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8019674:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8019678:	3304      	adds	r3, #4
 801967a:	428b      	cmp	r3, r1
 801967c:	d018      	beq.n	80196b0 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801967e:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8019682:	f843 6c04 	str.w	r6, [r3, #-4]
 8019686:	e7f8      	b.n	801967a <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8019688:	18e1      	adds	r1, r4, r3
 801968a:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801968e:	b16d      	cbz	r5, 80196ac <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8019690:	429a      	cmp	r2, r3
 8019692:	d00a      	beq.n	80196aa <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8019694:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8019698:	4431      	add	r1, r6
 801969a:	684e      	ldr	r6, [r1, #4]
 801969c:	b291      	uxth	r1, r2
 801969e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80196a2:	604e      	str	r6, [r1, #4]
 80196a4:	18a1      	adds	r1, r4, r2
 80196a6:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 80196aa:	3201      	adds	r2, #1
 80196ac:	3301      	adds	r3, #1
 80196ae:	e7d4      	b.n	801965a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 80196b0:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 80196b4:	e7d4      	b.n	8019660 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 80196b6:	4b04      	ldr	r3, [pc, #16]	; (80196c8 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 80196b8:	6818      	ldr	r0, [r3, #0]
 80196ba:	b110      	cbz	r0, 80196c2 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 80196bc:	6803      	ldr	r3, [r0, #0]
 80196be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196c0:	e7a1      	b.n	8019606 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80196c2:	bd70      	pop	{r4, r5, r6, pc}
 80196c4:	200567dc 	.word	0x200567dc
 80196c8:	200567d8 	.word	0x200567d8

080196cc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80196cc:	b570      	push	{r4, r5, r6, lr}
 80196ce:	4606      	mov	r6, r0
 80196d0:	460c      	mov	r4, r1
 80196d2:	b929      	cbnz	r1, 80196e0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 80196d4:	4b0c      	ldr	r3, [pc, #48]	; (8019708 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 80196d6:	2167      	movs	r1, #103	; 0x67
 80196d8:	4a0c      	ldr	r2, [pc, #48]	; (801970c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 80196da:	480d      	ldr	r0, [pc, #52]	; (8019710 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 80196dc:	f00d f988 	bl	80269f0 <__assert_func>
 80196e0:	2300      	movs	r3, #0
 80196e2:	4d0c      	ldr	r5, [pc, #48]	; (8019714 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 80196e4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80196e8:	6828      	ldr	r0, [r5, #0]
 80196ea:	b110      	cbz	r0, 80196f2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80196ec:	6803      	ldr	r3, [r0, #0]
 80196ee:	695b      	ldr	r3, [r3, #20]
 80196f0:	4798      	blx	r3
 80196f2:	602c      	str	r4, [r5, #0]
 80196f4:	4620      	mov	r0, r4
 80196f6:	6823      	ldr	r3, [r4, #0]
 80196f8:	68db      	ldr	r3, [r3, #12]
 80196fa:	4798      	blx	r3
 80196fc:	6833      	ldr	r3, [r6, #0]
 80196fe:	4630      	mov	r0, r6
 8019700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019706:	4718      	bx	r3
 8019708:	0802dcd0 	.word	0x0802dcd0
 801970c:	0802dda0 	.word	0x0802dda0
 8019710:	0802dcda 	.word	0x0802dcda
 8019714:	200567d8 	.word	0x200567d8

08019718 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8019718:	b570      	push	{r4, r5, r6, lr}
 801971a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801971e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019722:	42ac      	cmp	r4, r5
 8019724:	db18      	blt.n	8019758 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019726:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801972a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801972e:	429a      	cmp	r2, r3
 8019730:	db12      	blt.n	8019758 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019732:	8886      	ldrh	r6, [r0, #4]
 8019734:	4435      	add	r5, r6
 8019736:	888e      	ldrh	r6, [r1, #4]
 8019738:	4434      	add	r4, r6
 801973a:	b22d      	sxth	r5, r5
 801973c:	b224      	sxth	r4, r4
 801973e:	42a5      	cmp	r5, r4
 8019740:	db0a      	blt.n	8019758 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019742:	88c0      	ldrh	r0, [r0, #6]
 8019744:	4418      	add	r0, r3
 8019746:	88cb      	ldrh	r3, [r1, #6]
 8019748:	441a      	add	r2, r3
 801974a:	b200      	sxth	r0, r0
 801974c:	b212      	sxth	r2, r2
 801974e:	4290      	cmp	r0, r2
 8019750:	bfb4      	ite	lt
 8019752:	2000      	movlt	r0, #0
 8019754:	2001      	movge	r0, #1
 8019756:	bd70      	pop	{r4, r5, r6, pc}
 8019758:	2000      	movs	r0, #0
 801975a:	e7fc      	b.n	8019756 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801975c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801975e:	4604      	mov	r4, r0
 8019760:	4608      	mov	r0, r1
 8019762:	460d      	mov	r5, r1
 8019764:	f7fc fa25 	bl	8015bb2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019768:	b978      	cbnz	r0, 801978a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801976a:	4620      	mov	r0, r4
 801976c:	f7fc fa21 	bl	8015bb2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019770:	f9b5 6000 	ldrsh.w	r6, [r5]
 8019774:	b150      	cbz	r0, 801978c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8019776:	8026      	strh	r6, [r4, #0]
 8019778:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801977c:	8063      	strh	r3, [r4, #2]
 801977e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8019782:	80a3      	strh	r3, [r4, #4]
 8019784:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019788:	80e3      	strh	r3, [r4, #6]
 801978a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801978c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019790:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019794:	42b1      	cmp	r1, r6
 8019796:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801979a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801979e:	460f      	mov	r7, r1
 80197a0:	88ed      	ldrh	r5, [r5, #6]
 80197a2:	bfa8      	it	ge
 80197a4:	4637      	movge	r7, r6
 80197a6:	4293      	cmp	r3, r2
 80197a8:	4618      	mov	r0, r3
 80197aa:	4466      	add	r6, ip
 80197ac:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80197b0:	bfa8      	it	ge
 80197b2:	4610      	movge	r0, r2
 80197b4:	442a      	add	r2, r5
 80197b6:	88e5      	ldrh	r5, [r4, #6]
 80197b8:	4461      	add	r1, ip
 80197ba:	b236      	sxth	r6, r6
 80197bc:	8027      	strh	r7, [r4, #0]
 80197be:	442b      	add	r3, r5
 80197c0:	b209      	sxth	r1, r1
 80197c2:	b212      	sxth	r2, r2
 80197c4:	8060      	strh	r0, [r4, #2]
 80197c6:	b21b      	sxth	r3, r3
 80197c8:	428e      	cmp	r6, r1
 80197ca:	bfac      	ite	ge
 80197cc:	ebc7 0106 	rsbge	r1, r7, r6
 80197d0:	ebc7 0101 	rsblt	r1, r7, r1
 80197d4:	429a      	cmp	r2, r3
 80197d6:	bfac      	ite	ge
 80197d8:	ebc0 0202 	rsbge	r2, r0, r2
 80197dc:	ebc0 0203 	rsblt	r2, r0, r3
 80197e0:	80a1      	strh	r1, [r4, #4]
 80197e2:	80e2      	strh	r2, [r4, #6]
 80197e4:	e7d1      	b.n	801978a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080197e8 <_ZN8touchgfx11Application11getInstanceEv>:
 80197e8:	4b01      	ldr	r3, [pc, #4]	; (80197f0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80197ea:	6818      	ldr	r0, [r3, #0]
 80197ec:	4770      	bx	lr
 80197ee:	bf00      	nop
 80197f0:	200567e8 	.word	0x200567e8

080197f4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80197f4:	2300      	movs	r3, #0
 80197f6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80197fa:	30a8      	adds	r0, #168	; 0xa8
 80197fc:	f820 3c24 	strh.w	r3, [r0, #-36]
 8019800:	f802 3b01 	strb.w	r3, [r2], #1
 8019804:	4282      	cmp	r2, r0
 8019806:	d1fb      	bne.n	8019800 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8019808:	4770      	bx	lr

0801980a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801980a:	4603      	mov	r3, r0
 801980c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8019810:	2200      	movs	r2, #0
 8019812:	801a      	strh	r2, [r3, #0]
 8019814:	3308      	adds	r3, #8
 8019816:	f823 2c06 	strh.w	r2, [r3, #-6]
 801981a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801981e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8019822:	428b      	cmp	r3, r1
 8019824:	d1f5      	bne.n	8019812 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8019826:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801982a:	4770      	bx	lr

0801982c <_ZN8touchgfx11ApplicationC1Ev>:
 801982c:	b570      	push	{r4, r5, r6, lr}
 801982e:	4b1a      	ldr	r3, [pc, #104]	; (8019898 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8019830:	2500      	movs	r5, #0
 8019832:	4604      	mov	r4, r0
 8019834:	30a8      	adds	r0, #168	; 0xa8
 8019836:	f840 3ca8 	str.w	r3, [r0, #-168]
 801983a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801983e:	f7ff ffe4 	bl	801980a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019842:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8019846:	f7ff ffe0 	bl	801980a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801984a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801984e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8019852:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8019856:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801985a:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801985e:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8019862:	490e      	ldr	r1, [pc, #56]	; (801989c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8019864:	480e      	ldr	r0, [pc, #56]	; (80198a0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8019866:	f00b fa69 	bl	8024d3c <CRC_Lock>
 801986a:	4e0e      	ldr	r6, [pc, #56]	; (80198a4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801986c:	4b0e      	ldr	r3, [pc, #56]	; (80198a8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801986e:	b158      	cbz	r0, 8019888 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8019870:	801d      	strh	r5, [r3, #0]
 8019872:	2300      	movs	r3, #0
 8019874:	4a0d      	ldr	r2, [pc, #52]	; (80198ac <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8019876:	4620      	mov	r0, r4
 8019878:	6013      	str	r3, [r2, #0]
 801987a:	4a0d      	ldr	r2, [pc, #52]	; (80198b0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801987c:	6033      	str	r3, [r6, #0]
 801987e:	6013      	str	r3, [r2, #0]
 8019880:	f7ff ffb8 	bl	80197f4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8019884:	4620      	mov	r0, r4
 8019886:	bd70      	pop	{r4, r5, r6, pc}
 8019888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801988c:	2002      	movs	r0, #2
 801988e:	801a      	strh	r2, [r3, #0]
 8019890:	6030      	str	r0, [r6, #0]
 8019892:	f001 fb41 	bl	801af18 <_ZN8touchgfx6Screen4drawEv>
 8019896:	e7ec      	b.n	8019872 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8019898:	0802dd64 	.word	0x0802dd64
 801989c:	b5e8b5cd 	.word	0xb5e8b5cd
 80198a0:	f407a5c2 	.word	0xf407a5c2
 80198a4:	200567d8 	.word	0x200567d8
 80198a8:	20000024 	.word	0x20000024
 80198ac:	200567e8 	.word	0x200567e8
 80198b0:	200567dc 	.word	0x200567dc

080198b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80198b4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80198b8:	428b      	cmp	r3, r1
 80198ba:	b510      	push	{r4, lr}
 80198bc:	d90e      	bls.n	80198dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 80198be:	3b01      	subs	r3, #1
 80198c0:	b29b      	uxth	r3, r3
 80198c2:	428b      	cmp	r3, r1
 80198c4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80198c8:	d908      	bls.n	80198dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 80198ca:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80198ce:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80198d2:	681a      	ldr	r2, [r3, #0]
 80198d4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80198d8:	685a      	ldr	r2, [r3, #4]
 80198da:	6062      	str	r2, [r4, #4]
 80198dc:	bd10      	pop	{r4, pc}
	...

080198e0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 80198e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80198e2:	466b      	mov	r3, sp
 80198e4:	4604      	mov	r4, r0
 80198e6:	e883 0006 	stmia.w	r3, {r1, r2}
 80198ea:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 80198ee:	2a07      	cmp	r2, #7
 80198f0:	d906      	bls.n	8019900 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 80198f2:	4b09      	ldr	r3, [pc, #36]	; (8019918 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 80198f4:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80198f8:	4a08      	ldr	r2, [pc, #32]	; (801991c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 80198fa:	4809      	ldr	r0, [pc, #36]	; (8019920 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 80198fc:	f00d f878 	bl	80269f0 <__assert_func>
 8019900:	1c51      	adds	r1, r2, #1
 8019902:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8019906:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801990a:	cb03      	ldmia	r3!, {r0, r1}
 801990c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8019910:	6069      	str	r1, [r5, #4]
 8019912:	b003      	add	sp, #12
 8019914:	bd30      	pop	{r4, r5, pc}
 8019916:	bf00      	nop
 8019918:	0802dd04 	.word	0x0802dd04
 801991c:	0802dde4 	.word	0x0802dde4
 8019920:	0802dd33 	.word	0x0802dd33

08019924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8019924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019928:	b08d      	sub	sp, #52	; 0x34
 801992a:	4683      	mov	fp, r0
 801992c:	ac08      	add	r4, sp, #32
 801992e:	4620      	mov	r0, r4
 8019930:	e884 0006 	stmia.w	r4, {r1, r2}
 8019934:	f7fc f93d 	bl	8015bb2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019938:	2800      	cmp	r0, #0
 801993a:	d16a      	bne.n	8019a12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801993c:	9402      	str	r4, [sp, #8]
 801993e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8019942:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8019946:	2400      	movs	r4, #0
 8019948:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801994c:	9301      	str	r3, [sp, #4]
 801994e:	36a0      	adds	r6, #160	; 0xa0
 8019950:	42a5      	cmp	r5, r4
 8019952:	d00d      	beq.n	8019970 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8019954:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8019958:	9802      	ldr	r0, [sp, #8]
 801995a:	f7ff fedd 	bl	8019718 <_ZNK8touchgfx4Rect8includesERKS0_>
 801995e:	b128      	cbz	r0, 801996c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8019960:	1e69      	subs	r1, r5, #1
 8019962:	9801      	ldr	r0, [sp, #4]
 8019964:	1b09      	subs	r1, r1, r4
 8019966:	b289      	uxth	r1, r1
 8019968:	f7ff ffa4 	bl	80198b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801996c:	3401      	adds	r4, #1
 801996e:	e7ef      	b.n	8019950 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019970:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8019974:	1e7b      	subs	r3, r7, #1
 8019976:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801997a:	9703      	str	r7, [sp, #12]
 801997c:	9300      	str	r3, [sp, #0]
 801997e:	2400      	movs	r4, #0
 8019980:	4655      	mov	r5, sl
 8019982:	9704      	str	r7, [sp, #16]
 8019984:	4626      	mov	r6, r4
 8019986:	9b04      	ldr	r3, [sp, #16]
 8019988:	2b00      	cmp	r3, #0
 801998a:	d078      	beq.n	8019a7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801998c:	9902      	ldr	r1, [sp, #8]
 801998e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8019992:	f7fd fad7 	bl	8016f44 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019996:	b360      	cbz	r0, 80199f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8019998:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801999c:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 80199a0:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 80199a4:	45e6      	cmp	lr, ip
 80199a6:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 80199aa:	db35      	blt.n	8019a18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 80199ac:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80199b0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80199b4:	4472      	add	r2, lr
 80199b6:	4463      	add	r3, ip
 80199b8:	b212      	sxth	r2, r2
 80199ba:	b21b      	sxth	r3, r3
 80199bc:	429a      	cmp	r2, r3
 80199be:	dc2b      	bgt.n	8019a18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 80199c0:	fa1f f288 	uxth.w	r2, r8
 80199c4:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80199c8:	45c1      	cmp	r9, r8
 80199ca:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80199ce:	4413      	add	r3, r2
 80199d0:	fa1f fc89 	uxth.w	ip, r9
 80199d4:	b29b      	uxth	r3, r3
 80199d6:	fa0f fe83 	sxth.w	lr, r3
 80199da:	db0f      	blt.n	80199fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 80199dc:	eba3 030c 	sub.w	r3, r3, ip
 80199e0:	1ac9      	subs	r1, r1, r3
 80199e2:	b209      	sxth	r1, r1
 80199e4:	2900      	cmp	r1, #0
 80199e6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80199ea:	dd12      	ble.n	8019a12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80199ec:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 80199f0:	4604      	mov	r4, r0
 80199f2:	9b04      	ldr	r3, [sp, #16]
 80199f4:	3d08      	subs	r5, #8
 80199f6:	3b01      	subs	r3, #1
 80199f8:	9304      	str	r3, [sp, #16]
 80199fa:	e7c4      	b.n	8019986 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 80199fc:	4461      	add	r1, ip
 80199fe:	b209      	sxth	r1, r1
 8019a00:	4571      	cmp	r1, lr
 8019a02:	dc3a      	bgt.n	8019a7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8019a04:	eba2 020c 	sub.w	r2, r2, ip
 8019a08:	b212      	sxth	r2, r2
 8019a0a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8019a0e:	2a00      	cmp	r2, #0
 8019a10:	dcee      	bgt.n	80199f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8019a12:	b00d      	add	sp, #52	; 0x34
 8019a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a18:	45c1      	cmp	r9, r8
 8019a1a:	db2e      	blt.n	8019a7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8019a1c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8019a20:	4499      	add	r9, r3
 8019a22:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8019a26:	4498      	add	r8, r3
 8019a28:	fa0f f989 	sxth.w	r9, r9
 8019a2c:	fa0f f888 	sxth.w	r8, r8
 8019a30:	45c1      	cmp	r9, r8
 8019a32:	dc22      	bgt.n	8019a7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8019a34:	fa1f f28c 	uxth.w	r2, ip
 8019a38:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8019a3c:	45e6      	cmp	lr, ip
 8019a3e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8019a42:	4413      	add	r3, r2
 8019a44:	fa1f f88e 	uxth.w	r8, lr
 8019a48:	b29b      	uxth	r3, r3
 8019a4a:	fa0f f983 	sxth.w	r9, r3
 8019a4e:	db0a      	blt.n	8019a66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8019a50:	eba3 0308 	sub.w	r3, r3, r8
 8019a54:	1ac9      	subs	r1, r1, r3
 8019a56:	b209      	sxth	r1, r1
 8019a58:	2900      	cmp	r1, #0
 8019a5a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8019a5e:	ddd8      	ble.n	8019a12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8019a60:	f8ad 9020 	strh.w	r9, [sp, #32]
 8019a64:	e7c4      	b.n	80199f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8019a66:	4441      	add	r1, r8
 8019a68:	b209      	sxth	r1, r1
 8019a6a:	4549      	cmp	r1, r9
 8019a6c:	dc05      	bgt.n	8019a7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8019a6e:	eba2 0208 	sub.w	r2, r2, r8
 8019a72:	b212      	sxth	r2, r2
 8019a74:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8019a78:	e7c9      	b.n	8019a0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8019a7a:	4606      	mov	r6, r0
 8019a7c:	e7b9      	b.n	80199f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8019a7e:	2c00      	cmp	r4, #0
 8019a80:	f47f af7d 	bne.w	801997e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8019a84:	2e00      	cmp	r6, #0
 8019a86:	f000 81dc 	beq.w	8019e42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8019a8a:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 8019a8e:	4655      	mov	r5, sl
 8019a90:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8019a94:	b2b9      	uxth	r1, r7
 8019a96:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8019a9a:	b2b3      	uxth	r3, r6
 8019a9c:	9104      	str	r1, [sp, #16]
 8019a9e:	9804      	ldr	r0, [sp, #16]
 8019aa0:	441a      	add	r2, r3
 8019aa2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8019aa6:	b292      	uxth	r2, r2
 8019aa8:	4401      	add	r1, r0
 8019aaa:	fa0f f882 	sxth.w	r8, r2
 8019aae:	b289      	uxth	r1, r1
 8019ab0:	9105      	str	r1, [sp, #20]
 8019ab2:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8019ab6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019aba:	9b03      	ldr	r3, [sp, #12]
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d054      	beq.n	8019b6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8019ac0:	9902      	ldr	r1, [sp, #8]
 8019ac2:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8019ac6:	f7fd fa3d 	bl	8016f44 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019aca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019ace:	b1d8      	cbz	r0, 8019b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8019ad0:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8019ad4:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8019ad8:	4576      	cmp	r6, lr
 8019ada:	dc26      	bgt.n	8019b2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8019adc:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8019ae0:	44f4      	add	ip, lr
 8019ae2:	fa0f fc8c 	sxth.w	ip, ip
 8019ae6:	45e0      	cmp	r8, ip
 8019ae8:	db1f      	blt.n	8019b2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8019aea:	428f      	cmp	r7, r1
 8019aec:	fa1f fc81 	uxth.w	ip, r1
 8019af0:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8019af4:	dc0f      	bgt.n	8019b16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8019af6:	9805      	ldr	r0, [sp, #20]
 8019af8:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8019afc:	eba0 0c0c 	sub.w	ip, r0, ip
 8019b00:	eba1 010c 	sub.w	r1, r1, ip
 8019b04:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8019b08:	4620      	mov	r0, r4
 8019b0a:	9903      	ldr	r1, [sp, #12]
 8019b0c:	3d08      	subs	r5, #8
 8019b0e:	4604      	mov	r4, r0
 8019b10:	3901      	subs	r1, #1
 8019b12:	9103      	str	r1, [sp, #12]
 8019b14:	e7cf      	b.n	8019ab6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8019b16:	4461      	add	r1, ip
 8019b18:	b209      	sxth	r1, r1
 8019b1a:	4549      	cmp	r1, r9
 8019b1c:	dcf5      	bgt.n	8019b0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019b1e:	9904      	ldr	r1, [sp, #16]
 8019b20:	eba1 0c0c 	sub.w	ip, r1, ip
 8019b24:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8019b28:	e7ee      	b.n	8019b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8019b2a:	428f      	cmp	r7, r1
 8019b2c:	dced      	bgt.n	8019b0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019b2e:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8019b32:	4461      	add	r1, ip
 8019b34:	b209      	sxth	r1, r1
 8019b36:	4589      	cmp	r9, r1
 8019b38:	dbe7      	blt.n	8019b0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019b3a:	4576      	cmp	r6, lr
 8019b3c:	fa1f fc8e 	uxth.w	ip, lr
 8019b40:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8019b44:	dc08      	bgt.n	8019b58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8019b46:	eba2 0c0c 	sub.w	ip, r2, ip
 8019b4a:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8019b4e:	eba1 010c 	sub.w	r1, r1, ip
 8019b52:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8019b56:	e7d7      	b.n	8019b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8019b58:	4461      	add	r1, ip
 8019b5a:	b209      	sxth	r1, r1
 8019b5c:	4588      	cmp	r8, r1
 8019b5e:	dbd4      	blt.n	8019b0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019b60:	eba3 0c0c 	sub.w	ip, r3, ip
 8019b64:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8019b68:	e7ce      	b.n	8019b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8019b6a:	2c00      	cmp	r4, #0
 8019b6c:	f000 8169 	beq.w	8019e42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8019b70:	9b00      	ldr	r3, [sp, #0]
 8019b72:	3301      	adds	r3, #1
 8019b74:	f000 8165 	beq.w	8019e42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8019b78:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8019b7c:	9802      	ldr	r0, [sp, #8]
 8019b7e:	4621      	mov	r1, r4
 8019b80:	f7ff fdca 	bl	8019718 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019b84:	b120      	cbz	r0, 8019b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8019b86:	f8bd 1000 	ldrh.w	r1, [sp]
 8019b8a:	9801      	ldr	r0, [sp, #4]
 8019b8c:	f7ff fe92 	bl	80198b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019b90:	9902      	ldr	r1, [sp, #8]
 8019b92:	4620      	mov	r0, r4
 8019b94:	f7fd f9d6 	bl	8016f44 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019b98:	2800      	cmp	r0, #0
 8019b9a:	f000 809b 	beq.w	8019cd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 8019b9e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8019ba2:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8019ba6:	fa1f f288 	uxth.w	r2, r8
 8019baa:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 8019bae:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8019bb2:	19d5      	adds	r5, r2, r7
 8019bb4:	b2a1      	uxth	r1, r4
 8019bb6:	45a0      	cmp	r8, r4
 8019bb8:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8019bbc:	fa1f f985 	uxth.w	r9, r5
 8019bc0:	440b      	add	r3, r1
 8019bc2:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8019bc6:	fa0f f589 	sxth.w	r5, r9
 8019bca:	b29b      	uxth	r3, r3
 8019bcc:	9503      	str	r5, [sp, #12]
 8019bce:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8019bd2:	9507      	str	r5, [sp, #28]
 8019bd4:	f340 809d 	ble.w	8019d12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8019bd8:	1a52      	subs	r2, r2, r1
 8019bda:	4584      	cmp	ip, r0
 8019bdc:	fa0f fe83 	sxth.w	lr, r3
 8019be0:	b292      	uxth	r2, r2
 8019be2:	b215      	sxth	r5, r2
 8019be4:	dd2f      	ble.n	8019c46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8019be6:	9e00      	ldr	r6, [sp, #0]
 8019be8:	fa1f fc8c 	uxth.w	ip, ip
 8019bec:	b280      	uxth	r0, r0
 8019bee:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8019bf2:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8019bf6:	9e03      	ldr	r6, [sp, #12]
 8019bf8:	ebac 0300 	sub.w	r3, ip, r0
 8019bfc:	448c      	add	ip, r1
 8019bfe:	eba6 060e 	sub.w	r6, r6, lr
 8019c02:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8019c06:	b29b      	uxth	r3, r3
 8019c08:	4470      	add	r0, lr
 8019c0a:	fa0f fc8c 	sxth.w	ip, ip
 8019c0e:	b21c      	sxth	r4, r3
 8019c10:	b200      	sxth	r0, r0
 8019c12:	4366      	muls	r6, r4
 8019c14:	ebac 0000 	sub.w	r0, ip, r0
 8019c18:	4368      	muls	r0, r5
 8019c1a:	4286      	cmp	r6, r0
 8019c1c:	db09      	blt.n	8019c32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 8019c1e:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8019c22:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8019c26:	4417      	add	r7, r2
 8019c28:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019c2c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8019c30:	e685      	b.n	801993e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019c32:	440b      	add	r3, r1
 8019c34:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8019c38:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019c3c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8019c40:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019c44:	e67b      	b.n	801993e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019c46:	9e03      	ldr	r6, [sp, #12]
 8019c48:	45b6      	cmp	lr, r6
 8019c4a:	da28      	bge.n	8019c9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 8019c4c:	9b00      	ldr	r3, [sp, #0]
 8019c4e:	eba6 060e 	sub.w	r6, r6, lr
 8019c52:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8019c56:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8019c5a:	eb04 030c 	add.w	r3, r4, ip
 8019c5e:	fa1f f883 	uxth.w	r8, r3
 8019c62:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8019c66:	4403      	add	r3, r0
 8019c68:	fa0f f988 	sxth.w	r9, r8
 8019c6c:	eba0 000c 	sub.w	r0, r0, ip
 8019c70:	eba3 0308 	sub.w	r3, r3, r8
 8019c74:	4368      	muls	r0, r5
 8019c76:	b29b      	uxth	r3, r3
 8019c78:	fa0f f883 	sxth.w	r8, r3
 8019c7c:	fb08 f606 	mul.w	r6, r8, r6
 8019c80:	42b0      	cmp	r0, r6
 8019c82:	dc06      	bgt.n	8019c92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8019c84:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8019c88:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8019c8c:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8019c90:	e7c9      	b.n	8019c26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8019c92:	4423      	add	r3, r4
 8019c94:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8019c98:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019c9c:	e64f      	b.n	801993e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019c9e:	eba3 0309 	sub.w	r3, r3, r9
 8019ca2:	9807      	ldr	r0, [sp, #28]
 8019ca4:	b29b      	uxth	r3, r3
 8019ca6:	2806      	cmp	r0, #6
 8019ca8:	fa0f fc83 	sxth.w	ip, r3
 8019cac:	d818      	bhi.n	8019ce0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 8019cae:	4652      	mov	r2, sl
 8019cb0:	ab0a      	add	r3, sp, #40	; 0x28
 8019cb2:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8019cb6:	6851      	ldr	r1, [r2, #4]
 8019cb8:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8019cbc:	c303      	stmia	r3!, {r0, r1}
 8019cbe:	9b03      	ldr	r3, [sp, #12]
 8019cc0:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8019cc4:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8019cc8:	ab0a      	add	r3, sp, #40	; 0x28
 8019cca:	9801      	ldr	r0, [sp, #4]
 8019ccc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019cd0:	f7ff fe06 	bl	80198e0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019cd4:	9b00      	ldr	r3, [sp, #0]
 8019cd6:	f1aa 0a08 	sub.w	sl, sl, #8
 8019cda:	3b01      	subs	r3, #1
 8019cdc:	9300      	str	r3, [sp, #0]
 8019cde:	e747      	b.n	8019b70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8019ce0:	9800      	ldr	r0, [sp, #0]
 8019ce2:	45ac      	cmp	ip, r5
 8019ce4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8019ce8:	db0c      	blt.n	8019d04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 8019cea:	4417      	add	r7, r2
 8019cec:	4458      	add	r0, fp
 8019cee:	f8ad 4020 	strh.w	r4, [sp, #32]
 8019cf2:	b2bf      	uxth	r7, r7
 8019cf4:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8019cf8:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8019cfc:	440f      	add	r7, r1
 8019cfe:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 8019d02:	e61c      	b.n	801993e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019d04:	4458      	add	r0, fp
 8019d06:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 8019d0a:	443b      	add	r3, r7
 8019d0c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8019d10:	e615      	b.n	801993e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019d12:	fa1f f18c 	uxth.w	r1, ip
 8019d16:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 8019d1a:	b282      	uxth	r2, r0
 8019d1c:	4584      	cmp	ip, r0
 8019d1e:	eb01 0e05 	add.w	lr, r1, r5
 8019d22:	9204      	str	r2, [sp, #16]
 8019d24:	fa1f fe8e 	uxth.w	lr, lr
 8019d28:	9e04      	ldr	r6, [sp, #16]
 8019d2a:	fa0f f28e 	sxth.w	r2, lr
 8019d2e:	9205      	str	r2, [sp, #20]
 8019d30:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8019d34:	4432      	add	r2, r6
 8019d36:	b292      	uxth	r2, r2
 8019d38:	9206      	str	r2, [sp, #24]
 8019d3a:	da26      	bge.n	8019d8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 8019d3c:	eba3 0309 	sub.w	r3, r3, r9
 8019d40:	eba2 020e 	sub.w	r2, r2, lr
 8019d44:	eba0 000c 	sub.w	r0, r0, ip
 8019d48:	eba4 0408 	sub.w	r4, r4, r8
 8019d4c:	b29b      	uxth	r3, r3
 8019d4e:	b292      	uxth	r2, r2
 8019d50:	fa0f fa83 	sxth.w	sl, r3
 8019d54:	b211      	sxth	r1, r2
 8019d56:	fb0a f000 	mul.w	r0, sl, r0
 8019d5a:	434c      	muls	r4, r1
 8019d5c:	42a0      	cmp	r0, r4
 8019d5e:	9800      	ldr	r0, [sp, #0]
 8019d60:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8019d64:	dc06      	bgt.n	8019d74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8019d66:	4458      	add	r0, fp
 8019d68:	9a05      	ldr	r2, [sp, #20]
 8019d6a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 8019d6e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8019d72:	e7ca      	b.n	8019d0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8019d74:	eb0b 0300 	add.w	r3, fp, r0
 8019d78:	9903      	ldr	r1, [sp, #12]
 8019d7a:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 8019d7e:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8019d82:	442a      	add	r2, r5
 8019d84:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8019d88:	e5d9      	b.n	801993e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019d8a:	9e04      	ldr	r6, [sp, #16]
 8019d8c:	9a03      	ldr	r2, [sp, #12]
 8019d8e:	1b89      	subs	r1, r1, r6
 8019d90:	b21e      	sxth	r6, r3
 8019d92:	b289      	uxth	r1, r1
 8019d94:	4296      	cmp	r6, r2
 8019d96:	fa0f fc81 	sxth.w	ip, r1
 8019d9a:	dd25      	ble.n	8019de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8019d9c:	eba3 0309 	sub.w	r3, r3, r9
 8019da0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8019da4:	9e05      	ldr	r6, [sp, #20]
 8019da6:	eba4 0408 	sub.w	r4, r4, r8
 8019daa:	b29b      	uxth	r3, r3
 8019dac:	eba6 0902 	sub.w	r9, r6, r2
 8019db0:	fb0c f404 	mul.w	r4, ip, r4
 8019db4:	b218      	sxth	r0, r3
 8019db6:	9a00      	ldr	r2, [sp, #0]
 8019db8:	fb00 f909 	mul.w	r9, r0, r9
 8019dbc:	00d2      	lsls	r2, r2, #3
 8019dbe:	454c      	cmp	r4, r9
 8019dc0:	db03      	blt.n	8019dca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 8019dc2:	445a      	add	r2, fp
 8019dc4:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8019dc8:	e79f      	b.n	8019d0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8019dca:	eb0b 0302 	add.w	r3, fp, r2
 8019dce:	9a03      	ldr	r2, [sp, #12]
 8019dd0:	4429      	add	r1, r5
 8019dd2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8019dd6:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 8019dda:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8019dde:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8019de2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019de6:	e5aa      	b.n	801993e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019de8:	9b06      	ldr	r3, [sp, #24]
 8019dea:	9c07      	ldr	r4, [sp, #28]
 8019dec:	eba3 020e 	sub.w	r2, r3, lr
 8019df0:	2c06      	cmp	r4, #6
 8019df2:	b292      	uxth	r2, r2
 8019df4:	b213      	sxth	r3, r2
 8019df6:	d80d      	bhi.n	8019e14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 8019df8:	4651      	mov	r1, sl
 8019dfa:	aa0a      	add	r2, sp, #40	; 0x28
 8019dfc:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8019e00:	6849      	ldr	r1, [r1, #4]
 8019e02:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8019e06:	9b05      	ldr	r3, [sp, #20]
 8019e08:	c203      	stmia	r2!, {r0, r1}
 8019e0a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8019e0e:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8019e12:	e759      	b.n	8019cc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8019e14:	9c00      	ldr	r4, [sp, #0]
 8019e16:	4563      	cmp	r3, ip
 8019e18:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8019e1c:	db0d      	blt.n	8019e3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 8019e1e:	4429      	add	r1, r5
 8019e20:	9a04      	ldr	r2, [sp, #16]
 8019e22:	445c      	add	r4, fp
 8019e24:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019e28:	b289      	uxth	r1, r1
 8019e2a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 8019e2e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8019e32:	4411      	add	r1, r2
 8019e34:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8019e38:	e581      	b.n	801993e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019e3a:	445c      	add	r4, fp
 8019e3c:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8019e40:	e79f      	b.n	8019d82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8019e42:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8019e46:	2f07      	cmp	r7, #7
 8019e48:	d806      	bhi.n	8019e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8019e4a:	ab08      	add	r3, sp, #32
 8019e4c:	9801      	ldr	r0, [sp, #4]
 8019e4e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019e52:	f7ff fd45 	bl	80198e0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019e56:	e5dc      	b.n	8019a12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8019e58:	f107 39ff 	add.w	r9, r7, #4294967295
 8019e5c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8019e60:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8019e64:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8019e68:	f04f 35ff 	mov.w	r5, #4294967295
 8019e6c:	2400      	movs	r4, #0
 8019e6e:	9304      	str	r3, [sp, #16]
 8019e70:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8019e74:	f109 32ff 	add.w	r2, r9, #4294967295
 8019e78:	9300      	str	r3, [sp, #0]
 8019e7a:	4690      	mov	r8, r2
 8019e7c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8019e80:	9303      	str	r3, [sp, #12]
 8019e82:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8019e86:	f1b8 3fff 	cmp.w	r8, #4294967295
 8019e8a:	6818      	ldr	r0, [r3, #0]
 8019e8c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8019e90:	9206      	str	r2, [sp, #24]
 8019e92:	bf16      	itet	ne
 8019e94:	9904      	ldrne	r1, [sp, #16]
 8019e96:	f8dd e008 	ldreq.w	lr, [sp, #8]
 8019e9a:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 8019e9e:	9305      	str	r3, [sp, #20]
 8019ea0:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8019ea4:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8019ea8:	fb16 f601 	smulbb	r6, r6, r1
 8019eac:	6859      	ldr	r1, [r3, #4]
 8019eae:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019eb2:	4671      	mov	r1, lr
 8019eb4:	a80a      	add	r0, sp, #40	; 0x28
 8019eb6:	f7ff fc51 	bl	801975c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019eba:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8019ebe:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8019ec2:	9b03      	ldr	r3, [sp, #12]
 8019ec4:	9a00      	ldr	r2, [sp, #0]
 8019ec6:	fb11 f100 	smulbb	r1, r1, r0
 8019eca:	2008      	movs	r0, #8
 8019ecc:	fb02 6603 	mla	r6, r2, r3, r6
 8019ed0:	1b8e      	subs	r6, r1, r6
 8019ed2:	fb91 f1f0 	sdiv	r1, r1, r0
 8019ed6:	42b1      	cmp	r1, r6
 8019ed8:	dc21      	bgt.n	8019f1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8019eda:	4556      	cmp	r6, sl
 8019edc:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8019ee0:	da03      	bge.n	8019eea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 8019ee2:	b1e6      	cbz	r6, 8019f1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8019ee4:	46b2      	mov	sl, r6
 8019ee6:	4645      	mov	r5, r8
 8019ee8:	464c      	mov	r4, r9
 8019eea:	f108 38ff 	add.w	r8, r8, #4294967295
 8019eee:	f118 0f02 	cmn.w	r8, #2
 8019ef2:	d1c8      	bne.n	8019e86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 8019ef4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019ef8:	f1a7 0708 	sub.w	r7, r7, #8
 8019efc:	4691      	mov	r9, r2
 8019efe:	d1b7      	bne.n	8019e70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8019f00:	9b01      	ldr	r3, [sp, #4]
 8019f02:	b2a6      	uxth	r6, r4
 8019f04:	00e4      	lsls	r4, r4, #3
 8019f06:	1918      	adds	r0, r3, r4
 8019f08:	1c6b      	adds	r3, r5, #1
 8019f0a:	d10b      	bne.n	8019f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 8019f0c:	4601      	mov	r1, r0
 8019f0e:	9802      	ldr	r0, [sp, #8]
 8019f10:	f7ff fc24 	bl	801975c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019f14:	4631      	mov	r1, r6
 8019f16:	9801      	ldr	r0, [sp, #4]
 8019f18:	f7ff fccc 	bl	80198b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019f1c:	e50f      	b.n	801993e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019f1e:	4645      	mov	r5, r8
 8019f20:	464c      	mov	r4, r9
 8019f22:	e7ed      	b.n	8019f00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8019f24:	9b01      	ldr	r3, [sp, #4]
 8019f26:	00ed      	lsls	r5, r5, #3
 8019f28:	445c      	add	r4, fp
 8019f2a:	1959      	adds	r1, r3, r5
 8019f2c:	445d      	add	r5, fp
 8019f2e:	f7ff fc15 	bl	801975c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019f32:	9b02      	ldr	r3, [sp, #8]
 8019f34:	cb03      	ldmia	r3!, {r0, r1}
 8019f36:	9b02      	ldr	r3, [sp, #8]
 8019f38:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8019f3c:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8019f40:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8019f44:	6861      	ldr	r1, [r4, #4]
 8019f46:	c303      	stmia	r3!, {r0, r1}
 8019f48:	e7e4      	b.n	8019f14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

08019f4c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019f4c:	4b1d      	ldr	r3, [pc, #116]	; (8019fc4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8019f4e:	b530      	push	{r4, r5, lr}
 8019f50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f54:	b085      	sub	sp, #20
 8019f56:	4b1c      	ldr	r3, [pc, #112]	; (8019fc8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8019f58:	460c      	mov	r4, r1
 8019f5a:	2100      	movs	r1, #0
 8019f5c:	4605      	mov	r5, r0
 8019f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019f62:	6820      	ldr	r0, [r4, #0]
 8019f64:	9100      	str	r1, [sp, #0]
 8019f66:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019f6a:	ab02      	add	r3, sp, #8
 8019f6c:	6861      	ldr	r1, [r4, #4]
 8019f6e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019f72:	c303      	stmia	r3!, {r0, r1}
 8019f74:	4669      	mov	r1, sp
 8019f76:	a802      	add	r0, sp, #8
 8019f78:	f7fb fdd8 	bl	8015b2c <_ZN8touchgfx4RectaNERKS0_>
 8019f7c:	ab02      	add	r3, sp, #8
 8019f7e:	cb03      	ldmia	r3!, {r0, r1}
 8019f80:	4b12      	ldr	r3, [pc, #72]	; (8019fcc <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8019f82:	6020      	str	r0, [r4, #0]
 8019f84:	6818      	ldr	r0, [r3, #0]
 8019f86:	6061      	str	r1, [r4, #4]
 8019f88:	b138      	cbz	r0, 8019f9a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8019f8a:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8019f8e:	b133      	cbz	r3, 8019f9e <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8019f90:	6821      	ldr	r1, [r4, #0]
 8019f92:	4628      	mov	r0, r5
 8019f94:	6862      	ldr	r2, [r4, #4]
 8019f96:	f7ff fcc5 	bl	8019924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019f9a:	b005      	add	sp, #20
 8019f9c:	bd30      	pop	{r4, r5, pc}
 8019f9e:	6803      	ldr	r3, [r0, #0]
 8019fa0:	4621      	mov	r1, r4
 8019fa2:	689b      	ldr	r3, [r3, #8]
 8019fa4:	4798      	blx	r3
 8019fa6:	4b0a      	ldr	r3, [pc, #40]	; (8019fd0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8019fa8:	6818      	ldr	r0, [r3, #0]
 8019faa:	b118      	cbz	r0, 8019fb4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8019fac:	6803      	ldr	r3, [r0, #0]
 8019fae:	4621      	mov	r1, r4
 8019fb0:	689b      	ldr	r3, [r3, #8]
 8019fb2:	4798      	blx	r3
 8019fb4:	4b07      	ldr	r3, [pc, #28]	; (8019fd4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8019fb6:	4621      	mov	r1, r4
 8019fb8:	6818      	ldr	r0, [r3, #0]
 8019fba:	6803      	ldr	r3, [r0, #0]
 8019fbc:	699b      	ldr	r3, [r3, #24]
 8019fbe:	4798      	blx	r3
 8019fc0:	e7eb      	b.n	8019f9a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8019fc2:	bf00      	nop
 8019fc4:	20056770 	.word	0x20056770
 8019fc8:	20056772 	.word	0x20056772
 8019fcc:	200567d8 	.word	0x200567d8
 8019fd0:	200567d4 	.word	0x200567d4
 8019fd4:	2005677c 	.word	0x2005677c

08019fd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8019fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fdc:	4604      	mov	r4, r0
 8019fde:	b09b      	sub	sp, #108	; 0x6c
 8019fe0:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8019fe4:	b129      	cbz	r1, 8019ff2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8019fe6:	2300      	movs	r3, #0
 8019fe8:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8019fec:	b01b      	add	sp, #108	; 0x6c
 8019fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ff2:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8019ff6:	4630      	mov	r0, r6
 8019ff8:	f7fb fddb 	bl	8015bb2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019ffc:	4605      	mov	r5, r0
 8019ffe:	b940      	cbnz	r0, 801a012 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801a000:	4620      	mov	r0, r4
 801a002:	e896 0006 	ldmia.w	r6, {r1, r2}
 801a006:	f7ff fc8d 	bl	8019924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a00a:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801a00e:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801a012:	4ba6      	ldr	r3, [pc, #664]	; (801a2ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	b33b      	cbz	r3, 801a068 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801a018:	4da5      	ldr	r5, [pc, #660]	; (801a2b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801a01a:	4628      	mov	r0, r5
 801a01c:	f7fb fdc9 	bl	8015bb2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a020:	4606      	mov	r6, r0
 801a022:	bb08      	cbnz	r0, 801a068 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801a024:	4628      	mov	r0, r5
 801a026:	f7ff fa1d 	bl	8019464 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a02a:	6829      	ldr	r1, [r5, #0]
 801a02c:	686a      	ldr	r2, [r5, #4]
 801a02e:	4620      	mov	r0, r4
 801a030:	f7ff fc78 	bl	8019924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a034:	802e      	strh	r6, [r5, #0]
 801a036:	806e      	strh	r6, [r5, #2]
 801a038:	80ae      	strh	r6, [r5, #4]
 801a03a:	80ee      	strh	r6, [r5, #6]
 801a03c:	4f9d      	ldr	r7, [pc, #628]	; (801a2b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801a03e:	a809      	add	r0, sp, #36	; 0x24
 801a040:	f7ff fbe3 	bl	801980a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a044:	883d      	ldrh	r5, [r7, #0]
 801a046:	462e      	mov	r6, r5
 801a048:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a04c:	42b3      	cmp	r3, r6
 801a04e:	d910      	bls.n	801a072 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801a050:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a054:	3601      	adds	r6, #1
 801a056:	a809      	add	r0, sp, #36	; 0x24
 801a058:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801a05c:	b2b6      	uxth	r6, r6
 801a05e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801a062:	f7ff fc3d 	bl	80198e0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a066:	e7ef      	b.n	801a048 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801a068:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	d1e5      	bne.n	801a03c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801a070:	e7bc      	b.n	8019fec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a072:	462e      	mov	r6, r5
 801a074:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801a078:	42b3      	cmp	r3, r6
 801a07a:	d90b      	bls.n	801a094 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801a07c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a080:	3601      	adds	r6, #1
 801a082:	4620      	mov	r0, r4
 801a084:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801a088:	b2b6      	uxth	r6, r6
 801a08a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801a08e:	f7ff fc49 	bl	8019924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a092:	e7ef      	b.n	801a074 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801a094:	4a88      	ldr	r2, [pc, #544]	; (801a2b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801a096:	6813      	ldr	r3, [r2, #0]
 801a098:	4690      	mov	r8, r2
 801a09a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801a09e:	2b01      	cmp	r3, #1
 801a0a0:	f040 8094 	bne.w	801a1cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801a0a4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801a0a8:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801a0ac:	f04f 0900 	mov.w	r9, #0
 801a0b0:	33aa      	adds	r3, #170	; 0xaa
 801a0b2:	42a8      	cmp	r0, r5
 801a0b4:	f103 0308 	add.w	r3, r3, #8
 801a0b8:	dd0a      	ble.n	801a0d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801a0ba:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801a0be:	3501      	adds	r5, #1
 801a0c0:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801a0c4:	440a      	add	r2, r1
 801a0c6:	b212      	sxth	r2, r2
 801a0c8:	4591      	cmp	r9, r2
 801a0ca:	bfb8      	it	lt
 801a0cc:	4691      	movlt	r9, r2
 801a0ce:	e7f0      	b.n	801a0b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801a0d0:	4b7a      	ldr	r3, [pc, #488]	; (801a2bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801a0d2:	4e7b      	ldr	r6, [pc, #492]	; (801a2c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801a0d4:	881d      	ldrh	r5, [r3, #0]
 801a0d6:	2300      	movs	r3, #0
 801a0d8:	2d0f      	cmp	r5, #15
 801a0da:	bf8c      	ite	hi
 801a0dc:	08ed      	lsrhi	r5, r5, #3
 801a0de:	2501      	movls	r5, #1
 801a0e0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801a0e4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a0e8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801a0ec:	f8d8 0000 	ldr.w	r0, [r8]
 801a0f0:	440b      	add	r3, r1
 801a0f2:	6802      	ldr	r2, [r0, #0]
 801a0f4:	b21b      	sxth	r3, r3
 801a0f6:	4599      	cmp	r9, r3
 801a0f8:	dd4b      	ble.n	801a192 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801a0fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 801a0fe:	4798      	blx	r3
 801a100:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a104:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a108:	4413      	add	r3, r2
 801a10a:	b21b      	sxth	r3, r3
 801a10c:	195a      	adds	r2, r3, r5
 801a10e:	4290      	cmp	r0, r2
 801a110:	da07      	bge.n	801a122 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801a112:	4581      	cmp	r9, r0
 801a114:	dd05      	ble.n	801a122 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801a116:	4298      	cmp	r0, r3
 801a118:	da33      	bge.n	801a182 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	dd31      	ble.n	801a182 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801a11e:	4648      	mov	r0, r9
 801a120:	e004      	b.n	801a12c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801a122:	4298      	cmp	r0, r3
 801a124:	dbfb      	blt.n	801a11e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801a126:	4548      	cmp	r0, r9
 801a128:	bfa8      	it	ge
 801a12a:	4648      	movge	r0, r9
 801a12c:	f9b6 2000 	ldrsh.w	r2, [r6]
 801a130:	2100      	movs	r1, #0
 801a132:	1ac0      	subs	r0, r0, r3
 801a134:	f8b7 a000 	ldrh.w	sl, [r7]
 801a138:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a13c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a140:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a144:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a148:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a14c:	4553      	cmp	r3, sl
 801a14e:	d9c9      	bls.n	801a0e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801a150:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801a154:	ab07      	add	r3, sp, #28
 801a156:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a15a:	6851      	ldr	r1, [r2, #4]
 801a15c:	c303      	stmia	r3!, {r0, r1}
 801a15e:	a807      	add	r0, sp, #28
 801a160:	a905      	add	r1, sp, #20
 801a162:	f7fb fce3 	bl	8015b2c <_ZN8touchgfx4RectaNERKS0_>
 801a166:	a807      	add	r0, sp, #28
 801a168:	f7fb fd23 	bl	8015bb2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a16c:	b920      	cbnz	r0, 801a178 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801a16e:	6823      	ldr	r3, [r4, #0]
 801a170:	a907      	add	r1, sp, #28
 801a172:	4620      	mov	r0, r4
 801a174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a176:	4798      	blx	r3
 801a178:	f10a 0a01 	add.w	sl, sl, #1
 801a17c:	fa1f fa8a 	uxth.w	sl, sl
 801a180:	e7e2      	b.n	801a148 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801a182:	f8d8 0000 	ldr.w	r0, [r8]
 801a186:	2101      	movs	r1, #1
 801a188:	6803      	ldr	r3, [r0, #0]
 801a18a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a18e:	4798      	blx	r3
 801a190:	e7a8      	b.n	801a0e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801a192:	6a13      	ldr	r3, [r2, #32]
 801a194:	4798      	blx	r3
 801a196:	4b4b      	ldr	r3, [pc, #300]	; (801a2c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801a198:	781b      	ldrb	r3, [r3, #0]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	f43f af26 	beq.w	8019fec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a1a0:	2300      	movs	r3, #0
 801a1a2:	883d      	ldrh	r5, [r7, #0]
 801a1a4:	34ea      	adds	r4, #234	; 0xea
 801a1a6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801a1aa:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801a1ae:	42ab      	cmp	r3, r5
 801a1b0:	f67f af1c 	bls.w	8019fec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a1b4:	ab1a      	add	r3, sp, #104	; 0x68
 801a1b6:	4620      	mov	r0, r4
 801a1b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a1bc:	3501      	adds	r5, #1
 801a1be:	3b44      	subs	r3, #68	; 0x44
 801a1c0:	b2ad      	uxth	r5, r5
 801a1c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a1c6:	f7ff fb8b 	bl	80198e0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a1ca:	e7ee      	b.n	801a1aa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801a1cc:	2b02      	cmp	r3, #2
 801a1ce:	f040 813d 	bne.w	801a44c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801a1d2:	4b3d      	ldr	r3, [pc, #244]	; (801a2c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801a1d4:	781b      	ldrb	r3, [r3, #0]
 801a1d6:	2b01      	cmp	r3, #1
 801a1d8:	d02c      	beq.n	801a234 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801a1da:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801a1de:	883a      	ldrh	r2, [r7, #0]
 801a1e0:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801a1e4:	3201      	adds	r2, #1
 801a1e6:	b292      	uxth	r2, r2
 801a1e8:	2900      	cmp	r1, #0
 801a1ea:	d0d4      	beq.n	801a196 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801a1ec:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801a1f0:	4610      	mov	r0, r2
 801a1f2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801a1f6:	f04f 0a00 	mov.w	sl, #0
 801a1fa:	441d      	add	r5, r3
 801a1fc:	b22d      	sxth	r5, r5
 801a1fe:	b283      	uxth	r3, r0
 801a200:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801a204:	4299      	cmp	r1, r3
 801a206:	f240 80c3 	bls.w	801a390 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801a20a:	4426      	add	r6, r4
 801a20c:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801a210:	4684      	mov	ip, r0
 801a212:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801a216:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801a21a:	4573      	cmp	r3, lr
 801a21c:	f340 80a5 	ble.w	801a36a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801a220:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801a224:	4475      	add	r5, lr
 801a226:	b22d      	sxth	r5, r5
 801a228:	429d      	cmp	r5, r3
 801a22a:	bfa8      	it	ge
 801a22c:	461d      	movge	r5, r3
 801a22e:	3001      	adds	r0, #1
 801a230:	46e2      	mov	sl, ip
 801a232:	e7e4      	b.n	801a1fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801a234:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801a238:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801a23c:	f1bb 0f00 	cmp.w	fp, #0
 801a240:	d0a9      	beq.n	801a196 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801a242:	883b      	ldrh	r3, [r7, #0]
 801a244:	2600      	movs	r6, #0
 801a246:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801a24a:	3301      	adds	r3, #1
 801a24c:	b29b      	uxth	r3, r3
 801a24e:	b299      	uxth	r1, r3
 801a250:	00f5      	lsls	r5, r6, #3
 801a252:	458b      	cmp	fp, r1
 801a254:	d93a      	bls.n	801a2cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801a256:	4425      	add	r5, r4
 801a258:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801a25c:	469c      	mov	ip, r3
 801a25e:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801a262:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801a266:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801a26a:	4408      	add	r0, r1
 801a26c:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801a270:	4471      	add	r1, lr
 801a272:	b200      	sxth	r0, r0
 801a274:	b209      	sxth	r1, r1
 801a276:	4288      	cmp	r0, r1
 801a278:	da06      	bge.n	801a288 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801a27a:	4586      	cmp	lr, r0
 801a27c:	4672      	mov	r2, lr
 801a27e:	bfb8      	it	lt
 801a280:	4602      	movlt	r2, r0
 801a282:	3301      	adds	r3, #1
 801a284:	4666      	mov	r6, ip
 801a286:	e7e2      	b.n	801a24e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801a288:	d10b      	bne.n	801a2a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801a28a:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801a28e:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801a292:	458c      	cmp	ip, r1
 801a294:	bfb4      	ite	lt
 801a296:	469c      	movlt	ip, r3
 801a298:	46b4      	movge	ip, r6
 801a29a:	4572      	cmp	r2, lr
 801a29c:	bfb8      	it	lt
 801a29e:	4672      	movlt	r2, lr
 801a2a0:	e7ef      	b.n	801a282 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801a2a2:	428a      	cmp	r2, r1
 801a2a4:	46b4      	mov	ip, r6
 801a2a6:	bfb8      	it	lt
 801a2a8:	460a      	movlt	r2, r1
 801a2aa:	e7ea      	b.n	801a282 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801a2ac:	200567d4 	.word	0x200567d4
 801a2b0:	200567e0 	.word	0x200567e0
 801a2b4:	20000024 	.word	0x20000024
 801a2b8:	2005677c 	.word	0x2005677c
 801a2bc:	20056772 	.word	0x20056772
 801a2c0:	20056770 	.word	0x20056770
 801a2c4:	2005677a 	.word	0x2005677a
 801a2c8:	20056774 	.word	0x20056774
 801a2cc:	1961      	adds	r1, r4, r5
 801a2ce:	ab07      	add	r3, sp, #28
 801a2d0:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801a2d4:	6849      	ldr	r1, [r1, #4]
 801a2d6:	c303      	stmia	r3!, {r0, r1}
 801a2d8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801a2dc:	a807      	add	r0, sp, #28
 801a2de:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a2e2:	2b13      	cmp	r3, #19
 801a2e4:	440b      	add	r3, r1
 801a2e6:	bfd8      	it	le
 801a2e8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801a2ec:	1a9b      	subs	r3, r3, r2
 801a2ee:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a2f2:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a2f6:	f7ff f90f 	bl	8019518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a2fa:	a807      	add	r0, sp, #28
 801a2fc:	f7fb fc59 	bl	8015bb2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a300:	2800      	cmp	r0, #0
 801a302:	d199      	bne.n	801a238 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801a304:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801a308:	4425      	add	r5, r4
 801a30a:	f8d8 0000 	ldr.w	r0, [r8]
 801a30e:	f1bc 0f14 	cmp.w	ip, #20
 801a312:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a316:	f8d0 e000 	ldr.w	lr, [r0]
 801a31a:	bfa8      	it	ge
 801a31c:	f04f 0c14 	movge.w	ip, #20
 801a320:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801a324:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a328:	fa1f fc8c 	uxth.w	ip, ip
 801a32c:	f8cd c000 	str.w	ip, [sp]
 801a330:	f8de a084 	ldr.w	sl, [lr, #132]	; 0x84
 801a334:	47d0      	blx	sl
 801a336:	4682      	mov	sl, r0
 801a338:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801a33c:	a807      	add	r0, sp, #28
 801a33e:	f7ff f891 	bl	8019464 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a342:	6823      	ldr	r3, [r4, #0]
 801a344:	4620      	mov	r0, r4
 801a346:	a907      	add	r1, sp, #28
 801a348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a34a:	4798      	blx	r3
 801a34c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801a350:	eba0 000a 	sub.w	r0, r0, sl
 801a354:	b200      	sxth	r0, r0
 801a356:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801a35a:	2800      	cmp	r0, #0
 801a35c:	f47f af6c 	bne.w	801a238 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801a360:	b2b1      	uxth	r1, r6
 801a362:	4648      	mov	r0, r9
 801a364:	f7ff faa6 	bl	80198b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a368:	e766      	b.n	801a238 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801a36a:	d10c      	bne.n	801a386 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801a36c:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801a370:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801a374:	45b4      	cmp	ip, r6
 801a376:	bfb4      	ite	lt
 801a378:	4684      	movlt	ip, r0
 801a37a:	46d4      	movge	ip, sl
 801a37c:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801a380:	4433      	add	r3, r6
 801a382:	b21b      	sxth	r3, r3
 801a384:	e750      	b.n	801a228 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801a386:	4575      	cmp	r5, lr
 801a388:	46d4      	mov	ip, sl
 801a38a:	bfa8      	it	ge
 801a38c:	4675      	movge	r5, lr
 801a38e:	e74e      	b.n	801a22e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801a390:	eb0b 0006 	add.w	r0, fp, r6
 801a394:	4426      	add	r6, r4
 801a396:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801a39a:	f1b9 0f13 	cmp.w	r9, #19
 801a39e:	bfdc      	itt	le
 801a3a0:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801a3a4:	444d      	addle	r5, r9
 801a3a6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801a3aa:	bfd8      	it	le
 801a3ac:	b22d      	sxthle	r5, r5
 801a3ae:	f7fb fc00 	bl	8015bb2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a3b2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801a3b6:	2800      	cmp	r0, #0
 801a3b8:	f47f af16 	bne.w	801a1e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801a3bc:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801a3c0:	fa1f f989 	uxth.w	r9, r9
 801a3c4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801a3c8:	eba5 050c 	sub.w	r5, r5, ip
 801a3cc:	fa1f f28c 	uxth.w	r2, ip
 801a3d0:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801a3d4:	eb02 0009 	add.w	r0, r2, r9
 801a3d8:	2d14      	cmp	r5, #20
 801a3da:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801a3de:	bfa8      	it	ge
 801a3e0:	2514      	movge	r5, #20
 801a3e2:	b200      	sxth	r0, r0
 801a3e4:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a3e8:	b289      	uxth	r1, r1
 801a3ea:	fa1f fe85 	uxth.w	lr, r5
 801a3ee:	eba0 000c 	sub.w	r0, r0, ip
 801a3f2:	f8ad c01e 	strh.w	ip, [sp, #30]
 801a3f6:	4586      	cmp	lr, r0
 801a3f8:	f8d8 0000 	ldr.w	r0, [r8]
 801a3fc:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a400:	b29b      	uxth	r3, r3
 801a402:	bfb8      	it	lt
 801a404:	46f1      	movlt	r9, lr
 801a406:	6805      	ldr	r5, [r0, #0]
 801a408:	f8cd 9000 	str.w	r9, [sp]
 801a40c:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
 801a410:	47a8      	blx	r5
 801a412:	6823      	ldr	r3, [r4, #0]
 801a414:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801a418:	a907      	add	r1, sp, #28
 801a41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a41c:	4620      	mov	r0, r4
 801a41e:	4798      	blx	r3
 801a420:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801a424:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801a428:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801a42c:	1a5b      	subs	r3, r3, r1
 801a42e:	440a      	add	r2, r1
 801a430:	b21b      	sxth	r3, r3
 801a432:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801a436:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	f47f aecf 	bne.w	801a1de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801a440:	fa1f f18a 	uxth.w	r1, sl
 801a444:	4658      	mov	r0, fp
 801a446:	f7ff fa35 	bl	80198b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a44a:	e6c8      	b.n	801a1de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801a44c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a450:	42ab      	cmp	r3, r5
 801a452:	f67f aea0 	bls.w	801a196 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801a456:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801a45a:	ab07      	add	r3, sp, #28
 801a45c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a460:	6851      	ldr	r1, [r2, #4]
 801a462:	c303      	stmia	r3!, {r0, r1}
 801a464:	a807      	add	r0, sp, #28
 801a466:	f7fb fba4 	bl	8015bb2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a46a:	b920      	cbnz	r0, 801a476 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801a46c:	6823      	ldr	r3, [r4, #0]
 801a46e:	a907      	add	r1, sp, #28
 801a470:	4620      	mov	r0, r4
 801a472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a474:	4798      	blx	r3
 801a476:	3501      	adds	r5, #1
 801a478:	b2ad      	uxth	r5, r5
 801a47a:	e7e7      	b.n	801a44c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0801a47c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801a47c:	4b03      	ldr	r3, [pc, #12]	; (801a48c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801a47e:	2200      	movs	r2, #0
 801a480:	801a      	strh	r2, [r3, #0]
 801a482:	805a      	strh	r2, [r3, #2]
 801a484:	809a      	strh	r2, [r3, #4]
 801a486:	80da      	strh	r2, [r3, #6]
 801a488:	4770      	bx	lr
 801a48a:	bf00      	nop
 801a48c:	200567e0 	.word	0x200567e0

0801a490 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801a490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a494:	b09b      	sub	sp, #108	; 0x6c
 801a496:	4606      	mov	r6, r0
 801a498:	4614      	mov	r4, r2
 801a49a:	468a      	mov	sl, r1
 801a49c:	a803      	add	r0, sp, #12
 801a49e:	461d      	mov	r5, r3
 801a4a0:	f000 fe85 	bl	801b1ae <_ZN8touchgfx12TextProviderC1Ev>
 801a4a4:	6833      	ldr	r3, [r6, #0]
 801a4a6:	4630      	mov	r0, r6
 801a4a8:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801a4ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4ae:	4798      	blx	r3
 801a4b0:	6833      	ldr	r3, [r6, #0]
 801a4b2:	4607      	mov	r7, r0
 801a4b4:	4630      	mov	r0, r6
 801a4b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a4b8:	4798      	blx	r3
 801a4ba:	462a      	mov	r2, r5
 801a4bc:	2500      	movs	r5, #0
 801a4be:	4621      	mov	r1, r4
 801a4c0:	9000      	str	r0, [sp, #0]
 801a4c2:	463b      	mov	r3, r7
 801a4c4:	462c      	mov	r4, r5
 801a4c6:	46a9      	mov	r9, r5
 801a4c8:	46a8      	mov	r8, r5
 801a4ca:	a803      	add	r0, sp, #12
 801a4cc:	f000 febc 	bl	801b248 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a4d0:	2300      	movs	r3, #0
 801a4d2:	9302      	str	r3, [sp, #8]
 801a4d4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a4d8:	429c      	cmp	r4, r3
 801a4da:	d002      	beq.n	801a4e2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801a4dc:	455c      	cmp	r4, fp
 801a4de:	bf18      	it	ne
 801a4e0:	4625      	movne	r5, r4
 801a4e2:	ab02      	add	r3, sp, #8
 801a4e4:	4632      	mov	r2, r6
 801a4e6:	4651      	mov	r1, sl
 801a4e8:	a803      	add	r0, sp, #12
 801a4ea:	f001 f9a9 	bl	801b840 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a4ee:	4604      	mov	r4, r0
 801a4f0:	b108      	cbz	r0, 801a4f6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801a4f2:	280a      	cmp	r0, #10
 801a4f4:	d10a      	bne.n	801a50c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801a4f6:	45c1      	cmp	r9, r8
 801a4f8:	bf38      	it	cc
 801a4fa:	46c1      	movcc	r9, r8
 801a4fc:	f04f 0800 	mov.w	r8, #0
 801a500:	2c00      	cmp	r4, #0
 801a502:	d1e5      	bne.n	801a4d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a504:	4648      	mov	r0, r9
 801a506:	b01b      	add	sp, #108	; 0x6c
 801a508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a50c:	9a02      	ldr	r2, [sp, #8]
 801a50e:	2a00      	cmp	r2, #0
 801a510:	d0de      	beq.n	801a4d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a512:	7b57      	ldrb	r7, [r2, #13]
 801a514:	4629      	mov	r1, r5
 801a516:	6833      	ldr	r3, [r6, #0]
 801a518:	007f      	lsls	r7, r7, #1
 801a51a:	8894      	ldrh	r4, [r2, #4]
 801a51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a51e:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801a522:	7a97      	ldrb	r7, [r2, #10]
 801a524:	4307      	orrs	r7, r0
 801a526:	4630      	mov	r0, r6
 801a528:	4798      	blx	r3
 801a52a:	4438      	add	r0, r7
 801a52c:	4480      	add	r8, r0
 801a52e:	fa1f f888 	uxth.w	r8, r8
 801a532:	e7e5      	b.n	801a500 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801a534 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801a534:	b508      	push	{r3, lr}
 801a536:	6803      	ldr	r3, [r0, #0]
 801a538:	68db      	ldr	r3, [r3, #12]
 801a53a:	4798      	blx	r3
 801a53c:	b128      	cbz	r0, 801a54a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801a53e:	7b43      	ldrb	r3, [r0, #13]
 801a540:	7a80      	ldrb	r0, [r0, #10]
 801a542:	005b      	lsls	r3, r3, #1
 801a544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a548:	4318      	orrs	r0, r3
 801a54a:	bd08      	pop	{r3, pc}

0801a54c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801a54c:	b40e      	push	{r1, r2, r3}
 801a54e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a550:	b09c      	sub	sp, #112	; 0x70
 801a552:	4605      	mov	r5, r0
 801a554:	ab21      	add	r3, sp, #132	; 0x84
 801a556:	a805      	add	r0, sp, #20
 801a558:	f853 4b04 	ldr.w	r4, [r3], #4
 801a55c:	9303      	str	r3, [sp, #12]
 801a55e:	f000 fe26 	bl	801b1ae <_ZN8touchgfx12TextProviderC1Ev>
 801a562:	682b      	ldr	r3, [r5, #0]
 801a564:	4628      	mov	r0, r5
 801a566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a568:	4798      	blx	r3
 801a56a:	682b      	ldr	r3, [r5, #0]
 801a56c:	4606      	mov	r6, r0
 801a56e:	4628      	mov	r0, r5
 801a570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a572:	4798      	blx	r3
 801a574:	4633      	mov	r3, r6
 801a576:	4621      	mov	r1, r4
 801a578:	ae1c      	add	r6, sp, #112	; 0x70
 801a57a:	2400      	movs	r4, #0
 801a57c:	9000      	str	r0, [sp, #0]
 801a57e:	9a03      	ldr	r2, [sp, #12]
 801a580:	a805      	add	r0, sp, #20
 801a582:	f000 fe61 	bl	801b248 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a586:	f846 4d60 	str.w	r4, [r6, #-96]!
 801a58a:	462a      	mov	r2, r5
 801a58c:	4633      	mov	r3, r6
 801a58e:	4621      	mov	r1, r4
 801a590:	a805      	add	r0, sp, #20
 801a592:	f001 f955 	bl	801b840 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a596:	b300      	cbz	r0, 801a5da <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801a598:	280a      	cmp	r0, #10
 801a59a:	d01a      	beq.n	801a5d2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a59c:	9f04      	ldr	r7, [sp, #16]
 801a59e:	b1c7      	cbz	r7, 801a5d2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a5a0:	7b78      	ldrb	r0, [r7, #13]
 801a5a2:	7a3b      	ldrb	r3, [r7, #8]
 801a5a4:	00c1      	lsls	r1, r0, #3
 801a5a6:	88aa      	ldrh	r2, [r5, #4]
 801a5a8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a5ac:	4319      	orrs	r1, r3
 801a5ae:	0643      	lsls	r3, r0, #25
 801a5b0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801a5b4:	bf48      	it	mi
 801a5b6:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801a5ba:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801a5be:	bf48      	it	mi
 801a5c0:	b219      	sxthmi	r1, r3
 801a5c2:	79fb      	ldrb	r3, [r7, #7]
 801a5c4:	4303      	orrs	r3, r0
 801a5c6:	4413      	add	r3, r2
 801a5c8:	1a5b      	subs	r3, r3, r1
 801a5ca:	b29b      	uxth	r3, r3
 801a5cc:	42a3      	cmp	r3, r4
 801a5ce:	bfc8      	it	gt
 801a5d0:	b21c      	sxthgt	r4, r3
 801a5d2:	4633      	mov	r3, r6
 801a5d4:	462a      	mov	r2, r5
 801a5d6:	2100      	movs	r1, #0
 801a5d8:	e7da      	b.n	801a590 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801a5da:	b2a0      	uxth	r0, r4
 801a5dc:	b01c      	add	sp, #112	; 0x70
 801a5de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a5e2:	b003      	add	sp, #12
 801a5e4:	4770      	bx	lr

0801a5e6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801a5e6:	b40e      	push	{r1, r2, r3}
 801a5e8:	b570      	push	{r4, r5, r6, lr}
 801a5ea:	b09b      	sub	sp, #108	; 0x6c
 801a5ec:	4604      	mov	r4, r0
 801a5ee:	ab1f      	add	r3, sp, #124	; 0x7c
 801a5f0:	a803      	add	r0, sp, #12
 801a5f2:	f853 5b04 	ldr.w	r5, [r3], #4
 801a5f6:	9302      	str	r3, [sp, #8]
 801a5f8:	f000 fdd9 	bl	801b1ae <_ZN8touchgfx12TextProviderC1Ev>
 801a5fc:	6823      	ldr	r3, [r4, #0]
 801a5fe:	4620      	mov	r0, r4
 801a600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a602:	4798      	blx	r3
 801a604:	6823      	ldr	r3, [r4, #0]
 801a606:	4606      	mov	r6, r0
 801a608:	4620      	mov	r0, r4
 801a60a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a60c:	2401      	movs	r4, #1
 801a60e:	4798      	blx	r3
 801a610:	4633      	mov	r3, r6
 801a612:	9000      	str	r0, [sp, #0]
 801a614:	4629      	mov	r1, r5
 801a616:	9a02      	ldr	r2, [sp, #8]
 801a618:	a803      	add	r0, sp, #12
 801a61a:	f000 fe15 	bl	801b248 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a61e:	a803      	add	r0, sp, #12
 801a620:	f001 fa06 	bl	801ba30 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a624:	b2a3      	uxth	r3, r4
 801a626:	b138      	cbz	r0, 801a638 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801a628:	280a      	cmp	r0, #10
 801a62a:	a803      	add	r0, sp, #12
 801a62c:	bf04      	itt	eq
 801a62e:	3301      	addeq	r3, #1
 801a630:	b21c      	sxtheq	r4, r3
 801a632:	f001 f9fd 	bl	801ba30 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a636:	e7f5      	b.n	801a624 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801a638:	4618      	mov	r0, r3
 801a63a:	b01b      	add	sp, #108	; 0x6c
 801a63c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a640:	b003      	add	sp, #12
 801a642:	4770      	bx	lr

0801a644 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801a644:	b40e      	push	{r1, r2, r3}
 801a646:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a648:	b09c      	sub	sp, #112	; 0x70
 801a64a:	4604      	mov	r4, r0
 801a64c:	ab21      	add	r3, sp, #132	; 0x84
 801a64e:	a805      	add	r0, sp, #20
 801a650:	f853 5b04 	ldr.w	r5, [r3], #4
 801a654:	9303      	str	r3, [sp, #12]
 801a656:	f000 fdaa 	bl	801b1ae <_ZN8touchgfx12TextProviderC1Ev>
 801a65a:	6823      	ldr	r3, [r4, #0]
 801a65c:	4620      	mov	r0, r4
 801a65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a660:	4798      	blx	r3
 801a662:	6823      	ldr	r3, [r4, #0]
 801a664:	4606      	mov	r6, r0
 801a666:	4620      	mov	r0, r4
 801a668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a66a:	4798      	blx	r3
 801a66c:	4633      	mov	r3, r6
 801a66e:	4629      	mov	r1, r5
 801a670:	9000      	str	r0, [sp, #0]
 801a672:	9a03      	ldr	r2, [sp, #12]
 801a674:	a805      	add	r0, sp, #20
 801a676:	f000 fde7 	bl	801b248 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a67a:	ad1c      	add	r5, sp, #112	; 0x70
 801a67c:	2100      	movs	r1, #0
 801a67e:	26ff      	movs	r6, #255	; 0xff
 801a680:	4622      	mov	r2, r4
 801a682:	a805      	add	r0, sp, #20
 801a684:	f845 1d60 	str.w	r1, [r5, #-96]!
 801a688:	462b      	mov	r3, r5
 801a68a:	f001 f8d9 	bl	801b840 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a68e:	b1d8      	cbz	r0, 801a6c8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801a690:	280a      	cmp	r0, #10
 801a692:	d012      	beq.n	801a6ba <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801a694:	9804      	ldr	r0, [sp, #16]
 801a696:	b180      	cbz	r0, 801a6ba <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801a698:	7b47      	ldrb	r7, [r0, #13]
 801a69a:	7922      	ldrb	r2, [r4, #4]
 801a69c:	00fb      	lsls	r3, r7, #3
 801a69e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a6a2:	7a03      	ldrb	r3, [r0, #8]
 801a6a4:	430b      	orrs	r3, r1
 801a6a6:	0679      	lsls	r1, r7, #25
 801a6a8:	bf44      	itt	mi
 801a6aa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a6ae:	b21b      	sxthmi	r3, r3
 801a6b0:	1ad3      	subs	r3, r2, r3
 801a6b2:	b2db      	uxtb	r3, r3
 801a6b4:	429e      	cmp	r6, r3
 801a6b6:	bf28      	it	cs
 801a6b8:	461e      	movcs	r6, r3
 801a6ba:	462b      	mov	r3, r5
 801a6bc:	4622      	mov	r2, r4
 801a6be:	2100      	movs	r1, #0
 801a6c0:	a805      	add	r0, sp, #20
 801a6c2:	f001 f8bd 	bl	801b840 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a6c6:	e7e2      	b.n	801a68e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801a6c8:	4630      	mov	r0, r6
 801a6ca:	b01c      	add	sp, #112	; 0x70
 801a6cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a6d0:	b003      	add	sp, #12
 801a6d2:	4770      	bx	lr

0801a6d4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801a6d4:	b513      	push	{r0, r1, r4, lr}
 801a6d6:	1d01      	adds	r1, r0, #4
 801a6d8:	4603      	mov	r3, r0
 801a6da:	466a      	mov	r2, sp
 801a6dc:	c903      	ldmia	r1, {r0, r1}
 801a6de:	e882 0003 	stmia.w	r2, {r0, r1}
 801a6e2:	2100      	movs	r1, #0
 801a6e4:	4618      	mov	r0, r3
 801a6e6:	9100      	str	r1, [sp, #0]
 801a6e8:	6819      	ldr	r1, [r3, #0]
 801a6ea:	690c      	ldr	r4, [r1, #16]
 801a6ec:	4611      	mov	r1, r2
 801a6ee:	47a0      	blx	r4
 801a6f0:	b002      	add	sp, #8
 801a6f2:	bd10      	pop	{r4, pc}

0801a6f4 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801a6f4:	b538      	push	{r3, r4, r5, lr}
 801a6f6:	680b      	ldr	r3, [r1, #0]
 801a6f8:	460c      	mov	r4, r1
 801a6fa:	4605      	mov	r5, r0
 801a6fc:	68db      	ldr	r3, [r3, #12]
 801a6fe:	4798      	blx	r3
 801a700:	6823      	ldr	r3, [r4, #0]
 801a702:	4620      	mov	r0, r4
 801a704:	4629      	mov	r1, r5
 801a706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a708:	4798      	blx	r3
 801a70a:	4628      	mov	r0, r5
 801a70c:	bd38      	pop	{r3, r4, r5, pc}

0801a70e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801a70e:	b410      	push	{r4}
 801a710:	880a      	ldrh	r2, [r1, #0]
 801a712:	8884      	ldrh	r4, [r0, #4]
 801a714:	4422      	add	r2, r4
 801a716:	800a      	strh	r2, [r1, #0]
 801a718:	884a      	ldrh	r2, [r1, #2]
 801a71a:	88c4      	ldrh	r4, [r0, #6]
 801a71c:	4422      	add	r2, r4
 801a71e:	804a      	strh	r2, [r1, #2]
 801a720:	6940      	ldr	r0, [r0, #20]
 801a722:	b120      	cbz	r0, 801a72e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801a724:	6803      	ldr	r3, [r0, #0]
 801a726:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a72c:	4718      	bx	r3
 801a72e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a732:	4770      	bx	lr

0801a734 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801a734:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a736:	460b      	mov	r3, r1
 801a738:	b085      	sub	sp, #20
 801a73a:	4604      	mov	r4, r0
 801a73c:	b901      	cbnz	r1, 801a740 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801a73e:	b322      	cbz	r2, 801a78a <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 801a740:	1d27      	adds	r7, r4, #4
 801a742:	466e      	mov	r6, sp
 801a744:	88e5      	ldrh	r5, [r4, #6]
 801a746:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a74a:	442a      	add	r2, r5
 801a74c:	e886 0003 	stmia.w	r6, {r0, r1}
 801a750:	88a1      	ldrh	r1, [r4, #4]
 801a752:	4620      	mov	r0, r4
 801a754:	b215      	sxth	r5, r2
 801a756:	4419      	add	r1, r3
 801a758:	6823      	ldr	r3, [r4, #0]
 801a75a:	b209      	sxth	r1, r1
 801a75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a75e:	4798      	blx	r3
 801a760:	6823      	ldr	r3, [r4, #0]
 801a762:	4629      	mov	r1, r5
 801a764:	4620      	mov	r0, r4
 801a766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a768:	ad02      	add	r5, sp, #8
 801a76a:	4798      	blx	r3
 801a76c:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a770:	e885 0003 	stmia.w	r5, {r0, r1}
 801a774:	6960      	ldr	r0, [r4, #20]
 801a776:	b150      	cbz	r0, 801a78e <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 801a778:	6803      	ldr	r3, [r0, #0]
 801a77a:	4631      	mov	r1, r6
 801a77c:	691b      	ldr	r3, [r3, #16]
 801a77e:	4798      	blx	r3
 801a780:	6960      	ldr	r0, [r4, #20]
 801a782:	6803      	ldr	r3, [r0, #0]
 801a784:	691b      	ldr	r3, [r3, #16]
 801a786:	4629      	mov	r1, r5
 801a788:	4798      	blx	r3
 801a78a:	b005      	add	sp, #20
 801a78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a78e:	f7ff f82b 	bl	80197e8 <_ZN8touchgfx11Application11getInstanceEv>
 801a792:	6803      	ldr	r3, [r0, #0]
 801a794:	4631      	mov	r1, r6
 801a796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a798:	4798      	blx	r3
 801a79a:	f7ff f825 	bl	80197e8 <_ZN8touchgfx11Application11getInstanceEv>
 801a79e:	6803      	ldr	r3, [r0, #0]
 801a7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a7a2:	e7f0      	b.n	801a786 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

0801a7a4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801a7a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a7a6:	8882      	ldrh	r2, [r0, #4]
 801a7a8:	4605      	mov	r5, r0
 801a7aa:	880b      	ldrh	r3, [r1, #0]
 801a7ac:	460c      	mov	r4, r1
 801a7ae:	4413      	add	r3, r2
 801a7b0:	800b      	strh	r3, [r1, #0]
 801a7b2:	884b      	ldrh	r3, [r1, #2]
 801a7b4:	88c2      	ldrh	r2, [r0, #6]
 801a7b6:	4413      	add	r3, r2
 801a7b8:	4602      	mov	r2, r0
 801a7ba:	804b      	strh	r3, [r1, #2]
 801a7bc:	466b      	mov	r3, sp
 801a7be:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801a7c2:	6851      	ldr	r1, [r2, #4]
 801a7c4:	c303      	stmia	r3!, {r0, r1}
 801a7c6:	4621      	mov	r1, r4
 801a7c8:	4668      	mov	r0, sp
 801a7ca:	f7fb f9af 	bl	8015b2c <_ZN8touchgfx4RectaNERKS0_>
 801a7ce:	466b      	mov	r3, sp
 801a7d0:	cb03      	ldmia	r3!, {r0, r1}
 801a7d2:	6020      	str	r0, [r4, #0]
 801a7d4:	6061      	str	r1, [r4, #4]
 801a7d6:	6968      	ldr	r0, [r5, #20]
 801a7d8:	b128      	cbz	r0, 801a7e6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801a7da:	6803      	ldr	r3, [r0, #0]
 801a7dc:	691b      	ldr	r3, [r3, #16]
 801a7de:	4621      	mov	r1, r4
 801a7e0:	4798      	blx	r3
 801a7e2:	b003      	add	sp, #12
 801a7e4:	bd30      	pop	{r4, r5, pc}
 801a7e6:	f7fe ffff 	bl	80197e8 <_ZN8touchgfx11Application11getInstanceEv>
 801a7ea:	6803      	ldr	r3, [r0, #0]
 801a7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a7ee:	e7f6      	b.n	801a7de <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801a7f0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801a7f0:	b570      	push	{r4, r5, r6, lr}
 801a7f2:	8882      	ldrh	r2, [r0, #4]
 801a7f4:	460c      	mov	r4, r1
 801a7f6:	880b      	ldrh	r3, [r1, #0]
 801a7f8:	4605      	mov	r5, r0
 801a7fa:	4413      	add	r3, r2
 801a7fc:	800b      	strh	r3, [r1, #0]
 801a7fe:	884b      	ldrh	r3, [r1, #2]
 801a800:	88c2      	ldrh	r2, [r0, #6]
 801a802:	4413      	add	r3, r2
 801a804:	804b      	strh	r3, [r1, #2]
 801a806:	1d01      	adds	r1, r0, #4
 801a808:	4620      	mov	r0, r4
 801a80a:	f7fb f98f 	bl	8015b2c <_ZN8touchgfx4RectaNERKS0_>
 801a80e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801a812:	2b00      	cmp	r3, #0
 801a814:	dd0b      	ble.n	801a82e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a816:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	dd07      	ble.n	801a82e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a81e:	6968      	ldr	r0, [r5, #20]
 801a820:	b128      	cbz	r0, 801a82e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a822:	6803      	ldr	r3, [r0, #0]
 801a824:	4621      	mov	r1, r4
 801a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a82c:	4718      	bx	r3
 801a82e:	bd70      	pop	{r4, r5, r6, pc}

0801a830 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801a830:	b510      	push	{r4, lr}
 801a832:	2300      	movs	r3, #0
 801a834:	4604      	mov	r4, r0
 801a836:	4608      	mov	r0, r1
 801a838:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801a83c:	8023      	strh	r3, [r4, #0]
 801a83e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a842:	8063      	strh	r3, [r4, #2]
 801a844:	6803      	ldr	r3, [r0, #0]
 801a846:	80a1      	strh	r1, [r4, #4]
 801a848:	4621      	mov	r1, r4
 801a84a:	80e2      	strh	r2, [r4, #6]
 801a84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a84e:	4798      	blx	r3
 801a850:	4620      	mov	r0, r4
 801a852:	bd10      	pop	{r4, pc}

0801a854 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801a854:	b530      	push	{r4, r5, lr}
 801a856:	8083      	strh	r3, [r0, #4]
 801a858:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801a85c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801a860:	7183      	strb	r3, [r0, #6]
 801a862:	79c3      	ldrb	r3, [r0, #7]
 801a864:	6101      	str	r1, [r0, #16]
 801a866:	f365 0306 	bfi	r3, r5, #0, #7
 801a86a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801a86e:	8282      	strh	r2, [r0, #20]
 801a870:	f365 13c7 	bfi	r3, r5, #7, #1
 801a874:	71c3      	strb	r3, [r0, #7]
 801a876:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801a87a:	7203      	strb	r3, [r0, #8]
 801a87c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801a880:	7243      	strb	r3, [r0, #9]
 801a882:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a886:	8143      	strh	r3, [r0, #10]
 801a888:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801a88c:	8183      	strh	r3, [r0, #12]
 801a88e:	4b01      	ldr	r3, [pc, #4]	; (801a894 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801a890:	6003      	str	r3, [r0, #0]
 801a892:	bd30      	pop	{r4, r5, pc}
 801a894:	0802deb8 	.word	0x0802deb8

0801a898 <_ZNK8touchgfx9ConstFont4findEt>:
 801a898:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a89a:	6904      	ldr	r4, [r0, #16]
 801a89c:	b3bc      	cbz	r4, 801a90e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a89e:	88a3      	ldrh	r3, [r4, #4]
 801a8a0:	8a82      	ldrh	r2, [r0, #20]
 801a8a2:	1acb      	subs	r3, r1, r3
 801a8a4:	f102 32ff 	add.w	r2, r2, #4294967295
 801a8a8:	d431      	bmi.n	801a90e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a8aa:	4293      	cmp	r3, r2
 801a8ac:	dd0c      	ble.n	801a8c8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801a8ae:	230e      	movs	r3, #14
 801a8b0:	fb03 4302 	mla	r3, r3, r2, r4
 801a8b4:	889b      	ldrh	r3, [r3, #4]
 801a8b6:	1a5b      	subs	r3, r3, r1
 801a8b8:	1ad3      	subs	r3, r2, r3
 801a8ba:	429a      	cmp	r2, r3
 801a8bc:	db27      	blt.n	801a90e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	bfbc      	itt	lt
 801a8c2:	2302      	movlt	r3, #2
 801a8c4:	fb92 f3f3 	sdivlt	r3, r2, r3
 801a8c8:	2500      	movs	r5, #0
 801a8ca:	260e      	movs	r6, #14
 801a8cc:	4295      	cmp	r5, r2
 801a8ce:	dc1e      	bgt.n	801a90e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a8d0:	fb06 4003 	mla	r0, r6, r3, r4
 801a8d4:	8887      	ldrh	r7, [r0, #4]
 801a8d6:	42b9      	cmp	r1, r7
 801a8d8:	d01a      	beq.n	801a910 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801a8da:	d20d      	bcs.n	801a8f8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801a8dc:	1e5a      	subs	r2, r3, #1
 801a8de:	4295      	cmp	r5, r2
 801a8e0:	dc15      	bgt.n	801a90e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a8e2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801a8e6:	1a5b      	subs	r3, r3, r1
 801a8e8:	1ad3      	subs	r3, r2, r3
 801a8ea:	429a      	cmp	r2, r3
 801a8ec:	db0f      	blt.n	801a90e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a8ee:	429d      	cmp	r5, r3
 801a8f0:	ddec      	ble.n	801a8cc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a8f2:	1953      	adds	r3, r2, r5
 801a8f4:	105b      	asrs	r3, r3, #1
 801a8f6:	e7e9      	b.n	801a8cc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a8f8:	1c5d      	adds	r5, r3, #1
 801a8fa:	42aa      	cmp	r2, r5
 801a8fc:	db07      	blt.n	801a90e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a8fe:	8a43      	ldrh	r3, [r0, #18]
 801a900:	1acb      	subs	r3, r1, r3
 801a902:	442b      	add	r3, r5
 801a904:	429d      	cmp	r5, r3
 801a906:	dc02      	bgt.n	801a90e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a908:	429a      	cmp	r2, r3
 801a90a:	dadf      	bge.n	801a8cc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a90c:	e7f1      	b.n	801a8f2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801a90e:	2000      	movs	r0, #0
 801a910:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a912 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801a912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a914:	4604      	mov	r4, r0
 801a916:	4617      	mov	r7, r2
 801a918:	461e      	mov	r6, r3
 801a91a:	b911      	cbnz	r1, 801a922 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801a91c:	2500      	movs	r5, #0
 801a91e:	4628      	mov	r0, r5
 801a920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a922:	290a      	cmp	r1, #10
 801a924:	d0fa      	beq.n	801a91c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a926:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a92a:	4291      	cmp	r1, r2
 801a92c:	d0f6      	beq.n	801a91c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a92e:	f242 020b 	movw	r2, #8203	; 0x200b
 801a932:	4291      	cmp	r1, r2
 801a934:	d0f2      	beq.n	801a91c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a936:	f7ff ffaf 	bl	801a898 <_ZNK8touchgfx9ConstFont4findEt>
 801a93a:	4605      	mov	r5, r0
 801a93c:	b950      	cbnz	r0, 801a954 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801a93e:	6823      	ldr	r3, [r4, #0]
 801a940:	4620      	mov	r0, r4
 801a942:	691b      	ldr	r3, [r3, #16]
 801a944:	4798      	blx	r3
 801a946:	4601      	mov	r1, r0
 801a948:	4620      	mov	r0, r4
 801a94a:	f7ff ffa5 	bl	801a898 <_ZNK8touchgfx9ConstFont4findEt>
 801a94e:	4605      	mov	r5, r0
 801a950:	2800      	cmp	r0, #0
 801a952:	d0e3      	beq.n	801a91c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a954:	6823      	ldr	r3, [r4, #0]
 801a956:	4629      	mov	r1, r5
 801a958:	4620      	mov	r0, r4
 801a95a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a95c:	4798      	blx	r3
 801a95e:	6038      	str	r0, [r7, #0]
 801a960:	6823      	ldr	r3, [r4, #0]
 801a962:	4620      	mov	r0, r4
 801a964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a966:	4798      	blx	r3
 801a968:	7030      	strb	r0, [r6, #0]
 801a96a:	e7d8      	b.n	801a91e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801a96c <_ZN8touchgfx6memsetEPvhm>:
 801a96c:	4402      	add	r2, r0
 801a96e:	4290      	cmp	r0, r2
 801a970:	d002      	beq.n	801a978 <_ZN8touchgfx6memsetEPvhm+0xc>
 801a972:	f800 1b01 	strb.w	r1, [r0], #1
 801a976:	e7fa      	b.n	801a96e <_ZN8touchgfx6memsetEPvhm+0x2>
 801a978:	4770      	bx	lr

0801a97a <_ZN8touchgfx4clzuEm>:
 801a97a:	4603      	mov	r3, r0
 801a97c:	b1c8      	cbz	r0, 801a9b2 <_ZN8touchgfx4clzuEm+0x38>
 801a97e:	0c02      	lsrs	r2, r0, #16
 801a980:	0412      	lsls	r2, r2, #16
 801a982:	b9a2      	cbnz	r2, 801a9ae <_ZN8touchgfx4clzuEm+0x34>
 801a984:	0403      	lsls	r3, r0, #16
 801a986:	2010      	movs	r0, #16
 801a988:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a98c:	bf04      	itt	eq
 801a98e:	021b      	lsleq	r3, r3, #8
 801a990:	3008      	addeq	r0, #8
 801a992:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a996:	bf04      	itt	eq
 801a998:	011b      	lsleq	r3, r3, #4
 801a99a:	3004      	addeq	r0, #4
 801a99c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a9a0:	bf04      	itt	eq
 801a9a2:	009b      	lsleq	r3, r3, #2
 801a9a4:	3002      	addeq	r0, #2
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	db04      	blt.n	801a9b4 <_ZN8touchgfx4clzuEm+0x3a>
 801a9aa:	3001      	adds	r0, #1
 801a9ac:	4770      	bx	lr
 801a9ae:	2000      	movs	r0, #0
 801a9b0:	e7ea      	b.n	801a988 <_ZN8touchgfx4clzuEm+0xe>
 801a9b2:	2020      	movs	r0, #32
 801a9b4:	4770      	bx	lr

0801a9b6 <_ZN8touchgfx7muldivuEmmmRm>:
 801a9b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9ba:	4680      	mov	r8, r0
 801a9bc:	460f      	mov	r7, r1
 801a9be:	4615      	mov	r5, r2
 801a9c0:	461e      	mov	r6, r3
 801a9c2:	f7ff ffda 	bl	801a97a <_ZN8touchgfx4clzuEm>
 801a9c6:	b998      	cbnz	r0, 801a9f0 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801a9c8:	4608      	mov	r0, r1
 801a9ca:	f7ff ffd6 	bl	801a97a <_ZN8touchgfx4clzuEm>
 801a9ce:	2800      	cmp	r0, #0
 801a9d0:	dd08      	ble.n	801a9e4 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801a9d2:	4633      	mov	r3, r6
 801a9d4:	462a      	mov	r2, r5
 801a9d6:	4641      	mov	r1, r8
 801a9d8:	4638      	mov	r0, r7
 801a9da:	f7ff ffec 	bl	801a9b6 <_ZN8touchgfx7muldivuEmmmRm>
 801a9de:	b003      	add	sp, #12
 801a9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9e4:	f04f 33ff 	mov.w	r3, #4294967295
 801a9e8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a9ec:	6033      	str	r3, [r6, #0]
 801a9ee:	e7f6      	b.n	801a9de <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801a9f0:	fa31 f900 	lsrs.w	r9, r1, r0
 801a9f4:	fb01 f308 	mul.w	r3, r1, r8
 801a9f8:	d105      	bne.n	801aa06 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801a9fa:	fbb3 f0f5 	udiv	r0, r3, r5
 801a9fe:	fb05 3510 	mls	r5, r5, r0, r3
 801aa02:	6035      	str	r5, [r6, #0]
 801aa04:	e7eb      	b.n	801a9de <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801aa06:	2301      	movs	r3, #1
 801aa08:	fa08 fb00 	lsl.w	fp, r8, r0
 801aa0c:	462a      	mov	r2, r5
 801aa0e:	4641      	mov	r1, r8
 801aa10:	fa03 f000 	lsl.w	r0, r3, r0
 801aa14:	4633      	mov	r3, r6
 801aa16:	fbbb faf5 	udiv	sl, fp, r5
 801aa1a:	3801      	subs	r0, #1
 801aa1c:	fb09 f40a 	mul.w	r4, r9, sl
 801aa20:	4038      	ands	r0, r7
 801aa22:	f7ff ffc8 	bl	801a9b6 <_ZN8touchgfx7muldivuEmmmRm>
 801aa26:	462a      	mov	r2, r5
 801aa28:	4607      	mov	r7, r0
 801aa2a:	ab01      	add	r3, sp, #4
 801aa2c:	fb05 b11a 	mls	r1, r5, sl, fp
 801aa30:	4648      	mov	r0, r9
 801aa32:	f7ff ffc0 	bl	801a9b6 <_ZN8touchgfx7muldivuEmmmRm>
 801aa36:	9b01      	ldr	r3, [sp, #4]
 801aa38:	6832      	ldr	r2, [r6, #0]
 801aa3a:	441a      	add	r2, r3
 801aa3c:	fbb2 f3f5 	udiv	r3, r2, r5
 801aa40:	441c      	add	r4, r3
 801aa42:	fb05 2513 	mls	r5, r5, r3, r2
 801aa46:	443c      	add	r4, r7
 801aa48:	4420      	add	r0, r4
 801aa4a:	e7da      	b.n	801aa02 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801aa4c <_ZN8touchgfx6muldivElllRl>:
 801aa4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801aa4e:	2800      	cmp	r0, #0
 801aa50:	461e      	mov	r6, r3
 801aa52:	bfba      	itte	lt
 801aa54:	4240      	neglt	r0, r0
 801aa56:	f04f 34ff 	movlt.w	r4, #4294967295
 801aa5a:	2401      	movge	r4, #1
 801aa5c:	2900      	cmp	r1, #0
 801aa5e:	bfbc      	itt	lt
 801aa60:	4249      	neglt	r1, r1
 801aa62:	4264      	neglt	r4, r4
 801aa64:	2a00      	cmp	r2, #0
 801aa66:	bfb6      	itet	lt
 801aa68:	4265      	neglt	r5, r4
 801aa6a:	4625      	movge	r5, r4
 801aa6c:	4252      	neglt	r2, r2
 801aa6e:	4288      	cmp	r0, r1
 801aa70:	bfc2      	ittt	gt
 801aa72:	4603      	movgt	r3, r0
 801aa74:	4608      	movgt	r0, r1
 801aa76:	4619      	movgt	r1, r3
 801aa78:	ab01      	add	r3, sp, #4
 801aa7a:	f7ff ff9c 	bl	801a9b6 <_ZN8touchgfx7muldivuEmmmRm>
 801aa7e:	9b01      	ldr	r3, [sp, #4]
 801aa80:	4368      	muls	r0, r5
 801aa82:	435c      	muls	r4, r3
 801aa84:	6034      	str	r4, [r6, #0]
 801aa86:	b002      	add	sp, #8
 801aa88:	bd70      	pop	{r4, r5, r6, pc}

0801aa8a <_ZN8touchgfx6muldivElll>:
 801aa8a:	b513      	push	{r0, r1, r4, lr}
 801aa8c:	4614      	mov	r4, r2
 801aa8e:	ab01      	add	r3, sp, #4
 801aa90:	f7ff ffdc 	bl	801aa4c <_ZN8touchgfx6muldivElllRl>
 801aa94:	2800      	cmp	r0, #0
 801aa96:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 801aa9a:	9b01      	ldr	r3, [sp, #4]
 801aa9c:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 801aaa0:	db0a      	blt.n	801aab8 <_ZN8touchgfx6muldivElll+0x2e>
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	f102 0201 	add.w	r2, r2, #1
 801aaa8:	bfb8      	it	lt
 801aaaa:	425b      	neglt	r3, r3
 801aaac:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801aab0:	db00      	blt.n	801aab4 <_ZN8touchgfx6muldivElll+0x2a>
 801aab2:	3001      	adds	r0, #1
 801aab4:	b002      	add	sp, #8
 801aab6:	bd10      	pop	{r4, pc}
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	bfb8      	it	lt
 801aabc:	425b      	neglt	r3, r3
 801aabe:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801aac2:	bfc8      	it	gt
 801aac4:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801aac8:	e7f4      	b.n	801aab4 <_ZN8touchgfx6muldivElll+0x2a>

0801aaca <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801aaca:	2000      	movs	r0, #0
 801aacc:	4770      	bx	lr

0801aace <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801aace:	2001      	movs	r0, #1
 801aad0:	4770      	bx	lr

0801aad2 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801aad2:	2002      	movs	r0, #2
 801aad4:	4770      	bx	lr

0801aad6 <_ZN8touchgfx12GestureEventD1Ev>:
 801aad6:	4770      	bx	lr

0801aad8 <_ZN8touchgfx9DragEventD1Ev>:
 801aad8:	4770      	bx	lr

0801aada <_ZN8touchgfx10ClickEventD1Ev>:
 801aada:	4770      	bx	lr

0801aadc <_ZN8touchgfx10ClickEventD0Ev>:
 801aadc:	b510      	push	{r4, lr}
 801aade:	4604      	mov	r4, r0
 801aae0:	210c      	movs	r1, #12
 801aae2:	f00b fe50 	bl	8026786 <_ZdlPvj>
 801aae6:	4620      	mov	r0, r4
 801aae8:	bd10      	pop	{r4, pc}

0801aaea <_ZN8touchgfx9DragEventD0Ev>:
 801aaea:	b510      	push	{r4, lr}
 801aaec:	4604      	mov	r4, r0
 801aaee:	2110      	movs	r1, #16
 801aaf0:	f00b fe49 	bl	8026786 <_ZdlPvj>
 801aaf4:	4620      	mov	r0, r4
 801aaf6:	bd10      	pop	{r4, pc}

0801aaf8 <_ZN8touchgfx12GestureEventD0Ev>:
 801aaf8:	b510      	push	{r4, lr}
 801aafa:	4604      	mov	r4, r0
 801aafc:	210c      	movs	r1, #12
 801aafe:	f00b fe42 	bl	8026786 <_ZdlPvj>
 801ab02:	4620      	mov	r0, r4
 801ab04:	bd10      	pop	{r4, pc}
	...

0801ab08 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801ab08:	b530      	push	{r4, r5, lr}
 801ab0a:	460d      	mov	r5, r1
 801ab0c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801ab0e:	b087      	sub	sp, #28
 801ab10:	4604      	mov	r4, r0
 801ab12:	b301      	cbz	r1, 801ab56 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801ab14:	a801      	add	r0, sp, #4
 801ab16:	f7ff fe8b 	bl	801a830 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ab1a:	892a      	ldrh	r2, [r5, #8]
 801ab1c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801ab20:	7928      	ldrb	r0, [r5, #4]
 801ab22:	1ad2      	subs	r2, r2, r3
 801ab24:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801ab26:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801ab2a:	441a      	add	r2, r3
 801ab2c:	896b      	ldrh	r3, [r5, #10]
 801ab2e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801ab32:	f88d 0010 	strb.w	r0, [sp, #16]
 801ab36:	1b5b      	subs	r3, r3, r5
 801ab38:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801ab3a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ab3c:	442b      	add	r3, r5
 801ab3e:	4d07      	ldr	r5, [pc, #28]	; (801ab5c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801ab40:	f8ad 1012 	strh.w	r1, [sp, #18]
 801ab44:	a903      	add	r1, sp, #12
 801ab46:	9503      	str	r5, [sp, #12]
 801ab48:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ab4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ab50:	6803      	ldr	r3, [r0, #0]
 801ab52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ab54:	4798      	blx	r3
 801ab56:	b007      	add	sp, #28
 801ab58:	bd30      	pop	{r4, r5, pc}
 801ab5a:	bf00      	nop
 801ab5c:	0802df38 	.word	0x0802df38

0801ab60 <_ZNK8touchgfx4Rect9intersectEss>:
 801ab60:	b510      	push	{r4, lr}
 801ab62:	f9b0 3000 	ldrsh.w	r3, [r0]
 801ab66:	428b      	cmp	r3, r1
 801ab68:	dc10      	bgt.n	801ab8c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801ab6a:	8884      	ldrh	r4, [r0, #4]
 801ab6c:	4423      	add	r3, r4
 801ab6e:	b21b      	sxth	r3, r3
 801ab70:	4299      	cmp	r1, r3
 801ab72:	da0b      	bge.n	801ab8c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801ab74:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801ab78:	4293      	cmp	r3, r2
 801ab7a:	dc07      	bgt.n	801ab8c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801ab7c:	88c0      	ldrh	r0, [r0, #6]
 801ab7e:	4418      	add	r0, r3
 801ab80:	b200      	sxth	r0, r0
 801ab82:	4282      	cmp	r2, r0
 801ab84:	bfac      	ite	ge
 801ab86:	2000      	movge	r0, #0
 801ab88:	2001      	movlt	r0, #1
 801ab8a:	bd10      	pop	{r4, pc}
 801ab8c:	2000      	movs	r0, #0
 801ab8e:	e7fc      	b.n	801ab8a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801ab90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801ab90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab92:	460c      	mov	r4, r1
 801ab94:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801ab96:	b089      	sub	sp, #36	; 0x24
 801ab98:	4605      	mov	r5, r0
 801ab9a:	2900      	cmp	r1, #0
 801ab9c:	d054      	beq.n	801ac48 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801ab9e:	4668      	mov	r0, sp
 801aba0:	f7ff fe46 	bl	801a830 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801aba4:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801aba6:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801aba8:	4668      	mov	r0, sp
 801abaa:	8922      	ldrh	r2, [r4, #8]
 801abac:	88e1      	ldrh	r1, [r4, #6]
 801abae:	443a      	add	r2, r7
 801abb0:	4431      	add	r1, r6
 801abb2:	b212      	sxth	r2, r2
 801abb4:	b209      	sxth	r1, r1
 801abb6:	f7ff ffd3 	bl	801ab60 <_ZNK8touchgfx4Rect9intersectEss>
 801abba:	b1d0      	cbz	r0, 801abf2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801abbc:	89a2      	ldrh	r2, [r4, #12]
 801abbe:	4668      	mov	r0, sp
 801abc0:	8961      	ldrh	r1, [r4, #10]
 801abc2:	443a      	add	r2, r7
 801abc4:	4431      	add	r1, r6
 801abc6:	b212      	sxth	r2, r2
 801abc8:	b209      	sxth	r1, r1
 801abca:	f7ff ffc9 	bl	801ab60 <_ZNK8touchgfx4Rect9intersectEss>
 801abce:	4603      	mov	r3, r0
 801abd0:	b978      	cbnz	r0, 801abf2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801abd2:	4a1e      	ldr	r2, [pc, #120]	; (801ac4c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801abd4:	a904      	add	r1, sp, #16
 801abd6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801abd8:	9204      	str	r2, [sp, #16]
 801abda:	2202      	movs	r2, #2
 801abdc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801abe0:	f88d 2014 	strb.w	r2, [sp, #20]
 801abe4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801abe8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801abec:	6803      	ldr	r3, [r0, #0]
 801abee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801abf0:	4798      	blx	r3
 801abf2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801abf4:	a802      	add	r0, sp, #8
 801abf6:	f7ff fe1b 	bl	801a830 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801abfa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801abfe:	88e0      	ldrh	r0, [r4, #6]
 801ac00:	8961      	ldrh	r1, [r4, #10]
 801ac02:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801ac06:	1a80      	subs	r0, r0, r2
 801ac08:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801ac0c:	1a89      	subs	r1, r1, r2
 801ac0e:	8923      	ldrh	r3, [r4, #8]
 801ac10:	4460      	add	r0, ip
 801ac12:	89a2      	ldrh	r2, [r4, #12]
 801ac14:	4461      	add	r1, ip
 801ac16:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801ac18:	eba3 030e 	sub.w	r3, r3, lr
 801ac1c:	eba2 020e 	sub.w	r2, r2, lr
 801ac20:	f8ad 0016 	strh.w	r0, [sp, #22]
 801ac24:	7927      	ldrb	r7, [r4, #4]
 801ac26:	4433      	add	r3, r6
 801ac28:	4432      	add	r2, r6
 801ac2a:	4c09      	ldr	r4, [pc, #36]	; (801ac50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801ac2c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801ac2e:	f8ad 101a 	strh.w	r1, [sp, #26]
 801ac32:	a904      	add	r1, sp, #16
 801ac34:	9404      	str	r4, [sp, #16]
 801ac36:	f88d 7014 	strb.w	r7, [sp, #20]
 801ac3a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ac3e:	f8ad 201c 	strh.w	r2, [sp, #28]
 801ac42:	6803      	ldr	r3, [r0, #0]
 801ac44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ac46:	4798      	blx	r3
 801ac48:	b009      	add	sp, #36	; 0x24
 801ac4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac4c:	0802df10 	.word	0x0802df10
 801ac50:	0802df24 	.word	0x0802df24

0801ac54 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801ac54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac58:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801ac5c:	b0a1      	sub	sp, #132	; 0x84
 801ac5e:	4604      	mov	r4, r0
 801ac60:	460d      	mov	r5, r1
 801ac62:	790b      	ldrb	r3, [r1, #4]
 801ac64:	f1b9 0f00 	cmp.w	r9, #0
 801ac68:	d00f      	beq.n	801ac8a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	f040 80a2 	bne.w	801adb4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801ac70:	b021      	add	sp, #132	; 0x84
 801ac72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac76:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801ac7a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801ac7e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801ac82:	1d20      	adds	r0, r4, #4
 801ac84:	f7fa fea0 	bl	80159c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801ac88:	e094      	b.n	801adb4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d1f0      	bne.n	801ac70 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801ac8e:	4b5f      	ldr	r3, [pc, #380]	; (801ae0c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801ac96:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801ac9a:	f1ba 0f03 	cmp.w	sl, #3
 801ac9e:	ddea      	ble.n	801ac76 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801aca0:	f1ba 0f0c 	cmp.w	sl, #12
 801aca4:	f04f 0303 	mov.w	r3, #3
 801aca8:	f04f 0600 	mov.w	r6, #0
 801acac:	4958      	ldr	r1, [pc, #352]	; (801ae10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801acae:	bfd8      	it	le
 801acb0:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801acb4:	960a      	str	r6, [sp, #40]	; 0x28
 801acb6:	bfd8      	it	le
 801acb8:	fb92 f3f3 	sdivle	r3, r2, r3
 801acbc:	9301      	str	r3, [sp, #4]
 801acbe:	4b55      	ldr	r3, [pc, #340]	; (801ae14 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801acc0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801acc4:	4b54      	ldr	r3, [pc, #336]	; (801ae18 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801acc6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801acca:	2248      	movs	r2, #72	; 0x48
 801accc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801acd0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801acd4:	ab0e      	add	r3, sp, #56	; 0x38
 801acd6:	4618      	mov	r0, r3
 801acd8:	f00b ff08 	bl	8026aec <memcpy>
 801acdc:	f04f 32ff 	mov.w	r2, #4294967295
 801ace0:	f8cd a008 	str.w	sl, [sp, #8]
 801ace4:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801ace8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801acec:	46b3      	mov	fp, r6
 801acee:	fb93 f3f2 	sdiv	r3, r3, r2
 801acf2:	b29b      	uxth	r3, r3
 801acf4:	9303      	str	r3, [sp, #12]
 801acf6:	2300      	movs	r3, #0
 801acf8:	9a03      	ldr	r2, [sp, #12]
 801acfa:	88ef      	ldrh	r7, [r5, #6]
 801acfc:	a80a      	add	r0, sp, #40	; 0x28
 801acfe:	9309      	str	r3, [sp, #36]	; 0x24
 801ad00:	9b07      	ldr	r3, [sp, #28]
 801ad02:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801ad06:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801ad0a:	fb13 f302 	smulbb	r3, r3, r2
 801ad0e:	b29b      	uxth	r3, r3
 801ad10:	9304      	str	r3, [sp, #16]
 801ad12:	9b07      	ldr	r3, [sp, #28]
 801ad14:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ad18:	685b      	ldr	r3, [r3, #4]
 801ad1a:	fb13 f302 	smulbb	r3, r3, r2
 801ad1e:	b29b      	uxth	r3, r3
 801ad20:	9305      	str	r3, [sp, #20]
 801ad22:	9b04      	ldr	r3, [sp, #16]
 801ad24:	441f      	add	r7, r3
 801ad26:	9b05      	ldr	r3, [sp, #20]
 801ad28:	4498      	add	r8, r3
 801ad2a:	b23f      	sxth	r7, r7
 801ad2c:	fa0f f888 	sxth.w	r8, r8
 801ad30:	4639      	mov	r1, r7
 801ad32:	4642      	mov	r2, r8
 801ad34:	f7ff ff14 	bl	801ab60 <_ZNK8touchgfx4Rect9intersectEss>
 801ad38:	b380      	cbz	r0, 801ad9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801ad3a:	4639      	mov	r1, r7
 801ad3c:	ab09      	add	r3, sp, #36	; 0x24
 801ad3e:	4642      	mov	r2, r8
 801ad40:	1d20      	adds	r0, r4, #4
 801ad42:	f7fa fe41 	bl	80159c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801ad46:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ad48:	b341      	cbz	r1, 801ad9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801ad4a:	4549      	cmp	r1, r9
 801ad4c:	d026      	beq.n	801ad9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801ad4e:	a80c      	add	r0, sp, #48	; 0x30
 801ad50:	f7ff fd6e 	bl	801a830 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ad54:	2002      	movs	r0, #2
 801ad56:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801ad5a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801ad5e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801ad62:	fb92 f2f0 	sdiv	r2, r2, r0
 801ad66:	440a      	add	r2, r1
 801ad68:	1a99      	subs	r1, r3, r2
 801ad6a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801ad6e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801ad72:	fb93 f3f0 	sdiv	r3, r3, r0
 801ad76:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801ad7a:	4403      	add	r3, r0
 801ad7c:	1ad3      	subs	r3, r2, r3
 801ad7e:	9a06      	ldr	r2, [sp, #24]
 801ad80:	435b      	muls	r3, r3
 801ad82:	fb01 3301 	mla	r3, r1, r1, r3
 801ad86:	4293      	cmp	r3, r2
 801ad88:	d208      	bcs.n	801ad9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801ad8a:	9a04      	ldr	r2, [sp, #16]
 801ad8c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ad90:	86a2      	strh	r2, [r4, #52]	; 0x34
 801ad92:	9a05      	ldr	r2, [sp, #20]
 801ad94:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801ad98:	86e2      	strh	r2, [r4, #54]	; 0x36
 801ad9a:	9306      	str	r3, [sp, #24]
 801ad9c:	f10b 0b02 	add.w	fp, fp, #2
 801ada0:	f1bb 0f08 	cmp.w	fp, #8
 801ada4:	dda7      	ble.n	801acf6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801ada6:	9b02      	ldr	r3, [sp, #8]
 801ada8:	3601      	adds	r6, #1
 801adaa:	4453      	add	r3, sl
 801adac:	9302      	str	r3, [sp, #8]
 801adae:	9b01      	ldr	r3, [sp, #4]
 801adb0:	42b3      	cmp	r3, r6
 801adb2:	d199      	bne.n	801ace8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801adb4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801adb6:	2900      	cmp	r1, #0
 801adb8:	f43f af5a 	beq.w	801ac70 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801adbc:	a80c      	add	r0, sp, #48	; 0x30
 801adbe:	2600      	movs	r6, #0
 801adc0:	f7ff fd36 	bl	801a830 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801adc4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801adc8:	88ea      	ldrh	r2, [r5, #6]
 801adca:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801adce:	1ad2      	subs	r2, r2, r3
 801add0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801add2:	7929      	ldrb	r1, [r5, #4]
 801add4:	441a      	add	r2, r3
 801add6:	892b      	ldrh	r3, [r5, #8]
 801add8:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801addc:	a90e      	add	r1, sp, #56	; 0x38
 801adde:	1a1b      	subs	r3, r3, r0
 801ade0:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801ade2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801ade6:	4403      	add	r3, r0
 801ade8:	480c      	ldr	r0, [pc, #48]	; (801ae1c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801adea:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801adee:	900e      	str	r0, [sp, #56]	; 0x38
 801adf0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801adf2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801adf6:	6803      	ldr	r3, [r0, #0]
 801adf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801adfa:	4798      	blx	r3
 801adfc:	792b      	ldrb	r3, [r5, #4]
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	f43f af36 	beq.w	801ac70 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801ae04:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801ae08:	e732      	b.n	801ac70 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801ae0a:	bf00      	nop
 801ae0c:	2005677c 	.word	0x2005677c
 801ae10:	0802be44 	.word	0x0802be44
 801ae14:	20056770 	.word	0x20056770
 801ae18:	20056772 	.word	0x20056772
 801ae1c:	0802df10 	.word	0x0802df10

0801ae20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801ae20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ae22:	4604      	mov	r4, r0
 801ae24:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801ae28:	3201      	adds	r2, #1
 801ae2a:	d112      	bne.n	801ae52 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801ae2c:	2500      	movs	r5, #0
 801ae2e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801ae32:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ae36:	6803      	ldr	r3, [r0, #0]
 801ae38:	9500      	str	r5, [sp, #0]
 801ae3a:	466d      	mov	r5, sp
 801ae3c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ae40:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ae44:	4629      	mov	r1, r5
 801ae46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae48:	4798      	blx	r3
 801ae4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801ae4e:	e884 0003 	stmia.w	r4, {r0, r1}
 801ae52:	4620      	mov	r0, r4
 801ae54:	b003      	add	sp, #12
 801ae56:	bd30      	pop	{r4, r5, pc}

0801ae58 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801ae58:	b513      	push	{r0, r1, r4, lr}
 801ae5a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801ae5e:	4604      	mov	r4, r0
 801ae60:	3301      	adds	r3, #1
 801ae62:	d109      	bne.n	801ae78 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801ae64:	4601      	mov	r1, r0
 801ae66:	4668      	mov	r0, sp
 801ae68:	f7ff fce2 	bl	801a830 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ae6c:	f8bd 3000 	ldrh.w	r3, [sp]
 801ae70:	8423      	strh	r3, [r4, #32]
 801ae72:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ae76:	8463      	strh	r3, [r4, #34]	; 0x22
 801ae78:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801ae7c:	b002      	add	sp, #8
 801ae7e:	bd10      	pop	{r4, pc}

0801ae80 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801ae80:	b513      	push	{r0, r1, r4, lr}
 801ae82:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801ae86:	4604      	mov	r4, r0
 801ae88:	3301      	adds	r3, #1
 801ae8a:	d109      	bne.n	801aea0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801ae8c:	4601      	mov	r1, r0
 801ae8e:	4668      	mov	r0, sp
 801ae90:	f7ff fcce 	bl	801a830 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ae94:	f8bd 3000 	ldrh.w	r3, [sp]
 801ae98:	8423      	strh	r3, [r4, #32]
 801ae9a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ae9e:	8463      	strh	r3, [r4, #34]	; 0x22
 801aea0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801aea4:	b002      	add	sp, #8
 801aea6:	bd10      	pop	{r4, pc}

0801aea8 <_ZN8touchgfx6ScreenC1Ev>:
 801aea8:	b570      	push	{r4, r5, r6, lr}
 801aeaa:	4b17      	ldr	r3, [pc, #92]	; (801af08 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801aeac:	4605      	mov	r5, r0
 801aeae:	4a17      	ldr	r2, [pc, #92]	; (801af0c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801aeb0:	2101      	movs	r1, #1
 801aeb2:	f845 3b04 	str.w	r3, [r5], #4
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	6042      	str	r2, [r0, #4]
 801aeba:	4604      	mov	r4, r0
 801aebc:	8103      	strh	r3, [r0, #8]
 801aebe:	8143      	strh	r3, [r0, #10]
 801aec0:	8183      	strh	r3, [r0, #12]
 801aec2:	81c3      	strh	r3, [r0, #14]
 801aec4:	8203      	strh	r3, [r0, #16]
 801aec6:	8243      	strh	r3, [r0, #18]
 801aec8:	8283      	strh	r3, [r0, #20]
 801aeca:	82c3      	strh	r3, [r0, #22]
 801aecc:	6203      	str	r3, [r0, #32]
 801aece:	8483      	strh	r3, [r0, #36]	; 0x24
 801aed0:	84c3      	strh	r3, [r0, #38]	; 0x26
 801aed2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801aed6:	6343      	str	r3, [r0, #52]	; 0x34
 801aed8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801aedc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801aee0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801aee4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801aee8:	4b09      	ldr	r3, [pc, #36]	; (801af10 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801aeea:	4628      	mov	r0, r5
 801aeec:	f9b3 6000 	ldrsh.w	r6, [r3]
 801aef0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801aef2:	4a08      	ldr	r2, [pc, #32]	; (801af14 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801aef4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801aef8:	4798      	blx	r3
 801aefa:	6863      	ldr	r3, [r4, #4]
 801aefc:	4628      	mov	r0, r5
 801aefe:	4631      	mov	r1, r6
 801af00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af02:	4798      	blx	r3
 801af04:	4620      	mov	r0, r4
 801af06:	bd70      	pop	{r4, r5, r6, pc}
 801af08:	0802df4c 	.word	0x0802df4c
 801af0c:	0802cb6c 	.word	0x0802cb6c
 801af10:	20056772 	.word	0x20056772
 801af14:	20056770 	.word	0x20056770

0801af18 <_ZN8touchgfx6Screen4drawEv>:
 801af18:	4b09      	ldr	r3, [pc, #36]	; (801af40 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801af1a:	b507      	push	{r0, r1, r2, lr}
 801af1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801af20:	2100      	movs	r1, #0
 801af22:	4b08      	ldr	r3, [pc, #32]	; (801af44 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801af24:	9100      	str	r1, [sp, #0]
 801af26:	4669      	mov	r1, sp
 801af28:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af2c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801af30:	f8ad 3006 	strh.w	r3, [sp, #6]
 801af34:	6803      	ldr	r3, [r0, #0]
 801af36:	689b      	ldr	r3, [r3, #8]
 801af38:	4798      	blx	r3
 801af3a:	b003      	add	sp, #12
 801af3c:	f85d fb04 	ldr.w	pc, [sp], #4
 801af40:	20056770 	.word	0x20056770
 801af44:	20056772 	.word	0x20056772

0801af48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801af48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af4c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801af50:	b089      	sub	sp, #36	; 0x24
 801af52:	4680      	mov	r8, r0
 801af54:	460c      	mov	r4, r1
 801af56:	2b00      	cmp	r3, #0
 801af58:	4615      	mov	r5, r2
 801af5a:	dd0e      	ble.n	801af7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801af5c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801af60:	2b00      	cmp	r3, #0
 801af62:	dd0a      	ble.n	801af7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801af64:	4628      	mov	r0, r5
 801af66:	f7ff ff5b 	bl	801ae20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801af6a:	4621      	mov	r1, r4
 801af6c:	f7fb ffea 	bl	8016f44 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801af70:	69eb      	ldr	r3, [r5, #28]
 801af72:	b928      	cbnz	r0, 801af80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801af74:	461d      	mov	r5, r3
 801af76:	2b00      	cmp	r3, #0
 801af78:	d1f4      	bne.n	801af64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801af7a:	b009      	add	sp, #36	; 0x24
 801af7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af80:	ae04      	add	r6, sp, #16
 801af82:	2b00      	cmp	r3, #0
 801af84:	f000 80b5 	beq.w	801b0f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801af88:	682b      	ldr	r3, [r5, #0]
 801af8a:	4629      	mov	r1, r5
 801af8c:	a802      	add	r0, sp, #8
 801af8e:	68db      	ldr	r3, [r3, #12]
 801af90:	4798      	blx	r3
 801af92:	4628      	mov	r0, r5
 801af94:	f7ff ff60 	bl	801ae58 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801af98:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801af9c:	4407      	add	r7, r0
 801af9e:	4628      	mov	r0, r5
 801afa0:	f7ff ff6e 	bl	801ae80 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801afa4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801afa8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801afac:	b23f      	sxth	r7, r7
 801afae:	4418      	add	r0, r3
 801afb0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801afb4:	4621      	mov	r1, r4
 801afb6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801afba:	f8ad 0012 	strh.w	r0, [sp, #18]
 801afbe:	4630      	mov	r0, r6
 801afc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801afc4:	f8ad 7010 	strh.w	r7, [sp, #16]
 801afc8:	f7fa fdb0 	bl	8015b2c <_ZN8touchgfx4RectaNERKS0_>
 801afcc:	4628      	mov	r0, r5
 801afce:	f7ff ff27 	bl	801ae20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801afd2:	ab06      	add	r3, sp, #24
 801afd4:	4602      	mov	r2, r0
 801afd6:	e896 0003 	ldmia.w	r6, {r0, r1}
 801afda:	e883 0003 	stmia.w	r3, {r0, r1}
 801afde:	4611      	mov	r1, r2
 801afe0:	4618      	mov	r0, r3
 801afe2:	f7fa fda3 	bl	8015b2c <_ZN8touchgfx4RectaNERKS0_>
 801afe6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801afea:	f9b4 1000 	ldrsh.w	r1, [r4]
 801afee:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801aff2:	4299      	cmp	r1, r3
 801aff4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801aff8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801affc:	d10b      	bne.n	801b016 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801affe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b002:	4552      	cmp	r2, sl
 801b004:	d107      	bne.n	801b016 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b006:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b00a:	455a      	cmp	r2, fp
 801b00c:	d103      	bne.n	801b016 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b00e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b012:	454a      	cmp	r2, r9
 801b014:	d06d      	beq.n	801b0f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b016:	f1bb 0f00 	cmp.w	fp, #0
 801b01a:	dd65      	ble.n	801b0e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b01c:	f1b9 0f00 	cmp.w	r9, #0
 801b020:	dd62      	ble.n	801b0e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b022:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b026:	fa1f f08a 	uxth.w	r0, sl
 801b02a:	4552      	cmp	r2, sl
 801b02c:	9000      	str	r0, [sp, #0]
 801b02e:	da12      	bge.n	801b056 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801b030:	9301      	str	r3, [sp, #4]
 801b032:	9b00      	ldr	r3, [sp, #0]
 801b034:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b038:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b03c:	1a9a      	subs	r2, r3, r2
 801b03e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b042:	4631      	mov	r1, r6
 801b044:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b048:	4640      	mov	r0, r8
 801b04a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b04e:	69ea      	ldr	r2, [r5, #28]
 801b050:	f7ff ff7a 	bl	801af48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b054:	9b01      	ldr	r3, [sp, #4]
 801b056:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b05a:	b29f      	uxth	r7, r3
 801b05c:	429a      	cmp	r2, r3
 801b05e:	da0d      	bge.n	801b07c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801b060:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b064:	1aba      	subs	r2, r7, r2
 801b066:	f8ad a012 	strh.w	sl, [sp, #18]
 801b06a:	4631      	mov	r1, r6
 801b06c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b070:	4640      	mov	r0, r8
 801b072:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b076:	69ea      	ldr	r2, [r5, #28]
 801b078:	f7ff ff66 	bl	801af48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b07c:	8822      	ldrh	r2, [r4, #0]
 801b07e:	445f      	add	r7, fp
 801b080:	88a3      	ldrh	r3, [r4, #4]
 801b082:	b2bf      	uxth	r7, r7
 801b084:	4413      	add	r3, r2
 801b086:	b23a      	sxth	r2, r7
 801b088:	b29b      	uxth	r3, r3
 801b08a:	b219      	sxth	r1, r3
 801b08c:	4291      	cmp	r1, r2
 801b08e:	dd0d      	ble.n	801b0ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801b090:	1bdb      	subs	r3, r3, r7
 801b092:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b096:	f8ad a012 	strh.w	sl, [sp, #18]
 801b09a:	4631      	mov	r1, r6
 801b09c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b0a0:	4640      	mov	r0, r8
 801b0a2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b0a6:	69ea      	ldr	r2, [r5, #28]
 801b0a8:	f7ff ff4e 	bl	801af48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b0ac:	88e2      	ldrh	r2, [r4, #6]
 801b0ae:	8863      	ldrh	r3, [r4, #2]
 801b0b0:	4413      	add	r3, r2
 801b0b2:	9a00      	ldr	r2, [sp, #0]
 801b0b4:	444a      	add	r2, r9
 801b0b6:	b29b      	uxth	r3, r3
 801b0b8:	fa1f f982 	uxth.w	r9, r2
 801b0bc:	b219      	sxth	r1, r3
 801b0be:	fa0f f289 	sxth.w	r2, r9
 801b0c2:	428a      	cmp	r2, r1
 801b0c4:	da15      	bge.n	801b0f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b0c6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b0ca:	eba3 0309 	sub.w	r3, r3, r9
 801b0ce:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b0d2:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b0d6:	4631      	mov	r1, r6
 801b0d8:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b0dc:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b0e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b0e4:	69ea      	ldr	r2, [r5, #28]
 801b0e6:	e001      	b.n	801b0ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801b0e8:	69ea      	ldr	r2, [r5, #28]
 801b0ea:	4621      	mov	r1, r4
 801b0ec:	4640      	mov	r0, r8
 801b0ee:	f7ff ff2b 	bl	801af48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b0f2:	4628      	mov	r0, r5
 801b0f4:	f7ff fe94 	bl	801ae20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b0f8:	6861      	ldr	r1, [r4, #4]
 801b0fa:	4602      	mov	r2, r0
 801b0fc:	4633      	mov	r3, r6
 801b0fe:	6820      	ldr	r0, [r4, #0]
 801b100:	c303      	stmia	r3!, {r0, r1}
 801b102:	4611      	mov	r1, r2
 801b104:	4630      	mov	r0, r6
 801b106:	f7fa fd11 	bl	8015b2c <_ZN8touchgfx4RectaNERKS0_>
 801b10a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	f77f af33 	ble.w	801af7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b114:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b118:	2b00      	cmp	r3, #0
 801b11a:	f77f af2e 	ble.w	801af7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b11e:	4628      	mov	r0, r5
 801b120:	f7ff fe9a 	bl	801ae58 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b124:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b128:	1a18      	subs	r0, r3, r0
 801b12a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b12e:	4628      	mov	r0, r5
 801b130:	f7ff fea6 	bl	801ae80 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b134:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b138:	4631      	mov	r1, r6
 801b13a:	1a18      	subs	r0, r3, r0
 801b13c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b140:	4628      	mov	r0, r5
 801b142:	682b      	ldr	r3, [r5, #0]
 801b144:	689b      	ldr	r3, [r3, #8]
 801b146:	4798      	blx	r3
 801b148:	e717      	b.n	801af7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801b14a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801b14a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b14c:	2300      	movs	r3, #0
 801b14e:	aa02      	add	r2, sp, #8
 801b150:	4604      	mov	r4, r0
 801b152:	3004      	adds	r0, #4
 801b154:	f842 3d04 	str.w	r3, [r2, #-4]!
 801b158:	460d      	mov	r5, r1
 801b15a:	f7fa fdbf 	bl	8015cdc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801b15e:	9a01      	ldr	r2, [sp, #4]
 801b160:	b11a      	cbz	r2, 801b16a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801b162:	4629      	mov	r1, r5
 801b164:	4620      	mov	r0, r4
 801b166:	f7ff feef 	bl	801af48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b16a:	b003      	add	sp, #12
 801b16c:	bd30      	pop	{r4, r5, pc}

0801b16e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801b16e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b170:	4602      	mov	r2, r0
 801b172:	4604      	mov	r4, r0
 801b174:	460d      	mov	r5, r1
 801b176:	466b      	mov	r3, sp
 801b178:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801b17c:	6851      	ldr	r1, [r2, #4]
 801b17e:	c303      	stmia	r3!, {r0, r1}
 801b180:	4629      	mov	r1, r5
 801b182:	4668      	mov	r0, sp
 801b184:	f7fa fcd2 	bl	8015b2c <_ZN8touchgfx4RectaNERKS0_>
 801b188:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b18c:	4669      	mov	r1, sp
 801b18e:	b123      	cbz	r3, 801b19a <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801b190:	4620      	mov	r0, r4
 801b192:	f7ff ffda 	bl	801b14a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801b196:	b003      	add	sp, #12
 801b198:	bd30      	pop	{r4, r5, pc}
 801b19a:	1d20      	adds	r0, r4, #4
 801b19c:	f7fa fd65 	bl	8015c6a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801b1a0:	e7f9      	b.n	801b196 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801b1a2 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801b1a2:	460b      	mov	r3, r1
 801b1a4:	680a      	ldr	r2, [r1, #0]
 801b1a6:	1d01      	adds	r1, r0, #4
 801b1a8:	6992      	ldr	r2, [r2, #24]
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	4710      	bx	r2

0801b1ae <_ZN8touchgfx12TextProviderC1Ev>:
 801b1ae:	b538      	push	{r3, r4, r5, lr}
 801b1b0:	2500      	movs	r5, #0
 801b1b2:	4604      	mov	r4, r0
 801b1b4:	220e      	movs	r2, #14
 801b1b6:	7405      	strb	r5, [r0, #16]
 801b1b8:	4629      	mov	r1, r5
 801b1ba:	82c5      	strh	r5, [r0, #22]
 801b1bc:	8305      	strh	r5, [r0, #24]
 801b1be:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801b1c0:	8605      	strh	r5, [r0, #48]	; 0x30
 801b1c2:	86c5      	strh	r5, [r0, #54]	; 0x36
 801b1c4:	8705      	strh	r5, [r0, #56]	; 0x38
 801b1c6:	e9c0 5500 	strd	r5, r5, [r0]
 801b1ca:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801b1ce:	e9c0 550f 	strd	r5, r5, [r0, #60]	; 0x3c
 801b1d2:	3044      	adds	r0, #68	; 0x44
 801b1d4:	f00b fc98 	bl	8026b08 <memset>
 801b1d8:	2301      	movs	r3, #1
 801b1da:	4620      	mov	r0, r4
 801b1dc:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 801b1e0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801b1e4:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 801b1e8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801b1ec:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 801b1f0:	f7ed fec6 	bl	8008f80 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801b1f4:	4620      	mov	r0, r4
 801b1f6:	bd38      	pop	{r3, r4, r5, pc}

0801b1f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801b1f8:	b530      	push	{r4, r5, lr}
 801b1fa:	2500      	movs	r5, #0
 801b1fc:	2401      	movs	r4, #1
 801b1fe:	6843      	ldr	r3, [r0, #4]
 801b200:	b913      	cbnz	r3, 801b208 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801b202:	6803      	ldr	r3, [r0, #0]
 801b204:	b1f3      	cbz	r3, 801b244 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801b206:	6043      	str	r3, [r0, #4]
 801b208:	7c03      	ldrb	r3, [r0, #16]
 801b20a:	b143      	cbz	r3, 801b21e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801b20c:	68c3      	ldr	r3, [r0, #12]
 801b20e:	b12b      	cbz	r3, 801b21c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b210:	881a      	ldrh	r2, [r3, #0]
 801b212:	b11a      	cbz	r2, 801b21c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b214:	1c9a      	adds	r2, r3, #2
 801b216:	60c2      	str	r2, [r0, #12]
 801b218:	8818      	ldrh	r0, [r3, #0]
 801b21a:	bd30      	pop	{r4, r5, pc}
 801b21c:	7405      	strb	r5, [r0, #16]
 801b21e:	6843      	ldr	r3, [r0, #4]
 801b220:	8819      	ldrh	r1, [r3, #0]
 801b222:	b179      	cbz	r1, 801b244 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801b224:	1c9a      	adds	r2, r3, #2
 801b226:	2902      	cmp	r1, #2
 801b228:	6042      	str	r2, [r0, #4]
 801b22a:	d1f5      	bne.n	801b218 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801b22c:	6883      	ldr	r3, [r0, #8]
 801b22e:	1d1a      	adds	r2, r3, #4
 801b230:	6082      	str	r2, [r0, #8]
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	60c3      	str	r3, [r0, #12]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d0e1      	beq.n	801b1fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b23a:	881b      	ldrh	r3, [r3, #0]
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d0de      	beq.n	801b1fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b240:	7404      	strb	r4, [r0, #16]
 801b242:	e7dc      	b.n	801b1fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b244:	2000      	movs	r0, #0
 801b246:	e7e8      	b.n	801b21a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801b248 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801b248:	b410      	push	{r4}
 801b24a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b24c:	9b01      	ldr	r3, [sp, #4]
 801b24e:	6082      	str	r2, [r0, #8]
 801b250:	6403      	str	r3, [r0, #64]	; 0x40
 801b252:	2300      	movs	r3, #0
 801b254:	6001      	str	r1, [r0, #0]
 801b256:	6043      	str	r3, [r0, #4]
 801b258:	60c3      	str	r3, [r0, #12]
 801b25a:	7403      	strb	r3, [r0, #16]
 801b25c:	8603      	strh	r3, [r0, #48]	; 0x30
 801b25e:	8303      	strh	r3, [r0, #24]
 801b260:	8703      	strh	r3, [r0, #56]	; 0x38
 801b262:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b266:	f7ed be8b 	b.w	8008f80 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801b26a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801b26a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b26c:	4605      	mov	r5, r0
 801b26e:	4608      	mov	r0, r1
 801b270:	b1f1      	cbz	r1, 801b2b0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801b272:	f105 0444 	add.w	r4, r5, #68	; 0x44
 801b276:	460b      	mov	r3, r1
 801b278:	f101 0708 	add.w	r7, r1, #8
 801b27c:	4622      	mov	r2, r4
 801b27e:	6818      	ldr	r0, [r3, #0]
 801b280:	3308      	adds	r3, #8
 801b282:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801b286:	4626      	mov	r6, r4
 801b288:	42bb      	cmp	r3, r7
 801b28a:	c603      	stmia	r6!, {r0, r1}
 801b28c:	4634      	mov	r4, r6
 801b28e:	d1f6      	bne.n	801b27e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801b290:	6818      	ldr	r0, [r3, #0]
 801b292:	6030      	str	r0, [r6, #0]
 801b294:	4610      	mov	r0, r2
 801b296:	889b      	ldrh	r3, [r3, #4]
 801b298:	80b3      	strh	r3, [r6, #4]
 801b29a:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 801b29e:	015b      	lsls	r3, r3, #5
 801b2a0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b2a4:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 801b2a8:	430b      	orrs	r3, r1
 801b2aa:	425b      	negs	r3, r3
 801b2ac:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
 801b2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b2b2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801b2b2:	b538      	push	{r3, r4, r5, lr}
 801b2b4:	460c      	mov	r4, r1
 801b2b6:	6811      	ldr	r1, [r2, #0]
 801b2b8:	4610      	mov	r0, r2
 801b2ba:	68cd      	ldr	r5, [r1, #12]
 801b2bc:	4619      	mov	r1, r3
 801b2be:	47a8      	blx	r5
 801b2c0:	2800      	cmp	r0, #0
 801b2c2:	bf08      	it	eq
 801b2c4:	4620      	moveq	r0, r4
 801b2c6:	bd38      	pop	{r3, r4, r5, pc}

0801b2c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801b2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2ca:	4604      	mov	r4, r0
 801b2cc:	4615      	mov	r5, r2
 801b2ce:	4608      	mov	r0, r1
 801b2d0:	b93a      	cbnz	r2, 801b2e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801b2d2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801b2d6:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
 801b2da:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 801b2de:	4628      	mov	r0, r5
 801b2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b2e2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801b2e6:	8893      	ldrh	r3, [r2, #4]
 801b2e8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801b2ec:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801b2f0:	79ee      	ldrb	r6, [r5, #7]
 801b2f2:	4316      	orrs	r6, r2
 801b2f4:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801b2f8:	189a      	adds	r2, r3, r2
 801b2fa:	b2b7      	uxth	r7, r6
 801b2fc:	b291      	uxth	r1, r2
 801b2fe:	291d      	cmp	r1, #29
 801b300:	f200 8084 	bhi.w	801b40c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801b304:	2201      	movs	r2, #1
 801b306:	10f6      	asrs	r6, r6, #3
 801b308:	408a      	lsls	r2, r1
 801b30a:	4978      	ldr	r1, [pc, #480]	; (801b4ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801b30c:	420a      	tst	r2, r1
 801b30e:	d12e      	bne.n	801b36e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801b310:	f412 7f60 	tst.w	r2, #896	; 0x380
 801b314:	d07a      	beq.n	801b40c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801b316:	f104 0244 	add.w	r2, r4, #68	; 0x44
 801b31a:	462b      	mov	r3, r5
 801b31c:	f105 0e08 	add.w	lr, r5, #8
 801b320:	4615      	mov	r5, r2
 801b322:	6818      	ldr	r0, [r3, #0]
 801b324:	3308      	adds	r3, #8
 801b326:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801b32a:	4694      	mov	ip, r2
 801b32c:	4573      	cmp	r3, lr
 801b32e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b332:	4662      	mov	r2, ip
 801b334:	d1f5      	bne.n	801b322 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801b336:	6818      	ldr	r0, [r3, #0]
 801b338:	f8cc 0000 	str.w	r0, [ip]
 801b33c:	889b      	ldrh	r3, [r3, #4]
 801b33e:	f8ac 3004 	strh.w	r3, [ip, #4]
 801b342:	b2b3      	uxth	r3, r6
 801b344:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 801b348:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 801b34c:	1aca      	subs	r2, r1, r3
 801b34e:	1bcf      	subs	r7, r1, r7
 801b350:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801b354:	b292      	uxth	r2, r2
 801b356:	1afb      	subs	r3, r7, r3
 801b358:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
 801b35c:	10d2      	asrs	r2, r2, #3
 801b35e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801b362:	4302      	orrs	r2, r0
 801b364:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 801b368:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 801b36c:	e7b7      	b.n	801b2de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801b36e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b370:	b92b      	cbnz	r3, 801b37e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801b372:	4b5f      	ldr	r3, [pc, #380]	; (801b4f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801b374:	21bf      	movs	r1, #191	; 0xbf
 801b376:	4a5f      	ldr	r2, [pc, #380]	; (801b4f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801b378:	485f      	ldr	r0, [pc, #380]	; (801b4f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801b37a:	f00b fb39 	bl	80269f0 <__assert_func>
 801b37e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b380:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b384:	8b59      	ldrh	r1, [r3, #26]
 801b386:	f640 6333 	movw	r3, #3635	; 0xe33
 801b38a:	4299      	cmp	r1, r3
 801b38c:	d110      	bne.n	801b3b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801b38e:	6803      	ldr	r3, [r0, #0]
 801b390:	68db      	ldr	r3, [r3, #12]
 801b392:	4798      	blx	r3
 801b394:	7b41      	ldrb	r1, [r0, #13]
 801b396:	00cb      	lsls	r3, r1, #3
 801b398:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b39c:	7a03      	ldrb	r3, [r0, #8]
 801b39e:	0648      	lsls	r0, r1, #25
 801b3a0:	ea43 0302 	orr.w	r3, r3, r2
 801b3a4:	bf44      	itt	mi
 801b3a6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b3aa:	b21b      	sxthmi	r3, r3
 801b3ac:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b3b0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 801b3b4:	462a      	mov	r2, r5
 801b3b6:	f105 0c08 	add.w	ip, r5, #8
 801b3ba:	443b      	add	r3, r7
 801b3bc:	4433      	add	r3, r6
 801b3be:	f104 0644 	add.w	r6, r4, #68	; 0x44
 801b3c2:	b29b      	uxth	r3, r3
 801b3c4:	4635      	mov	r5, r6
 801b3c6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b3ca:	6810      	ldr	r0, [r2, #0]
 801b3cc:	3208      	adds	r2, #8
 801b3ce:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801b3d2:	4637      	mov	r7, r6
 801b3d4:	4562      	cmp	r2, ip
 801b3d6:	c703      	stmia	r7!, {r0, r1}
 801b3d8:	463e      	mov	r6, r7
 801b3da:	d1f6      	bne.n	801b3ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801b3dc:	6810      	ldr	r0, [r2, #0]
 801b3de:	6038      	str	r0, [r7, #0]
 801b3e0:	8892      	ldrh	r2, [r2, #4]
 801b3e2:	80ba      	strh	r2, [r7, #4]
 801b3e4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801b3e8:	10db      	asrs	r3, r3, #3
 801b3ea:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801b3ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b3f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b3f6:	4313      	orrs	r3, r2
 801b3f8:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 801b3fc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801b400:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 801b404:	1a9b      	subs	r3, r3, r2
 801b406:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801b40a:	e768      	b.n	801b2de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801b40c:	f023 0204 	bic.w	r2, r3, #4
 801b410:	f640 611b 	movw	r1, #3611	; 0xe1b
 801b414:	428a      	cmp	r2, r1
 801b416:	d003      	beq.n	801b420 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801b418:	f640 621d 	movw	r2, #3613	; 0xe1d
 801b41c:	4293      	cmp	r3, r2
 801b41e:	d120      	bne.n	801b462 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801b420:	3b01      	subs	r3, #1
 801b422:	4602      	mov	r2, r0
 801b424:	4629      	mov	r1, r5
 801b426:	4620      	mov	r0, r4
 801b428:	b29b      	uxth	r3, r3
 801b42a:	f7ff ff42 	bl	801b2b2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801b42e:	7b41      	ldrb	r1, [r0, #13]
 801b430:	00cb      	lsls	r3, r1, #3
 801b432:	0649      	lsls	r1, r1, #25
 801b434:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b438:	7a03      	ldrb	r3, [r0, #8]
 801b43a:	ea43 0302 	orr.w	r3, r3, r2
 801b43e:	bf44      	itt	mi
 801b440:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b444:	b21b      	sxthmi	r3, r3
 801b446:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b44a:	7b6b      	ldrb	r3, [r5, #13]
 801b44c:	7aaa      	ldrb	r2, [r5, #10]
 801b44e:	005b      	lsls	r3, r3, #1
 801b450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b454:	4313      	orrs	r3, r2
 801b456:	115a      	asrs	r2, r3, #5
 801b458:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801b45c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801b460:	e035      	b.n	801b4ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801b462:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801b466:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801b46a:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801b46e:	7a2a      	ldrb	r2, [r5, #8]
 801b470:	ea42 0201 	orr.w	r2, r2, r1
 801b474:	f640 6109 	movw	r1, #3593	; 0xe09
 801b478:	bf1c      	itt	ne
 801b47a:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801b47e:	b212      	sxthne	r2, r2
 801b480:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801b484:	f023 0210 	bic.w	r2, r3, #16
 801b488:	428a      	cmp	r2, r1
 801b48a:	d003      	beq.n	801b494 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801b48c:	f640 6213 	movw	r2, #3603	; 0xe13
 801b490:	4293      	cmp	r3, r2
 801b492:	d129      	bne.n	801b4e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801b494:	7b6e      	ldrb	r6, [r5, #13]
 801b496:	4629      	mov	r1, r5
 801b498:	0076      	lsls	r6, r6, #1
 801b49a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801b49e:	7aae      	ldrb	r6, [r5, #10]
 801b4a0:	4316      	orrs	r6, r2
 801b4a2:	f640 6213 	movw	r2, #3603	; 0xe13
 801b4a6:	4293      	cmp	r3, r2
 801b4a8:	4602      	mov	r2, r0
 801b4aa:	4620      	mov	r0, r4
 801b4ac:	bf16      	itet	ne
 801b4ae:	f103 33ff 	addne.w	r3, r3, #4294967295
 801b4b2:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801b4b6:	b29b      	uxthne	r3, r3
 801b4b8:	f7ff fefb 	bl	801b2b2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801b4bc:	7b43      	ldrb	r3, [r0, #13]
 801b4be:	7a82      	ldrb	r2, [r0, #10]
 801b4c0:	005b      	lsls	r3, r3, #1
 801b4c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b4c6:	4313      	orrs	r3, r2
 801b4c8:	1af6      	subs	r6, r6, r3
 801b4ca:	f8a4 6056 	strh.w	r6, [r4, #86]	; 0x56
 801b4ce:	7b69      	ldrb	r1, [r5, #13]
 801b4d0:	00cb      	lsls	r3, r1, #3
 801b4d2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b4d6:	7a2b      	ldrb	r3, [r5, #8]
 801b4d8:	4313      	orrs	r3, r2
 801b4da:	064a      	lsls	r2, r1, #25
 801b4dc:	bf44      	itt	mi
 801b4de:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b4e2:	b21b      	sxthmi	r3, r3
 801b4e4:	1bdb      	subs	r3, r3, r7
 801b4e6:	e73f      	b.n	801b368 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801b4e8:	2300      	movs	r3, #0
 801b4ea:	e7b7      	b.n	801b45c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801b4ec:	3fc00079 	.word	0x3fc00079
 801b4f0:	0802df78 	.word	0x0802df78
 801b4f4:	0802e1ea 	.word	0x0802e1ea
 801b4f8:	0802df81 	.word	0x0802df81

0801b4fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801b4fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b500:	4604      	mov	r4, r0
 801b502:	b942      	cbnz	r2, 801b516 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801b504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b508:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801b50c:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 801b510:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801b514:	e046      	b.n	801b5a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801b516:	7b51      	ldrb	r1, [r2, #13]
 801b518:	8893      	ldrh	r3, [r2, #4]
 801b51a:	010f      	lsls	r7, r1, #4
 801b51c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801b520:	79d7      	ldrb	r7, [r2, #7]
 801b522:	4307      	orrs	r7, r0
 801b524:	2f04      	cmp	r7, #4
 801b526:	b2bd      	uxth	r5, r7
 801b528:	bfcc      	ite	gt
 801b52a:	08bf      	lsrgt	r7, r7, #2
 801b52c:	2701      	movle	r7, #1
 801b52e:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801b532:	f200 80ab 	bhi.w	801b68c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801b536:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801b53a:	4283      	cmp	r3, r0
 801b53c:	d216      	bcs.n	801b56c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b53e:	f240 605b 	movw	r0, #1627	; 0x65b
 801b542:	4283      	cmp	r3, r0
 801b544:	d859      	bhi.n	801b5fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801b546:	f240 6057 	movw	r0, #1623	; 0x657
 801b54a:	4283      	cmp	r3, r0
 801b54c:	d20e      	bcs.n	801b56c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b54e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801b552:	d24a      	bcs.n	801b5ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801b554:	f240 604e 	movw	r0, #1614	; 0x64e
 801b558:	4283      	cmp	r3, r0
 801b55a:	d207      	bcs.n	801b56c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b55c:	f240 601a 	movw	r0, #1562	; 0x61a
 801b560:	4283      	cmp	r3, r0
 801b562:	d02a      	beq.n	801b5ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b564:	d821      	bhi.n	801b5aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801b566:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801b56a:	d35b      	bcc.n	801b624 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b56c:	f9b4 3052 	ldrsh.w	r3, [r4, #82]	; 0x52
 801b570:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b574:	f040 80d0 	bne.w	801b718 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801b578:	f9b4 0054 	ldrsh.w	r0, [r4, #84]	; 0x54
 801b57c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b580:	f040 80ca 	bne.w	801b718 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801b584:	00cb      	lsls	r3, r1, #3
 801b586:	0649      	lsls	r1, r1, #25
 801b588:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b58c:	7a13      	ldrb	r3, [r2, #8]
 801b58e:	ea43 0300 	orr.w	r3, r3, r0
 801b592:	bf44      	itt	mi
 801b594:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b598:	b21b      	sxthmi	r3, r3
 801b59a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b59e:	1b5d      	subs	r5, r3, r5
 801b5a0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801b5a4:	4610      	mov	r0, r2
 801b5a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b5aa:	f240 604b 	movw	r0, #1611	; 0x64b
 801b5ae:	4283      	cmp	r3, r0
 801b5b0:	d338      	bcc.n	801b624 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b5b2:	f240 604c 	movw	r0, #1612	; 0x64c
 801b5b6:	4283      	cmp	r3, r0
 801b5b8:	d9d8      	bls.n	801b56c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b5ba:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801b5be:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 801b5c2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b5c6:	f040 80f2 	bne.w	801b7ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801b5ca:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b5ce:	f040 80ee 	bne.w	801b7ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801b5d2:	00cb      	lsls	r3, r1, #3
 801b5d4:	064e      	lsls	r6, r1, #25
 801b5d6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b5da:	7a13      	ldrb	r3, [r2, #8]
 801b5dc:	ea43 0300 	orr.w	r3, r3, r0
 801b5e0:	bf44      	itt	mi
 801b5e2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b5e6:	b21b      	sxthmi	r3, r3
 801b5e8:	e7d9      	b.n	801b59e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801b5ea:	f240 6054 	movw	r0, #1620	; 0x654
 801b5ee:	4283      	cmp	r3, r0
 801b5f0:	d8e3      	bhi.n	801b5ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b5f2:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801b5f6:	d9e0      	bls.n	801b5ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b5f8:	e7b8      	b.n	801b56c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b5fa:	f240 6074 	movw	r0, #1652	; 0x674
 801b5fe:	4283      	cmp	r3, r0
 801b600:	d0b4      	beq.n	801b56c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b602:	d82d      	bhi.n	801b660 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801b604:	f240 605e 	movw	r0, #1630	; 0x65e
 801b608:	4283      	cmp	r3, r0
 801b60a:	d804      	bhi.n	801b616 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801b60c:	f240 605d 	movw	r0, #1629	; 0x65d
 801b610:	4283      	cmp	r3, r0
 801b612:	d3d2      	bcc.n	801b5ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b614:	e7aa      	b.n	801b56c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b616:	f240 605f 	movw	r0, #1631	; 0x65f
 801b61a:	4283      	cmp	r3, r0
 801b61c:	d0cd      	beq.n	801b5ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b61e:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801b622:	d0a3      	beq.n	801b56c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b624:	00cb      	lsls	r3, r1, #3
 801b626:	0649      	lsls	r1, r1, #25
 801b628:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b62c:	7a13      	ldrb	r3, [r2, #8]
 801b62e:	ea43 0300 	orr.w	r3, r3, r0
 801b632:	bf44      	itt	mi
 801b634:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b638:	b21b      	sxthmi	r3, r3
 801b63a:	1b5d      	subs	r5, r3, r5
 801b63c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b640:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801b644:	7b53      	ldrb	r3, [r2, #13]
 801b646:	015b      	lsls	r3, r3, #5
 801b648:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b64c:	7993      	ldrb	r3, [r2, #6]
 801b64e:	430b      	orrs	r3, r1
 801b650:	2105      	movs	r1, #5
 801b652:	005b      	lsls	r3, r3, #1
 801b654:	fb93 f3f1 	sdiv	r3, r3, r1
 801b658:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801b65c:	440b      	add	r3, r1
 801b65e:	e757      	b.n	801b510 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801b660:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801b664:	4283      	cmp	r3, r0
 801b666:	d809      	bhi.n	801b67c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801b668:	f240 60df 	movw	r0, #1759	; 0x6df
 801b66c:	4283      	cmp	r3, r0
 801b66e:	f4bf af7d 	bcs.w	801b56c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b672:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801b676:	2b05      	cmp	r3, #5
 801b678:	d8d4      	bhi.n	801b624 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b67a:	e777      	b.n	801b56c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b67c:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801b680:	4283      	cmp	r3, r0
 801b682:	d09a      	beq.n	801b5ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b684:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801b688:	4283      	cmp	r3, r0
 801b68a:	e7ca      	b.n	801b622 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801b68c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801b690:	d22b      	bcs.n	801b6ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801b692:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801b696:	4283      	cmp	r3, r0
 801b698:	d28f      	bcs.n	801b5ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b69a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b69e:	4283      	cmp	r3, r0
 801b6a0:	d816      	bhi.n	801b6d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801b6a2:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801b6a6:	4283      	cmp	r3, r0
 801b6a8:	f4bf af60 	bcs.w	801b56c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b6ac:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801b6b0:	4283      	cmp	r3, r0
 801b6b2:	d80a      	bhi.n	801b6ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801b6b4:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801b6b8:	4283      	cmp	r3, r0
 801b6ba:	f4bf af57 	bcs.w	801b56c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b6be:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801b6c2:	4283      	cmp	r3, r0
 801b6c4:	f43f af79 	beq.w	801b5ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b6c8:	e7ac      	b.n	801b624 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b6ca:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801b6ce:	e7f8      	b.n	801b6c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801b6d0:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801b6d4:	4283      	cmp	r3, r0
 801b6d6:	d802      	bhi.n	801b6de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801b6d8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b6dc:	e798      	b.n	801b610 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801b6de:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801b6e2:	4283      	cmp	r3, r0
 801b6e4:	f47f af42 	bne.w	801b56c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b6e8:	e767      	b.n	801b5ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b6ea:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801b6ee:	4283      	cmp	r3, r0
 801b6f0:	f43f af63 	beq.w	801b5ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b6f4:	d802      	bhi.n	801b6fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801b6f6:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801b6fa:	e7f2      	b.n	801b6e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801b6fc:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801b700:	4283      	cmp	r3, r0
 801b702:	d805      	bhi.n	801b710 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801b704:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801b708:	4283      	cmp	r3, r0
 801b70a:	f4ff af2f 	bcc.w	801b56c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b70e:	e754      	b.n	801b5ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b710:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801b714:	4283      	cmp	r3, r0
 801b716:	e7af      	b.n	801b678 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801b718:	f104 0c44 	add.w	ip, r4, #68	; 0x44
 801b71c:	4617      	mov	r7, r2
 801b71e:	f102 0808 	add.w	r8, r2, #8
 801b722:	4666      	mov	r6, ip
 801b724:	6838      	ldr	r0, [r7, #0]
 801b726:	3708      	adds	r7, #8
 801b728:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801b72c:	46e6      	mov	lr, ip
 801b72e:	4547      	cmp	r7, r8
 801b730:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801b734:	46f4      	mov	ip, lr
 801b736:	d1f5      	bne.n	801b724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801b738:	6838      	ldr	r0, [r7, #0]
 801b73a:	f8ce 0000 	str.w	r0, [lr]
 801b73e:	88b9      	ldrh	r1, [r7, #4]
 801b740:	f8ae 1004 	strh.w	r1, [lr, #4]
 801b744:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 801b748:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b74c:	d009      	beq.n	801b762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801b74e:	7b51      	ldrb	r1, [r2, #13]
 801b750:	7992      	ldrb	r2, [r2, #6]
 801b752:	0149      	lsls	r1, r1, #5
 801b754:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b758:	4311      	orrs	r1, r2
 801b75a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b75e:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801b762:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b766:	d00d      	beq.n	801b784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801b768:	442b      	add	r3, r5
 801b76a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801b76e:	b29b      	uxth	r3, r3
 801b770:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b774:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801b778:	10db      	asrs	r3, r3, #3
 801b77a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b77e:	4313      	orrs	r3, r2
 801b780:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801b784:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801b788:	00cb      	lsls	r3, r1, #3
 801b78a:	064f      	lsls	r7, r1, #25
 801b78c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b790:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801b794:	ea43 0302 	orr.w	r3, r3, r2
 801b798:	bf44      	itt	mi
 801b79a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b79e:	b21b      	sxthmi	r3, r3
 801b7a0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b7a4:	1b5d      	subs	r5, r3, r5
 801b7a6:	4632      	mov	r2, r6
 801b7a8:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801b7ac:	e6fa      	b.n	801b5a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801b7ae:	f104 0e44 	add.w	lr, r4, #68	; 0x44
 801b7b2:	4694      	mov	ip, r2
 801b7b4:	f102 0908 	add.w	r9, r2, #8
 801b7b8:	4676      	mov	r6, lr
 801b7ba:	f8dc 0000 	ldr.w	r0, [ip]
 801b7be:	f10c 0c08 	add.w	ip, ip, #8
 801b7c2:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801b7c6:	46f0      	mov	r8, lr
 801b7c8:	45cc      	cmp	ip, r9
 801b7ca:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801b7ce:	46c6      	mov	lr, r8
 801b7d0:	d1f3      	bne.n	801b7ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801b7d2:	f8dc 0000 	ldr.w	r0, [ip]
 801b7d6:	f8c8 0000 	str.w	r0, [r8]
 801b7da:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801b7de:	f8a8 1004 	strh.w	r1, [r8, #4]
 801b7e2:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 801b7e6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b7ea:	d009      	beq.n	801b800 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801b7ec:	7b51      	ldrb	r1, [r2, #13]
 801b7ee:	7992      	ldrb	r2, [r2, #6]
 801b7f0:	0149      	lsls	r1, r1, #5
 801b7f2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b7f6:	4311      	orrs	r1, r2
 801b7f8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b7fc:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801b800:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b804:	d00d      	beq.n	801b822 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801b806:	1bdb      	subs	r3, r3, r7
 801b808:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801b80c:	b29b      	uxth	r3, r3
 801b80e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b812:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801b816:	10db      	asrs	r3, r3, #3
 801b818:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b81c:	4313      	orrs	r3, r2
 801b81e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801b822:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801b826:	00cb      	lsls	r3, r1, #3
 801b828:	0648      	lsls	r0, r1, #25
 801b82a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b82e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801b832:	ea43 0302 	orr.w	r3, r3, r2
 801b836:	bf44      	itt	mi
 801b838:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b83c:	b21b      	sxthmi	r3, r3
 801b83e:	e7b1      	b.n	801b7a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801b840 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b844:	461e      	mov	r6, r3
 801b846:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b848:	4604      	mov	r4, r0
 801b84a:	4617      	mov	r7, r2
 801b84c:	b92b      	cbnz	r3, 801b85a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801b84e:	4b25      	ldr	r3, [pc, #148]	; (801b8e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801b850:	21bf      	movs	r1, #191	; 0xbf
 801b852:	4a25      	ldr	r2, [pc, #148]	; (801b8e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801b854:	4825      	ldr	r0, [pc, #148]	; (801b8ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801b856:	f00b f8cb 	bl	80269f0 <__assert_func>
 801b85a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b85c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b860:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801b864:	f7ed fae6 	bl	8008e34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b868:	4605      	mov	r5, r0
 801b86a:	b918      	cbnz	r0, 801b874 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801b86c:	6030      	str	r0, [r6, #0]
 801b86e:	4628      	mov	r0, r5
 801b870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b874:	683b      	ldr	r3, [r7, #0]
 801b876:	4601      	mov	r1, r0
 801b878:	4638      	mov	r0, r7
 801b87a:	68db      	ldr	r3, [r3, #12]
 801b87c:	4798      	blx	r3
 801b87e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801b882:	4602      	mov	r2, r0
 801b884:	6030      	str	r0, [r6, #0]
 801b886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b88a:	d213      	bcs.n	801b8b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801b88c:	4643      	mov	r3, r8
 801b88e:	4639      	mov	r1, r7
 801b890:	4620      	mov	r0, r4
 801b892:	f7ff fe33 	bl	801b4fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b896:	6030      	str	r0, [r6, #0]
 801b898:	6833      	ldr	r3, [r6, #0]
 801b89a:	b143      	cbz	r3, 801b8ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801b89c:	7b5a      	ldrb	r2, [r3, #13]
 801b89e:	7a9b      	ldrb	r3, [r3, #10]
 801b8a0:	0052      	lsls	r2, r2, #1
 801b8a2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b8a6:	4313      	orrs	r3, r2
 801b8a8:	bf0c      	ite	eq
 801b8aa:	2301      	moveq	r3, #1
 801b8ac:	2300      	movne	r3, #0
 801b8ae:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801b8b2:	e7dc      	b.n	801b86e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801b8b4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801b8b8:	b29b      	uxth	r3, r3
 801b8ba:	2b7f      	cmp	r3, #127	; 0x7f
 801b8bc:	d804      	bhi.n	801b8c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801b8be:	4639      	mov	r1, r7
 801b8c0:	4620      	mov	r0, r4
 801b8c2:	f7ff fd01 	bl	801b2c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b8c6:	e7e6      	b.n	801b896 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801b8c8:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	d0e3      	beq.n	801b898 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801b8d0:	f640 1302 	movw	r3, #2306	; 0x902
 801b8d4:	429d      	cmp	r5, r3
 801b8d6:	d1df      	bne.n	801b898 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801b8d8:	4601      	mov	r1, r0
 801b8da:	4620      	mov	r0, r4
 801b8dc:	f7ff fcc5 	bl	801b26a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b8e0:	e7d9      	b.n	801b896 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801b8e2:	bf00      	nop
 801b8e4:	0802df78 	.word	0x0802df78
 801b8e8:	0802e1ea 	.word	0x0802e1ea
 801b8ec:	0802df81 	.word	0x0802df81

0801b8f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801b8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b8f4:	461e      	mov	r6, r3
 801b8f6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b8f8:	4604      	mov	r4, r0
 801b8fa:	4617      	mov	r7, r2
 801b8fc:	b92b      	cbnz	r3, 801b90a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801b8fe:	4b26      	ldr	r3, [pc, #152]	; (801b998 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801b900:	21bf      	movs	r1, #191	; 0xbf
 801b902:	4a26      	ldr	r2, [pc, #152]	; (801b99c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801b904:	4826      	ldr	r0, [pc, #152]	; (801b9a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801b906:	f00b f873 	bl	80269f0 <__assert_func>
 801b90a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b90c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b910:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801b914:	f7ed fa8e 	bl	8008e34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b918:	4605      	mov	r5, r0
 801b91a:	b918      	cbnz	r0, 801b924 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801b91c:	6030      	str	r0, [r6, #0]
 801b91e:	4628      	mov	r0, r5
 801b920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b924:	683b      	ldr	r3, [r7, #0]
 801b926:	4601      	mov	r1, r0
 801b928:	4638      	mov	r0, r7
 801b92a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801b92e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b932:	47c8      	blx	r9
 801b934:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801b938:	4602      	mov	r2, r0
 801b93a:	6030      	str	r0, [r6, #0]
 801b93c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b940:	d213      	bcs.n	801b96a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801b942:	4643      	mov	r3, r8
 801b944:	4639      	mov	r1, r7
 801b946:	4620      	mov	r0, r4
 801b948:	f7ff fdd8 	bl	801b4fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b94c:	6030      	str	r0, [r6, #0]
 801b94e:	6833      	ldr	r3, [r6, #0]
 801b950:	b143      	cbz	r3, 801b964 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801b952:	7b5a      	ldrb	r2, [r3, #13]
 801b954:	7a9b      	ldrb	r3, [r3, #10]
 801b956:	0052      	lsls	r2, r2, #1
 801b958:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b95c:	4313      	orrs	r3, r2
 801b95e:	bf0c      	ite	eq
 801b960:	2301      	moveq	r3, #1
 801b962:	2300      	movne	r3, #0
 801b964:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801b968:	e7d9      	b.n	801b91e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801b96a:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801b96e:	b29b      	uxth	r3, r3
 801b970:	2b7f      	cmp	r3, #127	; 0x7f
 801b972:	d804      	bhi.n	801b97e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801b974:	4639      	mov	r1, r7
 801b976:	4620      	mov	r0, r4
 801b978:	f7ff fca6 	bl	801b2c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b97c:	e7e6      	b.n	801b94c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801b97e:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801b982:	2b00      	cmp	r3, #0
 801b984:	d0e3      	beq.n	801b94e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801b986:	f640 1302 	movw	r3, #2306	; 0x902
 801b98a:	429d      	cmp	r5, r3
 801b98c:	d1df      	bne.n	801b94e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801b98e:	4601      	mov	r1, r0
 801b990:	4620      	mov	r0, r4
 801b992:	f7ff fc6a 	bl	801b26a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b996:	e7d9      	b.n	801b94c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801b998:	0802df78 	.word	0x0802df78
 801b99c:	0802e1ea 	.word	0x0802e1ea
 801b9a0:	0802df81 	.word	0x0802df81

0801b9a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801b9a4:	b510      	push	{r4, lr}
 801b9a6:	4604      	mov	r4, r0
 801b9a8:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801b9aa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b9ac:	b9d9      	cbnz	r1, 801b9e6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801b9ae:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b9b0:	2b0a      	cmp	r3, #10
 801b9b2:	d036      	beq.n	801ba22 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801b9b4:	4620      	mov	r0, r4
 801b9b6:	f7ff fc1f 	bl	801b1f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801b9ba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b9bc:	2b09      	cmp	r3, #9
 801b9be:	d906      	bls.n	801b9ce <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801b9c0:	4b18      	ldr	r3, [pc, #96]	; (801ba24 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801b9c2:	f240 1103 	movw	r1, #259	; 0x103
 801b9c6:	4a18      	ldr	r2, [pc, #96]	; (801ba28 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801b9c8:	4818      	ldr	r0, [pc, #96]	; (801ba2c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801b9ca:	f00b f811 	bl	80269f0 <__assert_func>
 801b9ce:	1c5a      	adds	r2, r3, #1
 801b9d0:	8622      	strh	r2, [r4, #48]	; 0x30
 801b9d2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801b9d4:	4413      	add	r3, r2
 801b9d6:	b29b      	uxth	r3, r3
 801b9d8:	2b09      	cmp	r3, #9
 801b9da:	bf88      	it	hi
 801b9dc:	3b0a      	subhi	r3, #10
 801b9de:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b9e2:	8358      	strh	r0, [r3, #26]
 801b9e4:	e7e3      	b.n	801b9ae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801b9e6:	2b0a      	cmp	r3, #10
 801b9e8:	d01b      	beq.n	801ba22 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801b9ea:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801b9ec:	3901      	subs	r1, #1
 801b9ee:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801b9f2:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801b9f4:	8721      	strh	r1, [r4, #56]	; 0x38
 801b9f6:	1c51      	adds	r1, r2, #1
 801b9f8:	b289      	uxth	r1, r1
 801b9fa:	2901      	cmp	r1, #1
 801b9fc:	bf8a      	itet	hi
 801b9fe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801ba02:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801ba04:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801ba06:	2b09      	cmp	r3, #9
 801ba08:	d8da      	bhi.n	801b9c0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801ba0a:	1c5a      	adds	r2, r3, #1
 801ba0c:	8622      	strh	r2, [r4, #48]	; 0x30
 801ba0e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801ba10:	4413      	add	r3, r2
 801ba12:	b29b      	uxth	r3, r3
 801ba14:	2b09      	cmp	r3, #9
 801ba16:	bf88      	it	hi
 801ba18:	3b0a      	subhi	r3, #10
 801ba1a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ba1e:	8358      	strh	r0, [r3, #26]
 801ba20:	e7c2      	b.n	801b9a8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801ba22:	bd10      	pop	{r4, pc}
 801ba24:	0802dfad 	.word	0x0802dfad
 801ba28:	0802e340 	.word	0x0802e340
 801ba2c:	0802df81 	.word	0x0802df81

0801ba30 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801ba30:	b538      	push	{r3, r4, r5, lr}
 801ba32:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801ba34:	4604      	mov	r4, r0
 801ba36:	b92a      	cbnz	r2, 801ba44 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801ba38:	4b13      	ldr	r3, [pc, #76]	; (801ba88 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801ba3a:	21d4      	movs	r1, #212	; 0xd4
 801ba3c:	4a13      	ldr	r2, [pc, #76]	; (801ba8c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801ba3e:	4814      	ldr	r0, [pc, #80]	; (801ba90 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801ba40:	f00a ffd6 	bl	80269f0 <__assert_func>
 801ba44:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ba46:	3a01      	subs	r2, #1
 801ba48:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801ba4c:	8b4d      	ldrh	r5, [r1, #26]
 801ba4e:	8602      	strh	r2, [r0, #48]	; 0x30
 801ba50:	1c5a      	adds	r2, r3, #1
 801ba52:	b292      	uxth	r2, r2
 801ba54:	2a09      	cmp	r2, #9
 801ba56:	bf8a      	itet	hi
 801ba58:	3b09      	subhi	r3, #9
 801ba5a:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801ba5c:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801ba5e:	f7ff ffa1 	bl	801b9a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ba62:	8b23      	ldrh	r3, [r4, #24]
 801ba64:	2b01      	cmp	r3, #1
 801ba66:	bf9c      	itt	ls
 801ba68:	3301      	addls	r3, #1
 801ba6a:	8323      	strhls	r3, [r4, #24]
 801ba6c:	8ae3      	ldrh	r3, [r4, #22]
 801ba6e:	b90b      	cbnz	r3, 801ba74 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801ba70:	2302      	movs	r3, #2
 801ba72:	82e3      	strh	r3, [r4, #22]
 801ba74:	8ae3      	ldrh	r3, [r4, #22]
 801ba76:	4628      	mov	r0, r5
 801ba78:	3b01      	subs	r3, #1
 801ba7a:	b29b      	uxth	r3, r3
 801ba7c:	82e3      	strh	r3, [r4, #22]
 801ba7e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ba82:	8265      	strh	r5, [r4, #18]
 801ba84:	bd38      	pop	{r3, r4, r5, pc}
 801ba86:	bf00      	nop
 801ba88:	0802df78 	.word	0x0802df78
 801ba8c:	0802e295 	.word	0x0802e295
 801ba90:	0802df81 	.word	0x0802df81

0801ba94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ba94:	428a      	cmp	r2, r1
 801ba96:	b538      	push	{r3, r4, r5, lr}
 801ba98:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801ba9a:	d90c      	bls.n	801bab6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801ba9c:	b92c      	cbnz	r4, 801baaa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801ba9e:	4b1c      	ldr	r3, [pc, #112]	; (801bb10 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801baa0:	21e0      	movs	r1, #224	; 0xe0
 801baa2:	4a1c      	ldr	r2, [pc, #112]	; (801bb14 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801baa4:	481c      	ldr	r0, [pc, #112]	; (801bb18 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801baa6:	f00a ffa3 	bl	80269f0 <__assert_func>
 801baaa:	3c01      	subs	r4, #1
 801baac:	4b1b      	ldr	r3, [pc, #108]	; (801bb1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801baae:	4a1c      	ldr	r2, [pc, #112]	; (801bb20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801bab0:	21c4      	movs	r1, #196	; 0xc4
 801bab2:	8604      	strh	r4, [r0, #48]	; 0x30
 801bab4:	e7f6      	b.n	801baa4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801bab6:	428c      	cmp	r4, r1
 801bab8:	d203      	bcs.n	801bac2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801baba:	4b1a      	ldr	r3, [pc, #104]	; (801bb24 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801babc:	21ca      	movs	r1, #202	; 0xca
 801babe:	4a1a      	ldr	r2, [pc, #104]	; (801bb28 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801bac0:	e7f0      	b.n	801baa4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801bac2:	1a64      	subs	r4, r4, r1
 801bac4:	250a      	movs	r5, #10
 801bac6:	8604      	strh	r4, [r0, #48]	; 0x30
 801bac8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801baca:	4421      	add	r1, r4
 801bacc:	b289      	uxth	r1, r1
 801bace:	2909      	cmp	r1, #9
 801bad0:	bf88      	it	hi
 801bad2:	390a      	subhi	r1, #10
 801bad4:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801bad6:	b1ba      	cbz	r2, 801bb08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801bad8:	3a01      	subs	r2, #1
 801bada:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801badc:	b292      	uxth	r2, r2
 801bade:	2909      	cmp	r1, #9
 801bae0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801bae4:	d903      	bls.n	801baee <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801bae6:	4b11      	ldr	r3, [pc, #68]	; (801bb2c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801bae8:	21e5      	movs	r1, #229	; 0xe5
 801baea:	4a11      	ldr	r2, [pc, #68]	; (801bb30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801baec:	e7da      	b.n	801baa4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801baee:	3101      	adds	r1, #1
 801baf0:	8601      	strh	r1, [r0, #48]	; 0x30
 801baf2:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801baf4:	b901      	cbnz	r1, 801baf8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801baf6:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801baf8:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801bafa:	3901      	subs	r1, #1
 801bafc:	b289      	uxth	r1, r1
 801bafe:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801bb00:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801bb04:	834c      	strh	r4, [r1, #26]
 801bb06:	e7e6      	b.n	801bad6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801bb08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bb0c:	f7ff bf4a 	b.w	801b9a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801bb10:	0802df78 	.word	0x0802df78
 801bb14:	0802e06e 	.word	0x0802e06e
 801bb18:	0802df81 	.word	0x0802df81
 801bb1c:	0802dfb9 	.word	0x0802dfb9
 801bb20:	0802e118 	.word	0x0802e118
 801bb24:	0802dfc7 	.word	0x0802dfc7
 801bb28:	0802e3ef 	.word	0x0802e3ef
 801bb2c:	0802dfd3 	.word	0x0802dfd3
 801bb30:	0802dfe6 	.word	0x0802dfe6

0801bb34 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801bb34:	3a01      	subs	r2, #1
 801bb36:	b570      	push	{r4, r5, r6, lr}
 801bb38:	b292      	uxth	r2, r2
 801bb3a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801bb3e:	42b2      	cmp	r2, r6
 801bb40:	d019      	beq.n	801bb76 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801bb42:	8b04      	ldrh	r4, [r0, #24]
 801bb44:	f831 5b02 	ldrh.w	r5, [r1], #2
 801bb48:	4294      	cmp	r4, r2
 801bb4a:	d805      	bhi.n	801bb58 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801bb4c:	4b19      	ldr	r3, [pc, #100]	; (801bbb4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801bb4e:	4a1a      	ldr	r2, [pc, #104]	; (801bbb8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801bb50:	21c4      	movs	r1, #196	; 0xc4
 801bb52:	481a      	ldr	r0, [pc, #104]	; (801bbbc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801bb54:	f00a ff4c 	bl	80269f0 <__assert_func>
 801bb58:	8ac4      	ldrh	r4, [r0, #22]
 801bb5a:	4414      	add	r4, r2
 801bb5c:	3a01      	subs	r2, #1
 801bb5e:	b2a4      	uxth	r4, r4
 801bb60:	b292      	uxth	r2, r2
 801bb62:	2c01      	cmp	r4, #1
 801bb64:	bf88      	it	hi
 801bb66:	3c02      	subhi	r4, #2
 801bb68:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801bb6c:	8a64      	ldrh	r4, [r4, #18]
 801bb6e:	42ac      	cmp	r4, r5
 801bb70:	d0e5      	beq.n	801bb3e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801bb72:	2000      	movs	r0, #0
 801bb74:	bd70      	pop	{r4, r5, r6, pc}
 801bb76:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801bb7a:	2400      	movs	r4, #0
 801bb7c:	4413      	add	r3, r2
 801bb7e:	b2a2      	uxth	r2, r4
 801bb80:	429a      	cmp	r2, r3
 801bb82:	da14      	bge.n	801bbae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801bb84:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801bb86:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801bb8a:	4296      	cmp	r6, r2
 801bb8c:	d802      	bhi.n	801bb94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801bb8e:	4b09      	ldr	r3, [pc, #36]	; (801bbb4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801bb90:	4a0b      	ldr	r2, [pc, #44]	; (801bbc0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801bb92:	e7dd      	b.n	801bb50 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801bb94:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801bb96:	3401      	adds	r4, #1
 801bb98:	4432      	add	r2, r6
 801bb9a:	b292      	uxth	r2, r2
 801bb9c:	2a09      	cmp	r2, #9
 801bb9e:	bf88      	it	hi
 801bba0:	3a0a      	subhi	r2, #10
 801bba2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801bba6:	8b52      	ldrh	r2, [r2, #26]
 801bba8:	42aa      	cmp	r2, r5
 801bbaa:	d0e8      	beq.n	801bb7e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801bbac:	e7e1      	b.n	801bb72 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801bbae:	2001      	movs	r0, #1
 801bbb0:	e7e0      	b.n	801bb74 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801bbb2:	bf00      	nop
 801bbb4:	0802dfb9 	.word	0x0802dfb9
 801bbb8:	0802e473 	.word	0x0802e473
 801bbbc:	0802df81 	.word	0x0802df81
 801bbc0:	0802e118 	.word	0x0802e118

0801bbc4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801bbc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbc8:	4605      	mov	r5, r0
 801bbca:	4616      	mov	r6, r2
 801bbcc:	1c8c      	adds	r4, r1, #2
 801bbce:	8809      	ldrh	r1, [r1, #0]
 801bbd0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801bbd4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801bbd8:	42b3      	cmp	r3, r6
 801bbda:	d124      	bne.n	801bc26 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801bbdc:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801bbe0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801bbe4:	f001 070f 	and.w	r7, r1, #15
 801bbe8:	4652      	mov	r2, sl
 801bbea:	f8cd 8000 	str.w	r8, [sp]
 801bbee:	464b      	mov	r3, r9
 801bbf0:	4621      	mov	r1, r4
 801bbf2:	4628      	mov	r0, r5
 801bbf4:	f7ff ff9e 	bl	801bb34 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801bbf8:	4683      	mov	fp, r0
 801bbfa:	b168      	cbz	r0, 801bc18 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801bbfc:	eb0a 0109 	add.w	r1, sl, r9
 801bc00:	463a      	mov	r2, r7
 801bc02:	4628      	mov	r0, r5
 801bc04:	4441      	add	r1, r8
 801bc06:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801bc0a:	4649      	mov	r1, r9
 801bc0c:	f7ff ff42 	bl	801ba94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801bc10:	4658      	mov	r0, fp
 801bc12:	b003      	add	sp, #12
 801bc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc18:	eb07 010a 	add.w	r1, r7, sl
 801bc1c:	4449      	add	r1, r9
 801bc1e:	4441      	add	r1, r8
 801bc20:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801bc24:	e7d2      	b.n	801bbcc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801bc26:	f04f 0b00 	mov.w	fp, #0
 801bc2a:	e7f1      	b.n	801bc10 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801bc2c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801bc2c:	b570      	push	{r4, r5, r6, lr}
 801bc2e:	8810      	ldrh	r0, [r2, #0]
 801bc30:	4298      	cmp	r0, r3
 801bc32:	d817      	bhi.n	801bc64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bc34:	1e48      	subs	r0, r1, #1
 801bc36:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801bc3a:	4298      	cmp	r0, r3
 801bc3c:	d312      	bcc.n	801bc64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bc3e:	2400      	movs	r4, #0
 801bc40:	428c      	cmp	r4, r1
 801bc42:	d20f      	bcs.n	801bc64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bc44:	1860      	adds	r0, r4, r1
 801bc46:	1040      	asrs	r0, r0, #1
 801bc48:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801bc4c:	0085      	lsls	r5, r0, #2
 801bc4e:	42b3      	cmp	r3, r6
 801bc50:	d902      	bls.n	801bc58 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801bc52:	3001      	adds	r0, #1
 801bc54:	b284      	uxth	r4, r0
 801bc56:	e7f3      	b.n	801bc40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801bc58:	d201      	bcs.n	801bc5e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801bc5a:	b281      	uxth	r1, r0
 801bc5c:	e7f0      	b.n	801bc40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801bc5e:	442a      	add	r2, r5
 801bc60:	8850      	ldrh	r0, [r2, #2]
 801bc62:	bd70      	pop	{r4, r5, r6, pc}
 801bc64:	2000      	movs	r0, #0
 801bc66:	e7fc      	b.n	801bc62 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801bc68 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801bc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc6c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801bc6e:	4604      	mov	r4, r0
 801bc70:	260b      	movs	r6, #11
 801bc72:	886f      	ldrh	r7, [r5, #2]
 801bc74:	087f      	lsrs	r7, r7, #1
 801bc76:	3e01      	subs	r6, #1
 801bc78:	d01b      	beq.n	801bcb2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801bc7a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801bc7c:	b92b      	cbnz	r3, 801bc8a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801bc7e:	4b0e      	ldr	r3, [pc, #56]	; (801bcb8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801bc80:	21bf      	movs	r1, #191	; 0xbf
 801bc82:	4a0e      	ldr	r2, [pc, #56]	; (801bcbc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801bc84:	480e      	ldr	r0, [pc, #56]	; (801bcc0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801bc86:	f00a feb3 	bl	80269f0 <__assert_func>
 801bc8a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801bc8c:	462a      	mov	r2, r5
 801bc8e:	4639      	mov	r1, r7
 801bc90:	4620      	mov	r0, r4
 801bc92:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bc96:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801bc9a:	4643      	mov	r3, r8
 801bc9c:	f7ff ffc6 	bl	801bc2c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801bca0:	b138      	cbz	r0, 801bcb2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801bca2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801bca6:	4642      	mov	r2, r8
 801bca8:	4620      	mov	r0, r4
 801bcaa:	f7ff ff8b 	bl	801bbc4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801bcae:	2800      	cmp	r0, #0
 801bcb0:	d1e1      	bne.n	801bc76 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801bcb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcb6:	bf00      	nop
 801bcb8:	0802df78 	.word	0x0802df78
 801bcbc:	0802e1ea 	.word	0x0802e1ea
 801bcc0:	0802df81 	.word	0x0802df81

0801bcc4 <_ZN8touchgfx8ceil28_4El>:
 801bcc4:	f110 030f 	adds.w	r3, r0, #15
 801bcc8:	d401      	bmi.n	801bcce <_ZN8touchgfx8ceil28_4El+0xa>
 801bcca:	1118      	asrs	r0, r3, #4
 801bccc:	4770      	bx	lr
 801bcce:	2210      	movs	r2, #16
 801bcd0:	f1c0 0001 	rsb	r0, r0, #1
 801bcd4:	fb93 f3f2 	sdiv	r3, r3, r2
 801bcd8:	f010 000f 	ands.w	r0, r0, #15
 801bcdc:	bf18      	it	ne
 801bcde:	2001      	movne	r0, #1
 801bce0:	1a18      	subs	r0, r3, r0
 801bce2:	4770      	bx	lr

0801bce4 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801bce4:	2900      	cmp	r1, #0
 801bce6:	b538      	push	{r3, r4, r5, lr}
 801bce8:	dc05      	bgt.n	801bcf6 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801bcea:	4b0f      	ldr	r3, [pc, #60]	; (801bd28 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801bcec:	21f7      	movs	r1, #247	; 0xf7
 801bcee:	4a0f      	ldr	r2, [pc, #60]	; (801bd2c <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801bcf0:	480f      	ldr	r0, [pc, #60]	; (801bd30 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801bcf2:	f00a fe7d 	bl	80269f0 <__assert_func>
 801bcf6:	2800      	cmp	r0, #0
 801bcf8:	db06      	blt.n	801bd08 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801bcfa:	fb90 f4f1 	sdiv	r4, r0, r1
 801bcfe:	fb01 0114 	mls	r1, r1, r4, r0
 801bd02:	6014      	str	r4, [r2, #0]
 801bd04:	6019      	str	r1, [r3, #0]
 801bd06:	bd38      	pop	{r3, r4, r5, pc}
 801bd08:	4240      	negs	r0, r0
 801bd0a:	fb90 f4f1 	sdiv	r4, r0, r1
 801bd0e:	4265      	negs	r5, r4
 801bd10:	fb01 0014 	mls	r0, r1, r4, r0
 801bd14:	6015      	str	r5, [r2, #0]
 801bd16:	6018      	str	r0, [r3, #0]
 801bd18:	2800      	cmp	r0, #0
 801bd1a:	d0f4      	beq.n	801bd06 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801bd1c:	6810      	ldr	r0, [r2, #0]
 801bd1e:	3801      	subs	r0, #1
 801bd20:	6010      	str	r0, [r2, #0]
 801bd22:	6818      	ldr	r0, [r3, #0]
 801bd24:	1a09      	subs	r1, r1, r0
 801bd26:	e7ed      	b.n	801bd04 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801bd28:	0802e544 	.word	0x0802e544
 801bd2c:	0802e583 	.word	0x0802e583
 801bd30:	0802e554 	.word	0x0802e554

0801bd34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801bd34:	b570      	push	{r4, r5, r6, lr}
 801bd36:	694a      	ldr	r2, [r1, #20]
 801bd38:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801bd3a:	684b      	ldr	r3, [r1, #4]
 801bd3c:	1b54      	subs	r4, r2, r5
 801bd3e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801bd40:	f000 8106 	beq.w	801bf50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801bd44:	1b9b      	subs	r3, r3, r6
 801bd46:	d003      	beq.n	801bd50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801bd48:	4363      	muls	r3, r4
 801bd4a:	2210      	movs	r2, #16
 801bd4c:	fb93 f3f2 	sdiv	r3, r3, r2
 801bd50:	680c      	ldr	r4, [r1, #0]
 801bd52:	698a      	ldr	r2, [r1, #24]
 801bd54:	1b65      	subs	r5, r4, r5
 801bd56:	f000 80fd 	beq.w	801bf54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801bd5a:	1b92      	subs	r2, r2, r6
 801bd5c:	d003      	beq.n	801bd66 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801bd5e:	436a      	muls	r2, r5
 801bd60:	2410      	movs	r4, #16
 801bd62:	fb92 f2f4 	sdiv	r2, r2, r4
 801bd66:	1a9b      	subs	r3, r3, r2
 801bd68:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801bf90 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801bd6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bd70:	460a      	mov	r2, r1
 801bd72:	ee07 3a90 	vmov	s15, r3
 801bd76:	f100 040c 	add.w	r4, r0, #12
 801bd7a:	4603      	mov	r3, r0
 801bd7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd80:	ee67 7a84 	vmul.f32	s15, s15, s8
 801bd84:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801bd88:	eeb1 6a43 	vneg.f32	s12, s6
 801bd8c:	edd2 7a02 	vldr	s15, [r2, #8]
 801bd90:	3214      	adds	r2, #20
 801bd92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801bd96:	ece3 6a01 	vstmia	r3!, {s13}
 801bd9a:	429c      	cmp	r4, r3
 801bd9c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801bda0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bda4:	edc3 7a02 	vstr	s15, [r3, #8]
 801bda8:	ed52 7a01 	vldr	s15, [r2, #-4]
 801bdac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bdb0:	edc3 7a05 	vstr	s15, [r3, #20]
 801bdb4:	d1ea      	bne.n	801bd8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801bdb6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801bdb8:	698b      	ldr	r3, [r1, #24]
 801bdba:	edd0 4a02 	vldr	s9, [r0, #8]
 801bdbe:	1a9b      	subs	r3, r3, r2
 801bdc0:	edd0 3a00 	vldr	s7, [r0]
 801bdc4:	edd0 6a01 	vldr	s13, [r0, #4]
 801bdc8:	ee07 3a90 	vmov	s15, r3
 801bdcc:	684b      	ldr	r3, [r1, #4]
 801bdce:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801bdd2:	ed90 5a05 	vldr	s10, [r0, #20]
 801bdd6:	1a9b      	subs	r3, r3, r2
 801bdd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bddc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801bde0:	ed90 2a03 	vldr	s4, [r0, #12]
 801bde4:	ee07 3a10 	vmov	s14, r3
 801bde8:	edd0 5a04 	vldr	s11, [r0, #16]
 801bdec:	ee67 7a84 	vmul.f32	s15, s15, s8
 801bdf0:	ed90 1a07 	vldr	s2, [r0, #28]
 801bdf4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bdf8:	edd0 2a06 	vldr	s5, [r0, #24]
 801bdfc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801be00:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801be04:	ee27 7a04 	vmul.f32	s14, s14, s8
 801be08:	ee32 5a45 	vsub.f32	s10, s4, s10
 801be0c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801be10:	ee67 7a83 	vmul.f32	s15, s15, s6
 801be14:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801be18:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801be1a:	694a      	ldr	r2, [r1, #20]
 801be1c:	1b13      	subs	r3, r2, r4
 801be1e:	ee07 3a10 	vmov	s14, r3
 801be22:	680b      	ldr	r3, [r1, #0]
 801be24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be28:	1b1b      	subs	r3, r3, r4
 801be2a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801be2e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801be32:	ee07 3a10 	vmov	s14, r3
 801be36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be3a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801be3e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801be42:	ee64 4a86 	vmul.f32	s9, s9, s12
 801be46:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801be4a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801be4c:	698b      	ldr	r3, [r1, #24]
 801be4e:	1a9b      	subs	r3, r3, r2
 801be50:	ee06 3a90 	vmov	s13, r3
 801be54:	684b      	ldr	r3, [r1, #4]
 801be56:	1a9b      	subs	r3, r3, r2
 801be58:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801be5c:	ee07 3a10 	vmov	s14, r3
 801be60:	ee66 6a84 	vmul.f32	s13, s13, s8
 801be64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be68:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801be6c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801be70:	eee5 6a87 	vfma.f32	s13, s11, s14
 801be74:	ee66 6a83 	vmul.f32	s13, s13, s6
 801be78:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801be7c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801be7e:	694a      	ldr	r2, [r1, #20]
 801be80:	1b13      	subs	r3, r2, r4
 801be82:	ee07 3a10 	vmov	s14, r3
 801be86:	680b      	ldr	r3, [r1, #0]
 801be88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be8c:	1b1b      	subs	r3, r3, r4
 801be8e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801be92:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801be96:	ee07 3a10 	vmov	s14, r3
 801be9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be9e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801bea2:	eea5 5a87 	vfma.f32	s10, s11, s14
 801bea6:	edd0 5a08 	vldr	s11, [r0, #32]
 801beaa:	ee31 1a65 	vsub.f32	s2, s2, s11
 801beae:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801beb2:	ee25 5a06 	vmul.f32	s10, s10, s12
 801beb6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801beba:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801bebc:	698b      	ldr	r3, [r1, #24]
 801bebe:	1a9b      	subs	r3, r3, r2
 801bec0:	ee07 3a10 	vmov	s14, r3
 801bec4:	684b      	ldr	r3, [r1, #4]
 801bec6:	1a9b      	subs	r3, r3, r2
 801bec8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801becc:	ee01 3a90 	vmov	s3, r3
 801bed0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801bed4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801bed8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801bedc:	ee61 1a84 	vmul.f32	s3, s3, s8
 801bee0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801bee4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801bee8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801beec:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801beee:	694a      	ldr	r2, [r1, #20]
 801bef0:	1b13      	subs	r3, r2, r4
 801bef2:	ee03 3a10 	vmov	s6, r3
 801bef6:	680b      	ldr	r3, [r1, #0]
 801bef8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801befc:	1b1b      	subs	r3, r3, r4
 801befe:	ee23 3a04 	vmul.f32	s6, s6, s8
 801bf02:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801bf06:	ee03 3a10 	vmov	s6, r3
 801bf0a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801bf0e:	ee23 4a04 	vmul.f32	s8, s6, s8
 801bf12:	eee1 5a04 	vfma.f32	s11, s2, s8
 801bf16:	ee25 6a86 	vmul.f32	s12, s11, s12
 801bf1a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801bf1e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801bf22:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801bf26:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801bf2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf2e:	dd13      	ble.n	801bf58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801bf30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bf34:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801bf38:	63c3      	str	r3, [r0, #60]	; 0x3c
 801bf3a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801bf3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bf42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf46:	dd15      	ble.n	801bf74 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801bf48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bf4c:	6403      	str	r3, [r0, #64]	; 0x40
 801bf4e:	bd70      	pop	{r4, r5, r6, pc}
 801bf50:	4623      	mov	r3, r4
 801bf52:	e6fd      	b.n	801bd50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801bf54:	462a      	mov	r2, r5
 801bf56:	e706      	b.n	801bd66 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801bf58:	d502      	bpl.n	801bf60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801bf5a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801bf5e:	e7e9      	b.n	801bf34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801bf60:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801bf64:	eea3 2a85 	vfma.f32	s4, s7, s10
 801bf68:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801bf6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf70:	dade      	bge.n	801bf30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801bf72:	e7f2      	b.n	801bf5a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801bf74:	d502      	bpl.n	801bf7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801bf76:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801bf7a:	e7e7      	b.n	801bf4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801bf7c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801bf80:	eee3 4a86 	vfma.f32	s9, s7, s12
 801bf84:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801bf88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf8c:	dadc      	bge.n	801bf48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801bf8e:	e7f2      	b.n	801bf76 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801bf90:	3d800000 	.word	0x3d800000

0801bf94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801bf94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf98:	f04f 0814 	mov.w	r8, #20
 801bf9c:	4604      	mov	r4, r0
 801bf9e:	4617      	mov	r7, r2
 801bfa0:	460d      	mov	r5, r1
 801bfa2:	fb08 f903 	mul.w	r9, r8, r3
 801bfa6:	461e      	mov	r6, r3
 801bfa8:	eb02 0a09 	add.w	sl, r2, r9
 801bfac:	f8da 0004 	ldr.w	r0, [sl, #4]
 801bfb0:	f7ff fe88 	bl	801bcc4 <_ZN8touchgfx8ceil28_4El>
 801bfb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bfb6:	6160      	str	r0, [r4, #20]
 801bfb8:	fb08 f803 	mul.w	r8, r8, r3
 801bfbc:	9001      	str	r0, [sp, #4]
 801bfbe:	eb07 0b08 	add.w	fp, r7, r8
 801bfc2:	f8db 0004 	ldr.w	r0, [fp, #4]
 801bfc6:	f7ff fe7d 	bl	801bcc4 <_ZN8touchgfx8ceil28_4El>
 801bfca:	9a01      	ldr	r2, [sp, #4]
 801bfcc:	1a80      	subs	r0, r0, r2
 801bfce:	61a0      	str	r0, [r4, #24]
 801bfd0:	2800      	cmp	r0, #0
 801bfd2:	f000 8088 	beq.w	801c0e6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801bfd6:	f857 3009 	ldr.w	r3, [r7, r9]
 801bfda:	f857 c008 	ldr.w	ip, [r7, r8]
 801bfde:	f8db 0004 	ldr.w	r0, [fp, #4]
 801bfe2:	ebac 0c03 	sub.w	ip, ip, r3
 801bfe6:	f8da 1004 	ldr.w	r1, [sl, #4]
 801bfea:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801bfee:	1a40      	subs	r0, r0, r1
 801bff0:	fb0b f202 	mul.w	r2, fp, r2
 801bff4:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801bff8:	fb0c 2211 	mls	r2, ip, r1, r2
 801bffc:	4641      	mov	r1, r8
 801bffe:	fb00 2003 	mla	r0, r0, r3, r2
 801c002:	f104 0310 	add.w	r3, r4, #16
 801c006:	4622      	mov	r2, r4
 801c008:	3801      	subs	r0, #1
 801c00a:	4440      	add	r0, r8
 801c00c:	f7ff fe6a 	bl	801bce4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801c010:	f104 0308 	add.w	r3, r4, #8
 801c014:	1d22      	adds	r2, r4, #4
 801c016:	4641      	mov	r1, r8
 801c018:	4658      	mov	r0, fp
 801c01a:	f7ff fe63 	bl	801bce4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801c01e:	f8c4 800c 	str.w	r8, [r4, #12]
 801c022:	6962      	ldr	r2, [r4, #20]
 801c024:	f8da 3004 	ldr.w	r3, [sl, #4]
 801c028:	eddf 6a31 	vldr	s13, [pc, #196]	; 801c0f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801c02c:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801c030:	6822      	ldr	r2, [r4, #0]
 801c032:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801c036:	ee07 3a10 	vmov	s14, r3
 801c03a:	f857 3009 	ldr.w	r3, [r7, r9]
 801c03e:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801c042:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c046:	ee07 3a90 	vmov	s15, r3
 801c04a:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801c04e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c056:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c05a:	edd3 6a00 	vldr	s13, [r3]
 801c05e:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c062:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801c066:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c06a:	edc4 6a07 	vstr	s13, [r4, #28]
 801c06e:	edd4 6a01 	vldr	s13, [r4, #4]
 801c072:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801c076:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c07a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801c07e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c082:	ed84 6a08 	vstr	s12, [r4, #32]
 801c086:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801c088:	6262      	str	r2, [r4, #36]	; 0x24
 801c08a:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801c08e:	ed93 6a03 	vldr	s12, [r3, #12]
 801c092:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c096:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801c09a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801c09e:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801c0a2:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801c0a6:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801c0aa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c0ae:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801c0b2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801c0b4:	6322      	str	r2, [r4, #48]	; 0x30
 801c0b6:	ed93 6a06 	vldr	s12, [r3, #24]
 801c0ba:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801c0be:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c0c2:	eeb0 7a46 	vmov.f32	s14, s12
 801c0c6:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801c0ca:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c0ce:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801c0d2:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801c0d6:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801c0da:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c0de:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801c0e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801c0e4:	63e3      	str	r3, [r4, #60]	; 0x3c
 801c0e6:	4620      	mov	r0, r4
 801c0e8:	b003      	add	sp, #12
 801c0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0ee:	bf00      	nop
 801c0f0:	3d800000 	.word	0x3d800000

0801c0f4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801c0f4:	4602      	mov	r2, r0
 801c0f6:	b148      	cbz	r0, 801c10c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801c0f8:	2300      	movs	r3, #0
 801c0fa:	b298      	uxth	r0, r3
 801c0fc:	3301      	adds	r3, #1
 801c0fe:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801c102:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801c106:	2900      	cmp	r1, #0
 801c108:	d1f7      	bne.n	801c0fa <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801c10a:	4770      	bx	lr
 801c10c:	4770      	bx	lr

0801c10e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801c10e:	b530      	push	{r4, r5, lr}
 801c110:	4604      	mov	r4, r0
 801c112:	b159      	cbz	r1, 801c12c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801c114:	b148      	cbz	r0, 801c12a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c116:	2300      	movs	r3, #0
 801c118:	b298      	uxth	r0, r3
 801c11a:	4282      	cmp	r2, r0
 801c11c:	d905      	bls.n	801c12a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c11e:	5ccd      	ldrb	r5, [r1, r3]
 801c120:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801c124:	3301      	adds	r3, #1
 801c126:	2d00      	cmp	r5, #0
 801c128:	d1f6      	bne.n	801c118 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801c12a:	bd30      	pop	{r4, r5, pc}
 801c12c:	4608      	mov	r0, r1
 801c12e:	e7fc      	b.n	801c12a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801c130 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801c130:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c132:	468c      	mov	ip, r1
 801c134:	b08b      	sub	sp, #44	; 0x2c
 801c136:	2100      	movs	r1, #0
 801c138:	ae01      	add	r6, sp, #4
 801c13a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801c13e:	211f      	movs	r1, #31
 801c140:	fbb0 f7f3 	udiv	r7, r0, r3
 801c144:	fb03 0517 	mls	r5, r3, r7, r0
 801c148:	4638      	mov	r0, r7
 801c14a:	b2ec      	uxtb	r4, r5
 801c14c:	2d09      	cmp	r5, #9
 801c14e:	bfd4      	ite	le
 801c150:	3430      	addle	r4, #48	; 0x30
 801c152:	3457      	addgt	r4, #87	; 0x57
 801c154:	b2e4      	uxtb	r4, r4
 801c156:	558c      	strb	r4, [r1, r6]
 801c158:	1e4c      	subs	r4, r1, #1
 801c15a:	b92f      	cbnz	r7, 801c168 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801c15c:	4431      	add	r1, r6
 801c15e:	4660      	mov	r0, ip
 801c160:	f7ff ffd5 	bl	801c10e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c164:	b00b      	add	sp, #44	; 0x2c
 801c166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c168:	4621      	mov	r1, r4
 801c16a:	e7e9      	b.n	801c140 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801c16c <_ZN8touchgfx7Unicode4itoaElPtti>:
 801c16c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c16e:	4607      	mov	r7, r0
 801c170:	b08b      	sub	sp, #44	; 0x2c
 801c172:	4608      	mov	r0, r1
 801c174:	b341      	cbz	r1, 801c1c8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801c176:	1e99      	subs	r1, r3, #2
 801c178:	2922      	cmp	r1, #34	; 0x22
 801c17a:	d825      	bhi.n	801c1c8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801c17c:	2100      	movs	r1, #0
 801c17e:	463c      	mov	r4, r7
 801c180:	261f      	movs	r6, #31
 801c182:	f10d 0c04 	add.w	ip, sp, #4
 801c186:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801c18a:	1e71      	subs	r1, r6, #1
 801c18c:	fb94 fef3 	sdiv	lr, r4, r3
 801c190:	fb03 441e 	mls	r4, r3, lr, r4
 801c194:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801c198:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801c19c:	b2ec      	uxtb	r4, r5
 801c19e:	2d09      	cmp	r5, #9
 801c1a0:	bfd4      	ite	le
 801c1a2:	3430      	addle	r4, #48	; 0x30
 801c1a4:	3457      	addgt	r4, #87	; 0x57
 801c1a6:	b2e4      	uxtb	r4, r4
 801c1a8:	f80c 4006 	strb.w	r4, [ip, r6]
 801c1ac:	4674      	mov	r4, lr
 801c1ae:	b96c      	cbnz	r4, 801c1cc <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801c1b0:	2f00      	cmp	r7, #0
 801c1b2:	da05      	bge.n	801c1c0 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801c1b4:	ab0a      	add	r3, sp, #40	; 0x28
 801c1b6:	4419      	add	r1, r3
 801c1b8:	232d      	movs	r3, #45	; 0x2d
 801c1ba:	f801 3c24 	strb.w	r3, [r1, #-36]
 801c1be:	1eb1      	subs	r1, r6, #2
 801c1c0:	3101      	adds	r1, #1
 801c1c2:	4461      	add	r1, ip
 801c1c4:	f7ff ffa3 	bl	801c10e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c1c8:	b00b      	add	sp, #44	; 0x2c
 801c1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1cc:	460e      	mov	r6, r1
 801c1ce:	e7dc      	b.n	801c18a <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801c1d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1d4:	b085      	sub	sp, #20
 801c1d6:	4691      	mov	r9, r2
 801c1d8:	6802      	ldr	r2, [r0, #0]
 801c1da:	4688      	mov	r8, r1
 801c1dc:	461c      	mov	r4, r3
 801c1de:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801c1e2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801c1e6:	4683      	mov	fp, r0
 801c1e8:	4610      	mov	r0, r2
 801c1ea:	9103      	str	r1, [sp, #12]
 801c1ec:	9302      	str	r3, [sp, #8]
 801c1ee:	9201      	str	r2, [sp, #4]
 801c1f0:	f7ff ff80 	bl	801c0f4 <_ZN8touchgfx7Unicode6strlenEPKt>
 801c1f4:	f1b8 0f00 	cmp.w	r8, #0
 801c1f8:	bf0c      	ite	eq
 801c1fa:	4684      	moveq	ip, r0
 801c1fc:	f100 0c01 	addne.w	ip, r0, #1
 801c200:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801c204:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801c208:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c20a:	fa1f fc8c 	uxth.w	ip, ip
 801c20e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c210:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801c214:	9903      	ldr	r1, [sp, #12]
 801c216:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c21a:	d041      	beq.n	801c2a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801c21c:	d834      	bhi.n	801c288 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801c21e:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801c222:	d059      	beq.n	801c2d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801c224:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801c228:	d03a      	beq.n	801c2a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801c22a:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801c22e:	d034      	beq.n	801c29a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801c230:	2400      	movs	r4, #0
 801c232:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801c236:	3a01      	subs	r2, #1
 801c238:	b169      	cbz	r1, 801c256 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c23a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c23c:	458c      	cmp	ip, r1
 801c23e:	da09      	bge.n	801c254 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801c240:	eba1 010c 	sub.w	r1, r1, ip
 801c244:	b289      	uxth	r1, r1
 801c246:	b933      	cbnz	r3, 801c256 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c248:	2e00      	cmp	r6, #0
 801c24a:	d051      	beq.n	801c2f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801c24c:	2800      	cmp	r0, #0
 801c24e:	d04f      	beq.n	801c2f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801c250:	440c      	add	r4, r1
 801c252:	b2a4      	uxth	r4, r4
 801c254:	2100      	movs	r1, #0
 801c256:	682b      	ldr	r3, [r5, #0]
 801c258:	4293      	cmp	r3, r2
 801c25a:	da07      	bge.n	801c26c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801c25c:	f1b8 0f00 	cmp.w	r8, #0
 801c260:	d004      	beq.n	801c26c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801c262:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801c266:	682b      	ldr	r3, [r5, #0]
 801c268:	3301      	adds	r3, #1
 801c26a:	602b      	str	r3, [r5, #0]
 801c26c:	2730      	movs	r7, #48	; 0x30
 801c26e:	2c00      	cmp	r4, #0
 801c270:	d04e      	beq.n	801c310 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801c272:	682e      	ldr	r6, [r5, #0]
 801c274:	3c01      	subs	r4, #1
 801c276:	42b2      	cmp	r2, r6
 801c278:	b2a4      	uxth	r4, r4
 801c27a:	dd49      	ble.n	801c310 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801c27c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801c280:	682b      	ldr	r3, [r5, #0]
 801c282:	3301      	adds	r3, #1
 801c284:	602b      	str	r3, [r5, #0]
 801c286:	e7f2      	b.n	801c26e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801c288:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801c28c:	d01d      	beq.n	801c2ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801c28e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801c292:	d002      	beq.n	801c29a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801c294:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801c298:	e7c9      	b.n	801c22e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801c29a:	4684      	mov	ip, r0
 801c29c:	f04f 0800 	mov.w	r8, #0
 801c2a0:	2c00      	cmp	r4, #0
 801c2a2:	d0c6      	beq.n	801c232 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c2a4:	b947      	cbnz	r7, 801c2b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801c2a6:	2801      	cmp	r0, #1
 801c2a8:	d106      	bne.n	801c2b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801c2aa:	8814      	ldrh	r4, [r2, #0]
 801c2ac:	2c30      	cmp	r4, #48	; 0x30
 801c2ae:	bf02      	ittt	eq
 801c2b0:	3202      	addeq	r2, #2
 801c2b2:	4638      	moveq	r0, r7
 801c2b4:	f8cb 2000 	streq.w	r2, [fp]
 801c2b8:	45bc      	cmp	ip, r7
 801c2ba:	da14      	bge.n	801c2e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801c2bc:	b2bf      	uxth	r7, r7
 801c2be:	eba7 040c 	sub.w	r4, r7, ip
 801c2c2:	46bc      	mov	ip, r7
 801c2c4:	b2a4      	uxth	r4, r4
 801c2c6:	2600      	movs	r6, #0
 801c2c8:	e7b3      	b.n	801c232 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c2ca:	4684      	mov	ip, r0
 801c2cc:	b16c      	cbz	r4, 801c2ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801c2ce:	42b8      	cmp	r0, r7
 801c2d0:	dd00      	ble.n	801c2d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801c2d2:	b2b8      	uxth	r0, r7
 801c2d4:	2400      	movs	r4, #0
 801c2d6:	e003      	b.n	801c2e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801c2d8:	f04f 0c01 	mov.w	ip, #1
 801c2dc:	2400      	movs	r4, #0
 801c2de:	4660      	mov	r0, ip
 801c2e0:	4626      	mov	r6, r4
 801c2e2:	46a0      	mov	r8, r4
 801c2e4:	e7a5      	b.n	801c232 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c2e6:	2400      	movs	r4, #0
 801c2e8:	e7ed      	b.n	801c2c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801c2ea:	4626      	mov	r6, r4
 801c2ec:	46a0      	mov	r8, r4
 801c2ee:	e7a0      	b.n	801c232 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c2f0:	2900      	cmp	r1, #0
 801c2f2:	d0b0      	beq.n	801c256 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c2f4:	2720      	movs	r7, #32
 801c2f6:	682e      	ldr	r6, [r5, #0]
 801c2f8:	2900      	cmp	r1, #0
 801c2fa:	d0ac      	beq.n	801c256 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c2fc:	3901      	subs	r1, #1
 801c2fe:	4296      	cmp	r6, r2
 801c300:	b289      	uxth	r1, r1
 801c302:	daa7      	bge.n	801c254 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801c304:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801c308:	682b      	ldr	r3, [r5, #0]
 801c30a:	3301      	adds	r3, #1
 801c30c:	602b      	str	r3, [r5, #0]
 801c30e:	e7f2      	b.n	801c2f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801c310:	b188      	cbz	r0, 801c336 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801c312:	682b      	ldr	r3, [r5, #0]
 801c314:	3801      	subs	r0, #1
 801c316:	429a      	cmp	r2, r3
 801c318:	b280      	uxth	r0, r0
 801c31a:	dd0c      	ble.n	801c336 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801c31c:	f8db 3000 	ldr.w	r3, [fp]
 801c320:	1c9c      	adds	r4, r3, #2
 801c322:	f8cb 4000 	str.w	r4, [fp]
 801c326:	881c      	ldrh	r4, [r3, #0]
 801c328:	682b      	ldr	r3, [r5, #0]
 801c32a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801c32e:	682b      	ldr	r3, [r5, #0]
 801c330:	3301      	adds	r3, #1
 801c332:	602b      	str	r3, [r5, #0]
 801c334:	e7ec      	b.n	801c310 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801c336:	2620      	movs	r6, #32
 801c338:	b151      	cbz	r1, 801c350 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801c33a:	6828      	ldr	r0, [r5, #0]
 801c33c:	3901      	subs	r1, #1
 801c33e:	4282      	cmp	r2, r0
 801c340:	b289      	uxth	r1, r1
 801c342:	dd05      	ble.n	801c350 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801c344:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801c348:	682b      	ldr	r3, [r5, #0]
 801c34a:	3301      	adds	r3, #1
 801c34c:	602b      	str	r3, [r5, #0]
 801c34e:	e7f3      	b.n	801c338 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801c350:	b005      	add	sp, #20
 801c352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c356 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801c356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c35a:	2400      	movs	r4, #0
 801c35c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801c360:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801c364:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801c368:	8014      	strh	r4, [r2, #0]
 801c36a:	701c      	strb	r4, [r3, #0]
 801c36c:	f888 4000 	strb.w	r4, [r8]
 801c370:	f88c 4000 	strb.w	r4, [ip]
 801c374:	f88e 4000 	strb.w	r4, [lr]
 801c378:	703c      	strb	r4, [r7, #0]
 801c37a:	6804      	ldr	r4, [r0, #0]
 801c37c:	b1a4      	cbz	r4, 801c3a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801c37e:	8824      	ldrh	r4, [r4, #0]
 801c380:	f04f 0901 	mov.w	r9, #1
 801c384:	b314      	cbz	r4, 801c3cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801c386:	2c2b      	cmp	r4, #43	; 0x2b
 801c388:	d001      	beq.n	801c38e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801c38a:	2c20      	cmp	r4, #32
 801c38c:	d110      	bne.n	801c3b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801c38e:	8014      	strh	r4, [r2, #0]
 801c390:	6804      	ldr	r4, [r0, #0]
 801c392:	b10c      	cbz	r4, 801c398 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801c394:	3402      	adds	r4, #2
 801c396:	6004      	str	r4, [r0, #0]
 801c398:	680c      	ldr	r4, [r1, #0]
 801c39a:	b10c      	cbz	r4, 801c3a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801c39c:	3401      	adds	r4, #1
 801c39e:	600c      	str	r4, [r1, #0]
 801c3a0:	6804      	ldr	r4, [r0, #0]
 801c3a2:	b17c      	cbz	r4, 801c3c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801c3a4:	8824      	ldrh	r4, [r4, #0]
 801c3a6:	e7ed      	b.n	801c384 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801c3a8:	680c      	ldr	r4, [r1, #0]
 801c3aa:	b17c      	cbz	r4, 801c3cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801c3ac:	7824      	ldrb	r4, [r4, #0]
 801c3ae:	e7e7      	b.n	801c380 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801c3b0:	2c2d      	cmp	r4, #45	; 0x2d
 801c3b2:	d102      	bne.n	801c3ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801c3b4:	f883 9000 	strb.w	r9, [r3]
 801c3b8:	e7ea      	b.n	801c390 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801c3ba:	2c23      	cmp	r4, #35	; 0x23
 801c3bc:	d107      	bne.n	801c3ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801c3be:	f888 9000 	strb.w	r9, [r8]
 801c3c2:	e7e5      	b.n	801c390 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801c3c4:	680c      	ldr	r4, [r1, #0]
 801c3c6:	b10c      	cbz	r4, 801c3cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801c3c8:	7824      	ldrb	r4, [r4, #0]
 801c3ca:	e7db      	b.n	801c384 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801c3cc:	2400      	movs	r4, #0
 801c3ce:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801c3d2:	2b09      	cmp	r3, #9
 801c3d4:	d901      	bls.n	801c3da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801c3d6:	2c2a      	cmp	r4, #42	; 0x2a
 801c3d8:	d122      	bne.n	801c420 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801c3da:	2301      	movs	r3, #1
 801c3dc:	2c30      	cmp	r4, #48	; 0x30
 801c3de:	f88e 3000 	strb.w	r3, [lr]
 801c3e2:	d10d      	bne.n	801c400 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801c3e4:	f88c 3000 	strb.w	r3, [ip]
 801c3e8:	6803      	ldr	r3, [r0, #0]
 801c3ea:	b10b      	cbz	r3, 801c3f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801c3ec:	3302      	adds	r3, #2
 801c3ee:	6003      	str	r3, [r0, #0]
 801c3f0:	680b      	ldr	r3, [r1, #0]
 801c3f2:	b10b      	cbz	r3, 801c3f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801c3f4:	3301      	adds	r3, #1
 801c3f6:	600b      	str	r3, [r1, #0]
 801c3f8:	6803      	ldr	r3, [r0, #0]
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	d02f      	beq.n	801c45e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801c3fe:	881c      	ldrh	r4, [r3, #0]
 801c400:	2c2a      	cmp	r4, #42	; 0x2a
 801c402:	d135      	bne.n	801c470 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801c404:	f04f 33ff 	mov.w	r3, #4294967295
 801c408:	6033      	str	r3, [r6, #0]
 801c40a:	6803      	ldr	r3, [r0, #0]
 801c40c:	b10b      	cbz	r3, 801c412 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801c40e:	3302      	adds	r3, #2
 801c410:	6003      	str	r3, [r0, #0]
 801c412:	680b      	ldr	r3, [r1, #0]
 801c414:	b10b      	cbz	r3, 801c41a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801c416:	3301      	adds	r3, #1
 801c418:	600b      	str	r3, [r1, #0]
 801c41a:	6803      	ldr	r3, [r0, #0]
 801c41c:	b31b      	cbz	r3, 801c466 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801c41e:	881c      	ldrh	r4, [r3, #0]
 801c420:	2c2e      	cmp	r4, #46	; 0x2e
 801c422:	d11a      	bne.n	801c45a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801c424:	2301      	movs	r3, #1
 801c426:	703b      	strb	r3, [r7, #0]
 801c428:	6803      	ldr	r3, [r0, #0]
 801c42a:	b10b      	cbz	r3, 801c430 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801c42c:	3302      	adds	r3, #2
 801c42e:	6003      	str	r3, [r0, #0]
 801c430:	680b      	ldr	r3, [r1, #0]
 801c432:	b10b      	cbz	r3, 801c438 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801c434:	3301      	adds	r3, #1
 801c436:	600b      	str	r3, [r1, #0]
 801c438:	6803      	ldr	r3, [r0, #0]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d036      	beq.n	801c4ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801c43e:	881b      	ldrh	r3, [r3, #0]
 801c440:	2b2a      	cmp	r3, #42	; 0x2a
 801c442:	d137      	bne.n	801c4b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801c444:	f04f 33ff 	mov.w	r3, #4294967295
 801c448:	602b      	str	r3, [r5, #0]
 801c44a:	6803      	ldr	r3, [r0, #0]
 801c44c:	b10b      	cbz	r3, 801c452 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801c44e:	3302      	adds	r3, #2
 801c450:	6003      	str	r3, [r0, #0]
 801c452:	680b      	ldr	r3, [r1, #0]
 801c454:	b10b      	cbz	r3, 801c45a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801c456:	3301      	adds	r3, #1
 801c458:	600b      	str	r3, [r1, #0]
 801c45a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c45e:	680c      	ldr	r4, [r1, #0]
 801c460:	b134      	cbz	r4, 801c470 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801c462:	7824      	ldrb	r4, [r4, #0]
 801c464:	e7cc      	b.n	801c400 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801c466:	680b      	ldr	r3, [r1, #0]
 801c468:	2b00      	cmp	r3, #0
 801c46a:	d0f6      	beq.n	801c45a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801c46c:	781c      	ldrb	r4, [r3, #0]
 801c46e:	e7d7      	b.n	801c420 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801c470:	2300      	movs	r3, #0
 801c472:	220a      	movs	r2, #10
 801c474:	6033      	str	r3, [r6, #0]
 801c476:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801c47a:	fa1f f38c 	uxth.w	r3, ip
 801c47e:	2b09      	cmp	r3, #9
 801c480:	d8ce      	bhi.n	801c420 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801c482:	6833      	ldr	r3, [r6, #0]
 801c484:	fb02 c303 	mla	r3, r2, r3, ip
 801c488:	6033      	str	r3, [r6, #0]
 801c48a:	6803      	ldr	r3, [r0, #0]
 801c48c:	b10b      	cbz	r3, 801c492 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801c48e:	3302      	adds	r3, #2
 801c490:	6003      	str	r3, [r0, #0]
 801c492:	680b      	ldr	r3, [r1, #0]
 801c494:	b10b      	cbz	r3, 801c49a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801c496:	3301      	adds	r3, #1
 801c498:	600b      	str	r3, [r1, #0]
 801c49a:	6803      	ldr	r3, [r0, #0]
 801c49c:	b10b      	cbz	r3, 801c4a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801c49e:	881c      	ldrh	r4, [r3, #0]
 801c4a0:	e7e9      	b.n	801c476 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801c4a2:	680c      	ldr	r4, [r1, #0]
 801c4a4:	2c00      	cmp	r4, #0
 801c4a6:	d0e6      	beq.n	801c476 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801c4a8:	7824      	ldrb	r4, [r4, #0]
 801c4aa:	e7e4      	b.n	801c476 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801c4ac:	680b      	ldr	r3, [r1, #0]
 801c4ae:	b10b      	cbz	r3, 801c4b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801c4b0:	781b      	ldrb	r3, [r3, #0]
 801c4b2:	e7c5      	b.n	801c440 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801c4b4:	2200      	movs	r2, #0
 801c4b6:	240a      	movs	r4, #10
 801c4b8:	602a      	str	r2, [r5, #0]
 801c4ba:	3b30      	subs	r3, #48	; 0x30
 801c4bc:	682a      	ldr	r2, [r5, #0]
 801c4be:	b29e      	uxth	r6, r3
 801c4c0:	2e09      	cmp	r6, #9
 801c4c2:	d813      	bhi.n	801c4ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801c4c4:	fb04 3302 	mla	r3, r4, r2, r3
 801c4c8:	602b      	str	r3, [r5, #0]
 801c4ca:	6803      	ldr	r3, [r0, #0]
 801c4cc:	b10b      	cbz	r3, 801c4d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801c4ce:	3302      	adds	r3, #2
 801c4d0:	6003      	str	r3, [r0, #0]
 801c4d2:	680b      	ldr	r3, [r1, #0]
 801c4d4:	b10b      	cbz	r3, 801c4da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801c4d6:	3301      	adds	r3, #1
 801c4d8:	600b      	str	r3, [r1, #0]
 801c4da:	6803      	ldr	r3, [r0, #0]
 801c4dc:	b10b      	cbz	r3, 801c4e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801c4de:	881b      	ldrh	r3, [r3, #0]
 801c4e0:	e7eb      	b.n	801c4ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801c4e2:	680b      	ldr	r3, [r1, #0]
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d0e8      	beq.n	801c4ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801c4e8:	781b      	ldrb	r3, [r3, #0]
 801c4ea:	e7e6      	b.n	801c4ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801c4ec:	2a06      	cmp	r2, #6
 801c4ee:	bfa8      	it	ge
 801c4f0:	2206      	movge	r2, #6
 801c4f2:	602a      	str	r2, [r5, #0]
 801c4f4:	e7b1      	b.n	801c45a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801c4f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801c4f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4fa:	b0a3      	sub	sp, #140	; 0x8c
 801c4fc:	2600      	movs	r6, #0
 801c4fe:	4607      	mov	r7, r0
 801c500:	4688      	mov	r8, r1
 801c502:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801c506:	4631      	mov	r1, r6
 801c508:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801c50a:	4648      	mov	r0, r9
 801c50c:	960d      	str	r6, [sp, #52]	; 0x34
 801c50e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801c512:	2242      	movs	r2, #66	; 0x42
 801c514:	f00a faf8 	bl	8026b08 <memset>
 801c518:	b15f      	cbz	r7, 801c532 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801c51a:	f108 3aff 	add.w	sl, r8, #4294967295
 801c51e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c522:	b152      	cbz	r2, 801c53a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801c524:	8812      	ldrh	r2, [r2, #0]
 801c526:	b10a      	cbz	r2, 801c52c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801c528:	459a      	cmp	sl, r3
 801c52a:	dc2e      	bgt.n	801c58a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801c52c:	2200      	movs	r2, #0
 801c52e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801c532:	4638      	mov	r0, r7
 801c534:	b023      	add	sp, #140	; 0x8c
 801c536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c53a:	9a08      	ldr	r2, [sp, #32]
 801c53c:	2a00      	cmp	r2, #0
 801c53e:	d0f5      	beq.n	801c52c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801c540:	7812      	ldrb	r2, [r2, #0]
 801c542:	e7f0      	b.n	801c526 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801c544:	2d00      	cmp	r5, #0
 801c546:	d0ea      	beq.n	801c51e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c548:	782a      	ldrb	r2, [r5, #0]
 801c54a:	b142      	cbz	r2, 801c55e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801c54c:	2a25      	cmp	r2, #37	; 0x25
 801c54e:	d001      	beq.n	801c554 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801c550:	459a      	cmp	sl, r3
 801c552:	dc08      	bgt.n	801c566 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801c554:	f1bb 0f00 	cmp.w	fp, #0
 801c558:	d121      	bne.n	801c59e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801c55a:	2d00      	cmp	r5, #0
 801c55c:	d0df      	beq.n	801c51e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c55e:	782a      	ldrb	r2, [r5, #0]
 801c560:	f04f 0b00 	mov.w	fp, #0
 801c564:	e01d      	b.n	801c5a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801c566:	f1bb 0f00 	cmp.w	fp, #0
 801c56a:	d077      	beq.n	801c65c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801c56c:	f8bb 2000 	ldrh.w	r2, [fp]
 801c570:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801c574:	f1bb 0f00 	cmp.w	fp, #0
 801c578:	d002      	beq.n	801c580 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801c57a:	f10b 0202 	add.w	r2, fp, #2
 801c57e:	9209      	str	r2, [sp, #36]	; 0x24
 801c580:	b10d      	cbz	r5, 801c586 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801c582:	3501      	adds	r5, #1
 801c584:	9508      	str	r5, [sp, #32]
 801c586:	3301      	adds	r3, #1
 801c588:	930d      	str	r3, [sp, #52]	; 0x34
 801c58a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c58c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801c590:	f1bb 0f00 	cmp.w	fp, #0
 801c594:	d0d6      	beq.n	801c544 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801c596:	f8bb 2000 	ldrh.w	r2, [fp]
 801c59a:	2a00      	cmp	r2, #0
 801c59c:	d1d6      	bne.n	801c54c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801c59e:	f8bb 2000 	ldrh.w	r2, [fp]
 801c5a2:	2a00      	cmp	r2, #0
 801c5a4:	d0bb      	beq.n	801c51e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c5a6:	459a      	cmp	sl, r3
 801c5a8:	ddb9      	ble.n	801c51e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c5aa:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801c5ae:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801c5b2:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801c5b6:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801c5ba:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801c5be:	960e      	str	r6, [sp, #56]	; 0x38
 801c5c0:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801c5c4:	960f      	str	r6, [sp, #60]	; 0x3c
 801c5c6:	f1bb 0f00 	cmp.w	fp, #0
 801c5ca:	d002      	beq.n	801c5d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801c5cc:	f10b 0302 	add.w	r3, fp, #2
 801c5d0:	9309      	str	r3, [sp, #36]	; 0x24
 801c5d2:	b10d      	cbz	r5, 801c5d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801c5d4:	1c6b      	adds	r3, r5, #1
 801c5d6:	9308      	str	r3, [sp, #32]
 801c5d8:	ab0f      	add	r3, sp, #60	; 0x3c
 801c5da:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801c5de:	a908      	add	r1, sp, #32
 801c5e0:	a809      	add	r0, sp, #36	; 0x24
 801c5e2:	9305      	str	r3, [sp, #20]
 801c5e4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801c5e8:	9304      	str	r3, [sp, #16]
 801c5ea:	ab0e      	add	r3, sp, #56	; 0x38
 801c5ec:	9303      	str	r3, [sp, #12]
 801c5ee:	ab0c      	add	r3, sp, #48	; 0x30
 801c5f0:	9302      	str	r3, [sp, #8]
 801c5f2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801c5f6:	9301      	str	r3, [sp, #4]
 801c5f8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801c5fc:	9300      	str	r3, [sp, #0]
 801c5fe:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801c602:	f7ff fea8 	bl	801c356 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801c606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c608:	2b00      	cmp	r3, #0
 801c60a:	bfbf      	itttt	lt
 801c60c:	6823      	ldrlt	r3, [r4, #0]
 801c60e:	3404      	addlt	r4, #4
 801c610:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c614:	930e      	strlt	r3, [sp, #56]	; 0x38
 801c616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c618:	2b00      	cmp	r3, #0
 801c61a:	bfbe      	ittt	lt
 801c61c:	6823      	ldrlt	r3, [r4, #0]
 801c61e:	3404      	addlt	r4, #4
 801c620:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c624:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801c628:	bfb8      	it	lt
 801c62a:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801c62c:	b1d9      	cbz	r1, 801c666 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801c62e:	880b      	ldrh	r3, [r1, #0]
 801c630:	2b69      	cmp	r3, #105	; 0x69
 801c632:	d01f      	beq.n	801c674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c634:	d82f      	bhi.n	801c696 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801c636:	2b58      	cmp	r3, #88	; 0x58
 801c638:	d01c      	beq.n	801c674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c63a:	d818      	bhi.n	801c66e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801c63c:	2b25      	cmp	r3, #37	; 0x25
 801c63e:	d034      	beq.n	801c6aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801c640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c642:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801c646:	f1bb 0f00 	cmp.w	fp, #0
 801c64a:	f000 80b7 	beq.w	801c7bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801c64e:	f8bb 5000 	ldrh.w	r5, [fp]
 801c652:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801c656:	3301      	adds	r3, #1
 801c658:	930d      	str	r3, [sp, #52]	; 0x34
 801c65a:	e029      	b.n	801c6b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801c65c:	b10d      	cbz	r5, 801c662 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801c65e:	782a      	ldrb	r2, [r5, #0]
 801c660:	e786      	b.n	801c570 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801c662:	462a      	mov	r2, r5
 801c664:	e784      	b.n	801c570 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801c666:	2a00      	cmp	r2, #0
 801c668:	d0ea      	beq.n	801c640 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801c66a:	7813      	ldrb	r3, [r2, #0]
 801c66c:	e7e0      	b.n	801c630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801c66e:	3b63      	subs	r3, #99	; 0x63
 801c670:	2b01      	cmp	r3, #1
 801c672:	d8e5      	bhi.n	801c640 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801c674:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801c678:	b329      	cbz	r1, 801c6c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801c67a:	880b      	ldrh	r3, [r1, #0]
 801c67c:	2b69      	cmp	r3, #105	; 0x69
 801c67e:	d063      	beq.n	801c748 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801c680:	d825      	bhi.n	801c6ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801c682:	2b63      	cmp	r3, #99	; 0x63
 801c684:	d038      	beq.n	801c6f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801c686:	2b64      	cmp	r3, #100	; 0x64
 801c688:	d05e      	beq.n	801c748 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801c68a:	2b58      	cmp	r3, #88	; 0x58
 801c68c:	d07a      	beq.n	801c784 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801c68e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801c692:	4625      	mov	r5, r4
 801c694:	e036      	b.n	801c704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c696:	2b73      	cmp	r3, #115	; 0x73
 801c698:	d0ec      	beq.n	801c674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c69a:	d802      	bhi.n	801c6a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801c69c:	2b6f      	cmp	r3, #111	; 0x6f
 801c69e:	d1cf      	bne.n	801c640 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801c6a0:	e7e8      	b.n	801c674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c6a2:	2b75      	cmp	r3, #117	; 0x75
 801c6a4:	d0e6      	beq.n	801c674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c6a6:	2b78      	cmp	r3, #120	; 0x78
 801c6a8:	e7f9      	b.n	801c69e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801c6aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c6ac:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801c6b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6b2:	b10b      	cbz	r3, 801c6b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801c6b4:	3302      	adds	r3, #2
 801c6b6:	9309      	str	r3, [sp, #36]	; 0x24
 801c6b8:	9b08      	ldr	r3, [sp, #32]
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	f43f af2f 	beq.w	801c51e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c6c0:	3301      	adds	r3, #1
 801c6c2:	9308      	str	r3, [sp, #32]
 801c6c4:	e72b      	b.n	801c51e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c6c6:	2a00      	cmp	r2, #0
 801c6c8:	d0e1      	beq.n	801c68e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801c6ca:	7813      	ldrb	r3, [r2, #0]
 801c6cc:	e7d6      	b.n	801c67c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801c6ce:	2b73      	cmp	r3, #115	; 0x73
 801c6d0:	d036      	beq.n	801c740 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801c6d2:	d807      	bhi.n	801c6e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801c6d4:	2b6f      	cmp	r3, #111	; 0x6f
 801c6d6:	d1da      	bne.n	801c68e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801c6d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c6da:	1d25      	adds	r5, r4, #4
 801c6dc:	2308      	movs	r3, #8
 801c6de:	eba8 0202 	sub.w	r2, r8, r2
 801c6e2:	e049      	b.n	801c778 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801c6e4:	2b75      	cmp	r3, #117	; 0x75
 801c6e6:	d042      	beq.n	801c76e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801c6e8:	2b78      	cmp	r3, #120	; 0x78
 801c6ea:	d1d0      	bne.n	801c68e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801c6ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c6ee:	1d25      	adds	r5, r4, #4
 801c6f0:	2310      	movs	r3, #16
 801c6f2:	eba8 0202 	sub.w	r2, r8, r2
 801c6f6:	e03f      	b.n	801c778 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801c6f8:	7823      	ldrb	r3, [r4, #0]
 801c6fa:	1d25      	adds	r5, r4, #4
 801c6fc:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801c700:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801c704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c706:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d051      	beq.n	801c7b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801c70e:	881a      	ldrh	r2, [r3, #0]
 801c710:	a80d      	add	r0, sp, #52	; 0x34
 801c712:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801c716:	462c      	mov	r4, r5
 801c718:	9005      	str	r0, [sp, #20]
 801c71a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801c71e:	9004      	str	r0, [sp, #16]
 801c720:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c722:	9003      	str	r0, [sp, #12]
 801c724:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801c728:	9002      	str	r0, [sp, #8]
 801c72a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801c72c:	9001      	str	r0, [sp, #4]
 801c72e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801c732:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801c736:	9000      	str	r0, [sp, #0]
 801c738:	a810      	add	r0, sp, #64	; 0x40
 801c73a:	f7ff fd49 	bl	801c1d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801c73e:	e7b7      	b.n	801c6b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801c740:	1d25      	adds	r5, r4, #4
 801c742:	6823      	ldr	r3, [r4, #0]
 801c744:	9310      	str	r3, [sp, #64]	; 0x40
 801c746:	e7dd      	b.n	801c704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c748:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c74a:	230a      	movs	r3, #10
 801c74c:	4649      	mov	r1, r9
 801c74e:	6820      	ldr	r0, [r4, #0]
 801c750:	eba8 0202 	sub.w	r2, r8, r2
 801c754:	1d25      	adds	r5, r4, #4
 801c756:	b292      	uxth	r2, r2
 801c758:	f7ff fd08 	bl	801c16c <_ZN8touchgfx7Unicode4itoaElPtti>
 801c75c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801c760:	2b2d      	cmp	r3, #45	; 0x2d
 801c762:	d1cf      	bne.n	801c704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c764:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c768:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c76a:	3302      	adds	r3, #2
 801c76c:	e7ea      	b.n	801c744 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801c76e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c770:	1d25      	adds	r5, r4, #4
 801c772:	230a      	movs	r3, #10
 801c774:	eba8 0202 	sub.w	r2, r8, r2
 801c778:	b292      	uxth	r2, r2
 801c77a:	4649      	mov	r1, r9
 801c77c:	6820      	ldr	r0, [r4, #0]
 801c77e:	f7ff fcd7 	bl	801c130 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801c782:	e7bf      	b.n	801c704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c784:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c786:	2310      	movs	r3, #16
 801c788:	4649      	mov	r1, r9
 801c78a:	6820      	ldr	r0, [r4, #0]
 801c78c:	eba8 0202 	sub.w	r2, r8, r2
 801c790:	1d25      	adds	r5, r4, #4
 801c792:	b292      	uxth	r2, r2
 801c794:	f7ff fccc 	bl	801c130 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801c798:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801c79c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	d0af      	beq.n	801c704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c7a4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801c7a8:	2919      	cmp	r1, #25
 801c7aa:	d8f7      	bhi.n	801c79c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801c7ac:	3b20      	subs	r3, #32
 801c7ae:	8013      	strh	r3, [r2, #0]
 801c7b0:	e7f4      	b.n	801c79c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801c7b2:	9a08      	ldr	r2, [sp, #32]
 801c7b4:	2a00      	cmp	r2, #0
 801c7b6:	d0ab      	beq.n	801c710 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801c7b8:	7812      	ldrb	r2, [r2, #0]
 801c7ba:	e7a9      	b.n	801c710 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801c7bc:	2d00      	cmp	r5, #0
 801c7be:	f43f af48 	beq.w	801c652 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801c7c2:	782d      	ldrb	r5, [r5, #0]
 801c7c4:	e745      	b.n	801c652 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801c7c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801c7c6:	b507      	push	{r0, r1, r2, lr}
 801c7c8:	9300      	str	r3, [sp, #0]
 801c7ca:	4613      	mov	r3, r2
 801c7cc:	2200      	movs	r2, #0
 801c7ce:	f7ff fe92 	bl	801c4f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801c7d2:	b003      	add	sp, #12
 801c7d4:	f85d fb04 	ldr.w	pc, [sp], #4

0801c7d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801c7d8:	b40c      	push	{r2, r3}
 801c7da:	b507      	push	{r0, r1, r2, lr}
 801c7dc:	ab04      	add	r3, sp, #16
 801c7de:	f853 2b04 	ldr.w	r2, [r3], #4
 801c7e2:	9301      	str	r3, [sp, #4]
 801c7e4:	f7ff ffef 	bl	801c7c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801c7e8:	b003      	add	sp, #12
 801c7ea:	f85d eb04 	ldr.w	lr, [sp], #4
 801c7ee:	b002      	add	sp, #8
 801c7f0:	4770      	bx	lr
	...

0801c7f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801c7f4:	4b01      	ldr	r3, [pc, #4]	; (801c7fc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801c7f6:	6018      	str	r0, [r3, #0]
 801c7f8:	4770      	bx	lr
 801c7fa:	bf00      	nop
 801c7fc:	200567fc 	.word	0x200567fc

0801c800 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801c800:	4b06      	ldr	r3, [pc, #24]	; (801c81c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801c802:	881a      	ldrh	r2, [r3, #0]
 801c804:	4282      	cmp	r2, r0
 801c806:	d807      	bhi.n	801c818 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801c808:	4b05      	ldr	r3, [pc, #20]	; (801c820 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801c80a:	881b      	ldrh	r3, [r3, #0]
 801c80c:	4413      	add	r3, r2
 801c80e:	4298      	cmp	r0, r3
 801c810:	bfac      	ite	ge
 801c812:	2000      	movge	r0, #0
 801c814:	2001      	movlt	r0, #1
 801c816:	4770      	bx	lr
 801c818:	2000      	movs	r0, #0
 801c81a:	4770      	bx	lr
 801c81c:	2005681c 	.word	0x2005681c
 801c820:	20056820 	.word	0x20056820

0801c824 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801c824:	b508      	push	{r3, lr}
 801c826:	4601      	mov	r1, r0
 801c828:	f7ff ffea 	bl	801c800 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801c82c:	b118      	cbz	r0, 801c836 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801c82e:	4b02      	ldr	r3, [pc, #8]	; (801c838 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801c836:	bd08      	pop	{r3, pc}
 801c838:	20056800 	.word	0x20056800

0801c83c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801c83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c840:	4d28      	ldr	r5, [pc, #160]	; (801c8e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801c842:	682b      	ldr	r3, [r5, #0]
 801c844:	2b00      	cmp	r3, #0
 801c846:	d04a      	beq.n	801c8de <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801c848:	4a27      	ldr	r2, [pc, #156]	; (801c8e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801c84a:	4e28      	ldr	r6, [pc, #160]	; (801c8ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801c84c:	8810      	ldrh	r0, [r2, #0]
 801c84e:	f8b6 8000 	ldrh.w	r8, [r6]
 801c852:	4c27      	ldr	r4, [pc, #156]	; (801c8f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801c854:	4440      	add	r0, r8
 801c856:	4f27      	ldr	r7, [pc, #156]	; (801c8f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801c858:	1c41      	adds	r1, r0, #1
 801c85a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801c85e:	f021 0101 	bic.w	r1, r1, #1
 801c862:	eb03 020e 	add.w	r2, r3, lr
 801c866:	0409      	lsls	r1, r1, #16
 801c868:	6022      	str	r2, [r4, #0]
 801c86a:	0c09      	lsrs	r1, r1, #16
 801c86c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801c870:	eb0e 010c 	add.w	r1, lr, ip
 801c874:	185a      	adds	r2, r3, r1
 801c876:	603a      	str	r2, [r7, #0]
 801c878:	220e      	movs	r2, #14
 801c87a:	fb02 f208 	mul.w	r2, r2, r8
 801c87e:	3203      	adds	r2, #3
 801c880:	f022 0203 	bic.w	r2, r2, #3
 801c884:	4411      	add	r1, r2
 801c886:	440b      	add	r3, r1
 801c888:	491b      	ldr	r1, [pc, #108]	; (801c8f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801c88a:	600b      	str	r3, [r1, #0]
 801c88c:	2300      	movs	r3, #0
 801c88e:	491b      	ldr	r1, [pc, #108]	; (801c8fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801c890:	800b      	strh	r3, [r1, #0]
 801c892:	491b      	ldr	r1, [pc, #108]	; (801c900 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801c894:	6809      	ldr	r1, [r1, #0]
 801c896:	eba1 010e 	sub.w	r1, r1, lr
 801c89a:	eba1 010c 	sub.w	r1, r1, ip
 801c89e:	469c      	mov	ip, r3
 801c8a0:	1a8a      	subs	r2, r1, r2
 801c8a2:	4918      	ldr	r1, [pc, #96]	; (801c904 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801c8a4:	600a      	str	r2, [r1, #0]
 801c8a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c8aa:	4a17      	ldr	r2, [pc, #92]	; (801c908 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801c8ac:	8013      	strh	r3, [r2, #0]
 801c8ae:	4283      	cmp	r3, r0
 801c8b0:	d10d      	bne.n	801c8ce <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801c8b2:	8835      	ldrh	r5, [r6, #0]
 801c8b4:	2300      	movs	r3, #0
 801c8b6:	6838      	ldr	r0, [r7, #0]
 801c8b8:	240e      	movs	r4, #14
 801c8ba:	429d      	cmp	r5, r3
 801c8bc:	d90f      	bls.n	801c8de <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801c8be:	fb04 0203 	mla	r2, r4, r3, r0
 801c8c2:	3301      	adds	r3, #1
 801c8c4:	7b11      	ldrb	r1, [r2, #12]
 801c8c6:	f36f 1145 	bfc	r1, #5, #1
 801c8ca:	7311      	strb	r1, [r2, #12]
 801c8cc:	e7f5      	b.n	801c8ba <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801c8ce:	682a      	ldr	r2, [r5, #0]
 801c8d0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801c8d4:	6822      	ldr	r2, [r4, #0]
 801c8d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801c8da:	3301      	adds	r3, #1
 801c8dc:	e7e7      	b.n	801c8ae <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801c8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8e2:	bf00      	nop
 801c8e4:	20056800 	.word	0x20056800
 801c8e8:	2005681c 	.word	0x2005681c
 801c8ec:	20056820 	.word	0x20056820
 801c8f0:	20056814 	.word	0x20056814
 801c8f4:	20056804 	.word	0x20056804
 801c8f8:	2005680c 	.word	0x2005680c
 801c8fc:	2005681e 	.word	0x2005681e
 801c900:	20056808 	.word	0x20056808
 801c904:	20056818 	.word	0x20056818
 801c908:	20056810 	.word	0x20056810

0801c90c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801c90c:	4b10      	ldr	r3, [pc, #64]	; (801c950 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801c90e:	b510      	push	{r4, lr}
 801c910:	681b      	ldr	r3, [r3, #0]
 801c912:	b9db      	cbnz	r3, 801c94c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801c914:	b1d1      	cbz	r1, 801c94c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801c916:	4b0f      	ldr	r3, [pc, #60]	; (801c954 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801c918:	240e      	movs	r4, #14
 801c91a:	801a      	strh	r2, [r3, #0]
 801c91c:	b292      	uxth	r2, r2
 801c91e:	4b0e      	ldr	r3, [pc, #56]	; (801c958 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801c920:	881b      	ldrh	r3, [r3, #0]
 801c922:	4413      	add	r3, r2
 801c924:	4362      	muls	r2, r4
 801c926:	2406      	movs	r4, #6
 801c928:	fb04 2203 	mla	r2, r4, r3, r2
 801c92c:	428a      	cmp	r2, r1
 801c92e:	d305      	bcc.n	801c93c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801c930:	4b0a      	ldr	r3, [pc, #40]	; (801c95c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801c932:	2135      	movs	r1, #53	; 0x35
 801c934:	4a0a      	ldr	r2, [pc, #40]	; (801c960 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801c936:	480b      	ldr	r0, [pc, #44]	; (801c964 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801c938:	f00a f85a 	bl	80269f0 <__assert_func>
 801c93c:	4b0a      	ldr	r3, [pc, #40]	; (801c968 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801c93e:	6019      	str	r1, [r3, #0]
 801c940:	4b0a      	ldr	r3, [pc, #40]	; (801c96c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801c942:	6018      	str	r0, [r3, #0]
 801c944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c948:	f7ff bf78 	b.w	801c83c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801c94c:	bd10      	pop	{r4, pc}
 801c94e:	bf00      	nop
 801c950:	2005680c 	.word	0x2005680c
 801c954:	20056820 	.word	0x20056820
 801c958:	2005681c 	.word	0x2005681c
 801c95c:	0802e621 	.word	0x0802e621
 801c960:	0802e6b6 	.word	0x0802e6b6
 801c964:	0802e5fc 	.word	0x0802e5fc
 801c968:	20056808 	.word	0x20056808
 801c96c:	20056800 	.word	0x20056800

0801c970 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801c970:	b470      	push	{r4, r5, r6}
 801c972:	4c07      	ldr	r4, [pc, #28]	; (801c990 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801c974:	4605      	mov	r5, r0
 801c976:	4610      	mov	r0, r2
 801c978:	9a03      	ldr	r2, [sp, #12]
 801c97a:	6826      	ldr	r6, [r4, #0]
 801c97c:	b936      	cbnz	r6, 801c98c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801c97e:	6025      	str	r5, [r4, #0]
 801c980:	4c04      	ldr	r4, [pc, #16]	; (801c994 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801c982:	8021      	strh	r1, [r4, #0]
 801c984:	4619      	mov	r1, r3
 801c986:	bc70      	pop	{r4, r5, r6}
 801c988:	f7ff bfc0 	b.w	801c90c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801c98c:	bc70      	pop	{r4, r5, r6}
 801c98e:	4770      	bx	lr
 801c990:	20056824 	.word	0x20056824
 801c994:	2005681c 	.word	0x2005681c

0801c998 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801c998:	b508      	push	{r3, lr}
 801c99a:	4b14      	ldr	r3, [pc, #80]	; (801c9ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801c99c:	6819      	ldr	r1, [r3, #0]
 801c99e:	b931      	cbnz	r1, 801c9ae <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801c9a0:	4b13      	ldr	r3, [pc, #76]	; (801c9f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801c9a2:	f240 4186 	movw	r1, #1158	; 0x486
 801c9a6:	4a13      	ldr	r2, [pc, #76]	; (801c9f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801c9a8:	4813      	ldr	r0, [pc, #76]	; (801c9f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801c9aa:	f00a f821 	bl	80269f0 <__assert_func>
 801c9ae:	4a13      	ldr	r2, [pc, #76]	; (801c9fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801c9b0:	8803      	ldrh	r3, [r0, #0]
 801c9b2:	8812      	ldrh	r2, [r2, #0]
 801c9b4:	4293      	cmp	r3, r2
 801c9b6:	d204      	bcs.n	801c9c2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801c9b8:	2214      	movs	r2, #20
 801c9ba:	fb02 1303 	mla	r3, r2, r3, r1
 801c9be:	8918      	ldrh	r0, [r3, #8]
 801c9c0:	bd08      	pop	{r3, pc}
 801c9c2:	490f      	ldr	r1, [pc, #60]	; (801ca00 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801c9c4:	8809      	ldrh	r1, [r1, #0]
 801c9c6:	4411      	add	r1, r2
 801c9c8:	428b      	cmp	r3, r1
 801c9ca:	da06      	bge.n	801c9da <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801c9cc:	1a9b      	subs	r3, r3, r2
 801c9ce:	4a0d      	ldr	r2, [pc, #52]	; (801ca04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801c9d0:	210e      	movs	r1, #14
 801c9d2:	6812      	ldr	r2, [r2, #0]
 801c9d4:	fb01 2303 	mla	r3, r1, r3, r2
 801c9d8:	e7f1      	b.n	801c9be <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801c9da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c9de:	4293      	cmp	r3, r2
 801c9e0:	bf0a      	itet	eq
 801c9e2:	4b09      	ldreq	r3, [pc, #36]	; (801ca08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801c9e4:	2000      	movne	r0, #0
 801c9e6:	8818      	ldrheq	r0, [r3, #0]
 801c9e8:	e7ea      	b.n	801c9c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801c9ea:	bf00      	nop
 801c9ec:	20056824 	.word	0x20056824
 801c9f0:	0802e67a 	.word	0x0802e67a
 801c9f4:	0802e72d 	.word	0x0802e72d
 801c9f8:	0802e5fc 	.word	0x0802e5fc
 801c9fc:	2005681c 	.word	0x2005681c
 801ca00:	20056820 	.word	0x20056820
 801ca04:	20056804 	.word	0x20056804
 801ca08:	20056770 	.word	0x20056770

0801ca0c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801ca0c:	b508      	push	{r3, lr}
 801ca0e:	4b14      	ldr	r3, [pc, #80]	; (801ca60 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801ca10:	6819      	ldr	r1, [r3, #0]
 801ca12:	b931      	cbnz	r1, 801ca22 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801ca14:	4b13      	ldr	r3, [pc, #76]	; (801ca64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801ca16:	f240 419a 	movw	r1, #1178	; 0x49a
 801ca1a:	4a13      	ldr	r2, [pc, #76]	; (801ca68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801ca1c:	4813      	ldr	r0, [pc, #76]	; (801ca6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801ca1e:	f009 ffe7 	bl	80269f0 <__assert_func>
 801ca22:	4a13      	ldr	r2, [pc, #76]	; (801ca70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801ca24:	8803      	ldrh	r3, [r0, #0]
 801ca26:	8812      	ldrh	r2, [r2, #0]
 801ca28:	4293      	cmp	r3, r2
 801ca2a:	d204      	bcs.n	801ca36 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801ca2c:	2214      	movs	r2, #20
 801ca2e:	fb02 1303 	mla	r3, r2, r3, r1
 801ca32:	8958      	ldrh	r0, [r3, #10]
 801ca34:	bd08      	pop	{r3, pc}
 801ca36:	490f      	ldr	r1, [pc, #60]	; (801ca74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801ca38:	8809      	ldrh	r1, [r1, #0]
 801ca3a:	4411      	add	r1, r2
 801ca3c:	428b      	cmp	r3, r1
 801ca3e:	da06      	bge.n	801ca4e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801ca40:	1a9b      	subs	r3, r3, r2
 801ca42:	4a0d      	ldr	r2, [pc, #52]	; (801ca78 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801ca44:	210e      	movs	r1, #14
 801ca46:	6812      	ldr	r2, [r2, #0]
 801ca48:	fb01 2303 	mla	r3, r1, r3, r2
 801ca4c:	e7f1      	b.n	801ca32 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801ca4e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ca52:	4293      	cmp	r3, r2
 801ca54:	bf0a      	itet	eq
 801ca56:	4b09      	ldreq	r3, [pc, #36]	; (801ca7c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801ca58:	2000      	movne	r0, #0
 801ca5a:	8818      	ldrheq	r0, [r3, #0]
 801ca5c:	e7ea      	b.n	801ca34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801ca5e:	bf00      	nop
 801ca60:	20056824 	.word	0x20056824
 801ca64:	0802e67a 	.word	0x0802e67a
 801ca68:	0802e759 	.word	0x0802e759
 801ca6c:	0802e5fc 	.word	0x0802e5fc
 801ca70:	2005681c 	.word	0x2005681c
 801ca74:	20056820 	.word	0x20056820
 801ca78:	20056804 	.word	0x20056804
 801ca7c:	20056772 	.word	0x20056772

0801ca80 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ca80:	b508      	push	{r3, lr}
 801ca82:	4b12      	ldr	r3, [pc, #72]	; (801cacc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ca84:	6819      	ldr	r1, [r3, #0]
 801ca86:	b931      	cbnz	r1, 801ca96 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ca88:	4b11      	ldr	r3, [pc, #68]	; (801cad0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ca8a:	f240 41d2 	movw	r1, #1234	; 0x4d2
 801ca8e:	4a11      	ldr	r2, [pc, #68]	; (801cad4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ca90:	4811      	ldr	r0, [pc, #68]	; (801cad8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ca92:	f009 ffad 	bl	80269f0 <__assert_func>
 801ca96:	8803      	ldrh	r3, [r0, #0]
 801ca98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ca9c:	4293      	cmp	r3, r2
 801ca9e:	d012      	beq.n	801cac6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801caa0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801caa4:	4293      	cmp	r3, r2
 801caa6:	d103      	bne.n	801cab0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801caa8:	4b0c      	ldr	r3, [pc, #48]	; (801cadc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801caaa:	681b      	ldr	r3, [r3, #0]
 801caac:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801caae:	bd08      	pop	{r3, pc}
 801cab0:	4a0b      	ldr	r2, [pc, #44]	; (801cae0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801cab2:	6812      	ldr	r2, [r2, #0]
 801cab4:	b11a      	cbz	r2, 801cabe <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801cab6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801caba:	2800      	cmp	r0, #0
 801cabc:	d1f7      	bne.n	801caae <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801cabe:	2214      	movs	r2, #20
 801cac0:	4353      	muls	r3, r2
 801cac2:	58c8      	ldr	r0, [r1, r3]
 801cac4:	e7f3      	b.n	801caae <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801cac6:	2000      	movs	r0, #0
 801cac8:	e7f1      	b.n	801caae <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801caca:	bf00      	nop
 801cacc:	20056824 	.word	0x20056824
 801cad0:	0802e67a 	.word	0x0802e67a
 801cad4:	0802e6fc 	.word	0x0802e6fc
 801cad8:	0802e5fc 	.word	0x0802e5fc
 801cadc:	2005677c 	.word	0x2005677c
 801cae0:	20056800 	.word	0x20056800

0801cae4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801cae4:	8802      	ldrh	r2, [r0, #0]
 801cae6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801caea:	429a      	cmp	r2, r3
 801caec:	d845      	bhi.n	801cb7a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801caee:	4b24      	ldr	r3, [pc, #144]	; (801cb80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801caf0:	8818      	ldrh	r0, [r3, #0]
 801caf2:	4282      	cmp	r2, r0
 801caf4:	d221      	bcs.n	801cb3a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801caf6:	4b23      	ldr	r3, [pc, #140]	; (801cb84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801caf8:	6819      	ldr	r1, [r3, #0]
 801cafa:	2314      	movs	r3, #20
 801cafc:	fb03 1302 	mla	r3, r3, r2, r1
 801cb00:	6858      	ldr	r0, [r3, #4]
 801cb02:	2800      	cmp	r0, #0
 801cb04:	d03a      	beq.n	801cb7c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801cb06:	4920      	ldr	r1, [pc, #128]	; (801cb88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801cb08:	6809      	ldr	r1, [r1, #0]
 801cb0a:	2900      	cmp	r1, #0
 801cb0c:	d036      	beq.n	801cb7c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801cb0e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cb12:	2900      	cmp	r1, #0
 801cb14:	d032      	beq.n	801cb7c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801cb16:	891a      	ldrh	r2, [r3, #8]
 801cb18:	8958      	ldrh	r0, [r3, #10]
 801cb1a:	4350      	muls	r0, r2
 801cb1c:	7c5a      	ldrb	r2, [r3, #17]
 801cb1e:	7cdb      	ldrb	r3, [r3, #19]
 801cb20:	0952      	lsrs	r2, r2, #5
 801cb22:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801cb26:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801cb2a:	2b0b      	cmp	r3, #11
 801cb2c:	bf18      	it	ne
 801cb2e:	0040      	lslne	r0, r0, #1
 801cb30:	3003      	adds	r0, #3
 801cb32:	f020 0003 	bic.w	r0, r0, #3
 801cb36:	4408      	add	r0, r1
 801cb38:	4770      	bx	lr
 801cb3a:	4b14      	ldr	r3, [pc, #80]	; (801cb8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801cb3c:	881b      	ldrh	r3, [r3, #0]
 801cb3e:	4403      	add	r3, r0
 801cb40:	429a      	cmp	r2, r3
 801cb42:	da1a      	bge.n	801cb7a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801cb44:	4b12      	ldr	r3, [pc, #72]	; (801cb90 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801cb46:	1a10      	subs	r0, r2, r0
 801cb48:	210e      	movs	r1, #14
 801cb4a:	681b      	ldr	r3, [r3, #0]
 801cb4c:	fb01 3000 	mla	r0, r1, r0, r3
 801cb50:	7b03      	ldrb	r3, [r0, #12]
 801cb52:	f003 031f 	and.w	r3, r3, #31
 801cb56:	2b0b      	cmp	r3, #11
 801cb58:	d10b      	bne.n	801cb72 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cb5a:	8903      	ldrh	r3, [r0, #8]
 801cb5c:	8940      	ldrh	r0, [r0, #10]
 801cb5e:	4358      	muls	r0, r3
 801cb60:	4b09      	ldr	r3, [pc, #36]	; (801cb88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801cb62:	3003      	adds	r0, #3
 801cb64:	6819      	ldr	r1, [r3, #0]
 801cb66:	f020 0303 	bic.w	r3, r0, #3
 801cb6a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801cb6e:	4418      	add	r0, r3
 801cb70:	4770      	bx	lr
 801cb72:	2b0d      	cmp	r3, #13
 801cb74:	d101      	bne.n	801cb7a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801cb76:	300d      	adds	r0, #13
 801cb78:	4770      	bx	lr
 801cb7a:	2000      	movs	r0, #0
 801cb7c:	4770      	bx	lr
 801cb7e:	bf00      	nop
 801cb80:	2005681c 	.word	0x2005681c
 801cb84:	20056824 	.word	0x20056824
 801cb88:	20056800 	.word	0x20056800
 801cb8c:	20056820 	.word	0x20056820
 801cb90:	20056804 	.word	0x20056804

0801cb94 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801cb94:	4b17      	ldr	r3, [pc, #92]	; (801cbf4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801cb96:	b510      	push	{r4, lr}
 801cb98:	6819      	ldr	r1, [r3, #0]
 801cb9a:	8803      	ldrh	r3, [r0, #0]
 801cb9c:	b1e9      	cbz	r1, 801cbda <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801cb9e:	4a16      	ldr	r2, [pc, #88]	; (801cbf8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801cba0:	8812      	ldrh	r2, [r2, #0]
 801cba2:	429a      	cmp	r2, r3
 801cba4:	d90a      	bls.n	801cbbc <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801cba6:	2214      	movs	r2, #20
 801cba8:	fb02 1303 	mla	r3, r2, r3, r1
 801cbac:	7c58      	ldrb	r0, [r3, #17]
 801cbae:	0942      	lsrs	r2, r0, #5
 801cbb0:	7cd8      	ldrb	r0, [r3, #19]
 801cbb2:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801cbb6:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801cbba:	bd10      	pop	{r4, pc}
 801cbbc:	490f      	ldr	r1, [pc, #60]	; (801cbfc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801cbbe:	8809      	ldrh	r1, [r1, #0]
 801cbc0:	4411      	add	r1, r2
 801cbc2:	428b      	cmp	r3, r1
 801cbc4:	da09      	bge.n	801cbda <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801cbc6:	1a9b      	subs	r3, r3, r2
 801cbc8:	4a0d      	ldr	r2, [pc, #52]	; (801cc00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801cbca:	210e      	movs	r1, #14
 801cbcc:	6812      	ldr	r2, [r2, #0]
 801cbce:	fb01 2303 	mla	r3, r1, r3, r2
 801cbd2:	7b18      	ldrb	r0, [r3, #12]
 801cbd4:	f000 001f 	and.w	r0, r0, #31
 801cbd8:	e7ef      	b.n	801cbba <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801cbda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cbde:	4293      	cmp	r3, r2
 801cbe0:	d106      	bne.n	801cbf0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801cbe2:	f7e9 fd47 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 801cbe6:	6803      	ldr	r3, [r0, #0]
 801cbe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbee:	4718      	bx	r3
 801cbf0:	2000      	movs	r0, #0
 801cbf2:	e7e2      	b.n	801cbba <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801cbf4:	20056824 	.word	0x20056824
 801cbf8:	2005681c 	.word	0x2005681c
 801cbfc:	20056820 	.word	0x20056820
 801cc00:	20056804 	.word	0x20056804

0801cc04 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801cc04:	2018      	movs	r0, #24
 801cc06:	4770      	bx	lr

0801cc08 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801cc08:	2001      	movs	r0, #1
 801cc0a:	4770      	bx	lr

0801cc0c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc10:	b085      	sub	sp, #20
 801cc12:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801cc14:	9203      	str	r2, [sp, #12]
 801cc16:	6870      	ldr	r0, [r6, #4]
 801cc18:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801cc1c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801cc20:	9101      	str	r1, [sp, #4]
 801cc22:	fa1f f885 	uxth.w	r8, r5
 801cc26:	43ed      	mvns	r5, r5
 801cc28:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801cc2c:	b2ed      	uxtb	r5, r5
 801cc2e:	fb00 2404 	mla	r4, r0, r4, r2
 801cc32:	6832      	ldr	r2, [r6, #0]
 801cc34:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cc38:	4414      	add	r4, r2
 801cc3a:	f8dc 2000 	ldr.w	r2, [ip]
 801cc3e:	9202      	str	r2, [sp, #8]
 801cc40:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801cc44:	f102 0e04 	add.w	lr, r2, #4
 801cc48:	9a01      	ldr	r2, [sp, #4]
 801cc4a:	2a00      	cmp	r2, #0
 801cc4c:	dc03      	bgt.n	801cc56 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801cc4e:	9a03      	ldr	r2, [sp, #12]
 801cc50:	2a00      	cmp	r2, #0
 801cc52:	f340 8116 	ble.w	801ce82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801cc56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cc58:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801cc5c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cc60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cc62:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801cc66:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	dd0e      	ble.n	801cc8c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801cc6e:	1406      	asrs	r6, r0, #16
 801cc70:	d405      	bmi.n	801cc7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cc72:	4556      	cmp	r6, sl
 801cc74:	da03      	bge.n	801cc7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cc76:	1416      	asrs	r6, r2, #16
 801cc78:	d401      	bmi.n	801cc7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cc7a:	454e      	cmp	r6, r9
 801cc7c:	db07      	blt.n	801cc8e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801cc7e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cc80:	3b01      	subs	r3, #1
 801cc82:	3403      	adds	r4, #3
 801cc84:	4430      	add	r0, r6
 801cc86:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cc88:	4432      	add	r2, r6
 801cc8a:	e7ee      	b.n	801cc6a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801cc8c:	d063      	beq.n	801cd56 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801cc8e:	1e5e      	subs	r6, r3, #1
 801cc90:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801cc92:	fb07 0706 	mla	r7, r7, r6, r0
 801cc96:	143f      	asrs	r7, r7, #16
 801cc98:	d454      	bmi.n	801cd44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801cc9a:	4557      	cmp	r7, sl
 801cc9c:	da52      	bge.n	801cd44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801cc9e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801cca0:	fb07 2606 	mla	r6, r7, r6, r2
 801cca4:	1436      	asrs	r6, r6, #16
 801cca6:	d44d      	bmi.n	801cd44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801cca8:	454e      	cmp	r6, r9
 801ccaa:	da4b      	bge.n	801cd44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801ccac:	1ce6      	adds	r6, r4, #3
 801ccae:	4699      	mov	r9, r3
 801ccb0:	f1b9 0f00 	cmp.w	r9, #0
 801ccb4:	f106 0603 	add.w	r6, r6, #3
 801ccb8:	dd48      	ble.n	801cd4c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801ccba:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801ccbe:	1417      	asrs	r7, r2, #16
 801ccc0:	9902      	ldr	r1, [sp, #8]
 801ccc2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801ccc6:	f109 39ff 	add.w	r9, r9, #4294967295
 801ccca:	fb0b 1707 	mla	r7, fp, r7, r1
 801ccce:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801ccd2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ccd4:	f817 700a 	ldrb.w	r7, [r7, sl]
 801ccd8:	fb1b fb05 	smulbb	fp, fp, r5
 801ccdc:	4408      	add	r0, r1
 801ccde:	9912      	ldr	r1, [sp, #72]	; 0x48
 801cce0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cce4:	440a      	add	r2, r1
 801cce6:	eb0e 0a07 	add.w	sl, lr, r7
 801ccea:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801ccee:	fb07 b708 	mla	r7, r7, r8, fp
 801ccf2:	b2bf      	uxth	r7, r7
 801ccf4:	f107 0b01 	add.w	fp, r7, #1
 801ccf8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801ccfc:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801cd00:	fb1b fb05 	smulbb	fp, fp, r5
 801cd04:	123f      	asrs	r7, r7, #8
 801cd06:	f806 7c06 	strb.w	r7, [r6, #-6]
 801cd0a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801cd0e:	fb07 b708 	mla	r7, r7, r8, fp
 801cd12:	b2bf      	uxth	r7, r7
 801cd14:	f107 0b01 	add.w	fp, r7, #1
 801cd18:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801cd1c:	123f      	asrs	r7, r7, #8
 801cd1e:	f806 7c05 	strb.w	r7, [r6, #-5]
 801cd22:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801cd26:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801cd2a:	fb1a fa05 	smulbb	sl, sl, r5
 801cd2e:	fb07 a708 	mla	r7, r7, r8, sl
 801cd32:	b2bf      	uxth	r7, r7
 801cd34:	f107 0a01 	add.w	sl, r7, #1
 801cd38:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801cd3c:	123f      	asrs	r7, r7, #8
 801cd3e:	f806 7c04 	strb.w	r7, [r6, #-4]
 801cd42:	e7b5      	b.n	801ccb0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801cd44:	2700      	movs	r7, #0
 801cd46:	1bde      	subs	r6, r3, r7
 801cd48:	2e00      	cmp	r6, #0
 801cd4a:	dc42      	bgt.n	801cdd2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801cd4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd54:	441c      	add	r4, r3
 801cd56:	9b01      	ldr	r3, [sp, #4]
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	f340 8092 	ble.w	801ce82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801cd5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd64:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cd68:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cd6c:	eef0 6a62 	vmov.f32	s13, s5
 801cd70:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cd74:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cd78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd7c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801cd80:	eef0 6a43 	vmov.f32	s13, s6
 801cd84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd88:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801cd8c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cd90:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cd94:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cd98:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cd9c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cda0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cda4:	ee12 2a90 	vmov	r2, s5
 801cda8:	eef0 2a47 	vmov.f32	s5, s14
 801cdac:	fb92 f3f3 	sdiv	r3, r2, r3
 801cdb0:	ee13 2a10 	vmov	r2, s6
 801cdb4:	9311      	str	r3, [sp, #68]	; 0x44
 801cdb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cdb8:	eeb0 3a67 	vmov.f32	s6, s15
 801cdbc:	fb92 f3f3 	sdiv	r3, r2, r3
 801cdc0:	9312      	str	r3, [sp, #72]	; 0x48
 801cdc2:	9b01      	ldr	r3, [sp, #4]
 801cdc4:	9a03      	ldr	r2, [sp, #12]
 801cdc6:	3b01      	subs	r3, #1
 801cdc8:	9301      	str	r3, [sp, #4]
 801cdca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cdcc:	bf08      	it	eq
 801cdce:	4613      	moveq	r3, r2
 801cdd0:	e73a      	b.n	801cc48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801cdd2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801cdd6:	d44e      	bmi.n	801ce76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801cdd8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801cddc:	4556      	cmp	r6, sl
 801cdde:	dd4a      	ble.n	801ce76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801cde0:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801cde4:	d447      	bmi.n	801ce76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801cde6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801cdea:	4559      	cmp	r1, fp
 801cdec:	dd43      	ble.n	801ce76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801cdee:	fa0f f986 	sxth.w	r9, r6
 801cdf2:	9902      	ldr	r1, [sp, #8]
 801cdf4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801cdf8:	fb0b 1909 	mla	r9, fp, r9, r1
 801cdfc:	f814 b006 	ldrb.w	fp, [r4, r6]
 801ce00:	f819 900a 	ldrb.w	r9, [r9, sl]
 801ce04:	fb1b fb05 	smulbb	fp, fp, r5
 801ce08:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ce0c:	eb0e 0a09 	add.w	sl, lr, r9
 801ce10:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801ce14:	fb09 b908 	mla	r9, r9, r8, fp
 801ce18:	fa1f f989 	uxth.w	r9, r9
 801ce1c:	f109 0b01 	add.w	fp, r9, #1
 801ce20:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ce24:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce28:	f804 9006 	strb.w	r9, [r4, r6]
 801ce2c:	4426      	add	r6, r4
 801ce2e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801ce32:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ce36:	fb1b fb05 	smulbb	fp, fp, r5
 801ce3a:	fb09 b908 	mla	r9, r9, r8, fp
 801ce3e:	fa1f f989 	uxth.w	r9, r9
 801ce42:	f109 0b01 	add.w	fp, r9, #1
 801ce46:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ce4a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce4e:	f886 9001 	strb.w	r9, [r6, #1]
 801ce52:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ce56:	f896 a002 	ldrb.w	sl, [r6, #2]
 801ce5a:	fb1a fa05 	smulbb	sl, sl, r5
 801ce5e:	fb09 a908 	mla	r9, r9, r8, sl
 801ce62:	fa1f f989 	uxth.w	r9, r9
 801ce66:	f109 0a01 	add.w	sl, r9, #1
 801ce6a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801ce6e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce72:	f886 9002 	strb.w	r9, [r6, #2]
 801ce76:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ce78:	3701      	adds	r7, #1
 801ce7a:	4408      	add	r0, r1
 801ce7c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ce7e:	440a      	add	r2, r1
 801ce80:	e761      	b.n	801cd46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ce82:	b005      	add	sp, #20
 801ce84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce88 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ce88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce8c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ce8e:	4693      	mov	fp, r2
 801ce90:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801ce92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ce96:	6868      	ldr	r0, [r5, #4]
 801ce98:	6877      	ldr	r7, [r6, #4]
 801ce9a:	9100      	str	r1, [sp, #0]
 801ce9c:	3704      	adds	r7, #4
 801ce9e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801cea2:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801cea6:	fb00 2404 	mla	r4, r0, r4, r2
 801ceaa:	682a      	ldr	r2, [r5, #0]
 801ceac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ceb0:	4414      	add	r4, r2
 801ceb2:	6832      	ldr	r2, [r6, #0]
 801ceb4:	9201      	str	r2, [sp, #4]
 801ceb6:	9a00      	ldr	r2, [sp, #0]
 801ceb8:	2a00      	cmp	r2, #0
 801ceba:	dc03      	bgt.n	801cec4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801cebc:	f1bb 0f00 	cmp.w	fp, #0
 801cec0:	f340 80bc 	ble.w	801d03c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801cec4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cec6:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801ceca:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cece:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ced0:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801ced4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	dd0c      	ble.n	801cef6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cedc:	1405      	asrs	r5, r0, #16
 801cede:	d405      	bmi.n	801ceec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801cee0:	4555      	cmp	r5, sl
 801cee2:	da03      	bge.n	801ceec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801cee4:	1415      	asrs	r5, r2, #16
 801cee6:	d401      	bmi.n	801ceec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801cee8:	454d      	cmp	r5, r9
 801ceea:	db05      	blt.n	801cef8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ceec:	4440      	add	r0, r8
 801ceee:	4472      	add	r2, lr
 801cef0:	3b01      	subs	r3, #1
 801cef2:	3403      	adds	r4, #3
 801cef4:	e7f0      	b.n	801ced8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801cef6:	d03f      	beq.n	801cf78 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801cef8:	1e5d      	subs	r5, r3, #1
 801cefa:	fb08 0c05 	mla	ip, r8, r5, r0
 801cefe:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801cf02:	d42e      	bmi.n	801cf62 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801cf04:	45d4      	cmp	ip, sl
 801cf06:	da2c      	bge.n	801cf62 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801cf08:	fb0e 2505 	mla	r5, lr, r5, r2
 801cf0c:	142d      	asrs	r5, r5, #16
 801cf0e:	d428      	bmi.n	801cf62 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801cf10:	454d      	cmp	r5, r9
 801cf12:	da26      	bge.n	801cf62 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801cf14:	1ce5      	adds	r5, r4, #3
 801cf16:	469c      	mov	ip, r3
 801cf18:	f1bc 0f00 	cmp.w	ip, #0
 801cf1c:	f105 0503 	add.w	r5, r5, #3
 801cf20:	dd25      	ble.n	801cf6e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801cf22:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801cf26:	ea4f 4922 	mov.w	r9, r2, asr #16
 801cf2a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801cf2e:	4472      	add	r2, lr
 801cf30:	468a      	mov	sl, r1
 801cf32:	9901      	ldr	r1, [sp, #4]
 801cf34:	fb0a 1909 	mla	r9, sl, r9, r1
 801cf38:	1401      	asrs	r1, r0, #16
 801cf3a:	4440      	add	r0, r8
 801cf3c:	f819 9001 	ldrb.w	r9, [r9, r1]
 801cf40:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801cf44:	eb07 0a09 	add.w	sl, r7, r9
 801cf48:	f817 9009 	ldrb.w	r9, [r7, r9]
 801cf4c:	f805 9c06 	strb.w	r9, [r5, #-6]
 801cf50:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801cf54:	f805 9c05 	strb.w	r9, [r5, #-5]
 801cf58:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801cf5c:	f805 9c04 	strb.w	r9, [r5, #-4]
 801cf60:	e7da      	b.n	801cf18 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cf62:	2500      	movs	r5, #0
 801cf64:	eba3 0c05 	sub.w	ip, r3, r5
 801cf68:	f1bc 0f00 	cmp.w	ip, #0
 801cf6c:	dc3b      	bgt.n	801cfe6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801cf6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cf72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf76:	441c      	add	r4, r3
 801cf78:	9b00      	ldr	r3, [sp, #0]
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	dd5e      	ble.n	801d03c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801cf7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cf82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cf84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cf88:	eeb0 6a62 	vmov.f32	s12, s5
 801cf8c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cf90:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cf94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf98:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801cf9c:	eeb0 6a43 	vmov.f32	s12, s6
 801cfa0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cfa4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801cfa8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cfac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cfb0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cfb4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cfb8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cfbc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cfc0:	ee12 2a90 	vmov	r2, s5
 801cfc4:	eef0 2a47 	vmov.f32	s5, s14
 801cfc8:	fb92 f8f3 	sdiv	r8, r2, r3
 801cfcc:	ee13 2a10 	vmov	r2, s6
 801cfd0:	eeb0 3a67 	vmov.f32	s6, s15
 801cfd4:	fb92 fef3 	sdiv	lr, r2, r3
 801cfd8:	9b00      	ldr	r3, [sp, #0]
 801cfda:	3b01      	subs	r3, #1
 801cfdc:	9300      	str	r3, [sp, #0]
 801cfde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cfe0:	bf08      	it	eq
 801cfe2:	465b      	moveq	r3, fp
 801cfe4:	e767      	b.n	801ceb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801cfe6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801cfea:	d423      	bmi.n	801d034 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cfec:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801cff0:	45cc      	cmp	ip, r9
 801cff2:	dd1f      	ble.n	801d034 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cff4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801cff8:	d41c      	bmi.n	801d034 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cffa:	68f1      	ldr	r1, [r6, #12]
 801cffc:	4551      	cmp	r1, sl
 801cffe:	dd19      	ble.n	801d034 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d000:	fa0f fc8c 	sxth.w	ip, ip
 801d004:	9901      	ldr	r1, [sp, #4]
 801d006:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801d00a:	f81c c009 	ldrb.w	ip, [ip, r9]
 801d00e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d012:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801d016:	eb07 090c 	add.w	r9, r7, ip
 801d01a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801d01e:	f804 a00c 	strb.w	sl, [r4, ip]
 801d022:	44a4      	add	ip, r4
 801d024:	f899 a001 	ldrb.w	sl, [r9, #1]
 801d028:	f88c a001 	strb.w	sl, [ip, #1]
 801d02c:	f899 9002 	ldrb.w	r9, [r9, #2]
 801d030:	f88c 9002 	strb.w	r9, [ip, #2]
 801d034:	4440      	add	r0, r8
 801d036:	4472      	add	r2, lr
 801d038:	3501      	adds	r5, #1
 801d03a:	e793      	b.n	801cf64 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801d03c:	b003      	add	sp, #12
 801d03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d042 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d042:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d046:	b085      	sub	sp, #20
 801d048:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d04c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d04e:	9202      	str	r2, [sp, #8]
 801d050:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801d054:	6860      	ldr	r0, [r4, #4]
 801d056:	9203      	str	r2, [sp, #12]
 801d058:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801d05c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801d060:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801d064:	fb00 2505 	mla	r5, r0, r5, r2
 801d068:	6822      	ldr	r2, [r4, #0]
 801d06a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d06e:	4415      	add	r5, r2
 801d070:	f8dc 2000 	ldr.w	r2, [ip]
 801d074:	9200      	str	r2, [sp, #0]
 801d076:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d07a:	3204      	adds	r2, #4
 801d07c:	9201      	str	r2, [sp, #4]
 801d07e:	2900      	cmp	r1, #0
 801d080:	dc03      	bgt.n	801d08a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d082:	9a02      	ldr	r2, [sp, #8]
 801d084:	2a00      	cmp	r2, #0
 801d086:	f340 8127 	ble.w	801d2d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801d08a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d08c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d090:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d094:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d096:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d09a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	dd0d      	ble.n	801d0be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d0a2:	1422      	asrs	r2, r4, #16
 801d0a4:	d405      	bmi.n	801d0b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d0a6:	4542      	cmp	r2, r8
 801d0a8:	da03      	bge.n	801d0b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d0aa:	1402      	asrs	r2, r0, #16
 801d0ac:	d401      	bmi.n	801d0b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d0ae:	42ba      	cmp	r2, r7
 801d0b0:	db06      	blt.n	801d0c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d0b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d0b4:	4474      	add	r4, lr
 801d0b6:	3b01      	subs	r3, #1
 801d0b8:	3503      	adds	r5, #3
 801d0ba:	4410      	add	r0, r2
 801d0bc:	e7ef      	b.n	801d09e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d0be:	d075      	beq.n	801d1ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801d0c0:	1e5a      	subs	r2, r3, #1
 801d0c2:	fb0e 4602 	mla	r6, lr, r2, r4
 801d0c6:	1436      	asrs	r6, r6, #16
 801d0c8:	d465      	bmi.n	801d196 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d0ca:	4546      	cmp	r6, r8
 801d0cc:	da63      	bge.n	801d196 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d0ce:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d0d0:	fb06 0202 	mla	r2, r6, r2, r0
 801d0d4:	1412      	asrs	r2, r2, #16
 801d0d6:	d45e      	bmi.n	801d196 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d0d8:	42ba      	cmp	r2, r7
 801d0da:	da5c      	bge.n	801d196 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d0dc:	1cef      	adds	r7, r5, #3
 801d0de:	4699      	mov	r9, r3
 801d0e0:	f1b9 0f00 	cmp.w	r9, #0
 801d0e4:	dd5d      	ble.n	801d1a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801d0e6:	1402      	asrs	r2, r0, #16
 801d0e8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d0ec:	1426      	asrs	r6, r4, #16
 801d0ee:	4692      	mov	sl, r2
 801d0f0:	9a00      	ldr	r2, [sp, #0]
 801d0f2:	fb08 220a 	mla	r2, r8, sl, r2
 801d0f6:	5d92      	ldrb	r2, [r2, r6]
 801d0f8:	9e01      	ldr	r6, [sp, #4]
 801d0fa:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801d0fe:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801d102:	d041      	beq.n	801d188 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d104:	9a03      	ldr	r2, [sp, #12]
 801d106:	fa5f fb86 	uxtb.w	fp, r6
 801d10a:	fb02 f808 	mul.w	r8, r2, r8
 801d10e:	f108 0201 	add.w	r2, r8, #1
 801d112:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801d116:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801d11a:	1212      	asrs	r2, r2, #8
 801d11c:	fa1f fa82 	uxth.w	sl, r2
 801d120:	43d2      	mvns	r2, r2
 801d122:	fb1b fb0a 	smulbb	fp, fp, sl
 801d126:	b2d2      	uxtb	r2, r2
 801d128:	fb08 b802 	mla	r8, r8, r2, fp
 801d12c:	fa1f f888 	uxth.w	r8, r8
 801d130:	f108 0b01 	add.w	fp, r8, #1
 801d134:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d138:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801d13c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d140:	fb1b fb0a 	smulbb	fp, fp, sl
 801d144:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d148:	fb16 fa0a 	smulbb	sl, r6, sl
 801d14c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801d150:	f807 8c03 	strb.w	r8, [r7, #-3]
 801d154:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801d158:	fb06 aa02 	mla	sl, r6, r2, sl
 801d15c:	fb08 b802 	mla	r8, r8, r2, fp
 801d160:	fa1f fa8a 	uxth.w	sl, sl
 801d164:	fa1f f888 	uxth.w	r8, r8
 801d168:	f10a 0601 	add.w	r6, sl, #1
 801d16c:	f108 0b01 	add.w	fp, r8, #1
 801d170:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801d174:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d178:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d17c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d180:	f807 ac01 	strb.w	sl, [r7, #-1]
 801d184:	f807 8c02 	strb.w	r8, [r7, #-2]
 801d188:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d18a:	4474      	add	r4, lr
 801d18c:	3703      	adds	r7, #3
 801d18e:	f109 39ff 	add.w	r9, r9, #4294967295
 801d192:	4410      	add	r0, r2
 801d194:	e7a4      	b.n	801d0e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d196:	f04f 0800 	mov.w	r8, #0
 801d19a:	eba3 0208 	sub.w	r2, r3, r8
 801d19e:	2a00      	cmp	r2, #0
 801d1a0:	dc3b      	bgt.n	801d21a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801d1a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d1a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1aa:	441d      	add	r5, r3
 801d1ac:	2900      	cmp	r1, #0
 801d1ae:	f340 8093 	ble.w	801d2d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801d1b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d1b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d1b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d1bc:	3901      	subs	r1, #1
 801d1be:	eeb0 6a62 	vmov.f32	s12, s5
 801d1c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d1c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d1ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d1ce:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d1d2:	eeb0 6a43 	vmov.f32	s12, s6
 801d1d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d1da:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d1de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d1e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d1e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d1ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d1ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d1f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d1f6:	ee12 2a90 	vmov	r2, s5
 801d1fa:	eef0 2a47 	vmov.f32	s5, s14
 801d1fe:	fb92 fef3 	sdiv	lr, r2, r3
 801d202:	ee13 2a10 	vmov	r2, s6
 801d206:	eeb0 3a67 	vmov.f32	s6, s15
 801d20a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d20e:	9a02      	ldr	r2, [sp, #8]
 801d210:	9312      	str	r3, [sp, #72]	; 0x48
 801d212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d214:	bf08      	it	eq
 801d216:	4613      	moveq	r3, r2
 801d218:	e731      	b.n	801d07e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d21a:	1427      	asrs	r7, r4, #16
 801d21c:	d456      	bmi.n	801d2cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d21e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d222:	42be      	cmp	r6, r7
 801d224:	dd52      	ble.n	801d2cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d226:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d22a:	d44f      	bmi.n	801d2cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d22c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d230:	454a      	cmp	r2, r9
 801d232:	dd4b      	ble.n	801d2cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d234:	9a00      	ldr	r2, [sp, #0]
 801d236:	b236      	sxth	r6, r6
 801d238:	fb09 2606 	mla	r6, r9, r6, r2
 801d23c:	5df2      	ldrb	r2, [r6, r7]
 801d23e:	9e01      	ldr	r6, [sp, #4]
 801d240:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801d244:	0e3a      	lsrs	r2, r7, #24
 801d246:	d041      	beq.n	801d2cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d248:	9e03      	ldr	r6, [sp, #12]
 801d24a:	fa5f fb87 	uxtb.w	fp, r7
 801d24e:	4372      	muls	r2, r6
 801d250:	1c56      	adds	r6, r2, #1
 801d252:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d256:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801d25a:	1212      	asrs	r2, r2, #8
 801d25c:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d260:	fa1f fa82 	uxth.w	sl, r2
 801d264:	43d2      	mvns	r2, r2
 801d266:	fb1b fb0a 	smulbb	fp, fp, sl
 801d26a:	b2d2      	uxtb	r2, r2
 801d26c:	fb09 b902 	mla	r9, r9, r2, fp
 801d270:	fa1f f989 	uxth.w	r9, r9
 801d274:	f109 0b01 	add.w	fp, r9, #1
 801d278:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d27c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d280:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d284:	fb1b fb0a 	smulbb	fp, fp, sl
 801d288:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d28c:	fb17 fa0a 	smulbb	sl, r7, sl
 801d290:	f805 9006 	strb.w	r9, [r5, r6]
 801d294:	442e      	add	r6, r5
 801d296:	78b7      	ldrb	r7, [r6, #2]
 801d298:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d29c:	fb07 aa02 	mla	sl, r7, r2, sl
 801d2a0:	fb09 b902 	mla	r9, r9, r2, fp
 801d2a4:	fa1f fa8a 	uxth.w	sl, sl
 801d2a8:	fa1f f989 	uxth.w	r9, r9
 801d2ac:	f10a 0701 	add.w	r7, sl, #1
 801d2b0:	f109 0b01 	add.w	fp, r9, #1
 801d2b4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d2b8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d2bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d2c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d2c4:	f886 a002 	strb.w	sl, [r6, #2]
 801d2c8:	f886 9001 	strb.w	r9, [r6, #1]
 801d2cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d2ce:	4474      	add	r4, lr
 801d2d0:	f108 0801 	add.w	r8, r8, #1
 801d2d4:	4410      	add	r0, r2
 801d2d6:	e760      	b.n	801d19a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801d2d8:	b005      	add	sp, #20
 801d2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d2de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d2de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2e2:	b085      	sub	sp, #20
 801d2e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d2e8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d2ea:	9203      	str	r2, [sp, #12]
 801d2ec:	6868      	ldr	r0, [r5, #4]
 801d2ee:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801d2f2:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801d2f6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d2fa:	fb00 2404 	mla	r4, r0, r4, r2
 801d2fe:	682a      	ldr	r2, [r5, #0]
 801d300:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d304:	4414      	add	r4, r2
 801d306:	f8dc 2000 	ldr.w	r2, [ip]
 801d30a:	9201      	str	r2, [sp, #4]
 801d30c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d310:	3204      	adds	r2, #4
 801d312:	9202      	str	r2, [sp, #8]
 801d314:	2900      	cmp	r1, #0
 801d316:	dc03      	bgt.n	801d320 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801d318:	9a03      	ldr	r2, [sp, #12]
 801d31a:	2a00      	cmp	r2, #0
 801d31c:	f340 8137 	ble.w	801d58e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d320:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d322:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d326:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d32a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d32c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d330:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d334:	2b00      	cmp	r3, #0
 801d336:	dd0d      	ble.n	801d354 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d338:	1405      	asrs	r5, r0, #16
 801d33a:	d405      	bmi.n	801d348 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d33c:	4545      	cmp	r5, r8
 801d33e:	da03      	bge.n	801d348 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d340:	1415      	asrs	r5, r2, #16
 801d342:	d401      	bmi.n	801d348 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d344:	42bd      	cmp	r5, r7
 801d346:	db06      	blt.n	801d356 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d348:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d34a:	4470      	add	r0, lr
 801d34c:	3b01      	subs	r3, #1
 801d34e:	3403      	adds	r4, #3
 801d350:	442a      	add	r2, r5
 801d352:	e7ef      	b.n	801d334 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801d354:	d070      	beq.n	801d438 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801d356:	1e5d      	subs	r5, r3, #1
 801d358:	fb0e 0605 	mla	r6, lr, r5, r0
 801d35c:	1436      	asrs	r6, r6, #16
 801d35e:	d462      	bmi.n	801d426 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801d360:	4546      	cmp	r6, r8
 801d362:	da60      	bge.n	801d426 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801d364:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d366:	fb06 2505 	mla	r5, r6, r5, r2
 801d36a:	142d      	asrs	r5, r5, #16
 801d36c:	d45b      	bmi.n	801d426 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801d36e:	42bd      	cmp	r5, r7
 801d370:	da59      	bge.n	801d426 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801d372:	1ce5      	adds	r5, r4, #3
 801d374:	469a      	mov	sl, r3
 801d376:	f1ba 0f00 	cmp.w	sl, #0
 801d37a:	dd58      	ble.n	801d42e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801d37c:	1416      	asrs	r6, r2, #16
 801d37e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d382:	1407      	asrs	r7, r0, #16
 801d384:	46b1      	mov	r9, r6
 801d386:	9e01      	ldr	r6, [sp, #4]
 801d388:	fb08 6609 	mla	r6, r8, r9, r6
 801d38c:	5df6      	ldrb	r6, [r6, r7]
 801d38e:	9f02      	ldr	r7, [sp, #8]
 801d390:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801d394:	0e37      	lsrs	r7, r6, #24
 801d396:	2fff      	cmp	r7, #255	; 0xff
 801d398:	f000 80f0 	beq.w	801d57c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801d39c:	fa5f f887 	uxtb.w	r8, r7
 801d3a0:	b3d7      	cbz	r7, 801d418 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d3a2:	fa1f f788 	uxth.w	r7, r8
 801d3a6:	ea6f 0808 	mvn.w	r8, r8
 801d3aa:	fa5f fb86 	uxtb.w	fp, r6
 801d3ae:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801d3b2:	fa5f f888 	uxtb.w	r8, r8
 801d3b6:	fb1b fb07 	smulbb	fp, fp, r7
 801d3ba:	fb09 b908 	mla	r9, r9, r8, fp
 801d3be:	fa1f f989 	uxth.w	r9, r9
 801d3c2:	f109 0b01 	add.w	fp, r9, #1
 801d3c6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d3ca:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801d3ce:	fb1b fb08 	smulbb	fp, fp, r8
 801d3d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d3d6:	f805 9c03 	strb.w	r9, [r5, #-3]
 801d3da:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801d3de:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d3e2:	fb09 b907 	mla	r9, r9, r7, fp
 801d3e6:	fa1f f989 	uxth.w	r9, r9
 801d3ea:	f109 0b01 	add.w	fp, r9, #1
 801d3ee:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d3f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d3f6:	f805 9c02 	strb.w	r9, [r5, #-2]
 801d3fa:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801d3fe:	fb19 f808 	smulbb	r8, r9, r8
 801d402:	fb06 8607 	mla	r6, r6, r7, r8
 801d406:	b2b6      	uxth	r6, r6
 801d408:	f106 0801 	add.w	r8, r6, #1
 801d40c:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801d410:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d414:	f805 8c01 	strb.w	r8, [r5, #-1]
 801d418:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d41a:	4470      	add	r0, lr
 801d41c:	3503      	adds	r5, #3
 801d41e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d422:	4432      	add	r2, r6
 801d424:	e7a7      	b.n	801d376 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d426:	2600      	movs	r6, #0
 801d428:	1b9d      	subs	r5, r3, r6
 801d42a:	2d00      	cmp	r5, #0
 801d42c:	dc3b      	bgt.n	801d4a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d42e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d432:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d436:	441c      	add	r4, r3
 801d438:	2900      	cmp	r1, #0
 801d43a:	f340 80a8 	ble.w	801d58e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d43e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d442:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d444:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d448:	3901      	subs	r1, #1
 801d44a:	eeb0 6a62 	vmov.f32	s12, s5
 801d44e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d452:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d456:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d45a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d45e:	eeb0 6a43 	vmov.f32	s12, s6
 801d462:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d466:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d46a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d46e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d472:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d476:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d47a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d47e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d482:	ee12 2a90 	vmov	r2, s5
 801d486:	eef0 2a47 	vmov.f32	s5, s14
 801d48a:	fb92 fef3 	sdiv	lr, r2, r3
 801d48e:	ee13 2a10 	vmov	r2, s6
 801d492:	eeb0 3a67 	vmov.f32	s6, s15
 801d496:	fb92 f3f3 	sdiv	r3, r2, r3
 801d49a:	9a03      	ldr	r2, [sp, #12]
 801d49c:	9312      	str	r3, [sp, #72]	; 0x48
 801d49e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d4a0:	bf08      	it	eq
 801d4a2:	4613      	moveq	r3, r2
 801d4a4:	e736      	b.n	801d314 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d4a6:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d4aa:	d457      	bmi.n	801d55c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d4ac:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801d4b0:	4547      	cmp	r7, r8
 801d4b2:	dd53      	ble.n	801d55c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d4b4:	ea5f 4922 	movs.w	r9, r2, asr #16
 801d4b8:	d450      	bmi.n	801d55c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d4ba:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801d4be:	454d      	cmp	r5, r9
 801d4c0:	dd4c      	ble.n	801d55c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d4c2:	9d01      	ldr	r5, [sp, #4]
 801d4c4:	b23f      	sxth	r7, r7
 801d4c6:	fb09 5707 	mla	r7, r9, r7, r5
 801d4ca:	f817 5008 	ldrb.w	r5, [r7, r8]
 801d4ce:	9f02      	ldr	r7, [sp, #8]
 801d4d0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801d4d4:	0e2f      	lsrs	r7, r5, #24
 801d4d6:	2fff      	cmp	r7, #255	; 0xff
 801d4d8:	d045      	beq.n	801d566 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801d4da:	fa5f f987 	uxtb.w	r9, r7
 801d4de:	b3ef      	cbz	r7, 801d55c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d4e0:	fa1f f889 	uxth.w	r8, r9
 801d4e4:	ea6f 0909 	mvn.w	r9, r9
 801d4e8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801d4ec:	fa5f fb85 	uxtb.w	fp, r5
 801d4f0:	f814 a007 	ldrb.w	sl, [r4, r7]
 801d4f4:	fa5f f989 	uxtb.w	r9, r9
 801d4f8:	fb1b fb08 	smulbb	fp, fp, r8
 801d4fc:	fb0a ba09 	mla	sl, sl, r9, fp
 801d500:	fa1f fa8a 	uxth.w	sl, sl
 801d504:	f10a 0b01 	add.w	fp, sl, #1
 801d508:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801d50c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d510:	f804 a007 	strb.w	sl, [r4, r7]
 801d514:	4427      	add	r7, r4
 801d516:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d51a:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801d51e:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d522:	fb1b fb09 	smulbb	fp, fp, r9
 801d526:	fb0a ba08 	mla	sl, sl, r8, fp
 801d52a:	fa1f fa8a 	uxth.w	sl, sl
 801d52e:	f10a 0b01 	add.w	fp, sl, #1
 801d532:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801d536:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d53a:	f887 a001 	strb.w	sl, [r7, #1]
 801d53e:	f897 a002 	ldrb.w	sl, [r7, #2]
 801d542:	fb1a f909 	smulbb	r9, sl, r9
 801d546:	fb05 9508 	mla	r5, r5, r8, r9
 801d54a:	b2ad      	uxth	r5, r5
 801d54c:	f105 0901 	add.w	r9, r5, #1
 801d550:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801d554:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d558:	f887 9002 	strb.w	r9, [r7, #2]
 801d55c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d55e:	4470      	add	r0, lr
 801d560:	3601      	adds	r6, #1
 801d562:	442a      	add	r2, r5
 801d564:	e760      	b.n	801d428 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801d566:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801d56a:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801d56e:	55e5      	strb	r5, [r4, r7]
 801d570:	4427      	add	r7, r4
 801d572:	0c2d      	lsrs	r5, r5, #16
 801d574:	f887 8001 	strb.w	r8, [r7, #1]
 801d578:	70bd      	strb	r5, [r7, #2]
 801d57a:	e7ef      	b.n	801d55c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d57c:	0a37      	lsrs	r7, r6, #8
 801d57e:	f805 6c03 	strb.w	r6, [r5, #-3]
 801d582:	0c36      	lsrs	r6, r6, #16
 801d584:	f805 7c02 	strb.w	r7, [r5, #-2]
 801d588:	f805 6c01 	strb.w	r6, [r5, #-1]
 801d58c:	e744      	b.n	801d418 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d58e:	b005      	add	sp, #20
 801d590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d594 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d598:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d59a:	9201      	str	r2, [sp, #4]
 801d59c:	6870      	ldr	r0, [r6, #4]
 801d59e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801d5a2:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801d5a6:	fa1f fe85 	uxth.w	lr, r5
 801d5aa:	43ed      	mvns	r5, r5
 801d5ac:	f8dc 8000 	ldr.w	r8, [ip]
 801d5b0:	b2ed      	uxtb	r5, r5
 801d5b2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801d5b6:	fb00 2404 	mla	r4, r0, r4, r2
 801d5ba:	6832      	ldr	r2, [r6, #0]
 801d5bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d5c0:	4414      	add	r4, r2
 801d5c2:	2900      	cmp	r1, #0
 801d5c4:	dc03      	bgt.n	801d5ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d5c6:	9a01      	ldr	r2, [sp, #4]
 801d5c8:	2a00      	cmp	r2, #0
 801d5ca:	f340 810d 	ble.w	801d7e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801d5ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d5d0:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801d5d4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d5d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d5da:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801d5de:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	dd0e      	ble.n	801d604 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d5e6:	1406      	asrs	r6, r0, #16
 801d5e8:	d405      	bmi.n	801d5f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d5ea:	4556      	cmp	r6, sl
 801d5ec:	da03      	bge.n	801d5f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d5ee:	1416      	asrs	r6, r2, #16
 801d5f0:	d401      	bmi.n	801d5f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d5f2:	454e      	cmp	r6, r9
 801d5f4:	db07      	blt.n	801d606 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d5f6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d5f8:	3b01      	subs	r3, #1
 801d5fa:	3403      	adds	r4, #3
 801d5fc:	4430      	add	r0, r6
 801d5fe:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d600:	4432      	add	r2, r6
 801d602:	e7ee      	b.n	801d5e2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801d604:	d060      	beq.n	801d6c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801d606:	1e5e      	subs	r6, r3, #1
 801d608:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d60a:	fb07 0706 	mla	r7, r7, r6, r0
 801d60e:	143f      	asrs	r7, r7, #16
 801d610:	d451      	bmi.n	801d6b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d612:	4557      	cmp	r7, sl
 801d614:	da4f      	bge.n	801d6b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d616:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d618:	fb07 2606 	mla	r6, r7, r6, r2
 801d61c:	1436      	asrs	r6, r6, #16
 801d61e:	d44a      	bmi.n	801d6b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d620:	454e      	cmp	r6, r9
 801d622:	da48      	bge.n	801d6b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d624:	1ce6      	adds	r6, r4, #3
 801d626:	4699      	mov	r9, r3
 801d628:	f1b9 0f00 	cmp.w	r9, #0
 801d62c:	f106 0603 	add.w	r6, r6, #3
 801d630:	dd45      	ble.n	801d6be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801d632:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801d636:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801d63a:	1417      	asrs	r7, r2, #16
 801d63c:	f109 39ff 	add.w	r9, r9, #4294967295
 801d640:	fb0b a707 	mla	r7, fp, r7, sl
 801d644:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801d648:	fb1b fb05 	smulbb	fp, fp, r5
 801d64c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d650:	eb08 0a07 	add.w	sl, r8, r7
 801d654:	f818 7007 	ldrb.w	r7, [r8, r7]
 801d658:	fb07 b70e 	mla	r7, r7, lr, fp
 801d65c:	b2bf      	uxth	r7, r7
 801d65e:	f107 0b01 	add.w	fp, r7, #1
 801d662:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801d666:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801d66a:	fb1b fb05 	smulbb	fp, fp, r5
 801d66e:	123f      	asrs	r7, r7, #8
 801d670:	f806 7c06 	strb.w	r7, [r6, #-6]
 801d674:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801d678:	fb07 b70e 	mla	r7, r7, lr, fp
 801d67c:	b2bf      	uxth	r7, r7
 801d67e:	f107 0b01 	add.w	fp, r7, #1
 801d682:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801d686:	123f      	asrs	r7, r7, #8
 801d688:	f806 7c05 	strb.w	r7, [r6, #-5]
 801d68c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801d690:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801d694:	fb1a fa05 	smulbb	sl, sl, r5
 801d698:	fb07 a70e 	mla	r7, r7, lr, sl
 801d69c:	b2bf      	uxth	r7, r7
 801d69e:	f107 0a01 	add.w	sl, r7, #1
 801d6a2:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801d6a6:	123f      	asrs	r7, r7, #8
 801d6a8:	f806 7c04 	strb.w	r7, [r6, #-4]
 801d6ac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d6ae:	4438      	add	r0, r7
 801d6b0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d6b2:	443a      	add	r2, r7
 801d6b4:	e7b8      	b.n	801d628 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d6b6:	2700      	movs	r7, #0
 801d6b8:	1bde      	subs	r6, r3, r7
 801d6ba:	2e00      	cmp	r6, #0
 801d6bc:	dc3f      	bgt.n	801d73e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801d6be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d6c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d6c6:	441c      	add	r4, r3
 801d6c8:	2900      	cmp	r1, #0
 801d6ca:	f340 808d 	ble.w	801d7e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801d6ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d6d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d6d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d6d8:	3901      	subs	r1, #1
 801d6da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d6de:	eef0 6a62 	vmov.f32	s13, s5
 801d6e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d6e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d6ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d6ee:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801d6f2:	eef0 6a43 	vmov.f32	s13, s6
 801d6f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d6fa:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801d6fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d702:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d706:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d70a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d70e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d712:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d716:	ee12 2a90 	vmov	r2, s5
 801d71a:	eef0 2a47 	vmov.f32	s5, s14
 801d71e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d722:	ee13 2a10 	vmov	r2, s6
 801d726:	930f      	str	r3, [sp, #60]	; 0x3c
 801d728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d72a:	eeb0 3a67 	vmov.f32	s6, s15
 801d72e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d732:	9a01      	ldr	r2, [sp, #4]
 801d734:	9310      	str	r3, [sp, #64]	; 0x40
 801d736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d738:	bf08      	it	eq
 801d73a:	4613      	moveq	r3, r2
 801d73c:	e741      	b.n	801d5c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d73e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d742:	d44b      	bmi.n	801d7dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d744:	f8dc b008 	ldr.w	fp, [ip, #8]
 801d748:	45cb      	cmp	fp, r9
 801d74a:	dd47      	ble.n	801d7dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d74c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d750:	d444      	bmi.n	801d7dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d752:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801d756:	4556      	cmp	r6, sl
 801d758:	dd40      	ble.n	801d7dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d75a:	fa0f f68b 	sxth.w	r6, fp
 801d75e:	fb0a 9906 	mla	r9, sl, r6, r9
 801d762:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801d766:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d76a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801d76e:	fb1b fb05 	smulbb	fp, fp, r5
 801d772:	eb08 0a09 	add.w	sl, r8, r9
 801d776:	f818 9009 	ldrb.w	r9, [r8, r9]
 801d77a:	fb09 b90e 	mla	r9, r9, lr, fp
 801d77e:	fa1f f989 	uxth.w	r9, r9
 801d782:	f109 0b01 	add.w	fp, r9, #1
 801d786:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d78a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d78e:	f804 9006 	strb.w	r9, [r4, r6]
 801d792:	4426      	add	r6, r4
 801d794:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801d798:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d79c:	fb1b fb05 	smulbb	fp, fp, r5
 801d7a0:	fb09 b90e 	mla	r9, r9, lr, fp
 801d7a4:	fa1f f989 	uxth.w	r9, r9
 801d7a8:	f109 0b01 	add.w	fp, r9, #1
 801d7ac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d7b0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d7b4:	f886 9001 	strb.w	r9, [r6, #1]
 801d7b8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801d7bc:	f896 a002 	ldrb.w	sl, [r6, #2]
 801d7c0:	fb1a fa05 	smulbb	sl, sl, r5
 801d7c4:	fb09 a90e 	mla	r9, r9, lr, sl
 801d7c8:	fa1f f989 	uxth.w	r9, r9
 801d7cc:	f109 0a01 	add.w	sl, r9, #1
 801d7d0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801d7d4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d7d8:	f886 9002 	strb.w	r9, [r6, #2]
 801d7dc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d7de:	3701      	adds	r7, #1
 801d7e0:	4430      	add	r0, r6
 801d7e2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d7e4:	4432      	add	r2, r6
 801d7e6:	e767      	b.n	801d6b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801d7e8:	b003      	add	sp, #12
 801d7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d7ee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d7ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7f2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d7f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d7f8:	9201      	str	r2, [sp, #4]
 801d7fa:	6868      	ldr	r0, [r5, #4]
 801d7fc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801d7fe:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801d802:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801d806:	fb00 2404 	mla	r4, r0, r4, r2
 801d80a:	682a      	ldr	r2, [r5, #0]
 801d80c:	f8d7 8000 	ldr.w	r8, [r7]
 801d810:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d814:	4414      	add	r4, r2
 801d816:	2900      	cmp	r1, #0
 801d818:	dc03      	bgt.n	801d822 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801d81a:	9a01      	ldr	r2, [sp, #4]
 801d81c:	2a00      	cmp	r2, #0
 801d81e:	f340 80af 	ble.w	801d980 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801d822:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d824:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801d828:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d82c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d82e:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801d832:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d836:	2b00      	cmp	r3, #0
 801d838:	dd0c      	ble.n	801d854 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d83a:	1405      	asrs	r5, r0, #16
 801d83c:	d405      	bmi.n	801d84a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d83e:	4555      	cmp	r5, sl
 801d840:	da03      	bge.n	801d84a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d842:	1415      	asrs	r5, r2, #16
 801d844:	d401      	bmi.n	801d84a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d846:	454d      	cmp	r5, r9
 801d848:	db05      	blt.n	801d856 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d84a:	4470      	add	r0, lr
 801d84c:	4462      	add	r2, ip
 801d84e:	3b01      	subs	r3, #1
 801d850:	3403      	adds	r4, #3
 801d852:	e7f0      	b.n	801d836 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d854:	d038      	beq.n	801d8c8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801d856:	1e5d      	subs	r5, r3, #1
 801d858:	fb0e 0605 	mla	r6, lr, r5, r0
 801d85c:	1436      	asrs	r6, r6, #16
 801d85e:	d42a      	bmi.n	801d8b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801d860:	4556      	cmp	r6, sl
 801d862:	da28      	bge.n	801d8b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801d864:	fb0c 2505 	mla	r5, ip, r5, r2
 801d868:	142d      	asrs	r5, r5, #16
 801d86a:	d424      	bmi.n	801d8b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801d86c:	454d      	cmp	r5, r9
 801d86e:	da22      	bge.n	801d8b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801d870:	1ce6      	adds	r6, r4, #3
 801d872:	4699      	mov	r9, r3
 801d874:	f1b9 0f00 	cmp.w	r9, #0
 801d878:	f106 0603 	add.w	r6, r6, #3
 801d87c:	dd1f      	ble.n	801d8be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801d87e:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801d882:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801d886:	1415      	asrs	r5, r2, #16
 801d888:	4470      	add	r0, lr
 801d88a:	4462      	add	r2, ip
 801d88c:	f109 39ff 	add.w	r9, r9, #4294967295
 801d890:	fb0b a505 	mla	r5, fp, r5, sl
 801d894:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d898:	eb08 0a05 	add.w	sl, r8, r5
 801d89c:	f818 5005 	ldrb.w	r5, [r8, r5]
 801d8a0:	f806 5c06 	strb.w	r5, [r6, #-6]
 801d8a4:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801d8a8:	f806 5c05 	strb.w	r5, [r6, #-5]
 801d8ac:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801d8b0:	f806 5c04 	strb.w	r5, [r6, #-4]
 801d8b4:	e7de      	b.n	801d874 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d8b6:	2600      	movs	r6, #0
 801d8b8:	1b9d      	subs	r5, r3, r6
 801d8ba:	2d00      	cmp	r5, #0
 801d8bc:	dc38      	bgt.n	801d930 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d8be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d8c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d8c6:	441c      	add	r4, r3
 801d8c8:	2900      	cmp	r1, #0
 801d8ca:	dd59      	ble.n	801d980 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801d8cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d8d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d8d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d8d6:	3901      	subs	r1, #1
 801d8d8:	eeb0 6a62 	vmov.f32	s12, s5
 801d8dc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d8e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d8e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d8e8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801d8ec:	eeb0 6a43 	vmov.f32	s12, s6
 801d8f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d8f4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801d8f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d8fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d900:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d904:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d908:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d90c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d910:	ee12 2a90 	vmov	r2, s5
 801d914:	eef0 2a47 	vmov.f32	s5, s14
 801d918:	fb92 fef3 	sdiv	lr, r2, r3
 801d91c:	ee13 2a10 	vmov	r2, s6
 801d920:	eeb0 3a67 	vmov.f32	s6, s15
 801d924:	fb92 fcf3 	sdiv	ip, r2, r3
 801d928:	9a01      	ldr	r2, [sp, #4]
 801d92a:	bf08      	it	eq
 801d92c:	4613      	moveq	r3, r2
 801d92e:	e772      	b.n	801d816 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801d930:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d934:	d420      	bmi.n	801d978 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801d936:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801d93a:	45cb      	cmp	fp, r9
 801d93c:	dd1c      	ble.n	801d978 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801d93e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d942:	d419      	bmi.n	801d978 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801d944:	68fd      	ldr	r5, [r7, #12]
 801d946:	4555      	cmp	r5, sl
 801d948:	dd16      	ble.n	801d978 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801d94a:	fa0f f58b 	sxth.w	r5, fp
 801d94e:	fb0a 9505 	mla	r5, sl, r5, r9
 801d952:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d956:	f818 9005 	ldrb.w	r9, [r8, r5]
 801d95a:	eb08 0b05 	add.w	fp, r8, r5
 801d95e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801d962:	f804 9005 	strb.w	r9, [r4, r5]
 801d966:	4425      	add	r5, r4
 801d968:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801d96c:	f885 9001 	strb.w	r9, [r5, #1]
 801d970:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801d974:	f885 9002 	strb.w	r9, [r5, #2]
 801d978:	4470      	add	r0, lr
 801d97a:	4462      	add	r2, ip
 801d97c:	3601      	adds	r6, #1
 801d97e:	e79b      	b.n	801d8b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801d980:	b003      	add	sp, #12
 801d982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d986 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d986:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d98a:	b085      	sub	sp, #20
 801d98c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d990:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d992:	9202      	str	r2, [sp, #8]
 801d994:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801d998:	6860      	ldr	r0, [r4, #4]
 801d99a:	9203      	str	r2, [sp, #12]
 801d99c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801d9a0:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801d9a4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801d9a8:	fb00 2505 	mla	r5, r0, r5, r2
 801d9ac:	6822      	ldr	r2, [r4, #0]
 801d9ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d9b2:	4415      	add	r5, r2
 801d9b4:	f8dc 2000 	ldr.w	r2, [ip]
 801d9b8:	9201      	str	r2, [sp, #4]
 801d9ba:	2900      	cmp	r1, #0
 801d9bc:	dc03      	bgt.n	801d9c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d9be:	9a02      	ldr	r2, [sp, #8]
 801d9c0:	2a00      	cmp	r2, #0
 801d9c2:	f340 8122 	ble.w	801dc0a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801d9c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d9c8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d9cc:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d9d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d9d2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d9d6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d9da:	2b00      	cmp	r3, #0
 801d9dc:	dd0d      	ble.n	801d9fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d9de:	1422      	asrs	r2, r4, #16
 801d9e0:	d405      	bmi.n	801d9ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d9e2:	4542      	cmp	r2, r8
 801d9e4:	da03      	bge.n	801d9ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d9e6:	1402      	asrs	r2, r0, #16
 801d9e8:	d401      	bmi.n	801d9ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d9ea:	42ba      	cmp	r2, r7
 801d9ec:	db06      	blt.n	801d9fc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d9ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d9f0:	4474      	add	r4, lr
 801d9f2:	3b01      	subs	r3, #1
 801d9f4:	3503      	adds	r5, #3
 801d9f6:	4410      	add	r0, r2
 801d9f8:	e7ef      	b.n	801d9da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801d9fa:	d072      	beq.n	801dae2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801d9fc:	1e5a      	subs	r2, r3, #1
 801d9fe:	fb0e 4602 	mla	r6, lr, r2, r4
 801da02:	1436      	asrs	r6, r6, #16
 801da04:	d462      	bmi.n	801dacc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801da06:	4546      	cmp	r6, r8
 801da08:	da60      	bge.n	801dacc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801da0a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801da0c:	fb06 0202 	mla	r2, r6, r2, r0
 801da10:	1412      	asrs	r2, r2, #16
 801da12:	d45b      	bmi.n	801dacc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801da14:	42ba      	cmp	r2, r7
 801da16:	da59      	bge.n	801dacc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801da18:	1cef      	adds	r7, r5, #3
 801da1a:	4699      	mov	r9, r3
 801da1c:	f1b9 0f00 	cmp.w	r9, #0
 801da20:	dd5a      	ble.n	801dad8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801da22:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801da26:	1426      	asrs	r6, r4, #16
 801da28:	1402      	asrs	r2, r0, #16
 801da2a:	fb08 6202 	mla	r2, r8, r2, r6
 801da2e:	9e01      	ldr	r6, [sp, #4]
 801da30:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801da34:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801da38:	d041      	beq.n	801dabe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801da3a:	9a03      	ldr	r2, [sp, #12]
 801da3c:	fa5f fb86 	uxtb.w	fp, r6
 801da40:	fb02 f808 	mul.w	r8, r2, r8
 801da44:	f108 0201 	add.w	r2, r8, #1
 801da48:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801da4c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801da50:	1212      	asrs	r2, r2, #8
 801da52:	fa1f fa82 	uxth.w	sl, r2
 801da56:	43d2      	mvns	r2, r2
 801da58:	fb1b fb0a 	smulbb	fp, fp, sl
 801da5c:	b2d2      	uxtb	r2, r2
 801da5e:	fb08 b802 	mla	r8, r8, r2, fp
 801da62:	fa1f f888 	uxth.w	r8, r8
 801da66:	f108 0b01 	add.w	fp, r8, #1
 801da6a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801da6e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801da72:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801da76:	fb1b fb0a 	smulbb	fp, fp, sl
 801da7a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801da7e:	fb16 fa0a 	smulbb	sl, r6, sl
 801da82:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801da86:	f807 8c03 	strb.w	r8, [r7, #-3]
 801da8a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801da8e:	fb06 aa02 	mla	sl, r6, r2, sl
 801da92:	fb08 b802 	mla	r8, r8, r2, fp
 801da96:	fa1f fa8a 	uxth.w	sl, sl
 801da9a:	fa1f f888 	uxth.w	r8, r8
 801da9e:	f10a 0601 	add.w	r6, sl, #1
 801daa2:	f108 0b01 	add.w	fp, r8, #1
 801daa6:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801daaa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801daae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dab2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dab6:	f807 ac01 	strb.w	sl, [r7, #-1]
 801daba:	f807 8c02 	strb.w	r8, [r7, #-2]
 801dabe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dac0:	4474      	add	r4, lr
 801dac2:	3703      	adds	r7, #3
 801dac4:	f109 39ff 	add.w	r9, r9, #4294967295
 801dac8:	4410      	add	r0, r2
 801daca:	e7a7      	b.n	801da1c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801dacc:	f04f 0800 	mov.w	r8, #0
 801dad0:	eba3 0208 	sub.w	r2, r3, r8
 801dad4:	2a00      	cmp	r2, #0
 801dad6:	dc3b      	bgt.n	801db50 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801dad8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dadc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dae0:	441d      	add	r5, r3
 801dae2:	2900      	cmp	r1, #0
 801dae4:	f340 8091 	ble.w	801dc0a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801dae8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801daec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801daee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801daf2:	3901      	subs	r1, #1
 801daf4:	eeb0 6a62 	vmov.f32	s12, s5
 801daf8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dafc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801db00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db04:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801db08:	eeb0 6a43 	vmov.f32	s12, s6
 801db0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db10:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801db14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801db18:	ee61 7a27 	vmul.f32	s15, s2, s15
 801db1c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801db20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801db24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801db28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801db2c:	ee12 2a90 	vmov	r2, s5
 801db30:	eef0 2a47 	vmov.f32	s5, s14
 801db34:	fb92 fef3 	sdiv	lr, r2, r3
 801db38:	ee13 2a10 	vmov	r2, s6
 801db3c:	eeb0 3a67 	vmov.f32	s6, s15
 801db40:	fb92 f3f3 	sdiv	r3, r2, r3
 801db44:	9a02      	ldr	r2, [sp, #8]
 801db46:	9312      	str	r3, [sp, #72]	; 0x48
 801db48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db4a:	bf08      	it	eq
 801db4c:	4613      	moveq	r3, r2
 801db4e:	e734      	b.n	801d9ba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801db50:	1427      	asrs	r7, r4, #16
 801db52:	d454      	bmi.n	801dbfe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801db54:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801db58:	42be      	cmp	r6, r7
 801db5a:	dd50      	ble.n	801dbfe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801db5c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801db60:	d44d      	bmi.n	801dbfe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801db62:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801db66:	454a      	cmp	r2, r9
 801db68:	dd49      	ble.n	801dbfe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801db6a:	b236      	sxth	r6, r6
 801db6c:	9a01      	ldr	r2, [sp, #4]
 801db6e:	fb09 7606 	mla	r6, r9, r6, r7
 801db72:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801db76:	0e3a      	lsrs	r2, r7, #24
 801db78:	d041      	beq.n	801dbfe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801db7a:	9e03      	ldr	r6, [sp, #12]
 801db7c:	fa5f fb87 	uxtb.w	fp, r7
 801db80:	4372      	muls	r2, r6
 801db82:	1c56      	adds	r6, r2, #1
 801db84:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801db88:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801db8c:	1212      	asrs	r2, r2, #8
 801db8e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801db92:	fa1f fa82 	uxth.w	sl, r2
 801db96:	43d2      	mvns	r2, r2
 801db98:	fb1b fb0a 	smulbb	fp, fp, sl
 801db9c:	b2d2      	uxtb	r2, r2
 801db9e:	fb09 b902 	mla	r9, r9, r2, fp
 801dba2:	fa1f f989 	uxth.w	r9, r9
 801dba6:	f109 0b01 	add.w	fp, r9, #1
 801dbaa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dbae:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801dbb2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801dbb6:	fb1b fb0a 	smulbb	fp, fp, sl
 801dbba:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dbbe:	fb17 fa0a 	smulbb	sl, r7, sl
 801dbc2:	f805 9006 	strb.w	r9, [r5, r6]
 801dbc6:	442e      	add	r6, r5
 801dbc8:	78b7      	ldrb	r7, [r6, #2]
 801dbca:	f896 9001 	ldrb.w	r9, [r6, #1]
 801dbce:	fb07 aa02 	mla	sl, r7, r2, sl
 801dbd2:	fb09 b902 	mla	r9, r9, r2, fp
 801dbd6:	fa1f fa8a 	uxth.w	sl, sl
 801dbda:	fa1f f989 	uxth.w	r9, r9
 801dbde:	f10a 0701 	add.w	r7, sl, #1
 801dbe2:	f109 0b01 	add.w	fp, r9, #1
 801dbe6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dbea:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dbee:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dbf2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dbf6:	f886 a002 	strb.w	sl, [r6, #2]
 801dbfa:	f886 9001 	strb.w	r9, [r6, #1]
 801dbfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dc00:	4474      	add	r4, lr
 801dc02:	f108 0801 	add.w	r8, r8, #1
 801dc06:	4410      	add	r0, r2
 801dc08:	e762      	b.n	801dad0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801dc0a:	b005      	add	sp, #20
 801dc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc10 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dc10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc14:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dc16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dc1a:	9201      	str	r2, [sp, #4]
 801dc1c:	6860      	ldr	r0, [r4, #4]
 801dc1e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801dc22:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801dc26:	fb00 2505 	mla	r5, r0, r5, r2
 801dc2a:	6822      	ldr	r2, [r4, #0]
 801dc2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dc30:	4415      	add	r5, r2
 801dc32:	f8dc 2000 	ldr.w	r2, [ip]
 801dc36:	9200      	str	r2, [sp, #0]
 801dc38:	2900      	cmp	r1, #0
 801dc3a:	dc03      	bgt.n	801dc44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801dc3c:	9a01      	ldr	r2, [sp, #4]
 801dc3e:	2a00      	cmp	r2, #0
 801dc40:	f340 812b 	ble.w	801de9a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dc44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dc46:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801dc4a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801dc4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dc50:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801dc54:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801dc58:	2b00      	cmp	r3, #0
 801dc5a:	dd0e      	ble.n	801dc7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dc5c:	1422      	asrs	r2, r4, #16
 801dc5e:	d405      	bmi.n	801dc6c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801dc60:	4572      	cmp	r2, lr
 801dc62:	da03      	bge.n	801dc6c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801dc64:	1402      	asrs	r2, r0, #16
 801dc66:	d401      	bmi.n	801dc6c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801dc68:	42ba      	cmp	r2, r7
 801dc6a:	db07      	blt.n	801dc7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dc6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dc6e:	3b01      	subs	r3, #1
 801dc70:	3503      	adds	r5, #3
 801dc72:	4414      	add	r4, r2
 801dc74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dc76:	4410      	add	r0, r2
 801dc78:	e7ee      	b.n	801dc58 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801dc7a:	d06f      	beq.n	801dd5c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801dc7c:	1e5a      	subs	r2, r3, #1
 801dc7e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801dc80:	fb06 4602 	mla	r6, r6, r2, r4
 801dc84:	1436      	asrs	r6, r6, #16
 801dc86:	d45e      	bmi.n	801dd46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801dc88:	4576      	cmp	r6, lr
 801dc8a:	da5c      	bge.n	801dd46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801dc8c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801dc8e:	fb06 0202 	mla	r2, r6, r2, r0
 801dc92:	1412      	asrs	r2, r2, #16
 801dc94:	d457      	bmi.n	801dd46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801dc96:	42ba      	cmp	r2, r7
 801dc98:	da55      	bge.n	801dd46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801dc9a:	1cee      	adds	r6, r5, #3
 801dc9c:	469a      	mov	sl, r3
 801dc9e:	f1ba 0f00 	cmp.w	sl, #0
 801dca2:	dd56      	ble.n	801dd52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801dca4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801dca8:	1427      	asrs	r7, r4, #16
 801dcaa:	1402      	asrs	r2, r0, #16
 801dcac:	fb0e 7202 	mla	r2, lr, r2, r7
 801dcb0:	9f00      	ldr	r7, [sp, #0]
 801dcb2:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801dcb6:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801dcba:	d03c      	beq.n	801dd36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801dcbc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801dcc0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801dcc4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801dcc8:	fa5f f28e 	uxtb.w	r2, lr
 801dccc:	b2ff      	uxtb	r7, r7
 801dcce:	f000 80dd 	beq.w	801de8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801dcd2:	fa1f f882 	uxth.w	r8, r2
 801dcd6:	43d2      	mvns	r2, r2
 801dcd8:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801dcdc:	fb17 f708 	smulbb	r7, r7, r8
 801dce0:	b2d2      	uxtb	r2, r2
 801dce2:	fb19 f908 	smulbb	r9, r9, r8
 801dce6:	fb0e 7702 	mla	r7, lr, r2, r7
 801dcea:	fb1b f808 	smulbb	r8, fp, r8
 801dcee:	b2bf      	uxth	r7, r7
 801dcf0:	f107 0e01 	add.w	lr, r7, #1
 801dcf4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801dcf8:	123f      	asrs	r7, r7, #8
 801dcfa:	f806 7c03 	strb.w	r7, [r6, #-3]
 801dcfe:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801dd02:	fb07 9902 	mla	r9, r7, r2, r9
 801dd06:	fa1f f989 	uxth.w	r9, r9
 801dd0a:	f109 0701 	add.w	r7, r9, #1
 801dd0e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801dd12:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801dd16:	fb07 8802 	mla	r8, r7, r2, r8
 801dd1a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dd1e:	fa1f f888 	uxth.w	r8, r8
 801dd22:	f806 9c02 	strb.w	r9, [r6, #-2]
 801dd26:	f108 0201 	add.w	r2, r8, #1
 801dd2a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801dd2e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dd32:	f806 8c01 	strb.w	r8, [r6, #-1]
 801dd36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dd38:	3603      	adds	r6, #3
 801dd3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dd3e:	4414      	add	r4, r2
 801dd40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dd42:	4410      	add	r0, r2
 801dd44:	e7ab      	b.n	801dc9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801dd46:	f04f 0e00 	mov.w	lr, #0
 801dd4a:	eba3 020e 	sub.w	r2, r3, lr
 801dd4e:	2a00      	cmp	r2, #0
 801dd50:	dc3d      	bgt.n	801ddce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801dd52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dd56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd5a:	441d      	add	r5, r3
 801dd5c:	2900      	cmp	r1, #0
 801dd5e:	f340 809c 	ble.w	801de9a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dd62:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd68:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd6c:	3901      	subs	r1, #1
 801dd6e:	eeb0 6a62 	vmov.f32	s12, s5
 801dd72:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dd76:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dd7a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd7e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801dd82:	eeb0 6a43 	vmov.f32	s12, s6
 801dd86:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd8a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801dd8e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dd92:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dd96:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dd9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dd9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dda2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dda6:	ee12 2a90 	vmov	r2, s5
 801ddaa:	eef0 2a47 	vmov.f32	s5, s14
 801ddae:	fb92 f3f3 	sdiv	r3, r2, r3
 801ddb2:	ee13 2a10 	vmov	r2, s6
 801ddb6:	930f      	str	r3, [sp, #60]	; 0x3c
 801ddb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ddba:	eeb0 3a67 	vmov.f32	s6, s15
 801ddbe:	fb92 f3f3 	sdiv	r3, r2, r3
 801ddc2:	9a01      	ldr	r2, [sp, #4]
 801ddc4:	9310      	str	r3, [sp, #64]	; 0x40
 801ddc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ddc8:	bf08      	it	eq
 801ddca:	4613      	moveq	r3, r2
 801ddcc:	e734      	b.n	801dc38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801ddce:	1427      	asrs	r7, r4, #16
 801ddd0:	d44d      	bmi.n	801de6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ddd2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ddd6:	42be      	cmp	r6, r7
 801ddd8:	dd49      	ble.n	801de6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ddda:	ea5f 4820 	movs.w	r8, r0, asr #16
 801ddde:	d446      	bmi.n	801de6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801dde0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801dde4:	4542      	cmp	r2, r8
 801dde6:	dd42      	ble.n	801de6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801dde8:	b236      	sxth	r6, r6
 801ddea:	9a00      	ldr	r2, [sp, #0]
 801ddec:	fb08 7606 	mla	r6, r8, r6, r7
 801ddf0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801ddf4:	0e3a      	lsrs	r2, r7, #24
 801ddf6:	d03a      	beq.n	801de6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ddf8:	2aff      	cmp	r2, #255	; 0xff
 801ddfa:	b2d6      	uxtb	r6, r2
 801ddfc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801de00:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801de04:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801de08:	b2ff      	uxtb	r7, r7
 801de0a:	d037      	beq.n	801de7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801de0c:	fa1f f986 	uxth.w	r9, r6
 801de10:	4472      	add	r2, lr
 801de12:	43f6      	mvns	r6, r6
 801de14:	f815 8002 	ldrb.w	r8, [r5, r2]
 801de18:	fb17 f709 	smulbb	r7, r7, r9
 801de1c:	fb1a fa09 	smulbb	sl, sl, r9
 801de20:	b2f6      	uxtb	r6, r6
 801de22:	fb1b f909 	smulbb	r9, fp, r9
 801de26:	fb08 7706 	mla	r7, r8, r6, r7
 801de2a:	b2bf      	uxth	r7, r7
 801de2c:	f107 0801 	add.w	r8, r7, #1
 801de30:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801de34:	123f      	asrs	r7, r7, #8
 801de36:	54af      	strb	r7, [r5, r2]
 801de38:	442a      	add	r2, r5
 801de3a:	7857      	ldrb	r7, [r2, #1]
 801de3c:	fb07 aa06 	mla	sl, r7, r6, sl
 801de40:	fa1f fa8a 	uxth.w	sl, sl
 801de44:	f10a 0701 	add.w	r7, sl, #1
 801de48:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801de4c:	7897      	ldrb	r7, [r2, #2]
 801de4e:	fb07 9906 	mla	r9, r7, r6, r9
 801de52:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801de56:	fa1f f989 	uxth.w	r9, r9
 801de5a:	f882 a001 	strb.w	sl, [r2, #1]
 801de5e:	f109 0601 	add.w	r6, r9, #1
 801de62:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801de66:	ea4f 2929 	mov.w	r9, r9, asr #8
 801de6a:	f882 9002 	strb.w	r9, [r2, #2]
 801de6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801de70:	f10e 0e01 	add.w	lr, lr, #1
 801de74:	4414      	add	r4, r2
 801de76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801de78:	4410      	add	r0, r2
 801de7a:	e766      	b.n	801dd4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801de7c:	4472      	add	r2, lr
 801de7e:	54af      	strb	r7, [r5, r2]
 801de80:	442a      	add	r2, r5
 801de82:	f882 a001 	strb.w	sl, [r2, #1]
 801de86:	f882 b002 	strb.w	fp, [r2, #2]
 801de8a:	e7f0      	b.n	801de6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801de8c:	f806 7c03 	strb.w	r7, [r6, #-3]
 801de90:	f806 9c02 	strb.w	r9, [r6, #-2]
 801de94:	f806 bc01 	strb.w	fp, [r6, #-1]
 801de98:	e74d      	b.n	801dd36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801de9a:	b003      	add	sp, #12
 801de9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dea0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dea4:	b087      	sub	sp, #28
 801dea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801deaa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801deac:	9204      	str	r2, [sp, #16]
 801deae:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801deb2:	6860      	ldr	r0, [r4, #4]
 801deb4:	9205      	str	r2, [sp, #20]
 801deb6:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801deba:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801debe:	9101      	str	r1, [sp, #4]
 801dec0:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801dec4:	fb00 2505 	mla	r5, r0, r5, r2
 801dec8:	6822      	ldr	r2, [r4, #0]
 801deca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dece:	4415      	add	r5, r2
 801ded0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ded4:	3201      	adds	r2, #1
 801ded6:	f022 0201 	bic.w	r2, r2, #1
 801deda:	9202      	str	r2, [sp, #8]
 801dedc:	f8dc 2000 	ldr.w	r2, [ip]
 801dee0:	9203      	str	r2, [sp, #12]
 801dee2:	9a01      	ldr	r2, [sp, #4]
 801dee4:	2a00      	cmp	r2, #0
 801dee6:	dc03      	bgt.n	801def0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801dee8:	9a04      	ldr	r2, [sp, #16]
 801deea:	2a00      	cmp	r2, #0
 801deec:	f340 8135 	ble.w	801e15a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801def0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801def2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801def6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801defa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801defc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801df00:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801df04:	2b00      	cmp	r3, #0
 801df06:	dd0d      	ble.n	801df24 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801df08:	1422      	asrs	r2, r4, #16
 801df0a:	d405      	bmi.n	801df18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801df0c:	4542      	cmp	r2, r8
 801df0e:	da03      	bge.n	801df18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801df10:	1402      	asrs	r2, r0, #16
 801df12:	d401      	bmi.n	801df18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801df14:	42ba      	cmp	r2, r7
 801df16:	db06      	blt.n	801df26 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801df18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801df1a:	4474      	add	r4, lr
 801df1c:	3b01      	subs	r3, #1
 801df1e:	3503      	adds	r5, #3
 801df20:	4410      	add	r0, r2
 801df22:	e7ef      	b.n	801df04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801df24:	d077      	beq.n	801e016 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801df26:	1e5a      	subs	r2, r3, #1
 801df28:	fb0e 4602 	mla	r6, lr, r2, r4
 801df2c:	1436      	asrs	r6, r6, #16
 801df2e:	d469      	bmi.n	801e004 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801df30:	4546      	cmp	r6, r8
 801df32:	da67      	bge.n	801e004 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801df34:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801df36:	fb06 0202 	mla	r2, r6, r2, r0
 801df3a:	1412      	asrs	r2, r2, #16
 801df3c:	d462      	bmi.n	801e004 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801df3e:	42ba      	cmp	r2, r7
 801df40:	da60      	bge.n	801e004 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801df42:	1cee      	adds	r6, r5, #3
 801df44:	4699      	mov	r9, r3
 801df46:	f1b9 0f00 	cmp.w	r9, #0
 801df4a:	dd5f      	ble.n	801e00c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801df4c:	1422      	asrs	r2, r4, #16
 801df4e:	9902      	ldr	r1, [sp, #8]
 801df50:	1407      	asrs	r7, r0, #16
 801df52:	fb01 2707 	mla	r7, r1, r7, r2
 801df56:	9903      	ldr	r1, [sp, #12]
 801df58:	087a      	lsrs	r2, r7, #1
 801df5a:	5c8a      	ldrb	r2, [r1, r2]
 801df5c:	07f9      	lsls	r1, r7, #31
 801df5e:	bf54      	ite	pl
 801df60:	f002 020f 	andpl.w	r2, r2, #15
 801df64:	1112      	asrmi	r2, r2, #4
 801df66:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801df6a:	b2d2      	uxtb	r2, r2
 801df6c:	2a00      	cmp	r2, #0
 801df6e:	d042      	beq.n	801dff6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801df70:	497b      	ldr	r1, [pc, #492]	; (801e160 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801df72:	680f      	ldr	r7, [r1, #0]
 801df74:	9905      	ldr	r1, [sp, #20]
 801df76:	fa5f fb87 	uxtb.w	fp, r7
 801df7a:	434a      	muls	r2, r1
 801df7c:	f102 0801 	add.w	r8, r2, #1
 801df80:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801df84:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801df88:	1212      	asrs	r2, r2, #8
 801df8a:	fa1f fa82 	uxth.w	sl, r2
 801df8e:	43d2      	mvns	r2, r2
 801df90:	fb1b fb0a 	smulbb	fp, fp, sl
 801df94:	b2d2      	uxtb	r2, r2
 801df96:	fb08 b802 	mla	r8, r8, r2, fp
 801df9a:	fa1f f888 	uxth.w	r8, r8
 801df9e:	f108 0b01 	add.w	fp, r8, #1
 801dfa2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801dfa6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801dfaa:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801dfae:	fb1b fb0a 	smulbb	fp, fp, sl
 801dfb2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dfb6:	fb17 fa0a 	smulbb	sl, r7, sl
 801dfba:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801dfbe:	f806 8c03 	strb.w	r8, [r6, #-3]
 801dfc2:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801dfc6:	fb07 aa02 	mla	sl, r7, r2, sl
 801dfca:	fb08 b802 	mla	r8, r8, r2, fp
 801dfce:	fa1f fa8a 	uxth.w	sl, sl
 801dfd2:	fa1f f888 	uxth.w	r8, r8
 801dfd6:	f10a 0701 	add.w	r7, sl, #1
 801dfda:	f108 0b01 	add.w	fp, r8, #1
 801dfde:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dfe2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801dfe6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dfea:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dfee:	f806 ac01 	strb.w	sl, [r6, #-1]
 801dff2:	f806 8c02 	strb.w	r8, [r6, #-2]
 801dff6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dff8:	4474      	add	r4, lr
 801dffa:	3603      	adds	r6, #3
 801dffc:	f109 39ff 	add.w	r9, r9, #4294967295
 801e000:	4410      	add	r0, r2
 801e002:	e7a0      	b.n	801df46 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e004:	2700      	movs	r7, #0
 801e006:	1bda      	subs	r2, r3, r7
 801e008:	2a00      	cmp	r2, #0
 801e00a:	dc3e      	bgt.n	801e08a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e00c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e010:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e014:	441d      	add	r5, r3
 801e016:	9b01      	ldr	r3, [sp, #4]
 801e018:	2b00      	cmp	r3, #0
 801e01a:	f340 809e 	ble.w	801e15a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801e01e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e022:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e024:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e028:	eeb0 6a62 	vmov.f32	s12, s5
 801e02c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e030:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e034:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e038:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e03c:	eeb0 6a43 	vmov.f32	s12, s6
 801e040:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e044:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e048:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e04c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e050:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e054:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e058:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e05c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e060:	ee12 2a90 	vmov	r2, s5
 801e064:	eef0 2a47 	vmov.f32	s5, s14
 801e068:	fb92 fef3 	sdiv	lr, r2, r3
 801e06c:	ee13 2a10 	vmov	r2, s6
 801e070:	eeb0 3a67 	vmov.f32	s6, s15
 801e074:	fb92 f3f3 	sdiv	r3, r2, r3
 801e078:	9314      	str	r3, [sp, #80]	; 0x50
 801e07a:	9b01      	ldr	r3, [sp, #4]
 801e07c:	9a04      	ldr	r2, [sp, #16]
 801e07e:	3b01      	subs	r3, #1
 801e080:	9301      	str	r3, [sp, #4]
 801e082:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e084:	bf08      	it	eq
 801e086:	4613      	moveq	r3, r2
 801e088:	e72b      	b.n	801dee2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801e08a:	1426      	asrs	r6, r4, #16
 801e08c:	d460      	bmi.n	801e150 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e08e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801e092:	42b2      	cmp	r2, r6
 801e094:	dd5c      	ble.n	801e150 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e096:	ea5f 4820 	movs.w	r8, r0, asr #16
 801e09a:	d459      	bmi.n	801e150 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e09c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e0a0:	4542      	cmp	r2, r8
 801e0a2:	dd55      	ble.n	801e150 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e0a4:	9a02      	ldr	r2, [sp, #8]
 801e0a6:	9903      	ldr	r1, [sp, #12]
 801e0a8:	fb08 6602 	mla	r6, r8, r2, r6
 801e0ac:	0872      	lsrs	r2, r6, #1
 801e0ae:	07f6      	lsls	r6, r6, #31
 801e0b0:	5c8a      	ldrb	r2, [r1, r2]
 801e0b2:	bf54      	ite	pl
 801e0b4:	f002 020f 	andpl.w	r2, r2, #15
 801e0b8:	1112      	asrmi	r2, r2, #4
 801e0ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e0be:	b2d2      	uxtb	r2, r2
 801e0c0:	2a00      	cmp	r2, #0
 801e0c2:	d045      	beq.n	801e150 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e0c4:	4926      	ldr	r1, [pc, #152]	; (801e160 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801e0c6:	f8d1 8000 	ldr.w	r8, [r1]
 801e0ca:	9905      	ldr	r1, [sp, #20]
 801e0cc:	fa5f fb88 	uxtb.w	fp, r8
 801e0d0:	434a      	muls	r2, r1
 801e0d2:	1c56      	adds	r6, r2, #1
 801e0d4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e0d8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801e0dc:	1212      	asrs	r2, r2, #8
 801e0de:	f815 9006 	ldrb.w	r9, [r5, r6]
 801e0e2:	fa1f fa82 	uxth.w	sl, r2
 801e0e6:	43d2      	mvns	r2, r2
 801e0e8:	fb1b fb0a 	smulbb	fp, fp, sl
 801e0ec:	b2d2      	uxtb	r2, r2
 801e0ee:	fb09 b902 	mla	r9, r9, r2, fp
 801e0f2:	fa1f f989 	uxth.w	r9, r9
 801e0f6:	f109 0b01 	add.w	fp, r9, #1
 801e0fa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e0fe:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801e102:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801e106:	fb1b fb0a 	smulbb	fp, fp, sl
 801e10a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e10e:	fb18 fa0a 	smulbb	sl, r8, sl
 801e112:	f805 9006 	strb.w	r9, [r5, r6]
 801e116:	442e      	add	r6, r5
 801e118:	f896 8002 	ldrb.w	r8, [r6, #2]
 801e11c:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e120:	fb08 aa02 	mla	sl, r8, r2, sl
 801e124:	fb09 b902 	mla	r9, r9, r2, fp
 801e128:	fa1f fa8a 	uxth.w	sl, sl
 801e12c:	fa1f f989 	uxth.w	r9, r9
 801e130:	f10a 0801 	add.w	r8, sl, #1
 801e134:	f109 0b01 	add.w	fp, r9, #1
 801e138:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801e13c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e140:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e144:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e148:	f886 a002 	strb.w	sl, [r6, #2]
 801e14c:	f886 9001 	strb.w	r9, [r6, #1]
 801e150:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e152:	4474      	add	r4, lr
 801e154:	3701      	adds	r7, #1
 801e156:	4410      	add	r0, r2
 801e158:	e755      	b.n	801e006 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801e15a:	b007      	add	sp, #28
 801e15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e160:	200567a4 	.word	0x200567a4

0801e164 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e168:	b085      	sub	sp, #20
 801e16a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e16e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e170:	9203      	str	r2, [sp, #12]
 801e172:	6860      	ldr	r0, [r4, #4]
 801e174:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801e178:	9100      	str	r1, [sp, #0]
 801e17a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801e17e:	fb00 2606 	mla	r6, r0, r6, r2
 801e182:	6822      	ldr	r2, [r4, #0]
 801e184:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e188:	4416      	add	r6, r2
 801e18a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801e18e:	3201      	adds	r2, #1
 801e190:	f022 0201 	bic.w	r2, r2, #1
 801e194:	9201      	str	r2, [sp, #4]
 801e196:	f8dc 2000 	ldr.w	r2, [ip]
 801e19a:	9202      	str	r2, [sp, #8]
 801e19c:	9a00      	ldr	r2, [sp, #0]
 801e19e:	2a00      	cmp	r2, #0
 801e1a0:	dc03      	bgt.n	801e1aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801e1a2:	9a03      	ldr	r2, [sp, #12]
 801e1a4:	2a00      	cmp	r2, #0
 801e1a6:	f340 8140 	ble.w	801e42a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801e1aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e1ac:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e1b0:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801e1b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e1b6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e1ba:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e1be:	2b00      	cmp	r3, #0
 801e1c0:	dd0e      	ble.n	801e1e0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e1c2:	142a      	asrs	r2, r5, #16
 801e1c4:	d405      	bmi.n	801e1d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e1c6:	4572      	cmp	r2, lr
 801e1c8:	da03      	bge.n	801e1d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e1ca:	1422      	asrs	r2, r4, #16
 801e1cc:	d401      	bmi.n	801e1d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e1ce:	42ba      	cmp	r2, r7
 801e1d0:	db07      	blt.n	801e1e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e1d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e1d4:	3b01      	subs	r3, #1
 801e1d6:	3603      	adds	r6, #3
 801e1d8:	4415      	add	r5, r2
 801e1da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e1dc:	4414      	add	r4, r2
 801e1de:	e7ee      	b.n	801e1be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e1e0:	d072      	beq.n	801e2c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e1e2:	1e5a      	subs	r2, r3, #1
 801e1e4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e1e6:	fb00 5002 	mla	r0, r0, r2, r5
 801e1ea:	1400      	asrs	r0, r0, #16
 801e1ec:	d463      	bmi.n	801e2b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e1ee:	4570      	cmp	r0, lr
 801e1f0:	da61      	bge.n	801e2b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e1f2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e1f4:	fb00 4202 	mla	r2, r0, r2, r4
 801e1f8:	1412      	asrs	r2, r2, #16
 801e1fa:	d45c      	bmi.n	801e2b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e1fc:	42ba      	cmp	r2, r7
 801e1fe:	da5a      	bge.n	801e2b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e200:	1cf0      	adds	r0, r6, #3
 801e202:	469a      	mov	sl, r3
 801e204:	f1ba 0f00 	cmp.w	sl, #0
 801e208:	dd59      	ble.n	801e2be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801e20a:	142a      	asrs	r2, r5, #16
 801e20c:	9901      	ldr	r1, [sp, #4]
 801e20e:	1427      	asrs	r7, r4, #16
 801e210:	fb01 2707 	mla	r7, r1, r7, r2
 801e214:	9902      	ldr	r1, [sp, #8]
 801e216:	087a      	lsrs	r2, r7, #1
 801e218:	5c8a      	ldrb	r2, [r1, r2]
 801e21a:	07f9      	lsls	r1, r7, #31
 801e21c:	bf54      	ite	pl
 801e21e:	f002 020f 	andpl.w	r2, r2, #15
 801e222:	1112      	asrmi	r2, r2, #4
 801e224:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e228:	b2d2      	uxtb	r2, r2
 801e22a:	2a00      	cmp	r2, #0
 801e22c:	d03b      	beq.n	801e2a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801e22e:	4980      	ldr	r1, [pc, #512]	; (801e430 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801e230:	2aff      	cmp	r2, #255	; 0xff
 801e232:	680f      	ldr	r7, [r1, #0]
 801e234:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e238:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801e23c:	b2ff      	uxtb	r7, r7
 801e23e:	f000 80ed 	beq.w	801e41c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801e242:	fa1f f882 	uxth.w	r8, r2
 801e246:	43d2      	mvns	r2, r2
 801e248:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801e24c:	fb17 f708 	smulbb	r7, r7, r8
 801e250:	b2d2      	uxtb	r2, r2
 801e252:	fb19 f908 	smulbb	r9, r9, r8
 801e256:	fb0e 7702 	mla	r7, lr, r2, r7
 801e25a:	fb1b f808 	smulbb	r8, fp, r8
 801e25e:	b2bf      	uxth	r7, r7
 801e260:	f107 0e01 	add.w	lr, r7, #1
 801e264:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801e268:	123f      	asrs	r7, r7, #8
 801e26a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801e26e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801e272:	fb07 9902 	mla	r9, r7, r2, r9
 801e276:	fa1f f989 	uxth.w	r9, r9
 801e27a:	f109 0701 	add.w	r7, r9, #1
 801e27e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801e282:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801e286:	fb07 8802 	mla	r8, r7, r2, r8
 801e28a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e28e:	fa1f f888 	uxth.w	r8, r8
 801e292:	f800 9c02 	strb.w	r9, [r0, #-2]
 801e296:	f108 0201 	add.w	r2, r8, #1
 801e29a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e29e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e2a2:	f800 8c01 	strb.w	r8, [r0, #-1]
 801e2a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e2a8:	3003      	adds	r0, #3
 801e2aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e2ae:	4415      	add	r5, r2
 801e2b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e2b2:	4414      	add	r4, r2
 801e2b4:	e7a6      	b.n	801e204 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e2b6:	2700      	movs	r7, #0
 801e2b8:	1bda      	subs	r2, r3, r7
 801e2ba:	2a00      	cmp	r2, #0
 801e2bc:	dc40      	bgt.n	801e340 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801e2be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e2c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e2c6:	441e      	add	r6, r3
 801e2c8:	9b00      	ldr	r3, [sp, #0]
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	f340 80ad 	ble.w	801e42a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801e2d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e2d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e2d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e2da:	eeb0 6a62 	vmov.f32	s12, s5
 801e2de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e2e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e2e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e2ea:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e2ee:	eeb0 6a43 	vmov.f32	s12, s6
 801e2f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e2f6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e2fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e2fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e302:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e306:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e30a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e30e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e312:	ee12 2a90 	vmov	r2, s5
 801e316:	eef0 2a47 	vmov.f32	s5, s14
 801e31a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e31e:	ee13 2a10 	vmov	r2, s6
 801e322:	9311      	str	r3, [sp, #68]	; 0x44
 801e324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e326:	eeb0 3a67 	vmov.f32	s6, s15
 801e32a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e32e:	9312      	str	r3, [sp, #72]	; 0x48
 801e330:	9b00      	ldr	r3, [sp, #0]
 801e332:	9a03      	ldr	r2, [sp, #12]
 801e334:	3b01      	subs	r3, #1
 801e336:	9300      	str	r3, [sp, #0]
 801e338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e33a:	bf08      	it	eq
 801e33c:	4613      	moveq	r3, r2
 801e33e:	e72d      	b.n	801e19c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e340:	1428      	asrs	r0, r5, #16
 801e342:	d45c      	bmi.n	801e3fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e344:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801e348:	4282      	cmp	r2, r0
 801e34a:	dd58      	ble.n	801e3fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e34c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801e350:	d455      	bmi.n	801e3fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e352:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e356:	4572      	cmp	r2, lr
 801e358:	dd51      	ble.n	801e3fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e35a:	9a01      	ldr	r2, [sp, #4]
 801e35c:	9902      	ldr	r1, [sp, #8]
 801e35e:	fb0e 0002 	mla	r0, lr, r2, r0
 801e362:	0842      	lsrs	r2, r0, #1
 801e364:	07c0      	lsls	r0, r0, #31
 801e366:	5c8a      	ldrb	r2, [r1, r2]
 801e368:	bf54      	ite	pl
 801e36a:	f002 020f 	andpl.w	r2, r2, #15
 801e36e:	1112      	asrmi	r2, r2, #4
 801e370:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e374:	b2d2      	uxtb	r2, r2
 801e376:	2a00      	cmp	r2, #0
 801e378:	d041      	beq.n	801e3fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e37a:	492d      	ldr	r1, [pc, #180]	; (801e430 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801e37c:	2aff      	cmp	r2, #255	; 0xff
 801e37e:	6808      	ldr	r0, [r1, #0]
 801e380:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801e384:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801e388:	fa5f fe80 	uxtb.w	lr, r0
 801e38c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801e390:	d03b      	beq.n	801e40a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e392:	fa1f f982 	uxth.w	r9, r2
 801e396:	4438      	add	r0, r7
 801e398:	43d2      	mvns	r2, r2
 801e39a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801e39e:	fb1e fe09 	smulbb	lr, lr, r9
 801e3a2:	fb1a fa09 	smulbb	sl, sl, r9
 801e3a6:	b2d2      	uxtb	r2, r2
 801e3a8:	fb1b f909 	smulbb	r9, fp, r9
 801e3ac:	fb08 ee02 	mla	lr, r8, r2, lr
 801e3b0:	fa1f fe8e 	uxth.w	lr, lr
 801e3b4:	f10e 0801 	add.w	r8, lr, #1
 801e3b8:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801e3bc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e3c0:	f806 e000 	strb.w	lr, [r6, r0]
 801e3c4:	4430      	add	r0, r6
 801e3c6:	f890 e001 	ldrb.w	lr, [r0, #1]
 801e3ca:	fb0e aa02 	mla	sl, lr, r2, sl
 801e3ce:	fa1f fa8a 	uxth.w	sl, sl
 801e3d2:	f10a 0e01 	add.w	lr, sl, #1
 801e3d6:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801e3da:	f890 e002 	ldrb.w	lr, [r0, #2]
 801e3de:	fb0e 9902 	mla	r9, lr, r2, r9
 801e3e2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e3e6:	fa1f f989 	uxth.w	r9, r9
 801e3ea:	f880 a001 	strb.w	sl, [r0, #1]
 801e3ee:	f109 0201 	add.w	r2, r9, #1
 801e3f2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801e3f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e3fa:	f880 9002 	strb.w	r9, [r0, #2]
 801e3fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e400:	3701      	adds	r7, #1
 801e402:	4415      	add	r5, r2
 801e404:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e406:	4414      	add	r4, r2
 801e408:	e756      	b.n	801e2b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e40a:	4438      	add	r0, r7
 801e40c:	f806 e000 	strb.w	lr, [r6, r0]
 801e410:	4430      	add	r0, r6
 801e412:	f880 a001 	strb.w	sl, [r0, #1]
 801e416:	f880 b002 	strb.w	fp, [r0, #2]
 801e41a:	e7f0      	b.n	801e3fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e41c:	f800 7c03 	strb.w	r7, [r0, #-3]
 801e420:	f800 9c02 	strb.w	r9, [r0, #-2]
 801e424:	f800 bc01 	strb.w	fp, [r0, #-1]
 801e428:	e73d      	b.n	801e2a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801e42a:	b005      	add	sp, #20
 801e42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e430:	200567a4 	.word	0x200567a4

0801e434 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801e434:	4770      	bx	lr

0801e436 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801e436:	4770      	bx	lr

0801e438 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801e438:	4770      	bx	lr

0801e43a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801e43a:	4770      	bx	lr

0801e43c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e43c:	4770      	bx	lr

0801e43e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e43e:	4770      	bx	lr

0801e440 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e440:	4770      	bx	lr

0801e442 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e442:	4770      	bx	lr

0801e444 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e444:	4770      	bx	lr

0801e446 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e446:	4770      	bx	lr

0801e448 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e448:	4770      	bx	lr

0801e44a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e44a:	4770      	bx	lr

0801e44c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e44c:	4770      	bx	lr

0801e44e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e44e:	4770      	bx	lr

0801e450 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e450:	4770      	bx	lr

0801e452 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e452:	4770      	bx	lr

0801e454 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e454:	4770      	bx	lr

0801e456 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e456:	4770      	bx	lr

0801e458 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e458:	4770      	bx	lr

0801e45a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e45a:	4770      	bx	lr

0801e45c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e45c:	2bff      	cmp	r3, #255	; 0xff
 801e45e:	b508      	push	{r3, lr}
 801e460:	d04f      	beq.n	801e502 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801e462:	2a2c      	cmp	r2, #44	; 0x2c
 801e464:	d032      	beq.n	801e4cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801e466:	d80f      	bhi.n	801e488 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801e468:	2a08      	cmp	r2, #8
 801e46a:	d046      	beq.n	801e4fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e46c:	d805      	bhi.n	801e47a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801e46e:	2a04      	cmp	r2, #4
 801e470:	d041      	beq.n	801e4f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e472:	2a05      	cmp	r2, #5
 801e474:	d03d      	beq.n	801e4f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e476:	2000      	movs	r0, #0
 801e478:	e027      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e47a:	2a0a      	cmp	r2, #10
 801e47c:	d03d      	beq.n	801e4fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e47e:	d301      	bcc.n	801e484 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801e480:	2a0b      	cmp	r2, #11
 801e482:	d1f8      	bne.n	801e476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e484:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e486:	e020      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e488:	2a30      	cmp	r2, #48	; 0x30
 801e48a:	d038      	beq.n	801e4fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e48c:	d808      	bhi.n	801e4a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801e48e:	2a2e      	cmp	r2, #46	; 0x2e
 801e490:	684b      	ldr	r3, [r1, #4]
 801e492:	d029      	beq.n	801e4e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801e494:	d90b      	bls.n	801e4ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801e496:	781b      	ldrb	r3, [r3, #0]
 801e498:	2b00      	cmp	r3, #0
 801e49a:	d1ec      	bne.n	801e476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e49c:	6a00      	ldr	r0, [r0, #32]
 801e49e:	e014      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e4a0:	2a32      	cmp	r2, #50	; 0x32
 801e4a2:	d02c      	beq.n	801e4fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e4a4:	d301      	bcc.n	801e4aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801e4a6:	2a33      	cmp	r2, #51	; 0x33
 801e4a8:	d1e5      	bne.n	801e476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e4aa:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e4ac:	e00d      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e4ae:	781b      	ldrb	r3, [r3, #0]
 801e4b0:	2b01      	cmp	r3, #1
 801e4b2:	d009      	beq.n	801e4c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801e4b4:	d3f2      	bcc.n	801e49c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801e4b6:	2b02      	cmp	r3, #2
 801e4b8:	d1dd      	bne.n	801e476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e4ba:	4b39      	ldr	r3, [pc, #228]	; (801e5a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e4bc:	f240 4186 	movw	r1, #1158	; 0x486
 801e4c0:	4a38      	ldr	r2, [pc, #224]	; (801e5a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e4c2:	4839      	ldr	r0, [pc, #228]	; (801e5a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801e4c4:	f008 fa94 	bl	80269f0 <__assert_func>
 801e4c8:	6900      	ldr	r0, [r0, #16]
 801e4ca:	bd08      	pop	{r3, pc}
 801e4cc:	684b      	ldr	r3, [r1, #4]
 801e4ce:	781b      	ldrb	r3, [r3, #0]
 801e4d0:	2b01      	cmp	r3, #1
 801e4d2:	d007      	beq.n	801e4e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801e4d4:	d30b      	bcc.n	801e4ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801e4d6:	2b02      	cmp	r3, #2
 801e4d8:	d1cd      	bne.n	801e476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e4da:	4b31      	ldr	r3, [pc, #196]	; (801e5a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e4dc:	f240 4192 	movw	r1, #1170	; 0x492
 801e4e0:	4a30      	ldr	r2, [pc, #192]	; (801e5a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e4e2:	e7ee      	b.n	801e4c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e4e4:	6880      	ldr	r0, [r0, #8]
 801e4e6:	e7f0      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e4e8:	781b      	ldrb	r3, [r3, #0]
 801e4ea:	2b00      	cmp	r3, #0
 801e4ec:	d1c3      	bne.n	801e476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e4ee:	6980      	ldr	r0, [r0, #24]
 801e4f0:	e7eb      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e4f2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e4f4:	e7e9      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e4f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e4f8:	e7e7      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e4fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e4fc:	e7e5      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e4fe:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e500:	e7e3      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e502:	2a2c      	cmp	r2, #44	; 0x2c
 801e504:	d030      	beq.n	801e568 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801e506:	d80f      	bhi.n	801e528 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801e508:	2a08      	cmp	r2, #8
 801e50a:	d044      	beq.n	801e596 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e50c:	d805      	bhi.n	801e51a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801e50e:	2a04      	cmp	r2, #4
 801e510:	d03f      	beq.n	801e592 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801e512:	2a05      	cmp	r2, #5
 801e514:	d1af      	bne.n	801e476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e516:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e518:	e7d7      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e51a:	2a0a      	cmp	r2, #10
 801e51c:	d03b      	beq.n	801e596 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e51e:	d301      	bcc.n	801e524 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801e520:	2a0b      	cmp	r2, #11
 801e522:	d1a8      	bne.n	801e476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e524:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e526:	e7d0      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e528:	2a30      	cmp	r2, #48	; 0x30
 801e52a:	d036      	beq.n	801e59a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e52c:	d808      	bhi.n	801e540 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801e52e:	2a2e      	cmp	r2, #46	; 0x2e
 801e530:	684b      	ldr	r3, [r1, #4]
 801e532:	d028      	beq.n	801e586 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801e534:	d90b      	bls.n	801e54e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801e536:	781b      	ldrb	r3, [r3, #0]
 801e538:	2b00      	cmp	r3, #0
 801e53a:	d19c      	bne.n	801e476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e53c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e53e:	e7c4      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e540:	2a32      	cmp	r2, #50	; 0x32
 801e542:	d02a      	beq.n	801e59a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e544:	d301      	bcc.n	801e54a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801e546:	2a33      	cmp	r2, #51	; 0x33
 801e548:	d195      	bne.n	801e476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e54a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e54c:	e7bd      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e54e:	781b      	ldrb	r3, [r3, #0]
 801e550:	2b01      	cmp	r3, #1
 801e552:	d007      	beq.n	801e564 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801e554:	d3f2      	bcc.n	801e53c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801e556:	2b02      	cmp	r3, #2
 801e558:	d18d      	bne.n	801e476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e55a:	4b11      	ldr	r3, [pc, #68]	; (801e5a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e55c:	f240 41c3 	movw	r1, #1219	; 0x4c3
 801e560:	4a10      	ldr	r2, [pc, #64]	; (801e5a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e562:	e7ae      	b.n	801e4c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e564:	6940      	ldr	r0, [r0, #20]
 801e566:	e7b0      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e568:	684b      	ldr	r3, [r1, #4]
 801e56a:	781b      	ldrb	r3, [r3, #0]
 801e56c:	2b01      	cmp	r3, #1
 801e56e:	d008      	beq.n	801e582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801e570:	d30d      	bcc.n	801e58e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e572:	2b02      	cmp	r3, #2
 801e574:	f47f af7f 	bne.w	801e476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e578:	4b09      	ldr	r3, [pc, #36]	; (801e5a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e57a:	f240 41cf 	movw	r1, #1231	; 0x4cf
 801e57e:	4a09      	ldr	r2, [pc, #36]	; (801e5a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e580:	e79f      	b.n	801e4c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e582:	68c0      	ldr	r0, [r0, #12]
 801e584:	e7a1      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e586:	781b      	ldrb	r3, [r3, #0]
 801e588:	2b00      	cmp	r3, #0
 801e58a:	f47f af74 	bne.w	801e476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e58e:	69c0      	ldr	r0, [r0, #28]
 801e590:	e79b      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e592:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e594:	e799      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e596:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e598:	e797      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e59a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e59c:	e795      	b.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e59e:	bf00      	nop
 801e5a0:	0802e8b5 	.word	0x0802e8b5
 801e5a4:	0802f0d8 	.word	0x0802f0d8
 801e5a8:	0802e901 	.word	0x0802e901

0801e5ac <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801e5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5b0:	b085      	sub	sp, #20
 801e5b2:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
 801e5b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e5b8:	f1be 0f00 	cmp.w	lr, #0
 801e5bc:	f000 8114 	beq.w	801e7e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e5c0:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 801e5c4:	f1bc 0f00 	cmp.w	ip, #0
 801e5c8:	f340 810e 	ble.w	801e7e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e5cc:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801e5d0:	2800      	cmp	r0, #0
 801e5d2:	f340 8109 	ble.w	801e7e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e5d6:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 801e5da:	4350      	muls	r0, r2
 801e5dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e5e0:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801e5e4:	ea4f 2a14 	mov.w	sl, r4, lsr #8
 801e5e8:	eba2 060c 	sub.w	r6, r2, ip
 801e5ec:	fb02 3305 	mla	r3, r2, r5, r3
 801e5f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e5f4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e5f8:	fa5f f88b 	uxtb.w	r8, fp
 801e5fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e600:	fa5f f78a 	uxtb.w	r7, sl
 801e604:	4419      	add	r1, r3
 801e606:	fa5f f984 	uxtb.w	r9, r4
 801e60a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e60e:	4408      	add	r0, r1
 801e610:	ea4f 034c 	mov.w	r3, ip, lsl #1
 801e614:	d03e      	beq.n	801e694 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 801e616:	fa1f f58e 	uxth.w	r5, lr
 801e61a:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
 801e61e:	4463      	add	r3, ip
 801e620:	fb08 f405 	mul.w	r4, r8, r5
 801e624:	b292      	uxth	r2, r2
 801e626:	436f      	muls	r7, r5
 801e628:	fb09 f505 	mul.w	r5, r9, r5
 801e62c:	4281      	cmp	r1, r0
 801e62e:	f080 80db 	bcs.w	801e7e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e632:	eb01 0c03 	add.w	ip, r1, r3
 801e636:	458c      	cmp	ip, r1
 801e638:	f101 0e03 	add.w	lr, r1, #3
 801e63c:	d928      	bls.n	801e690 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801e63e:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801e642:	fb11 f102 	smulbb	r1, r1, r2
 801e646:	4429      	add	r1, r5
 801e648:	b289      	uxth	r1, r1
 801e64a:	f101 0801 	add.w	r8, r1, #1
 801e64e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e652:	1209      	asrs	r1, r1, #8
 801e654:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801e658:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801e65c:	fb11 f102 	smulbb	r1, r1, r2
 801e660:	4439      	add	r1, r7
 801e662:	b289      	uxth	r1, r1
 801e664:	f101 0801 	add.w	r8, r1, #1
 801e668:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e66c:	1209      	asrs	r1, r1, #8
 801e66e:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801e672:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801e676:	fb11 f102 	smulbb	r1, r1, r2
 801e67a:	4421      	add	r1, r4
 801e67c:	b289      	uxth	r1, r1
 801e67e:	f101 0801 	add.w	r8, r1, #1
 801e682:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e686:	1209      	asrs	r1, r1, #8
 801e688:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801e68c:	4671      	mov	r1, lr
 801e68e:	e7d2      	b.n	801e636 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8a>
 801e690:	4431      	add	r1, r6
 801e692:	e7cb      	b.n	801e62c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x80>
 801e694:	f012 0503 	ands.w	r5, r2, #3
 801e698:	d00f      	beq.n	801e6ba <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10e>
 801e69a:	4463      	add	r3, ip
 801e69c:	4281      	cmp	r1, r0
 801e69e:	f080 80a3 	bcs.w	801e7e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e6a2:	18ca      	adds	r2, r1, r3
 801e6a4:	4291      	cmp	r1, r2
 801e6a6:	f080 809d 	bcs.w	801e7e4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x238>
 801e6aa:	f881 9000 	strb.w	r9, [r1]
 801e6ae:	3103      	adds	r1, #3
 801e6b0:	f801 7c02 	strb.w	r7, [r1, #-2]
 801e6b4:	f801 8c01 	strb.w	r8, [r1, #-1]
 801e6b8:	e7f4      	b.n	801e6a4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801e6ba:	f001 0603 	and.w	r6, r1, #3
 801e6be:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 801e6c2:	ea49 2a0a 	orr.w	sl, r9, sl, lsl #8
 801e6c6:	4463      	add	r3, ip
 801e6c8:	2e02      	cmp	r6, #2
 801e6ca:	b2bf      	uxth	r7, r7
 801e6cc:	fa1f fa8a 	uxth.w	sl, sl
 801e6d0:	d017      	beq.n	801e702 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801e6d2:	2e03      	cmp	r6, #3
 801e6d4:	d00c      	beq.n	801e6f0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801e6d6:	2e01      	cmp	r6, #1
 801e6d8:	d11f      	bne.n	801e71a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801e6da:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801e6de:	460d      	mov	r5, r1
 801e6e0:	4285      	cmp	r5, r0
 801e6e2:	d230      	bcs.n	801e746 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x19a>
 801e6e4:	f885 9000 	strb.w	r9, [r5]
 801e6e8:	f8a5 7001 	strh.w	r7, [r5, #1]
 801e6ec:	4435      	add	r5, r6
 801e6ee:	e7f7      	b.n	801e6e0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>
 801e6f0:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801e6f4:	460d      	mov	r5, r1
 801e6f6:	4285      	cmp	r5, r0
 801e6f8:	d20c      	bcs.n	801e714 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801e6fa:	f885 9000 	strb.w	r9, [r5]
 801e6fe:	4435      	add	r5, r6
 801e700:	e7f9      	b.n	801e6f6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801e702:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801e706:	460d      	mov	r5, r1
 801e708:	4285      	cmp	r5, r0
 801e70a:	d218      	bcs.n	801e73e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x192>
 801e70c:	f8a5 a000 	strh.w	sl, [r5]
 801e710:	4435      	add	r5, r6
 801e712:	e7f9      	b.n	801e708 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15c>
 801e714:	3b01      	subs	r3, #1
 801e716:	3101      	adds	r1, #1
 801e718:	2501      	movs	r5, #1
 801e71a:	f003 0603 	and.w	r6, r3, #3
 801e71e:	2e02      	cmp	r6, #2
 801e720:	d021      	beq.n	801e766 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1ba>
 801e722:	2e03      	cmp	r6, #3
 801e724:	d013      	beq.n	801e74e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1a2>
 801e726:	2e01      	cmp	r6, #1
 801e728:	d126      	bne.n	801e778 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801e72a:	3b01      	subs	r3, #1
 801e72c:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 801e730:	18ce      	adds	r6, r1, r3
 801e732:	4286      	cmp	r6, r0
 801e734:	d220      	bcs.n	801e778 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801e736:	f886 8000 	strb.w	r8, [r6]
 801e73a:	443e      	add	r6, r7
 801e73c:	e7f9      	b.n	801e732 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x186>
 801e73e:	3b02      	subs	r3, #2
 801e740:	3102      	adds	r1, #2
 801e742:	2502      	movs	r5, #2
 801e744:	e7e9      	b.n	801e71a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801e746:	3b03      	subs	r3, #3
 801e748:	3103      	adds	r1, #3
 801e74a:	2500      	movs	r5, #0
 801e74c:	e7e5      	b.n	801e71a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801e74e:	3b03      	subs	r3, #3
 801e750:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 801e754:	18ce      	adds	r6, r1, r3
 801e756:	4286      	cmp	r6, r0
 801e758:	d20e      	bcs.n	801e778 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801e75a:	f8a6 a000 	strh.w	sl, [r6]
 801e75e:	f886 8002 	strb.w	r8, [r6, #2]
 801e762:	443e      	add	r6, r7
 801e764:	e7f7      	b.n	801e756 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1aa>
 801e766:	3b02      	subs	r3, #2
 801e768:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801e76c:	18ce      	adds	r6, r1, r3
 801e76e:	4286      	cmp	r6, r0
 801e770:	d202      	bcs.n	801e778 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801e772:	8037      	strh	r7, [r6, #0]
 801e774:	4466      	add	r6, ip
 801e776:	e7fa      	b.n	801e76e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1c2>
 801e778:	079e      	lsls	r6, r3, #30
 801e77a:	d006      	beq.n	801e78a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1de>
 801e77c:	4b1c      	ldr	r3, [pc, #112]	; (801e7f0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x244>)
 801e77e:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 801e782:	4a1c      	ldr	r2, [pc, #112]	; (801e7f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x248>)
 801e784:	481c      	ldr	r0, [pc, #112]	; (801e7f8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x24c>)
 801e786:	f008 f933 	bl	80269f0 <__assert_func>
 801e78a:	b36b      	cbz	r3, 801e7e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e78c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 801e790:	109b      	asrs	r3, r3, #2
 801e792:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e796:	2703      	movs	r7, #3
 801e798:	ea44 6604 	orr.w	r6, r4, r4, lsl #24
 801e79c:	9601      	str	r6, [sp, #4]
 801e79e:	0426      	lsls	r6, r4, #16
 801e7a0:	ea46 2614 	orr.w	r6, r6, r4, lsr #8
 801e7a4:	ea48 2404 	orr.w	r4, r8, r4, lsl #8
 801e7a8:	9602      	str	r6, [sp, #8]
 801e7aa:	009e      	lsls	r6, r3, #2
 801e7ac:	ebc3 0392 	rsb	r3, r3, r2, lsr #2
 801e7b0:	9403      	str	r4, [sp, #12]
 801e7b2:	009b      	lsls	r3, r3, #2
 801e7b4:	4281      	cmp	r1, r0
 801e7b6:	d217      	bcs.n	801e7e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e7b8:	eb01 0c06 	add.w	ip, r1, r6
 801e7bc:	462a      	mov	r2, r5
 801e7be:	4561      	cmp	r1, ip
 801e7c0:	d20e      	bcs.n	801e7e0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x234>
 801e7c2:	f10d 0e10 	add.w	lr, sp, #16
 801e7c6:	1c54      	adds	r4, r2, #1
 801e7c8:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 801e7cc:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 801e7d0:	f841 2b04 	str.w	r2, [r1], #4
 801e7d4:	fb94 f2f7 	sdiv	r2, r4, r7
 801e7d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e7dc:	1aa2      	subs	r2, r4, r2
 801e7de:	e7ee      	b.n	801e7be <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x212>
 801e7e0:	4419      	add	r1, r3
 801e7e2:	e7e7      	b.n	801e7b4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x208>
 801e7e4:	4431      	add	r1, r6
 801e7e6:	e759      	b.n	801e69c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf0>
 801e7e8:	b005      	add	sp, #20
 801e7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7ee:	bf00      	nop
 801e7f0:	0802e7d1 	.word	0x0802e7d1
 801e7f4:	0802ee22 	.word	0x0802ee22
 801e7f8:	0802e901 	.word	0x0802e901

0801e7fc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801e7fc:	b508      	push	{r3, lr}
 801e7fe:	4b06      	ldr	r3, [pc, #24]	; (801e818 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801e800:	8818      	ldrh	r0, [r3, #0]
 801e802:	b928      	cbnz	r0, 801e810 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801e804:	4b05      	ldr	r3, [pc, #20]	; (801e81c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801e806:	214d      	movs	r1, #77	; 0x4d
 801e808:	4a05      	ldr	r2, [pc, #20]	; (801e820 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801e80a:	4806      	ldr	r0, [pc, #24]	; (801e824 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801e80c:	f008 f8f0 	bl	80269f0 <__assert_func>
 801e810:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e814:	b280      	uxth	r0, r0
 801e816:	bd08      	pop	{r3, pc}
 801e818:	20056776 	.word	0x20056776
 801e81c:	0802eb4e 	.word	0x0802eb4e
 801e820:	0802f09d 	.word	0x0802f09d
 801e824:	0802eb90 	.word	0x0802eb90

0801e828 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801e828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e82c:	b08b      	sub	sp, #44	; 0x2c
 801e82e:	460d      	mov	r5, r1
 801e830:	4616      	mov	r6, r2
 801e832:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801e836:	f1b8 0f00 	cmp.w	r8, #0
 801e83a:	d045      	beq.n	801e8c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801e83c:	6810      	ldr	r0, [r2, #0]
 801e83e:	ac06      	add	r4, sp, #24
 801e840:	6851      	ldr	r1, [r2, #4]
 801e842:	4f50      	ldr	r7, [pc, #320]	; (801e984 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x15c>)
 801e844:	c403      	stmia	r4!, {r0, r1}
 801e846:	6818      	ldr	r0, [r3, #0]
 801e848:	ac08      	add	r4, sp, #32
 801e84a:	6859      	ldr	r1, [r3, #4]
 801e84c:	c403      	stmia	r4!, {r0, r1}
 801e84e:	a806      	add	r0, sp, #24
 801e850:	f7fa fe62 	bl	8019518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e854:	4631      	mov	r1, r6
 801e856:	a808      	add	r0, sp, #32
 801e858:	f7fa fe46 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e85c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e860:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e864:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e868:	6838      	ldr	r0, [r7, #0]
 801e86a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e86e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801e872:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801e876:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e87a:	440d      	add	r5, r1
 801e87c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e880:	440a      	add	r2, r1
 801e882:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e886:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e88a:	4413      	add	r3, r2
 801e88c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e890:	6803      	ldr	r3, [r0, #0]
 801e892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e894:	4798      	blx	r3
 801e896:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e89a:	d018      	beq.n	801e8ce <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801e89c:	f010 0f04 	tst.w	r0, #4
 801e8a0:	6838      	ldr	r0, [r7, #0]
 801e8a2:	d017      	beq.n	801e8d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801e8a4:	2700      	movs	r7, #0
 801e8a6:	6801      	ldr	r1, [r0, #0]
 801e8a8:	b2a4      	uxth	r4, r4
 801e8aa:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e8ae:	b2b6      	uxth	r6, r6
 801e8b0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e8b4:	9401      	str	r4, [sp, #4]
 801e8b6:	9600      	str	r6, [sp, #0]
 801e8b8:	e9cd 8703 	strd	r8, r7, [sp, #12]
 801e8bc:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 801e8c0:	9702      	str	r7, [sp, #8]
 801e8c2:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 801e8c4:	4629      	mov	r1, r5
 801e8c6:	47a0      	blx	r4
 801e8c8:	b00b      	add	sp, #44	; 0x2c
 801e8ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e8ce:	f010 0f01 	tst.w	r0, #1
 801e8d2:	e7e5      	b.n	801e8a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801e8d4:	6803      	ldr	r3, [r0, #0]
 801e8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8d8:	4798      	blx	r3
 801e8da:	4a2b      	ldr	r2, [pc, #172]	; (801e988 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801e8dc:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801e8e0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e8e4:	8813      	ldrh	r3, [r2, #0]
 801e8e6:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801e8ea:	fb03 f404 	mul.w	r4, r3, r4
 801e8ee:	fb03 c101 	mla	r1, r3, r1, ip
 801e8f2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e8f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e8fa:	4408      	add	r0, r1
 801e8fc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801e900:	4404      	add	r4, r0
 801e902:	d02e      	beq.n	801e962 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13a>
 801e904:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801e908:	1b9b      	subs	r3, r3, r6
 801e90a:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801e90e:	1b96      	subs	r6, r2, r6
 801e910:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e914:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e918:	42a0      	cmp	r0, r4
 801e91a:	d22d      	bcs.n	801e978 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801e91c:	eb00 0e01 	add.w	lr, r0, r1
 801e920:	4570      	cmp	r0, lr
 801e922:	d210      	bcs.n	801e946 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801e924:	f890 9000 	ldrb.w	r9, [r0]
 801e928:	f815 2b01 	ldrb.w	r2, [r5], #1
 801e92c:	fb19 f90c 	smulbb	r9, r9, ip
 801e930:	fb02 9208 	mla	r2, r2, r8, r9
 801e934:	b292      	uxth	r2, r2
 801e936:	f102 0901 	add.w	r9, r2, #1
 801e93a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801e93e:	1212      	asrs	r2, r2, #8
 801e940:	f800 2b01 	strb.w	r2, [r0], #1
 801e944:	e7ec      	b.n	801e920 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf8>
 801e946:	4418      	add	r0, r3
 801e948:	4435      	add	r5, r6
 801e94a:	e7e5      	b.n	801e918 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf0>
 801e94c:	8813      	ldrh	r3, [r2, #0]
 801e94e:	1b9b      	subs	r3, r3, r6
 801e950:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e954:	4418      	add	r0, r3
 801e956:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e95a:	1b9b      	subs	r3, r3, r6
 801e95c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e960:	441d      	add	r5, r3
 801e962:	42a0      	cmp	r0, r4
 801e964:	d208      	bcs.n	801e978 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801e966:	eb00 0c01 	add.w	ip, r0, r1
 801e96a:	4560      	cmp	r0, ip
 801e96c:	d2ee      	bcs.n	801e94c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x124>
 801e96e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e972:	f800 3b01 	strb.w	r3, [r0], #1
 801e976:	e7f8      	b.n	801e96a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x142>
 801e978:	6838      	ldr	r0, [r7, #0]
 801e97a:	6803      	ldr	r3, [r0, #0]
 801e97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e97e:	4798      	blx	r3
 801e980:	e7a2      	b.n	801e8c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801e982:	bf00      	nop
 801e984:	2005677c 	.word	0x2005677c
 801e988:	20056776 	.word	0x20056776

0801e98c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e98c:	b510      	push	{r4, lr}
 801e98e:	4604      	mov	r4, r0
 801e990:	2104      	movs	r1, #4
 801e992:	f007 fef8 	bl	8026786 <_ZdlPvj>
 801e996:	4620      	mov	r0, r4
 801e998:	bd10      	pop	{r4, pc}

0801e99a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801e99a:	b510      	push	{r4, lr}
 801e99c:	4604      	mov	r4, r0
 801e99e:	2104      	movs	r1, #4
 801e9a0:	f007 fef1 	bl	8026786 <_ZdlPvj>
 801e9a4:	4620      	mov	r0, r4
 801e9a6:	bd10      	pop	{r4, pc}

0801e9a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e9a8:	b510      	push	{r4, lr}
 801e9aa:	4604      	mov	r4, r0
 801e9ac:	2104      	movs	r1, #4
 801e9ae:	f007 feea 	bl	8026786 <_ZdlPvj>
 801e9b2:	4620      	mov	r0, r4
 801e9b4:	bd10      	pop	{r4, pc}

0801e9b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e9b6:	b510      	push	{r4, lr}
 801e9b8:	4604      	mov	r4, r0
 801e9ba:	2104      	movs	r1, #4
 801e9bc:	f007 fee3 	bl	8026786 <_ZdlPvj>
 801e9c0:	4620      	mov	r0, r4
 801e9c2:	bd10      	pop	{r4, pc}

0801e9c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e9c4:	b510      	push	{r4, lr}
 801e9c6:	4604      	mov	r4, r0
 801e9c8:	2104      	movs	r1, #4
 801e9ca:	f007 fedc 	bl	8026786 <_ZdlPvj>
 801e9ce:	4620      	mov	r0, r4
 801e9d0:	bd10      	pop	{r4, pc}

0801e9d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e9d2:	b510      	push	{r4, lr}
 801e9d4:	4604      	mov	r4, r0
 801e9d6:	2104      	movs	r1, #4
 801e9d8:	f007 fed5 	bl	8026786 <_ZdlPvj>
 801e9dc:	4620      	mov	r0, r4
 801e9de:	bd10      	pop	{r4, pc}

0801e9e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e9e0:	b510      	push	{r4, lr}
 801e9e2:	4604      	mov	r4, r0
 801e9e4:	2104      	movs	r1, #4
 801e9e6:	f007 fece 	bl	8026786 <_ZdlPvj>
 801e9ea:	4620      	mov	r0, r4
 801e9ec:	bd10      	pop	{r4, pc}

0801e9ee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e9ee:	b510      	push	{r4, lr}
 801e9f0:	4604      	mov	r4, r0
 801e9f2:	2104      	movs	r1, #4
 801e9f4:	f007 fec7 	bl	8026786 <_ZdlPvj>
 801e9f8:	4620      	mov	r0, r4
 801e9fa:	bd10      	pop	{r4, pc}

0801e9fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e9fc:	b510      	push	{r4, lr}
 801e9fe:	4604      	mov	r4, r0
 801ea00:	2104      	movs	r1, #4
 801ea02:	f007 fec0 	bl	8026786 <_ZdlPvj>
 801ea06:	4620      	mov	r0, r4
 801ea08:	bd10      	pop	{r4, pc}

0801ea0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ea0a:	b510      	push	{r4, lr}
 801ea0c:	4604      	mov	r4, r0
 801ea0e:	2104      	movs	r1, #4
 801ea10:	f007 feb9 	bl	8026786 <_ZdlPvj>
 801ea14:	4620      	mov	r0, r4
 801ea16:	bd10      	pop	{r4, pc}

0801ea18 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ea18:	b510      	push	{r4, lr}
 801ea1a:	4604      	mov	r4, r0
 801ea1c:	2104      	movs	r1, #4
 801ea1e:	f007 feb2 	bl	8026786 <_ZdlPvj>
 801ea22:	4620      	mov	r0, r4
 801ea24:	bd10      	pop	{r4, pc}

0801ea26 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ea26:	b510      	push	{r4, lr}
 801ea28:	4604      	mov	r4, r0
 801ea2a:	2104      	movs	r1, #4
 801ea2c:	f007 feab 	bl	8026786 <_ZdlPvj>
 801ea30:	4620      	mov	r0, r4
 801ea32:	bd10      	pop	{r4, pc}

0801ea34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ea34:	b510      	push	{r4, lr}
 801ea36:	4604      	mov	r4, r0
 801ea38:	2104      	movs	r1, #4
 801ea3a:	f007 fea4 	bl	8026786 <_ZdlPvj>
 801ea3e:	4620      	mov	r0, r4
 801ea40:	bd10      	pop	{r4, pc}

0801ea42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ea42:	b510      	push	{r4, lr}
 801ea44:	4604      	mov	r4, r0
 801ea46:	2104      	movs	r1, #4
 801ea48:	f007 fe9d 	bl	8026786 <_ZdlPvj>
 801ea4c:	4620      	mov	r0, r4
 801ea4e:	bd10      	pop	{r4, pc}

0801ea50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ea50:	b510      	push	{r4, lr}
 801ea52:	4604      	mov	r4, r0
 801ea54:	2104      	movs	r1, #4
 801ea56:	f007 fe96 	bl	8026786 <_ZdlPvj>
 801ea5a:	4620      	mov	r0, r4
 801ea5c:	bd10      	pop	{r4, pc}

0801ea5e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ea5e:	b510      	push	{r4, lr}
 801ea60:	4604      	mov	r4, r0
 801ea62:	2104      	movs	r1, #4
 801ea64:	f007 fe8f 	bl	8026786 <_ZdlPvj>
 801ea68:	4620      	mov	r0, r4
 801ea6a:	bd10      	pop	{r4, pc}

0801ea6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801ea6c:	b510      	push	{r4, lr}
 801ea6e:	4604      	mov	r4, r0
 801ea70:	2104      	movs	r1, #4
 801ea72:	f007 fe88 	bl	8026786 <_ZdlPvj>
 801ea76:	4620      	mov	r0, r4
 801ea78:	bd10      	pop	{r4, pc}

0801ea7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801ea7a:	b510      	push	{r4, lr}
 801ea7c:	4604      	mov	r4, r0
 801ea7e:	2104      	movs	r1, #4
 801ea80:	f007 fe81 	bl	8026786 <_ZdlPvj>
 801ea84:	4620      	mov	r0, r4
 801ea86:	bd10      	pop	{r4, pc}

0801ea88 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801ea88:	b510      	push	{r4, lr}
 801ea8a:	4604      	mov	r4, r0
 801ea8c:	2104      	movs	r1, #4
 801ea8e:	f007 fe7a 	bl	8026786 <_ZdlPvj>
 801ea92:	4620      	mov	r0, r4
 801ea94:	bd10      	pop	{r4, pc}

0801ea96 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801ea96:	b510      	push	{r4, lr}
 801ea98:	4604      	mov	r4, r0
 801ea9a:	2104      	movs	r1, #4
 801ea9c:	f007 fe73 	bl	8026786 <_ZdlPvj>
 801eaa0:	4620      	mov	r0, r4
 801eaa2:	bd10      	pop	{r4, pc}

0801eaa4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801eaa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eaa6:	4606      	mov	r6, r0
 801eaa8:	b087      	sub	sp, #28
 801eaaa:	4615      	mov	r5, r2
 801eaac:	461f      	mov	r7, r3
 801eaae:	b343      	cbz	r3, 801eb02 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801eab0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801eab4:	2b00      	cmp	r3, #0
 801eab6:	dd24      	ble.n	801eb02 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801eab8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801eabc:	2b00      	cmp	r3, #0
 801eabe:	dd20      	ble.n	801eb02 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801eac0:	6808      	ldr	r0, [r1, #0]
 801eac2:	aa04      	add	r2, sp, #16
 801eac4:	6849      	ldr	r1, [r1, #4]
 801eac6:	4c1a      	ldr	r4, [pc, #104]	; (801eb30 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801eac8:	c203      	stmia	r2!, {r0, r1}
 801eaca:	a804      	add	r0, sp, #16
 801eacc:	f7fa fd24 	bl	8019518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ead0:	6820      	ldr	r0, [r4, #0]
 801ead2:	6803      	ldr	r3, [r0, #0]
 801ead4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ead6:	4798      	blx	r3
 801ead8:	2fff      	cmp	r7, #255	; 0xff
 801eada:	d014      	beq.n	801eb06 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801eadc:	f010 0f08 	tst.w	r0, #8
 801eae0:	6820      	ldr	r0, [r4, #0]
 801eae2:	d013      	beq.n	801eb0c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801eae4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801eae8:	6801      	ldr	r1, [r0, #0]
 801eaea:	9401      	str	r4, [sp, #4]
 801eaec:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801eaf0:	9702      	str	r7, [sp, #8]
 801eaf2:	9400      	str	r4, [sp, #0]
 801eaf4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801eaf8:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 801eafa:	4629      	mov	r1, r5
 801eafc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801eb00:	47a0      	blx	r4
 801eb02:	b007      	add	sp, #28
 801eb04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb06:	f010 0f02 	tst.w	r0, #2
 801eb0a:	e7e9      	b.n	801eae0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801eb0c:	6803      	ldr	r3, [r0, #0]
 801eb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb10:	4798      	blx	r3
 801eb12:	4b08      	ldr	r3, [pc, #32]	; (801eb34 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801eb14:	4601      	mov	r1, r0
 801eb16:	4630      	mov	r0, r6
 801eb18:	881a      	ldrh	r2, [r3, #0]
 801eb1a:	6833      	ldr	r3, [r6, #0]
 801eb1c:	e9cd 5700 	strd	r5, r7, [sp]
 801eb20:	69dd      	ldr	r5, [r3, #28]
 801eb22:	ab04      	add	r3, sp, #16
 801eb24:	47a8      	blx	r5
 801eb26:	6820      	ldr	r0, [r4, #0]
 801eb28:	6803      	ldr	r3, [r0, #0]
 801eb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eb2c:	4798      	blx	r3
 801eb2e:	e7e8      	b.n	801eb02 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801eb30:	2005677c 	.word	0x2005677c
 801eb34:	20056776 	.word	0x20056776

0801eb38 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801eb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb3c:	4db4      	ldr	r5, [pc, #720]	; (801ee10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 801eb3e:	4690      	mov	r8, r2
 801eb40:	b08d      	sub	sp, #52	; 0x34
 801eb42:	4604      	mov	r4, r0
 801eb44:	682a      	ldr	r2, [r5, #0]
 801eb46:	4689      	mov	r9, r1
 801eb48:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801eb4c:	2a02      	cmp	r2, #2
 801eb4e:	d106      	bne.n	801eb5e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801eb50:	4bb0      	ldr	r3, [pc, #704]	; (801ee14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 801eb52:	f240 11ed 	movw	r1, #493	; 0x1ed
 801eb56:	4ab0      	ldr	r2, [pc, #704]	; (801ee18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801eb58:	48b0      	ldr	r0, [pc, #704]	; (801ee1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 801eb5a:	f007 ff49 	bl	80269f0 <__assert_func>
 801eb5e:	ae0c      	add	r6, sp, #48	; 0x30
 801eb60:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 801eb64:	4630      	mov	r0, r6
 801eb66:	f7fe f815 	bl	801cb94 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801eb6a:	6823      	ldr	r3, [r4, #0]
 801eb6c:	4607      	mov	r7, r0
 801eb6e:	4620      	mov	r0, r4
 801eb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb72:	4798      	blx	r3
 801eb74:	4287      	cmp	r7, r0
 801eb76:	d004      	beq.n	801eb82 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801eb78:	4ba9      	ldr	r3, [pc, #676]	; (801ee20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 801eb7a:	f240 11ef 	movw	r1, #495	; 0x1ef
 801eb7e:	4aa6      	ldr	r2, [pc, #664]	; (801ee18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801eb80:	e7ea      	b.n	801eb58 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801eb82:	4630      	mov	r0, r6
 801eb84:	f7fd ff7c 	bl	801ca80 <_ZNK8touchgfx6Bitmap7getDataEv>
 801eb88:	4607      	mov	r7, r0
 801eb8a:	b920      	cbnz	r0, 801eb96 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801eb8c:	4ba5      	ldr	r3, [pc, #660]	; (801ee24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 801eb8e:	f240 11f1 	movw	r1, #497	; 0x1f1
 801eb92:	4aa1      	ldr	r2, [pc, #644]	; (801ee18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801eb94:	e7e0      	b.n	801eb58 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801eb96:	f8d8 0000 	ldr.w	r0, [r8]
 801eb9a:	ab06      	add	r3, sp, #24
 801eb9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801eba0:	f9b8 a000 	ldrsh.w	sl, [r8]
 801eba4:	c303      	stmia	r3!, {r0, r1}
 801eba6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801ebaa:	ab08      	add	r3, sp, #32
 801ebac:	f8d9 0000 	ldr.w	r0, [r9]
 801ebb0:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801ebb4:	c303      	stmia	r3!, {r0, r1}
 801ebb6:	4630      	mov	r0, r6
 801ebb8:	f7fd feee 	bl	801c998 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ebbc:	4680      	mov	r8, r0
 801ebbe:	4630      	mov	r0, r6
 801ebc0:	f7fd ff24 	bl	801ca0c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ebc4:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801ebc8:	f10d 0920 	add.w	r9, sp, #32
 801ebcc:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801ebd0:	a806      	add	r0, sp, #24
 801ebd2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801ebd6:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801ebda:	f7fa fc9d 	bl	8019518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ebde:	4648      	mov	r0, r9
 801ebe0:	f7fa fc9a 	bl	8019518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ebe4:	a80a      	add	r0, sp, #40	; 0x28
 801ebe6:	f7fa fc97 	bl	8019518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ebea:	4b8f      	ldr	r3, [pc, #572]	; (801ee28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801ebec:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ebf0:	881e      	ldrh	r6, [r3, #0]
 801ebf2:	4b8e      	ldr	r3, [pc, #568]	; (801ee2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801ebf4:	fa0f fb86 	sxth.w	fp, r6
 801ebf8:	8819      	ldrh	r1, [r3, #0]
 801ebfa:	4593      	cmp	fp, r2
 801ebfc:	dd75      	ble.n	801ecea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801ebfe:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 801ec02:	4494      	add	ip, r2
 801ec04:	fa1f fc8c 	uxth.w	ip, ip
 801ec08:	fa0f fa8c 	sxth.w	sl, ip
 801ec0c:	f1ba 0f00 	cmp.w	sl, #0
 801ec10:	dd6b      	ble.n	801ecea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801ec12:	fa0f f881 	sxth.w	r8, r1
 801ec16:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801ec1a:	4598      	cmp	r8, r3
 801ec1c:	dd65      	ble.n	801ecea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801ec1e:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 801ec22:	4418      	add	r0, r3
 801ec24:	b280      	uxth	r0, r0
 801ec26:	fa0f fe80 	sxth.w	lr, r0
 801ec2a:	f1be 0f00 	cmp.w	lr, #0
 801ec2e:	dd5c      	ble.n	801ecea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801ec30:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801ec34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ec38:	45d3      	cmp	fp, sl
 801ec3a:	bfc8      	it	gt
 801ec3c:	4666      	movgt	r6, ip
 801ec3e:	45f0      	cmp	r8, lr
 801ec40:	bfc8      	it	gt
 801ec42:	4601      	movgt	r1, r0
 801ec44:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ec48:	1ab6      	subs	r6, r6, r2
 801ec4a:	1ac9      	subs	r1, r1, r3
 801ec4c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ec50:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801ec54:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801ec58:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801ec5c:	f1bc 0f00 	cmp.w	ip, #0
 801ec60:	f340 80aa 	ble.w	801edb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801ec64:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801ec68:	2e00      	cmp	r6, #0
 801ec6a:	f340 80a5 	ble.w	801edb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801ec6e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801ec72:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801ec76:	4288      	cmp	r0, r1
 801ec78:	db3b      	blt.n	801ecf2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801ec7a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801ec7e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801ec82:	429a      	cmp	r2, r3
 801ec84:	db35      	blt.n	801ecf2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801ec86:	4460      	add	r0, ip
 801ec88:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801ec8c:	4461      	add	r1, ip
 801ec8e:	b200      	sxth	r0, r0
 801ec90:	b209      	sxth	r1, r1
 801ec92:	4288      	cmp	r0, r1
 801ec94:	dc2d      	bgt.n	801ecf2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801ec96:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801ec9a:	4432      	add	r2, r6
 801ec9c:	440b      	add	r3, r1
 801ec9e:	b212      	sxth	r2, r2
 801eca0:	b21b      	sxth	r3, r3
 801eca2:	429a      	cmp	r2, r3
 801eca4:	dc25      	bgt.n	801ecf2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801eca6:	6823      	ldr	r3, [r4, #0]
 801eca8:	4620      	mov	r0, r4
 801ecaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ecac:	4798      	blx	r3
 801ecae:	4682      	mov	sl, r0
 801ecb0:	6828      	ldr	r0, [r5, #0]
 801ecb2:	6803      	ldr	r3, [r0, #0]
 801ecb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ecb6:	4798      	blx	r3
 801ecb8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801ecbc:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ecc0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801ecc4:	9303      	str	r3, [sp, #12]
 801ecc6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ecca:	1a9b      	subs	r3, r3, r2
 801eccc:	b29b      	uxth	r3, r3
 801ecce:	b21c      	sxth	r4, r3
 801ecd0:	2c00      	cmp	r4, #0
 801ecd2:	dc13      	bgt.n	801ecfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 801ecd4:	bf18      	it	ne
 801ecd6:	f8ad 2020 	strhne.w	r2, [sp, #32]
 801ecda:	463c      	mov	r4, r7
 801ecdc:	bf1e      	ittt	ne
 801ecde:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 801ece2:	189b      	addne	r3, r3, r2
 801ece4:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801ece8:	e00f      	b.n	801ed0a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 801ecea:	2300      	movs	r3, #0
 801ecec:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801ecf0:	e7b2      	b.n	801ec58 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 801ecf2:	4b4f      	ldr	r3, [pc, #316]	; (801ee30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 801ecf4:	f240 11ff 	movw	r1, #511	; 0x1ff
 801ecf8:	4a47      	ldr	r2, [pc, #284]	; (801ee18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801ecfa:	e72d      	b.n	801eb58 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ecfc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ed00:	ebab 0303 	sub.w	r3, fp, r3
 801ed04:	443c      	add	r4, r7
 801ed06:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801ed0a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801ed0e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ed12:	1a9b      	subs	r3, r3, r2
 801ed14:	b29b      	uxth	r3, r3
 801ed16:	b219      	sxth	r1, r3
 801ed18:	2900      	cmp	r1, #0
 801ed1a:	dd51      	ble.n	801edc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 801ed1c:	9a03      	ldr	r2, [sp, #12]
 801ed1e:	fb02 4401 	mla	r4, r2, r1, r4
 801ed22:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801ed26:	1ad3      	subs	r3, r2, r3
 801ed28:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801ed2c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801ed30:	2b00      	cmp	r3, #0
 801ed32:	dd41      	ble.n	801edb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801ed34:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801ed38:	2e00      	cmp	r6, #0
 801ed3a:	dd3d      	ble.n	801edb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801ed3c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801ed40:	f04f 0803 	mov.w	r8, #3
 801ed44:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ed48:	fb0a f10c 	mul.w	r1, sl, ip
 801ed4c:	fb12 1808 	smlabb	r8, r2, r8, r1
 801ed50:	4935      	ldr	r1, [pc, #212]	; (801ee28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801ed52:	4480      	add	r8, r0
 801ed54:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801ed58:	8809      	ldrh	r1, [r1, #0]
 801ed5a:	4283      	cmp	r3, r0
 801ed5c:	eba1 0202 	sub.w	r2, r1, r2
 801ed60:	bfa8      	it	ge
 801ed62:	4603      	movge	r3, r0
 801ed64:	4293      	cmp	r3, r2
 801ed66:	bfa8      	it	ge
 801ed68:	4613      	movge	r3, r2
 801ed6a:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 801ed6e:	4296      	cmp	r6, r2
 801ed70:	bfa8      	it	ge
 801ed72:	4616      	movge	r6, r2
 801ed74:	4a2d      	ldr	r2, [pc, #180]	; (801ee2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801ed76:	8812      	ldrh	r2, [r2, #0]
 801ed78:	eba2 0c0c 	sub.w	ip, r2, ip
 801ed7c:	4632      	mov	r2, r6
 801ed7e:	4566      	cmp	r6, ip
 801ed80:	bfa8      	it	ge
 801ed82:	4662      	movge	r2, ip
 801ed84:	4299      	cmp	r1, r3
 801ed86:	9202      	str	r2, [sp, #8]
 801ed88:	d12d      	bne.n	801ede6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801ed8a:	4559      	cmp	r1, fp
 801ed8c:	d12b      	bne.n	801ede6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801ed8e:	6828      	ldr	r0, [r5, #0]
 801ed90:	6803      	ldr	r3, [r0, #0]
 801ed92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ed94:	4798      	blx	r3
 801ed96:	07c3      	lsls	r3, r0, #31
 801ed98:	d51b      	bpl.n	801edd2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 801ed9a:	6828      	ldr	r0, [r5, #0]
 801ed9c:	9b02      	ldr	r3, [sp, #8]
 801ed9e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801eda2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801eda6:	6803      	ldr	r3, [r0, #0]
 801eda8:	f8cd b000 	str.w	fp, [sp]
 801edac:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 801edae:	4623      	mov	r3, r4
 801edb0:	e899 0006 	ldmia.w	r9, {r1, r2}
 801edb4:	47a8      	blx	r5
 801edb6:	4607      	mov	r7, r0
 801edb8:	4638      	mov	r0, r7
 801edba:	b00d      	add	sp, #52	; 0x34
 801edbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edc0:	bf1f      	itttt	ne
 801edc2:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801edc6:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801edca:	189b      	addne	r3, r3, r2
 801edcc:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801edd0:	e7ac      	b.n	801ed2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 801edd2:	6828      	ldr	r0, [r5, #0]
 801edd4:	4642      	mov	r2, r8
 801edd6:	4621      	mov	r1, r4
 801edd8:	6803      	ldr	r3, [r0, #0]
 801edda:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 801eddc:	9b02      	ldr	r3, [sp, #8]
 801edde:	fb03 f30a 	mul.w	r3, r3, sl
 801ede2:	47a8      	blx	r5
 801ede4:	e7e8      	b.n	801edb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801ede6:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 801edea:	f04f 0900 	mov.w	r9, #0
 801edee:	9b02      	ldr	r3, [sp, #8]
 801edf0:	454b      	cmp	r3, r9
 801edf2:	dde1      	ble.n	801edb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801edf4:	6828      	ldr	r0, [r5, #0]
 801edf6:	4642      	mov	r2, r8
 801edf8:	4621      	mov	r1, r4
 801edfa:	44d0      	add	r8, sl
 801edfc:	6803      	ldr	r3, [r0, #0]
 801edfe:	f109 0901 	add.w	r9, r9, #1
 801ee02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ee04:	461e      	mov	r6, r3
 801ee06:	465b      	mov	r3, fp
 801ee08:	47b0      	blx	r6
 801ee0a:	9b03      	ldr	r3, [sp, #12]
 801ee0c:	441c      	add	r4, r3
 801ee0e:	e7ee      	b.n	801edee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 801ee10:	2005677c 	.word	0x2005677c
 801ee14:	0802e933 	.word	0x0802e933
 801ee18:	0802f182 	.word	0x0802f182
 801ee1c:	0802e901 	.word	0x0802e901
 801ee20:	0802e9e5 	.word	0x0802e9e5
 801ee24:	0802ea3a 	.word	0x0802ea3a
 801ee28:	20056776 	.word	0x20056776
 801ee2c:	20056778 	.word	0x20056778
 801ee30:	0802ea78 	.word	0x0802ea78

0801ee34 <_ZN8touchgfx8LCD24bppC1Ev>:
 801ee34:	2200      	movs	r2, #0
 801ee36:	490c      	ldr	r1, [pc, #48]	; (801ee68 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801ee38:	6042      	str	r2, [r0, #4]
 801ee3a:	6001      	str	r1, [r0, #0]
 801ee3c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801ee40:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801ee44:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801ee48:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801ee4c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801ee50:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801ee54:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801ee58:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801ee5c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801ee60:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801ee64:	4770      	bx	lr
 801ee66:	bf00      	nop
 801ee68:	0802ed5c 	.word	0x0802ed5c

0801ee6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801ee6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee70:	4616      	mov	r6, r2
 801ee72:	b091      	sub	sp, #68	; 0x44
 801ee74:	880a      	ldrh	r2, [r1, #0]
 801ee76:	4607      	mov	r7, r0
 801ee78:	4688      	mov	r8, r1
 801ee7a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801ee7e:	b12a      	cbz	r2, 801ee8c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801ee80:	4b67      	ldr	r3, [pc, #412]	; (801f020 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801ee82:	2160      	movs	r1, #96	; 0x60
 801ee84:	4a67      	ldr	r2, [pc, #412]	; (801f024 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b8>)
 801ee86:	4868      	ldr	r0, [pc, #416]	; (801f028 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801ee88:	f007 fdb2 	bl	80269f0 <__assert_func>
 801ee8c:	6830      	ldr	r0, [r6, #0]
 801ee8e:	ac0c      	add	r4, sp, #48	; 0x30
 801ee90:	6871      	ldr	r1, [r6, #4]
 801ee92:	4d66      	ldr	r5, [pc, #408]	; (801f02c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801ee94:	f8df a198 	ldr.w	sl, [pc, #408]	; 801f030 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 801ee98:	c403      	stmia	r4!, {r0, r1}
 801ee9a:	6818      	ldr	r0, [r3, #0]
 801ee9c:	ac0e      	add	r4, sp, #56	; 0x38
 801ee9e:	6859      	ldr	r1, [r3, #4]
 801eea0:	c403      	stmia	r4!, {r0, r1}
 801eea2:	a80c      	add	r0, sp, #48	; 0x30
 801eea4:	f7fa fb38 	bl	8019518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eea8:	4631      	mov	r1, r6
 801eeaa:	a80e      	add	r0, sp, #56	; 0x38
 801eeac:	f7fa fb1c 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801eeb0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801eeb4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801eeb8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801eebc:	6828      	ldr	r0, [r5, #0]
 801eebe:	fb11 2103 	smlabb	r1, r1, r3, r2
 801eec2:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801eec6:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801eeca:	440f      	add	r7, r1
 801eecc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801eed0:	440a      	add	r2, r1
 801eed2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801eed6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801eeda:	4413      	add	r3, r2
 801eedc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801eee0:	6803      	ldr	r3, [r0, #0]
 801eee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eee4:	4798      	blx	r3
 801eee6:	f010 0f80 	tst.w	r0, #128	; 0x80
 801eeea:	6828      	ldr	r0, [r5, #0]
 801eeec:	d01d      	beq.n	801ef2a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801eeee:	2201      	movs	r2, #1
 801eef0:	250b      	movs	r5, #11
 801eef2:	6801      	ldr	r1, [r0, #0]
 801eef4:	b2a4      	uxth	r4, r4
 801eef6:	b2b6      	uxth	r6, r6
 801eef8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801eefc:	e9cd 5207 	strd	r5, r2, [sp, #28]
 801ef00:	f8ba 5000 	ldrh.w	r5, [sl]
 801ef04:	f8cd 9010 	str.w	r9, [sp, #16]
 801ef08:	9602      	str	r6, [sp, #8]
 801ef0a:	9401      	str	r4, [sp, #4]
 801ef0c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801ef10:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801ef14:	9203      	str	r2, [sp, #12]
 801ef16:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ef1a:	9200      	str	r2, [sp, #0]
 801ef1c:	4642      	mov	r2, r8
 801ef1e:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801ef20:	4639      	mov	r1, r7
 801ef22:	47a0      	blx	r4
 801ef24:	b011      	add	sp, #68	; 0x44
 801ef26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef2a:	6803      	ldr	r3, [r0, #0]
 801ef2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef2e:	4798      	blx	r3
 801ef30:	f8ba 5000 	ldrh.w	r5, [sl]
 801ef34:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ef38:	f04f 0e04 	mov.w	lr, #4
 801ef3c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ef40:	436e      	muls	r6, r5
 801ef42:	fb05 2303 	mla	r3, r5, r3, r2
 801ef46:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ef4a:	1b2d      	subs	r5, r5, r4
 801ef4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ef54:	4418      	add	r0, r3
 801ef56:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801ef5a:	1982      	adds	r2, r0, r6
 801ef5c:	1b1b      	subs	r3, r3, r4
 801ef5e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ef62:	930b      	str	r3, [sp, #44]	; 0x2c
 801ef64:	4290      	cmp	r0, r2
 801ef66:	d254      	bcs.n	801f012 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801ef68:	eb00 0a04 	add.w	sl, r0, r4
 801ef6c:	4550      	cmp	r0, sl
 801ef6e:	d24c      	bcs.n	801f00a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19e>
 801ef70:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ef74:	fb1e e101 	smlabb	r1, lr, r1, lr
 801ef78:	eb08 0c01 	add.w	ip, r8, r1
 801ef7c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801ef80:	b173      	cbz	r3, 801efa0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 801ef82:	2bff      	cmp	r3, #255	; 0xff
 801ef84:	f818 b001 	ldrb.w	fp, [r8, r1]
 801ef88:	d10c      	bne.n	801efa4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801ef8a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ef8e:	d109      	bne.n	801efa4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801ef90:	f880 b000 	strb.w	fp, [r0]
 801ef94:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ef98:	7043      	strb	r3, [r0, #1]
 801ef9a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801ef9e:	7083      	strb	r3, [r0, #2]
 801efa0:	3003      	adds	r0, #3
 801efa2:	e7e3      	b.n	801ef6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 801efa4:	fb09 f103 	mul.w	r1, r9, r3
 801efa8:	1c4b      	adds	r3, r1, #1
 801efaa:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801efae:	7801      	ldrb	r1, [r0, #0]
 801efb0:	121b      	asrs	r3, r3, #8
 801efb2:	b29e      	uxth	r6, r3
 801efb4:	43db      	mvns	r3, r3
 801efb6:	fb1b fb06 	smulbb	fp, fp, r6
 801efba:	b2db      	uxtb	r3, r3
 801efbc:	fb01 b103 	mla	r1, r1, r3, fp
 801efc0:	b289      	uxth	r1, r1
 801efc2:	f101 0b01 	add.w	fp, r1, #1
 801efc6:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801efca:	f890 b001 	ldrb.w	fp, [r0, #1]
 801efce:	fb1b fb03 	smulbb	fp, fp, r3
 801efd2:	1209      	asrs	r1, r1, #8
 801efd4:	7001      	strb	r1, [r0, #0]
 801efd6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801efda:	fb01 b106 	mla	r1, r1, r6, fp
 801efde:	b289      	uxth	r1, r1
 801efe0:	f101 0b01 	add.w	fp, r1, #1
 801efe4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801efe8:	1209      	asrs	r1, r1, #8
 801efea:	7041      	strb	r1, [r0, #1]
 801efec:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801eff0:	f890 c002 	ldrb.w	ip, [r0, #2]
 801eff4:	fb1c f303 	smulbb	r3, ip, r3
 801eff8:	fb01 3606 	mla	r6, r1, r6, r3
 801effc:	b2b6      	uxth	r6, r6
 801effe:	1c73      	adds	r3, r6, #1
 801f000:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f004:	1236      	asrs	r6, r6, #8
 801f006:	7086      	strb	r6, [r0, #2]
 801f008:	e7ca      	b.n	801efa0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 801f00a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f00c:	4428      	add	r0, r5
 801f00e:	441f      	add	r7, r3
 801f010:	e7a8      	b.n	801ef64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801f012:	4b06      	ldr	r3, [pc, #24]	; (801f02c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801f014:	6818      	ldr	r0, [r3, #0]
 801f016:	6803      	ldr	r3, [r0, #0]
 801f018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f01a:	4798      	blx	r3
 801f01c:	e782      	b.n	801ef24 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 801f01e:	bf00      	nop
 801f020:	0802e865 	.word	0x0802e865
 801f024:	0802efa4 	.word	0x0802efa4
 801f028:	0802e901 	.word	0x0802e901
 801f02c:	2005677c 	.word	0x2005677c
 801f030:	20056776 	.word	0x20056776

0801f034 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801f034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f038:	f8b1 9000 	ldrh.w	r9, [r1]
 801f03c:	b091      	sub	sp, #68	; 0x44
 801f03e:	4604      	mov	r4, r0
 801f040:	460e      	mov	r6, r1
 801f042:	f1b9 0f01 	cmp.w	r9, #1
 801f046:	4690      	mov	r8, r2
 801f048:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801f04c:	d005      	beq.n	801f05a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 801f04e:	4b68      	ldr	r3, [pc, #416]	; (801f1f0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801f050:	21ae      	movs	r1, #174	; 0xae
 801f052:	4a68      	ldr	r2, [pc, #416]	; (801f1f4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801f054:	4868      	ldr	r0, [pc, #416]	; (801f1f8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801f056:	f007 fccb 	bl	80269f0 <__assert_func>
 801f05a:	6810      	ldr	r0, [r2, #0]
 801f05c:	ad0c      	add	r5, sp, #48	; 0x30
 801f05e:	6851      	ldr	r1, [r2, #4]
 801f060:	f8df a198 	ldr.w	sl, [pc, #408]	; 801f1fc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801f064:	f8df b198 	ldr.w	fp, [pc, #408]	; 801f200 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801f068:	c503      	stmia	r5!, {r0, r1}
 801f06a:	6818      	ldr	r0, [r3, #0]
 801f06c:	ad0e      	add	r5, sp, #56	; 0x38
 801f06e:	6859      	ldr	r1, [r3, #4]
 801f070:	c503      	stmia	r5!, {r0, r1}
 801f072:	a80c      	add	r0, sp, #48	; 0x30
 801f074:	f7fa fa50 	bl	8019518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f078:	4641      	mov	r1, r8
 801f07a:	a80e      	add	r0, sp, #56	; 0x38
 801f07c:	f7fa fa34 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f080:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f084:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f088:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801f08c:	f8da 0000 	ldr.w	r0, [sl]
 801f090:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f094:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801f098:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801f09c:	440c      	add	r4, r1
 801f09e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801f0a2:	440a      	add	r2, r1
 801f0a4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f0a8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801f0ac:	4413      	add	r3, r2
 801f0ae:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f0b2:	6803      	ldr	r3, [r0, #0]
 801f0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f0b6:	4798      	blx	r3
 801f0b8:	f010 0f80 	tst.w	r0, #128	; 0x80
 801f0bc:	f8da 0000 	ldr.w	r0, [sl]
 801f0c0:	d01e      	beq.n	801f100 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801f0c2:	220b      	movs	r2, #11
 801f0c4:	6801      	ldr	r1, [r0, #0]
 801f0c6:	f8cd 9020 	str.w	r9, [sp, #32]
 801f0ca:	b2ad      	uxth	r5, r5
 801f0cc:	9207      	str	r2, [sp, #28]
 801f0ce:	f8bb 2000 	ldrh.w	r2, [fp]
 801f0d2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801f0d6:	9206      	str	r2, [sp, #24]
 801f0d8:	2200      	movs	r2, #0
 801f0da:	9502      	str	r5, [sp, #8]
 801f0dc:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801f0e0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801f0e4:	9203      	str	r2, [sp, #12]
 801f0e6:	fa1f f288 	uxth.w	r2, r8
 801f0ea:	9201      	str	r2, [sp, #4]
 801f0ec:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801f0f0:	9200      	str	r2, [sp, #0]
 801f0f2:	4632      	mov	r2, r6
 801f0f4:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801f0f6:	4621      	mov	r1, r4
 801f0f8:	47a8      	blx	r5
 801f0fa:	b011      	add	sp, #68	; 0x44
 801f0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f100:	6803      	ldr	r3, [r0, #0]
 801f102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f104:	4798      	blx	r3
 801f106:	f8bb 2000 	ldrh.w	r2, [fp]
 801f10a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f10e:	f04f 0e03 	mov.w	lr, #3
 801f112:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801f116:	4355      	muls	r5, r2
 801f118:	fa1f fc87 	uxth.w	ip, r7
 801f11c:	fb02 1303 	mla	r3, r2, r3, r1
 801f120:	eba2 0208 	sub.w	r2, r2, r8
 801f124:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f128:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f12c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f130:	4418      	add	r0, r3
 801f132:	920b      	str	r2, [sp, #44]	; 0x2c
 801f134:	1943      	adds	r3, r0, r5
 801f136:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801f13a:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801f13e:	eba2 0208 	sub.w	r2, r2, r8
 801f142:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f146:	b2ad      	uxth	r5, r5
 801f148:	4298      	cmp	r0, r3
 801f14a:	d24a      	bcs.n	801f1e2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 801f14c:	eb00 0908 	add.w	r9, r0, r8
 801f150:	4621      	mov	r1, r4
 801f152:	4548      	cmp	r0, r9
 801f154:	460c      	mov	r4, r1
 801f156:	d240      	bcs.n	801f1da <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801f158:	f04f 0a04 	mov.w	sl, #4
 801f15c:	7824      	ldrb	r4, [r4, #0]
 801f15e:	2fff      	cmp	r7, #255	; 0xff
 801f160:	f101 0101 	add.w	r1, r1, #1
 801f164:	fb1e a404 	smlabb	r4, lr, r4, sl
 801f168:	eb06 0a04 	add.w	sl, r6, r4
 801f16c:	f816 b004 	ldrb.w	fp, [r6, r4]
 801f170:	d02b      	beq.n	801f1ca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801f172:	7804      	ldrb	r4, [r0, #0]
 801f174:	fb14 f405 	smulbb	r4, r4, r5
 801f178:	fb0b 440c 	mla	r4, fp, ip, r4
 801f17c:	b2a4      	uxth	r4, r4
 801f17e:	f104 0b01 	add.w	fp, r4, #1
 801f182:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801f186:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f18a:	fb1b fb05 	smulbb	fp, fp, r5
 801f18e:	1224      	asrs	r4, r4, #8
 801f190:	7004      	strb	r4, [r0, #0]
 801f192:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801f196:	fb04 b40c 	mla	r4, r4, ip, fp
 801f19a:	b2a4      	uxth	r4, r4
 801f19c:	f104 0b01 	add.w	fp, r4, #1
 801f1a0:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801f1a4:	1224      	asrs	r4, r4, #8
 801f1a6:	7044      	strb	r4, [r0, #1]
 801f1a8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801f1ac:	f890 a002 	ldrb.w	sl, [r0, #2]
 801f1b0:	fb1a fa05 	smulbb	sl, sl, r5
 801f1b4:	fb04 a40c 	mla	r4, r4, ip, sl
 801f1b8:	b2a4      	uxth	r4, r4
 801f1ba:	f104 0a01 	add.w	sl, r4, #1
 801f1be:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801f1c2:	1224      	asrs	r4, r4, #8
 801f1c4:	7084      	strb	r4, [r0, #2]
 801f1c6:	3003      	adds	r0, #3
 801f1c8:	e7c3      	b.n	801f152 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x11e>
 801f1ca:	f880 b000 	strb.w	fp, [r0]
 801f1ce:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801f1d2:	7044      	strb	r4, [r0, #1]
 801f1d4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801f1d8:	e7f4      	b.n	801f1c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x190>
 801f1da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f1dc:	4420      	add	r0, r4
 801f1de:	188c      	adds	r4, r1, r2
 801f1e0:	e7b2      	b.n	801f148 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x114>
 801f1e2:	4b06      	ldr	r3, [pc, #24]	; (801f1fc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801f1e4:	6818      	ldr	r0, [r3, #0]
 801f1e6:	6803      	ldr	r3, [r0, #0]
 801f1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f1ea:	4798      	blx	r3
 801f1ec:	e785      	b.n	801f0fa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801f1ee:	bf00      	nop
 801f1f0:	0802e7e4 	.word	0x0802e7e4
 801f1f4:	0802ee97 	.word	0x0802ee97
 801f1f8:	0802e901 	.word	0x0802e901
 801f1fc:	2005677c 	.word	0x2005677c
 801f200:	20056776 	.word	0x20056776

0801f204 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801f204:	b570      	push	{r4, r5, r6, lr}
 801f206:	780d      	ldrb	r5, [r1, #0]
 801f208:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801f20c:	2d01      	cmp	r5, #1
 801f20e:	d00d      	beq.n	801f22c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801f210:	d307      	bcc.n	801f222 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801f212:	2d02      	cmp	r5, #2
 801f214:	d10f      	bne.n	801f236 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801f216:	4b08      	ldr	r3, [pc, #32]	; (801f238 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801f218:	2153      	movs	r1, #83	; 0x53
 801f21a:	4a08      	ldr	r2, [pc, #32]	; (801f23c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801f21c:	4808      	ldr	r0, [pc, #32]	; (801f240 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801f21e:	f007 fbe7 	bl	80269f0 <__assert_func>
 801f222:	9404      	str	r4, [sp, #16]
 801f224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f228:	f7ff be20 	b.w	801ee6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801f22c:	9404      	str	r4, [sp, #16]
 801f22e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f232:	f7ff beff 	b.w	801f034 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801f236:	bd70      	pop	{r4, r5, r6, pc}
 801f238:	0802e786 	.word	0x0802e786
 801f23c:	0802eda0 	.word	0x0802eda0
 801f240:	0802e901 	.word	0x0802e901

0801f244 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801f244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f248:	4605      	mov	r5, r0
 801f24a:	b08d      	sub	sp, #52	; 0x34
 801f24c:	460c      	mov	r4, r1
 801f24e:	461f      	mov	r7, r3
 801f250:	2b00      	cmp	r3, #0
 801f252:	d051      	beq.n	801f2f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801f254:	6808      	ldr	r0, [r1, #0]
 801f256:	ab08      	add	r3, sp, #32
 801f258:	6849      	ldr	r1, [r1, #4]
 801f25a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801f424 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801f25e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801f428 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801f262:	c303      	stmia	r3!, {r0, r1}
 801f264:	6810      	ldr	r0, [r2, #0]
 801f266:	ab0a      	add	r3, sp, #40	; 0x28
 801f268:	6851      	ldr	r1, [r2, #4]
 801f26a:	c303      	stmia	r3!, {r0, r1}
 801f26c:	a808      	add	r0, sp, #32
 801f26e:	f7fa f953 	bl	8019518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f272:	4621      	mov	r1, r4
 801f274:	a80a      	add	r0, sp, #40	; 0x28
 801f276:	f7fa f937 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f27a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f27e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801f282:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801f286:	f8d8 0000 	ldr.w	r0, [r8]
 801f28a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f28e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801f292:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
 801f296:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801f29a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801f29e:	440a      	add	r2, r1
 801f2a0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801f2a4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801f2a8:	4413      	add	r3, r2
 801f2aa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801f2ae:	6803      	ldr	r3, [r0, #0]
 801f2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f2b2:	4798      	blx	r3
 801f2b4:	2fff      	cmp	r7, #255	; 0xff
 801f2b6:	d022      	beq.n	801f2fe <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 801f2b8:	f010 0f04 	tst.w	r0, #4
 801f2bc:	f8d8 0000 	ldr.w	r0, [r8]
 801f2c0:	d020      	beq.n	801f304 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc0>
 801f2c2:	2100      	movs	r1, #0
 801f2c4:	f04f 0e01 	mov.w	lr, #1
 801f2c8:	f8d0 c000 	ldr.w	ip, [r0]
 801f2cc:	b2a4      	uxth	r4, r4
 801f2ce:	b2b6      	uxth	r6, r6
 801f2d0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f2d4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f2d8:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 801f2dc:	f8b9 e000 	ldrh.w	lr, [r9]
 801f2e0:	9703      	str	r7, [sp, #12]
 801f2e2:	9401      	str	r4, [sp, #4]
 801f2e4:	9600      	str	r6, [sp, #0]
 801f2e6:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801f2ea:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801f2ee:	9102      	str	r1, [sp, #8]
 801f2f0:	4629      	mov	r1, r5
 801f2f2:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
 801f2f6:	47a0      	blx	r4
 801f2f8:	b00d      	add	sp, #52	; 0x34
 801f2fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f2fe:	f010 0f01 	tst.w	r0, #1
 801f302:	e7db      	b.n	801f2bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801f304:	6803      	ldr	r3, [r0, #0]
 801f306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f308:	4798      	blx	r3
 801f30a:	f8b9 1000 	ldrh.w	r1, [r9]
 801f30e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801f312:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801f316:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f31a:	434c      	muls	r4, r1
 801f31c:	2fff      	cmp	r7, #255	; 0xff
 801f31e:	fb01 2303 	mla	r3, r1, r3, r2
 801f322:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f326:	eba1 0106 	sub.w	r1, r1, r6
 801f32a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f32e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f332:	4418      	add	r0, r3
 801f334:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801f338:	eba3 0606 	sub.w	r6, r3, r6
 801f33c:	4404      	add	r4, r0
 801f33e:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801f342:	d04a      	beq.n	801f3da <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 801f344:	43fa      	mvns	r2, r7
 801f346:	b2bb      	uxth	r3, r7
 801f348:	b2d7      	uxtb	r7, r2
 801f34a:	42a0      	cmp	r0, r4
 801f34c:	d263      	bcs.n	801f416 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801f34e:	eb00 0e0c 	add.w	lr, r0, ip
 801f352:	4586      	cmp	lr, r0
 801f354:	f100 0803 	add.w	r8, r0, #3
 801f358:	d93a      	bls.n	801f3d0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18c>
 801f35a:	f835 2b02 	ldrh.w	r2, [r5], #2
 801f35e:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801f362:	00d0      	lsls	r0, r2, #3
 801f364:	fb19 f907 	smulbb	r9, r9, r7
 801f368:	b2c0      	uxtb	r0, r0
 801f36a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801f36e:	fb00 9003 	mla	r0, r0, r3, r9
 801f372:	b280      	uxth	r0, r0
 801f374:	f100 0901 	add.w	r9, r0, #1
 801f378:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801f37c:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801f380:	fb19 f907 	smulbb	r9, r9, r7
 801f384:	1200      	asrs	r0, r0, #8
 801f386:	f808 0c03 	strb.w	r0, [r8, #-3]
 801f38a:	10d0      	asrs	r0, r2, #3
 801f38c:	1212      	asrs	r2, r2, #8
 801f38e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f392:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801f396:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801f39a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f39e:	fb00 9003 	mla	r0, r0, r3, r9
 801f3a2:	b280      	uxth	r0, r0
 801f3a4:	f100 0901 	add.w	r9, r0, #1
 801f3a8:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801f3ac:	1200      	asrs	r0, r0, #8
 801f3ae:	f808 0c02 	strb.w	r0, [r8, #-2]
 801f3b2:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801f3b6:	fb10 f007 	smulbb	r0, r0, r7
 801f3ba:	fb02 0203 	mla	r2, r2, r3, r0
 801f3be:	b292      	uxth	r2, r2
 801f3c0:	1c50      	adds	r0, r2, #1
 801f3c2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f3c6:	4640      	mov	r0, r8
 801f3c8:	1212      	asrs	r2, r2, #8
 801f3ca:	f808 2c01 	strb.w	r2, [r8, #-1]
 801f3ce:	e7c0      	b.n	801f352 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10e>
 801f3d0:	4408      	add	r0, r1
 801f3d2:	4435      	add	r5, r6
 801f3d4:	e7b9      	b.n	801f34a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x106>
 801f3d6:	4408      	add	r0, r1
 801f3d8:	4435      	add	r5, r6
 801f3da:	42a0      	cmp	r0, r4
 801f3dc:	d21b      	bcs.n	801f416 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801f3de:	eb00 070c 	add.w	r7, r0, ip
 801f3e2:	42b8      	cmp	r0, r7
 801f3e4:	d2f7      	bcs.n	801f3d6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x192>
 801f3e6:	f835 3b02 	ldrh.w	r3, [r5], #2
 801f3ea:	3003      	adds	r0, #3
 801f3ec:	00da      	lsls	r2, r3, #3
 801f3ee:	b2d2      	uxtb	r2, r2
 801f3f0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f3f4:	f800 2c03 	strb.w	r2, [r0, #-3]
 801f3f8:	10da      	asrs	r2, r3, #3
 801f3fa:	121b      	asrs	r3, r3, #8
 801f3fc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f400:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f404:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801f408:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801f40c:	f800 2c02 	strb.w	r2, [r0, #-2]
 801f410:	f800 3c01 	strb.w	r3, [r0, #-1]
 801f414:	e7e5      	b.n	801f3e2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x19e>
 801f416:	4b03      	ldr	r3, [pc, #12]	; (801f424 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801f418:	6818      	ldr	r0, [r3, #0]
 801f41a:	6803      	ldr	r3, [r0, #0]
 801f41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f41e:	4798      	blx	r3
 801f420:	e76a      	b.n	801f2f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801f422:	bf00      	nop
 801f424:	2005677c 	.word	0x2005677c
 801f428:	20056776 	.word	0x20056776

0801f42c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801f42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f430:	b088      	sub	sp, #32
 801f432:	460d      	mov	r5, r1
 801f434:	4604      	mov	r4, r0
 801f436:	461e      	mov	r6, r3
 801f438:	6808      	ldr	r0, [r1, #0]
 801f43a:	ab04      	add	r3, sp, #16
 801f43c:	6849      	ldr	r1, [r1, #4]
 801f43e:	4f5c      	ldr	r7, [pc, #368]	; (801f5b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x184>)
 801f440:	c303      	stmia	r3!, {r0, r1}
 801f442:	6810      	ldr	r0, [r2, #0]
 801f444:	ab06      	add	r3, sp, #24
 801f446:	6851      	ldr	r1, [r2, #4]
 801f448:	c303      	stmia	r3!, {r0, r1}
 801f44a:	a804      	add	r0, sp, #16
 801f44c:	f7fa f864 	bl	8019518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f450:	4629      	mov	r1, r5
 801f452:	a806      	add	r0, sp, #24
 801f454:	f7fa f848 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f458:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801f45c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801f460:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f464:	6838      	ldr	r0, [r7, #0]
 801f466:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f46a:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 801f46e:	f9bd 501e 	ldrsh.w	r5, [sp, #30]
 801f472:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801f476:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801f47a:	440a      	add	r2, r1
 801f47c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f480:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801f484:	4413      	add	r3, r2
 801f486:	f8ad 301a 	strh.w	r3, [sp, #26]
 801f48a:	6803      	ldr	r3, [r0, #0]
 801f48c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f48e:	4798      	blx	r3
 801f490:	2eff      	cmp	r6, #255	; 0xff
 801f492:	d117      	bne.n	801f4c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801f494:	f010 0f20 	tst.w	r0, #32
 801f498:	6838      	ldr	r0, [r7, #0]
 801f49a:	d016      	beq.n	801f4ca <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801f49c:	b2ad      	uxth	r5, r5
 801f49e:	6801      	ldr	r1, [r0, #0]
 801f4a0:	9603      	str	r6, [sp, #12]
 801f4a2:	9501      	str	r5, [sp, #4]
 801f4a4:	fa1f f588 	uxth.w	r5, r8
 801f4a8:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 801f4ac:	9500      	str	r5, [sp, #0]
 801f4ae:	9602      	str	r6, [sp, #8]
 801f4b0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801f4b4:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 801f4b6:	4621      	mov	r1, r4
 801f4b8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801f4bc:	47a8      	blx	r5
 801f4be:	b008      	add	sp, #32
 801f4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f4c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f4c8:	e7e6      	b.n	801f498 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801f4ca:	6803      	ldr	r3, [r0, #0]
 801f4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4ce:	4798      	blx	r3
 801f4d0:	4b38      	ldr	r3, [pc, #224]	; (801f5b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801f4d2:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801f4d6:	f8b3 c000 	ldrh.w	ip, [r3]
 801f4da:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801f4de:	fb0c f505 	mul.w	r5, ip, r5
 801f4e2:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 801f4e6:	fb0c 2303 	mla	r3, ip, r3, r2
 801f4ea:	ebac 0c08 	sub.w	ip, ip, r8
 801f4ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f4f2:	ebae 0e08 	sub.w	lr, lr, r8
 801f4f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4fa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f4fe:	4418      	add	r0, r3
 801f500:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801f504:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801f508:	4405      	add	r5, r0
 801f50a:	42a8      	cmp	r0, r5
 801f50c:	d24a      	bcs.n	801f5a4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x178>
 801f50e:	eb00 0803 	add.w	r8, r0, r3
 801f512:	4540      	cmp	r0, r8
 801f514:	d243      	bcs.n	801f59e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x172>
 801f516:	78e2      	ldrb	r2, [r4, #3]
 801f518:	b15a      	cbz	r2, 801f532 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801f51a:	2aff      	cmp	r2, #255	; 0xff
 801f51c:	f894 9000 	ldrb.w	r9, [r4]
 801f520:	d10a      	bne.n	801f538 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801f522:	2eff      	cmp	r6, #255	; 0xff
 801f524:	d108      	bne.n	801f538 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801f526:	f880 9000 	strb.w	r9, [r0]
 801f52a:	7862      	ldrb	r2, [r4, #1]
 801f52c:	7042      	strb	r2, [r0, #1]
 801f52e:	78a2      	ldrb	r2, [r4, #2]
 801f530:	7082      	strb	r2, [r0, #2]
 801f532:	3003      	adds	r0, #3
 801f534:	3404      	adds	r4, #4
 801f536:	e7ec      	b.n	801f512 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe6>
 801f538:	4372      	muls	r2, r6
 801f53a:	1c51      	adds	r1, r2, #1
 801f53c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801f540:	1209      	asrs	r1, r1, #8
 801f542:	fa1f fa81 	uxth.w	sl, r1
 801f546:	43c9      	mvns	r1, r1
 801f548:	fb19 f90a 	smulbb	r9, r9, sl
 801f54c:	b2ca      	uxtb	r2, r1
 801f54e:	7801      	ldrb	r1, [r0, #0]
 801f550:	fb01 9902 	mla	r9, r1, r2, r9
 801f554:	fa1f f989 	uxth.w	r9, r9
 801f558:	f109 0101 	add.w	r1, r9, #1
 801f55c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801f560:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f564:	f880 9000 	strb.w	r9, [r0]
 801f568:	f890 9001 	ldrb.w	r9, [r0, #1]
 801f56c:	7861      	ldrb	r1, [r4, #1]
 801f56e:	fb19 f902 	smulbb	r9, r9, r2
 801f572:	fb01 910a 	mla	r1, r1, sl, r9
 801f576:	b289      	uxth	r1, r1
 801f578:	f101 0901 	add.w	r9, r1, #1
 801f57c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801f580:	1209      	asrs	r1, r1, #8
 801f582:	7041      	strb	r1, [r0, #1]
 801f584:	7881      	ldrb	r1, [r0, #2]
 801f586:	f894 9002 	ldrb.w	r9, [r4, #2]
 801f58a:	fb11 f202 	smulbb	r2, r1, r2
 801f58e:	fb09 220a 	mla	r2, r9, sl, r2
 801f592:	b292      	uxth	r2, r2
 801f594:	1c51      	adds	r1, r2, #1
 801f596:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f59a:	1212      	asrs	r2, r2, #8
 801f59c:	e7c8      	b.n	801f530 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x104>
 801f59e:	4460      	add	r0, ip
 801f5a0:	4474      	add	r4, lr
 801f5a2:	e7b2      	b.n	801f50a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801f5a4:	6838      	ldr	r0, [r7, #0]
 801f5a6:	6803      	ldr	r3, [r0, #0]
 801f5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f5aa:	4798      	blx	r3
 801f5ac:	e787      	b.n	801f4be <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x92>
 801f5ae:	bf00      	nop
 801f5b0:	2005677c 	.word	0x2005677c
 801f5b4:	20056776 	.word	0x20056776

0801f5b8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801f5b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f5bc:	b085      	sub	sp, #20
 801f5be:	4606      	mov	r6, r0
 801f5c0:	460c      	mov	r4, r1
 801f5c2:	4691      	mov	r9, r2
 801f5c4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801f5c8:	4698      	mov	r8, r3
 801f5ca:	b31d      	cbz	r5, 801f614 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f5cc:	4608      	mov	r0, r1
 801f5ce:	f7fd f9e3 	bl	801c998 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f5d2:	4607      	mov	r7, r0
 801f5d4:	4620      	mov	r0, r4
 801f5d6:	f7fd fa19 	bl	801ca0c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f5da:	f8ad 000e 	strh.w	r0, [sp, #14]
 801f5de:	4620      	mov	r0, r4
 801f5e0:	f8ad 9008 	strh.w	r9, [sp, #8]
 801f5e4:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f5e8:	f8ad 700c 	strh.w	r7, [sp, #12]
 801f5ec:	f7fd fad2 	bl	801cb94 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f5f0:	280b      	cmp	r0, #11
 801f5f2:	d838      	bhi.n	801f666 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 801f5f4:	e8df f000 	tbb	[pc, r0]
 801f5f8:	37062920 	.word	0x37062920
 801f5fc:	37373737 	.word	0x37373737
 801f600:	11373737 	.word	0x11373737
 801f604:	4620      	mov	r0, r4
 801f606:	f7fd fa3b 	bl	801ca80 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f60a:	462b      	mov	r3, r5
 801f60c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f60e:	a902      	add	r1, sp, #8
 801f610:	f7ff ff0c 	bl	801f42c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f614:	b005      	add	sp, #20
 801f616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f61a:	4620      	mov	r0, r4
 801f61c:	f7fd fa30 	bl	801ca80 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f620:	4606      	mov	r6, r0
 801f622:	4620      	mov	r0, r4
 801f624:	f7fd fa5e 	bl	801cae4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801f628:	9500      	str	r5, [sp, #0]
 801f62a:	4601      	mov	r1, r0
 801f62c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f62e:	aa02      	add	r2, sp, #8
 801f630:	4630      	mov	r0, r6
 801f632:	f7ff fde7 	bl	801f204 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801f636:	e7ed      	b.n	801f614 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f638:	4620      	mov	r0, r4
 801f63a:	f7fd fa21 	bl	801ca80 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f63e:	462b      	mov	r3, r5
 801f640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f642:	a902      	add	r1, sp, #8
 801f644:	f7ff fdfe 	bl	801f244 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801f648:	e7e4      	b.n	801f614 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f64a:	6833      	ldr	r3, [r6, #0]
 801f64c:	4620      	mov	r0, r4
 801f64e:	68df      	ldr	r7, [r3, #12]
 801f650:	f7fd fa16 	bl	801ca80 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f654:	2300      	movs	r3, #0
 801f656:	4601      	mov	r1, r0
 801f658:	aa02      	add	r2, sp, #8
 801f65a:	4630      	mov	r0, r6
 801f65c:	e9cd 5300 	strd	r5, r3, [sp]
 801f660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f662:	47b8      	blx	r7
 801f664:	e7d6      	b.n	801f614 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f666:	4b03      	ldr	r3, [pc, #12]	; (801f674 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 801f668:	2147      	movs	r1, #71	; 0x47
 801f66a:	4a03      	ldr	r2, [pc, #12]	; (801f678 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801f66c:	4803      	ldr	r0, [pc, #12]	; (801f67c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801f66e:	f007 f9bf 	bl	80269f0 <__assert_func>
 801f672:	bf00      	nop
 801f674:	0802e832 	.word	0x0802e832
 801f678:	0802ef20 	.word	0x0802ef20
 801f67c:	0802e901 	.word	0x0802e901

0801f680 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801f680:	b570      	push	{r4, r5, r6, lr}
 801f682:	9d04      	ldr	r5, [sp, #16]
 801f684:	460c      	mov	r4, r1
 801f686:	4619      	mov	r1, r3
 801f688:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801f68c:	2a0d      	cmp	r2, #13
 801f68e:	d826      	bhi.n	801f6de <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801f690:	e8df f002 	tbb	[pc, r2]
 801f694:	200e1407 	.word	0x200e1407
 801f698:	20202020 	.word	0x20202020
 801f69c:	20202020 	.word	0x20202020
 801f6a0:	2020      	.short	0x2020
 801f6a2:	4b0f      	ldr	r3, [pc, #60]	; (801f6e0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801f6a4:	f240 11d3 	movw	r1, #467	; 0x1d3
 801f6a8:	4a0e      	ldr	r2, [pc, #56]	; (801f6e4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801f6aa:	480f      	ldr	r0, [pc, #60]	; (801f6e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801f6ac:	f007 f9a0 	bl	80269f0 <__assert_func>
 801f6b0:	462a      	mov	r2, r5
 801f6b2:	4620      	mov	r0, r4
 801f6b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f6b8:	f7ff beb8 	b.w	801f42c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f6bc:	6802      	ldr	r2, [r0, #0]
 801f6be:	2600      	movs	r6, #0
 801f6c0:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801f6c4:	68d6      	ldr	r6, [r2, #12]
 801f6c6:	462b      	mov	r3, r5
 801f6c8:	460a      	mov	r2, r1
 801f6ca:	4621      	mov	r1, r4
 801f6cc:	46b4      	mov	ip, r6
 801f6ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f6d2:	4760      	bx	ip
 801f6d4:	4b05      	ldr	r3, [pc, #20]	; (801f6ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801f6d6:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 801f6da:	4a02      	ldr	r2, [pc, #8]	; (801f6e4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801f6dc:	e7e5      	b.n	801f6aa <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801f6de:	bd70      	pop	{r4, r5, r6, pc}
 801f6e0:	0802ead8 	.word	0x0802ead8
 801f6e4:	0802f208 	.word	0x0802f208
 801f6e8:	0802e901 	.word	0x0802e901
 801f6ec:	0802eb19 	.word	0x0802eb19

0801f6f0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801f6f0:	b158      	cbz	r0, 801f70a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801f6f2:	2902      	cmp	r1, #2
 801f6f4:	d00f      	beq.n	801f716 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801f6f6:	2903      	cmp	r1, #3
 801f6f8:	d010      	beq.n	801f71c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801f6fa:	2901      	cmp	r1, #1
 801f6fc:	d101      	bne.n	801f702 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f6fe:	2001      	movs	r0, #1
 801f700:	4770      	bx	lr
 801f702:	4b08      	ldr	r3, [pc, #32]	; (801f724 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801f704:	8819      	ldrh	r1, [r3, #0]
 801f706:	4248      	negs	r0, r1
 801f708:	4770      	bx	lr
 801f70a:	2902      	cmp	r1, #2
 801f70c:	d006      	beq.n	801f71c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801f70e:	2903      	cmp	r1, #3
 801f710:	d0f7      	beq.n	801f702 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f712:	2901      	cmp	r1, #1
 801f714:	d1f3      	bne.n	801f6fe <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801f716:	4b03      	ldr	r3, [pc, #12]	; (801f724 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801f718:	8818      	ldrh	r0, [r3, #0]
 801f71a:	4770      	bx	lr
 801f71c:	f04f 30ff 	mov.w	r0, #4294967295
 801f720:	4770      	bx	lr
 801f722:	bf00      	nop
 801f724:	20056776 	.word	0x20056776

0801f728 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801f728:	b170      	cbz	r0, 801f748 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801f72a:	2902      	cmp	r1, #2
 801f72c:	d012      	beq.n	801f754 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801f72e:	2903      	cmp	r1, #3
 801f730:	d006      	beq.n	801f740 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801f732:	2901      	cmp	r1, #1
 801f734:	d001      	beq.n	801f73a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801f736:	2001      	movs	r0, #1
 801f738:	4770      	bx	lr
 801f73a:	4b08      	ldr	r3, [pc, #32]	; (801f75c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801f73c:	8818      	ldrh	r0, [r3, #0]
 801f73e:	4770      	bx	lr
 801f740:	4b06      	ldr	r3, [pc, #24]	; (801f75c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801f742:	8818      	ldrh	r0, [r3, #0]
 801f744:	4240      	negs	r0, r0
 801f746:	4770      	bx	lr
 801f748:	2902      	cmp	r1, #2
 801f74a:	d0f9      	beq.n	801f740 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801f74c:	2903      	cmp	r1, #3
 801f74e:	d0f2      	beq.n	801f736 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801f750:	2901      	cmp	r1, #1
 801f752:	d1f2      	bne.n	801f73a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801f754:	f04f 30ff 	mov.w	r0, #4294967295
 801f758:	4770      	bx	lr
 801f75a:	bf00      	nop
 801f75c:	20056776 	.word	0x20056776

0801f760 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801f760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f764:	b095      	sub	sp, #84	; 0x54
 801f766:	9109      	str	r1, [sp, #36]	; 0x24
 801f768:	a910      	add	r1, sp, #64	; 0x40
 801f76a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801f76e:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
 801f772:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801f776:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801f77a:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801f77e:	e881 000c 	stmia.w	r1, {r2, r3}
 801f782:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801f786:	9308      	str	r3, [sp, #32]
 801f788:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801f78c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801f790:	930f      	str	r3, [sp, #60]	; 0x3c
 801f792:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801f796:	798d      	ldrb	r5, [r1, #6]
 801f798:	930a      	str	r3, [sp, #40]	; 0x28
 801f79a:	7b4b      	ldrb	r3, [r1, #13]
 801f79c:	0158      	lsls	r0, r3, #5
 801f79e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801f7a2:	4328      	orrs	r0, r5
 801f7a4:	9007      	str	r0, [sp, #28]
 801f7a6:	f000 817a 	beq.w	801fa9e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f7aa:	011b      	lsls	r3, r3, #4
 801f7ac:	79c8      	ldrb	r0, [r1, #7]
 801f7ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f7b2:	4303      	orrs	r3, r0
 801f7b4:	930c      	str	r3, [sp, #48]	; 0x30
 801f7b6:	f000 8172 	beq.w	801fa9e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f7ba:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801f7be:	b29b      	uxth	r3, r3
 801f7c0:	2f00      	cmp	r7, #0
 801f7c2:	f000 8117 	beq.w	801f9f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 801f7c6:	1aff      	subs	r7, r7, r3
 801f7c8:	b2bf      	uxth	r7, r7
 801f7ca:	043b      	lsls	r3, r7, #16
 801f7cc:	d502      	bpl.n	801f7d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f7ce:	1bf6      	subs	r6, r6, r7
 801f7d0:	2700      	movs	r7, #0
 801f7d2:	b236      	sxth	r6, r6
 801f7d4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f7d8:	a810      	add	r0, sp, #64	; 0x40
 801f7da:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801f7de:	428e      	cmp	r6, r1
 801f7e0:	b28b      	uxth	r3, r1
 801f7e2:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801f7e6:	bfbf      	itttt	lt
 801f7e8:	18ff      	addlt	r7, r7, r3
 801f7ea:	1bbe      	sublt	r6, r7, r6
 801f7ec:	b2b7      	uxthlt	r7, r6
 801f7ee:	460e      	movlt	r6, r1
 801f7f0:	8891      	ldrh	r1, [r2, #4]
 801f7f2:	440b      	add	r3, r1
 801f7f4:	4631      	mov	r1, r6
 801f7f6:	b21b      	sxth	r3, r3
 801f7f8:	930e      	str	r3, [sp, #56]	; 0x38
 801f7fa:	88d3      	ldrh	r3, [r2, #6]
 801f7fc:	9a08      	ldr	r2, [sp, #32]
 801f7fe:	449a      	add	sl, r3
 801f800:	fa0f f38a 	sxth.w	r3, sl
 801f804:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 801f808:	930d      	str	r3, [sp, #52]	; 0x34
 801f80a:	4bb4      	ldr	r3, [pc, #720]	; (801fadc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801f80c:	f893 b000 	ldrb.w	fp, [r3]
 801f810:	f10b 3cff 	add.w	ip, fp, #4294967295
 801f814:	f1dc 0300 	rsbs	r3, ip, #0
 801f818:	eb43 030c 	adc.w	r3, r3, ip
 801f81c:	930b      	str	r3, [sp, #44]	; 0x2c
 801f81e:	464b      	mov	r3, r9
 801f820:	f7f9 fcd3 	bl	80191ca <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f824:	4631      	mov	r1, r6
 801f826:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801f82a:	464b      	mov	r3, r9
 801f82c:	9a08      	ldr	r2, [sp, #32]
 801f82e:	a810      	add	r0, sp, #64	; 0x40
 801f830:	f7f9 fce3 	bl	80191fa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f834:	a914      	add	r1, sp, #80	; 0x50
 801f836:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801f83a:	a813      	add	r0, sp, #76	; 0x4c
 801f83c:	f7f9 fe3e 	bl	80194bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801f840:	f1b9 0f00 	cmp.w	r9, #0
 801f844:	f040 80d9 	bne.w	801f9fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 801f848:	f1bb 0f01 	cmp.w	fp, #1
 801f84c:	f040 80dd 	bne.w	801fa0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 801f850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f852:	b153      	cbz	r3, 801f86a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801f854:	2508      	movs	r5, #8
 801f856:	9a07      	ldr	r2, [sp, #28]
 801f858:	fb95 f3f8 	sdiv	r3, r5, r8
 801f85c:	1e5d      	subs	r5, r3, #1
 801f85e:	4415      	add	r5, r2
 801f860:	fb95 f5f3 	sdiv	r5, r5, r3
 801f864:	fb15 f503 	smulbb	r5, r5, r3
 801f868:	b2ad      	uxth	r5, r5
 801f86a:	b907      	cbnz	r7, 801f86e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801f86c:	b16c      	cbz	r4, 801f88a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801f86e:	fb04 7305 	mla	r3, r4, r5, r7
 801f872:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f874:	ebaa 0a04 	sub.w	sl, sl, r4
 801f878:	fb08 f303 	mul.w	r3, r8, r3
 801f87c:	fa1f fa8a 	uxth.w	sl, sl
 801f880:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801f884:	f003 0407 	and.w	r4, r3, #7
 801f888:	9224      	str	r2, [sp, #144]	; 0x90
 801f88a:	4649      	mov	r1, r9
 801f88c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f88e:	f7ff ff2f 	bl	801f6f0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801f892:	4649      	mov	r1, r9
 801f894:	4683      	mov	fp, r0
 801f896:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f898:	f7ff ff46 	bl	801f728 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801f89c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f89e:	9a08      	ldr	r2, [sp, #32]
 801f8a0:	4681      	mov	r9, r0
 801f8a2:	1a9b      	subs	r3, r3, r2
 801f8a4:	459a      	cmp	sl, r3
 801f8a6:	bfa8      	it	ge
 801f8a8:	469a      	movge	sl, r3
 801f8aa:	f1ba 0f00 	cmp.w	sl, #0
 801f8ae:	f340 80f6 	ble.w	801fa9e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f8b2:	1bf6      	subs	r6, r6, r7
 801f8b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f8b6:	1b9e      	subs	r6, r3, r6
 801f8b8:	9b07      	ldr	r3, [sp, #28]
 801f8ba:	429e      	cmp	r6, r3
 801f8bc:	bfd4      	ite	le
 801f8be:	ebc7 0706 	rsble	r7, r7, r6
 801f8c2:	ebc7 0703 	rsbgt	r7, r7, r3
 801f8c6:	2f00      	cmp	r7, #0
 801f8c8:	f340 80e9 	ble.w	801fa9e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f8cc:	1bed      	subs	r5, r5, r7
 801f8ce:	fb08 f305 	mul.w	r3, r8, r5
 801f8d2:	930b      	str	r3, [sp, #44]	; 0x2c
 801f8d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f8d6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f8da:	930c      	str	r3, [sp, #48]	; 0x30
 801f8dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f8de:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f8e2:	930d      	str	r3, [sp, #52]	; 0x34
 801f8e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f8e6:	b2db      	uxtb	r3, r3
 801f8e8:	930e      	str	r3, [sp, #56]	; 0x38
 801f8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8ec:	2b00      	cmp	r3, #0
 801f8ee:	f040 80db 	bne.w	801faa8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801f8f2:	4b7b      	ldr	r3, [pc, #492]	; (801fae0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801f8f4:	6818      	ldr	r0, [r3, #0]
 801f8f6:	6803      	ldr	r3, [r0, #0]
 801f8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8fa:	4798      	blx	r3
 801f8fc:	2301      	movs	r3, #1
 801f8fe:	4a79      	ldr	r2, [pc, #484]	; (801fae4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801f900:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801f904:	fb07 9b1b 	mls	fp, r7, fp, r9
 801f908:	fa03 f308 	lsl.w	r3, r3, r8
 801f90c:	8811      	ldrh	r1, [r2, #0]
 801f90e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801f912:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801f916:	3b01      	subs	r3, #1
 801f918:	fb06 bb07 	mla	fp, r6, r7, fp
 801f91c:	b2db      	uxtb	r3, r3
 801f91e:	9308      	str	r3, [sp, #32]
 801f920:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801f924:	fb01 2303 	mla	r3, r1, r3, r2
 801f928:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f92c:	18c3      	adds	r3, r0, r3
 801f92e:	9307      	str	r3, [sp, #28]
 801f930:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f932:	781a      	ldrb	r2, [r3, #0]
 801f934:	4122      	asrs	r2, r4
 801f936:	b2d2      	uxtb	r2, r2
 801f938:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801f93c:	f0c0 80d4 	bcc.w	801fae8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 801f940:	46be      	mov	lr, r7
 801f942:	9907      	ldr	r1, [sp, #28]
 801f944:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801f948:	f0c0 80b7 	bcc.w	801faba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35a>
 801f94c:	9b08      	ldr	r3, [sp, #32]
 801f94e:	4013      	ands	r3, r2
 801f950:	d041      	beq.n	801f9d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801f952:	20ff      	movs	r0, #255	; 0xff
 801f954:	9d08      	ldr	r5, [sp, #32]
 801f956:	fb90 f5f5 	sdiv	r5, r0, r5
 801f95a:	436b      	muls	r3, r5
 801f95c:	2bfe      	cmp	r3, #254	; 0xfe
 801f95e:	dd03      	ble.n	801f968 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801f960:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f962:	4285      	cmp	r5, r0
 801f964:	f000 80a2 	beq.w	801faac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801f968:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f96a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f96c:	fb15 f303 	smulbb	r3, r5, r3
 801f970:	b29b      	uxth	r3, r3
 801f972:	1c5d      	adds	r5, r3, #1
 801f974:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801f978:	780d      	ldrb	r5, [r1, #0]
 801f97a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f97e:	fa1f fc83 	uxth.w	ip, r3
 801f982:	43db      	mvns	r3, r3
 801f984:	fb10 f90c 	smulbb	r9, r0, ip
 801f988:	b2db      	uxtb	r3, r3
 801f98a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f98c:	fb05 9503 	mla	r5, r5, r3, r9
 801f990:	b2ad      	uxth	r5, r5
 801f992:	f105 0901 	add.w	r9, r5, #1
 801f996:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f99a:	fb10 f90c 	smulbb	r9, r0, ip
 801f99e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f9a0:	122d      	asrs	r5, r5, #8
 801f9a2:	fb10 fc0c 	smulbb	ip, r0, ip
 801f9a6:	700d      	strb	r5, [r1, #0]
 801f9a8:	784d      	ldrb	r5, [r1, #1]
 801f9aa:	fb05 9503 	mla	r5, r5, r3, r9
 801f9ae:	b2ad      	uxth	r5, r5
 801f9b0:	f105 0901 	add.w	r9, r5, #1
 801f9b4:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f9b8:	122d      	asrs	r5, r5, #8
 801f9ba:	704d      	strb	r5, [r1, #1]
 801f9bc:	788d      	ldrb	r5, [r1, #2]
 801f9be:	fb05 cc03 	mla	ip, r5, r3, ip
 801f9c2:	fa1f fc8c 	uxth.w	ip, ip
 801f9c6:	f10c 0301 	add.w	r3, ip, #1
 801f9ca:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f9ce:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f9d2:	f881 c002 	strb.w	ip, [r1, #2]
 801f9d6:	4444      	add	r4, r8
 801f9d8:	4431      	add	r1, r6
 801f9da:	b2a4      	uxth	r4, r4
 801f9dc:	2c07      	cmp	r4, #7
 801f9de:	bf89      	itett	hi
 801f9e0:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801f9e2:	fa42 f208 	asrls.w	r2, r2, r8
 801f9e6:	2400      	movhi	r4, #0
 801f9e8:	785a      	ldrbhi	r2, [r3, #1]
 801f9ea:	bf8a      	itet	hi
 801f9ec:	3301      	addhi	r3, #1
 801f9ee:	b2d2      	uxtbls	r2, r2
 801f9f0:	9324      	strhi	r3, [sp, #144]	; 0x90
 801f9f2:	e7a7      	b.n	801f944 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 801f9f4:	441e      	add	r6, r3
 801f9f6:	b236      	sxth	r6, r6
 801f9f8:	e6ec      	b.n	801f7d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f9fa:	f1b9 0f01 	cmp.w	r9, #1
 801f9fe:	f47f af27 	bne.w	801f850 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa02:	f1bb 0f01 	cmp.w	fp, #1
 801fa06:	f47f af23 	bne.w	801f850 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa0a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 801fae0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801fa0e:	f8db 0000 	ldr.w	r0, [fp]
 801fa12:	6803      	ldr	r3, [r0, #0]
 801fa14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fa16:	4798      	blx	r3
 801fa18:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801fa1c:	465a      	mov	r2, fp
 801fa1e:	d006      	beq.n	801fa2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801fa20:	f1b8 0f04 	cmp.w	r8, #4
 801fa24:	d13e      	bne.n	801faa4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801fa26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fa28:	3300      	adds	r3, #0
 801fa2a:	bf18      	it	ne
 801fa2c:	2301      	movne	r3, #1
 801fa2e:	0580      	lsls	r0, r0, #22
 801fa30:	d563      	bpl.n	801fafa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801fa32:	f1b8 0f08 	cmp.w	r8, #8
 801fa36:	d160      	bne.n	801fafa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	bf0c      	ite	eq
 801fa3c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801fa40:	f44f 7180 	movne.w	r1, #256	; 0x100
 801fa44:	2f00      	cmp	r7, #0
 801fa46:	f47f af03 	bne.w	801f850 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa4a:	2c00      	cmp	r4, #0
 801fa4c:	f47f af00 	bne.w	801f850 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa50:	9b07      	ldr	r3, [sp, #28]
 801fa52:	980e      	ldr	r0, [sp, #56]	; 0x38
 801fa54:	18f3      	adds	r3, r6, r3
 801fa56:	4283      	cmp	r3, r0
 801fa58:	f73f aefa 	bgt.w	801f850 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa5c:	9808      	ldr	r0, [sp, #32]
 801fa5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fa60:	4403      	add	r3, r0
 801fa62:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fa64:	4283      	cmp	r3, r0
 801fa66:	f73f aef3 	bgt.w	801f850 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa6a:	f1b8 0f08 	cmp.w	r8, #8
 801fa6e:	6810      	ldr	r0, [r2, #0]
 801fa70:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801fa74:	bf18      	it	ne
 801fa76:	3501      	addne	r5, #1
 801fa78:	6804      	ldr	r4, [r0, #0]
 801fa7a:	9105      	str	r1, [sp, #20]
 801fa7c:	bf18      	it	ne
 801fa7e:	f025 0501 	bicne.w	r5, r5, #1
 801fa82:	990a      	ldr	r1, [sp, #40]	; 0x28
 801fa84:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801fa88:	bf18      	it	ne
 801fa8a:	b2ad      	uxthne	r5, r5
 801fa8c:	9104      	str	r1, [sp, #16]
 801fa8e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801fa90:	e9cd 5a00 	strd	r5, sl, [sp]
 801fa94:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801fa98:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fa9a:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801fa9c:	47a0      	blx	r4
 801fa9e:	b015      	add	sp, #84	; 0x54
 801faa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faa4:	2300      	movs	r3, #0
 801faa6:	e7c2      	b.n	801fa2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801faa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801faaa:	e727      	b.n	801f8fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 801faac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801faae:	700b      	strb	r3, [r1, #0]
 801fab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fab2:	704b      	strb	r3, [r1, #1]
 801fab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fab6:	708b      	strb	r3, [r1, #2]
 801fab8:	e78d      	b.n	801f9d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801faba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fabc:	b153      	cbz	r3, 801fad4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801fabe:	441c      	add	r4, r3
 801fac0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fac2:	b2a4      	uxth	r4, r4
 801fac4:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801fac8:	f004 0407 	and.w	r4, r4, #7
 801facc:	781a      	ldrb	r2, [r3, #0]
 801face:	9324      	str	r3, [sp, #144]	; 0x90
 801fad0:	4122      	asrs	r2, r4
 801fad2:	b2d2      	uxtb	r2, r2
 801fad4:	9b07      	ldr	r3, [sp, #28]
 801fad6:	445b      	add	r3, fp
 801fad8:	9307      	str	r3, [sp, #28]
 801fada:	e72d      	b.n	801f938 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 801fadc:	20056774 	.word	0x20056774
 801fae0:	2005677c 	.word	0x2005677c
 801fae4:	20056776 	.word	0x20056776
 801fae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801faea:	2b00      	cmp	r3, #0
 801faec:	d1d7      	bne.n	801fa9e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801faee:	4b06      	ldr	r3, [pc, #24]	; (801fb08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801faf0:	6818      	ldr	r0, [r3, #0]
 801faf2:	6803      	ldr	r3, [r0, #0]
 801faf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801faf6:	4798      	blx	r3
 801faf8:	e7d1      	b.n	801fa9e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801fafa:	2b00      	cmp	r3, #0
 801fafc:	f43f aea8 	beq.w	801f850 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fb00:	f44f 7180 	mov.w	r1, #256	; 0x100
 801fb04:	e79e      	b.n	801fa44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801fb06:	bf00      	nop
 801fb08:	2005677c 	.word	0x2005677c

0801fb0c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801fb0c:	b538      	push	{r3, r4, r5, lr}
 801fb0e:	4c15      	ldr	r4, [pc, #84]	; (801fb64 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801fb10:	4605      	mov	r5, r0
 801fb12:	7823      	ldrb	r3, [r4, #0]
 801fb14:	f3bf 8f5b 	dmb	ish
 801fb18:	07da      	lsls	r2, r3, #31
 801fb1a:	d40b      	bmi.n	801fb34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801fb1c:	4620      	mov	r0, r4
 801fb1e:	f006 fe34 	bl	802678a <__cxa_guard_acquire>
 801fb22:	b138      	cbz	r0, 801fb34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801fb24:	4620      	mov	r0, r4
 801fb26:	f006 fe3c 	bl	80267a2 <__cxa_guard_release>
 801fb2a:	4a0f      	ldr	r2, [pc, #60]	; (801fb68 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801fb2c:	490f      	ldr	r1, [pc, #60]	; (801fb6c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801fb2e:	4810      	ldr	r0, [pc, #64]	; (801fb70 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801fb30:	f006 fe24 	bl	802677c <__aeabi_atexit>
 801fb34:	4c0f      	ldr	r4, [pc, #60]	; (801fb74 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801fb36:	7823      	ldrb	r3, [r4, #0]
 801fb38:	f3bf 8f5b 	dmb	ish
 801fb3c:	07db      	lsls	r3, r3, #31
 801fb3e:	d40b      	bmi.n	801fb58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801fb40:	4620      	mov	r0, r4
 801fb42:	f006 fe22 	bl	802678a <__cxa_guard_acquire>
 801fb46:	b138      	cbz	r0, 801fb58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801fb48:	4620      	mov	r0, r4
 801fb4a:	f006 fe2a 	bl	80267a2 <__cxa_guard_release>
 801fb4e:	4a06      	ldr	r2, [pc, #24]	; (801fb68 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801fb50:	4909      	ldr	r1, [pc, #36]	; (801fb78 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801fb52:	480a      	ldr	r0, [pc, #40]	; (801fb7c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fb54:	f006 fe12 	bl	802677c <__aeabi_atexit>
 801fb58:	4b05      	ldr	r3, [pc, #20]	; (801fb70 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801fb5a:	612b      	str	r3, [r5, #16]
 801fb5c:	4b07      	ldr	r3, [pc, #28]	; (801fb7c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fb5e:	616b      	str	r3, [r5, #20]
 801fb60:	bd38      	pop	{r3, r4, r5, pc}
 801fb62:	bf00      	nop
 801fb64:	20056868 	.word	0x20056868
 801fb68:	20000000 	.word	0x20000000
 801fb6c:	0801e457 	.word	0x0801e457
 801fb70:	20000068 	.word	0x20000068
 801fb74:	2005686c 	.word	0x2005686c
 801fb78:	0801e455 	.word	0x0801e455
 801fb7c:	2000006c 	.word	0x2000006c

0801fb80 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801fb80:	b538      	push	{r3, r4, r5, lr}
 801fb82:	4c15      	ldr	r4, [pc, #84]	; (801fbd8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801fb84:	4605      	mov	r5, r0
 801fb86:	7823      	ldrb	r3, [r4, #0]
 801fb88:	f3bf 8f5b 	dmb	ish
 801fb8c:	07da      	lsls	r2, r3, #31
 801fb8e:	d40b      	bmi.n	801fba8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801fb90:	4620      	mov	r0, r4
 801fb92:	f006 fdfa 	bl	802678a <__cxa_guard_acquire>
 801fb96:	b138      	cbz	r0, 801fba8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801fb98:	4620      	mov	r0, r4
 801fb9a:	f006 fe02 	bl	80267a2 <__cxa_guard_release>
 801fb9e:	4a0f      	ldr	r2, [pc, #60]	; (801fbdc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801fba0:	490f      	ldr	r1, [pc, #60]	; (801fbe0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801fba2:	4810      	ldr	r0, [pc, #64]	; (801fbe4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801fba4:	f006 fdea 	bl	802677c <__aeabi_atexit>
 801fba8:	4c0f      	ldr	r4, [pc, #60]	; (801fbe8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801fbaa:	7823      	ldrb	r3, [r4, #0]
 801fbac:	f3bf 8f5b 	dmb	ish
 801fbb0:	07db      	lsls	r3, r3, #31
 801fbb2:	d40b      	bmi.n	801fbcc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801fbb4:	4620      	mov	r0, r4
 801fbb6:	f006 fde8 	bl	802678a <__cxa_guard_acquire>
 801fbba:	b138      	cbz	r0, 801fbcc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801fbbc:	4620      	mov	r0, r4
 801fbbe:	f006 fdf0 	bl	80267a2 <__cxa_guard_release>
 801fbc2:	4a06      	ldr	r2, [pc, #24]	; (801fbdc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801fbc4:	4909      	ldr	r1, [pc, #36]	; (801fbec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801fbc6:	480a      	ldr	r0, [pc, #40]	; (801fbf0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801fbc8:	f006 fdd8 	bl	802677c <__aeabi_atexit>
 801fbcc:	4b05      	ldr	r3, [pc, #20]	; (801fbe4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801fbce:	60ab      	str	r3, [r5, #8]
 801fbd0:	4b07      	ldr	r3, [pc, #28]	; (801fbf0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801fbd2:	60eb      	str	r3, [r5, #12]
 801fbd4:	bd38      	pop	{r3, r4, r5, pc}
 801fbd6:	bf00      	nop
 801fbd8:	20056848 	.word	0x20056848
 801fbdc:	20000000 	.word	0x20000000
 801fbe0:	0801e45b 	.word	0x0801e45b
 801fbe4:	20000048 	.word	0x20000048
 801fbe8:	2005684c 	.word	0x2005684c
 801fbec:	0801e459 	.word	0x0801e459
 801fbf0:	2000004c 	.word	0x2000004c

0801fbf4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801fbf4:	b510      	push	{r4, lr}
 801fbf6:	4604      	mov	r4, r0
 801fbf8:	f7ff ff88 	bl	801fb0c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801fbfc:	4620      	mov	r0, r4
 801fbfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fc02:	f7ff bfbd 	b.w	801fb80 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801fc08 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801fc08:	b538      	push	{r3, r4, r5, lr}
 801fc0a:	4c15      	ldr	r4, [pc, #84]	; (801fc60 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801fc0c:	4605      	mov	r5, r0
 801fc0e:	7823      	ldrb	r3, [r4, #0]
 801fc10:	f3bf 8f5b 	dmb	ish
 801fc14:	07da      	lsls	r2, r3, #31
 801fc16:	d40b      	bmi.n	801fc30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801fc18:	4620      	mov	r0, r4
 801fc1a:	f006 fdb6 	bl	802678a <__cxa_guard_acquire>
 801fc1e:	b138      	cbz	r0, 801fc30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801fc20:	4620      	mov	r0, r4
 801fc22:	f006 fdbe 	bl	80267a2 <__cxa_guard_release>
 801fc26:	4a0f      	ldr	r2, [pc, #60]	; (801fc64 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801fc28:	490f      	ldr	r1, [pc, #60]	; (801fc68 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801fc2a:	4810      	ldr	r0, [pc, #64]	; (801fc6c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801fc2c:	f006 fda6 	bl	802677c <__aeabi_atexit>
 801fc30:	4c0f      	ldr	r4, [pc, #60]	; (801fc70 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801fc32:	7823      	ldrb	r3, [r4, #0]
 801fc34:	f3bf 8f5b 	dmb	ish
 801fc38:	07db      	lsls	r3, r3, #31
 801fc3a:	d40b      	bmi.n	801fc54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801fc3c:	4620      	mov	r0, r4
 801fc3e:	f006 fda4 	bl	802678a <__cxa_guard_acquire>
 801fc42:	b138      	cbz	r0, 801fc54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801fc44:	4620      	mov	r0, r4
 801fc46:	f006 fdac 	bl	80267a2 <__cxa_guard_release>
 801fc4a:	4a06      	ldr	r2, [pc, #24]	; (801fc64 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801fc4c:	4909      	ldr	r1, [pc, #36]	; (801fc74 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801fc4e:	480a      	ldr	r0, [pc, #40]	; (801fc78 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801fc50:	f006 fd94 	bl	802677c <__aeabi_atexit>
 801fc54:	4b05      	ldr	r3, [pc, #20]	; (801fc6c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801fc56:	622b      	str	r3, [r5, #32]
 801fc58:	4b07      	ldr	r3, [pc, #28]	; (801fc78 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801fc5a:	626b      	str	r3, [r5, #36]	; 0x24
 801fc5c:	bd38      	pop	{r3, r4, r5, pc}
 801fc5e:	bf00      	nop
 801fc60:	20056870 	.word	0x20056870
 801fc64:	20000000 	.word	0x20000000
 801fc68:	0801e44f 	.word	0x0801e44f
 801fc6c:	20000070 	.word	0x20000070
 801fc70:	20056874 	.word	0x20056874
 801fc74:	0801e44d 	.word	0x0801e44d
 801fc78:	20000074 	.word	0x20000074

0801fc7c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801fc7c:	b538      	push	{r3, r4, r5, lr}
 801fc7e:	4c15      	ldr	r4, [pc, #84]	; (801fcd4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801fc80:	4605      	mov	r5, r0
 801fc82:	7823      	ldrb	r3, [r4, #0]
 801fc84:	f3bf 8f5b 	dmb	ish
 801fc88:	07da      	lsls	r2, r3, #31
 801fc8a:	d40b      	bmi.n	801fca4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801fc8c:	4620      	mov	r0, r4
 801fc8e:	f006 fd7c 	bl	802678a <__cxa_guard_acquire>
 801fc92:	b138      	cbz	r0, 801fca4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801fc94:	4620      	mov	r0, r4
 801fc96:	f006 fd84 	bl	80267a2 <__cxa_guard_release>
 801fc9a:	4a0f      	ldr	r2, [pc, #60]	; (801fcd8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801fc9c:	490f      	ldr	r1, [pc, #60]	; (801fcdc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801fc9e:	4810      	ldr	r0, [pc, #64]	; (801fce0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801fca0:	f006 fd6c 	bl	802677c <__aeabi_atexit>
 801fca4:	4c0f      	ldr	r4, [pc, #60]	; (801fce4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801fca6:	7823      	ldrb	r3, [r4, #0]
 801fca8:	f3bf 8f5b 	dmb	ish
 801fcac:	07db      	lsls	r3, r3, #31
 801fcae:	d40b      	bmi.n	801fcc8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801fcb0:	4620      	mov	r0, r4
 801fcb2:	f006 fd6a 	bl	802678a <__cxa_guard_acquire>
 801fcb6:	b138      	cbz	r0, 801fcc8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801fcb8:	4620      	mov	r0, r4
 801fcba:	f006 fd72 	bl	80267a2 <__cxa_guard_release>
 801fcbe:	4a06      	ldr	r2, [pc, #24]	; (801fcd8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801fcc0:	4909      	ldr	r1, [pc, #36]	; (801fce8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801fcc2:	480a      	ldr	r0, [pc, #40]	; (801fcec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fcc4:	f006 fd5a 	bl	802677c <__aeabi_atexit>
 801fcc8:	4b05      	ldr	r3, [pc, #20]	; (801fce0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801fcca:	61ab      	str	r3, [r5, #24]
 801fccc:	4b07      	ldr	r3, [pc, #28]	; (801fcec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fcce:	61eb      	str	r3, [r5, #28]
 801fcd0:	bd38      	pop	{r3, r4, r5, pc}
 801fcd2:	bf00      	nop
 801fcd4:	20056850 	.word	0x20056850
 801fcd8:	20000000 	.word	0x20000000
 801fcdc:	0801e453 	.word	0x0801e453
 801fce0:	20000050 	.word	0x20000050
 801fce4:	20056854 	.word	0x20056854
 801fce8:	0801e451 	.word	0x0801e451
 801fcec:	20000054 	.word	0x20000054

0801fcf0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801fcf0:	b510      	push	{r4, lr}
 801fcf2:	4604      	mov	r4, r0
 801fcf4:	f7ff ff88 	bl	801fc08 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801fcf8:	4620      	mov	r0, r4
 801fcfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fcfe:	f7ff bfbd 	b.w	801fc7c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801fd04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801fd04:	b538      	push	{r3, r4, r5, lr}
 801fd06:	4c15      	ldr	r4, [pc, #84]	; (801fd5c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801fd08:	4605      	mov	r5, r0
 801fd0a:	7823      	ldrb	r3, [r4, #0]
 801fd0c:	f3bf 8f5b 	dmb	ish
 801fd10:	07da      	lsls	r2, r3, #31
 801fd12:	d40b      	bmi.n	801fd2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801fd14:	4620      	mov	r0, r4
 801fd16:	f006 fd38 	bl	802678a <__cxa_guard_acquire>
 801fd1a:	b138      	cbz	r0, 801fd2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801fd1c:	4620      	mov	r0, r4
 801fd1e:	f006 fd40 	bl	80267a2 <__cxa_guard_release>
 801fd22:	4a0f      	ldr	r2, [pc, #60]	; (801fd60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801fd24:	490f      	ldr	r1, [pc, #60]	; (801fd64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801fd26:	4810      	ldr	r0, [pc, #64]	; (801fd68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801fd28:	f006 fd28 	bl	802677c <__aeabi_atexit>
 801fd2c:	4c0f      	ldr	r4, [pc, #60]	; (801fd6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801fd2e:	7823      	ldrb	r3, [r4, #0]
 801fd30:	f3bf 8f5b 	dmb	ish
 801fd34:	07db      	lsls	r3, r3, #31
 801fd36:	d40b      	bmi.n	801fd50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801fd38:	4620      	mov	r0, r4
 801fd3a:	f006 fd26 	bl	802678a <__cxa_guard_acquire>
 801fd3e:	b138      	cbz	r0, 801fd50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801fd40:	4620      	mov	r0, r4
 801fd42:	f006 fd2e 	bl	80267a2 <__cxa_guard_release>
 801fd46:	4a06      	ldr	r2, [pc, #24]	; (801fd60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801fd48:	4909      	ldr	r1, [pc, #36]	; (801fd70 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801fd4a:	480a      	ldr	r0, [pc, #40]	; (801fd74 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801fd4c:	f006 fd16 	bl	802677c <__aeabi_atexit>
 801fd50:	4b05      	ldr	r3, [pc, #20]	; (801fd68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801fd52:	632b      	str	r3, [r5, #48]	; 0x30
 801fd54:	4b07      	ldr	r3, [pc, #28]	; (801fd74 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801fd56:	636b      	str	r3, [r5, #52]	; 0x34
 801fd58:	bd38      	pop	{r3, r4, r5, pc}
 801fd5a:	bf00      	nop
 801fd5c:	20056858 	.word	0x20056858
 801fd60:	20000000 	.word	0x20000000
 801fd64:	0801e447 	.word	0x0801e447
 801fd68:	20000058 	.word	0x20000058
 801fd6c:	2005685c 	.word	0x2005685c
 801fd70:	0801e445 	.word	0x0801e445
 801fd74:	2000005c 	.word	0x2000005c

0801fd78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801fd78:	b538      	push	{r3, r4, r5, lr}
 801fd7a:	4c15      	ldr	r4, [pc, #84]	; (801fdd0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801fd7c:	4605      	mov	r5, r0
 801fd7e:	7823      	ldrb	r3, [r4, #0]
 801fd80:	f3bf 8f5b 	dmb	ish
 801fd84:	07da      	lsls	r2, r3, #31
 801fd86:	d40b      	bmi.n	801fda0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801fd88:	4620      	mov	r0, r4
 801fd8a:	f006 fcfe 	bl	802678a <__cxa_guard_acquire>
 801fd8e:	b138      	cbz	r0, 801fda0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801fd90:	4620      	mov	r0, r4
 801fd92:	f006 fd06 	bl	80267a2 <__cxa_guard_release>
 801fd96:	4a0f      	ldr	r2, [pc, #60]	; (801fdd4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801fd98:	490f      	ldr	r1, [pc, #60]	; (801fdd8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801fd9a:	4810      	ldr	r0, [pc, #64]	; (801fddc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801fd9c:	f006 fcee 	bl	802677c <__aeabi_atexit>
 801fda0:	4c0f      	ldr	r4, [pc, #60]	; (801fde0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801fda2:	7823      	ldrb	r3, [r4, #0]
 801fda4:	f3bf 8f5b 	dmb	ish
 801fda8:	07db      	lsls	r3, r3, #31
 801fdaa:	d40b      	bmi.n	801fdc4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801fdac:	4620      	mov	r0, r4
 801fdae:	f006 fcec 	bl	802678a <__cxa_guard_acquire>
 801fdb2:	b138      	cbz	r0, 801fdc4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801fdb4:	4620      	mov	r0, r4
 801fdb6:	f006 fcf4 	bl	80267a2 <__cxa_guard_release>
 801fdba:	4a06      	ldr	r2, [pc, #24]	; (801fdd4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801fdbc:	4909      	ldr	r1, [pc, #36]	; (801fde4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801fdbe:	480a      	ldr	r0, [pc, #40]	; (801fde8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801fdc0:	f006 fcdc 	bl	802677c <__aeabi_atexit>
 801fdc4:	4b05      	ldr	r3, [pc, #20]	; (801fddc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801fdc6:	62ab      	str	r3, [r5, #40]	; 0x28
 801fdc8:	4b07      	ldr	r3, [pc, #28]	; (801fde8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801fdca:	62eb      	str	r3, [r5, #44]	; 0x2c
 801fdcc:	bd38      	pop	{r3, r4, r5, pc}
 801fdce:	bf00      	nop
 801fdd0:	20056830 	.word	0x20056830
 801fdd4:	20000000 	.word	0x20000000
 801fdd8:	0801e44b 	.word	0x0801e44b
 801fddc:	20000030 	.word	0x20000030
 801fde0:	20056834 	.word	0x20056834
 801fde4:	0801e449 	.word	0x0801e449
 801fde8:	20000034 	.word	0x20000034

0801fdec <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801fdec:	b510      	push	{r4, lr}
 801fdee:	4604      	mov	r4, r0
 801fdf0:	f7ff ff88 	bl	801fd04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801fdf4:	4620      	mov	r0, r4
 801fdf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fdfa:	f7ff bfbd 	b.w	801fd78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801fe00 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801fe00:	b538      	push	{r3, r4, r5, lr}
 801fe02:	4c15      	ldr	r4, [pc, #84]	; (801fe58 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801fe04:	4605      	mov	r5, r0
 801fe06:	7823      	ldrb	r3, [r4, #0]
 801fe08:	f3bf 8f5b 	dmb	ish
 801fe0c:	07da      	lsls	r2, r3, #31
 801fe0e:	d40b      	bmi.n	801fe28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801fe10:	4620      	mov	r0, r4
 801fe12:	f006 fcba 	bl	802678a <__cxa_guard_acquire>
 801fe16:	b138      	cbz	r0, 801fe28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801fe18:	4620      	mov	r0, r4
 801fe1a:	f006 fcc2 	bl	80267a2 <__cxa_guard_release>
 801fe1e:	4a0f      	ldr	r2, [pc, #60]	; (801fe5c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801fe20:	490f      	ldr	r1, [pc, #60]	; (801fe60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801fe22:	4810      	ldr	r0, [pc, #64]	; (801fe64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801fe24:	f006 fcaa 	bl	802677c <__aeabi_atexit>
 801fe28:	4c0f      	ldr	r4, [pc, #60]	; (801fe68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801fe2a:	7823      	ldrb	r3, [r4, #0]
 801fe2c:	f3bf 8f5b 	dmb	ish
 801fe30:	07db      	lsls	r3, r3, #31
 801fe32:	d40b      	bmi.n	801fe4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801fe34:	4620      	mov	r0, r4
 801fe36:	f006 fca8 	bl	802678a <__cxa_guard_acquire>
 801fe3a:	b138      	cbz	r0, 801fe4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801fe3c:	4620      	mov	r0, r4
 801fe3e:	f006 fcb0 	bl	80267a2 <__cxa_guard_release>
 801fe42:	4a06      	ldr	r2, [pc, #24]	; (801fe5c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801fe44:	4909      	ldr	r1, [pc, #36]	; (801fe6c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801fe46:	480a      	ldr	r0, [pc, #40]	; (801fe70 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801fe48:	f006 fc98 	bl	802677c <__aeabi_atexit>
 801fe4c:	4b05      	ldr	r3, [pc, #20]	; (801fe64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801fe4e:	642b      	str	r3, [r5, #64]	; 0x40
 801fe50:	4b07      	ldr	r3, [pc, #28]	; (801fe70 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801fe52:	646b      	str	r3, [r5, #68]	; 0x44
 801fe54:	bd38      	pop	{r3, r4, r5, pc}
 801fe56:	bf00      	nop
 801fe58:	20056860 	.word	0x20056860
 801fe5c:	20000000 	.word	0x20000000
 801fe60:	0801e43f 	.word	0x0801e43f
 801fe64:	20000060 	.word	0x20000060
 801fe68:	20056864 	.word	0x20056864
 801fe6c:	0801e43d 	.word	0x0801e43d
 801fe70:	20000064 	.word	0x20000064

0801fe74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801fe74:	b538      	push	{r3, r4, r5, lr}
 801fe76:	4c15      	ldr	r4, [pc, #84]	; (801fecc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801fe78:	4605      	mov	r5, r0
 801fe7a:	7823      	ldrb	r3, [r4, #0]
 801fe7c:	f3bf 8f5b 	dmb	ish
 801fe80:	07da      	lsls	r2, r3, #31
 801fe82:	d40b      	bmi.n	801fe9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801fe84:	4620      	mov	r0, r4
 801fe86:	f006 fc80 	bl	802678a <__cxa_guard_acquire>
 801fe8a:	b138      	cbz	r0, 801fe9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801fe8c:	4620      	mov	r0, r4
 801fe8e:	f006 fc88 	bl	80267a2 <__cxa_guard_release>
 801fe92:	4a0f      	ldr	r2, [pc, #60]	; (801fed0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801fe94:	490f      	ldr	r1, [pc, #60]	; (801fed4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801fe96:	4810      	ldr	r0, [pc, #64]	; (801fed8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801fe98:	f006 fc70 	bl	802677c <__aeabi_atexit>
 801fe9c:	4c0f      	ldr	r4, [pc, #60]	; (801fedc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801fe9e:	7823      	ldrb	r3, [r4, #0]
 801fea0:	f3bf 8f5b 	dmb	ish
 801fea4:	07db      	lsls	r3, r3, #31
 801fea6:	d40b      	bmi.n	801fec0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801fea8:	4620      	mov	r0, r4
 801feaa:	f006 fc6e 	bl	802678a <__cxa_guard_acquire>
 801feae:	b138      	cbz	r0, 801fec0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801feb0:	4620      	mov	r0, r4
 801feb2:	f006 fc76 	bl	80267a2 <__cxa_guard_release>
 801feb6:	4a06      	ldr	r2, [pc, #24]	; (801fed0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801feb8:	4909      	ldr	r1, [pc, #36]	; (801fee0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801feba:	480a      	ldr	r0, [pc, #40]	; (801fee4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801febc:	f006 fc5e 	bl	802677c <__aeabi_atexit>
 801fec0:	4b05      	ldr	r3, [pc, #20]	; (801fed8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801fec2:	63ab      	str	r3, [r5, #56]	; 0x38
 801fec4:	4b07      	ldr	r3, [pc, #28]	; (801fee4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801fec6:	63eb      	str	r3, [r5, #60]	; 0x3c
 801fec8:	bd38      	pop	{r3, r4, r5, pc}
 801feca:	bf00      	nop
 801fecc:	20056840 	.word	0x20056840
 801fed0:	20000000 	.word	0x20000000
 801fed4:	0801e443 	.word	0x0801e443
 801fed8:	20000040 	.word	0x20000040
 801fedc:	20056844 	.word	0x20056844
 801fee0:	0801e441 	.word	0x0801e441
 801fee4:	20000044 	.word	0x20000044

0801fee8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801fee8:	b510      	push	{r4, lr}
 801feea:	4604      	mov	r4, r0
 801feec:	f7ff ff88 	bl	801fe00 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801fef0:	4620      	mov	r0, r4
 801fef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fef6:	f7ff bfbd 	b.w	801fe74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801fefc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801fefc:	b538      	push	{r3, r4, r5, lr}
 801fefe:	4c15      	ldr	r4, [pc, #84]	; (801ff54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801ff00:	4605      	mov	r5, r0
 801ff02:	7823      	ldrb	r3, [r4, #0]
 801ff04:	f3bf 8f5b 	dmb	ish
 801ff08:	07da      	lsls	r2, r3, #31
 801ff0a:	d40b      	bmi.n	801ff24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ff0c:	4620      	mov	r0, r4
 801ff0e:	f006 fc3c 	bl	802678a <__cxa_guard_acquire>
 801ff12:	b138      	cbz	r0, 801ff24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ff14:	4620      	mov	r0, r4
 801ff16:	f006 fc44 	bl	80267a2 <__cxa_guard_release>
 801ff1a:	4a0f      	ldr	r2, [pc, #60]	; (801ff58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ff1c:	490f      	ldr	r1, [pc, #60]	; (801ff5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801ff1e:	4810      	ldr	r0, [pc, #64]	; (801ff60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ff20:	f006 fc2c 	bl	802677c <__aeabi_atexit>
 801ff24:	4c0f      	ldr	r4, [pc, #60]	; (801ff64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801ff26:	7823      	ldrb	r3, [r4, #0]
 801ff28:	f3bf 8f5b 	dmb	ish
 801ff2c:	07db      	lsls	r3, r3, #31
 801ff2e:	d40b      	bmi.n	801ff48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ff30:	4620      	mov	r0, r4
 801ff32:	f006 fc2a 	bl	802678a <__cxa_guard_acquire>
 801ff36:	b138      	cbz	r0, 801ff48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ff38:	4620      	mov	r0, r4
 801ff3a:	f006 fc32 	bl	80267a2 <__cxa_guard_release>
 801ff3e:	4a06      	ldr	r2, [pc, #24]	; (801ff58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ff40:	4909      	ldr	r1, [pc, #36]	; (801ff68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ff42:	480a      	ldr	r0, [pc, #40]	; (801ff6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ff44:	f006 fc1a 	bl	802677c <__aeabi_atexit>
 801ff48:	4b05      	ldr	r3, [pc, #20]	; (801ff60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ff4a:	652b      	str	r3, [r5, #80]	; 0x50
 801ff4c:	4b07      	ldr	r3, [pc, #28]	; (801ff6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ff4e:	656b      	str	r3, [r5, #84]	; 0x54
 801ff50:	bd38      	pop	{r3, r4, r5, pc}
 801ff52:	bf00      	nop
 801ff54:	20056838 	.word	0x20056838
 801ff58:	20000000 	.word	0x20000000
 801ff5c:	0801e437 	.word	0x0801e437
 801ff60:	20000038 	.word	0x20000038
 801ff64:	2005683c 	.word	0x2005683c
 801ff68:	0801e435 	.word	0x0801e435
 801ff6c:	2000003c 	.word	0x2000003c

0801ff70 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801ff70:	b538      	push	{r3, r4, r5, lr}
 801ff72:	4c15      	ldr	r4, [pc, #84]	; (801ffc8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ff74:	4605      	mov	r5, r0
 801ff76:	7823      	ldrb	r3, [r4, #0]
 801ff78:	f3bf 8f5b 	dmb	ish
 801ff7c:	07da      	lsls	r2, r3, #31
 801ff7e:	d40b      	bmi.n	801ff98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ff80:	4620      	mov	r0, r4
 801ff82:	f006 fc02 	bl	802678a <__cxa_guard_acquire>
 801ff86:	b138      	cbz	r0, 801ff98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ff88:	4620      	mov	r0, r4
 801ff8a:	f006 fc0a 	bl	80267a2 <__cxa_guard_release>
 801ff8e:	4a0f      	ldr	r2, [pc, #60]	; (801ffcc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ff90:	490f      	ldr	r1, [pc, #60]	; (801ffd0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ff92:	4810      	ldr	r0, [pc, #64]	; (801ffd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ff94:	f006 fbf2 	bl	802677c <__aeabi_atexit>
 801ff98:	4c0f      	ldr	r4, [pc, #60]	; (801ffd8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801ff9a:	7823      	ldrb	r3, [r4, #0]
 801ff9c:	f3bf 8f5b 	dmb	ish
 801ffa0:	07db      	lsls	r3, r3, #31
 801ffa2:	d40b      	bmi.n	801ffbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ffa4:	4620      	mov	r0, r4
 801ffa6:	f006 fbf0 	bl	802678a <__cxa_guard_acquire>
 801ffaa:	b138      	cbz	r0, 801ffbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ffac:	4620      	mov	r0, r4
 801ffae:	f006 fbf8 	bl	80267a2 <__cxa_guard_release>
 801ffb2:	4a06      	ldr	r2, [pc, #24]	; (801ffcc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ffb4:	4909      	ldr	r1, [pc, #36]	; (801ffdc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ffb6:	480a      	ldr	r0, [pc, #40]	; (801ffe0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ffb8:	f006 fbe0 	bl	802677c <__aeabi_atexit>
 801ffbc:	4b05      	ldr	r3, [pc, #20]	; (801ffd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ffbe:	64ab      	str	r3, [r5, #72]	; 0x48
 801ffc0:	4b07      	ldr	r3, [pc, #28]	; (801ffe0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ffc2:	64eb      	str	r3, [r5, #76]	; 0x4c
 801ffc4:	bd38      	pop	{r3, r4, r5, pc}
 801ffc6:	bf00      	nop
 801ffc8:	20056828 	.word	0x20056828
 801ffcc:	20000000 	.word	0x20000000
 801ffd0:	0801e43b 	.word	0x0801e43b
 801ffd4:	20000028 	.word	0x20000028
 801ffd8:	2005682c 	.word	0x2005682c
 801ffdc:	0801e439 	.word	0x0801e439
 801ffe0:	2000002c 	.word	0x2000002c

0801ffe4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801ffe4:	b510      	push	{r4, lr}
 801ffe6:	4604      	mov	r4, r0
 801ffe8:	f7ff ff88 	bl	801fefc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801ffec:	4620      	mov	r0, r4
 801ffee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fff2:	f7ff bfbd 	b.w	801ff70 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801fff6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801fff6:	b510      	push	{r4, lr}
 801fff8:	4604      	mov	r4, r0
 801fffa:	f7ff fff3 	bl	801ffe4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801fffe:	4620      	mov	r0, r4
 8020000:	f7ff ff72 	bl	801fee8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8020004:	4620      	mov	r0, r4
 8020006:	f7ff fe73 	bl	801fcf0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 802000a:	4620      	mov	r0, r4
 802000c:	f7ff fdf2 	bl	801fbf4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8020010:	4620      	mov	r0, r4
 8020012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020016:	f7ff bee9 	b.w	801fdec <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0802001c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 802001c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020020:	b087      	sub	sp, #28
 8020022:	7888      	ldrb	r0, [r1, #2]
 8020024:	4616      	mov	r6, r2
 8020026:	9001      	str	r0, [sp, #4]
 8020028:	7848      	ldrb	r0, [r1, #1]
 802002a:	9100      	str	r1, [sp, #0]
 802002c:	9002      	str	r0, [sp, #8]
 802002e:	7808      	ldrb	r0, [r1, #0]
 8020030:	9901      	ldr	r1, [sp, #4]
 8020032:	9003      	str	r0, [sp, #12]
 8020034:	9802      	ldr	r0, [sp, #8]
 8020036:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 802003a:	0200      	lsls	r0, r0, #8
 802003c:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8020040:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8020044:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8020048:	9903      	ldr	r1, [sp, #12]
 802004a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 802004e:	4308      	orrs	r0, r1
 8020050:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8020054:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8020058:	9005      	str	r0, [sp, #20]
 802005a:	fb05 ca0e 	mla	sl, r5, lr, ip
 802005e:	2d00      	cmp	r5, #0
 8020060:	eb06 080a 	add.w	r8, r6, sl
 8020064:	db4a      	blt.n	80200fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8020066:	45a9      	cmp	r9, r5
 8020068:	dd48      	ble.n	80200fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 802006a:	f1bc 0f00 	cmp.w	ip, #0
 802006e:	db43      	blt.n	80200f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8020070:	45e6      	cmp	lr, ip
 8020072:	dd41      	ble.n	80200f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8020074:	f816 600a 	ldrb.w	r6, [r6, sl]
 8020078:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802007c:	441e      	add	r6, r3
 802007e:	f11c 0001 	adds.w	r0, ip, #1
 8020082:	d43e      	bmi.n	8020102 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8020084:	4586      	cmp	lr, r0
 8020086:	dd3c      	ble.n	8020102 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8020088:	2a00      	cmp	r2, #0
 802008a:	d03a      	beq.n	8020102 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 802008c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8020090:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020094:	4418      	add	r0, r3
 8020096:	3501      	adds	r5, #1
 8020098:	d437      	bmi.n	802010a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 802009a:	45a9      	cmp	r9, r5
 802009c:	dd35      	ble.n	802010a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 802009e:	b3a4      	cbz	r4, 802010a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 80200a0:	f1bc 0f00 	cmp.w	ip, #0
 80200a4:	db2f      	blt.n	8020106 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 80200a6:	45e6      	cmp	lr, ip
 80200a8:	dd2d      	ble.n	8020106 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 80200aa:	f818 500e 	ldrb.w	r5, [r8, lr]
 80200ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80200b2:	441d      	add	r5, r3
 80200b4:	f11c 0c01 	adds.w	ip, ip, #1
 80200b8:	d42a      	bmi.n	8020110 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 80200ba:	45e6      	cmp	lr, ip
 80200bc:	dd28      	ble.n	8020110 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 80200be:	b33a      	cbz	r2, 8020110 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 80200c0:	44c6      	add	lr, r8
 80200c2:	f89e c001 	ldrb.w	ip, [lr, #1]
 80200c6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80200ca:	4463      	add	r3, ip
 80200cc:	ea6f 0c07 	mvn.w	ip, r7
 80200d0:	2a0f      	cmp	r2, #15
 80200d2:	f896 a000 	ldrb.w	sl, [r6]
 80200d6:	fa5f fc8c 	uxtb.w	ip, ip
 80200da:	f890 b000 	ldrb.w	fp, [r0]
 80200de:	f895 9000 	ldrb.w	r9, [r5]
 80200e2:	7819      	ldrb	r1, [r3, #0]
 80200e4:	d801      	bhi.n	80200ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 80200e6:	2c0f      	cmp	r4, #15
 80200e8:	d914      	bls.n	8020114 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 80200ea:	4b40      	ldr	r3, [pc, #256]	; (80201ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 80200ec:	f240 1157 	movw	r1, #343	; 0x157
 80200f0:	4a3f      	ldr	r2, [pc, #252]	; (80201f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 80200f2:	4840      	ldr	r0, [pc, #256]	; (80201f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 80200f4:	f006 fc7c 	bl	80269f0 <__assert_func>
 80200f8:	ae05      	add	r6, sp, #20
 80200fa:	e7c0      	b.n	802007e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 80200fc:	a805      	add	r0, sp, #20
 80200fe:	4606      	mov	r6, r0
 8020100:	e7c9      	b.n	8020096 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8020102:	a805      	add	r0, sp, #20
 8020104:	e7c7      	b.n	8020096 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8020106:	ad05      	add	r5, sp, #20
 8020108:	e7d4      	b.n	80200b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 802010a:	ab05      	add	r3, sp, #20
 802010c:	461d      	mov	r5, r3
 802010e:	e7dd      	b.n	80200cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8020110:	ab05      	add	r3, sp, #20
 8020112:	e7db      	b.n	80200cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8020114:	b292      	uxth	r2, r2
 8020116:	b2a4      	uxth	r4, r4
 8020118:	fa1f fc8c 	uxth.w	ip, ip
 802011c:	fb02 f804 	mul.w	r8, r2, r4
 8020120:	0112      	lsls	r2, r2, #4
 8020122:	b2bf      	uxth	r7, r7
 8020124:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8020128:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 802012c:	eba2 0208 	sub.w	r2, r2, r8
 8020130:	b2a4      	uxth	r4, r4
 8020132:	b292      	uxth	r2, r2
 8020134:	ebae 0e04 	sub.w	lr, lr, r4
 8020138:	fb02 fb0b 	mul.w	fp, r2, fp
 802013c:	fa1f fe8e 	uxth.w	lr, lr
 8020140:	fb0e ba0a 	mla	sl, lr, sl, fp
 8020144:	fb04 aa09 	mla	sl, r4, r9, sl
 8020148:	fb08 aa01 	mla	sl, r8, r1, sl
 802014c:	9903      	ldr	r1, [sp, #12]
 802014e:	fb11 f90c 	smulbb	r9, r1, ip
 8020152:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8020156:	9900      	ldr	r1, [sp, #0]
 8020158:	fb0a 9a07 	mla	sl, sl, r7, r9
 802015c:	fa1f fa8a 	uxth.w	sl, sl
 8020160:	f10a 0901 	add.w	r9, sl, #1
 8020164:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8020168:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802016c:	f881 a000 	strb.w	sl, [r1]
 8020170:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020174:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020178:	fb02 fa0a 	mul.w	sl, r2, sl
 802017c:	9902      	ldr	r1, [sp, #8]
 802017e:	fb0e aa09 	mla	sl, lr, r9, sl
 8020182:	f895 9001 	ldrb.w	r9, [r5, #1]
 8020186:	fb04 aa09 	mla	sl, r4, r9, sl
 802018a:	f893 9001 	ldrb.w	r9, [r3, #1]
 802018e:	fb08 a909 	mla	r9, r8, r9, sl
 8020192:	fb11 fa0c 	smulbb	sl, r1, ip
 8020196:	9900      	ldr	r1, [sp, #0]
 8020198:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802019c:	fb09 a907 	mla	r9, r9, r7, sl
 80201a0:	fa1f f989 	uxth.w	r9, r9
 80201a4:	f109 0a01 	add.w	sl, r9, #1
 80201a8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80201ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 80201b0:	f881 9001 	strb.w	r9, [r1, #1]
 80201b4:	7880      	ldrb	r0, [r0, #2]
 80201b6:	78b6      	ldrb	r6, [r6, #2]
 80201b8:	4342      	muls	r2, r0
 80201ba:	78a8      	ldrb	r0, [r5, #2]
 80201bc:	789b      	ldrb	r3, [r3, #2]
 80201be:	fb0e 2206 	mla	r2, lr, r6, r2
 80201c2:	fb04 2400 	mla	r4, r4, r0, r2
 80201c6:	fb08 4803 	mla	r8, r8, r3, r4
 80201ca:	9b01      	ldr	r3, [sp, #4]
 80201cc:	fb13 fc0c 	smulbb	ip, r3, ip
 80201d0:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80201d4:	fb08 c707 	mla	r7, r8, r7, ip
 80201d8:	b2bf      	uxth	r7, r7
 80201da:	f107 0c01 	add.w	ip, r7, #1
 80201de:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80201e2:	123f      	asrs	r7, r7, #8
 80201e4:	708f      	strb	r7, [r1, #2]
 80201e6:	b007      	add	sp, #28
 80201e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201ec:	0802eac7 	.word	0x0802eac7
 80201f0:	0802f02f 	.word	0x0802f02f
 80201f4:	0802eb90 	.word	0x0802eb90

080201f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80201f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201fc:	ed2d 8b08 	vpush	{d8-d11}
 8020200:	b093      	sub	sp, #76	; 0x4c
 8020202:	eeb0 aa40 	vmov.f32	s20, s0
 8020206:	eef0 9a60 	vmov.f32	s19, s1
 802020a:	9210      	str	r2, [sp, #64]	; 0x40
 802020c:	eeb0 9a41 	vmov.f32	s18, s2
 8020210:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020212:	eeb0 8a62 	vmov.f32	s16, s5
 8020216:	9309      	str	r3, [sp, #36]	; 0x24
 8020218:	eef0 8a43 	vmov.f32	s17, s6
 802021c:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 8020220:	eef0 ba44 	vmov.f32	s23, s8
 8020224:	9011      	str	r0, [sp, #68]	; 0x44
 8020226:	eeb0 ba64 	vmov.f32	s22, s9
 802022a:	930e      	str	r3, [sp, #56]	; 0x38
 802022c:	eef0 aa45 	vmov.f32	s21, s10
 8020230:	6850      	ldr	r0, [r2, #4]
 8020232:	910d      	str	r1, [sp, #52]	; 0x34
 8020234:	6812      	ldr	r2, [r2, #0]
 8020236:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802023a:	fb00 1303 	mla	r3, r0, r3, r1
 802023e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020242:	18d3      	adds	r3, r2, r3
 8020244:	930a      	str	r3, [sp, #40]	; 0x28
 8020246:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020248:	681b      	ldr	r3, [r3, #0]
 802024a:	930c      	str	r3, [sp, #48]	; 0x30
 802024c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802024e:	685c      	ldr	r4, [r3, #4]
 8020250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020252:	3404      	adds	r4, #4
 8020254:	43db      	mvns	r3, r3
 8020256:	b2db      	uxtb	r3, r3
 8020258:	930b      	str	r3, [sp, #44]	; 0x2c
 802025a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802025c:	2b00      	cmp	r3, #0
 802025e:	dc03      	bgt.n	8020268 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020260:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020262:	2b00      	cmp	r3, #0
 8020264:	f340 8250 	ble.w	8020708 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8020268:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802026a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802026e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020272:	1e48      	subs	r0, r1, #1
 8020274:	1e55      	subs	r5, r2, #1
 8020276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020278:	2b00      	cmp	r3, #0
 802027a:	f340 80ee 	ble.w	802045a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 802027e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8020280:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020282:	1436      	asrs	r6, r6, #16
 8020284:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020288:	d406      	bmi.n	8020298 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802028a:	4286      	cmp	r6, r0
 802028c:	da04      	bge.n	8020298 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802028e:	2b00      	cmp	r3, #0
 8020290:	db02      	blt.n	8020298 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020292:	42ab      	cmp	r3, r5
 8020294:	f2c0 80e2 	blt.w	802045c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020298:	3601      	adds	r6, #1
 802029a:	f100 80cf 	bmi.w	802043c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 802029e:	42b1      	cmp	r1, r6
 80202a0:	f2c0 80cc 	blt.w	802043c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80202a4:	3301      	adds	r3, #1
 80202a6:	f100 80c9 	bmi.w	802043c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80202aa:	429a      	cmp	r2, r3
 80202ac:	f2c0 80c6 	blt.w	802043c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80202b0:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 80202b4:	f1bb 0f00 	cmp.w	fp, #0
 80202b8:	f340 80f1 	ble.w	802049e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80202bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80202be:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80202c0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80202c2:	141d      	asrs	r5, r3, #16
 80202c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80202c6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80202ca:	68c7      	ldr	r7, [r0, #12]
 80202cc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80202ce:	1418      	asrs	r0, r3, #16
 80202d0:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80202d4:	6892      	ldr	r2, [r2, #8]
 80202d6:	f100 8137 	bmi.w	8020548 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80202da:	f102 3cff 	add.w	ip, r2, #4294967295
 80202de:	4560      	cmp	r0, ip
 80202e0:	f280 8132 	bge.w	8020548 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80202e4:	2d00      	cmp	r5, #0
 80202e6:	f2c0 812f 	blt.w	8020548 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80202ea:	f107 3cff 	add.w	ip, r7, #4294967295
 80202ee:	4565      	cmp	r5, ip
 80202f0:	f280 812a 	bge.w	8020548 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80202f4:	b212      	sxth	r2, r2
 80202f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80202f8:	fb05 0002 	mla	r0, r5, r2, r0
 80202fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80202fe:	f817 c000 	ldrb.w	ip, [r7, r0]
 8020302:	4405      	add	r5, r0
 8020304:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020308:	eb04 0e0c 	add.w	lr, r4, ip
 802030c:	f1b8 0f00 	cmp.w	r8, #0
 8020310:	f000 810c 	beq.w	802052c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8020314:	786f      	ldrb	r7, [r5, #1]
 8020316:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802031a:	4427      	add	r7, r4
 802031c:	2900      	cmp	r1, #0
 802031e:	f000 810d 	beq.w	802053c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020322:	18a8      	adds	r0, r5, r2
 8020324:	5caa      	ldrb	r2, [r5, r2]
 8020326:	7840      	ldrb	r0, [r0, #1]
 8020328:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802032c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020330:	4422      	add	r2, r4
 8020332:	4420      	add	r0, r4
 8020334:	fa1f f388 	uxth.w	r3, r8
 8020338:	f814 a00c 	ldrb.w	sl, [r4, ip]
 802033c:	b289      	uxth	r1, r1
 802033e:	f897 c000 	ldrb.w	ip, [r7]
 8020342:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8020346:	fb03 f901 	mul.w	r9, r3, r1
 802034a:	011b      	lsls	r3, r3, #4
 802034c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020350:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8020354:	eba3 0309 	sub.w	r3, r3, r9
 8020358:	b289      	uxth	r1, r1
 802035a:	b29b      	uxth	r3, r3
 802035c:	eba8 0801 	sub.w	r8, r8, r1
 8020360:	fb03 fc0c 	mul.w	ip, r3, ip
 8020364:	fa1f f888 	uxth.w	r8, r8
 8020368:	930f      	str	r3, [sp, #60]	; 0x3c
 802036a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802036c:	fb08 cc0a 	mla	ip, r8, sl, ip
 8020370:	f892 a000 	ldrb.w	sl, [r2]
 8020374:	fb01 cc0a 	mla	ip, r1, sl, ip
 8020378:	f890 a000 	ldrb.w	sl, [r0]
 802037c:	fb09 cc0a 	mla	ip, r9, sl, ip
 8020380:	f896 a000 	ldrb.w	sl, [r6]
 8020384:	fb1a fa03 	smulbb	sl, sl, r3
 8020388:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802038c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802038e:	fb0c ac05 	mla	ip, ip, r5, sl
 8020392:	fa1f fc8c 	uxth.w	ip, ip
 8020396:	f10c 0a01 	add.w	sl, ip, #1
 802039a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 802039e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80203a2:	f886 a000 	strb.w	sl, [r6]
 80203a6:	f897 c001 	ldrb.w	ip, [r7, #1]
 80203aa:	f89e a001 	ldrb.w	sl, [lr, #1]
 80203ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80203b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80203b4:	fb08 cc0a 	mla	ip, r8, sl, ip
 80203b8:	f892 a001 	ldrb.w	sl, [r2, #1]
 80203bc:	fb01 cc0a 	mla	ip, r1, sl, ip
 80203c0:	f890 a001 	ldrb.w	sl, [r0, #1]
 80203c4:	fb09 cc0a 	mla	ip, r9, sl, ip
 80203c8:	f896 a001 	ldrb.w	sl, [r6, #1]
 80203cc:	fb1a fa03 	smulbb	sl, sl, r3
 80203d0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80203d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80203d6:	fb0c ac05 	mla	ip, ip, r5, sl
 80203da:	fa1f fc8c 	uxth.w	ip, ip
 80203de:	f10c 0a01 	add.w	sl, ip, #1
 80203e2:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80203e6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80203ea:	f886 c001 	strb.w	ip, [r6, #1]
 80203ee:	78bf      	ldrb	r7, [r7, #2]
 80203f0:	f89e c002 	ldrb.w	ip, [lr, #2]
 80203f4:	437b      	muls	r3, r7
 80203f6:	fb08 330c 	mla	r3, r8, ip, r3
 80203fa:	f892 c002 	ldrb.w	ip, [r2, #2]
 80203fe:	7882      	ldrb	r2, [r0, #2]
 8020400:	fb01 310c 	mla	r1, r1, ip, r3
 8020404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020406:	fb09 1902 	mla	r9, r9, r2, r1
 802040a:	78b1      	ldrb	r1, [r6, #2]
 802040c:	fb11 f103 	smulbb	r1, r1, r3
 8020410:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8020414:	fb09 1505 	mla	r5, r9, r5, r1
 8020418:	b2ad      	uxth	r5, r5
 802041a:	1c6b      	adds	r3, r5, #1
 802041c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020420:	122d      	asrs	r5, r5, #8
 8020422:	70b5      	strb	r5, [r6, #2]
 8020424:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020426:	3603      	adds	r6, #3
 8020428:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802042a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802042e:	4413      	add	r3, r2
 8020430:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020432:	9325      	str	r3, [sp, #148]	; 0x94
 8020434:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020436:	4413      	add	r3, r2
 8020438:	9326      	str	r3, [sp, #152]	; 0x98
 802043a:	e73b      	b.n	80202b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 802043c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802043e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8020440:	4433      	add	r3, r6
 8020442:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8020444:	9325      	str	r3, [sp, #148]	; 0x94
 8020446:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020448:	4433      	add	r3, r6
 802044a:	9326      	str	r3, [sp, #152]	; 0x98
 802044c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802044e:	3b01      	subs	r3, #1
 8020450:	9309      	str	r3, [sp, #36]	; 0x24
 8020452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020454:	3303      	adds	r3, #3
 8020456:	930a      	str	r3, [sp, #40]	; 0x28
 8020458:	e70d      	b.n	8020276 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802045a:	d028      	beq.n	80204ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 802045c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802045e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020460:	3b01      	subs	r3, #1
 8020462:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8020464:	fb00 5003 	mla	r0, r0, r3, r5
 8020468:	1400      	asrs	r0, r0, #16
 802046a:	f53f af21 	bmi.w	80202b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802046e:	3901      	subs	r1, #1
 8020470:	4288      	cmp	r0, r1
 8020472:	f6bf af1d 	bge.w	80202b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8020476:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020478:	9826      	ldr	r0, [sp, #152]	; 0x98
 802047a:	fb01 0303 	mla	r3, r1, r3, r0
 802047e:	141b      	asrs	r3, r3, #16
 8020480:	f53f af16 	bmi.w	80202b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8020484:	3a01      	subs	r2, #1
 8020486:	4293      	cmp	r3, r2
 8020488:	f6bf af12 	bge.w	80202b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802048c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802048e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8020492:	1cdf      	adds	r7, r3, #3
 8020494:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8020498:	f1b9 0f00 	cmp.w	r9, #0
 802049c:	dc73      	bgt.n	8020586 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 802049e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80204a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80204a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80204aa:	441a      	add	r2, r3
 80204ac:	920a      	str	r2, [sp, #40]	; 0x28
 80204ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80204b0:	2b00      	cmp	r3, #0
 80204b2:	f340 8129 	ble.w	8020708 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80204b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80204ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80204bc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80204c0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80204c4:	eef0 6a48 	vmov.f32	s13, s16
 80204c8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80204cc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80204d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204d4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80204d8:	eef0 6a68 	vmov.f32	s13, s17
 80204dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204e0:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80204e4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80204e8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80204ec:	ee37 8a48 	vsub.f32	s16, s14, s16
 80204f0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80204f4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80204f8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80204fc:	ee18 2a10 	vmov	r2, s16
 8020500:	eeb0 8a47 	vmov.f32	s16, s14
 8020504:	fb92 f3f3 	sdiv	r3, r2, r3
 8020508:	ee18 2a90 	vmov	r2, s17
 802050c:	9327      	str	r3, [sp, #156]	; 0x9c
 802050e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020510:	eef0 8a67 	vmov.f32	s17, s15
 8020514:	fb92 f3f3 	sdiv	r3, r2, r3
 8020518:	9328      	str	r3, [sp, #160]	; 0xa0
 802051a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802051c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802051e:	3b01      	subs	r3, #1
 8020520:	930d      	str	r3, [sp, #52]	; 0x34
 8020522:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020524:	bf08      	it	eq
 8020526:	4613      	moveq	r3, r2
 8020528:	9309      	str	r3, [sp, #36]	; 0x24
 802052a:	e696      	b.n	802025a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802052c:	b149      	cbz	r1, 8020542 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802052e:	5caa      	ldrb	r2, [r5, r2]
 8020530:	4670      	mov	r0, lr
 8020532:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020536:	4422      	add	r2, r4
 8020538:	4677      	mov	r7, lr
 802053a:	e6fb      	b.n	8020334 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802053c:	4670      	mov	r0, lr
 802053e:	4672      	mov	r2, lr
 8020540:	e6f8      	b.n	8020334 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8020542:	4670      	mov	r0, lr
 8020544:	4672      	mov	r2, lr
 8020546:	e7f7      	b.n	8020538 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8020548:	f110 0c01 	adds.w	ip, r0, #1
 802054c:	f53f af6a 	bmi.w	8020424 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8020550:	4562      	cmp	r2, ip
 8020552:	f6ff af67 	blt.w	8020424 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8020556:	f115 0c01 	adds.w	ip, r5, #1
 802055a:	f53f af63 	bmi.w	8020424 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 802055e:	4567      	cmp	r7, ip
 8020560:	f6ff af60 	blt.w	8020424 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8020564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020566:	b23f      	sxth	r7, r7
 8020568:	b212      	sxth	r2, r2
 802056a:	9002      	str	r0, [sp, #8]
 802056c:	9701      	str	r7, [sp, #4]
 802056e:	9200      	str	r2, [sp, #0]
 8020570:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020572:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020574:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8020578:	e9cd 5803 	strd	r5, r8, [sp, #12]
 802057c:	4623      	mov	r3, r4
 802057e:	4631      	mov	r1, r6
 8020580:	f7ff fd4c 	bl	802001c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8020584:	e74e      	b.n	8020424 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8020586:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020588:	9826      	ldr	r0, [sp, #152]	; 0x98
 802058a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802058e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8020590:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020592:	1400      	asrs	r0, r0, #16
 8020594:	142d      	asrs	r5, r5, #16
 8020596:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020598:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802059c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80205a0:	fb02 5000 	mla	r0, r2, r0, r5
 80205a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80205a6:	f815 e000 	ldrb.w	lr, [r5, r0]
 80205aa:	eb05 0c00 	add.w	ip, r5, r0
 80205ae:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80205b2:	eb04 060e 	add.w	r6, r4, lr
 80205b6:	2b00      	cmp	r3, #0
 80205b8:	f000 8097 	beq.w	80206ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 80205bc:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80205c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80205c4:	4425      	add	r5, r4
 80205c6:	2900      	cmp	r1, #0
 80205c8:	f000 8098 	beq.w	80206fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80205cc:	eb0c 0002 	add.w	r0, ip, r2
 80205d0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80205d4:	7840      	ldrb	r0, [r0, #1]
 80205d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80205da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80205de:	4422      	add	r2, r4
 80205e0:	4420      	add	r0, r4
 80205e2:	b29b      	uxth	r3, r3
 80205e4:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80205e8:	b289      	uxth	r1, r1
 80205ea:	f895 e000 	ldrb.w	lr, [r5]
 80205ee:	3703      	adds	r7, #3
 80205f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80205f4:	fb03 f801 	mul.w	r8, r3, r1
 80205f8:	011b      	lsls	r3, r3, #4
 80205fa:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80205fe:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8020602:	eba3 0308 	sub.w	r3, r3, r8
 8020606:	b289      	uxth	r1, r1
 8020608:	b29b      	uxth	r3, r3
 802060a:	ebac 0c01 	sub.w	ip, ip, r1
 802060e:	fb03 fe0e 	mul.w	lr, r3, lr
 8020612:	fa1f fc8c 	uxth.w	ip, ip
 8020616:	930f      	str	r3, [sp, #60]	; 0x3c
 8020618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802061a:	fb0c ee0b 	mla	lr, ip, fp, lr
 802061e:	f892 b000 	ldrb.w	fp, [r2]
 8020622:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020626:	f890 b000 	ldrb.w	fp, [r0]
 802062a:	fb08 ee0b 	mla	lr, r8, fp, lr
 802062e:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8020632:	fb1b fb03 	smulbb	fp, fp, r3
 8020636:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802063a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802063c:	fb0e be0a 	mla	lr, lr, sl, fp
 8020640:	fa1f fe8e 	uxth.w	lr, lr
 8020644:	f10e 0b01 	add.w	fp, lr, #1
 8020648:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802064c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020650:	f807 ec06 	strb.w	lr, [r7, #-6]
 8020654:	f895 e001 	ldrb.w	lr, [r5, #1]
 8020658:	f896 b001 	ldrb.w	fp, [r6, #1]
 802065c:	fb03 fe0e 	mul.w	lr, r3, lr
 8020660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020662:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020666:	f892 b001 	ldrb.w	fp, [r2, #1]
 802066a:	fb01 ee0b 	mla	lr, r1, fp, lr
 802066e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020672:	fb08 ee0b 	mla	lr, r8, fp, lr
 8020676:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 802067a:	fb1b fb03 	smulbb	fp, fp, r3
 802067e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8020682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020684:	fb0e be0a 	mla	lr, lr, sl, fp
 8020688:	fa1f fe8e 	uxth.w	lr, lr
 802068c:	f10e 0b01 	add.w	fp, lr, #1
 8020690:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8020694:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020698:	f807 ec05 	strb.w	lr, [r7, #-5]
 802069c:	78ad      	ldrb	r5, [r5, #2]
 802069e:	78b6      	ldrb	r6, [r6, #2]
 80206a0:	436b      	muls	r3, r5
 80206a2:	7895      	ldrb	r5, [r2, #2]
 80206a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80206a6:	fb0c 3306 	mla	r3, ip, r6, r3
 80206aa:	fb01 3305 	mla	r3, r1, r5, r3
 80206ae:	7885      	ldrb	r5, [r0, #2]
 80206b0:	fb08 3805 	mla	r8, r8, r5, r3
 80206b4:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80206b8:	fb13 f302 	smulbb	r3, r3, r2
 80206bc:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80206c0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80206c2:	fb08 380a 	mla	r8, r8, sl, r3
 80206c6:	fa1f f888 	uxth.w	r8, r8
 80206ca:	f108 0301 	add.w	r3, r8, #1
 80206ce:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80206d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80206d4:	4413      	add	r3, r2
 80206d6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80206d8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80206dc:	9325      	str	r3, [sp, #148]	; 0x94
 80206de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80206e0:	f807 8c04 	strb.w	r8, [r7, #-4]
 80206e4:	4413      	add	r3, r2
 80206e6:	9326      	str	r3, [sp, #152]	; 0x98
 80206e8:	e6d6      	b.n	8020498 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80206ea:	b151      	cbz	r1, 8020702 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 80206ec:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80206f0:	4630      	mov	r0, r6
 80206f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80206f6:	4422      	add	r2, r4
 80206f8:	4635      	mov	r5, r6
 80206fa:	e772      	b.n	80205e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80206fc:	4630      	mov	r0, r6
 80206fe:	4632      	mov	r2, r6
 8020700:	e76f      	b.n	80205e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8020702:	4630      	mov	r0, r6
 8020704:	4632      	mov	r2, r6
 8020706:	e7f7      	b.n	80206f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8020708:	b013      	add	sp, #76	; 0x4c
 802070a:	ecbd 8b08 	vpop	{d8-d11}
 802070e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020714 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8020714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020718:	784d      	ldrb	r5, [r1, #1]
 802071a:	f891 9002 	ldrb.w	r9, [r1, #2]
 802071e:	022d      	lsls	r5, r5, #8
 8020720:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8020724:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8020728:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 802072c:	f891 9000 	ldrb.w	r9, [r1]
 8020730:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8020734:	ea45 0509 	orr.w	r5, r5, r9
 8020738:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 802073c:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8020740:	9501      	str	r5, [sp, #4]
 8020742:	fb06 470c 	mla	r7, r6, ip, r4
 8020746:	2e00      	cmp	r6, #0
 8020748:	eb02 0e07 	add.w	lr, r2, r7
 802074c:	db46      	blt.n	80207dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 802074e:	45b0      	cmp	r8, r6
 8020750:	dd44      	ble.n	80207dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 8020752:	2c00      	cmp	r4, #0
 8020754:	db40      	blt.n	80207d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8020756:	45a4      	cmp	ip, r4
 8020758:	dd3e      	ble.n	80207d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 802075a:	5dd7      	ldrb	r7, [r2, r7]
 802075c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020760:	441f      	add	r7, r3
 8020762:	1c62      	adds	r2, r4, #1
 8020764:	d43d      	bmi.n	80207e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8020766:	4594      	cmp	ip, r2
 8020768:	dd3b      	ble.n	80207e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 802076a:	f1ba 0f00 	cmp.w	sl, #0
 802076e:	d038      	beq.n	80207e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8020770:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8020774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020778:	441d      	add	r5, r3
 802077a:	3601      	adds	r6, #1
 802077c:	d435      	bmi.n	80207ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 802077e:	45b0      	cmp	r8, r6
 8020780:	dd33      	ble.n	80207ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8020782:	b390      	cbz	r0, 80207ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8020784:	2c00      	cmp	r4, #0
 8020786:	db2e      	blt.n	80207e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8020788:	45a4      	cmp	ip, r4
 802078a:	dd2c      	ble.n	80207e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 802078c:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8020790:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020794:	441e      	add	r6, r3
 8020796:	1c62      	adds	r2, r4, #1
 8020798:	d42a      	bmi.n	80207f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 802079a:	4594      	cmp	ip, r2
 802079c:	dd28      	ble.n	80207f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 802079e:	f1ba 0f00 	cmp.w	sl, #0
 80207a2:	d025      	beq.n	80207f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 80207a4:	44f4      	add	ip, lr
 80207a6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80207aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80207ae:	4413      	add	r3, r2
 80207b0:	f1ba 0f0f 	cmp.w	sl, #15
 80207b4:	f897 8000 	ldrb.w	r8, [r7]
 80207b8:	f895 9000 	ldrb.w	r9, [r5]
 80207bc:	f896 e000 	ldrb.w	lr, [r6]
 80207c0:	f893 c000 	ldrb.w	ip, [r3]
 80207c4:	d801      	bhi.n	80207ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 80207c6:	280f      	cmp	r0, #15
 80207c8:	d914      	bls.n	80207f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 80207ca:	4b29      	ldr	r3, [pc, #164]	; (8020870 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 80207cc:	f240 1157 	movw	r1, #343	; 0x157
 80207d0:	4a28      	ldr	r2, [pc, #160]	; (8020874 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 80207d2:	4829      	ldr	r0, [pc, #164]	; (8020878 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 80207d4:	f006 f90c 	bl	80269f0 <__assert_func>
 80207d8:	af01      	add	r7, sp, #4
 80207da:	e7c2      	b.n	8020762 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 80207dc:	ad01      	add	r5, sp, #4
 80207de:	462f      	mov	r7, r5
 80207e0:	e7cb      	b.n	802077a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80207e2:	ad01      	add	r5, sp, #4
 80207e4:	e7c9      	b.n	802077a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80207e6:	ae01      	add	r6, sp, #4
 80207e8:	e7d5      	b.n	8020796 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 80207ea:	ab01      	add	r3, sp, #4
 80207ec:	461e      	mov	r6, r3
 80207ee:	e7df      	b.n	80207b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80207f0:	ab01      	add	r3, sp, #4
 80207f2:	e7dd      	b.n	80207b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80207f4:	fa1f f48a 	uxth.w	r4, sl
 80207f8:	b280      	uxth	r0, r0
 80207fa:	fb04 fa00 	mul.w	sl, r4, r0
 80207fe:	0124      	lsls	r4, r4, #4
 8020800:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8020804:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8020808:	b282      	uxth	r2, r0
 802080a:	eba4 000a 	sub.w	r0, r4, sl
 802080e:	ebab 0b02 	sub.w	fp, fp, r2
 8020812:	b280      	uxth	r0, r0
 8020814:	fa1f fb8b 	uxth.w	fp, fp
 8020818:	fb00 f909 	mul.w	r9, r0, r9
 802081c:	fb0b 9808 	mla	r8, fp, r8, r9
 8020820:	fb02 8e0e 	mla	lr, r2, lr, r8
 8020824:	fb0a ec0c 	mla	ip, sl, ip, lr
 8020828:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802082c:	f881 c000 	strb.w	ip, [r1]
 8020830:	786c      	ldrb	r4, [r5, #1]
 8020832:	f897 c001 	ldrb.w	ip, [r7, #1]
 8020836:	4344      	muls	r4, r0
 8020838:	fb0b 4c0c 	mla	ip, fp, ip, r4
 802083c:	7874      	ldrb	r4, [r6, #1]
 802083e:	fb02 cc04 	mla	ip, r2, r4, ip
 8020842:	785c      	ldrb	r4, [r3, #1]
 8020844:	fb0a c404 	mla	r4, sl, r4, ip
 8020848:	1224      	asrs	r4, r4, #8
 802084a:	704c      	strb	r4, [r1, #1]
 802084c:	78ad      	ldrb	r5, [r5, #2]
 802084e:	78bc      	ldrb	r4, [r7, #2]
 8020850:	4368      	muls	r0, r5
 8020852:	fb0b 0b04 	mla	fp, fp, r4, r0
 8020856:	78b0      	ldrb	r0, [r6, #2]
 8020858:	fb02 b000 	mla	r0, r2, r0, fp
 802085c:	789a      	ldrb	r2, [r3, #2]
 802085e:	fb0a 0a02 	mla	sl, sl, r2, r0
 8020862:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020866:	f881 a002 	strb.w	sl, [r1, #2]
 802086a:	b003      	add	sp, #12
 802086c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020870:	0802eac7 	.word	0x0802eac7
 8020874:	0802f02f 	.word	0x0802f02f
 8020878:	0802eb90 	.word	0x0802eb90

0802087c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802087c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020880:	ed2d 8b0a 	vpush	{d8-d12}
 8020884:	b08d      	sub	sp, #52	; 0x34
 8020886:	eeb0 aa40 	vmov.f32	s20, s0
 802088a:	eef0 9a60 	vmov.f32	s19, s1
 802088e:	900b      	str	r0, [sp, #44]	; 0x2c
 8020890:	eeb0 9a41 	vmov.f32	s18, s2
 8020894:	9306      	str	r3, [sp, #24]
 8020896:	eeb0 8a62 	vmov.f32	s16, s5
 802089a:	eef0 8a43 	vmov.f32	s17, s6
 802089e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80208a0:	eeb0 ca44 	vmov.f32	s24, s8
 80208a4:	eef0 ba64 	vmov.f32	s23, s9
 80208a8:	eeb0 ba45 	vmov.f32	s22, s10
 80208ac:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80208b0:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80208b4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80208b6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80208ba:	6850      	ldr	r0, [r2, #4]
 80208bc:	6812      	ldr	r2, [r2, #0]
 80208be:	fb00 1303 	mla	r3, r0, r3, r1
 80208c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80208c6:	18d3      	adds	r3, r2, r3
 80208c8:	9307      	str	r3, [sp, #28]
 80208ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80208cc:	681b      	ldr	r3, [r3, #0]
 80208ce:	9308      	str	r3, [sp, #32]
 80208d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80208d2:	685d      	ldr	r5, [r3, #4]
 80208d4:	3504      	adds	r5, #4
 80208d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208d8:	2b00      	cmp	r3, #0
 80208da:	dc03      	bgt.n	80208e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80208dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80208de:	2b00      	cmp	r3, #0
 80208e0:	f340 81e6 	ble.w	8020cb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80208e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80208e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80208ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80208ee:	1e48      	subs	r0, r1, #1
 80208f0:	1e56      	subs	r6, r2, #1
 80208f2:	9b06      	ldr	r3, [sp, #24]
 80208f4:	2b00      	cmp	r3, #0
 80208f6:	f340 80bd 	ble.w	8020a74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80208fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80208fc:	1427      	asrs	r7, r4, #16
 80208fe:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020902:	d406      	bmi.n	8020912 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020904:	4287      	cmp	r7, r0
 8020906:	da04      	bge.n	8020912 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020908:	2b00      	cmp	r3, #0
 802090a:	db02      	blt.n	8020912 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802090c:	42b3      	cmp	r3, r6
 802090e:	f2c0 80b2 	blt.w	8020a76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020912:	3701      	adds	r7, #1
 8020914:	f100 80a1 	bmi.w	8020a5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8020918:	42b9      	cmp	r1, r7
 802091a:	f2c0 809e 	blt.w	8020a5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 802091e:	3301      	adds	r3, #1
 8020920:	f100 809b 	bmi.w	8020a5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8020924:	429a      	cmp	r2, r3
 8020926:	f2c0 8098 	blt.w	8020a5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 802092a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 802092e:	f1bb 0f00 	cmp.w	fp, #0
 8020932:	f340 80bf 	ble.w	8020ab4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8020936:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020938:	9828      	ldr	r0, [sp, #160]	; 0xa0
 802093a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802093c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020940:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8020944:	1420      	asrs	r0, r4, #16
 8020946:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020948:	ea4f 4723 	mov.w	r7, r3, asr #16
 802094c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020950:	6892      	ldr	r2, [r2, #8]
 8020952:	f100 8103 	bmi.w	8020b5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020956:	f102 3eff 	add.w	lr, r2, #4294967295
 802095a:	4570      	cmp	r0, lr
 802095c:	f280 80fe 	bge.w	8020b5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020960:	2f00      	cmp	r7, #0
 8020962:	f2c0 80fb 	blt.w	8020b5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020966:	f10c 3eff 	add.w	lr, ip, #4294967295
 802096a:	4577      	cmp	r7, lr
 802096c:	f280 80f6 	bge.w	8020b5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020970:	b212      	sxth	r2, r2
 8020972:	fb07 0002 	mla	r0, r7, r2, r0
 8020976:	9f08      	ldr	r7, [sp, #32]
 8020978:	f817 8000 	ldrb.w	r8, [r7, r0]
 802097c:	eb07 0e00 	add.w	lr, r7, r0
 8020980:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020984:	eb05 0c08 	add.w	ip, r5, r8
 8020988:	2b00      	cmp	r3, #0
 802098a:	f000 80d8 	beq.w	8020b3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 802098e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8020992:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020996:	442f      	add	r7, r5
 8020998:	2900      	cmp	r1, #0
 802099a:	f000 80d9 	beq.w	8020b50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802099e:	eb0e 0002 	add.w	r0, lr, r2
 80209a2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80209a6:	7840      	ldrb	r0, [r0, #1]
 80209a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80209ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80209b0:	442a      	add	r2, r5
 80209b2:	4428      	add	r0, r5
 80209b4:	b29b      	uxth	r3, r3
 80209b6:	f815 a008 	ldrb.w	sl, [r5, r8]
 80209ba:	b289      	uxth	r1, r1
 80209bc:	f897 8000 	ldrb.w	r8, [r7]
 80209c0:	fb03 f901 	mul.w	r9, r3, r1
 80209c4:	011b      	lsls	r3, r3, #4
 80209c6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80209ca:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80209ce:	eba3 0309 	sub.w	r3, r3, r9
 80209d2:	b289      	uxth	r1, r1
 80209d4:	b29b      	uxth	r3, r3
 80209d6:	ebae 0e01 	sub.w	lr, lr, r1
 80209da:	fb03 f808 	mul.w	r8, r3, r8
 80209de:	fa1f fe8e 	uxth.w	lr, lr
 80209e2:	fb0e 880a 	mla	r8, lr, sl, r8
 80209e6:	f892 a000 	ldrb.w	sl, [r2]
 80209ea:	fb01 880a 	mla	r8, r1, sl, r8
 80209ee:	f890 a000 	ldrb.w	sl, [r0]
 80209f2:	fb09 880a 	mla	r8, r9, sl, r8
 80209f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80209fa:	f886 8000 	strb.w	r8, [r6]
 80209fe:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020a02:	f89c a001 	ldrb.w	sl, [ip, #1]
 8020a06:	fb03 f808 	mul.w	r8, r3, r8
 8020a0a:	fb0e 880a 	mla	r8, lr, sl, r8
 8020a0e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020a12:	fb01 880a 	mla	r8, r1, sl, r8
 8020a16:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020a1a:	fb09 880a 	mla	r8, r9, sl, r8
 8020a1e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020a22:	f886 8001 	strb.w	r8, [r6, #1]
 8020a26:	78bf      	ldrb	r7, [r7, #2]
 8020a28:	f89c c002 	ldrb.w	ip, [ip, #2]
 8020a2c:	437b      	muls	r3, r7
 8020a2e:	7892      	ldrb	r2, [r2, #2]
 8020a30:	fb0e 330c 	mla	r3, lr, ip, r3
 8020a34:	fb01 3102 	mla	r1, r1, r2, r3
 8020a38:	7882      	ldrb	r2, [r0, #2]
 8020a3a:	fb09 1902 	mla	r9, r9, r2, r1
 8020a3e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020a42:	f886 9002 	strb.w	r9, [r6, #2]
 8020a46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020a48:	3603      	adds	r6, #3
 8020a4a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020a4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020a50:	441c      	add	r4, r3
 8020a52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020a54:	4413      	add	r3, r2
 8020a56:	9322      	str	r3, [sp, #136]	; 0x88
 8020a58:	e769      	b.n	802092e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020a5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020a5c:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8020a5e:	441c      	add	r4, r3
 8020a60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020a62:	443b      	add	r3, r7
 8020a64:	9322      	str	r3, [sp, #136]	; 0x88
 8020a66:	9b06      	ldr	r3, [sp, #24]
 8020a68:	3b01      	subs	r3, #1
 8020a6a:	9306      	str	r3, [sp, #24]
 8020a6c:	9b07      	ldr	r3, [sp, #28]
 8020a6e:	3303      	adds	r3, #3
 8020a70:	9307      	str	r3, [sp, #28]
 8020a72:	e73e      	b.n	80208f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020a74:	d026      	beq.n	8020ac4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8020a76:	9b06      	ldr	r3, [sp, #24]
 8020a78:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8020a7a:	3b01      	subs	r3, #1
 8020a7c:	fb00 4003 	mla	r0, r0, r3, r4
 8020a80:	1400      	asrs	r0, r0, #16
 8020a82:	f53f af52 	bmi.w	802092a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020a86:	3901      	subs	r1, #1
 8020a88:	4288      	cmp	r0, r1
 8020a8a:	f6bf af4e 	bge.w	802092a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020a8e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020a90:	9822      	ldr	r0, [sp, #136]	; 0x88
 8020a92:	fb01 0303 	mla	r3, r1, r3, r0
 8020a96:	141b      	asrs	r3, r3, #16
 8020a98:	f53f af47 	bmi.w	802092a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020a9c:	3a01      	subs	r2, #1
 8020a9e:	4293      	cmp	r3, r2
 8020aa0:	f6bf af43 	bge.w	802092a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020aa4:	9b07      	ldr	r3, [sp, #28]
 8020aa6:	f8dd a018 	ldr.w	sl, [sp, #24]
 8020aaa:	f103 0803 	add.w	r8, r3, #3
 8020aae:	f1ba 0f00 	cmp.w	sl, #0
 8020ab2:	dc71      	bgt.n	8020b98 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8020ab4:	9b06      	ldr	r3, [sp, #24]
 8020ab6:	9a07      	ldr	r2, [sp, #28]
 8020ab8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020abc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020ac0:	441a      	add	r2, r3
 8020ac2:	9207      	str	r2, [sp, #28]
 8020ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ac6:	2b00      	cmp	r3, #0
 8020ac8:	f340 80f2 	ble.w	8020cb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8020acc:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8020ad0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020ad2:	ee79 9aab 	vadd.f32	s19, s19, s23
 8020ad6:	eef0 6a48 	vmov.f32	s13, s16
 8020ada:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8020ade:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8020ae2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ae6:	ee16 4a90 	vmov	r4, s13
 8020aea:	eef0 6a68 	vmov.f32	s13, s17
 8020aee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020af2:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8020af6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020afa:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020afe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020b02:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020b06:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020b0a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020b0e:	ee18 2a10 	vmov	r2, s16
 8020b12:	eeb0 8a47 	vmov.f32	s16, s14
 8020b16:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b1a:	ee18 2a90 	vmov	r2, s17
 8020b1e:	9323      	str	r3, [sp, #140]	; 0x8c
 8020b20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020b22:	eef0 8a67 	vmov.f32	s17, s15
 8020b26:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b2a:	9324      	str	r3, [sp, #144]	; 0x90
 8020b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020b30:	3b01      	subs	r3, #1
 8020b32:	9309      	str	r3, [sp, #36]	; 0x24
 8020b34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020b36:	bf08      	it	eq
 8020b38:	4613      	moveq	r3, r2
 8020b3a:	9306      	str	r3, [sp, #24]
 8020b3c:	e6cb      	b.n	80208d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020b3e:	b151      	cbz	r1, 8020b56 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020b40:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8020b44:	4660      	mov	r0, ip
 8020b46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020b4a:	442a      	add	r2, r5
 8020b4c:	4667      	mov	r7, ip
 8020b4e:	e731      	b.n	80209b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020b50:	4660      	mov	r0, ip
 8020b52:	4662      	mov	r2, ip
 8020b54:	e72e      	b.n	80209b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020b56:	4660      	mov	r0, ip
 8020b58:	4662      	mov	r2, ip
 8020b5a:	e7f7      	b.n	8020b4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8020b5c:	f110 0e01 	adds.w	lr, r0, #1
 8020b60:	f53f af71 	bmi.w	8020a46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020b64:	4572      	cmp	r2, lr
 8020b66:	f6ff af6e 	blt.w	8020a46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020b6a:	f117 0e01 	adds.w	lr, r7, #1
 8020b6e:	f53f af6a 	bmi.w	8020a46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020b72:	45f4      	cmp	ip, lr
 8020b74:	f6ff af67 	blt.w	8020a46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020b78:	b212      	sxth	r2, r2
 8020b7a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020b7e:	fa0f f38c 	sxth.w	r3, ip
 8020b82:	9200      	str	r2, [sp, #0]
 8020b84:	4631      	mov	r1, r6
 8020b86:	9a08      	ldr	r2, [sp, #32]
 8020b88:	9301      	str	r3, [sp, #4]
 8020b8a:	462b      	mov	r3, r5
 8020b8c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8020b90:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020b92:	f7ff fdbf 	bl	8020714 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8020b96:	e756      	b.n	8020a46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020b98:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020b9a:	1426      	asrs	r6, r4, #16
 8020b9c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8020b9e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020ba2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020ba6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020ba8:	1400      	asrs	r0, r0, #16
 8020baa:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020bae:	fb02 6000 	mla	r0, r2, r0, r6
 8020bb2:	9e08      	ldr	r6, [sp, #32]
 8020bb4:	f816 e000 	ldrb.w	lr, [r6, r0]
 8020bb8:	eb06 0c00 	add.w	ip, r6, r0
 8020bbc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020bc0:	eb05 070e 	add.w	r7, r5, lr
 8020bc4:	2b00      	cmp	r3, #0
 8020bc6:	d064      	beq.n	8020c92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8020bc8:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8020bcc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020bd0:	442e      	add	r6, r5
 8020bd2:	2900      	cmp	r1, #0
 8020bd4:	d066      	beq.n	8020ca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8020bd6:	eb0c 0002 	add.w	r0, ip, r2
 8020bda:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020bde:	7840      	ldrb	r0, [r0, #1]
 8020be0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020be4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020be8:	442a      	add	r2, r5
 8020bea:	4428      	add	r0, r5
 8020bec:	b29b      	uxth	r3, r3
 8020bee:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8020bf2:	b289      	uxth	r1, r1
 8020bf4:	f896 e000 	ldrb.w	lr, [r6]
 8020bf8:	f108 0803 	add.w	r8, r8, #3
 8020bfc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020c00:	fb03 f901 	mul.w	r9, r3, r1
 8020c04:	011b      	lsls	r3, r3, #4
 8020c06:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020c0a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8020c0e:	eba3 0309 	sub.w	r3, r3, r9
 8020c12:	b289      	uxth	r1, r1
 8020c14:	b29b      	uxth	r3, r3
 8020c16:	ebac 0c01 	sub.w	ip, ip, r1
 8020c1a:	fb03 fe0e 	mul.w	lr, r3, lr
 8020c1e:	fa1f fc8c 	uxth.w	ip, ip
 8020c22:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020c26:	f892 b000 	ldrb.w	fp, [r2]
 8020c2a:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020c2e:	f890 b000 	ldrb.w	fp, [r0]
 8020c32:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020c36:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020c3a:	f808 ec06 	strb.w	lr, [r8, #-6]
 8020c3e:	f896 e001 	ldrb.w	lr, [r6, #1]
 8020c42:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020c46:	fb03 fe0e 	mul.w	lr, r3, lr
 8020c4a:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020c4e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020c52:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020c56:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020c5a:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020c5e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020c62:	f808 ec05 	strb.w	lr, [r8, #-5]
 8020c66:	78b6      	ldrb	r6, [r6, #2]
 8020c68:	78bf      	ldrb	r7, [r7, #2]
 8020c6a:	4373      	muls	r3, r6
 8020c6c:	7896      	ldrb	r6, [r2, #2]
 8020c6e:	7882      	ldrb	r2, [r0, #2]
 8020c70:	fb0c 3307 	mla	r3, ip, r7, r3
 8020c74:	fb01 3306 	mla	r3, r1, r6, r3
 8020c78:	fb09 3902 	mla	r9, r9, r2, r3
 8020c7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020c7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020c80:	441c      	add	r4, r3
 8020c82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020c84:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020c88:	4413      	add	r3, r2
 8020c8a:	f808 9c04 	strb.w	r9, [r8, #-4]
 8020c8e:	9322      	str	r3, [sp, #136]	; 0x88
 8020c90:	e70d      	b.n	8020aae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020c92:	b151      	cbz	r1, 8020caa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8020c94:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020c98:	4638      	mov	r0, r7
 8020c9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020c9e:	442a      	add	r2, r5
 8020ca0:	463e      	mov	r6, r7
 8020ca2:	e7a3      	b.n	8020bec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020ca4:	4638      	mov	r0, r7
 8020ca6:	463a      	mov	r2, r7
 8020ca8:	e7a0      	b.n	8020bec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020caa:	4638      	mov	r0, r7
 8020cac:	463a      	mov	r2, r7
 8020cae:	e7f7      	b.n	8020ca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8020cb0:	b00d      	add	sp, #52	; 0x34
 8020cb2:	ecbd 8b0a 	vpop	{d8-d12}
 8020cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020cbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8020cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cc0:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8020cc4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8020cc8:	2d00      	cmp	r5, #0
 8020cca:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8020cce:	fb05 040e 	mla	r4, r5, lr, r0
 8020cd2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8020cd6:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8020cda:	eb02 0804 	add.w	r8, r2, r4
 8020cde:	db40      	blt.n	8020d62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8020ce0:	45a9      	cmp	r9, r5
 8020ce2:	dd3e      	ble.n	8020d62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8020ce4:	2800      	cmp	r0, #0
 8020ce6:	db3a      	blt.n	8020d5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8020ce8:	4586      	cmp	lr, r0
 8020cea:	dd38      	ble.n	8020d5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8020cec:	5d12      	ldrb	r2, [r2, r4]
 8020cee:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020cf2:	1c42      	adds	r2, r0, #1
 8020cf4:	d438      	bmi.n	8020d68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8020cf6:	4596      	cmp	lr, r2
 8020cf8:	dd36      	ble.n	8020d68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8020cfa:	b3bf      	cbz	r7, 8020d6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 8020cfc:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020d00:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8020d04:	3501      	adds	r5, #1
 8020d06:	d435      	bmi.n	8020d74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8020d08:	45a9      	cmp	r9, r5
 8020d0a:	dd33      	ble.n	8020d74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8020d0c:	f1bc 0f00 	cmp.w	ip, #0
 8020d10:	d033      	beq.n	8020d7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8020d12:	2800      	cmp	r0, #0
 8020d14:	db2c      	blt.n	8020d70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8020d16:	4586      	cmp	lr, r0
 8020d18:	dd2a      	ble.n	8020d70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8020d1a:	f818 200e 	ldrb.w	r2, [r8, lr]
 8020d1e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8020d22:	3001      	adds	r0, #1
 8020d24:	d42c      	bmi.n	8020d80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8020d26:	4586      	cmp	lr, r0
 8020d28:	dd2a      	ble.n	8020d80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8020d2a:	b35f      	cbz	r7, 8020d84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 8020d2c:	44c6      	add	lr, r8
 8020d2e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020d32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020d36:	2f0f      	cmp	r7, #15
 8020d38:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020d3c:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8020d40:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020d44:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020d48:	d802      	bhi.n	8020d50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 8020d4a:	f1bc 0f0f 	cmp.w	ip, #15
 8020d4e:	d91b      	bls.n	8020d88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8020d50:	4b77      	ldr	r3, [pc, #476]	; (8020f30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8020d52:	f240 1157 	movw	r1, #343	; 0x157
 8020d56:	4a77      	ldr	r2, [pc, #476]	; (8020f34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8020d58:	4877      	ldr	r0, [pc, #476]	; (8020f38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 8020d5a:	f005 fe49 	bl	80269f0 <__assert_func>
 8020d5e:	2600      	movs	r6, #0
 8020d60:	e7c7      	b.n	8020cf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8020d62:	2400      	movs	r4, #0
 8020d64:	4626      	mov	r6, r4
 8020d66:	e7cd      	b.n	8020d04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8020d68:	2400      	movs	r4, #0
 8020d6a:	e7cb      	b.n	8020d04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8020d6c:	463c      	mov	r4, r7
 8020d6e:	e7c9      	b.n	8020d04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8020d70:	2500      	movs	r5, #0
 8020d72:	e7d6      	b.n	8020d22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8020d74:	2200      	movs	r2, #0
 8020d76:	4615      	mov	r5, r2
 8020d78:	e7dd      	b.n	8020d36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020d7a:	4662      	mov	r2, ip
 8020d7c:	4665      	mov	r5, ip
 8020d7e:	e7da      	b.n	8020d36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020d80:	2200      	movs	r2, #0
 8020d82:	e7d8      	b.n	8020d36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020d84:	463a      	mov	r2, r7
 8020d86:	e7d6      	b.n	8020d36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020d88:	b2bf      	uxth	r7, r7
 8020d8a:	fa1f f08c 	uxth.w	r0, ip
 8020d8e:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8020d92:	fb00 fe07 	mul.w	lr, r0, r7
 8020d96:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8020d9a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020d9e:	ebac 070e 	sub.w	r7, ip, lr
 8020da2:	b280      	uxth	r0, r0
 8020da4:	b2bf      	uxth	r7, r7
 8020da6:	1a1b      	subs	r3, r3, r0
 8020da8:	fb07 fc0a 	mul.w	ip, r7, sl
 8020dac:	b29b      	uxth	r3, r3
 8020dae:	fb03 cc0b 	mla	ip, r3, fp, ip
 8020db2:	9300      	str	r3, [sp, #0]
 8020db4:	fb00 cc09 	mla	ip, r0, r9, ip
 8020db8:	fb0e cc08 	mla	ip, lr, r8, ip
 8020dbc:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020dc0:	9301      	str	r3, [sp, #4]
 8020dc2:	2b00      	cmp	r3, #0
 8020dc4:	f000 80b0 	beq.w	8020f28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8020dc8:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020dcc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020dd0:	fb0b fc0c 	mul.w	ip, fp, ip
 8020dd4:	fb0b f606 	mul.w	r6, fp, r6
 8020dd8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020ddc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020de0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8020de4:	44dc      	add	ip, fp
 8020de6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020dea:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020dee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020df2:	fb0a fb0b 	mul.w	fp, sl, fp
 8020df6:	fb0a fa04 	mul.w	sl, sl, r4
 8020dfa:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8020dfe:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020e02:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8020e06:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020e0a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020e0e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020e12:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8020e16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020e1a:	0a36      	lsrs	r6, r6, #8
 8020e1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e20:	44dc      	add	ip, fp
 8020e22:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020e26:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020e2a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020e2e:	fb09 fb0b 	mul.w	fp, r9, fp
 8020e32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e36:	fb09 f905 	mul.w	r9, r9, r5
 8020e3a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020e3e:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8020e42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020e46:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8020e4a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020e4e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020e52:	fb0c fc07 	mul.w	ip, ip, r7
 8020e56:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8020e5a:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8020e5e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020e62:	445c      	add	r4, fp
 8020e64:	fb08 f505 	mul.w	r5, r8, r5
 8020e68:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020e6c:	fb08 f802 	mul.w	r8, r8, r2
 8020e70:	0a24      	lsrs	r4, r4, #8
 8020e72:	0a2a      	lsrs	r2, r5, #8
 8020e74:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8020e78:	fb07 f70a 	mul.w	r7, r7, sl
 8020e7c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020e80:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020e84:	4415      	add	r5, r2
 8020e86:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8020e8a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020e8e:	9a00      	ldr	r2, [sp, #0]
 8020e90:	0a2d      	lsrs	r5, r5, #8
 8020e92:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020e96:	fb03 cc02 	mla	ip, r3, r2, ip
 8020e9a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020e9e:	fb02 7306 	mla	r3, r2, r6, r7
 8020ea2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020ea6:	9a01      	ldr	r2, [sp, #4]
 8020ea8:	fb05 c50e 	mla	r5, r5, lr, ip
 8020eac:	fb0e 3e08 	mla	lr, lr, r8, r3
 8020eb0:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8020eb4:	fb04 5400 	mla	r4, r4, r0, r5
 8020eb8:	fb00 e303 	mla	r3, r0, r3, lr
 8020ebc:	0a24      	lsrs	r4, r4, #8
 8020ebe:	0a1b      	lsrs	r3, r3, #8
 8020ec0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020ec4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020ec8:	431c      	orrs	r4, r3
 8020eca:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8020ece:	b29b      	uxth	r3, r3
 8020ed0:	b2e0      	uxtb	r0, r4
 8020ed2:	435a      	muls	r2, r3
 8020ed4:	fb10 f003 	smulbb	r0, r0, r3
 8020ed8:	1c55      	adds	r5, r2, #1
 8020eda:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8020ede:	780a      	ldrb	r2, [r1, #0]
 8020ee0:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8020ee4:	b2ed      	uxtb	r5, r5
 8020ee6:	fb02 0205 	mla	r2, r2, r5, r0
 8020eea:	b292      	uxth	r2, r2
 8020eec:	1c50      	adds	r0, r2, #1
 8020eee:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020ef2:	7848      	ldrb	r0, [r1, #1]
 8020ef4:	fb10 f005 	smulbb	r0, r0, r5
 8020ef8:	1212      	asrs	r2, r2, #8
 8020efa:	700a      	strb	r2, [r1, #0]
 8020efc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8020f00:	0c24      	lsrs	r4, r4, #16
 8020f02:	fb02 0203 	mla	r2, r2, r3, r0
 8020f06:	b292      	uxth	r2, r2
 8020f08:	1c50      	adds	r0, r2, #1
 8020f0a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020f0e:	1212      	asrs	r2, r2, #8
 8020f10:	704a      	strb	r2, [r1, #1]
 8020f12:	788a      	ldrb	r2, [r1, #2]
 8020f14:	fb12 f505 	smulbb	r5, r2, r5
 8020f18:	fb04 5303 	mla	r3, r4, r3, r5
 8020f1c:	b29b      	uxth	r3, r3
 8020f1e:	1c5a      	adds	r2, r3, #1
 8020f20:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020f24:	121b      	asrs	r3, r3, #8
 8020f26:	708b      	strb	r3, [r1, #2]
 8020f28:	b003      	add	sp, #12
 8020f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f2e:	bf00      	nop
 8020f30:	0802eac7 	.word	0x0802eac7
 8020f34:	0802f02f 	.word	0x0802f02f
 8020f38:	0802eb90 	.word	0x0802eb90

08020f3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f40:	ed2d 8b08 	vpush	{d8-d11}
 8020f44:	b09f      	sub	sp, #124	; 0x7c
 8020f46:	eeb0 aa40 	vmov.f32	s20, s0
 8020f4a:	eef0 9a60 	vmov.f32	s19, s1
 8020f4e:	921b      	str	r2, [sp, #108]	; 0x6c
 8020f50:	eeb0 9a41 	vmov.f32	s18, s2
 8020f54:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020f56:	eeb0 8a62 	vmov.f32	s16, s5
 8020f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8020f5c:	eef0 8a43 	vmov.f32	s17, s6
 8020f60:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8020f64:	eef0 ba44 	vmov.f32	s23, s8
 8020f68:	901d      	str	r0, [sp, #116]	; 0x74
 8020f6a:	eeb0 ba64 	vmov.f32	s22, s9
 8020f6e:	931c      	str	r3, [sp, #112]	; 0x70
 8020f70:	eef0 aa45 	vmov.f32	s21, s10
 8020f74:	6850      	ldr	r0, [r2, #4]
 8020f76:	9119      	str	r1, [sp, #100]	; 0x64
 8020f78:	6812      	ldr	r2, [r2, #0]
 8020f7a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8020f7c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8020f80:	fb00 1303 	mla	r3, r0, r3, r1
 8020f84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f88:	18d3      	adds	r3, r2, r3
 8020f8a:	930c      	str	r3, [sp, #48]	; 0x30
 8020f8c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020f8e:	681b      	ldr	r3, [r3, #0]
 8020f90:	9312      	str	r3, [sp, #72]	; 0x48
 8020f92:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020f94:	685e      	ldr	r6, [r3, #4]
 8020f96:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8020f9a:	3604      	adds	r6, #4
 8020f9c:	930d      	str	r3, [sp, #52]	; 0x34
 8020f9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020fa0:	2b00      	cmp	r3, #0
 8020fa2:	dc03      	bgt.n	8020fac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020fa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020fa6:	2b00      	cmp	r3, #0
 8020fa8:	f340 8378 	ble.w	802169c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8020fac:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020fae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020fb2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020fb6:	1e48      	subs	r0, r1, #1
 8020fb8:	1e57      	subs	r7, r2, #1
 8020fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020fbc:	2b00      	cmp	r3, #0
 8020fbe:	f340 818c 	ble.w	80212da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8020fc2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8020fc4:	142b      	asrs	r3, r5, #16
 8020fc6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020fca:	d406      	bmi.n	8020fda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020fcc:	4584      	cmp	ip, r0
 8020fce:	da04      	bge.n	8020fda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020fd0:	2b00      	cmp	r3, #0
 8020fd2:	db02      	blt.n	8020fda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020fd4:	42bb      	cmp	r3, r7
 8020fd6:	f2c0 8181 	blt.w	80212dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8020fda:	f11c 0c01 	adds.w	ip, ip, #1
 8020fde:	f100 816f 	bmi.w	80212c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020fe2:	4561      	cmp	r1, ip
 8020fe4:	f2c0 816c 	blt.w	80212c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020fe8:	3301      	adds	r3, #1
 8020fea:	f100 8169 	bmi.w	80212c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020fee:	429a      	cmp	r2, r3
 8020ff0:	f2c0 8166 	blt.w	80212c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ff6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020ff8:	931a      	str	r3, [sp, #104]	; 0x68
 8020ffa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020ffc:	2b00      	cmp	r3, #0
 8020ffe:	f340 818c 	ble.w	802131a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8021002:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021004:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021008:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802100c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021010:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8021012:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8021016:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021018:	141b      	asrs	r3, r3, #16
 802101a:	f100 81d0 	bmi.w	80213be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802101e:	f100 38ff 	add.w	r8, r0, #4294967295
 8021022:	4543      	cmp	r3, r8
 8021024:	f280 81cb 	bge.w	80213be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8021028:	f1bc 0f00 	cmp.w	ip, #0
 802102c:	f2c0 81c7 	blt.w	80213be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8021030:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021034:	45c4      	cmp	ip, r8
 8021036:	f280 81c2 	bge.w	80213be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802103a:	b200      	sxth	r0, r0
 802103c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802103e:	fb0c 3300 	mla	r3, ip, r0, r3
 8021042:	eb04 0803 	add.w	r8, r4, r3
 8021046:	5ce3      	ldrb	r3, [r4, r3]
 8021048:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802104c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021050:	2a00      	cmp	r2, #0
 8021052:	f000 81a9 	beq.w	80213a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8021056:	f898 c001 	ldrb.w	ip, [r8, #1]
 802105a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802105e:	940e      	str	r4, [sp, #56]	; 0x38
 8021060:	0e24      	lsrs	r4, r4, #24
 8021062:	9415      	str	r4, [sp, #84]	; 0x54
 8021064:	b179      	cbz	r1, 8021086 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8021066:	eb08 0c00 	add.w	ip, r8, r0
 802106a:	f818 0000 	ldrb.w	r0, [r8, r0]
 802106e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021072:	900a      	str	r0, [sp, #40]	; 0x28
 8021074:	0e00      	lsrs	r0, r0, #24
 8021076:	9013      	str	r0, [sp, #76]	; 0x4c
 8021078:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802107c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021080:	900f      	str	r0, [sp, #60]	; 0x3c
 8021082:	0e00      	lsrs	r0, r0, #24
 8021084:	9016      	str	r0, [sp, #88]	; 0x58
 8021086:	b292      	uxth	r2, r2
 8021088:	9815      	ldr	r0, [sp, #84]	; 0x54
 802108a:	b289      	uxth	r1, r1
 802108c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802108e:	fb02 f901 	mul.w	r9, r2, r1
 8021092:	0112      	lsls	r2, r2, #4
 8021094:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021098:	eba2 0809 	sub.w	r8, r2, r9
 802109c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80210a0:	b289      	uxth	r1, r1
 80210a2:	fa1f f888 	uxth.w	r8, r8
 80210a6:	1a52      	subs	r2, r2, r1
 80210a8:	fb08 f000 	mul.w	r0, r8, r0
 80210ac:	b292      	uxth	r2, r2
 80210ae:	fb02 000e 	mla	r0, r2, lr, r0
 80210b2:	fb01 0004 	mla	r0, r1, r4, r0
 80210b6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80210b8:	fb09 0004 	mla	r0, r9, r4, r0
 80210bc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80210c0:	2800      	cmp	r0, #0
 80210c2:	f000 80f2 	beq.w	80212aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80210c6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80210ca:	d01b      	beq.n	8021104 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80210cc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80210d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80210d4:	fb0e fa0a 	mul.w	sl, lr, sl
 80210d8:	fb0e fe03 	mul.w	lr, lr, r3
 80210dc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80210e0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80210e4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80210e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80210ec:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80210f0:	4453      	add	r3, sl
 80210f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80210f6:	0a1b      	lsrs	r3, r3, #8
 80210f8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80210fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021100:	ea43 030c 	orr.w	r3, r3, ip
 8021104:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021106:	2cff      	cmp	r4, #255	; 0xff
 8021108:	d021      	beq.n	802114e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802110a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802110c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021110:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021112:	fb04 fb0b 	mul.w	fp, r4, fp
 8021116:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021118:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802111c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802111e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021122:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021126:	fb04 fa0a 	mul.w	sl, r4, sl
 802112a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802112e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021132:	44de      	add	lr, fp
 8021134:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021138:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802113c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021140:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021144:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021148:	ea4e 040a 	orr.w	r4, lr, sl
 802114c:	940e      	str	r4, [sp, #56]	; 0x38
 802114e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021150:	2cff      	cmp	r4, #255	; 0xff
 8021152:	d021      	beq.n	8021198 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8021154:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021156:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802115a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802115c:	fb04 fb0b 	mul.w	fp, r4, fp
 8021160:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021162:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021166:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021168:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802116c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021170:	fb04 fa0a 	mul.w	sl, r4, sl
 8021174:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021178:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802117c:	44de      	add	lr, fp
 802117e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021182:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021186:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802118a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802118e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021192:	ea4e 040a 	orr.w	r4, lr, sl
 8021196:	940a      	str	r4, [sp, #40]	; 0x28
 8021198:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802119a:	2cff      	cmp	r4, #255	; 0xff
 802119c:	d021      	beq.n	80211e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802119e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80211a0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80211a4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80211a6:	fb04 fb0b 	mul.w	fp, r4, fp
 80211aa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80211ac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80211b0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80211b2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80211b6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80211ba:	fb04 fa0a 	mul.w	sl, r4, sl
 80211be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80211c2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80211c6:	44de      	add	lr, fp
 80211c8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80211cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80211d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80211d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80211d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80211dc:	ea4e 040a 	orr.w	r4, lr, sl
 80211e0:	940f      	str	r4, [sp, #60]	; 0x3c
 80211e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80211e4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80211e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80211ec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80211f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80211f2:	fb08 fc0c 	mul.w	ip, r8, ip
 80211f6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80211fa:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80211fe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021200:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021204:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021208:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802120a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802120e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021212:	fb08 f80e 	mul.w	r8, r8, lr
 8021216:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802121a:	fb02 8303 	mla	r3, r2, r3, r8
 802121e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021220:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021224:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021228:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802122a:	fb01 330a 	mla	r3, r1, sl, r3
 802122e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8021232:	fb09 3901 	mla	r9, r9, r1, r3
 8021236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021238:	990d      	ldr	r1, [sp, #52]	; 0x34
 802123a:	4343      	muls	r3, r0
 802123c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021240:	1c58      	adds	r0, r3, #1
 8021242:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021246:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802124a:	ea4c 0c09 	orr.w	ip, ip, r9
 802124e:	783b      	ldrb	r3, [r7, #0]
 8021250:	fa5f f28c 	uxtb.w	r2, ip
 8021254:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021258:	fb12 f201 	smulbb	r2, r2, r1
 802125c:	b2c0      	uxtb	r0, r0
 802125e:	fb03 2300 	mla	r3, r3, r0, r2
 8021262:	b29b      	uxth	r3, r3
 8021264:	1c5a      	adds	r2, r3, #1
 8021266:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802126a:	787a      	ldrb	r2, [r7, #1]
 802126c:	fb12 f200 	smulbb	r2, r2, r0
 8021270:	121b      	asrs	r3, r3, #8
 8021272:	703b      	strb	r3, [r7, #0]
 8021274:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8021278:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802127c:	fb03 2301 	mla	r3, r3, r1, r2
 8021280:	b29b      	uxth	r3, r3
 8021282:	1c5a      	adds	r2, r3, #1
 8021284:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021288:	121b      	asrs	r3, r3, #8
 802128a:	707b      	strb	r3, [r7, #1]
 802128c:	78bb      	ldrb	r3, [r7, #2]
 802128e:	fb13 f000 	smulbb	r0, r3, r0
 8021292:	fb0c 0c01 	mla	ip, ip, r1, r0
 8021296:	fa1f fc8c 	uxth.w	ip, ip
 802129a:	f10c 0301 	add.w	r3, ip, #1
 802129e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80212a2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80212a6:	f887 c002 	strb.w	ip, [r7, #2]
 80212aa:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80212ac:	3703      	adds	r7, #3
 80212ae:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80212b0:	441a      	add	r2, r3
 80212b2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80212b4:	441d      	add	r5, r3
 80212b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80212b8:	9231      	str	r2, [sp, #196]	; 0xc4
 80212ba:	3b01      	subs	r3, #1
 80212bc:	931a      	str	r3, [sp, #104]	; 0x68
 80212be:	e69c      	b.n	8020ffa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80212c0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80212c2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80212c4:	441c      	add	r4, r3
 80212c6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80212c8:	441d      	add	r5, r3
 80212ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212cc:	9431      	str	r4, [sp, #196]	; 0xc4
 80212ce:	3b01      	subs	r3, #1
 80212d0:	9309      	str	r3, [sp, #36]	; 0x24
 80212d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80212d4:	3303      	adds	r3, #3
 80212d6:	930c      	str	r3, [sp, #48]	; 0x30
 80212d8:	e66f      	b.n	8020fba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80212da:	d026      	beq.n	802132a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80212dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212de:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80212e0:	3b01      	subs	r3, #1
 80212e2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80212e4:	fb00 4003 	mla	r0, r0, r3, r4
 80212e8:	1400      	asrs	r0, r0, #16
 80212ea:	f53f ae83 	bmi.w	8020ff4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80212ee:	3901      	subs	r1, #1
 80212f0:	4288      	cmp	r0, r1
 80212f2:	f6bf ae7f 	bge.w	8020ff4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80212f6:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80212f8:	fb01 5303 	mla	r3, r1, r3, r5
 80212fc:	141b      	asrs	r3, r3, #16
 80212fe:	f53f ae79 	bmi.w	8020ff4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8021302:	3a01      	subs	r2, #1
 8021304:	4293      	cmp	r3, r2
 8021306:	f6bf ae75 	bge.w	8020ff4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802130a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802130c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8021310:	f103 0e03 	add.w	lr, r3, #3
 8021314:	f1bb 0f00 	cmp.w	fp, #0
 8021318:	dc71      	bgt.n	80213fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802131a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802131c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021322:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021326:	4423      	add	r3, r4
 8021328:	930c      	str	r3, [sp, #48]	; 0x30
 802132a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802132c:	2b00      	cmp	r3, #0
 802132e:	f340 81b5 	ble.w	802169c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8021332:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021336:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021338:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802133c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021340:	eef0 6a48 	vmov.f32	s13, s16
 8021344:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021348:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802134c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021350:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8021354:	eef0 6a68 	vmov.f32	s13, s17
 8021358:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802135c:	ee16 5a90 	vmov	r5, s13
 8021360:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021364:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021368:	ee37 8a48 	vsub.f32	s16, s14, s16
 802136c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021370:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021374:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021378:	ee18 2a10 	vmov	r2, s16
 802137c:	eeb0 8a47 	vmov.f32	s16, s14
 8021380:	fb92 f3f3 	sdiv	r3, r2, r3
 8021384:	ee18 2a90 	vmov	r2, s17
 8021388:	9333      	str	r3, [sp, #204]	; 0xcc
 802138a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802138c:	eef0 8a67 	vmov.f32	s17, s15
 8021390:	fb92 f3f3 	sdiv	r3, r2, r3
 8021394:	9334      	str	r3, [sp, #208]	; 0xd0
 8021396:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021398:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802139a:	3b01      	subs	r3, #1
 802139c:	9319      	str	r3, [sp, #100]	; 0x64
 802139e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80213a0:	bf08      	it	eq
 80213a2:	4613      	moveq	r3, r2
 80213a4:	9309      	str	r3, [sp, #36]	; 0x24
 80213a6:	e5fa      	b.n	8020f9e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80213a8:	2900      	cmp	r1, #0
 80213aa:	f43f ae6c 	beq.w	8021086 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80213ae:	f818 0000 	ldrb.w	r0, [r8, r0]
 80213b2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80213b6:	900a      	str	r0, [sp, #40]	; 0x28
 80213b8:	0e00      	lsrs	r0, r0, #24
 80213ba:	9013      	str	r0, [sp, #76]	; 0x4c
 80213bc:	e663      	b.n	8021086 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80213be:	f113 0801 	adds.w	r8, r3, #1
 80213c2:	f53f af72 	bmi.w	80212aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80213c6:	4540      	cmp	r0, r8
 80213c8:	f6ff af6f 	blt.w	80212aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80213cc:	f11c 0801 	adds.w	r8, ip, #1
 80213d0:	f53f af6b 	bmi.w	80212aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80213d4:	45c6      	cmp	lr, r8
 80213d6:	f6ff af68 	blt.w	80212aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80213da:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80213dc:	b200      	sxth	r0, r0
 80213de:	9302      	str	r3, [sp, #8]
 80213e0:	fa0f f38e 	sxth.w	r3, lr
 80213e4:	9000      	str	r0, [sp, #0]
 80213e6:	9301      	str	r3, [sp, #4]
 80213e8:	4633      	mov	r3, r6
 80213ea:	981d      	ldr	r0, [sp, #116]	; 0x74
 80213ec:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80213f0:	e9cd c203 	strd	ip, r2, [sp, #12]
 80213f4:	4639      	mov	r1, r7
 80213f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80213f8:	f7ff fc60 	bl	8020cbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80213fc:	e755      	b.n	80212aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80213fe:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021400:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021404:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8021406:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802140a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802140c:	1427      	asrs	r7, r4, #16
 802140e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021410:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021414:	142b      	asrs	r3, r5, #16
 8021416:	fb01 7303 	mla	r3, r1, r3, r7
 802141a:	18e7      	adds	r7, r4, r3
 802141c:	5ce3      	ldrb	r3, [r4, r3]
 802141e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021422:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021426:	2a00      	cmp	r2, #0
 8021428:	f000 812e 	beq.w	8021688 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 802142c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021430:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8021434:	9410      	str	r4, [sp, #64]	; 0x40
 8021436:	0e24      	lsrs	r4, r4, #24
 8021438:	9417      	str	r4, [sp, #92]	; 0x5c
 802143a:	b170      	cbz	r0, 802145a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 802143c:	eb07 0801 	add.w	r8, r7, r1
 8021440:	5c79      	ldrb	r1, [r7, r1]
 8021442:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021446:	910b      	str	r1, [sp, #44]	; 0x2c
 8021448:	0e09      	lsrs	r1, r1, #24
 802144a:	9114      	str	r1, [sp, #80]	; 0x50
 802144c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8021450:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021454:	9111      	str	r1, [sp, #68]	; 0x44
 8021456:	0e09      	lsrs	r1, r1, #24
 8021458:	9118      	str	r1, [sp, #96]	; 0x60
 802145a:	b292      	uxth	r2, r2
 802145c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802145e:	b280      	uxth	r0, r0
 8021460:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021462:	fb02 f900 	mul.w	r9, r2, r0
 8021466:	0112      	lsls	r2, r2, #4
 8021468:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802146c:	eba2 0809 	sub.w	r8, r2, r9
 8021470:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021474:	b280      	uxth	r0, r0
 8021476:	fa1f f888 	uxth.w	r8, r8
 802147a:	1a12      	subs	r2, r2, r0
 802147c:	fb08 f101 	mul.w	r1, r8, r1
 8021480:	b292      	uxth	r2, r2
 8021482:	fb02 110c 	mla	r1, r2, ip, r1
 8021486:	fb00 1104 	mla	r1, r0, r4, r1
 802148a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802148c:	fb09 1104 	mla	r1, r9, r4, r1
 8021490:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021494:	2900      	cmp	r1, #0
 8021496:	f000 80ec 	beq.w	8021672 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 802149a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802149e:	d019      	beq.n	80214d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 80214a0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80214a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80214a8:	fb0c fa0a 	mul.w	sl, ip, sl
 80214ac:	fb0c fc03 	mul.w	ip, ip, r3
 80214b0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80214b4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80214b8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80214bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80214c0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80214c4:	4453      	add	r3, sl
 80214c6:	0a3f      	lsrs	r7, r7, #8
 80214c8:	0a1b      	lsrs	r3, r3, #8
 80214ca:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80214ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80214d2:	433b      	orrs	r3, r7
 80214d4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80214d6:	2cff      	cmp	r4, #255	; 0xff
 80214d8:	d020      	beq.n	802151c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 80214da:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80214dc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80214e0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80214e2:	4367      	muls	r7, r4
 80214e4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80214e6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80214ea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80214ee:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80214f0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80214f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214f8:	fb04 fa0a 	mul.w	sl, r4, sl
 80214fc:	44bc      	add	ip, r7
 80214fe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021502:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021506:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802150a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802150e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021512:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021516:	ea4c 040a 	orr.w	r4, ip, sl
 802151a:	9410      	str	r4, [sp, #64]	; 0x40
 802151c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802151e:	2cff      	cmp	r4, #255	; 0xff
 8021520:	d020      	beq.n	8021564 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 8021522:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021524:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021528:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802152a:	4367      	muls	r7, r4
 802152c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802152e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021532:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021536:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021538:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802153c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021540:	fb04 fa0a 	mul.w	sl, r4, sl
 8021544:	44bc      	add	ip, r7
 8021546:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802154a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802154e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021552:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021556:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802155a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802155e:	ea4c 040a 	orr.w	r4, ip, sl
 8021562:	940b      	str	r4, [sp, #44]	; 0x2c
 8021564:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021566:	2cff      	cmp	r4, #255	; 0xff
 8021568:	d020      	beq.n	80215ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 802156a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802156c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021570:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021572:	4367      	muls	r7, r4
 8021574:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021576:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802157a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802157e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021580:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021584:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021588:	fb04 fa0a 	mul.w	sl, r4, sl
 802158c:	44bc      	add	ip, r7
 802158e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021592:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021596:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802159a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802159e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80215a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80215a6:	ea4c 040a 	orr.w	r4, ip, sl
 80215aa:	9411      	str	r4, [sp, #68]	; 0x44
 80215ac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80215ae:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80215b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80215b6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80215ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80215bc:	fb08 f707 	mul.w	r7, r8, r7
 80215c0:	fb02 770c 	mla	r7, r2, ip, r7
 80215c4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80215c8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80215ca:	fb00 770c 	mla	r7, r0, ip, r7
 80215ce:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80215d2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80215d4:	fb09 770c 	mla	r7, r9, ip, r7
 80215d8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80215dc:	fb08 f80c 	mul.w	r8, r8, ip
 80215e0:	0a3f      	lsrs	r7, r7, #8
 80215e2:	fb02 8303 	mla	r3, r2, r3, r8
 80215e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80215e8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80215ec:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80215f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80215f2:	fb00 330a 	mla	r3, r0, sl, r3
 80215f6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80215fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80215fc:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021600:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021602:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021606:	434b      	muls	r3, r1
 8021608:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802160c:	1c59      	adds	r1, r3, #1
 802160e:	ea47 070c 	orr.w	r7, r7, ip
 8021612:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021616:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802161a:	b2fa      	uxtb	r2, r7
 802161c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021620:	fb12 f200 	smulbb	r2, r2, r0
 8021624:	b2c9      	uxtb	r1, r1
 8021626:	fb03 2301 	mla	r3, r3, r1, r2
 802162a:	b29b      	uxth	r3, r3
 802162c:	1c5a      	adds	r2, r3, #1
 802162e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021632:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021636:	fb12 f201 	smulbb	r2, r2, r1
 802163a:	121b      	asrs	r3, r3, #8
 802163c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021640:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8021644:	0c3f      	lsrs	r7, r7, #16
 8021646:	fb03 2300 	mla	r3, r3, r0, r2
 802164a:	b29b      	uxth	r3, r3
 802164c:	1c5a      	adds	r2, r3, #1
 802164e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021652:	121b      	asrs	r3, r3, #8
 8021654:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021658:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802165c:	fb13 f101 	smulbb	r1, r3, r1
 8021660:	fb07 1700 	mla	r7, r7, r0, r1
 8021664:	b2bf      	uxth	r7, r7
 8021666:	1c7b      	adds	r3, r7, #1
 8021668:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802166c:	123f      	asrs	r7, r7, #8
 802166e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8021672:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021674:	f10e 0e03 	add.w	lr, lr, #3
 8021678:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802167a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802167e:	441a      	add	r2, r3
 8021680:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021682:	9231      	str	r2, [sp, #196]	; 0xc4
 8021684:	441d      	add	r5, r3
 8021686:	e645      	b.n	8021314 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8021688:	2800      	cmp	r0, #0
 802168a:	f43f aee6 	beq.w	802145a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 802168e:	5c79      	ldrb	r1, [r7, r1]
 8021690:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021694:	910b      	str	r1, [sp, #44]	; 0x2c
 8021696:	0e09      	lsrs	r1, r1, #24
 8021698:	9114      	str	r1, [sp, #80]	; 0x50
 802169a:	e6de      	b.n	802145a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 802169c:	b01f      	add	sp, #124	; 0x7c
 802169e:	ecbd 8b08 	vpop	{d8-d11}
 80216a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080216a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80216a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216ac:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 80216b0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80216b4:	2c00      	cmp	r4, #0
 80216b6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80216ba:	fb04 060c 	mla	r6, r4, ip, r0
 80216be:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80216c2:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80216c6:	eb02 0e06 	add.w	lr, r2, r6
 80216ca:	db3d      	blt.n	8021748 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80216cc:	45a0      	cmp	r8, r4
 80216ce:	dd3b      	ble.n	8021748 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80216d0:	2800      	cmp	r0, #0
 80216d2:	db37      	blt.n	8021744 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80216d4:	4584      	cmp	ip, r0
 80216d6:	dd35      	ble.n	8021744 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80216d8:	5d92      	ldrb	r2, [r2, r6]
 80216da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80216de:	1c46      	adds	r6, r0, #1
 80216e0:	d435      	bmi.n	802174e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80216e2:	45b4      	cmp	ip, r6
 80216e4:	dd33      	ble.n	802174e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80216e6:	b3a5      	cbz	r5, 8021752 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 80216e8:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80216ec:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80216f0:	3401      	adds	r4, #1
 80216f2:	d432      	bmi.n	802175a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80216f4:	45a0      	cmp	r8, r4
 80216f6:	dd30      	ble.n	802175a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80216f8:	b397      	cbz	r7, 8021760 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 80216fa:	2800      	cmp	r0, #0
 80216fc:	db2b      	blt.n	8021756 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80216fe:	4584      	cmp	ip, r0
 8021700:	dd29      	ble.n	8021756 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8021702:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8021706:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 802170a:	3001      	adds	r0, #1
 802170c:	d42b      	bmi.n	8021766 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 802170e:	4584      	cmp	ip, r0
 8021710:	dd29      	ble.n	8021766 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 8021712:	b355      	cbz	r5, 802176a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 8021714:	44f4      	add	ip, lr
 8021716:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802171a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802171e:	2d0f      	cmp	r5, #15
 8021720:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021724:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021728:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802172c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8021730:	d801      	bhi.n	8021736 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 8021732:	2f0f      	cmp	r7, #15
 8021734:	d91b      	bls.n	802176e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 8021736:	4b7f      	ldr	r3, [pc, #508]	; (8021934 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8021738:	f240 1157 	movw	r1, #343	; 0x157
 802173c:	4a7e      	ldr	r2, [pc, #504]	; (8021938 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 802173e:	487f      	ldr	r0, [pc, #508]	; (802193c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8021740:	f005 f956 	bl	80269f0 <__assert_func>
 8021744:	2200      	movs	r2, #0
 8021746:	e7ca      	b.n	80216de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8021748:	2600      	movs	r6, #0
 802174a:	4632      	mov	r2, r6
 802174c:	e7d0      	b.n	80216f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 802174e:	2600      	movs	r6, #0
 8021750:	e7ce      	b.n	80216f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8021752:	462e      	mov	r6, r5
 8021754:	e7cc      	b.n	80216f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8021756:	2400      	movs	r4, #0
 8021758:	e7d7      	b.n	802170a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 802175a:	2300      	movs	r3, #0
 802175c:	461c      	mov	r4, r3
 802175e:	e7de      	b.n	802171e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8021760:	463b      	mov	r3, r7
 8021762:	463c      	mov	r4, r7
 8021764:	e7db      	b.n	802171e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8021766:	2300      	movs	r3, #0
 8021768:	e7d9      	b.n	802171e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 802176a:	462b      	mov	r3, r5
 802176c:	e7d7      	b.n	802171e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 802176e:	b2a8      	uxth	r0, r5
 8021770:	b2bf      	uxth	r7, r7
 8021772:	fb07 fe00 	mul.w	lr, r7, r0
 8021776:	0100      	lsls	r0, r0, #4
 8021778:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802177c:	eba0 0c0e 	sub.w	ip, r0, lr
 8021780:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8021784:	b2bf      	uxth	r7, r7
 8021786:	fa1f fc8c 	uxth.w	ip, ip
 802178a:	1bc5      	subs	r5, r0, r7
 802178c:	fb0c f00a 	mul.w	r0, ip, sl
 8021790:	b2ad      	uxth	r5, r5
 8021792:	fb05 000b 	mla	r0, r5, fp, r0
 8021796:	fb07 0009 	mla	r0, r7, r9, r0
 802179a:	fb0e 0008 	mla	r0, lr, r8, r0
 802179e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80217a2:	9001      	str	r0, [sp, #4]
 80217a4:	2800      	cmp	r0, #0
 80217a6:	f000 80c2 	beq.w	802192e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 80217aa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80217ae:	d018      	beq.n	80217e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 80217b0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80217b4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80217b8:	fb0b f000 	mul.w	r0, fp, r0
 80217bc:	fb0b fb02 	mul.w	fp, fp, r2
 80217c0:	0a02      	lsrs	r2, r0, #8
 80217c2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80217c6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80217ca:	4402      	add	r2, r0
 80217cc:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80217d0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80217d4:	0a12      	lsrs	r2, r2, #8
 80217d6:	0a00      	lsrs	r0, r0, #8
 80217d8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80217dc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80217e0:	4302      	orrs	r2, r0
 80217e2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80217e6:	d01a      	beq.n	802181e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 80217e8:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80217ec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80217f0:	fb0a f000 	mul.w	r0, sl, r0
 80217f4:	fb0a fa06 	mul.w	sl, sl, r6
 80217f8:	0a06      	lsrs	r6, r0, #8
 80217fa:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80217fe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021802:	4406      	add	r6, r0
 8021804:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8021808:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802180c:	0a36      	lsrs	r6, r6, #8
 802180e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021812:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021816:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802181a:	ea46 060a 	orr.w	r6, r6, sl
 802181e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021822:	d01b      	beq.n	802185c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 8021824:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021828:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802182c:	fb09 fa0a 	mul.w	sl, r9, sl
 8021830:	fb09 f004 	mul.w	r0, r9, r4
 8021834:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021838:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802183c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8021840:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021844:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021848:	4454      	add	r4, sl
 802184a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802184e:	0a24      	lsrs	r4, r4, #8
 8021850:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021854:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021858:	ea44 0409 	orr.w	r4, r4, r9
 802185c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021860:	d01b      	beq.n	802189a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 8021862:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8021866:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802186a:	fb08 f909 	mul.w	r9, r8, r9
 802186e:	fb08 f003 	mul.w	r0, r8, r3
 8021872:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8021876:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802187a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802187e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021882:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8021886:	444b      	add	r3, r9
 8021888:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802188c:	0a1b      	lsrs	r3, r3, #8
 802188e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021892:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021896:	ea43 0308 	orr.w	r3, r3, r8
 802189a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802189e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80218a2:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80218a6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80218aa:	fb0c f000 	mul.w	r0, ip, r0
 80218ae:	fb0c f606 	mul.w	r6, ip, r6
 80218b2:	fb05 0808 	mla	r8, r5, r8, r0
 80218b6:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80218ba:	fb05 6502 	mla	r5, r5, r2, r6
 80218be:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80218c2:	fb07 8800 	mla	r8, r7, r0, r8
 80218c6:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80218ca:	fb07 5704 	mla	r7, r7, r4, r5
 80218ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80218d2:	fb0e 8000 	mla	r0, lr, r0, r8
 80218d6:	780a      	ldrb	r2, [r1, #0]
 80218d8:	fb0e 7e03 	mla	lr, lr, r3, r7
 80218dc:	9b01      	ldr	r3, [sp, #4]
 80218de:	0a00      	lsrs	r0, r0, #8
 80218e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80218e4:	43db      	mvns	r3, r3
 80218e6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80218ea:	b2db      	uxtb	r3, r3
 80218ec:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80218f0:	ea40 0e0e 	orr.w	lr, r0, lr
 80218f4:	fb02 f003 	mul.w	r0, r2, r3
 80218f8:	1c42      	adds	r2, r0, #1
 80218fa:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80218fe:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021902:	700a      	strb	r2, [r1, #0]
 8021904:	784a      	ldrb	r2, [r1, #1]
 8021906:	435a      	muls	r2, r3
 8021908:	1c50      	adds	r0, r2, #1
 802190a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802190e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8021912:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021916:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802191a:	704a      	strb	r2, [r1, #1]
 802191c:	788a      	ldrb	r2, [r1, #2]
 802191e:	4353      	muls	r3, r2
 8021920:	1c5a      	adds	r2, r3, #1
 8021922:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021926:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 802192a:	f881 e002 	strb.w	lr, [r1, #2]
 802192e:	b003      	add	sp, #12
 8021930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021934:	0802eac7 	.word	0x0802eac7
 8021938:	0802f02f 	.word	0x0802f02f
 802193c:	0802eb90 	.word	0x0802eb90

08021940 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021944:	ed2d 8b0a 	vpush	{d8-d12}
 8021948:	b09b      	sub	sp, #108	; 0x6c
 802194a:	eeb0 aa40 	vmov.f32	s20, s0
 802194e:	eef0 9a60 	vmov.f32	s19, s1
 8021952:	9218      	str	r2, [sp, #96]	; 0x60
 8021954:	eeb0 9a41 	vmov.f32	s18, s2
 8021958:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 802195a:	eeb0 8a62 	vmov.f32	s16, s5
 802195e:	9019      	str	r0, [sp, #100]	; 0x64
 8021960:	eef0 8a43 	vmov.f32	s17, s6
 8021964:	6850      	ldr	r0, [r2, #4]
 8021966:	eeb0 ca44 	vmov.f32	s24, s8
 802196a:	9116      	str	r1, [sp, #88]	; 0x58
 802196c:	eef0 ba64 	vmov.f32	s23, s9
 8021970:	9307      	str	r3, [sp, #28]
 8021972:	eeb0 ba45 	vmov.f32	s22, s10
 8021976:	6812      	ldr	r2, [r2, #0]
 8021978:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802197c:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 802197e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8021982:	fb00 1303 	mla	r3, r0, r3, r1
 8021986:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802198a:	18d3      	adds	r3, r2, r3
 802198c:	930a      	str	r3, [sp, #40]	; 0x28
 802198e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021990:	681b      	ldr	r3, [r3, #0]
 8021992:	930f      	str	r3, [sp, #60]	; 0x3c
 8021994:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021996:	685e      	ldr	r6, [r3, #4]
 8021998:	3604      	adds	r6, #4
 802199a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802199c:	2b00      	cmp	r3, #0
 802199e:	dc03      	bgt.n	80219a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80219a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80219a2:	2b00      	cmp	r3, #0
 80219a4:	f340 834f 	ble.w	8022046 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80219a8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80219aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80219ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80219b2:	1e48      	subs	r0, r1, #1
 80219b4:	1e57      	subs	r7, r2, #1
 80219b6:	9b07      	ldr	r3, [sp, #28]
 80219b8:	2b00      	cmp	r3, #0
 80219ba:	f340 8178 	ble.w	8021cae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80219be:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80219c0:	142b      	asrs	r3, r5, #16
 80219c2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80219c6:	d406      	bmi.n	80219d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80219c8:	4584      	cmp	ip, r0
 80219ca:	da04      	bge.n	80219d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80219cc:	2b00      	cmp	r3, #0
 80219ce:	db02      	blt.n	80219d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80219d0:	42bb      	cmp	r3, r7
 80219d2:	f2c0 816d 	blt.w	8021cb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80219d6:	f11c 0c01 	adds.w	ip, ip, #1
 80219da:	f100 815b 	bmi.w	8021c94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80219de:	4561      	cmp	r1, ip
 80219e0:	f2c0 8158 	blt.w	8021c94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80219e4:	3301      	adds	r3, #1
 80219e6:	f100 8155 	bmi.w	8021c94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80219ea:	429a      	cmp	r2, r3
 80219ec:	f2c0 8152 	blt.w	8021c94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80219f0:	9b07      	ldr	r3, [sp, #28]
 80219f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80219f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80219f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80219f8:	2b00      	cmp	r3, #0
 80219fa:	f340 8178 	ble.w	8021cee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80219fe:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021a00:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021a04:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021a08:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021a0c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021a0e:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8021a12:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021a14:	141b      	asrs	r3, r3, #16
 8021a16:	f100 81ba 	bmi.w	8021d8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8021a1a:	f101 38ff 	add.w	r8, r1, #4294967295
 8021a1e:	4543      	cmp	r3, r8
 8021a20:	f280 81b5 	bge.w	8021d8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8021a24:	f1bc 0f00 	cmp.w	ip, #0
 8021a28:	f2c0 81b1 	blt.w	8021d8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8021a2c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021a30:	45c4      	cmp	ip, r8
 8021a32:	f280 81ac 	bge.w	8021d8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8021a36:	b209      	sxth	r1, r1
 8021a38:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021a3a:	fb0c 3301 	mla	r3, ip, r1, r3
 8021a3e:	eb04 0803 	add.w	r8, r4, r3
 8021a42:	5ce3      	ldrb	r3, [r4, r3]
 8021a44:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021a48:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021a4c:	2a00      	cmp	r2, #0
 8021a4e:	f000 8193 	beq.w	8021d78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8021a52:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021a56:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8021a5a:	940b      	str	r4, [sp, #44]	; 0x2c
 8021a5c:	0e24      	lsrs	r4, r4, #24
 8021a5e:	9412      	str	r4, [sp, #72]	; 0x48
 8021a60:	b178      	cbz	r0, 8021a82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021a62:	eb08 0c01 	add.w	ip, r8, r1
 8021a66:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021a6a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021a6e:	9108      	str	r1, [sp, #32]
 8021a70:	0e09      	lsrs	r1, r1, #24
 8021a72:	9110      	str	r1, [sp, #64]	; 0x40
 8021a74:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8021a78:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021a7c:	910c      	str	r1, [sp, #48]	; 0x30
 8021a7e:	0e09      	lsrs	r1, r1, #24
 8021a80:	9113      	str	r1, [sp, #76]	; 0x4c
 8021a82:	b292      	uxth	r2, r2
 8021a84:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021a86:	b280      	uxth	r0, r0
 8021a88:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021a8a:	fb02 f900 	mul.w	r9, r2, r0
 8021a8e:	0112      	lsls	r2, r2, #4
 8021a90:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021a94:	eba2 0809 	sub.w	r8, r2, r9
 8021a98:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021a9c:	b280      	uxth	r0, r0
 8021a9e:	fa1f f888 	uxth.w	r8, r8
 8021aa2:	1a12      	subs	r2, r2, r0
 8021aa4:	fb08 f101 	mul.w	r1, r8, r1
 8021aa8:	b292      	uxth	r2, r2
 8021aaa:	fb02 110e 	mla	r1, r2, lr, r1
 8021aae:	fb00 1104 	mla	r1, r0, r4, r1
 8021ab2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021ab4:	fb09 1104 	mla	r1, r9, r4, r1
 8021ab8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021abc:	2900      	cmp	r1, #0
 8021abe:	f000 80de 	beq.w	8021c7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021ac2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021ac6:	d01b      	beq.n	8021b00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8021ac8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021acc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021ad0:	fb0e fa0a 	mul.w	sl, lr, sl
 8021ad4:	fb0e fe03 	mul.w	lr, lr, r3
 8021ad8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021adc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021ae0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021ae4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021ae8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021aec:	4453      	add	r3, sl
 8021aee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021af2:	0a1b      	lsrs	r3, r3, #8
 8021af4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021af8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021afc:	ea43 030c 	orr.w	r3, r3, ip
 8021b00:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021b02:	2cff      	cmp	r4, #255	; 0xff
 8021b04:	d021      	beq.n	8021b4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8021b06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021b08:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021b0c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021b0e:	fb04 fb0b 	mul.w	fp, r4, fp
 8021b12:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021b14:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021b18:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021b1a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021b1e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021b22:	fb04 fa0a 	mul.w	sl, r4, sl
 8021b26:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b2a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021b2e:	44de      	add	lr, fp
 8021b30:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021b34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021b3c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021b44:	ea4e 040a 	orr.w	r4, lr, sl
 8021b48:	940b      	str	r4, [sp, #44]	; 0x2c
 8021b4a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021b4c:	2cff      	cmp	r4, #255	; 0xff
 8021b4e:	d021      	beq.n	8021b94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8021b50:	9c08      	ldr	r4, [sp, #32]
 8021b52:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021b56:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021b58:	fb04 fb0b 	mul.w	fp, r4, fp
 8021b5c:	9c08      	ldr	r4, [sp, #32]
 8021b5e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021b62:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021b64:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021b68:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021b6c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021b70:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b74:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021b78:	44de      	add	lr, fp
 8021b7a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021b7e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b82:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021b86:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b8a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021b8e:	ea4e 040a 	orr.w	r4, lr, sl
 8021b92:	9408      	str	r4, [sp, #32]
 8021b94:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021b96:	2cff      	cmp	r4, #255	; 0xff
 8021b98:	d021      	beq.n	8021bde <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8021b9a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021b9c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021ba0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021ba2:	fb04 fb0b 	mul.w	fp, r4, fp
 8021ba6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021ba8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021bac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021bae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021bb2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021bb6:	fb04 fa0a 	mul.w	sl, r4, sl
 8021bba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021bbe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021bc2:	44de      	add	lr, fp
 8021bc4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021bc8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021bcc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021bd0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021bd4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021bd8:	ea4e 040a 	orr.w	r4, lr, sl
 8021bdc:	940c      	str	r4, [sp, #48]	; 0x30
 8021bde:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021be0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021be4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021be8:	43c9      	mvns	r1, r1
 8021bea:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021bee:	9c08      	ldr	r4, [sp, #32]
 8021bf0:	b2c9      	uxtb	r1, r1
 8021bf2:	fb08 fc0c 	mul.w	ip, r8, ip
 8021bf6:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021bfa:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021bfe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021c00:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021c04:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021c08:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021c0a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021c0e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021c12:	fb08 f80e 	mul.w	r8, r8, lr
 8021c16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021c1a:	fb02 8303 	mla	r3, r2, r3, r8
 8021c1e:	9a08      	ldr	r2, [sp, #32]
 8021c20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021c24:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021c28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021c2a:	fb00 330a 	mla	r3, r0, sl, r3
 8021c2e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8021c32:	fb09 3900 	mla	r9, r9, r0, r3
 8021c36:	783b      	ldrb	r3, [r7, #0]
 8021c38:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021c3c:	fb03 f201 	mul.w	r2, r3, r1
 8021c40:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021c44:	1c53      	adds	r3, r2, #1
 8021c46:	ea4c 0c09 	orr.w	ip, ip, r9
 8021c4a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021c4e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8021c52:	703b      	strb	r3, [r7, #0]
 8021c54:	787b      	ldrb	r3, [r7, #1]
 8021c56:	434b      	muls	r3, r1
 8021c58:	1c5a      	adds	r2, r3, #1
 8021c5a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021c5e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021c62:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021c66:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021c6a:	707b      	strb	r3, [r7, #1]
 8021c6c:	78bb      	ldrb	r3, [r7, #2]
 8021c6e:	4359      	muls	r1, r3
 8021c70:	1c4b      	adds	r3, r1, #1
 8021c72:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021c76:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8021c7a:	f887 c002 	strb.w	ip, [r7, #2]
 8021c7e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021c80:	3703      	adds	r7, #3
 8021c82:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021c84:	441a      	add	r2, r3
 8021c86:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021c88:	441d      	add	r5, r3
 8021c8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021c8c:	922f      	str	r2, [sp, #188]	; 0xbc
 8021c8e:	3b01      	subs	r3, #1
 8021c90:	9317      	str	r3, [sp, #92]	; 0x5c
 8021c92:	e6b0      	b.n	80219f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021c94:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021c96:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021c98:	441c      	add	r4, r3
 8021c9a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021c9c:	441d      	add	r5, r3
 8021c9e:	9b07      	ldr	r3, [sp, #28]
 8021ca0:	942f      	str	r4, [sp, #188]	; 0xbc
 8021ca2:	3b01      	subs	r3, #1
 8021ca4:	9307      	str	r3, [sp, #28]
 8021ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ca8:	3303      	adds	r3, #3
 8021caa:	930a      	str	r3, [sp, #40]	; 0x28
 8021cac:	e683      	b.n	80219b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021cae:	d026      	beq.n	8021cfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8021cb0:	9b07      	ldr	r3, [sp, #28]
 8021cb2:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8021cb4:	3b01      	subs	r3, #1
 8021cb6:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021cb8:	fb00 4003 	mla	r0, r0, r3, r4
 8021cbc:	1400      	asrs	r0, r0, #16
 8021cbe:	f53f ae97 	bmi.w	80219f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021cc2:	3901      	subs	r1, #1
 8021cc4:	4288      	cmp	r0, r1
 8021cc6:	f6bf ae93 	bge.w	80219f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021cca:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8021ccc:	fb01 5303 	mla	r3, r1, r3, r5
 8021cd0:	141b      	asrs	r3, r3, #16
 8021cd2:	f53f ae8d 	bmi.w	80219f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021cd6:	3a01      	subs	r2, #1
 8021cd8:	4293      	cmp	r3, r2
 8021cda:	f6bf ae89 	bge.w	80219f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ce0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021ce4:	f103 0e03 	add.w	lr, r3, #3
 8021ce8:	f1bb 0f00 	cmp.w	fp, #0
 8021cec:	dc6d      	bgt.n	8021dca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8021cee:	9b07      	ldr	r3, [sp, #28]
 8021cf0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021cf6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021cfa:	4423      	add	r3, r4
 8021cfc:	930a      	str	r3, [sp, #40]	; 0x28
 8021cfe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021d00:	2b00      	cmp	r3, #0
 8021d02:	f340 81a0 	ble.w	8022046 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8021d06:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8021d0a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021d0c:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021d10:	eef0 6a48 	vmov.f32	s13, s16
 8021d14:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8021d18:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021d1c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021d20:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 8021d24:	eef0 6a68 	vmov.f32	s13, s17
 8021d28:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021d2c:	ee16 5a90 	vmov	r5, s13
 8021d30:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021d34:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021d38:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021d3c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021d40:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021d44:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021d48:	ee18 2a10 	vmov	r2, s16
 8021d4c:	eeb0 8a47 	vmov.f32	s16, s14
 8021d50:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d54:	ee18 2a90 	vmov	r2, s17
 8021d58:	9331      	str	r3, [sp, #196]	; 0xc4
 8021d5a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021d5c:	eef0 8a67 	vmov.f32	s17, s15
 8021d60:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d64:	9332      	str	r3, [sp, #200]	; 0xc8
 8021d66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021d68:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021d6a:	3b01      	subs	r3, #1
 8021d6c:	9316      	str	r3, [sp, #88]	; 0x58
 8021d6e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021d70:	bf08      	it	eq
 8021d72:	4613      	moveq	r3, r2
 8021d74:	9307      	str	r3, [sp, #28]
 8021d76:	e610      	b.n	802199a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021d78:	2800      	cmp	r0, #0
 8021d7a:	f43f ae82 	beq.w	8021a82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021d7e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021d82:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021d86:	9108      	str	r1, [sp, #32]
 8021d88:	0e09      	lsrs	r1, r1, #24
 8021d8a:	9110      	str	r1, [sp, #64]	; 0x40
 8021d8c:	e679      	b.n	8021a82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021d8e:	f113 0801 	adds.w	r8, r3, #1
 8021d92:	f53f af74 	bmi.w	8021c7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021d96:	4541      	cmp	r1, r8
 8021d98:	f6ff af71 	blt.w	8021c7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021d9c:	f11c 0801 	adds.w	r8, ip, #1
 8021da0:	f53f af6d 	bmi.w	8021c7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021da4:	45c6      	cmp	lr, r8
 8021da6:	f6ff af6a 	blt.w	8021c7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021daa:	b209      	sxth	r1, r1
 8021dac:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8021db0:	fa0f f38e 	sxth.w	r3, lr
 8021db4:	9100      	str	r1, [sp, #0]
 8021db6:	4639      	mov	r1, r7
 8021db8:	9301      	str	r3, [sp, #4]
 8021dba:	4633      	mov	r3, r6
 8021dbc:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8021dc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021dc2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021dc4:	f7ff fc70 	bl	80216a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8021dc8:	e759      	b.n	8021c7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021dca:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021dcc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021dd0:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021dd2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021dd6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021dd8:	1427      	asrs	r7, r4, #16
 8021dda:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021ddc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021de0:	142b      	asrs	r3, r5, #16
 8021de2:	fb01 7303 	mla	r3, r1, r3, r7
 8021de6:	18e7      	adds	r7, r4, r3
 8021de8:	5ce3      	ldrb	r3, [r4, r3]
 8021dea:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021dee:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021df2:	2a00      	cmp	r2, #0
 8021df4:	f000 811d 	beq.w	8022032 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8021df8:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021dfc:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8021e00:	940d      	str	r4, [sp, #52]	; 0x34
 8021e02:	0e24      	lsrs	r4, r4, #24
 8021e04:	9414      	str	r4, [sp, #80]	; 0x50
 8021e06:	b170      	cbz	r0, 8021e26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8021e08:	eb07 0801 	add.w	r8, r7, r1
 8021e0c:	5c79      	ldrb	r1, [r7, r1]
 8021e0e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021e12:	9109      	str	r1, [sp, #36]	; 0x24
 8021e14:	0e09      	lsrs	r1, r1, #24
 8021e16:	9111      	str	r1, [sp, #68]	; 0x44
 8021e18:	f898 1001 	ldrb.w	r1, [r8, #1]
 8021e1c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021e20:	910e      	str	r1, [sp, #56]	; 0x38
 8021e22:	0e09      	lsrs	r1, r1, #24
 8021e24:	9115      	str	r1, [sp, #84]	; 0x54
 8021e26:	b292      	uxth	r2, r2
 8021e28:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021e2a:	b280      	uxth	r0, r0
 8021e2c:	fb02 f900 	mul.w	r9, r2, r0
 8021e30:	0112      	lsls	r2, r2, #4
 8021e32:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021e36:	eba2 0809 	sub.w	r8, r2, r9
 8021e3a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021e3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021e40:	b280      	uxth	r0, r0
 8021e42:	fa1f f888 	uxth.w	r8, r8
 8021e46:	1a09      	subs	r1, r1, r0
 8021e48:	fb08 f202 	mul.w	r2, r8, r2
 8021e4c:	b289      	uxth	r1, r1
 8021e4e:	fb01 220c 	mla	r2, r1, ip, r2
 8021e52:	fb00 2204 	mla	r2, r0, r4, r2
 8021e56:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021e58:	fb09 2204 	mla	r2, r9, r4, r2
 8021e5c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021e60:	2a00      	cmp	r2, #0
 8021e62:	f000 80db 	beq.w	802201c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8021e66:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021e6a:	d019      	beq.n	8021ea0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 8021e6c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021e70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e74:	fb0c fa0a 	mul.w	sl, ip, sl
 8021e78:	fb0c fc03 	mul.w	ip, ip, r3
 8021e7c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021e80:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021e84:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021e88:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e8c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021e90:	4453      	add	r3, sl
 8021e92:	0a3f      	lsrs	r7, r7, #8
 8021e94:	0a1b      	lsrs	r3, r3, #8
 8021e96:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021e9a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e9e:	433b      	orrs	r3, r7
 8021ea0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021ea2:	2cff      	cmp	r4, #255	; 0xff
 8021ea4:	d020      	beq.n	8021ee8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8021ea6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021ea8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021eac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021eae:	4367      	muls	r7, r4
 8021eb0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021eb2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021eb6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021eba:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021ebc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021ec0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ec4:	fb04 fa0a 	mul.w	sl, r4, sl
 8021ec8:	44bc      	add	ip, r7
 8021eca:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021ece:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ed2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021ed6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021eda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021ede:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021ee2:	ea4c 040a 	orr.w	r4, ip, sl
 8021ee6:	940d      	str	r4, [sp, #52]	; 0x34
 8021ee8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021eea:	2cff      	cmp	r4, #255	; 0xff
 8021eec:	d020      	beq.n	8021f30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 8021eee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021ef0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021ef4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021ef6:	4367      	muls	r7, r4
 8021ef8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021efa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021efe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021f02:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021f04:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021f08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f0c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021f10:	44bc      	add	ip, r7
 8021f12:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021f16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f1a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021f1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f22:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f26:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f2a:	ea4c 040a 	orr.w	r4, ip, sl
 8021f2e:	9409      	str	r4, [sp, #36]	; 0x24
 8021f30:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021f32:	2cff      	cmp	r4, #255	; 0xff
 8021f34:	d020      	beq.n	8021f78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 8021f36:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021f38:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021f3c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021f3e:	4367      	muls	r7, r4
 8021f40:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021f42:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021f46:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021f4a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021f4c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021f50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f54:	fb04 fa0a 	mul.w	sl, r4, sl
 8021f58:	44bc      	add	ip, r7
 8021f5a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021f5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f62:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021f66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f6a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f6e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f72:	ea4c 040a 	orr.w	r4, ip, sl
 8021f76:	940e      	str	r4, [sp, #56]	; 0x38
 8021f78:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021f7a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021f7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f82:	43d2      	mvns	r2, r2
 8021f84:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021f88:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021f8a:	b2d2      	uxtb	r2, r2
 8021f8c:	fb08 f707 	mul.w	r7, r8, r7
 8021f90:	fb01 770c 	mla	r7, r1, ip, r7
 8021f94:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021f98:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021f9a:	fb00 770c 	mla	r7, r0, ip, r7
 8021f9e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021fa2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021fa4:	fb09 770c 	mla	r7, r9, ip, r7
 8021fa8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021fac:	fb08 f80c 	mul.w	r8, r8, ip
 8021fb0:	0a3f      	lsrs	r7, r7, #8
 8021fb2:	fb01 8303 	mla	r3, r1, r3, r8
 8021fb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021fb8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021fbc:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021fc0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021fc2:	fb00 330a 	mla	r3, r0, sl, r3
 8021fc6:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021fca:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021fce:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021fd2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021fd6:	fb03 f102 	mul.w	r1, r3, r2
 8021fda:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021fde:	1c4b      	adds	r3, r1, #1
 8021fe0:	ea47 070c 	orr.w	r7, r7, ip
 8021fe4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021fe8:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8021fec:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021ff0:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8021ff4:	4353      	muls	r3, r2
 8021ff6:	1c59      	adds	r1, r3, #1
 8021ff8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021ffc:	0a3b      	lsrs	r3, r7, #8
 8021ffe:	0c3f      	lsrs	r7, r7, #16
 8022000:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022004:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8022008:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802200c:	435a      	muls	r2, r3
 802200e:	1c53      	adds	r3, r2, #1
 8022010:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022014:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022018:	f80e 7c01 	strb.w	r7, [lr, #-1]
 802201c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802201e:	f10e 0e03 	add.w	lr, lr, #3
 8022022:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022024:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022028:	441a      	add	r2, r3
 802202a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802202c:	922f      	str	r2, [sp, #188]	; 0xbc
 802202e:	441d      	add	r5, r3
 8022030:	e65a      	b.n	8021ce8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8022032:	2800      	cmp	r0, #0
 8022034:	f43f aef7 	beq.w	8021e26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8022038:	5c79      	ldrb	r1, [r7, r1]
 802203a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802203e:	9109      	str	r1, [sp, #36]	; 0x24
 8022040:	0e09      	lsrs	r1, r1, #24
 8022042:	9111      	str	r1, [sp, #68]	; 0x44
 8022044:	e6ef      	b.n	8021e26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8022046:	b01b      	add	sp, #108	; 0x6c
 8022048:	ecbd 8b0a 	vpop	{d8-d12}
 802204c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022050 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8022050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022054:	b08d      	sub	sp, #52	; 0x34
 8022056:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 802205a:	9103      	str	r1, [sp, #12]
 802205c:	fb07 5803 	mla	r8, r7, r3, r5
 8022060:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8022064:	9803      	ldr	r0, [sp, #12]
 8022066:	2f00      	cmp	r7, #0
 8022068:	910b      	str	r1, [sp, #44]	; 0x2c
 802206a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802206e:	9903      	ldr	r1, [sp, #12]
 8022070:	9c03      	ldr	r4, [sp, #12]
 8022072:	eb02 0608 	add.w	r6, r2, r8
 8022076:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802207a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 802207e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8022082:	7809      	ldrb	r1, [r1, #0]
 8022084:	7840      	ldrb	r0, [r0, #1]
 8022086:	78a4      	ldrb	r4, [r4, #2]
 8022088:	db51      	blt.n	802212e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802208a:	45be      	cmp	lr, r7
 802208c:	dd4f      	ble.n	802212e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802208e:	2d00      	cmp	r5, #0
 8022090:	db49      	blt.n	8022126 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8022092:	42ab      	cmp	r3, r5
 8022094:	dd47      	ble.n	8022126 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8022096:	f812 2008 	ldrb.w	r2, [r2, r8]
 802209a:	9204      	str	r2, [sp, #16]
 802209c:	7872      	ldrb	r2, [r6, #1]
 802209e:	9205      	str	r2, [sp, #20]
 80220a0:	78b2      	ldrb	r2, [r6, #2]
 80220a2:	9206      	str	r2, [sp, #24]
 80220a4:	1c6a      	adds	r2, r5, #1
 80220a6:	d449      	bmi.n	802213c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80220a8:	4293      	cmp	r3, r2
 80220aa:	dd47      	ble.n	802213c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80220ac:	f1bc 0f00 	cmp.w	ip, #0
 80220b0:	d044      	beq.n	802213c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80220b2:	7972      	ldrb	r2, [r6, #5]
 80220b4:	f896 b003 	ldrb.w	fp, [r6, #3]
 80220b8:	f896 a004 	ldrb.w	sl, [r6, #4]
 80220bc:	9201      	str	r2, [sp, #4]
 80220be:	3701      	adds	r7, #1
 80220c0:	d444      	bmi.n	802214c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80220c2:	45be      	cmp	lr, r7
 80220c4:	dd42      	ble.n	802214c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80220c6:	f1b9 0f00 	cmp.w	r9, #0
 80220ca:	f000 80c1 	beq.w	8022250 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 80220ce:	2d00      	cmp	r5, #0
 80220d0:	db38      	blt.n	8022144 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80220d2:	42ab      	cmp	r3, r5
 80220d4:	dd36      	ble.n	8022144 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80220d6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80220da:	f816 8002 	ldrb.w	r8, [r6, r2]
 80220de:	2203      	movs	r2, #3
 80220e0:	fb03 6702 	mla	r7, r3, r2, r6
 80220e4:	fb03 6202 	mla	r2, r3, r2, r6
 80220e8:	787f      	ldrb	r7, [r7, #1]
 80220ea:	f892 e002 	ldrb.w	lr, [r2, #2]
 80220ee:	9702      	str	r7, [sp, #8]
 80220f0:	3501      	adds	r5, #1
 80220f2:	d432      	bmi.n	802215a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80220f4:	42ab      	cmp	r3, r5
 80220f6:	dd30      	ble.n	802215a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80220f8:	f1bc 0f00 	cmp.w	ip, #0
 80220fc:	d031      	beq.n	8022162 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 80220fe:	2703      	movs	r7, #3
 8022100:	fb13 7207 	smlabb	r2, r3, r7, r7
 8022104:	5cb5      	ldrb	r5, [r6, r2]
 8022106:	fb03 6207 	mla	r2, r3, r7, r6
 802210a:	fb03 6307 	mla	r3, r3, r7, r6
 802210e:	7912      	ldrb	r2, [r2, #4]
 8022110:	795e      	ldrb	r6, [r3, #5]
 8022112:	f1bc 0f0f 	cmp.w	ip, #15
 8022116:	d927      	bls.n	8022168 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8022118:	4b53      	ldr	r3, [pc, #332]	; (8022268 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 802211a:	f240 1157 	movw	r1, #343	; 0x157
 802211e:	4a53      	ldr	r2, [pc, #332]	; (802226c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8022120:	4853      	ldr	r0, [pc, #332]	; (8022270 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8022122:	f004 fc65 	bl	80269f0 <__assert_func>
 8022126:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802212a:	9104      	str	r1, [sp, #16]
 802212c:	e7ba      	b.n	80220a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 802212e:	9401      	str	r4, [sp, #4]
 8022130:	4682      	mov	sl, r0
 8022132:	468b      	mov	fp, r1
 8022134:	9104      	str	r1, [sp, #16]
 8022136:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802213a:	e7c0      	b.n	80220be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802213c:	9401      	str	r4, [sp, #4]
 802213e:	4682      	mov	sl, r0
 8022140:	468b      	mov	fp, r1
 8022142:	e7bc      	b.n	80220be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8022144:	46a6      	mov	lr, r4
 8022146:	9002      	str	r0, [sp, #8]
 8022148:	4688      	mov	r8, r1
 802214a:	e7d1      	b.n	80220f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 802214c:	4626      	mov	r6, r4
 802214e:	4602      	mov	r2, r0
 8022150:	460d      	mov	r5, r1
 8022152:	46a6      	mov	lr, r4
 8022154:	9002      	str	r0, [sp, #8]
 8022156:	4688      	mov	r8, r1
 8022158:	e7db      	b.n	8022112 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802215a:	4626      	mov	r6, r4
 802215c:	4602      	mov	r2, r0
 802215e:	460d      	mov	r5, r1
 8022160:	e7d7      	b.n	8022112 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8022162:	4626      	mov	r6, r4
 8022164:	4602      	mov	r2, r0
 8022166:	460d      	mov	r5, r1
 8022168:	f1b9 0f0f 	cmp.w	r9, #15
 802216c:	d8d4      	bhi.n	8022118 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 802216e:	fa1f f38c 	uxth.w	r3, ip
 8022172:	fa1f fc89 	uxth.w	ip, r9
 8022176:	fb03 f70c 	mul.w	r7, r3, ip
 802217a:	011b      	lsls	r3, r3, #4
 802217c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8022180:	9707      	str	r7, [sp, #28]
 8022182:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8022186:	fa1f fc8c 	uxth.w	ip, ip
 802218a:	eba7 070c 	sub.w	r7, r7, ip
 802218e:	b2bf      	uxth	r7, r7
 8022190:	9709      	str	r7, [sp, #36]	; 0x24
 8022192:	9f07      	ldr	r7, [sp, #28]
 8022194:	1bdb      	subs	r3, r3, r7
 8022196:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 802219a:	b29b      	uxth	r3, r3
 802219c:	9708      	str	r7, [sp, #32]
 802219e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80221a0:	930a      	str	r3, [sp, #40]	; 0x28
 80221a2:	ea6f 0907 	mvn.w	r9, r7
 80221a6:	fb03 fb0b 	mul.w	fp, r3, fp
 80221aa:	9f04      	ldr	r7, [sp, #16]
 80221ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221ae:	fa5f f989 	uxtb.w	r9, r9
 80221b2:	fb03 bb07 	mla	fp, r3, r7, fp
 80221b6:	9f07      	ldr	r7, [sp, #28]
 80221b8:	fb11 f109 	smulbb	r1, r1, r9
 80221bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80221be:	fb0c b808 	mla	r8, ip, r8, fp
 80221c2:	fb10 f009 	smulbb	r0, r0, r9
 80221c6:	fb14 f409 	smulbb	r4, r4, r9
 80221ca:	fb07 8805 	mla	r8, r7, r5, r8
 80221ce:	9d08      	ldr	r5, [sp, #32]
 80221d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80221d2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80221d6:	fb08 1805 	mla	r8, r8, r5, r1
 80221da:	9d05      	ldr	r5, [sp, #20]
 80221dc:	fa1f f888 	uxth.w	r8, r8
 80221e0:	f108 0101 	add.w	r1, r8, #1
 80221e4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80221e8:	9903      	ldr	r1, [sp, #12]
 80221ea:	ea4f 2828 	mov.w	r8, r8, asr #8
 80221ee:	f881 8000 	strb.w	r8, [r1]
 80221f2:	fb03 f10a 	mul.w	r1, r3, sl
 80221f6:	fb07 1105 	mla	r1, r7, r5, r1
 80221fa:	9d02      	ldr	r5, [sp, #8]
 80221fc:	fb0c 1105 	mla	r1, ip, r5, r1
 8022200:	9d07      	ldr	r5, [sp, #28]
 8022202:	fb05 1102 	mla	r1, r5, r2, r1
 8022206:	9a08      	ldr	r2, [sp, #32]
 8022208:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802220c:	fb01 0102 	mla	r1, r1, r2, r0
 8022210:	9a03      	ldr	r2, [sp, #12]
 8022212:	b289      	uxth	r1, r1
 8022214:	1c48      	adds	r0, r1, #1
 8022216:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802221a:	1209      	asrs	r1, r1, #8
 802221c:	7051      	strb	r1, [r2, #1]
 802221e:	9a01      	ldr	r2, [sp, #4]
 8022220:	4353      	muls	r3, r2
 8022222:	9a06      	ldr	r2, [sp, #24]
 8022224:	fb07 3702 	mla	r7, r7, r2, r3
 8022228:	9b08      	ldr	r3, [sp, #32]
 802222a:	fb0c 7c0e 	mla	ip, ip, lr, r7
 802222e:	fb05 c606 	mla	r6, r5, r6, ip
 8022232:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022236:	fb06 4603 	mla	r6, r6, r3, r4
 802223a:	9b03      	ldr	r3, [sp, #12]
 802223c:	b2b6      	uxth	r6, r6
 802223e:	f106 0e01 	add.w	lr, r6, #1
 8022242:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8022246:	1236      	asrs	r6, r6, #8
 8022248:	709e      	strb	r6, [r3, #2]
 802224a:	b00d      	add	sp, #52	; 0x34
 802224c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022250:	f1bc 0f0f 	cmp.w	ip, #15
 8022254:	f63f af60 	bhi.w	8022118 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8022258:	4626      	mov	r6, r4
 802225a:	4602      	mov	r2, r0
 802225c:	460d      	mov	r5, r1
 802225e:	46a6      	mov	lr, r4
 8022260:	9002      	str	r0, [sp, #8]
 8022262:	4688      	mov	r8, r1
 8022264:	e783      	b.n	802216e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8022266:	bf00      	nop
 8022268:	0802eac7 	.word	0x0802eac7
 802226c:	0802f02f 	.word	0x0802f02f
 8022270:	0802eb90 	.word	0x0802eb90

08022274 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022278:	ed2d 8b08 	vpush	{d8-d11}
 802227c:	b09f      	sub	sp, #124	; 0x7c
 802227e:	eeb0 aa40 	vmov.f32	s20, s0
 8022282:	eef0 9a60 	vmov.f32	s19, s1
 8022286:	920e      	str	r2, [sp, #56]	; 0x38
 8022288:	eeb0 9a41 	vmov.f32	s18, s2
 802228c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802228e:	eeb0 8a62 	vmov.f32	s16, s5
 8022292:	9307      	str	r3, [sp, #28]
 8022294:	eef0 8a43 	vmov.f32	s17, s6
 8022298:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 802229c:	eef0 ba44 	vmov.f32	s23, s8
 80222a0:	901d      	str	r0, [sp, #116]	; 0x74
 80222a2:	eeb0 ba64 	vmov.f32	s22, s9
 80222a6:	930c      	str	r3, [sp, #48]	; 0x30
 80222a8:	eef0 aa45 	vmov.f32	s21, s10
 80222ac:	6850      	ldr	r0, [r2, #4]
 80222ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80222b0:	6812      	ldr	r2, [r2, #0]
 80222b2:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80222b6:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 80222ba:	fb00 1303 	mla	r3, r0, r3, r1
 80222be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80222c2:	18d3      	adds	r3, r2, r3
 80222c4:	9308      	str	r3, [sp, #32]
 80222c6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80222c8:	681b      	ldr	r3, [r3, #0]
 80222ca:	930a      	str	r3, [sp, #40]	; 0x28
 80222cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80222ce:	43db      	mvns	r3, r3
 80222d0:	b2db      	uxtb	r3, r3
 80222d2:	9309      	str	r3, [sp, #36]	; 0x24
 80222d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80222d6:	2b00      	cmp	r3, #0
 80222d8:	dc03      	bgt.n	80222e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80222da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80222dc:	2b00      	cmp	r3, #0
 80222de:	f340 81f5 	ble.w	80226cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 80222e2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80222e4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80222e8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80222ec:	1e48      	subs	r0, r1, #1
 80222ee:	1e54      	subs	r4, r2, #1
 80222f0:	9b07      	ldr	r3, [sp, #28]
 80222f2:	2b00      	cmp	r3, #0
 80222f4:	f340 80d5 	ble.w	80224a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80222f8:	ea5f 452a 	movs.w	r5, sl, asr #16
 80222fc:	ea4f 4328 	mov.w	r3, r8, asr #16
 8022300:	d406      	bmi.n	8022310 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022302:	4285      	cmp	r5, r0
 8022304:	da04      	bge.n	8022310 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022306:	2b00      	cmp	r3, #0
 8022308:	db02      	blt.n	8022310 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802230a:	42a3      	cmp	r3, r4
 802230c:	f2c0 80ca 	blt.w	80224a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8022310:	3501      	adds	r5, #1
 8022312:	f100 80bb 	bmi.w	802248c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8022316:	42a9      	cmp	r1, r5
 8022318:	f2c0 80b8 	blt.w	802248c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802231c:	3301      	adds	r3, #1
 802231e:	f100 80b5 	bmi.w	802248c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8022322:	429a      	cmp	r2, r3
 8022324:	f2c0 80b2 	blt.w	802248c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8022328:	9b07      	ldr	r3, [sp, #28]
 802232a:	9d08      	ldr	r5, [sp, #32]
 802232c:	930d      	str	r3, [sp, #52]	; 0x34
 802232e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022330:	2b00      	cmp	r3, #0
 8022332:	f340 80d6 	ble.w	80224e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8022336:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8022338:	ea4f 4428 	mov.w	r4, r8, asr #16
 802233c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802233e:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8022342:	68c6      	ldr	r6, [r0, #12]
 8022344:	ea5f 402a 	movs.w	r0, sl, asr #16
 8022348:	f3c8 3103 	ubfx	r1, r8, #12, #4
 802234c:	689b      	ldr	r3, [r3, #8]
 802234e:	f100 810f 	bmi.w	8022570 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8022352:	1e5f      	subs	r7, r3, #1
 8022354:	42b8      	cmp	r0, r7
 8022356:	f280 810b 	bge.w	8022570 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802235a:	2c00      	cmp	r4, #0
 802235c:	f2c0 8108 	blt.w	8022570 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8022360:	1e77      	subs	r7, r6, #1
 8022362:	42bc      	cmp	r4, r7
 8022364:	f280 8104 	bge.w	8022570 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8022368:	b21b      	sxth	r3, r3
 802236a:	fb04 0003 	mla	r0, r4, r3, r0
 802236e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022370:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022374:	1826      	adds	r6, r4, r0
 8022376:	5c24      	ldrb	r4, [r4, r0]
 8022378:	78b7      	ldrb	r7, [r6, #2]
 802237a:	7870      	ldrb	r0, [r6, #1]
 802237c:	970f      	str	r7, [sp, #60]	; 0x3c
 802237e:	7977      	ldrb	r7, [r6, #5]
 8022380:	f896 e003 	ldrb.w	lr, [r6, #3]
 8022384:	f896 c004 	ldrb.w	ip, [r6, #4]
 8022388:	9710      	str	r7, [sp, #64]	; 0x40
 802238a:	b1c9      	cbz	r1, 80223c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802238c:	f04f 0b03 	mov.w	fp, #3
 8022390:	f06f 0904 	mvn.w	r9, #4
 8022394:	3605      	adds	r6, #5
 8022396:	fb13 930b 	smlabb	r3, r3, fp, r9
 802239a:	eb06 0b03 	add.w	fp, r6, r3
 802239e:	5cf3      	ldrb	r3, [r6, r3]
 80223a0:	9311      	str	r3, [sp, #68]	; 0x44
 80223a2:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80223a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80223a8:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80223ac:	9315      	str	r3, [sp, #84]	; 0x54
 80223ae:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80223b2:	9312      	str	r3, [sp, #72]	; 0x48
 80223b4:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80223b8:	9314      	str	r3, [sp, #80]	; 0x50
 80223ba:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80223be:	9316      	str	r3, [sp, #88]	; 0x58
 80223c0:	b292      	uxth	r2, r2
 80223c2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80223c4:	b289      	uxth	r1, r1
 80223c6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80223ca:	fb02 f601 	mul.w	r6, r2, r1
 80223ce:	0112      	lsls	r2, r2, #4
 80223d0:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80223d4:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 80223d8:	1b92      	subs	r2, r2, r6
 80223da:	b289      	uxth	r1, r1
 80223dc:	b292      	uxth	r2, r2
 80223de:	eba9 0901 	sub.w	r9, r9, r1
 80223e2:	fb02 fe0e 	mul.w	lr, r2, lr
 80223e6:	fa1f f989 	uxth.w	r9, r9
 80223ea:	fb02 fc0c 	mul.w	ip, r2, ip
 80223ee:	fb09 e404 	mla	r4, r9, r4, lr
 80223f2:	f895 e000 	ldrb.w	lr, [r5]
 80223f6:	fb09 c000 	mla	r0, r9, r0, ip
 80223fa:	fb01 4407 	mla	r4, r1, r7, r4
 80223fe:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8022400:	fb06 4407 	mla	r4, r6, r7, r4
 8022404:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022406:	fb1e fe07 	smulbb	lr, lr, r7
 802240a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802240e:	fb04 e403 	mla	r4, r4, r3, lr
 8022412:	b2a4      	uxth	r4, r4
 8022414:	f104 0e01 	add.w	lr, r4, #1
 8022418:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 802241c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802241e:	fb01 0004 	mla	r0, r1, r4, r0
 8022422:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022424:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022428:	fb06 0004 	mla	r0, r6, r4, r0
 802242c:	786c      	ldrb	r4, [r5, #1]
 802242e:	f885 e000 	strb.w	lr, [r5]
 8022432:	fb14 f407 	smulbb	r4, r4, r7
 8022436:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802243a:	fb00 4003 	mla	r0, r0, r3, r4
 802243e:	b280      	uxth	r0, r0
 8022440:	1c44      	adds	r4, r0, #1
 8022442:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8022446:	1200      	asrs	r0, r0, #8
 8022448:	7068      	strb	r0, [r5, #1]
 802244a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802244c:	4342      	muls	r2, r0
 802244e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022450:	fb09 2200 	mla	r2, r9, r0, r2
 8022454:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022456:	fb01 2100 	mla	r1, r1, r0, r2
 802245a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802245c:	fb06 1602 	mla	r6, r6, r2, r1
 8022460:	78a9      	ldrb	r1, [r5, #2]
 8022462:	fb11 f107 	smulbb	r1, r1, r7
 8022466:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802246a:	fb06 1303 	mla	r3, r6, r3, r1
 802246e:	b29b      	uxth	r3, r3
 8022470:	1c5e      	adds	r6, r3, #1
 8022472:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8022476:	121b      	asrs	r3, r3, #8
 8022478:	70ab      	strb	r3, [r5, #2]
 802247a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802247c:	3503      	adds	r5, #3
 802247e:	449a      	add	sl, r3
 8022480:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022482:	4498      	add	r8, r3
 8022484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022486:	3b01      	subs	r3, #1
 8022488:	930d      	str	r3, [sp, #52]	; 0x34
 802248a:	e750      	b.n	802232e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802248c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802248e:	449a      	add	sl, r3
 8022490:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022492:	4498      	add	r8, r3
 8022494:	9b07      	ldr	r3, [sp, #28]
 8022496:	3b01      	subs	r3, #1
 8022498:	9307      	str	r3, [sp, #28]
 802249a:	9b08      	ldr	r3, [sp, #32]
 802249c:	3303      	adds	r3, #3
 802249e:	9308      	str	r3, [sp, #32]
 80224a0:	e726      	b.n	80222f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80224a2:	d026      	beq.n	80224f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80224a4:	9b07      	ldr	r3, [sp, #28]
 80224a6:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80224a8:	3b01      	subs	r3, #1
 80224aa:	fb00 a003 	mla	r0, r0, r3, sl
 80224ae:	1400      	asrs	r0, r0, #16
 80224b0:	f53f af3a 	bmi.w	8022328 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80224b4:	3901      	subs	r1, #1
 80224b6:	4288      	cmp	r0, r1
 80224b8:	f6bf af36 	bge.w	8022328 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80224bc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80224be:	fb01 8303 	mla	r3, r1, r3, r8
 80224c2:	141b      	asrs	r3, r3, #16
 80224c4:	f53f af30 	bmi.w	8022328 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80224c8:	3a01      	subs	r2, #1
 80224ca:	4293      	cmp	r3, r2
 80224cc:	f6bf af2c 	bge.w	8022328 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80224d0:	9b08      	ldr	r3, [sp, #32]
 80224d2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80224d6:	1cdd      	adds	r5, r3, #3
 80224d8:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 80224dc:	f1bc 0f00 	cmp.w	ip, #0
 80224e0:	dc5f      	bgt.n	80225a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80224e2:	9b07      	ldr	r3, [sp, #28]
 80224e4:	9a08      	ldr	r2, [sp, #32]
 80224e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80224ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80224ee:	441a      	add	r2, r3
 80224f0:	9208      	str	r2, [sp, #32]
 80224f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80224f4:	2b00      	cmp	r3, #0
 80224f6:	f340 80e9 	ble.w	80226cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 80224fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80224fe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022500:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022504:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022508:	eef0 6a48 	vmov.f32	s13, s16
 802250c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022510:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022514:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022518:	ee16 aa90 	vmov	sl, s13
 802251c:	eef0 6a68 	vmov.f32	s13, s17
 8022520:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022524:	ee16 8a90 	vmov	r8, s13
 8022528:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802252c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022530:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022534:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022538:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802253c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022540:	ee18 2a10 	vmov	r2, s16
 8022544:	eeb0 8a47 	vmov.f32	s16, s14
 8022548:	fb92 f3f3 	sdiv	r3, r2, r3
 802254c:	ee18 2a90 	vmov	r2, s17
 8022550:	9333      	str	r3, [sp, #204]	; 0xcc
 8022552:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022554:	eef0 8a67 	vmov.f32	s17, s15
 8022558:	fb92 f3f3 	sdiv	r3, r2, r3
 802255c:	9334      	str	r3, [sp, #208]	; 0xd0
 802255e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022562:	3b01      	subs	r3, #1
 8022564:	930b      	str	r3, [sp, #44]	; 0x2c
 8022566:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022568:	bf08      	it	eq
 802256a:	4613      	moveq	r3, r2
 802256c:	9307      	str	r3, [sp, #28]
 802256e:	e6b1      	b.n	80222d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8022570:	1c47      	adds	r7, r0, #1
 8022572:	d482      	bmi.n	802247a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022574:	42bb      	cmp	r3, r7
 8022576:	db80      	blt.n	802247a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022578:	1c67      	adds	r7, r4, #1
 802257a:	f53f af7e 	bmi.w	802247a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802257e:	42be      	cmp	r6, r7
 8022580:	f6ff af7b 	blt.w	802247a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022584:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022586:	b236      	sxth	r6, r6
 8022588:	9001      	str	r0, [sp, #4]
 802258a:	b21b      	sxth	r3, r3
 802258c:	9600      	str	r6, [sp, #0]
 802258e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8022590:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8022594:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8022598:	4629      	mov	r1, r5
 802259a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802259c:	f7ff fd58 	bl	8022050 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80225a0:	e76b      	b.n	802247a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80225a2:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80225a4:	ea4f 402a 	mov.w	r0, sl, asr #16
 80225a8:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80225ac:	f3ca 3303 	ubfx	r3, sl, #12, #4
 80225b0:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 80225b4:	ea4f 4128 	mov.w	r1, r8, asr #16
 80225b8:	fb07 0101 	mla	r1, r7, r1, r0
 80225bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80225be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80225c2:	1844      	adds	r4, r0, r1
 80225c4:	5c40      	ldrb	r0, [r0, r1]
 80225c6:	78a6      	ldrb	r6, [r4, #2]
 80225c8:	7861      	ldrb	r1, [r4, #1]
 80225ca:	960f      	str	r6, [sp, #60]	; 0x3c
 80225cc:	78e6      	ldrb	r6, [r4, #3]
 80225ce:	910d      	str	r1, [sp, #52]	; 0x34
 80225d0:	9610      	str	r6, [sp, #64]	; 0x40
 80225d2:	f894 9004 	ldrb.w	r9, [r4, #4]
 80225d6:	f894 b005 	ldrb.w	fp, [r4, #5]
 80225da:	b192      	cbz	r2, 8022602 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80225dc:	f06f 0604 	mvn.w	r6, #4
 80225e0:	2103      	movs	r1, #3
 80225e2:	3405      	adds	r4, #5
 80225e4:	fb17 6701 	smlabb	r7, r7, r1, r6
 80225e8:	19e6      	adds	r6, r4, r7
 80225ea:	5de4      	ldrb	r4, [r4, r7]
 80225ec:	9417      	str	r4, [sp, #92]	; 0x5c
 80225ee:	7874      	ldrb	r4, [r6, #1]
 80225f0:	9419      	str	r4, [sp, #100]	; 0x64
 80225f2:	78b4      	ldrb	r4, [r6, #2]
 80225f4:	941b      	str	r4, [sp, #108]	; 0x6c
 80225f6:	78f4      	ldrb	r4, [r6, #3]
 80225f8:	9418      	str	r4, [sp, #96]	; 0x60
 80225fa:	7934      	ldrb	r4, [r6, #4]
 80225fc:	941a      	str	r4, [sp, #104]	; 0x68
 80225fe:	7974      	ldrb	r4, [r6, #5]
 8022600:	941c      	str	r4, [sp, #112]	; 0x70
 8022602:	b29b      	uxth	r3, r3
 8022604:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022606:	b292      	uxth	r2, r2
 8022608:	9909      	ldr	r1, [sp, #36]	; 0x24
 802260a:	3503      	adds	r5, #3
 802260c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022610:	fb03 f402 	mul.w	r4, r3, r2
 8022614:	011b      	lsls	r3, r3, #4
 8022616:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 802261a:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 802261e:	1b1b      	subs	r3, r3, r4
 8022620:	b292      	uxth	r2, r2
 8022622:	b29b      	uxth	r3, r3
 8022624:	1ab6      	subs	r6, r6, r2
 8022626:	435f      	muls	r7, r3
 8022628:	b2b6      	uxth	r6, r6
 802262a:	fb03 f909 	mul.w	r9, r3, r9
 802262e:	fb03 fb0b 	mul.w	fp, r3, fp
 8022632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022634:	fb06 7000 	mla	r0, r6, r0, r7
 8022638:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 802263a:	fb06 bb03 	mla	fp, r6, r3, fp
 802263e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022640:	fb02 0007 	mla	r0, r2, r7, r0
 8022644:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8022646:	fb02 bb03 	mla	fp, r2, r3, fp
 802264a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802264c:	fb04 0007 	mla	r0, r4, r7, r0
 8022650:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8022654:	fb17 f701 	smulbb	r7, r7, r1
 8022658:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802265c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802265e:	fb00 700e 	mla	r0, r0, lr, r7
 8022662:	fb06 9101 	mla	r1, r6, r1, r9
 8022666:	b280      	uxth	r0, r0
 8022668:	1c47      	adds	r7, r0, #1
 802266a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802266e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022670:	1200      	asrs	r0, r0, #8
 8022672:	f805 0c06 	strb.w	r0, [r5, #-6]
 8022676:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022678:	fb02 1100 	mla	r1, r2, r0, r1
 802267c:	981a      	ldr	r0, [sp, #104]	; 0x68
 802267e:	fb04 1100 	mla	r1, r4, r0, r1
 8022682:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8022686:	fb04 b403 	mla	r4, r4, r3, fp
 802268a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 802268e:	fb10 f007 	smulbb	r0, r0, r7
 8022692:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022696:	fb13 f307 	smulbb	r3, r3, r7
 802269a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802269e:	fb01 010e 	mla	r1, r1, lr, r0
 80226a2:	fb04 340e 	mla	r4, r4, lr, r3
 80226a6:	b289      	uxth	r1, r1
 80226a8:	b2a4      	uxth	r4, r4
 80226aa:	1c48      	adds	r0, r1, #1
 80226ac:	1c63      	adds	r3, r4, #1
 80226ae:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80226b2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80226b6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80226b8:	1209      	asrs	r1, r1, #8
 80226ba:	1224      	asrs	r4, r4, #8
 80226bc:	449a      	add	sl, r3
 80226be:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80226c0:	f805 1c05 	strb.w	r1, [r5, #-5]
 80226c4:	f805 4c04 	strb.w	r4, [r5, #-4]
 80226c8:	4498      	add	r8, r3
 80226ca:	e707      	b.n	80224dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80226cc:	b01f      	add	sp, #124	; 0x7c
 80226ce:	ecbd 8b08 	vpop	{d8-d11}
 80226d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080226d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80226d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226dc:	b085      	sub	sp, #20
 80226de:	784d      	ldrb	r5, [r1, #1]
 80226e0:	788e      	ldrb	r6, [r1, #2]
 80226e2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80226e6:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80226ea:	9403      	str	r4, [sp, #12]
 80226ec:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80226f0:	780c      	ldrb	r4, [r1, #0]
 80226f2:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80226f6:	fb07 ce03 	mla	lr, r7, r3, ip
 80226fa:	2f00      	cmp	r7, #0
 80226fc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022700:	eb02 0b0e 	add.w	fp, r2, lr
 8022704:	db56      	blt.n	80227b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8022706:	45b9      	cmp	r9, r7
 8022708:	dd54      	ble.n	80227b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802270a:	f1bc 0f00 	cmp.w	ip, #0
 802270e:	db4d      	blt.n	80227ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8022710:	4563      	cmp	r3, ip
 8022712:	dd4b      	ble.n	80227ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8022714:	f812 200e 	ldrb.w	r2, [r2, lr]
 8022718:	9200      	str	r2, [sp, #0]
 802271a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 802271e:	9201      	str	r2, [sp, #4]
 8022720:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8022724:	9202      	str	r2, [sp, #8]
 8022726:	f11c 0201 	adds.w	r2, ip, #1
 802272a:	d44a      	bmi.n	80227c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 802272c:	4293      	cmp	r3, r2
 802272e:	dd48      	ble.n	80227c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022730:	2800      	cmp	r0, #0
 8022732:	d046      	beq.n	80227c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022734:	f89b e003 	ldrb.w	lr, [fp, #3]
 8022738:	f89b 8004 	ldrb.w	r8, [fp, #4]
 802273c:	f89b a005 	ldrb.w	sl, [fp, #5]
 8022740:	3701      	adds	r7, #1
 8022742:	d446      	bmi.n	80227d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8022744:	45b9      	cmp	r9, r7
 8022746:	dd44      	ble.n	80227d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8022748:	9a03      	ldr	r2, [sp, #12]
 802274a:	2a00      	cmp	r2, #0
 802274c:	d045      	beq.n	80227da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 802274e:	f1bc 0f00 	cmp.w	ip, #0
 8022752:	db3a      	blt.n	80227ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8022754:	4563      	cmp	r3, ip
 8022756:	dd38      	ble.n	80227ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8022758:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802275c:	f04f 0903 	mov.w	r9, #3
 8022760:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8022764:	fb03 b209 	mla	r2, r3, r9, fp
 8022768:	fb03 b909 	mla	r9, r3, r9, fp
 802276c:	7852      	ldrb	r2, [r2, #1]
 802276e:	f899 9002 	ldrb.w	r9, [r9, #2]
 8022772:	f11c 0c01 	adds.w	ip, ip, #1
 8022776:	d40d      	bmi.n	8022794 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8022778:	4563      	cmp	r3, ip
 802277a:	dd0b      	ble.n	8022794 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802277c:	b160      	cbz	r0, 8022798 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 802277e:	2603      	movs	r6, #3
 8022780:	fb13 6406 	smlabb	r4, r3, r6, r6
 8022784:	fb03 b506 	mla	r5, r3, r6, fp
 8022788:	fb03 b306 	mla	r3, r3, r6, fp
 802278c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8022790:	792d      	ldrb	r5, [r5, #4]
 8022792:	795e      	ldrb	r6, [r3, #5]
 8022794:	280f      	cmp	r0, #15
 8022796:	d802      	bhi.n	802279e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8022798:	9b03      	ldr	r3, [sp, #12]
 802279a:	2b0f      	cmp	r3, #15
 802279c:	d922      	bls.n	80227e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 802279e:	4b2f      	ldr	r3, [pc, #188]	; (802285c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 80227a0:	f240 1157 	movw	r1, #343	; 0x157
 80227a4:	4a2e      	ldr	r2, [pc, #184]	; (8022860 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 80227a6:	482f      	ldr	r0, [pc, #188]	; (8022864 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 80227a8:	f004 f922 	bl	80269f0 <__assert_func>
 80227ac:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80227b0:	9400      	str	r4, [sp, #0]
 80227b2:	e7b8      	b.n	8022726 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80227b4:	46b2      	mov	sl, r6
 80227b6:	46a8      	mov	r8, r5
 80227b8:	46a6      	mov	lr, r4
 80227ba:	9400      	str	r4, [sp, #0]
 80227bc:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80227c0:	e7be      	b.n	8022740 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80227c2:	46b2      	mov	sl, r6
 80227c4:	46a8      	mov	r8, r5
 80227c6:	46a6      	mov	lr, r4
 80227c8:	e7ba      	b.n	8022740 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80227ca:	46b1      	mov	r9, r6
 80227cc:	462a      	mov	r2, r5
 80227ce:	4627      	mov	r7, r4
 80227d0:	e7cf      	b.n	8022772 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80227d2:	46b1      	mov	r9, r6
 80227d4:	462a      	mov	r2, r5
 80227d6:	4627      	mov	r7, r4
 80227d8:	e7dc      	b.n	8022794 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80227da:	280f      	cmp	r0, #15
 80227dc:	d8df      	bhi.n	802279e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80227de:	46b1      	mov	r9, r6
 80227e0:	462a      	mov	r2, r5
 80227e2:	4627      	mov	r7, r4
 80227e4:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80227e8:	b280      	uxth	r0, r0
 80227ea:	fb00 f30b 	mul.w	r3, r0, fp
 80227ee:	0100      	lsls	r0, r0, #4
 80227f0:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 80227f4:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80227f8:	1ac0      	subs	r0, r0, r3
 80227fa:	fa1f fb8b 	uxth.w	fp, fp
 80227fe:	b280      	uxth	r0, r0
 8022800:	ebac 0c0b 	sub.w	ip, ip, fp
 8022804:	9003      	str	r0, [sp, #12]
 8022806:	fa1f fc8c 	uxth.w	ip, ip
 802280a:	fb00 fe0e 	mul.w	lr, r0, lr
 802280e:	9800      	ldr	r0, [sp, #0]
 8022810:	fb0c ee00 	mla	lr, ip, r0, lr
 8022814:	9803      	ldr	r0, [sp, #12]
 8022816:	fb00 f808 	mul.w	r8, r0, r8
 802281a:	9801      	ldr	r0, [sp, #4]
 802281c:	fb0b ee07 	mla	lr, fp, r7, lr
 8022820:	fb0c 8800 	mla	r8, ip, r0, r8
 8022824:	fb03 ee04 	mla	lr, r3, r4, lr
 8022828:	fb0b 8202 	mla	r2, fp, r2, r8
 802282c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022830:	fb03 2505 	mla	r5, r3, r5, r2
 8022834:	9a03      	ldr	r2, [sp, #12]
 8022836:	f881 e000 	strb.w	lr, [r1]
 802283a:	fb02 f00a 	mul.w	r0, r2, sl
 802283e:	9a02      	ldr	r2, [sp, #8]
 8022840:	122d      	asrs	r5, r5, #8
 8022842:	fb0c 0c02 	mla	ip, ip, r2, r0
 8022846:	704d      	strb	r5, [r1, #1]
 8022848:	fb0b c909 	mla	r9, fp, r9, ip
 802284c:	fb03 9606 	mla	r6, r3, r6, r9
 8022850:	1236      	asrs	r6, r6, #8
 8022852:	708e      	strb	r6, [r1, #2]
 8022854:	b005      	add	sp, #20
 8022856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802285a:	bf00      	nop
 802285c:	0802eac7 	.word	0x0802eac7
 8022860:	0802f02f 	.word	0x0802f02f
 8022864:	0802eb90 	.word	0x0802eb90

08022868 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802286c:	ed2d 8b08 	vpush	{d8-d11}
 8022870:	b09b      	sub	sp, #108	; 0x6c
 8022872:	eeb0 aa40 	vmov.f32	s20, s0
 8022876:	eef0 9a60 	vmov.f32	s19, s1
 802287a:	920b      	str	r2, [sp, #44]	; 0x2c
 802287c:	eeb0 9a41 	vmov.f32	s18, s2
 8022880:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8022882:	eeb0 8a62 	vmov.f32	s16, s5
 8022886:	9019      	str	r0, [sp, #100]	; 0x64
 8022888:	eef0 8a43 	vmov.f32	s17, s6
 802288c:	6850      	ldr	r0, [r2, #4]
 802288e:	eef0 ba44 	vmov.f32	s23, s8
 8022892:	9109      	str	r1, [sp, #36]	; 0x24
 8022894:	eeb0 ba64 	vmov.f32	s22, s9
 8022898:	9306      	str	r3, [sp, #24]
 802289a:	eef0 aa45 	vmov.f32	s21, s10
 802289e:	6812      	ldr	r2, [r2, #0]
 80228a0:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80228a4:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 80228a8:	fb00 1303 	mla	r3, r0, r3, r1
 80228ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80228b0:	18d3      	adds	r3, r2, r3
 80228b2:	9307      	str	r3, [sp, #28]
 80228b4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80228b6:	681b      	ldr	r3, [r3, #0]
 80228b8:	9308      	str	r3, [sp, #32]
 80228ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228bc:	2b00      	cmp	r3, #0
 80228be:	dc03      	bgt.n	80228c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80228c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80228c2:	2b00      	cmp	r3, #0
 80228c4:	f340 81ab 	ble.w	8022c1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 80228c8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80228ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80228ce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80228d2:	1e48      	subs	r0, r1, #1
 80228d4:	1e55      	subs	r5, r2, #1
 80228d6:	9b06      	ldr	r3, [sp, #24]
 80228d8:	2b00      	cmp	r3, #0
 80228da:	f340 80b1 	ble.w	8022a40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80228de:	ea5f 462b 	movs.w	r6, fp, asr #16
 80228e2:	ea4f 4324 	mov.w	r3, r4, asr #16
 80228e6:	d406      	bmi.n	80228f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80228e8:	4286      	cmp	r6, r0
 80228ea:	da04      	bge.n	80228f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80228ec:	2b00      	cmp	r3, #0
 80228ee:	db02      	blt.n	80228f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80228f0:	42ab      	cmp	r3, r5
 80228f2:	f2c0 80a6 	blt.w	8022a42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80228f6:	3601      	adds	r6, #1
 80228f8:	f100 8097 	bmi.w	8022a2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80228fc:	42b1      	cmp	r1, r6
 80228fe:	f2c0 8094 	blt.w	8022a2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022902:	3301      	adds	r3, #1
 8022904:	f100 8091 	bmi.w	8022a2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022908:	429a      	cmp	r2, r3
 802290a:	f2c0 808e 	blt.w	8022a2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802290e:	9b06      	ldr	r3, [sp, #24]
 8022910:	9e07      	ldr	r6, [sp, #28]
 8022912:	930a      	str	r3, [sp, #40]	; 0x28
 8022914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022916:	2b00      	cmp	r3, #0
 8022918:	f340 80b0 	ble.w	8022a7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802291c:	9834      	ldr	r0, [sp, #208]	; 0xd0
 802291e:	1425      	asrs	r5, r4, #16
 8022920:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022922:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8022926:	68c7      	ldr	r7, [r0, #12]
 8022928:	ea5f 402b 	movs.w	r0, fp, asr #16
 802292c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022930:	689b      	ldr	r3, [r3, #8]
 8022932:	f100 80ea 	bmi.w	8022b0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022936:	f103 3cff 	add.w	ip, r3, #4294967295
 802293a:	4560      	cmp	r0, ip
 802293c:	f280 80e5 	bge.w	8022b0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022940:	2d00      	cmp	r5, #0
 8022942:	f2c0 80e2 	blt.w	8022b0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022946:	f107 3cff 	add.w	ip, r7, #4294967295
 802294a:	4565      	cmp	r5, ip
 802294c:	f280 80dd 	bge.w	8022b0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022950:	b21b      	sxth	r3, r3
 8022952:	fb05 0003 	mla	r0, r5, r3, r0
 8022956:	9d08      	ldr	r5, [sp, #32]
 8022958:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802295c:	182f      	adds	r7, r5, r0
 802295e:	5c2d      	ldrb	r5, [r5, r0]
 8022960:	7878      	ldrb	r0, [r7, #1]
 8022962:	f897 e002 	ldrb.w	lr, [r7, #2]
 8022966:	900c      	str	r0, [sp, #48]	; 0x30
 8022968:	f897 9003 	ldrb.w	r9, [r7, #3]
 802296c:	f897 8004 	ldrb.w	r8, [r7, #4]
 8022970:	f897 a005 	ldrb.w	sl, [r7, #5]
 8022974:	b1c9      	cbz	r1, 80229aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8022976:	f04f 0c03 	mov.w	ip, #3
 802297a:	f06f 0004 	mvn.w	r0, #4
 802297e:	3705      	adds	r7, #5
 8022980:	fb13 030c 	smlabb	r3, r3, ip, r0
 8022984:	eb07 0c03 	add.w	ip, r7, r3
 8022988:	5cfb      	ldrb	r3, [r7, r3]
 802298a:	930d      	str	r3, [sp, #52]	; 0x34
 802298c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022990:	930f      	str	r3, [sp, #60]	; 0x3c
 8022992:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8022996:	9311      	str	r3, [sp, #68]	; 0x44
 8022998:	f89c 3003 	ldrb.w	r3, [ip, #3]
 802299c:	930e      	str	r3, [sp, #56]	; 0x38
 802299e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80229a2:	9310      	str	r3, [sp, #64]	; 0x40
 80229a4:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80229a8:	9312      	str	r3, [sp, #72]	; 0x48
 80229aa:	b292      	uxth	r2, r2
 80229ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80229ae:	b289      	uxth	r1, r1
 80229b0:	fb02 f301 	mul.w	r3, r2, r1
 80229b4:	0112      	lsls	r2, r2, #4
 80229b6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80229ba:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80229be:	1ad2      	subs	r2, r2, r3
 80229c0:	b289      	uxth	r1, r1
 80229c2:	b292      	uxth	r2, r2
 80229c4:	1a7f      	subs	r7, r7, r1
 80229c6:	fb02 f909 	mul.w	r9, r2, r9
 80229ca:	b2bf      	uxth	r7, r7
 80229cc:	fb02 f808 	mul.w	r8, r2, r8
 80229d0:	fb02 fa0a 	mul.w	sl, r2, sl
 80229d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80229d6:	fb07 9905 	mla	r9, r7, r5, r9
 80229da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80229dc:	fb07 8800 	mla	r8, r7, r0, r8
 80229e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80229e2:	fb07 aa0e 	mla	sl, r7, lr, sl
 80229e6:	fb01 9905 	mla	r9, r1, r5, r9
 80229ea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80229ec:	fb01 8800 	mla	r8, r1, r0, r8
 80229f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80229f2:	fb01 a102 	mla	r1, r1, r2, sl
 80229f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80229f8:	fb03 9905 	mla	r9, r3, r5, r9
 80229fc:	fb03 8800 	mla	r8, r3, r0, r8
 8022a00:	fb03 1302 	mla	r3, r3, r2, r1
 8022a04:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022a08:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022a0c:	121b      	asrs	r3, r3, #8
 8022a0e:	f886 9000 	strb.w	r9, [r6]
 8022a12:	f886 8001 	strb.w	r8, [r6, #1]
 8022a16:	70b3      	strb	r3, [r6, #2]
 8022a18:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022a1a:	3603      	adds	r6, #3
 8022a1c:	449b      	add	fp, r3
 8022a1e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022a20:	441c      	add	r4, r3
 8022a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a24:	3b01      	subs	r3, #1
 8022a26:	930a      	str	r3, [sp, #40]	; 0x28
 8022a28:	e774      	b.n	8022914 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8022a2a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022a2c:	449b      	add	fp, r3
 8022a2e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022a30:	441c      	add	r4, r3
 8022a32:	9b06      	ldr	r3, [sp, #24]
 8022a34:	3b01      	subs	r3, #1
 8022a36:	9306      	str	r3, [sp, #24]
 8022a38:	9b07      	ldr	r3, [sp, #28]
 8022a3a:	3303      	adds	r3, #3
 8022a3c:	9307      	str	r3, [sp, #28]
 8022a3e:	e74a      	b.n	80228d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022a40:	d024      	beq.n	8022a8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022a42:	9b06      	ldr	r3, [sp, #24]
 8022a44:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8022a46:	3b01      	subs	r3, #1
 8022a48:	fb00 b003 	mla	r0, r0, r3, fp
 8022a4c:	1400      	asrs	r0, r0, #16
 8022a4e:	f53f af5e 	bmi.w	802290e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022a52:	3901      	subs	r1, #1
 8022a54:	4288      	cmp	r0, r1
 8022a56:	f6bf af5a 	bge.w	802290e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022a5a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8022a5c:	fb01 4303 	mla	r3, r1, r3, r4
 8022a60:	141b      	asrs	r3, r3, #16
 8022a62:	f53f af54 	bmi.w	802290e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022a66:	3a01      	subs	r2, #1
 8022a68:	4293      	cmp	r3, r2
 8022a6a:	f6bf af50 	bge.w	802290e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022a6e:	9b07      	ldr	r3, [sp, #28]
 8022a70:	f8dd e018 	ldr.w	lr, [sp, #24]
 8022a74:	1cde      	adds	r6, r3, #3
 8022a76:	f1be 0f00 	cmp.w	lr, #0
 8022a7a:	dc5f      	bgt.n	8022b3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8022a7c:	9b06      	ldr	r3, [sp, #24]
 8022a7e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022a82:	9b07      	ldr	r3, [sp, #28]
 8022a84:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022a88:	4423      	add	r3, r4
 8022a8a:	9307      	str	r3, [sp, #28]
 8022a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a8e:	2b00      	cmp	r3, #0
 8022a90:	f340 80c5 	ble.w	8022c1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8022a94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022a98:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022a9a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022a9e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022aa2:	eef0 6a48 	vmov.f32	s13, s16
 8022aa6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022aaa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022aae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ab2:	ee16 ba90 	vmov	fp, s13
 8022ab6:	eef0 6a68 	vmov.f32	s13, s17
 8022aba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022abe:	ee16 4a90 	vmov	r4, s13
 8022ac2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022ac6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022aca:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022ace:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022ad2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022ad6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022ada:	ee18 2a10 	vmov	r2, s16
 8022ade:	eeb0 8a47 	vmov.f32	s16, s14
 8022ae2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ae6:	ee18 2a90 	vmov	r2, s17
 8022aea:	932f      	str	r3, [sp, #188]	; 0xbc
 8022aec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022aee:	eef0 8a67 	vmov.f32	s17, s15
 8022af2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022af6:	9330      	str	r3, [sp, #192]	; 0xc0
 8022af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022afa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022afc:	3b01      	subs	r3, #1
 8022afe:	9309      	str	r3, [sp, #36]	; 0x24
 8022b00:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022b02:	bf08      	it	eq
 8022b04:	4613      	moveq	r3, r2
 8022b06:	9306      	str	r3, [sp, #24]
 8022b08:	e6d7      	b.n	80228ba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022b0a:	f110 0c01 	adds.w	ip, r0, #1
 8022b0e:	d483      	bmi.n	8022a18 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022b10:	4563      	cmp	r3, ip
 8022b12:	db81      	blt.n	8022a18 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022b14:	f115 0c01 	adds.w	ip, r5, #1
 8022b18:	f53f af7e 	bmi.w	8022a18 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022b1c:	4567      	cmp	r7, ip
 8022b1e:	f6ff af7b 	blt.w	8022a18 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022b22:	b23f      	sxth	r7, r7
 8022b24:	b21b      	sxth	r3, r3
 8022b26:	9700      	str	r7, [sp, #0]
 8022b28:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8022b2c:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8022b30:	9a08      	ldr	r2, [sp, #32]
 8022b32:	4631      	mov	r1, r6
 8022b34:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022b36:	f7ff fdcf 	bl	80226d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8022b3a:	e76d      	b.n	8022a18 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022b3c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8022b3e:	ea4f 402b 	mov.w	r0, fp, asr #16
 8022b42:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022b46:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022b4a:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8022b4e:	1421      	asrs	r1, r4, #16
 8022b50:	930a      	str	r3, [sp, #40]	; 0x28
 8022b52:	fb0c 0101 	mla	r1, ip, r1, r0
 8022b56:	9808      	ldr	r0, [sp, #32]
 8022b58:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022b5c:	1845      	adds	r5, r0, r1
 8022b5e:	5c40      	ldrb	r0, [r0, r1]
 8022b60:	796f      	ldrb	r7, [r5, #5]
 8022b62:	7869      	ldrb	r1, [r5, #1]
 8022b64:	f895 8002 	ldrb.w	r8, [r5, #2]
 8022b68:	f895 a003 	ldrb.w	sl, [r5, #3]
 8022b6c:	f895 9004 	ldrb.w	r9, [r5, #4]
 8022b70:	970c      	str	r7, [sp, #48]	; 0x30
 8022b72:	b1a2      	cbz	r2, 8022b9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8022b74:	2703      	movs	r7, #3
 8022b76:	f06f 0304 	mvn.w	r3, #4
 8022b7a:	3505      	adds	r5, #5
 8022b7c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8022b80:	eb05 070c 	add.w	r7, r5, ip
 8022b84:	f815 500c 	ldrb.w	r5, [r5, ip]
 8022b88:	9513      	str	r5, [sp, #76]	; 0x4c
 8022b8a:	787d      	ldrb	r5, [r7, #1]
 8022b8c:	9515      	str	r5, [sp, #84]	; 0x54
 8022b8e:	78bd      	ldrb	r5, [r7, #2]
 8022b90:	9517      	str	r5, [sp, #92]	; 0x5c
 8022b92:	78fd      	ldrb	r5, [r7, #3]
 8022b94:	9514      	str	r5, [sp, #80]	; 0x50
 8022b96:	793d      	ldrb	r5, [r7, #4]
 8022b98:	9516      	str	r5, [sp, #88]	; 0x58
 8022b9a:	797d      	ldrb	r5, [r7, #5]
 8022b9c:	9518      	str	r5, [sp, #96]	; 0x60
 8022b9e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8022ba2:	b292      	uxth	r2, r2
 8022ba4:	3603      	adds	r6, #3
 8022ba6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022baa:	fb03 f502 	mul.w	r5, r3, r2
 8022bae:	011b      	lsls	r3, r3, #4
 8022bb0:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8022bb4:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8022bb8:	1b5b      	subs	r3, r3, r5
 8022bba:	b292      	uxth	r2, r2
 8022bbc:	b29b      	uxth	r3, r3
 8022bbe:	1abf      	subs	r7, r7, r2
 8022bc0:	fb03 f909 	mul.w	r9, r3, r9
 8022bc4:	b2bf      	uxth	r7, r7
 8022bc6:	fb03 fa0a 	mul.w	sl, r3, sl
 8022bca:	fb07 9901 	mla	r9, r7, r1, r9
 8022bce:	9915      	ldr	r1, [sp, #84]	; 0x54
 8022bd0:	fb07 aa00 	mla	sl, r7, r0, sl
 8022bd4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022bd6:	fb02 9901 	mla	r9, r2, r1, r9
 8022bda:	9916      	ldr	r1, [sp, #88]	; 0x58
 8022bdc:	fb02 aa00 	mla	sl, r2, r0, sl
 8022be0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022be2:	fb05 9901 	mla	r9, r5, r1, r9
 8022be6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022be8:	fb05 aa00 	mla	sl, r5, r0, sl
 8022bec:	434b      	muls	r3, r1
 8022bee:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8022bf0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022bf4:	fb07 3308 	mla	r3, r7, r8, r3
 8022bf8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022bfc:	f806 ac06 	strb.w	sl, [r6, #-6]
 8022c00:	fb02 3201 	mla	r2, r2, r1, r3
 8022c04:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022c06:	f806 9c05 	strb.w	r9, [r6, #-5]
 8022c0a:	fb05 2503 	mla	r5, r5, r3, r2
 8022c0e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022c10:	122d      	asrs	r5, r5, #8
 8022c12:	449b      	add	fp, r3
 8022c14:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022c16:	f806 5c04 	strb.w	r5, [r6, #-4]
 8022c1a:	441c      	add	r4, r3
 8022c1c:	e72b      	b.n	8022a76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8022c1e:	b01b      	add	sp, #108	; 0x6c
 8022c20:	ecbd 8b08 	vpop	{d8-d11}
 8022c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022c28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8022c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c2c:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8022c30:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8022c34:	fb04 5603 	mla	r6, r4, r3, r5
 8022c38:	2c00      	cmp	r4, #0
 8022c3a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8022c3e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8022c42:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8022c46:	db36      	blt.n	8022cb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8022c48:	45a6      	cmp	lr, r4
 8022c4a:	dd34      	ble.n	8022cb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8022c4c:	2d00      	cmp	r5, #0
 8022c4e:	db30      	blt.n	8022cb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8022c50:	42ab      	cmp	r3, r5
 8022c52:	dd2e      	ble.n	8022cb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8022c54:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8022c58:	1c6e      	adds	r6, r5, #1
 8022c5a:	d42f      	bmi.n	8022cbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8022c5c:	42b3      	cmp	r3, r6
 8022c5e:	dd2d      	ble.n	8022cbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8022c60:	b370      	cbz	r0, 8022cc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 8022c62:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8022c66:	3401      	adds	r4, #1
 8022c68:	d42e      	bmi.n	8022cc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8022c6a:	45a6      	cmp	lr, r4
 8022c6c:	dd2c      	ble.n	8022cc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8022c6e:	b377      	cbz	r7, 8022cce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8022c70:	2d00      	cmp	r5, #0
 8022c72:	db27      	blt.n	8022cc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8022c74:	42ab      	cmp	r3, r5
 8022c76:	dd25      	ble.n	8022cc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8022c78:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8022c7c:	3501      	adds	r5, #1
 8022c7e:	d429      	bmi.n	8022cd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8022c80:	42ab      	cmp	r3, r5
 8022c82:	dd27      	ble.n	8022cd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8022c84:	b340      	cbz	r0, 8022cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8022c86:	3301      	adds	r3, #1
 8022c88:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8022c8c:	280f      	cmp	r0, #15
 8022c8e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022c92:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022c96:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022c9a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8022c9e:	d801      	bhi.n	8022ca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8022ca0:	2f0f      	cmp	r7, #15
 8022ca2:	d91b      	bls.n	8022cdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8022ca4:	4b89      	ldr	r3, [pc, #548]	; (8022ecc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8022ca6:	f240 1157 	movw	r1, #343	; 0x157
 8022caa:	4a89      	ldr	r2, [pc, #548]	; (8022ed0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8022cac:	4889      	ldr	r0, [pc, #548]	; (8022ed4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8022cae:	f003 fe9f 	bl	80269f0 <__assert_func>
 8022cb2:	2200      	movs	r2, #0
 8022cb4:	e7d0      	b.n	8022c58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 8022cb6:	2600      	movs	r6, #0
 8022cb8:	4632      	mov	r2, r6
 8022cba:	e7d4      	b.n	8022c66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8022cbc:	2600      	movs	r6, #0
 8022cbe:	e7d2      	b.n	8022c66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8022cc0:	4606      	mov	r6, r0
 8022cc2:	e7d0      	b.n	8022c66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8022cc4:	2400      	movs	r4, #0
 8022cc6:	e7d9      	b.n	8022c7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8022cc8:	2300      	movs	r3, #0
 8022cca:	461c      	mov	r4, r3
 8022ccc:	e7de      	b.n	8022c8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8022cce:	463b      	mov	r3, r7
 8022cd0:	463c      	mov	r4, r7
 8022cd2:	e7db      	b.n	8022c8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8022cd4:	2300      	movs	r3, #0
 8022cd6:	e7d9      	b.n	8022c8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8022cd8:	4603      	mov	r3, r0
 8022cda:	e7d7      	b.n	8022c8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8022cdc:	b280      	uxth	r0, r0
 8022cde:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022ce2:	b2bf      	uxth	r7, r7
 8022ce4:	fb00 fe07 	mul.w	lr, r0, r7
 8022ce8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8022cec:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022cf0:	eba0 0c0e 	sub.w	ip, r0, lr
 8022cf4:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8022cf8:	b2bf      	uxth	r7, r7
 8022cfa:	fa1f fc8c 	uxth.w	ip, ip
 8022cfe:	eba5 0507 	sub.w	r5, r5, r7
 8022d02:	fb0c f00a 	mul.w	r0, ip, sl
 8022d06:	b2ad      	uxth	r5, r5
 8022d08:	fb05 000b 	mla	r0, r5, fp, r0
 8022d0c:	fb07 0009 	mla	r0, r7, r9, r0
 8022d10:	fb0e 0008 	mla	r0, lr, r8, r0
 8022d14:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022d18:	9001      	str	r0, [sp, #4]
 8022d1a:	d018      	beq.n	8022d4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 8022d1c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022d20:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022d24:	fb0b f000 	mul.w	r0, fp, r0
 8022d28:	fb0b fb02 	mul.w	fp, fp, r2
 8022d2c:	0a02      	lsrs	r2, r0, #8
 8022d2e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022d32:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022d36:	4402      	add	r2, r0
 8022d38:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8022d3c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022d40:	0a12      	lsrs	r2, r2, #8
 8022d42:	0a00      	lsrs	r0, r0, #8
 8022d44:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022d48:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022d4c:	4302      	orrs	r2, r0
 8022d4e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022d52:	d01a      	beq.n	8022d8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8022d54:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8022d58:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022d5c:	fb0a f000 	mul.w	r0, sl, r0
 8022d60:	fb0a fa06 	mul.w	sl, sl, r6
 8022d64:	0a06      	lsrs	r6, r0, #8
 8022d66:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022d6a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022d6e:	4406      	add	r6, r0
 8022d70:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8022d74:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8022d78:	0a36      	lsrs	r6, r6, #8
 8022d7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022d7e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022d82:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022d86:	ea46 060a 	orr.w	r6, r6, sl
 8022d8a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022d8e:	d01b      	beq.n	8022dc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8022d90:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022d94:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022d98:	fb09 fa0a 	mul.w	sl, r9, sl
 8022d9c:	fb09 f004 	mul.w	r0, r9, r4
 8022da0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022da4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022da8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8022dac:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022db0:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8022db4:	4454      	add	r4, sl
 8022db6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022dba:	0a24      	lsrs	r4, r4, #8
 8022dbc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022dc0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022dc4:	ea44 0409 	orr.w	r4, r4, r9
 8022dc8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022dcc:	d01b      	beq.n	8022e06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 8022dce:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8022dd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022dd6:	fb08 f909 	mul.w	r9, r8, r9
 8022dda:	fb08 f003 	mul.w	r0, r8, r3
 8022dde:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8022de2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022de6:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8022dea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022dee:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8022df2:	444b      	add	r3, r9
 8022df4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022df8:	0a1b      	lsrs	r3, r3, #8
 8022dfa:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022dfe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e02:	ea43 0308 	orr.w	r3, r3, r8
 8022e06:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8022e0a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022e0e:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8022e12:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022e16:	fb0c f000 	mul.w	r0, ip, r0
 8022e1a:	fb0c f606 	mul.w	r6, ip, r6
 8022e1e:	fb05 0808 	mla	r8, r5, r8, r0
 8022e22:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8022e26:	fb05 6502 	mla	r5, r5, r2, r6
 8022e2a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022e2e:	fb07 8800 	mla	r8, r7, r0, r8
 8022e32:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8022e36:	fb07 5704 	mla	r7, r7, r4, r5
 8022e3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e3e:	fb0e 8000 	mla	r0, lr, r0, r8
 8022e42:	fb0e 7e03 	mla	lr, lr, r3, r7
 8022e46:	9b01      	ldr	r3, [sp, #4]
 8022e48:	0a00      	lsrs	r0, r0, #8
 8022e4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e4e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022e52:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022e56:	ea40 0e0e 	orr.w	lr, r0, lr
 8022e5a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8022e5e:	b280      	uxth	r0, r0
 8022e60:	fa5f f48e 	uxtb.w	r4, lr
 8022e64:	4343      	muls	r3, r0
 8022e66:	fb14 f400 	smulbb	r4, r4, r0
 8022e6a:	1c5a      	adds	r2, r3, #1
 8022e6c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022e70:	780b      	ldrb	r3, [r1, #0]
 8022e72:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8022e76:	b2d2      	uxtb	r2, r2
 8022e78:	fb03 4302 	mla	r3, r3, r2, r4
 8022e7c:	b29b      	uxth	r3, r3
 8022e7e:	1c5c      	adds	r4, r3, #1
 8022e80:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022e84:	784c      	ldrb	r4, [r1, #1]
 8022e86:	fb14 f402 	smulbb	r4, r4, r2
 8022e8a:	121b      	asrs	r3, r3, #8
 8022e8c:	700b      	strb	r3, [r1, #0]
 8022e8e:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8022e92:	fb03 4300 	mla	r3, r3, r0, r4
 8022e96:	b29b      	uxth	r3, r3
 8022e98:	1c5c      	adds	r4, r3, #1
 8022e9a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022e9e:	121b      	asrs	r3, r3, #8
 8022ea0:	704b      	strb	r3, [r1, #1]
 8022ea2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8022ea6:	f891 e002 	ldrb.w	lr, [r1, #2]
 8022eaa:	fb1e fe02 	smulbb	lr, lr, r2
 8022eae:	fb03 ee00 	mla	lr, r3, r0, lr
 8022eb2:	fa1f fe8e 	uxth.w	lr, lr
 8022eb6:	f10e 0301 	add.w	r3, lr, #1
 8022eba:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8022ebe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022ec2:	f881 e002 	strb.w	lr, [r1, #2]
 8022ec6:	b003      	add	sp, #12
 8022ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ecc:	0802eac7 	.word	0x0802eac7
 8022ed0:	0802f02f 	.word	0x0802f02f
 8022ed4:	0802eb90 	.word	0x0802eb90

08022ed8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022edc:	ed2d 8b08 	vpush	{d8-d11}
 8022ee0:	b09d      	sub	sp, #116	; 0x74
 8022ee2:	eeb0 aa40 	vmov.f32	s20, s0
 8022ee6:	eef0 9a60 	vmov.f32	s19, s1
 8022eea:	9219      	str	r2, [sp, #100]	; 0x64
 8022eec:	eeb0 9a41 	vmov.f32	s18, s2
 8022ef0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8022ef2:	eeb0 8a62 	vmov.f32	s16, s5
 8022ef6:	9307      	str	r3, [sp, #28]
 8022ef8:	eef0 8a43 	vmov.f32	s17, s6
 8022efc:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8022f00:	eef0 ba44 	vmov.f32	s23, s8
 8022f04:	901b      	str	r0, [sp, #108]	; 0x6c
 8022f06:	eeb0 ba64 	vmov.f32	s22, s9
 8022f0a:	931a      	str	r3, [sp, #104]	; 0x68
 8022f0c:	eef0 aa45 	vmov.f32	s21, s10
 8022f10:	6850      	ldr	r0, [r2, #4]
 8022f12:	9117      	str	r1, [sp, #92]	; 0x5c
 8022f14:	6812      	ldr	r2, [r2, #0]
 8022f16:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8022f1a:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 8022f1e:	fb00 1303 	mla	r3, r0, r3, r1
 8022f22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022f26:	18d3      	adds	r3, r2, r3
 8022f28:	930a      	str	r3, [sp, #40]	; 0x28
 8022f2a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022f2c:	681b      	ldr	r3, [r3, #0]
 8022f2e:	9310      	str	r3, [sp, #64]	; 0x40
 8022f30:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8022f34:	930b      	str	r3, [sp, #44]	; 0x2c
 8022f36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022f38:	2b00      	cmp	r3, #0
 8022f3a:	dc03      	bgt.n	8022f44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022f3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022f3e:	2b00      	cmp	r3, #0
 8022f40:	f340 8368 	ble.w	8023614 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8022f44:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022f46:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022f4a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022f4e:	1e48      	subs	r0, r1, #1
 8022f50:	1e57      	subs	r7, r2, #1
 8022f52:	9b07      	ldr	r3, [sp, #28]
 8022f54:	2b00      	cmp	r3, #0
 8022f56:	f340 8187 	ble.w	8023268 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8022f5a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022f5e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022f62:	d406      	bmi.n	8022f72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022f64:	4584      	cmp	ip, r0
 8022f66:	da04      	bge.n	8022f72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022f68:	2b00      	cmp	r3, #0
 8022f6a:	db02      	blt.n	8022f72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022f6c:	42bb      	cmp	r3, r7
 8022f6e:	f2c0 817c 	blt.w	802326a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022f72:	f11c 0c01 	adds.w	ip, ip, #1
 8022f76:	f100 816c 	bmi.w	8023252 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022f7a:	4561      	cmp	r1, ip
 8022f7c:	f2c0 8169 	blt.w	8023252 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022f80:	3301      	adds	r3, #1
 8022f82:	f100 8166 	bmi.w	8023252 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022f86:	429a      	cmp	r2, r3
 8022f88:	f2c0 8163 	blt.w	8023252 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022f8c:	9b07      	ldr	r3, [sp, #28]
 8022f8e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022f90:	9318      	str	r3, [sp, #96]	; 0x60
 8022f92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022f94:	2b00      	cmp	r3, #0
 8022f96:	f340 8186 	ble.w	80232a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8022f9a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022f9c:	142a      	asrs	r2, r5, #16
 8022f9e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022fa2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022fa6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022faa:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022fae:	f100 81cb 	bmi.w	8023348 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022fb2:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022fb6:	4542      	cmp	r2, r8
 8022fb8:	f280 81c6 	bge.w	8023348 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022fbc:	2800      	cmp	r0, #0
 8022fbe:	f2c0 81c3 	blt.w	8023348 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022fc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8022fc6:	4540      	cmp	r0, r8
 8022fc8:	f280 81be 	bge.w	8023348 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022fcc:	fa0f f38e 	sxth.w	r3, lr
 8022fd0:	fb00 2203 	mla	r2, r0, r3, r2
 8022fd4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022fd6:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8022fda:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8022fde:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022fe2:	2900      	cmp	r1, #0
 8022fe4:	f000 81a6 	beq.w	8023334 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 8022fe8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8022fec:	900c      	str	r0, [sp, #48]	; 0x30
 8022fee:	0e00      	lsrs	r0, r0, #24
 8022ff0:	9013      	str	r0, [sp, #76]	; 0x4c
 8022ff2:	f1bc 0f00 	cmp.w	ip, #0
 8022ff6:	d00f      	beq.n	8023018 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022ff8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022ffc:	3b01      	subs	r3, #1
 8022ffe:	009b      	lsls	r3, r3, #2
 8023000:	3304      	adds	r3, #4
 8023002:	eb08 0003 	add.w	r0, r8, r3
 8023006:	f858 3003 	ldr.w	r3, [r8, r3]
 802300a:	9308      	str	r3, [sp, #32]
 802300c:	0e1b      	lsrs	r3, r3, #24
 802300e:	9311      	str	r3, [sp, #68]	; 0x44
 8023010:	6843      	ldr	r3, [r0, #4]
 8023012:	930d      	str	r3, [sp, #52]	; 0x34
 8023014:	0e1b      	lsrs	r3, r3, #24
 8023016:	9314      	str	r3, [sp, #80]	; 0x50
 8023018:	b289      	uxth	r1, r1
 802301a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802301c:	fa1f fc8c 	uxth.w	ip, ip
 8023020:	0108      	lsls	r0, r1, #4
 8023022:	fb01 f90c 	mul.w	r9, r1, ip
 8023026:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802302a:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 802302e:	eba0 0809 	sub.w	r8, r0, r9
 8023032:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023034:	fa1f f18c 	uxth.w	r1, ip
 8023038:	fa1f f888 	uxth.w	r8, r8
 802303c:	1a5b      	subs	r3, r3, r1
 802303e:	fb08 f000 	mul.w	r0, r8, r0
 8023042:	b29b      	uxth	r3, r3
 8023044:	fb03 000e 	mla	r0, r3, lr, r0
 8023048:	fb01 0004 	mla	r0, r1, r4, r0
 802304c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802304e:	fb09 0004 	mla	r0, r9, r4, r0
 8023052:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023056:	2800      	cmp	r0, #0
 8023058:	f000 80f2 	beq.w	8023240 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802305c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023060:	d01b      	beq.n	802309a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023062:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023066:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802306a:	fb0e fa0a 	mul.w	sl, lr, sl
 802306e:	fb0e fe02 	mul.w	lr, lr, r2
 8023072:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023076:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802307a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802307e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023082:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023086:	4452      	add	r2, sl
 8023088:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802308c:	0a12      	lsrs	r2, r2, #8
 802308e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023092:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023096:	ea42 020c 	orr.w	r2, r2, ip
 802309a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802309c:	2cff      	cmp	r4, #255	; 0xff
 802309e:	d021      	beq.n	80230e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80230a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80230a2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80230a6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80230a8:	fb04 fb0b 	mul.w	fp, r4, fp
 80230ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80230ae:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80230b2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80230b4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80230b8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80230bc:	fb04 fa0a 	mul.w	sl, r4, sl
 80230c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230c4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80230c8:	44de      	add	lr, fp
 80230ca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80230ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80230d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80230d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80230de:	ea4e 040a 	orr.w	r4, lr, sl
 80230e2:	940c      	str	r4, [sp, #48]	; 0x30
 80230e4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80230e6:	2cff      	cmp	r4, #255	; 0xff
 80230e8:	d021      	beq.n	802312e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 80230ea:	9c08      	ldr	r4, [sp, #32]
 80230ec:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80230f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80230f2:	fb04 fb0b 	mul.w	fp, r4, fp
 80230f6:	9c08      	ldr	r4, [sp, #32]
 80230f8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80230fc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80230fe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023102:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023106:	fb04 fa0a 	mul.w	sl, r4, sl
 802310a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802310e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023112:	44de      	add	lr, fp
 8023114:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023118:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802311c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023120:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023124:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023128:	ea4e 040a 	orr.w	r4, lr, sl
 802312c:	9408      	str	r4, [sp, #32]
 802312e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023130:	2cff      	cmp	r4, #255	; 0xff
 8023132:	d021      	beq.n	8023178 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023134:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023136:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802313a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802313c:	fb04 fb0b 	mul.w	fp, r4, fp
 8023140:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023142:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023146:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023148:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802314c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023150:	fb04 fa0a 	mul.w	sl, r4, sl
 8023154:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023158:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802315c:	44de      	add	lr, fp
 802315e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023162:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023166:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802316a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802316e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023172:	ea4e 040a 	orr.w	r4, lr, sl
 8023176:	940d      	str	r4, [sp, #52]	; 0x34
 8023178:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802317a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802317e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023182:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023186:	9c08      	ldr	r4, [sp, #32]
 8023188:	fb08 fc0c 	mul.w	ip, r8, ip
 802318c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8023190:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023194:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023196:	fb01 cc0e 	mla	ip, r1, lr, ip
 802319a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802319e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80231a0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80231a4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80231a8:	fb08 f80e 	mul.w	r8, r8, lr
 80231ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80231b0:	fb03 8202 	mla	r2, r3, r2, r8
 80231b4:	9b08      	ldr	r3, [sp, #32]
 80231b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80231ba:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80231be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80231c0:	fb01 220a 	mla	r2, r1, sl, r2
 80231c4:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80231c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80231ca:	fb09 2901 	mla	r9, r9, r1, r2
 80231ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80231d0:	4343      	muls	r3, r0
 80231d2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80231d6:	1c58      	adds	r0, r3, #1
 80231d8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80231dc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80231e0:	783b      	ldrb	r3, [r7, #0]
 80231e2:	ea4c 0c09 	orr.w	ip, ip, r9
 80231e6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80231ea:	fa5f f28c 	uxtb.w	r2, ip
 80231ee:	b2c0      	uxtb	r0, r0
 80231f0:	fb12 f201 	smulbb	r2, r2, r1
 80231f4:	fb03 2300 	mla	r3, r3, r0, r2
 80231f8:	b29b      	uxth	r3, r3
 80231fa:	1c5a      	adds	r2, r3, #1
 80231fc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023200:	787a      	ldrb	r2, [r7, #1]
 8023202:	fb12 f200 	smulbb	r2, r2, r0
 8023206:	121b      	asrs	r3, r3, #8
 8023208:	703b      	strb	r3, [r7, #0]
 802320a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802320e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023212:	fb03 2301 	mla	r3, r3, r1, r2
 8023216:	b29b      	uxth	r3, r3
 8023218:	1c5a      	adds	r2, r3, #1
 802321a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802321e:	121b      	asrs	r3, r3, #8
 8023220:	707b      	strb	r3, [r7, #1]
 8023222:	78bb      	ldrb	r3, [r7, #2]
 8023224:	fb13 f000 	smulbb	r0, r3, r0
 8023228:	fb0c 0c01 	mla	ip, ip, r1, r0
 802322c:	fa1f fc8c 	uxth.w	ip, ip
 8023230:	f10c 0301 	add.w	r3, ip, #1
 8023234:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023238:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802323c:	f887 c002 	strb.w	ip, [r7, #2]
 8023240:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023242:	3703      	adds	r7, #3
 8023244:	441d      	add	r5, r3
 8023246:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023248:	441e      	add	r6, r3
 802324a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802324c:	3b01      	subs	r3, #1
 802324e:	9318      	str	r3, [sp, #96]	; 0x60
 8023250:	e69f      	b.n	8022f92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023252:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023254:	441d      	add	r5, r3
 8023256:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023258:	441e      	add	r6, r3
 802325a:	9b07      	ldr	r3, [sp, #28]
 802325c:	3b01      	subs	r3, #1
 802325e:	9307      	str	r3, [sp, #28]
 8023260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023262:	3303      	adds	r3, #3
 8023264:	930a      	str	r3, [sp, #40]	; 0x28
 8023266:	e674      	b.n	8022f52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023268:	d025      	beq.n	80232b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802326a:	9b07      	ldr	r3, [sp, #28]
 802326c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 802326e:	3b01      	subs	r3, #1
 8023270:	fb00 5003 	mla	r0, r0, r3, r5
 8023274:	1400      	asrs	r0, r0, #16
 8023276:	f53f ae89 	bmi.w	8022f8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802327a:	3901      	subs	r1, #1
 802327c:	4288      	cmp	r0, r1
 802327e:	f6bf ae85 	bge.w	8022f8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8023282:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8023284:	fb01 6303 	mla	r3, r1, r3, r6
 8023288:	141b      	asrs	r3, r3, #16
 802328a:	f53f ae7f 	bmi.w	8022f8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802328e:	3a01      	subs	r2, #1
 8023290:	4293      	cmp	r3, r2
 8023292:	f6bf ae7b 	bge.w	8022f8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8023296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023298:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802329c:	f103 0e03 	add.w	lr, r3, #3
 80232a0:	f1bb 0f00 	cmp.w	fp, #0
 80232a4:	dc6e      	bgt.n	8023384 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80232a6:	9b07      	ldr	r3, [sp, #28]
 80232a8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80232ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80232ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80232b2:	4423      	add	r3, r4
 80232b4:	930a      	str	r3, [sp, #40]	; 0x28
 80232b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80232b8:	2b00      	cmp	r3, #0
 80232ba:	f340 81ab 	ble.w	8023614 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80232be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80232c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80232c4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80232c8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80232cc:	eef0 6a48 	vmov.f32	s13, s16
 80232d0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80232d4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80232d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80232dc:	ee16 5a90 	vmov	r5, s13
 80232e0:	eef0 6a68 	vmov.f32	s13, s17
 80232e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80232e8:	ee16 6a90 	vmov	r6, s13
 80232ec:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80232f0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80232f4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80232f8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80232fc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023300:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023304:	ee18 2a10 	vmov	r2, s16
 8023308:	eeb0 8a47 	vmov.f32	s16, s14
 802330c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023310:	ee18 2a90 	vmov	r2, s17
 8023314:	9331      	str	r3, [sp, #196]	; 0xc4
 8023316:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023318:	eef0 8a67 	vmov.f32	s17, s15
 802331c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023320:	9332      	str	r3, [sp, #200]	; 0xc8
 8023322:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023324:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023326:	3b01      	subs	r3, #1
 8023328:	9317      	str	r3, [sp, #92]	; 0x5c
 802332a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802332c:	bf08      	it	eq
 802332e:	4613      	moveq	r3, r2
 8023330:	9307      	str	r3, [sp, #28]
 8023332:	e600      	b.n	8022f36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8023334:	f1bc 0f00 	cmp.w	ip, #0
 8023338:	f43f ae6e 	beq.w	8023018 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802333c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023340:	9308      	str	r3, [sp, #32]
 8023342:	0e1b      	lsrs	r3, r3, #24
 8023344:	9311      	str	r3, [sp, #68]	; 0x44
 8023346:	e667      	b.n	8023018 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8023348:	f112 0801 	adds.w	r8, r2, #1
 802334c:	f53f af78 	bmi.w	8023240 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023350:	45c6      	cmp	lr, r8
 8023352:	f6ff af75 	blt.w	8023240 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023356:	f110 0801 	adds.w	r8, r0, #1
 802335a:	f53f af71 	bmi.w	8023240 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802335e:	4543      	cmp	r3, r8
 8023360:	f6ff af6e 	blt.w	8023240 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023364:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8023366:	b21b      	sxth	r3, r3
 8023368:	9201      	str	r2, [sp, #4]
 802336a:	9300      	str	r3, [sp, #0]
 802336c:	fa0f f38e 	sxth.w	r3, lr
 8023370:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023376:	e9cd c404 	strd	ip, r4, [sp, #16]
 802337a:	4639      	mov	r1, r7
 802337c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802337e:	f7ff fc53 	bl	8022c28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8023382:	e75d      	b.n	8023240 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023384:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8023386:	142f      	asrs	r7, r5, #16
 8023388:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802338a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802338e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8023392:	1433      	asrs	r3, r6, #16
 8023394:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023398:	fb02 7303 	mla	r3, r2, r3, r7
 802339c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 80233a0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80233a4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80233a8:	2900      	cmp	r1, #0
 80233aa:	f000 812a 	beq.w	8023602 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 80233ae:	687c      	ldr	r4, [r7, #4]
 80233b0:	940e      	str	r4, [sp, #56]	; 0x38
 80233b2:	0e24      	lsrs	r4, r4, #24
 80233b4:	9415      	str	r4, [sp, #84]	; 0x54
 80233b6:	b178      	cbz	r0, 80233d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80233b8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80233bc:	3a01      	subs	r2, #1
 80233be:	0092      	lsls	r2, r2, #2
 80233c0:	3204      	adds	r2, #4
 80233c2:	eb07 0802 	add.w	r8, r7, r2
 80233c6:	58ba      	ldr	r2, [r7, r2]
 80233c8:	9209      	str	r2, [sp, #36]	; 0x24
 80233ca:	0e12      	lsrs	r2, r2, #24
 80233cc:	9212      	str	r2, [sp, #72]	; 0x48
 80233ce:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80233d2:	920f      	str	r2, [sp, #60]	; 0x3c
 80233d4:	0e12      	lsrs	r2, r2, #24
 80233d6:	9216      	str	r2, [sp, #88]	; 0x58
 80233d8:	b289      	uxth	r1, r1
 80233da:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80233dc:	b280      	uxth	r0, r0
 80233de:	fb01 f900 	mul.w	r9, r1, r0
 80233e2:	0109      	lsls	r1, r1, #4
 80233e4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80233e8:	eba1 0809 	sub.w	r8, r1, r9
 80233ec:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80233f0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80233f2:	b280      	uxth	r0, r0
 80233f4:	fa1f f888 	uxth.w	r8, r8
 80233f8:	1a12      	subs	r2, r2, r0
 80233fa:	fb08 f101 	mul.w	r1, r8, r1
 80233fe:	b292      	uxth	r2, r2
 8023400:	fb02 110c 	mla	r1, r2, ip, r1
 8023404:	fb00 1104 	mla	r1, r0, r4, r1
 8023408:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802340a:	fb09 1104 	mla	r1, r9, r4, r1
 802340e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023412:	2900      	cmp	r1, #0
 8023414:	f000 80ec 	beq.w	80235f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8023418:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802341c:	d019      	beq.n	8023452 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 802341e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023422:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023426:	fb0c fa0a 	mul.w	sl, ip, sl
 802342a:	fb0c fc03 	mul.w	ip, ip, r3
 802342e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023432:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023436:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802343a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802343e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023442:	4453      	add	r3, sl
 8023444:	0a3f      	lsrs	r7, r7, #8
 8023446:	0a1b      	lsrs	r3, r3, #8
 8023448:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802344c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023450:	433b      	orrs	r3, r7
 8023452:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023454:	2cff      	cmp	r4, #255	; 0xff
 8023456:	d020      	beq.n	802349a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 8023458:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802345a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802345e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023460:	4367      	muls	r7, r4
 8023462:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023464:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023468:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802346c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802346e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023472:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023476:	fb04 fa0a 	mul.w	sl, r4, sl
 802347a:	44bc      	add	ip, r7
 802347c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023480:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023484:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023488:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802348c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023490:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023494:	ea4c 040a 	orr.w	r4, ip, sl
 8023498:	940e      	str	r4, [sp, #56]	; 0x38
 802349a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802349c:	2cff      	cmp	r4, #255	; 0xff
 802349e:	d020      	beq.n	80234e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 80234a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80234a2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80234a6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80234a8:	4367      	muls	r7, r4
 80234aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80234ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80234b0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80234b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80234b6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80234ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234be:	fb04 fa0a 	mul.w	sl, r4, sl
 80234c2:	44bc      	add	ip, r7
 80234c4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80234c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80234cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80234d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80234d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80234dc:	ea4c 040a 	orr.w	r4, ip, sl
 80234e0:	9409      	str	r4, [sp, #36]	; 0x24
 80234e2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80234e4:	2cff      	cmp	r4, #255	; 0xff
 80234e6:	d020      	beq.n	802352a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 80234e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80234ea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80234ee:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80234f0:	4367      	muls	r7, r4
 80234f2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80234f4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80234f8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80234fc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80234fe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023502:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023506:	fb04 fa0a 	mul.w	sl, r4, sl
 802350a:	44bc      	add	ip, r7
 802350c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023510:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023514:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023518:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802351c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023520:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023524:	ea4c 040a 	orr.w	r4, ip, sl
 8023528:	940f      	str	r4, [sp, #60]	; 0x3c
 802352a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802352c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023530:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023534:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023538:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802353a:	fb08 f707 	mul.w	r7, r8, r7
 802353e:	fb02 770c 	mla	r7, r2, ip, r7
 8023542:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023546:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023548:	fb00 770c 	mla	r7, r0, ip, r7
 802354c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023550:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023552:	fb09 770c 	mla	r7, r9, ip, r7
 8023556:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802355a:	fb08 f80c 	mul.w	r8, r8, ip
 802355e:	0a3f      	lsrs	r7, r7, #8
 8023560:	fb02 8303 	mla	r3, r2, r3, r8
 8023564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023566:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802356a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802356e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023570:	fb00 330a 	mla	r3, r0, sl, r3
 8023574:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023578:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802357a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802357e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023580:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023584:	434b      	muls	r3, r1
 8023586:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802358a:	1c59      	adds	r1, r3, #1
 802358c:	ea47 070c 	orr.w	r7, r7, ip
 8023590:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023594:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8023598:	b2fa      	uxtb	r2, r7
 802359a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802359e:	fb12 f200 	smulbb	r2, r2, r0
 80235a2:	b2c9      	uxtb	r1, r1
 80235a4:	fb03 2301 	mla	r3, r3, r1, r2
 80235a8:	b29b      	uxth	r3, r3
 80235aa:	1c5a      	adds	r2, r3, #1
 80235ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80235b0:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80235b4:	fb12 f201 	smulbb	r2, r2, r1
 80235b8:	121b      	asrs	r3, r3, #8
 80235ba:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80235be:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80235c2:	0c3f      	lsrs	r7, r7, #16
 80235c4:	fb03 2300 	mla	r3, r3, r0, r2
 80235c8:	b29b      	uxth	r3, r3
 80235ca:	1c5a      	adds	r2, r3, #1
 80235cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80235d0:	121b      	asrs	r3, r3, #8
 80235d2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80235d6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80235da:	fb13 f101 	smulbb	r1, r3, r1
 80235de:	fb07 1700 	mla	r7, r7, r0, r1
 80235e2:	b2bf      	uxth	r7, r7
 80235e4:	1c79      	adds	r1, r7, #1
 80235e6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80235ea:	123f      	asrs	r7, r7, #8
 80235ec:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80235f0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80235f2:	f10e 0e03 	add.w	lr, lr, #3
 80235f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80235fa:	441d      	add	r5, r3
 80235fc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80235fe:	441e      	add	r6, r3
 8023600:	e64e      	b.n	80232a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8023602:	2800      	cmp	r0, #0
 8023604:	f43f aee8 	beq.w	80233d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8023608:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 802360c:	9209      	str	r2, [sp, #36]	; 0x24
 802360e:	0e12      	lsrs	r2, r2, #24
 8023610:	9212      	str	r2, [sp, #72]	; 0x48
 8023612:	e6e1      	b.n	80233d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8023614:	b01d      	add	sp, #116	; 0x74
 8023616:	ecbd 8b08 	vpop	{d8-d11}
 802361a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023620 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8023620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023624:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8023628:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802362c:	fb04 5603 	mla	r6, r4, r3, r5
 8023630:	2c00      	cmp	r4, #0
 8023632:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8023636:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802363a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802363e:	db36      	blt.n	80236ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8023640:	45a6      	cmp	lr, r4
 8023642:	dd34      	ble.n	80236ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8023644:	2d00      	cmp	r5, #0
 8023646:	db30      	blt.n	80236aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8023648:	42ab      	cmp	r3, r5
 802364a:	dd2e      	ble.n	80236aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 802364c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8023650:	1c6e      	adds	r6, r5, #1
 8023652:	d42f      	bmi.n	80236b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8023654:	42b3      	cmp	r3, r6
 8023656:	dd2d      	ble.n	80236b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8023658:	b370      	cbz	r0, 80236b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 802365a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802365e:	3401      	adds	r4, #1
 8023660:	d42e      	bmi.n	80236c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8023662:	45a6      	cmp	lr, r4
 8023664:	dd2c      	ble.n	80236c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8023666:	b377      	cbz	r7, 80236c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 8023668:	2d00      	cmp	r5, #0
 802366a:	db27      	blt.n	80236bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 802366c:	42ab      	cmp	r3, r5
 802366e:	dd25      	ble.n	80236bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8023670:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8023674:	3501      	adds	r5, #1
 8023676:	d429      	bmi.n	80236cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8023678:	42ab      	cmp	r3, r5
 802367a:	dd27      	ble.n	80236cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 802367c:	b340      	cbz	r0, 80236d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 802367e:	3301      	adds	r3, #1
 8023680:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8023684:	280f      	cmp	r0, #15
 8023686:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802368a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802368e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023692:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8023696:	d801      	bhi.n	802369c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 8023698:	2f0f      	cmp	r7, #15
 802369a:	d91b      	bls.n	80236d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 802369c:	4b7e      	ldr	r3, [pc, #504]	; (8023898 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 802369e:	f240 1157 	movw	r1, #343	; 0x157
 80236a2:	4a7e      	ldr	r2, [pc, #504]	; (802389c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 80236a4:	487e      	ldr	r0, [pc, #504]	; (80238a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 80236a6:	f003 f9a3 	bl	80269f0 <__assert_func>
 80236aa:	2200      	movs	r2, #0
 80236ac:	e7d0      	b.n	8023650 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 80236ae:	2600      	movs	r6, #0
 80236b0:	4632      	mov	r2, r6
 80236b2:	e7d4      	b.n	802365e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 80236b4:	2600      	movs	r6, #0
 80236b6:	e7d2      	b.n	802365e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 80236b8:	4606      	mov	r6, r0
 80236ba:	e7d0      	b.n	802365e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 80236bc:	2400      	movs	r4, #0
 80236be:	e7d9      	b.n	8023674 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 80236c0:	2300      	movs	r3, #0
 80236c2:	461c      	mov	r4, r3
 80236c4:	e7de      	b.n	8023684 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80236c6:	463b      	mov	r3, r7
 80236c8:	463c      	mov	r4, r7
 80236ca:	e7db      	b.n	8023684 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80236cc:	2300      	movs	r3, #0
 80236ce:	e7d9      	b.n	8023684 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80236d0:	4603      	mov	r3, r0
 80236d2:	e7d7      	b.n	8023684 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80236d4:	b280      	uxth	r0, r0
 80236d6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80236da:	b2bf      	uxth	r7, r7
 80236dc:	fb00 fe07 	mul.w	lr, r0, r7
 80236e0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80236e4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80236e8:	eba0 0c0e 	sub.w	ip, r0, lr
 80236ec:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80236f0:	b2bf      	uxth	r7, r7
 80236f2:	fa1f fc8c 	uxth.w	ip, ip
 80236f6:	eba0 0507 	sub.w	r5, r0, r7
 80236fa:	fb0c f00a 	mul.w	r0, ip, sl
 80236fe:	b2ad      	uxth	r5, r5
 8023700:	fb05 000b 	mla	r0, r5, fp, r0
 8023704:	fb07 0009 	mla	r0, r7, r9, r0
 8023708:	fb0e 0008 	mla	r0, lr, r8, r0
 802370c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023710:	9001      	str	r0, [sp, #4]
 8023712:	d018      	beq.n	8023746 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 8023714:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8023718:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802371c:	fb0b f000 	mul.w	r0, fp, r0
 8023720:	fb0b fb02 	mul.w	fp, fp, r2
 8023724:	0a02      	lsrs	r2, r0, #8
 8023726:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802372a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802372e:	4402      	add	r2, r0
 8023730:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8023734:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8023738:	0a12      	lsrs	r2, r2, #8
 802373a:	0a00      	lsrs	r0, r0, #8
 802373c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023740:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023744:	4302      	orrs	r2, r0
 8023746:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802374a:	d01a      	beq.n	8023782 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 802374c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8023750:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023754:	fb0a f000 	mul.w	r0, sl, r0
 8023758:	fb0a fa06 	mul.w	sl, sl, r6
 802375c:	0a06      	lsrs	r6, r0, #8
 802375e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8023762:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023766:	4406      	add	r6, r0
 8023768:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802376c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8023770:	0a36      	lsrs	r6, r6, #8
 8023772:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023776:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802377a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802377e:	ea46 060a 	orr.w	r6, r6, sl
 8023782:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023786:	d01b      	beq.n	80237c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 8023788:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802378c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023790:	fb09 fa0a 	mul.w	sl, r9, sl
 8023794:	fb09 f004 	mul.w	r0, r9, r4
 8023798:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802379c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80237a0:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80237a4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80237a8:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80237ac:	4454      	add	r4, sl
 80237ae:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80237b2:	0a24      	lsrs	r4, r4, #8
 80237b4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80237b8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80237bc:	ea44 0409 	orr.w	r4, r4, r9
 80237c0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80237c4:	d01b      	beq.n	80237fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 80237c6:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80237ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80237ce:	fb08 f909 	mul.w	r9, r8, r9
 80237d2:	fb08 f003 	mul.w	r0, r8, r3
 80237d6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80237da:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80237de:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80237e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80237e6:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80237ea:	444b      	add	r3, r9
 80237ec:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80237f0:	0a1b      	lsrs	r3, r3, #8
 80237f2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80237f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80237fa:	ea43 0308 	orr.w	r3, r3, r8
 80237fe:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8023802:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023806:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 802380a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802380e:	fb0c f000 	mul.w	r0, ip, r0
 8023812:	fb0c f606 	mul.w	r6, ip, r6
 8023816:	fb05 0808 	mla	r8, r5, r8, r0
 802381a:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 802381e:	fb05 6502 	mla	r5, r5, r2, r6
 8023822:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023826:	fb07 8800 	mla	r8, r7, r0, r8
 802382a:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 802382e:	fb07 5704 	mla	r7, r7, r4, r5
 8023832:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023836:	fb0e 8000 	mla	r0, lr, r0, r8
 802383a:	780a      	ldrb	r2, [r1, #0]
 802383c:	fb0e 7e03 	mla	lr, lr, r3, r7
 8023840:	9b01      	ldr	r3, [sp, #4]
 8023842:	0a00      	lsrs	r0, r0, #8
 8023844:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023848:	43db      	mvns	r3, r3
 802384a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802384e:	b2db      	uxtb	r3, r3
 8023850:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023854:	ea40 0e0e 	orr.w	lr, r0, lr
 8023858:	fb02 f003 	mul.w	r0, r2, r3
 802385c:	1c42      	adds	r2, r0, #1
 802385e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023862:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8023866:	700a      	strb	r2, [r1, #0]
 8023868:	784a      	ldrb	r2, [r1, #1]
 802386a:	435a      	muls	r2, r3
 802386c:	1c50      	adds	r0, r2, #1
 802386e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023872:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8023876:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802387a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802387e:	704a      	strb	r2, [r1, #1]
 8023880:	788a      	ldrb	r2, [r1, #2]
 8023882:	4353      	muls	r3, r2
 8023884:	1c5a      	adds	r2, r3, #1
 8023886:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802388a:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 802388e:	f881 e002 	strb.w	lr, [r1, #2]
 8023892:	b003      	add	sp, #12
 8023894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023898:	0802eac7 	.word	0x0802eac7
 802389c:	0802f02f 	.word	0x0802f02f
 80238a0:	0802eb90 	.word	0x0802eb90

080238a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80238a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238a8:	ed2d 8b08 	vpush	{d8-d11}
 80238ac:	b099      	sub	sp, #100	; 0x64
 80238ae:	eeb0 aa40 	vmov.f32	s20, s0
 80238b2:	eef0 9a60 	vmov.f32	s19, s1
 80238b6:	9017      	str	r0, [sp, #92]	; 0x5c
 80238b8:	eeb0 9a41 	vmov.f32	s18, s2
 80238bc:	9306      	str	r3, [sp, #24]
 80238be:	eeb0 8a62 	vmov.f32	s16, s5
 80238c2:	eef0 8a43 	vmov.f32	s17, s6
 80238c6:	eef0 ba44 	vmov.f32	s23, s8
 80238ca:	eeb0 ba64 	vmov.f32	s22, s9
 80238ce:	eef0 aa45 	vmov.f32	s21, s10
 80238d2:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 80238d6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80238d8:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80238dc:	6850      	ldr	r0, [r2, #4]
 80238de:	6812      	ldr	r2, [r2, #0]
 80238e0:	fb00 1303 	mla	r3, r0, r3, r1
 80238e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80238e8:	18d3      	adds	r3, r2, r3
 80238ea:	9309      	str	r3, [sp, #36]	; 0x24
 80238ec:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80238ee:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 80238f2:	681b      	ldr	r3, [r3, #0]
 80238f4:	930e      	str	r3, [sp, #56]	; 0x38
 80238f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80238f8:	2b00      	cmp	r3, #0
 80238fa:	dc03      	bgt.n	8023904 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80238fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80238fe:	2b00      	cmp	r3, #0
 8023900:	f340 8360 	ble.w	8023fc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8023904:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023906:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802390a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802390e:	1e48      	subs	r0, r1, #1
 8023910:	1e57      	subs	r7, r2, #1
 8023912:	9b06      	ldr	r3, [sp, #24]
 8023914:	2b00      	cmp	r3, #0
 8023916:	f340 817b 	ble.w	8023c10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802391a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802391e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023922:	d406      	bmi.n	8023932 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023924:	4584      	cmp	ip, r0
 8023926:	da04      	bge.n	8023932 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023928:	2b00      	cmp	r3, #0
 802392a:	db02      	blt.n	8023932 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802392c:	42bb      	cmp	r3, r7
 802392e:	f2c0 8170 	blt.w	8023c12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023932:	f11c 0c01 	adds.w	ip, ip, #1
 8023936:	f100 8160 	bmi.w	8023bfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802393a:	4561      	cmp	r1, ip
 802393c:	f2c0 815d 	blt.w	8023bfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8023940:	3301      	adds	r3, #1
 8023942:	f100 815a 	bmi.w	8023bfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8023946:	429a      	cmp	r2, r3
 8023948:	f2c0 8157 	blt.w	8023bfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802394c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8023950:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023952:	f1b8 0f00 	cmp.w	r8, #0
 8023956:	f340 8179 	ble.w	8023c4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 802395a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 802395c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023960:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023962:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023966:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802396a:	142a      	asrs	r2, r5, #16
 802396c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023970:	689b      	ldr	r3, [r3, #8]
 8023972:	f100 81be 	bmi.w	8023cf2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023976:	f103 39ff 	add.w	r9, r3, #4294967295
 802397a:	454a      	cmp	r2, r9
 802397c:	f280 81b9 	bge.w	8023cf2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023980:	f1bc 0f00 	cmp.w	ip, #0
 8023984:	f2c0 81b5 	blt.w	8023cf2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023988:	f10e 39ff 	add.w	r9, lr, #4294967295
 802398c:	45cc      	cmp	ip, r9
 802398e:	f280 81b0 	bge.w	8023cf2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023992:	b21b      	sxth	r3, r3
 8023994:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023996:	fb0c 2203 	mla	r2, ip, r3, r2
 802399a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 802399e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80239a2:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80239a6:	2900      	cmp	r1, #0
 80239a8:	f000 8197 	beq.w	8023cda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 80239ac:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80239b0:	940a      	str	r4, [sp, #40]	; 0x28
 80239b2:	0e24      	lsrs	r4, r4, #24
 80239b4:	9411      	str	r4, [sp, #68]	; 0x44
 80239b6:	b180      	cbz	r0, 80239da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80239b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80239bc:	3b01      	subs	r3, #1
 80239be:	009b      	lsls	r3, r3, #2
 80239c0:	3304      	adds	r3, #4
 80239c2:	eb09 0c03 	add.w	ip, r9, r3
 80239c6:	f859 3003 	ldr.w	r3, [r9, r3]
 80239ca:	9307      	str	r3, [sp, #28]
 80239cc:	0e1b      	lsrs	r3, r3, #24
 80239ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80239d0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80239d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80239d6:	0e1b      	lsrs	r3, r3, #24
 80239d8:	9312      	str	r3, [sp, #72]	; 0x48
 80239da:	b289      	uxth	r1, r1
 80239dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80239de:	b280      	uxth	r0, r0
 80239e0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80239e2:	fb01 fa00 	mul.w	sl, r1, r0
 80239e6:	0109      	lsls	r1, r1, #4
 80239e8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80239ec:	eba1 090a 	sub.w	r9, r1, sl
 80239f0:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80239f4:	b280      	uxth	r0, r0
 80239f6:	fa1f f989 	uxth.w	r9, r9
 80239fa:	1a09      	subs	r1, r1, r0
 80239fc:	fb09 f303 	mul.w	r3, r9, r3
 8023a00:	b289      	uxth	r1, r1
 8023a02:	fb01 330e 	mla	r3, r1, lr, r3
 8023a06:	fb00 3304 	mla	r3, r0, r4, r3
 8023a0a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023a0c:	fb0a 3304 	mla	r3, sl, r4, r3
 8023a10:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023a14:	2b00      	cmp	r3, #0
 8023a16:	f000 80e8 	beq.w	8023bea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8023a1a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023a1e:	d01b      	beq.n	8023a58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023a20:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8023a24:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023a28:	fb0e fb0b 	mul.w	fp, lr, fp
 8023a2c:	fb0e fe02 	mul.w	lr, lr, r2
 8023a30:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8023a34:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023a38:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023a3c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023a40:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023a44:	445a      	add	r2, fp
 8023a46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023a4a:	0a12      	lsrs	r2, r2, #8
 8023a4c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023a50:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023a54:	ea42 020c 	orr.w	r2, r2, ip
 8023a58:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023a5a:	2cff      	cmp	r4, #255	; 0xff
 8023a5c:	d021      	beq.n	8023aa2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8023a5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023a60:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023a64:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023a66:	fb04 fc0c 	mul.w	ip, r4, ip
 8023a6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023a6c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023a70:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8023a74:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023a76:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023a7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023a7e:	fb04 fb0b 	mul.w	fp, r4, fp
 8023a82:	44e6      	add	lr, ip
 8023a84:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8023a88:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023a8c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023a90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023a94:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023a98:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023a9c:	ea4e 040b 	orr.w	r4, lr, fp
 8023aa0:	940a      	str	r4, [sp, #40]	; 0x28
 8023aa2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023aa4:	2cff      	cmp	r4, #255	; 0xff
 8023aa6:	d021      	beq.n	8023aec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8023aa8:	9c07      	ldr	r4, [sp, #28]
 8023aaa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023aae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023ab0:	fb04 fc0c 	mul.w	ip, r4, ip
 8023ab4:	9c07      	ldr	r4, [sp, #28]
 8023ab6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023aba:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8023abe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023ac0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023ac4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ac8:	fb04 fb0b 	mul.w	fp, r4, fp
 8023acc:	44e6      	add	lr, ip
 8023ace:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8023ad2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023ad6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023ada:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ade:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023ae2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023ae6:	ea4e 040b 	orr.w	r4, lr, fp
 8023aea:	9407      	str	r4, [sp, #28]
 8023aec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023aee:	2cff      	cmp	r4, #255	; 0xff
 8023af0:	d021      	beq.n	8023b36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8023af2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023af4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023af8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023afa:	fb04 fc0c 	mul.w	ip, r4, ip
 8023afe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023b00:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023b04:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8023b08:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023b0a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023b0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b12:	fb04 fb0b 	mul.w	fp, r4, fp
 8023b16:	44e6      	add	lr, ip
 8023b18:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8023b1c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023b20:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023b24:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b28:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023b2c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023b30:	ea4e 040b 	orr.w	r4, lr, fp
 8023b34:	940b      	str	r4, [sp, #44]	; 0x2c
 8023b36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023b38:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023b3c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023b40:	2bff      	cmp	r3, #255	; 0xff
 8023b42:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023b46:	9c07      	ldr	r4, [sp, #28]
 8023b48:	fb09 fc0c 	mul.w	ip, r9, ip
 8023b4c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023b50:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023b54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023b56:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023b5a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023b5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023b60:	fb0a cc0e 	mla	ip, sl, lr, ip
 8023b64:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023b68:	fb09 f90e 	mul.w	r9, r9, lr
 8023b6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023b70:	fb01 9202 	mla	r2, r1, r2, r9
 8023b74:	9907      	ldr	r1, [sp, #28]
 8023b76:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023b7a:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8023b7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023b80:	fb00 220b 	mla	r2, r0, fp, r2
 8023b84:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023b88:	fb0a 2a00 	mla	sl, sl, r0, r2
 8023b8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023b90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023b94:	ea4c 0c0a 	orr.w	ip, ip, sl
 8023b98:	fa5f f08c 	uxtb.w	r0, ip
 8023b9c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8023ba0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023ba4:	f000 80a2 	beq.w	8023cec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8023ba8:	43db      	mvns	r3, r3
 8023baa:	783a      	ldrb	r2, [r7, #0]
 8023bac:	f897 a002 	ldrb.w	sl, [r7, #2]
 8023bb0:	b2db      	uxtb	r3, r3
 8023bb2:	fb02 fe03 	mul.w	lr, r2, r3
 8023bb6:	fb0a fa03 	mul.w	sl, sl, r3
 8023bba:	f10e 0201 	add.w	r2, lr, #1
 8023bbe:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8023bc2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023bc6:	703a      	strb	r2, [r7, #0]
 8023bc8:	787a      	ldrb	r2, [r7, #1]
 8023bca:	fb02 f003 	mul.w	r0, r2, r3
 8023bce:	f10a 0301 	add.w	r3, sl, #1
 8023bd2:	1c42      	adds	r2, r0, #1
 8023bd4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8023bd8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023bdc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023be0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023be4:	707a      	strb	r2, [r7, #1]
 8023be6:	f887 c002 	strb.w	ip, [r7, #2]
 8023bea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023bec:	3703      	adds	r7, #3
 8023bee:	f108 38ff 	add.w	r8, r8, #4294967295
 8023bf2:	441d      	add	r5, r3
 8023bf4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023bf6:	441e      	add	r6, r3
 8023bf8:	e6ab      	b.n	8023952 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023bfa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023bfc:	441d      	add	r5, r3
 8023bfe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023c00:	441e      	add	r6, r3
 8023c02:	9b06      	ldr	r3, [sp, #24]
 8023c04:	3b01      	subs	r3, #1
 8023c06:	9306      	str	r3, [sp, #24]
 8023c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c0a:	3303      	adds	r3, #3
 8023c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8023c0e:	e680      	b.n	8023912 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023c10:	d024      	beq.n	8023c5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8023c12:	9b06      	ldr	r3, [sp, #24]
 8023c14:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8023c16:	3b01      	subs	r3, #1
 8023c18:	fb00 5003 	mla	r0, r0, r3, r5
 8023c1c:	1400      	asrs	r0, r0, #16
 8023c1e:	f53f ae95 	bmi.w	802394c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023c22:	3901      	subs	r1, #1
 8023c24:	4288      	cmp	r0, r1
 8023c26:	f6bf ae91 	bge.w	802394c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023c2a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8023c2c:	fb01 6303 	mla	r3, r1, r3, r6
 8023c30:	141b      	asrs	r3, r3, #16
 8023c32:	f53f ae8b 	bmi.w	802394c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023c36:	3a01      	subs	r2, #1
 8023c38:	4293      	cmp	r3, r2
 8023c3a:	f6bf ae87 	bge.w	802394c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c40:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023c44:	1cdf      	adds	r7, r3, #3
 8023c46:	f1bb 0f00 	cmp.w	fp, #0
 8023c4a:	dc6e      	bgt.n	8023d2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8023c4c:	9b06      	ldr	r3, [sp, #24]
 8023c4e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023c58:	4423      	add	r3, r4
 8023c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8023c5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023c5e:	2b00      	cmp	r3, #0
 8023c60:	f340 81b0 	ble.w	8023fc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8023c64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023c68:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023c6a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023c6e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023c72:	eef0 6a48 	vmov.f32	s13, s16
 8023c76:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023c7a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023c7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023c82:	ee16 5a90 	vmov	r5, s13
 8023c86:	eef0 6a68 	vmov.f32	s13, s17
 8023c8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023c8e:	ee16 6a90 	vmov	r6, s13
 8023c92:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023c96:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023c9a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023c9e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023ca2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023ca6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023caa:	ee18 2a10 	vmov	r2, s16
 8023cae:	eeb0 8a47 	vmov.f32	s16, s14
 8023cb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8023cb6:	ee18 2a90 	vmov	r2, s17
 8023cba:	932d      	str	r3, [sp, #180]	; 0xb4
 8023cbc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023cbe:	eef0 8a67 	vmov.f32	s17, s15
 8023cc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8023cc6:	932e      	str	r3, [sp, #184]	; 0xb8
 8023cc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023cca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023ccc:	3b01      	subs	r3, #1
 8023cce:	9315      	str	r3, [sp, #84]	; 0x54
 8023cd0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023cd2:	bf08      	it	eq
 8023cd4:	4613      	moveq	r3, r2
 8023cd6:	9306      	str	r3, [sp, #24]
 8023cd8:	e60d      	b.n	80238f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023cda:	2800      	cmp	r0, #0
 8023cdc:	f43f ae7d 	beq.w	80239da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8023ce0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8023ce4:	9307      	str	r3, [sp, #28]
 8023ce6:	0e1b      	lsrs	r3, r3, #24
 8023ce8:	930f      	str	r3, [sp, #60]	; 0x3c
 8023cea:	e676      	b.n	80239da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8023cec:	7038      	strb	r0, [r7, #0]
 8023cee:	7079      	strb	r1, [r7, #1]
 8023cf0:	e779      	b.n	8023be6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023cf2:	f112 0901 	adds.w	r9, r2, #1
 8023cf6:	f53f af78 	bmi.w	8023bea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8023cfa:	454b      	cmp	r3, r9
 8023cfc:	f6ff af75 	blt.w	8023bea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8023d00:	f11c 0901 	adds.w	r9, ip, #1
 8023d04:	f53f af71 	bmi.w	8023bea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8023d08:	45ce      	cmp	lr, r9
 8023d0a:	f6ff af6e 	blt.w	8023bea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8023d0e:	b21b      	sxth	r3, r3
 8023d10:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8023d14:	fa0f f28e 	sxth.w	r2, lr
 8023d18:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8023d1c:	9200      	str	r2, [sp, #0]
 8023d1e:	4639      	mov	r1, r7
 8023d20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023d22:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8023d24:	f7ff fc7c 	bl	8023620 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8023d28:	e75f      	b.n	8023bea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8023d2a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023d2c:	1429      	asrs	r1, r5, #16
 8023d2e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023d30:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023d34:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8023d38:	1433      	asrs	r3, r6, #16
 8023d3a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023d3e:	fb0c 1303 	mla	r3, ip, r3, r1
 8023d42:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023d44:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8023d48:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8023d4c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023d50:	2a00      	cmp	r2, #0
 8023d52:	f000 8129 	beq.w	8023fa8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8023d56:	684c      	ldr	r4, [r1, #4]
 8023d58:	940c      	str	r4, [sp, #48]	; 0x30
 8023d5a:	0e24      	lsrs	r4, r4, #24
 8023d5c:	9413      	str	r4, [sp, #76]	; 0x4c
 8023d5e:	b198      	cbz	r0, 8023d88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023d60:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8023d64:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023d68:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8023d6c:	f10c 0c04 	add.w	ip, ip, #4
 8023d70:	eb01 080c 	add.w	r8, r1, ip
 8023d74:	f851 100c 	ldr.w	r1, [r1, ip]
 8023d78:	9108      	str	r1, [sp, #32]
 8023d7a:	0e09      	lsrs	r1, r1, #24
 8023d7c:	9110      	str	r1, [sp, #64]	; 0x40
 8023d7e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8023d82:	910d      	str	r1, [sp, #52]	; 0x34
 8023d84:	0e09      	lsrs	r1, r1, #24
 8023d86:	9114      	str	r1, [sp, #80]	; 0x50
 8023d88:	b292      	uxth	r2, r2
 8023d8a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023d8c:	b280      	uxth	r0, r0
 8023d8e:	fb02 f900 	mul.w	r9, r2, r0
 8023d92:	0112      	lsls	r2, r2, #4
 8023d94:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023d98:	eba2 0809 	sub.w	r8, r2, r9
 8023d9c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023da0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023da2:	b280      	uxth	r0, r0
 8023da4:	fa1f f888 	uxth.w	r8, r8
 8023da8:	1a09      	subs	r1, r1, r0
 8023daa:	fb08 f202 	mul.w	r2, r8, r2
 8023dae:	b289      	uxth	r1, r1
 8023db0:	fb01 220e 	mla	r2, r1, lr, r2
 8023db4:	fb00 2204 	mla	r2, r0, r4, r2
 8023db8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023dba:	fb09 2204 	mla	r2, r9, r4, r2
 8023dbe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023dc2:	2a00      	cmp	r2, #0
 8023dc4:	f000 80e8 	beq.w	8023f98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8023dc8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023dcc:	d01b      	beq.n	8023e06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 8023dce:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023dd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023dd6:	fb0e fa0a 	mul.w	sl, lr, sl
 8023dda:	fb0e fe03 	mul.w	lr, lr, r3
 8023dde:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023de2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023de6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023dea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023dee:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023df2:	4453      	add	r3, sl
 8023df4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023df8:	0a1b      	lsrs	r3, r3, #8
 8023dfa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023dfe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023e02:	ea43 030c 	orr.w	r3, r3, ip
 8023e06:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023e08:	2cff      	cmp	r4, #255	; 0xff
 8023e0a:	d021      	beq.n	8023e50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 8023e0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023e0e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023e12:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023e14:	fb04 fc0c 	mul.w	ip, r4, ip
 8023e18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023e1a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023e1e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023e22:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023e24:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023e28:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e2c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023e30:	44e6      	add	lr, ip
 8023e32:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023e36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e3a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023e3e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e46:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023e4a:	ea4e 040a 	orr.w	r4, lr, sl
 8023e4e:	940c      	str	r4, [sp, #48]	; 0x30
 8023e50:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023e52:	2cff      	cmp	r4, #255	; 0xff
 8023e54:	d021      	beq.n	8023e9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8023e56:	9c08      	ldr	r4, [sp, #32]
 8023e58:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023e5c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023e5e:	fb04 fc0c 	mul.w	ip, r4, ip
 8023e62:	9c08      	ldr	r4, [sp, #32]
 8023e64:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023e68:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023e6a:	fb04 fa0e 	mul.w	sl, r4, lr
 8023e6e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023e72:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023e76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e7a:	44e6      	add	lr, ip
 8023e7c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023e80:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023e84:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e8c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023e94:	ea4e 040a 	orr.w	r4, lr, sl
 8023e98:	9408      	str	r4, [sp, #32]
 8023e9a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023e9c:	2cff      	cmp	r4, #255	; 0xff
 8023e9e:	d021      	beq.n	8023ee4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 8023ea0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023ea2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023ea6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023ea8:	fb04 fc0c 	mul.w	ip, r4, ip
 8023eac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023eae:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023eb2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023eb6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023eb8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023ebc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ec0:	fb04 fa0a 	mul.w	sl, r4, sl
 8023ec4:	44e6      	add	lr, ip
 8023ec6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023eca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023ece:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023ed2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ed6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023eda:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023ede:	ea4e 040a 	orr.w	r4, lr, sl
 8023ee2:	940d      	str	r4, [sp, #52]	; 0x34
 8023ee4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023ee6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023eea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023eee:	2aff      	cmp	r2, #255	; 0xff
 8023ef0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023ef4:	9c08      	ldr	r4, [sp, #32]
 8023ef6:	fb08 fc0c 	mul.w	ip, r8, ip
 8023efa:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023efe:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023f02:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023f04:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023f08:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023f0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023f0e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023f12:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023f16:	fb08 f80e 	mul.w	r8, r8, lr
 8023f1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f1e:	fb01 8303 	mla	r3, r1, r3, r8
 8023f22:	9908      	ldr	r1, [sp, #32]
 8023f24:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f28:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023f2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023f2e:	fb00 330a 	mla	r3, r0, sl, r3
 8023f32:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8023f36:	fb09 3e0e 	mla	lr, r9, lr, r3
 8023f3a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023f3e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023f42:	ea4c 0c0e 	orr.w	ip, ip, lr
 8023f46:	fa5f f08c 	uxtb.w	r0, ip
 8023f4a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8023f4e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023f52:	d032      	beq.n	8023fba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8023f54:	43d2      	mvns	r2, r2
 8023f56:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8023f5a:	b2d2      	uxtb	r2, r2
 8023f5c:	fb0e fe02 	mul.w	lr, lr, r2
 8023f60:	f10e 0301 	add.w	r3, lr, #1
 8023f64:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8023f68:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023f6c:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8023f70:	4350      	muls	r0, r2
 8023f72:	f807 3c03 	strb.w	r3, [r7, #-3]
 8023f76:	1c43      	adds	r3, r0, #1
 8023f78:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023f7c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023f80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8023f84:	4353      	muls	r3, r2
 8023f86:	f807 1c02 	strb.w	r1, [r7, #-2]
 8023f8a:	1c5a      	adds	r2, r3, #1
 8023f8c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023f90:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8023f94:	f807 cc01 	strb.w	ip, [r7, #-1]
 8023f98:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023f9a:	3703      	adds	r7, #3
 8023f9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023fa0:	441d      	add	r5, r3
 8023fa2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023fa4:	441e      	add	r6, r3
 8023fa6:	e64e      	b.n	8023c46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8023fa8:	2800      	cmp	r0, #0
 8023faa:	f43f aeed 	beq.w	8023d88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023fae:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8023fb2:	9108      	str	r1, [sp, #32]
 8023fb4:	0e09      	lsrs	r1, r1, #24
 8023fb6:	9110      	str	r1, [sp, #64]	; 0x40
 8023fb8:	e6e6      	b.n	8023d88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023fba:	f807 0c03 	strb.w	r0, [r7, #-3]
 8023fbe:	f807 1c02 	strb.w	r1, [r7, #-2]
 8023fc2:	e7e7      	b.n	8023f94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 8023fc4:	b019      	add	sp, #100	; 0x64
 8023fc6:	ecbd 8b08 	vpop	{d8-d11}
 8023fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023fd0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8023fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fd4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8023fd8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023fdc:	2800      	cmp	r0, #0
 8023fde:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023fe2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8023fe6:	fb0c 0e03 	mla	lr, ip, r3, r0
 8023fea:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8023fee:	db6b      	blt.n	80240c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023ff0:	4580      	cmp	r8, r0
 8023ff2:	dd69      	ble.n	80240c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023ff4:	f1bc 0f00 	cmp.w	ip, #0
 8023ff8:	db66      	blt.n	80240c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023ffa:	45e1      	cmp	r9, ip
 8023ffc:	dd64      	ble.n	80240c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023ffe:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024002:	f01e 0f01 	tst.w	lr, #1
 8024006:	5d16      	ldrb	r6, [r2, r4]
 8024008:	bf0c      	ite	eq
 802400a:	f006 060f 	andeq.w	r6, r6, #15
 802400e:	1136      	asrne	r6, r6, #4
 8024010:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024014:	b2f6      	uxtb	r6, r6
 8024016:	f110 0a01 	adds.w	sl, r0, #1
 802401a:	d457      	bmi.n	80240cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802401c:	45d0      	cmp	r8, sl
 802401e:	dd55      	ble.n	80240cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8024020:	f1bc 0f00 	cmp.w	ip, #0
 8024024:	db52      	blt.n	80240cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8024026:	45e1      	cmp	r9, ip
 8024028:	dd50      	ble.n	80240cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802402a:	2f00      	cmp	r7, #0
 802402c:	f000 80ac 	beq.w	8024188 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8024030:	f10e 0b01 	add.w	fp, lr, #1
 8024034:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8024038:	f01b 0f01 	tst.w	fp, #1
 802403c:	5d14      	ldrb	r4, [r2, r4]
 802403e:	bf0c      	ite	eq
 8024040:	f004 040f 	andeq.w	r4, r4, #15
 8024044:	1124      	asrne	r4, r4, #4
 8024046:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802404a:	b2e4      	uxtb	r4, r4
 802404c:	2d00      	cmp	r5, #0
 802404e:	f000 8096 	beq.w	802417e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8024052:	2800      	cmp	r0, #0
 8024054:	f10c 0c01 	add.w	ip, ip, #1
 8024058:	db3c      	blt.n	80240d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802405a:	4580      	cmp	r8, r0
 802405c:	dd3a      	ble.n	80240d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802405e:	f1bc 0f00 	cmp.w	ip, #0
 8024062:	db37      	blt.n	80240d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024064:	45e1      	cmp	r9, ip
 8024066:	dd35      	ble.n	80240d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024068:	eb03 0b0e 	add.w	fp, r3, lr
 802406c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8024070:	f01b 0f01 	tst.w	fp, #1
 8024074:	5c10      	ldrb	r0, [r2, r0]
 8024076:	bf0c      	ite	eq
 8024078:	f000 000f 	andeq.w	r0, r0, #15
 802407c:	1100      	asrne	r0, r0, #4
 802407e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024082:	b2c0      	uxtb	r0, r0
 8024084:	f1ba 0f00 	cmp.w	sl, #0
 8024088:	db26      	blt.n	80240d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802408a:	45d0      	cmp	r8, sl
 802408c:	dd24      	ble.n	80240d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802408e:	f1bc 0f00 	cmp.w	ip, #0
 8024092:	db21      	blt.n	80240d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8024094:	45e1      	cmp	r9, ip
 8024096:	dd1f      	ble.n	80240d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8024098:	b307      	cbz	r7, 80240dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 802409a:	3301      	adds	r3, #1
 802409c:	449e      	add	lr, r3
 802409e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80240a2:	f01e 0f01 	tst.w	lr, #1
 80240a6:	5cd3      	ldrb	r3, [r2, r3]
 80240a8:	bf0c      	ite	eq
 80240aa:	f003 030f 	andeq.w	r3, r3, #15
 80240ae:	111b      	asrne	r3, r3, #4
 80240b0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80240b4:	b2db      	uxtb	r3, r3
 80240b6:	2f0f      	cmp	r7, #15
 80240b8:	d911      	bls.n	80240de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 80240ba:	4b35      	ldr	r3, [pc, #212]	; (8024190 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 80240bc:	f240 1157 	movw	r1, #343	; 0x157
 80240c0:	4a34      	ldr	r2, [pc, #208]	; (8024194 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 80240c2:	4835      	ldr	r0, [pc, #212]	; (8024198 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 80240c4:	f002 fc94 	bl	80269f0 <__assert_func>
 80240c8:	2600      	movs	r6, #0
 80240ca:	e7a4      	b.n	8024016 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 80240cc:	2400      	movs	r4, #0
 80240ce:	e7bd      	b.n	802404c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 80240d0:	463c      	mov	r4, r7
 80240d2:	e7be      	b.n	8024052 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 80240d4:	2000      	movs	r0, #0
 80240d6:	e7d5      	b.n	8024084 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 80240d8:	2300      	movs	r3, #0
 80240da:	e7ec      	b.n	80240b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 80240dc:	463b      	mov	r3, r7
 80240de:	2d0f      	cmp	r5, #15
 80240e0:	d8eb      	bhi.n	80240ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80240e2:	b2bf      	uxth	r7, r7
 80240e4:	b2ad      	uxth	r5, r5
 80240e6:	fb07 f205 	mul.w	r2, r7, r5
 80240ea:	013f      	lsls	r7, r7, #4
 80240ec:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80240f0:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80240f4:	1abf      	subs	r7, r7, r2
 80240f6:	b2ad      	uxth	r5, r5
 80240f8:	b2bf      	uxth	r7, r7
 80240fa:	ebac 0c05 	sub.w	ip, ip, r5
 80240fe:	437c      	muls	r4, r7
 8024100:	fa1f fc8c 	uxth.w	ip, ip
 8024104:	fb06 440c 	mla	r4, r6, ip, r4
 8024108:	fb05 4400 	mla	r4, r5, r0, r4
 802410c:	fb02 4203 	mla	r2, r2, r3, r4
 8024110:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024114:	b38a      	cbz	r2, 802417a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8024116:	4b21      	ldr	r3, [pc, #132]	; (802419c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8024118:	681c      	ldr	r4, [r3, #0]
 802411a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 802411e:	b2e5      	uxtb	r5, r4
 8024120:	4353      	muls	r3, r2
 8024122:	1c5a      	adds	r2, r3, #1
 8024124:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024128:	1212      	asrs	r2, r2, #8
 802412a:	b290      	uxth	r0, r2
 802412c:	43d2      	mvns	r2, r2
 802412e:	fb15 f500 	smulbb	r5, r5, r0
 8024132:	b2d3      	uxtb	r3, r2
 8024134:	780a      	ldrb	r2, [r1, #0]
 8024136:	fb02 5203 	mla	r2, r2, r3, r5
 802413a:	b292      	uxth	r2, r2
 802413c:	1c55      	adds	r5, r2, #1
 802413e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8024142:	784d      	ldrb	r5, [r1, #1]
 8024144:	fb15 f503 	smulbb	r5, r5, r3
 8024148:	1212      	asrs	r2, r2, #8
 802414a:	700a      	strb	r2, [r1, #0]
 802414c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8024150:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8024154:	fb02 5200 	mla	r2, r2, r0, r5
 8024158:	b292      	uxth	r2, r2
 802415a:	1c55      	adds	r5, r2, #1
 802415c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8024160:	1212      	asrs	r2, r2, #8
 8024162:	704a      	strb	r2, [r1, #1]
 8024164:	788a      	ldrb	r2, [r1, #2]
 8024166:	fb12 f303 	smulbb	r3, r2, r3
 802416a:	fb04 3300 	mla	r3, r4, r0, r3
 802416e:	b29b      	uxth	r3, r3
 8024170:	1c5a      	adds	r2, r3, #1
 8024172:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024176:	121b      	asrs	r3, r3, #8
 8024178:	708b      	strb	r3, [r1, #2]
 802417a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802417e:	2f0f      	cmp	r7, #15
 8024180:	d89b      	bhi.n	80240ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8024182:	462b      	mov	r3, r5
 8024184:	4628      	mov	r0, r5
 8024186:	e7ac      	b.n	80240e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8024188:	2d00      	cmp	r5, #0
 802418a:	d1a1      	bne.n	80240d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 802418c:	462c      	mov	r4, r5
 802418e:	e7f8      	b.n	8024182 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8024190:	0802eac7 	.word	0x0802eac7
 8024194:	0802f02f 	.word	0x0802f02f
 8024198:	0802eb90 	.word	0x0802eb90
 802419c:	200567a4 	.word	0x200567a4

080241a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80241a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241a4:	ed2d 8b08 	vpush	{d8-d11}
 80241a8:	b097      	sub	sp, #92	; 0x5c
 80241aa:	eeb0 aa40 	vmov.f32	s20, s0
 80241ae:	eef0 9a60 	vmov.f32	s19, s1
 80241b2:	9214      	str	r2, [sp, #80]	; 0x50
 80241b4:	eeb0 9a41 	vmov.f32	s18, s2
 80241b8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80241ba:	eeb0 8a62 	vmov.f32	s16, s5
 80241be:	9309      	str	r3, [sp, #36]	; 0x24
 80241c0:	eef0 8a43 	vmov.f32	s17, s6
 80241c4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80241c8:	eef0 ba44 	vmov.f32	s23, s8
 80241cc:	9015      	str	r0, [sp, #84]	; 0x54
 80241ce:	eeb0 ba64 	vmov.f32	s22, s9
 80241d2:	6850      	ldr	r0, [r2, #4]
 80241d4:	eef0 aa45 	vmov.f32	s21, s10
 80241d8:	910c      	str	r1, [sp, #48]	; 0x30
 80241da:	930e      	str	r3, [sp, #56]	; 0x38
 80241dc:	6812      	ldr	r2, [r2, #0]
 80241de:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80241e2:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 80241e6:	fb00 1303 	mla	r3, r0, r3, r1
 80241ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80241ee:	eb02 0a03 	add.w	sl, r2, r3
 80241f2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80241f4:	689b      	ldr	r3, [r3, #8]
 80241f6:	3301      	adds	r3, #1
 80241f8:	f023 0301 	bic.w	r3, r3, #1
 80241fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80241fe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024200:	681f      	ldr	r7, [r3, #0]
 8024202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024204:	2b00      	cmp	r3, #0
 8024206:	dc03      	bgt.n	8024210 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024208:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802420a:	2b00      	cmp	r3, #0
 802420c:	f340 8247 	ble.w	802469e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8024210:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024212:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024216:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802421a:	1e48      	subs	r0, r1, #1
 802421c:	f102 3cff 	add.w	ip, r2, #4294967295
 8024220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024222:	2b00      	cmp	r3, #0
 8024224:	f340 80e5 	ble.w	80243f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8024228:	ea5f 4e25 	movs.w	lr, r5, asr #16
 802422c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024230:	d406      	bmi.n	8024240 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024232:	4586      	cmp	lr, r0
 8024234:	da04      	bge.n	8024240 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024236:	2b00      	cmp	r3, #0
 8024238:	db02      	blt.n	8024240 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802423a:	4563      	cmp	r3, ip
 802423c:	f2c0 80da 	blt.w	80243f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8024240:	f11e 0e01 	adds.w	lr, lr, #1
 8024244:	f100 80cb 	bmi.w	80243de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8024248:	4571      	cmp	r1, lr
 802424a:	f2c0 80c8 	blt.w	80243de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 802424e:	3301      	adds	r3, #1
 8024250:	f100 80c5 	bmi.w	80243de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8024254:	429a      	cmp	r2, r3
 8024256:	f2c0 80c2 	blt.w	80243de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 802425a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802425c:	46d0      	mov	r8, sl
 802425e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8024262:	930d      	str	r3, [sp, #52]	; 0x34
 8024264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024266:	2b00      	cmp	r3, #0
 8024268:	f340 80e3 	ble.w	8024432 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802426c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802426e:	1430      	asrs	r0, r6, #16
 8024270:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8024274:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024278:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802427c:	142b      	asrs	r3, r5, #16
 802427e:	f100 812e 	bmi.w	80244de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024282:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024286:	455b      	cmp	r3, fp
 8024288:	f280 8129 	bge.w	80244de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802428c:	2800      	cmp	r0, #0
 802428e:	f2c0 8126 	blt.w	80244de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024292:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024296:	4558      	cmp	r0, fp
 8024298:	f280 8121 	bge.w	80244de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802429c:	fb00 3309 	mla	r3, r0, r9, r3
 80242a0:	0858      	lsrs	r0, r3, #1
 80242a2:	07dc      	lsls	r4, r3, #31
 80242a4:	f817 c000 	ldrb.w	ip, [r7, r0]
 80242a8:	bf54      	ite	pl
 80242aa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80242ae:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80242b2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80242b6:	fa5f fc8c 	uxtb.w	ip, ip
 80242ba:	2a00      	cmp	r2, #0
 80242bc:	f000 80fe 	beq.w	80244bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80242c0:	1c58      	adds	r0, r3, #1
 80242c2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80242c6:	07c0      	lsls	r0, r0, #31
 80242c8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80242cc:	bf54      	ite	pl
 80242ce:	f00e 0e0f 	andpl.w	lr, lr, #15
 80242d2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80242d6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80242da:	fa5f f08e 	uxtb.w	r0, lr
 80242de:	9010      	str	r0, [sp, #64]	; 0x40
 80242e0:	b1d9      	cbz	r1, 802431a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80242e2:	444b      	add	r3, r9
 80242e4:	0858      	lsrs	r0, r3, #1
 80242e6:	07dc      	lsls	r4, r3, #31
 80242e8:	f103 0301 	add.w	r3, r3, #1
 80242ec:	5c38      	ldrb	r0, [r7, r0]
 80242ee:	bf54      	ite	pl
 80242f0:	f000 000f 	andpl.w	r0, r0, #15
 80242f4:	1100      	asrmi	r0, r0, #4
 80242f6:	07dc      	lsls	r4, r3, #31
 80242f8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80242fc:	b2c0      	uxtb	r0, r0
 80242fe:	900a      	str	r0, [sp, #40]	; 0x28
 8024300:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8024304:	f817 e000 	ldrb.w	lr, [r7, r0]
 8024308:	bf54      	ite	pl
 802430a:	f00e 030f 	andpl.w	r3, lr, #15
 802430e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8024312:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024316:	b2db      	uxtb	r3, r3
 8024318:	9311      	str	r3, [sp, #68]	; 0x44
 802431a:	b292      	uxth	r2, r2
 802431c:	b289      	uxth	r1, r1
 802431e:	0113      	lsls	r3, r2, #4
 8024320:	fb02 f001 	mul.w	r0, r2, r1
 8024324:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024326:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802432a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 802432e:	1a1b      	subs	r3, r3, r0
 8024330:	b289      	uxth	r1, r1
 8024332:	b29b      	uxth	r3, r3
 8024334:	ebae 0e01 	sub.w	lr, lr, r1
 8024338:	4353      	muls	r3, r2
 802433a:	fa1f fe8e 	uxth.w	lr, lr
 802433e:	fb0c 320e 	mla	r2, ip, lr, r3
 8024342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024344:	fb01 2203 	mla	r2, r1, r3, r2
 8024348:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802434a:	fb00 2203 	mla	r2, r0, r3, r2
 802434e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024352:	2a00      	cmp	r2, #0
 8024354:	d039      	beq.n	80243ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8024356:	4bc7      	ldr	r3, [pc, #796]	; (8024674 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8024358:	6819      	ldr	r1, [r3, #0]
 802435a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802435c:	fa5f fc81 	uxtb.w	ip, r1
 8024360:	435a      	muls	r2, r3
 8024362:	1c53      	adds	r3, r2, #1
 8024364:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024368:	1212      	asrs	r2, r2, #8
 802436a:	b290      	uxth	r0, r2
 802436c:	43d2      	mvns	r2, r2
 802436e:	fb1c fc00 	smulbb	ip, ip, r0
 8024372:	b2d3      	uxtb	r3, r2
 8024374:	f898 2000 	ldrb.w	r2, [r8]
 8024378:	fb02 c203 	mla	r2, r2, r3, ip
 802437c:	b292      	uxth	r2, r2
 802437e:	f102 0c01 	add.w	ip, r2, #1
 8024382:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024386:	f898 c001 	ldrb.w	ip, [r8, #1]
 802438a:	fb1c fc03 	smulbb	ip, ip, r3
 802438e:	1212      	asrs	r2, r2, #8
 8024390:	f888 2000 	strb.w	r2, [r8]
 8024394:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8024398:	f3c1 4107 	ubfx	r1, r1, #16, #8
 802439c:	fb02 c200 	mla	r2, r2, r0, ip
 80243a0:	b292      	uxth	r2, r2
 80243a2:	f102 0c01 	add.w	ip, r2, #1
 80243a6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80243aa:	1212      	asrs	r2, r2, #8
 80243ac:	f888 2001 	strb.w	r2, [r8, #1]
 80243b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80243b4:	fb12 f303 	smulbb	r3, r2, r3
 80243b8:	fb01 3300 	mla	r3, r1, r0, r3
 80243bc:	b29b      	uxth	r3, r3
 80243be:	1c5a      	adds	r2, r3, #1
 80243c0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80243c4:	121b      	asrs	r3, r3, #8
 80243c6:	f888 3002 	strb.w	r3, [r8, #2]
 80243ca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80243cc:	f108 0803 	add.w	r8, r8, #3
 80243d0:	441d      	add	r5, r3
 80243d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80243d4:	441e      	add	r6, r3
 80243d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80243d8:	3b01      	subs	r3, #1
 80243da:	930d      	str	r3, [sp, #52]	; 0x34
 80243dc:	e742      	b.n	8024264 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 80243de:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80243e0:	f10a 0a03 	add.w	sl, sl, #3
 80243e4:	441d      	add	r5, r3
 80243e6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80243e8:	441e      	add	r6, r3
 80243ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243ec:	3b01      	subs	r3, #1
 80243ee:	9309      	str	r3, [sp, #36]	; 0x24
 80243f0:	e716      	b.n	8024220 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80243f2:	d024      	beq.n	802443e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80243f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243f6:	982b      	ldr	r0, [sp, #172]	; 0xac
 80243f8:	3b01      	subs	r3, #1
 80243fa:	fb00 5003 	mla	r0, r0, r3, r5
 80243fe:	1400      	asrs	r0, r0, #16
 8024400:	f53f af2b 	bmi.w	802425a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024404:	3901      	subs	r1, #1
 8024406:	4288      	cmp	r0, r1
 8024408:	f6bf af27 	bge.w	802425a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802440c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802440e:	fb01 6303 	mla	r3, r1, r3, r6
 8024412:	141b      	asrs	r3, r3, #16
 8024414:	f53f af21 	bmi.w	802425a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024418:	3a01      	subs	r2, #1
 802441a:	4293      	cmp	r3, r2
 802441c:	f6bf af1d 	bge.w	802425a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024420:	f10a 0e03 	add.w	lr, sl, #3
 8024424:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8024428:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802442c:	f1b8 0f00 	cmp.w	r8, #0
 8024430:	dc76      	bgt.n	8024520 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8024432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024434:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024438:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802443c:	44a2      	add	sl, r4
 802443e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024440:	2b00      	cmp	r3, #0
 8024442:	f340 812c 	ble.w	802469e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8024446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802444a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802444c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024450:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024454:	eef0 6a48 	vmov.f32	s13, s16
 8024458:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802445c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024460:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024464:	ee16 5a90 	vmov	r5, s13
 8024468:	eef0 6a68 	vmov.f32	s13, s17
 802446c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024470:	ee16 6a90 	vmov	r6, s13
 8024474:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024478:	ee69 7a27 	vmul.f32	s15, s18, s15
 802447c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024480:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024484:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024488:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802448c:	ee18 2a10 	vmov	r2, s16
 8024490:	eeb0 8a47 	vmov.f32	s16, s14
 8024494:	fb92 f3f3 	sdiv	r3, r2, r3
 8024498:	ee18 2a90 	vmov	r2, s17
 802449c:	932b      	str	r3, [sp, #172]	; 0xac
 802449e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80244a0:	eef0 8a67 	vmov.f32	s17, s15
 80244a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80244a8:	932c      	str	r3, [sp, #176]	; 0xb0
 80244aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80244ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80244ae:	3b01      	subs	r3, #1
 80244b0:	930c      	str	r3, [sp, #48]	; 0x30
 80244b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80244b4:	bf08      	it	eq
 80244b6:	4613      	moveq	r3, r2
 80244b8:	9309      	str	r3, [sp, #36]	; 0x24
 80244ba:	e6a2      	b.n	8024202 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80244bc:	2900      	cmp	r1, #0
 80244be:	f43f af2c 	beq.w	802431a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80244c2:	eb09 0003 	add.w	r0, r9, r3
 80244c6:	0843      	lsrs	r3, r0, #1
 80244c8:	07c0      	lsls	r0, r0, #31
 80244ca:	5cfb      	ldrb	r3, [r7, r3]
 80244cc:	bf54      	ite	pl
 80244ce:	f003 030f 	andpl.w	r3, r3, #15
 80244d2:	111b      	asrmi	r3, r3, #4
 80244d4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80244d8:	b2db      	uxtb	r3, r3
 80244da:	930a      	str	r3, [sp, #40]	; 0x28
 80244dc:	e71d      	b.n	802431a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80244de:	f113 0b01 	adds.w	fp, r3, #1
 80244e2:	f53f af72 	bmi.w	80243ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80244e6:	45dc      	cmp	ip, fp
 80244e8:	f6ff af6f 	blt.w	80243ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80244ec:	f110 0b01 	adds.w	fp, r0, #1
 80244f0:	f53f af6b 	bmi.w	80243ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80244f4:	45de      	cmp	lr, fp
 80244f6:	f6ff af68 	blt.w	80243ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80244fa:	9302      	str	r3, [sp, #8]
 80244fc:	fa0f f38e 	sxth.w	r3, lr
 8024500:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024502:	9301      	str	r3, [sp, #4]
 8024504:	fa0f f38c 	sxth.w	r3, ip
 8024508:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802450c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024510:	9300      	str	r3, [sp, #0]
 8024512:	463a      	mov	r2, r7
 8024514:	464b      	mov	r3, r9
 8024516:	4641      	mov	r1, r8
 8024518:	9815      	ldr	r0, [sp, #84]	; 0x54
 802451a:	f7ff fd59 	bl	8023fd0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802451e:	e754      	b.n	80243ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8024520:	142a      	asrs	r2, r5, #16
 8024522:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024526:	1433      	asrs	r3, r6, #16
 8024528:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802452c:	fb09 2303 	mla	r3, r9, r3, r2
 8024530:	085a      	lsrs	r2, r3, #1
 8024532:	07dc      	lsls	r4, r3, #31
 8024534:	5cba      	ldrb	r2, [r7, r2]
 8024536:	bf54      	ite	pl
 8024538:	f002 020f 	andpl.w	r2, r2, #15
 802453c:	1112      	asrmi	r2, r2, #4
 802453e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024542:	b2d2      	uxtb	r2, r2
 8024544:	2900      	cmp	r1, #0
 8024546:	f000 8097 	beq.w	8024678 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802454a:	f103 0b01 	add.w	fp, r3, #1
 802454e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8024552:	f01b 0f01 	tst.w	fp, #1
 8024556:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802455a:	bf0c      	ite	eq
 802455c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024560:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8024564:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024568:	fa5f f48c 	uxtb.w	r4, ip
 802456c:	9412      	str	r4, [sp, #72]	; 0x48
 802456e:	b300      	cbz	r0, 80245b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8024570:	444b      	add	r3, r9
 8024572:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024576:	07dc      	lsls	r4, r3, #31
 8024578:	f103 0301 	add.w	r3, r3, #1
 802457c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024580:	bf54      	ite	pl
 8024582:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024586:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802458a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802458e:	fa5f f48c 	uxtb.w	r4, ip
 8024592:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024596:	940b      	str	r4, [sp, #44]	; 0x2c
 8024598:	07dc      	lsls	r4, r3, #31
 802459a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802459e:	bf54      	ite	pl
 80245a0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80245a4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80245a8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80245ac:	fa5f f38c 	uxtb.w	r3, ip
 80245b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80245b2:	b289      	uxth	r1, r1
 80245b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80245b6:	b280      	uxth	r0, r0
 80245b8:	fb01 f300 	mul.w	r3, r1, r0
 80245bc:	0109      	lsls	r1, r1, #4
 80245be:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80245c2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80245c6:	1ac9      	subs	r1, r1, r3
 80245c8:	b280      	uxth	r0, r0
 80245ca:	b289      	uxth	r1, r1
 80245cc:	ebac 0c00 	sub.w	ip, ip, r0
 80245d0:	4361      	muls	r1, r4
 80245d2:	fa1f fc8c 	uxth.w	ip, ip
 80245d6:	fb02 120c 	mla	r2, r2, ip, r1
 80245da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80245dc:	fb00 2001 	mla	r0, r0, r1, r2
 80245e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80245e2:	fb03 0302 	mla	r3, r3, r2, r0
 80245e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80245ea:	2b00      	cmp	r3, #0
 80245ec:	d039      	beq.n	8024662 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80245ee:	4a21      	ldr	r2, [pc, #132]	; (8024674 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 80245f0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80245f4:	6810      	ldr	r0, [r2, #0]
 80245f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80245f8:	fa5f fc80 	uxtb.w	ip, r0
 80245fc:	4353      	muls	r3, r2
 80245fe:	1c5a      	adds	r2, r3, #1
 8024600:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024604:	121b      	asrs	r3, r3, #8
 8024606:	b29a      	uxth	r2, r3
 8024608:	43db      	mvns	r3, r3
 802460a:	fb1c fc02 	smulbb	ip, ip, r2
 802460e:	b2db      	uxtb	r3, r3
 8024610:	fb01 c103 	mla	r1, r1, r3, ip
 8024614:	b289      	uxth	r1, r1
 8024616:	f101 0c01 	add.w	ip, r1, #1
 802461a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802461e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8024622:	fb1c fc03 	smulbb	ip, ip, r3
 8024626:	1209      	asrs	r1, r1, #8
 8024628:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802462c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8024630:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8024634:	fb01 c102 	mla	r1, r1, r2, ip
 8024638:	b289      	uxth	r1, r1
 802463a:	f101 0c01 	add.w	ip, r1, #1
 802463e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8024642:	1209      	asrs	r1, r1, #8
 8024644:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8024648:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802464c:	fb11 f303 	smulbb	r3, r1, r3
 8024650:	fb00 3002 	mla	r0, r0, r2, r3
 8024654:	b280      	uxth	r0, r0
 8024656:	1c42      	adds	r2, r0, #1
 8024658:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802465c:	1200      	asrs	r0, r0, #8
 802465e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8024662:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024664:	f10e 0e03 	add.w	lr, lr, #3
 8024668:	f108 38ff 	add.w	r8, r8, #4294967295
 802466c:	441d      	add	r5, r3
 802466e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024670:	441e      	add	r6, r3
 8024672:	e6db      	b.n	802442c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8024674:	200567a4 	.word	0x200567a4
 8024678:	2800      	cmp	r0, #0
 802467a:	d09a      	beq.n	80245b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802467c:	444b      	add	r3, r9
 802467e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024682:	07db      	lsls	r3, r3, #31
 8024684:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024688:	bf54      	ite	pl
 802468a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802468e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024692:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024696:	fa5f f38c 	uxtb.w	r3, ip
 802469a:	930b      	str	r3, [sp, #44]	; 0x2c
 802469c:	e789      	b.n	80245b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802469e:	b017      	add	sp, #92	; 0x5c
 80246a0:	ecbd 8b08 	vpop	{d8-d11}
 80246a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080246a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80246a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246ac:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80246b0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80246b4:	2800      	cmp	r0, #0
 80246b6:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80246ba:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80246be:	fb0c 0e03 	mla	lr, ip, r3, r0
 80246c2:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80246c6:	db6b      	blt.n	80247a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80246c8:	4580      	cmp	r8, r0
 80246ca:	dd69      	ble.n	80247a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80246cc:	f1bc 0f00 	cmp.w	ip, #0
 80246d0:	db66      	blt.n	80247a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80246d2:	45e1      	cmp	r9, ip
 80246d4:	dd64      	ble.n	80247a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80246d6:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80246da:	f01e 0f01 	tst.w	lr, #1
 80246de:	5d16      	ldrb	r6, [r2, r4]
 80246e0:	bf0c      	ite	eq
 80246e2:	f006 060f 	andeq.w	r6, r6, #15
 80246e6:	1136      	asrne	r6, r6, #4
 80246e8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80246ec:	b2f6      	uxtb	r6, r6
 80246ee:	f110 0a01 	adds.w	sl, r0, #1
 80246f2:	d457      	bmi.n	80247a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80246f4:	45d0      	cmp	r8, sl
 80246f6:	dd55      	ble.n	80247a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80246f8:	f1bc 0f00 	cmp.w	ip, #0
 80246fc:	db52      	blt.n	80247a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80246fe:	45e1      	cmp	r9, ip
 8024700:	dd50      	ble.n	80247a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024702:	2f00      	cmp	r7, #0
 8024704:	f000 80a5 	beq.w	8024852 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8024708:	f10e 0b01 	add.w	fp, lr, #1
 802470c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8024710:	f01b 0f01 	tst.w	fp, #1
 8024714:	5d14      	ldrb	r4, [r2, r4]
 8024716:	bf0c      	ite	eq
 8024718:	f004 040f 	andeq.w	r4, r4, #15
 802471c:	1124      	asrne	r4, r4, #4
 802471e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024722:	b2e4      	uxtb	r4, r4
 8024724:	2d00      	cmp	r5, #0
 8024726:	f000 808f 	beq.w	8024848 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 802472a:	2800      	cmp	r0, #0
 802472c:	f10c 0c01 	add.w	ip, ip, #1
 8024730:	db3c      	blt.n	80247ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024732:	4580      	cmp	r8, r0
 8024734:	dd3a      	ble.n	80247ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024736:	f1bc 0f00 	cmp.w	ip, #0
 802473a:	db37      	blt.n	80247ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802473c:	45e1      	cmp	r9, ip
 802473e:	dd35      	ble.n	80247ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024740:	eb03 0b0e 	add.w	fp, r3, lr
 8024744:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8024748:	f01b 0f01 	tst.w	fp, #1
 802474c:	5c10      	ldrb	r0, [r2, r0]
 802474e:	bf0c      	ite	eq
 8024750:	f000 000f 	andeq.w	r0, r0, #15
 8024754:	1100      	asrne	r0, r0, #4
 8024756:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802475a:	b2c0      	uxtb	r0, r0
 802475c:	f1ba 0f00 	cmp.w	sl, #0
 8024760:	db26      	blt.n	80247b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024762:	45d0      	cmp	r8, sl
 8024764:	dd24      	ble.n	80247b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024766:	f1bc 0f00 	cmp.w	ip, #0
 802476a:	db21      	blt.n	80247b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802476c:	45e1      	cmp	r9, ip
 802476e:	dd1f      	ble.n	80247b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024770:	b307      	cbz	r7, 80247b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8024772:	3301      	adds	r3, #1
 8024774:	449e      	add	lr, r3
 8024776:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802477a:	f01e 0f01 	tst.w	lr, #1
 802477e:	5cd3      	ldrb	r3, [r2, r3]
 8024780:	bf0c      	ite	eq
 8024782:	f003 030f 	andeq.w	r3, r3, #15
 8024786:	111b      	asrne	r3, r3, #4
 8024788:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802478c:	b2db      	uxtb	r3, r3
 802478e:	2f0f      	cmp	r7, #15
 8024790:	d911      	bls.n	80247b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8024792:	4b32      	ldr	r3, [pc, #200]	; (802485c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8024794:	f240 1157 	movw	r1, #343	; 0x157
 8024798:	4a31      	ldr	r2, [pc, #196]	; (8024860 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 802479a:	4832      	ldr	r0, [pc, #200]	; (8024864 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 802479c:	f002 f928 	bl	80269f0 <__assert_func>
 80247a0:	2600      	movs	r6, #0
 80247a2:	e7a4      	b.n	80246ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 80247a4:	2400      	movs	r4, #0
 80247a6:	e7bd      	b.n	8024724 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 80247a8:	463c      	mov	r4, r7
 80247aa:	e7be      	b.n	802472a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 80247ac:	2000      	movs	r0, #0
 80247ae:	e7d5      	b.n	802475c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 80247b0:	2300      	movs	r3, #0
 80247b2:	e7ec      	b.n	802478e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 80247b4:	463b      	mov	r3, r7
 80247b6:	2d0f      	cmp	r5, #15
 80247b8:	d8eb      	bhi.n	8024792 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80247ba:	b2bf      	uxth	r7, r7
 80247bc:	b2ad      	uxth	r5, r5
 80247be:	fb07 f205 	mul.w	r2, r7, r5
 80247c2:	013f      	lsls	r7, r7, #4
 80247c4:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80247c8:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80247cc:	1abf      	subs	r7, r7, r2
 80247ce:	b2ad      	uxth	r5, r5
 80247d0:	b2bf      	uxth	r7, r7
 80247d2:	ebac 0c05 	sub.w	ip, ip, r5
 80247d6:	437c      	muls	r4, r7
 80247d8:	fa1f fc8c 	uxth.w	ip, ip
 80247dc:	fb06 440c 	mla	r4, r6, ip, r4
 80247e0:	fb05 4400 	mla	r4, r5, r0, r4
 80247e4:	fb02 4303 	mla	r3, r2, r3, r4
 80247e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80247ec:	b353      	cbz	r3, 8024844 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 80247ee:	4a1e      	ldr	r2, [pc, #120]	; (8024868 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 80247f0:	7808      	ldrb	r0, [r1, #0]
 80247f2:	6814      	ldr	r4, [r2, #0]
 80247f4:	b29a      	uxth	r2, r3
 80247f6:	43db      	mvns	r3, r3
 80247f8:	b2e5      	uxtb	r5, r4
 80247fa:	b2db      	uxtb	r3, r3
 80247fc:	fb15 f502 	smulbb	r5, r5, r2
 8024800:	fb00 5003 	mla	r0, r0, r3, r5
 8024804:	b280      	uxth	r0, r0
 8024806:	1c45      	adds	r5, r0, #1
 8024808:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802480c:	784d      	ldrb	r5, [r1, #1]
 802480e:	fb15 f503 	smulbb	r5, r5, r3
 8024812:	1200      	asrs	r0, r0, #8
 8024814:	7008      	strb	r0, [r1, #0]
 8024816:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802481a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802481e:	fb00 5002 	mla	r0, r0, r2, r5
 8024822:	b280      	uxth	r0, r0
 8024824:	1c45      	adds	r5, r0, #1
 8024826:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802482a:	1200      	asrs	r0, r0, #8
 802482c:	7048      	strb	r0, [r1, #1]
 802482e:	7888      	ldrb	r0, [r1, #2]
 8024830:	fb10 f303 	smulbb	r3, r0, r3
 8024834:	fb04 3202 	mla	r2, r4, r2, r3
 8024838:	b292      	uxth	r2, r2
 802483a:	1c53      	adds	r3, r2, #1
 802483c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024840:	1212      	asrs	r2, r2, #8
 8024842:	708a      	strb	r2, [r1, #2]
 8024844:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024848:	2f0f      	cmp	r7, #15
 802484a:	d8a2      	bhi.n	8024792 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802484c:	462b      	mov	r3, r5
 802484e:	4628      	mov	r0, r5
 8024850:	e7b3      	b.n	80247ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8024852:	2d00      	cmp	r5, #0
 8024854:	d1a8      	bne.n	80247a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8024856:	462c      	mov	r4, r5
 8024858:	e7f8      	b.n	802484c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 802485a:	bf00      	nop
 802485c:	0802eac7 	.word	0x0802eac7
 8024860:	0802f02f 	.word	0x0802f02f
 8024864:	0802eb90 	.word	0x0802eb90
 8024868:	200567a4 	.word	0x200567a4

0802486c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024870:	ed2d 8b08 	vpush	{d8-d11}
 8024874:	b093      	sub	sp, #76	; 0x4c
 8024876:	461c      	mov	r4, r3
 8024878:	eeb0 aa40 	vmov.f32	s20, s0
 802487c:	920c      	str	r2, [sp, #48]	; 0x30
 802487e:	eef0 9a60 	vmov.f32	s19, s1
 8024882:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024884:	eeb0 9a41 	vmov.f32	s18, s2
 8024888:	9011      	str	r0, [sp, #68]	; 0x44
 802488a:	eeb0 8a62 	vmov.f32	s16, s5
 802488e:	6850      	ldr	r0, [r2, #4]
 8024890:	eef0 8a43 	vmov.f32	s17, s6
 8024894:	9107      	str	r1, [sp, #28]
 8024896:	eef0 ba44 	vmov.f32	s23, s8
 802489a:	6812      	ldr	r2, [r2, #0]
 802489c:	eeb0 ba64 	vmov.f32	s22, s9
 80248a0:	eef0 aa45 	vmov.f32	s21, s10
 80248a4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80248a8:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 80248ac:	fb00 1303 	mla	r3, r0, r3, r1
 80248b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80248b4:	eb02 0b03 	add.w	fp, r2, r3
 80248b8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80248ba:	689b      	ldr	r3, [r3, #8]
 80248bc:	3301      	adds	r3, #1
 80248be:	f023 0301 	bic.w	r3, r3, #1
 80248c2:	9309      	str	r3, [sp, #36]	; 0x24
 80248c4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80248c6:	f8d3 8000 	ldr.w	r8, [r3]
 80248ca:	9b07      	ldr	r3, [sp, #28]
 80248cc:	2b00      	cmp	r3, #0
 80248ce:	dc03      	bgt.n	80248d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80248d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80248d2:	2b00      	cmp	r3, #0
 80248d4:	f340 822b 	ble.w	8024d2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80248d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80248da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80248de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80248e2:	1e48      	subs	r0, r1, #1
 80248e4:	1e57      	subs	r7, r2, #1
 80248e6:	2c00      	cmp	r4, #0
 80248e8:	f340 80d7 	ble.w	8024a9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80248ec:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80248f0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80248f4:	d406      	bmi.n	8024904 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80248f6:	4584      	cmp	ip, r0
 80248f8:	da04      	bge.n	8024904 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80248fa:	2b00      	cmp	r3, #0
 80248fc:	db02      	blt.n	8024904 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80248fe:	42bb      	cmp	r3, r7
 8024900:	f2c0 80cc 	blt.w	8024a9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8024904:	f11c 0c01 	adds.w	ip, ip, #1
 8024908:	f100 80bf 	bmi.w	8024a8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 802490c:	4561      	cmp	r1, ip
 802490e:	f2c0 80bc 	blt.w	8024a8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8024912:	3301      	adds	r3, #1
 8024914:	f100 80b9 	bmi.w	8024a8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8024918:	429a      	cmp	r2, r3
 802491a:	f2c0 80b6 	blt.w	8024a8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 802491e:	46a2      	mov	sl, r4
 8024920:	465f      	mov	r7, fp
 8024922:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024926:	f1ba 0f00 	cmp.w	sl, #0
 802492a:	f340 80d4 	ble.w	8024ad6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 802492e:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8024932:	1430      	asrs	r0, r6, #16
 8024934:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024938:	9308      	str	r3, [sp, #32]
 802493a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802493c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024940:	142b      	asrs	r3, r5, #16
 8024942:	f100 8124 	bmi.w	8024b8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024946:	f10c 32ff 	add.w	r2, ip, #4294967295
 802494a:	4293      	cmp	r3, r2
 802494c:	f280 811f 	bge.w	8024b8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024950:	2800      	cmp	r0, #0
 8024952:	f2c0 811c 	blt.w	8024b8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024956:	f10e 32ff 	add.w	r2, lr, #4294967295
 802495a:	4290      	cmp	r0, r2
 802495c:	f280 8117 	bge.w	8024b8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024960:	fb00 3309 	mla	r3, r0, r9, r3
 8024964:	0858      	lsrs	r0, r3, #1
 8024966:	07da      	lsls	r2, r3, #31
 8024968:	9a08      	ldr	r2, [sp, #32]
 802496a:	f818 c000 	ldrb.w	ip, [r8, r0]
 802496e:	bf54      	ite	pl
 8024970:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024974:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024978:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802497c:	fa5f fc8c 	uxtb.w	ip, ip
 8024980:	2a00      	cmp	r2, #0
 8024982:	f000 80ed 	beq.w	8024b60 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024986:	1c58      	adds	r0, r3, #1
 8024988:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802498c:	07c0      	lsls	r0, r0, #31
 802498e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8024992:	bf54      	ite	pl
 8024994:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024998:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802499c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80249a0:	fa5f fe8e 	uxtb.w	lr, lr
 80249a4:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80249a8:	b1c9      	cbz	r1, 80249de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 80249aa:	444b      	add	r3, r9
 80249ac:	0858      	lsrs	r0, r3, #1
 80249ae:	07da      	lsls	r2, r3, #31
 80249b0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80249b4:	bf54      	ite	pl
 80249b6:	f000 000f 	andpl.w	r0, r0, #15
 80249ba:	1100      	asrmi	r0, r0, #4
 80249bc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80249c0:	b2c0      	uxtb	r0, r0
 80249c2:	900a      	str	r0, [sp, #40]	; 0x28
 80249c4:	1c58      	adds	r0, r3, #1
 80249c6:	0843      	lsrs	r3, r0, #1
 80249c8:	07c2      	lsls	r2, r0, #31
 80249ca:	f818 3003 	ldrb.w	r3, [r8, r3]
 80249ce:	bf54      	ite	pl
 80249d0:	f003 030f 	andpl.w	r3, r3, #15
 80249d4:	111b      	asrmi	r3, r3, #4
 80249d6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80249da:	b2db      	uxtb	r3, r3
 80249dc:	930e      	str	r3, [sp, #56]	; 0x38
 80249de:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80249e2:	b289      	uxth	r1, r1
 80249e4:	fb02 f301 	mul.w	r3, r2, r1
 80249e8:	0112      	lsls	r2, r2, #4
 80249ea:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80249ee:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80249f2:	1ad2      	subs	r2, r2, r3
 80249f4:	b289      	uxth	r1, r1
 80249f6:	b292      	uxth	r2, r2
 80249f8:	1a40      	subs	r0, r0, r1
 80249fa:	fa1f fe80 	uxth.w	lr, r0
 80249fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024a00:	4342      	muls	r2, r0
 8024a02:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8024a06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024a08:	fb01 c102 	mla	r1, r1, r2, ip
 8024a0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024a0e:	fb03 1302 	mla	r3, r3, r2, r1
 8024a12:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024a16:	b383      	cbz	r3, 8024a7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024a18:	4ac7      	ldr	r2, [pc, #796]	; (8024d38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 8024a1a:	2bff      	cmp	r3, #255	; 0xff
 8024a1c:	6812      	ldr	r2, [r2, #0]
 8024a1e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8024a22:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8024a26:	b2d2      	uxtb	r2, r2
 8024a28:	f000 80ac 	beq.w	8024b84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8024a2c:	b299      	uxth	r1, r3
 8024a2e:	43db      	mvns	r3, r3
 8024a30:	f897 c000 	ldrb.w	ip, [r7]
 8024a34:	fb12 f201 	smulbb	r2, r2, r1
 8024a38:	b2db      	uxtb	r3, r3
 8024a3a:	fb10 f001 	smulbb	r0, r0, r1
 8024a3e:	fb0c 2203 	mla	r2, ip, r3, r2
 8024a42:	fb1e f101 	smulbb	r1, lr, r1
 8024a46:	b292      	uxth	r2, r2
 8024a48:	f102 0c01 	add.w	ip, r2, #1
 8024a4c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024a50:	1212      	asrs	r2, r2, #8
 8024a52:	703a      	strb	r2, [r7, #0]
 8024a54:	787a      	ldrb	r2, [r7, #1]
 8024a56:	fb02 0003 	mla	r0, r2, r3, r0
 8024a5a:	b280      	uxth	r0, r0
 8024a5c:	1c42      	adds	r2, r0, #1
 8024a5e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024a62:	78ba      	ldrb	r2, [r7, #2]
 8024a64:	fb02 1303 	mla	r3, r2, r3, r1
 8024a68:	1200      	asrs	r0, r0, #8
 8024a6a:	b29b      	uxth	r3, r3
 8024a6c:	7078      	strb	r0, [r7, #1]
 8024a6e:	f103 0e01 	add.w	lr, r3, #1
 8024a72:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8024a76:	121b      	asrs	r3, r3, #8
 8024a78:	70bb      	strb	r3, [r7, #2]
 8024a7a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024a7c:	3703      	adds	r7, #3
 8024a7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024a82:	441d      	add	r5, r3
 8024a84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a86:	441e      	add	r6, r3
 8024a88:	e74d      	b.n	8024926 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024a8a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024a8c:	3c01      	subs	r4, #1
 8024a8e:	f10b 0b03 	add.w	fp, fp, #3
 8024a92:	441d      	add	r5, r3
 8024a94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a96:	441e      	add	r6, r3
 8024a98:	e725      	b.n	80248e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024a9a:	d021      	beq.n	8024ae0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8024a9c:	1e63      	subs	r3, r4, #1
 8024a9e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024aa0:	fb00 5003 	mla	r0, r0, r3, r5
 8024aa4:	1400      	asrs	r0, r0, #16
 8024aa6:	f53f af3a 	bmi.w	802491e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024aaa:	3901      	subs	r1, #1
 8024aac:	4288      	cmp	r0, r1
 8024aae:	f6bf af36 	bge.w	802491e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024ab2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024ab4:	fb01 6303 	mla	r3, r1, r3, r6
 8024ab8:	141b      	asrs	r3, r3, #16
 8024aba:	f53f af30 	bmi.w	802491e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024abe:	3a01      	subs	r2, #1
 8024ac0:	4293      	cmp	r3, r2
 8024ac2:	f6bf af2c 	bge.w	802491e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024ac6:	f10b 0c03 	add.w	ip, fp, #3
 8024aca:	46a6      	mov	lr, r4
 8024acc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024ad0:	f1be 0f00 	cmp.w	lr, #0
 8024ad4:	dc79      	bgt.n	8024bca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8024ad6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8024ada:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024ade:	44a3      	add	fp, r4
 8024ae0:	9b07      	ldr	r3, [sp, #28]
 8024ae2:	2b00      	cmp	r3, #0
 8024ae4:	f340 8123 	ble.w	8024d2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8024ae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024aec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024aee:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024af2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024af6:	eef0 6a48 	vmov.f32	s13, s16
 8024afa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024afe:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024b02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b06:	ee16 5a90 	vmov	r5, s13
 8024b0a:	eef0 6a68 	vmov.f32	s13, s17
 8024b0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b12:	ee16 6a90 	vmov	r6, s13
 8024b16:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024b1a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024b1e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024b22:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024b26:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024b2a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024b2e:	ee18 2a10 	vmov	r2, s16
 8024b32:	eeb0 8a47 	vmov.f32	s16, s14
 8024b36:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b3a:	ee18 2a90 	vmov	r2, s17
 8024b3e:	9327      	str	r3, [sp, #156]	; 0x9c
 8024b40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024b42:	eef0 8a67 	vmov.f32	s17, s15
 8024b46:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b4a:	9328      	str	r3, [sp, #160]	; 0xa0
 8024b4c:	9b07      	ldr	r3, [sp, #28]
 8024b4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024b50:	3b01      	subs	r3, #1
 8024b52:	9307      	str	r3, [sp, #28]
 8024b54:	bf08      	it	eq
 8024b56:	4614      	moveq	r4, r2
 8024b58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024b5a:	bf18      	it	ne
 8024b5c:	461c      	movne	r4, r3
 8024b5e:	e6b4      	b.n	80248ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8024b60:	2900      	cmp	r1, #0
 8024b62:	f43f af3c 	beq.w	80249de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8024b66:	eb09 0003 	add.w	r0, r9, r3
 8024b6a:	0843      	lsrs	r3, r0, #1
 8024b6c:	07c0      	lsls	r0, r0, #31
 8024b6e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8024b72:	bf54      	ite	pl
 8024b74:	f003 030f 	andpl.w	r3, r3, #15
 8024b78:	111b      	asrmi	r3, r3, #4
 8024b7a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024b7e:	b2db      	uxtb	r3, r3
 8024b80:	930a      	str	r3, [sp, #40]	; 0x28
 8024b82:	e72c      	b.n	80249de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8024b84:	703a      	strb	r2, [r7, #0]
 8024b86:	7078      	strb	r0, [r7, #1]
 8024b88:	f887 e002 	strb.w	lr, [r7, #2]
 8024b8c:	e775      	b.n	8024a7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024b8e:	1c5a      	adds	r2, r3, #1
 8024b90:	f53f af73 	bmi.w	8024a7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024b94:	4594      	cmp	ip, r2
 8024b96:	f6ff af70 	blt.w	8024a7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024b9a:	1c42      	adds	r2, r0, #1
 8024b9c:	f53f af6d 	bmi.w	8024a7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024ba0:	4596      	cmp	lr, r2
 8024ba2:	f6ff af6a 	blt.w	8024a7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024ba6:	9302      	str	r3, [sp, #8]
 8024ba8:	fa0f f38e 	sxth.w	r3, lr
 8024bac:	9a08      	ldr	r2, [sp, #32]
 8024bae:	9301      	str	r3, [sp, #4]
 8024bb0:	fa0f f38c 	sxth.w	r3, ip
 8024bb4:	9105      	str	r1, [sp, #20]
 8024bb6:	4639      	mov	r1, r7
 8024bb8:	9300      	str	r3, [sp, #0]
 8024bba:	464b      	mov	r3, r9
 8024bbc:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024bc0:	4642      	mov	r2, r8
 8024bc2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024bc4:	f7ff fd70 	bl	80246a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8024bc8:	e757      	b.n	8024a7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024bca:	142a      	asrs	r2, r5, #16
 8024bcc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024bd0:	1433      	asrs	r3, r6, #16
 8024bd2:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8024bd6:	fb09 2303 	mla	r3, r9, r3, r2
 8024bda:	085a      	lsrs	r2, r3, #1
 8024bdc:	07d9      	lsls	r1, r3, #31
 8024bde:	f818 2002 	ldrb.w	r2, [r8, r2]
 8024be2:	bf54      	ite	pl
 8024be4:	f002 020f 	andpl.w	r2, r2, #15
 8024be8:	1112      	asrmi	r2, r2, #4
 8024bea:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024bee:	b2d2      	uxtb	r2, r2
 8024bf0:	2800      	cmp	r0, #0
 8024bf2:	f000 8085 	beq.w	8024d00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8024bf6:	f103 0a01 	add.w	sl, r3, #1
 8024bfa:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8024bfe:	f01a 0f01 	tst.w	sl, #1
 8024c02:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024c06:	bf0c      	ite	eq
 8024c08:	f001 010f 	andeq.w	r1, r1, #15
 8024c0c:	1109      	asrne	r1, r1, #4
 8024c0e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024c12:	b2c9      	uxtb	r1, r1
 8024c14:	910f      	str	r1, [sp, #60]	; 0x3c
 8024c16:	b1df      	cbz	r7, 8024c50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8024c18:	444b      	add	r3, r9
 8024c1a:	0859      	lsrs	r1, r3, #1
 8024c1c:	f013 0f01 	tst.w	r3, #1
 8024c20:	f103 0301 	add.w	r3, r3, #1
 8024c24:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024c28:	bf0c      	ite	eq
 8024c2a:	f001 010f 	andeq.w	r1, r1, #15
 8024c2e:	1109      	asrne	r1, r1, #4
 8024c30:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024c34:	b2c9      	uxtb	r1, r1
 8024c36:	910b      	str	r1, [sp, #44]	; 0x2c
 8024c38:	0859      	lsrs	r1, r3, #1
 8024c3a:	07db      	lsls	r3, r3, #31
 8024c3c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024c40:	bf54      	ite	pl
 8024c42:	f001 010f 	andpl.w	r1, r1, #15
 8024c46:	1109      	asrmi	r1, r1, #4
 8024c48:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024c4c:	b2c9      	uxtb	r1, r1
 8024c4e:	9110      	str	r1, [sp, #64]	; 0x40
 8024c50:	b280      	uxth	r0, r0
 8024c52:	b2bf      	uxth	r7, r7
 8024c54:	fb00 f307 	mul.w	r3, r0, r7
 8024c58:	0100      	lsls	r0, r0, #4
 8024c5a:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8024c5e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024c62:	1ac0      	subs	r0, r0, r3
 8024c64:	b2bf      	uxth	r7, r7
 8024c66:	b280      	uxth	r0, r0
 8024c68:	1bc9      	subs	r1, r1, r7
 8024c6a:	fa1f fa81 	uxth.w	sl, r1
 8024c6e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024c70:	4348      	muls	r0, r1
 8024c72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024c74:	fb02 020a 	mla	r2, r2, sl, r0
 8024c78:	fb07 2701 	mla	r7, r7, r1, r2
 8024c7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024c7e:	fb03 7302 	mla	r3, r3, r2, r7
 8024c82:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024c86:	b393      	cbz	r3, 8024cee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8024c88:	4a2b      	ldr	r2, [pc, #172]	; (8024d38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 8024c8a:	2bff      	cmp	r3, #255	; 0xff
 8024c8c:	6811      	ldr	r1, [r2, #0]
 8024c8e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8024c92:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8024c96:	b2c9      	uxtb	r1, r1
 8024c98:	d042      	beq.n	8024d20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024c9a:	b298      	uxth	r0, r3
 8024c9c:	43db      	mvns	r3, r3
 8024c9e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8024ca2:	fb11 f100 	smulbb	r1, r1, r0
 8024ca6:	b2db      	uxtb	r3, r3
 8024ca8:	fb17 f700 	smulbb	r7, r7, r0
 8024cac:	fb02 1103 	mla	r1, r2, r3, r1
 8024cb0:	fb1a f000 	smulbb	r0, sl, r0
 8024cb4:	b289      	uxth	r1, r1
 8024cb6:	1c4a      	adds	r2, r1, #1
 8024cb8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024cbc:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8024cc0:	fb02 7703 	mla	r7, r2, r3, r7
 8024cc4:	1209      	asrs	r1, r1, #8
 8024cc6:	b2bf      	uxth	r7, r7
 8024cc8:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8024ccc:	1c7a      	adds	r2, r7, #1
 8024cce:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8024cd2:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8024cd6:	fb02 0303 	mla	r3, r2, r3, r0
 8024cda:	123f      	asrs	r7, r7, #8
 8024cdc:	b29b      	uxth	r3, r3
 8024cde:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8024ce2:	1c5a      	adds	r2, r3, #1
 8024ce4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024ce8:	121b      	asrs	r3, r3, #8
 8024cea:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8024cee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024cf0:	f10c 0c03 	add.w	ip, ip, #3
 8024cf4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024cf8:	441d      	add	r5, r3
 8024cfa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024cfc:	441e      	add	r6, r3
 8024cfe:	e6e7      	b.n	8024ad0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8024d00:	2f00      	cmp	r7, #0
 8024d02:	d0a5      	beq.n	8024c50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8024d04:	444b      	add	r3, r9
 8024d06:	0859      	lsrs	r1, r3, #1
 8024d08:	07db      	lsls	r3, r3, #31
 8024d0a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024d0e:	bf54      	ite	pl
 8024d10:	f001 010f 	andpl.w	r1, r1, #15
 8024d14:	1109      	asrmi	r1, r1, #4
 8024d16:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024d1a:	b2c9      	uxtb	r1, r1
 8024d1c:	910b      	str	r1, [sp, #44]	; 0x2c
 8024d1e:	e797      	b.n	8024c50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8024d20:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8024d24:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8024d28:	f80c ac01 	strb.w	sl, [ip, #-1]
 8024d2c:	e7df      	b.n	8024cee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8024d2e:	b013      	add	sp, #76	; 0x4c
 8024d30:	ecbd 8b08 	vpop	{d8-d11}
 8024d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d38:	200567a4 	.word	0x200567a4

08024d3c <CRC_Lock>:
 8024d3c:	4a20      	ldr	r2, [pc, #128]	; (8024dc0 <CRC_Lock+0x84>)
 8024d3e:	b530      	push	{r4, r5, lr}
 8024d40:	6813      	ldr	r3, [r2, #0]
 8024d42:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024d46:	f24c 2540 	movw	r5, #49728	; 0xc240
 8024d4a:	f023 0301 	bic.w	r3, r3, #1
 8024d4e:	6013      	str	r3, [r2, #0]
 8024d50:	4b1c      	ldr	r3, [pc, #112]	; (8024dc4 <CRC_Lock+0x88>)
 8024d52:	681a      	ldr	r2, [r3, #0]
 8024d54:	4022      	ands	r2, r4
 8024d56:	42aa      	cmp	r2, r5
 8024d58:	d005      	beq.n	8024d66 <CRC_Lock+0x2a>
 8024d5a:	681b      	ldr	r3, [r3, #0]
 8024d5c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8024d60:	4023      	ands	r3, r4
 8024d62:	4293      	cmp	r3, r2
 8024d64:	d124      	bne.n	8024db0 <CRC_Lock+0x74>
 8024d66:	4b18      	ldr	r3, [pc, #96]	; (8024dc8 <CRC_Lock+0x8c>)
 8024d68:	681b      	ldr	r3, [r3, #0]
 8024d6a:	bb0b      	cbnz	r3, 8024db0 <CRC_Lock+0x74>
 8024d6c:	4b17      	ldr	r3, [pc, #92]	; (8024dcc <CRC_Lock+0x90>)
 8024d6e:	681a      	ldr	r2, [r3, #0]
 8024d70:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024d74:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8024d78:	d00d      	beq.n	8024d96 <CRC_Lock+0x5a>
 8024d7a:	681a      	ldr	r2, [r3, #0]
 8024d7c:	f240 4483 	movw	r4, #1155	; 0x483
 8024d80:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024d84:	42a2      	cmp	r2, r4
 8024d86:	d006      	beq.n	8024d96 <CRC_Lock+0x5a>
 8024d88:	681b      	ldr	r3, [r3, #0]
 8024d8a:	f240 4285 	movw	r2, #1157	; 0x485
 8024d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024d92:	4293      	cmp	r3, r2
 8024d94:	d10c      	bne.n	8024db0 <CRC_Lock+0x74>
 8024d96:	4b0e      	ldr	r3, [pc, #56]	; (8024dd0 <CRC_Lock+0x94>)
 8024d98:	2201      	movs	r2, #1
 8024d9a:	601a      	str	r2, [r3, #0]
 8024d9c:	681a      	ldr	r2, [r3, #0]
 8024d9e:	2a00      	cmp	r2, #0
 8024da0:	d1fc      	bne.n	8024d9c <CRC_Lock+0x60>
 8024da2:	4b0c      	ldr	r3, [pc, #48]	; (8024dd4 <CRC_Lock+0x98>)
 8024da4:	6018      	str	r0, [r3, #0]
 8024da6:	6818      	ldr	r0, [r3, #0]
 8024da8:	1a43      	subs	r3, r0, r1
 8024daa:	4258      	negs	r0, r3
 8024dac:	4158      	adcs	r0, r3
 8024dae:	bd30      	pop	{r4, r5, pc}
 8024db0:	4b09      	ldr	r3, [pc, #36]	; (8024dd8 <CRC_Lock+0x9c>)
 8024db2:	2201      	movs	r2, #1
 8024db4:	601a      	str	r2, [r3, #0]
 8024db6:	681a      	ldr	r2, [r3, #0]
 8024db8:	2a00      	cmp	r2, #0
 8024dba:	d1fc      	bne.n	8024db6 <CRC_Lock+0x7a>
 8024dbc:	4b07      	ldr	r3, [pc, #28]	; (8024ddc <CRC_Lock+0xa0>)
 8024dbe:	e7f1      	b.n	8024da4 <CRC_Lock+0x68>
 8024dc0:	e0002000 	.word	0xe0002000
 8024dc4:	e000ed00 	.word	0xe000ed00
 8024dc8:	e0042000 	.word	0xe0042000
 8024dcc:	5c001000 	.word	0x5c001000
 8024dd0:	58024c08 	.word	0x58024c08
 8024dd4:	58024c00 	.word	0x58024c00
 8024dd8:	40023008 	.word	0x40023008
 8024ddc:	40023000 	.word	0x40023000

08024de0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024de0:	6101      	str	r1, [r0, #16]
 8024de2:	4770      	bx	lr

08024de4 <_ZN8touchgfx8Gestures4tickEv>:
 8024de4:	7b83      	ldrb	r3, [r0, #14]
 8024de6:	b14b      	cbz	r3, 8024dfc <_ZN8touchgfx8Gestures4tickEv+0x18>
 8024de8:	8903      	ldrh	r3, [r0, #8]
 8024dea:	3301      	adds	r3, #1
 8024dec:	b29b      	uxth	r3, r3
 8024dee:	2b07      	cmp	r3, #7
 8024df0:	8103      	strh	r3, [r0, #8]
 8024df2:	bf81      	itttt	hi
 8024df4:	2300      	movhi	r3, #0
 8024df6:	8143      	strhhi	r3, [r0, #10]
 8024df8:	8183      	strhhi	r3, [r0, #12]
 8024dfa:	7383      	strbhi	r3, [r0, #14]
 8024dfc:	4770      	bx	lr
	...

08024e00 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8024e00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8024e04:	4604      	mov	r4, r0
 8024e06:	4698      	mov	r8, r3
 8024e08:	8880      	ldrh	r0, [r0, #4]
 8024e0a:	4617      	mov	r7, r2
 8024e0c:	4b1d      	ldr	r3, [pc, #116]	; (8024e84 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8024e0e:	460e      	mov	r6, r1
 8024e10:	f8ad 0006 	strh.w	r0, [sp, #6]
 8024e14:	eba8 0000 	sub.w	r0, r8, r0
 8024e18:	9300      	str	r3, [sp, #0]
 8024e1a:	2300      	movs	r3, #0
 8024e1c:	b280      	uxth	r0, r0
 8024e1e:	8aa2      	ldrh	r2, [r4, #20]
 8024e20:	f88d 3004 	strb.w	r3, [sp, #4]
 8024e24:	b203      	sxth	r3, r0
 8024e26:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8024e2a:	88e1      	ldrh	r1, [r4, #6]
 8024e2c:	2b00      	cmp	r3, #0
 8024e2e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024e32:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024e36:	bfb8      	it	lt
 8024e38:	4240      	neglt	r0, r0
 8024e3a:	f8ad 500c 	strh.w	r5, [sp, #12]
 8024e3e:	bfb8      	it	lt
 8024e40:	b203      	sxthlt	r3, r0
 8024e42:	4293      	cmp	r3, r2
 8024e44:	dc08      	bgt.n	8024e58 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8024e46:	1a69      	subs	r1, r5, r1
 8024e48:	b289      	uxth	r1, r1
 8024e4a:	b20b      	sxth	r3, r1
 8024e4c:	2b00      	cmp	r3, #0
 8024e4e:	bfbc      	itt	lt
 8024e50:	4249      	neglt	r1, r1
 8024e52:	b20b      	sxthlt	r3, r1
 8024e54:	429a      	cmp	r2, r3
 8024e56:	da13      	bge.n	8024e80 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8024e58:	6920      	ldr	r0, [r4, #16]
 8024e5a:	4669      	mov	r1, sp
 8024e5c:	eba8 0606 	sub.w	r6, r8, r6
 8024e60:	1bef      	subs	r7, r5, r7
 8024e62:	6803      	ldr	r3, [r0, #0]
 8024e64:	685b      	ldr	r3, [r3, #4]
 8024e66:	4798      	blx	r3
 8024e68:	2300      	movs	r3, #0
 8024e6a:	2001      	movs	r0, #1
 8024e6c:	8166      	strh	r6, [r4, #10]
 8024e6e:	8123      	strh	r3, [r4, #8]
 8024e70:	81a7      	strh	r7, [r4, #12]
 8024e72:	f8a4 8004 	strh.w	r8, [r4, #4]
 8024e76:	80e5      	strh	r5, [r4, #6]
 8024e78:	73a0      	strb	r0, [r4, #14]
 8024e7a:	b004      	add	sp, #16
 8024e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024e80:	2000      	movs	r0, #0
 8024e82:	e7fa      	b.n	8024e7a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8024e84:	0802df24 	.word	0x0802df24

08024e88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8024e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e8a:	461e      	mov	r6, r3
 8024e8c:	1e4b      	subs	r3, r1, #1
 8024e8e:	b085      	sub	sp, #20
 8024e90:	4604      	mov	r4, r0
 8024e92:	2b01      	cmp	r3, #1
 8024e94:	460d      	mov	r5, r1
 8024e96:	4617      	mov	r7, r2
 8024e98:	d84b      	bhi.n	8024f32 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8024e9a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8024e9e:	1cd3      	adds	r3, r2, #3
 8024ea0:	b29b      	uxth	r3, r3
 8024ea2:	2b06      	cmp	r3, #6
 8024ea4:	d916      	bls.n	8024ed4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024ea6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8024f48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024eaa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024eae:	f8cd c004 	str.w	ip, [sp, #4]
 8024eb2:	f04f 0c00 	mov.w	ip, #0
 8024eb6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024eba:	6900      	ldr	r0, [r0, #16]
 8024ebc:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024ec0:	a901      	add	r1, sp, #4
 8024ec2:	f88d c008 	strb.w	ip, [sp, #8]
 8024ec6:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024eca:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024ece:	6803      	ldr	r3, [r0, #0]
 8024ed0:	689b      	ldr	r3, [r3, #8]
 8024ed2:	4798      	blx	r3
 8024ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024ed8:	1cd3      	adds	r3, r2, #3
 8024eda:	b29b      	uxth	r3, r3
 8024edc:	2b06      	cmp	r3, #6
 8024ede:	d916      	bls.n	8024f0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024ee0:	f8df c064 	ldr.w	ip, [pc, #100]	; 8024f48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024ee4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024ee8:	f8cd c004 	str.w	ip, [sp, #4]
 8024eec:	f04f 0c01 	mov.w	ip, #1
 8024ef0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024ef4:	6920      	ldr	r0, [r4, #16]
 8024ef6:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024efa:	a901      	add	r1, sp, #4
 8024efc:	f88d c008 	strb.w	ip, [sp, #8]
 8024f00:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024f04:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024f08:	6803      	ldr	r3, [r0, #0]
 8024f0a:	689b      	ldr	r3, [r3, #8]
 8024f0c:	4798      	blx	r3
 8024f0e:	4b0d      	ldr	r3, [pc, #52]	; (8024f44 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8024f10:	a901      	add	r1, sp, #4
 8024f12:	6920      	ldr	r0, [r4, #16]
 8024f14:	9301      	str	r3, [sp, #4]
 8024f16:	2300      	movs	r3, #0
 8024f18:	f88d 5008 	strb.w	r5, [sp, #8]
 8024f1c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8024f20:	f8ad 600c 	strh.w	r6, [sp, #12]
 8024f24:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024f28:	6803      	ldr	r3, [r0, #0]
 8024f2a:	681b      	ldr	r3, [r3, #0]
 8024f2c:	4798      	blx	r3
 8024f2e:	b005      	add	sp, #20
 8024f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024f32:	2900      	cmp	r1, #0
 8024f34:	d1eb      	bne.n	8024f0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024f36:	80a2      	strh	r2, [r4, #4]
 8024f38:	80c6      	strh	r6, [r0, #6]
 8024f3a:	60a1      	str	r1, [r4, #8]
 8024f3c:	81a1      	strh	r1, [r4, #12]
 8024f3e:	73a1      	strb	r1, [r4, #14]
 8024f40:	e7e5      	b.n	8024f0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024f42:	bf00      	nop
 8024f44:	0802df10 	.word	0x0802df10
 8024f48:	0802df38 	.word	0x0802df38

08024f4c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 8024f4c:	10c9      	asrs	r1, r1, #3
 8024f4e:	2900      	cmp	r1, #0
 8024f50:	bfb8      	it	lt
 8024f52:	4249      	neglt	r1, r1
 8024f54:	2801      	cmp	r0, #1
 8024f56:	d108      	bne.n	8024f6a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8024f58:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8024f5c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8024f60:	4601      	mov	r1, r0
 8024f62:	dd02      	ble.n	8024f6a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8024f64:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8024f68:	4770      	bx	lr
 8024f6a:	29ff      	cmp	r1, #255	; 0xff
 8024f6c:	bfa8      	it	ge
 8024f6e:	21ff      	movge	r1, #255	; 0xff
 8024f70:	4608      	mov	r0, r1
 8024f72:	4770      	bx	lr

08024f74 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8024f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f78:	688c      	ldr	r4, [r1, #8]
 8024f7a:	b087      	sub	sp, #28
 8024f7c:	4607      	mov	r7, r0
 8024f7e:	2c00      	cmp	r4, #0
 8024f80:	db2b      	blt.n	8024fda <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8024f82:	6803      	ldr	r3, [r0, #0]
 8024f84:	691a      	ldr	r2, [r3, #16]
 8024f86:	42a2      	cmp	r2, r4
 8024f88:	dd27      	ble.n	8024fda <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8024f8a:	685a      	ldr	r2, [r3, #4]
 8024f8c:	695e      	ldr	r6, [r3, #20]
 8024f8e:	68cd      	ldr	r5, [r1, #12]
 8024f90:	fb06 2604 	mla	r6, r6, r4, r2
 8024f94:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8024f98:	698a      	ldr	r2, [r1, #24]
 8024f9a:	f893 a008 	ldrb.w	sl, [r3, #8]
 8024f9e:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8024fa2:	9205      	str	r2, [sp, #20]
 8024fa4:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8024fa8:	9b05      	ldr	r3, [sp, #20]
 8024faa:	6839      	ldr	r1, [r7, #0]
 8024fac:	eb03 0c02 	add.w	ip, r3, r2
 8024fb0:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8024fb4:	68c9      	ldr	r1, [r1, #12]
 8024fb6:	1898      	adds	r0, r3, r2
 8024fb8:	4288      	cmp	r0, r1
 8024fba:	db02      	blt.n	8024fc2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8024fbc:	1a8b      	subs	r3, r1, r2
 8024fbe:	2b00      	cmp	r3, #0
 8024fc0:	dd09      	ble.n	8024fd6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8024fc2:	6878      	ldr	r0, [r7, #4]
 8024fc4:	6801      	ldr	r1, [r0, #0]
 8024fc6:	9400      	str	r4, [sp, #0]
 8024fc8:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8024fcc:	4653      	mov	r3, sl
 8024fce:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8024fd2:	4631      	mov	r1, r6
 8024fd4:	47d8      	blx	fp
 8024fd6:	3d01      	subs	r5, #1
 8024fd8:	d1e4      	bne.n	8024fa4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8024fda:	b007      	add	sp, #28
 8024fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024fe0 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8024fe0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8024fe4:	b90b      	cbnz	r3, 8024fea <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8024fe6:	f001 b991 	b.w	802630c <_ZN8touchgfx7Outline6lineToEii>
 8024fea:	4770      	bx	lr

08024fec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8024fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024ff0:	4604      	mov	r4, r0
 8024ff2:	2600      	movs	r6, #0
 8024ff4:	4b8f      	ldr	r3, [pc, #572]	; (8025234 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8024ff6:	f100 0518 	add.w	r5, r0, #24
 8024ffa:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8024ffe:	b086      	sub	sp, #24
 8025000:	4690      	mov	r8, r2
 8025002:	e9c0 3100 	strd	r3, r1, [r0]
 8025006:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802500a:	e9c0 6604 	strd	r6, r6, [r0, #16]
 802500e:	4628      	mov	r0, r5
 8025010:	f001 fba0 	bl	8026754 <_ZN8touchgfx15RenderingBufferC1Ev>
 8025014:	4638      	mov	r0, r7
 8025016:	f000 fb45 	bl	80256a4 <_ZN8touchgfx7OutlineC1Ev>
 802501a:	f104 0078 	add.w	r0, r4, #120	; 0x78
 802501e:	f001 fb41 	bl	80266a4 <_ZN8touchgfx8ScanlineC1Ev>
 8025022:	2301      	movs	r3, #1
 8025024:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 8025028:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 802502c:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8025030:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8025034:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8025038:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 802503c:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8025040:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8025044:	f7f2 ff36 	bl	8017eb4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8025048:	b928      	cbnz	r0, 8025056 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 802504a:	4b7b      	ldr	r3, [pc, #492]	; (8025238 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802504c:	212d      	movs	r1, #45	; 0x2d
 802504e:	4a7b      	ldr	r2, [pc, #492]	; (802523c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8025050:	487b      	ldr	r0, [pc, #492]	; (8025240 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8025052:	f001 fccd 	bl	80269f0 <__assert_func>
 8025056:	f9b8 2000 	ldrsh.w	r2, [r8]
 802505a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802505e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8025062:	4410      	add	r0, r2
 8025064:	9602      	str	r6, [sp, #8]
 8025066:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802506a:	b280      	uxth	r0, r0
 802506c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8025070:	fa0f fa80 	sxth.w	sl, r0
 8025074:	f1ba 0f00 	cmp.w	sl, #0
 8025078:	dd70      	ble.n	802515c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802507a:	4591      	cmp	r9, r2
 802507c:	dd6e      	ble.n	802515c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802507e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8025082:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8025086:	440b      	add	r3, r1
 8025088:	b29b      	uxth	r3, r3
 802508a:	b21e      	sxth	r6, r3
 802508c:	2e00      	cmp	r6, #0
 802508e:	dd65      	ble.n	802515c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8025090:	458e      	cmp	lr, r1
 8025092:	dd63      	ble.n	802515c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8025094:	45d1      	cmp	r9, sl
 8025096:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802509a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802509e:	bfb8      	it	lt
 80250a0:	fa1f f089 	uxthlt.w	r0, r9
 80250a4:	45b6      	cmp	lr, r6
 80250a6:	f8ad 2008 	strh.w	r2, [sp, #8]
 80250aa:	bfb8      	it	lt
 80250ac:	fa1f f38e 	uxthlt.w	r3, lr
 80250b0:	1a80      	subs	r0, r0, r2
 80250b2:	f8ad 100a 	strh.w	r1, [sp, #10]
 80250b6:	1a5b      	subs	r3, r3, r1
 80250b8:	f8ad 000c 	strh.w	r0, [sp, #12]
 80250bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80250c0:	f10d 0808 	add.w	r8, sp, #8
 80250c4:	ae04      	add	r6, sp, #16
 80250c6:	e898 0003 	ldmia.w	r8, {r0, r1}
 80250ca:	e886 0003 	stmia.w	r6, {r0, r1}
 80250ce:	f8dc 3000 	ldr.w	r3, [ip]
 80250d2:	4660      	mov	r0, ip
 80250d4:	4631      	mov	r1, r6
 80250d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80250d8:	4798      	blx	r3
 80250da:	6861      	ldr	r1, [r4, #4]
 80250dc:	4640      	mov	r0, r8
 80250de:	3104      	adds	r1, #4
 80250e0:	f7f4 fa02 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80250e4:	4630      	mov	r0, r6
 80250e6:	f7f4 fa17 	bl	8019518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80250ea:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80250ee:	f7f2 fe71 	bl	8017dd4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 80250f2:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 80250f6:	4638      	mov	r0, r7
 80250f8:	f000 fab0 	bl	802565c <_ZN8touchgfx7Outline5resetEv>
 80250fc:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8025100:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8025104:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8025108:	015b      	lsls	r3, r3, #5
 802510a:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 802510e:	0152      	lsls	r2, r2, #5
 8025110:	60e3      	str	r3, [r4, #12]
 8025112:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8025116:	60a2      	str	r2, [r4, #8]
 8025118:	015b      	lsls	r3, r3, #5
 802511a:	6123      	str	r3, [r4, #16]
 802511c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8025120:	015b      	lsls	r3, r3, #5
 8025122:	6163      	str	r3, [r4, #20]
 8025124:	4b47      	ldr	r3, [pc, #284]	; (8025244 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8025126:	6818      	ldr	r0, [r3, #0]
 8025128:	6803      	ldr	r3, [r0, #0]
 802512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802512c:	4798      	blx	r3
 802512e:	4606      	mov	r6, r0
 8025130:	f7e1 faa0 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 8025134:	6803      	ldr	r3, [r0, #0]
 8025136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025138:	4798      	blx	r3
 802513a:	4607      	mov	r7, r0
 802513c:	f7e1 fa9a 	bl	8006674 <_ZN8touchgfx3HAL3lcdEv>
 8025140:	6803      	ldr	r3, [r0, #0]
 8025142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025144:	4798      	blx	r3
 8025146:	280d      	cmp	r0, #13
 8025148:	d854      	bhi.n	80251f4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802514a:	e8df f000 	tbb	[pc, r0]
 802514e:	554b      	.short	0x554b
 8025150:	2b6e0a66 	.word	0x2b6e0a66
 8025154:	5f5f5f3b 	.word	0x5f5f5f3b
 8025158:	6e6e5f5f 	.word	0x6e6e5f5f
 802515c:	2300      	movs	r3, #0
 802515e:	9303      	str	r3, [sp, #12]
 8025160:	e7ae      	b.n	80250c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 8025162:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025166:	2108      	movs	r1, #8
 8025168:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802516c:	fb92 f1f1 	sdiv	r1, r2, r1
 8025170:	fb07 1303 	mla	r3, r7, r3, r1
 8025174:	441e      	add	r6, r3
 8025176:	4253      	negs	r3, r2
 8025178:	f002 0207 	and.w	r2, r2, #7
 802517c:	f003 0307 	and.w	r3, r3, #7
 8025180:	bf58      	it	pl
 8025182:	425a      	negpl	r2, r3
 8025184:	b2d2      	uxtb	r2, r2
 8025186:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802518a:	4628      	mov	r0, r5
 802518c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8025190:	6721      	str	r1, [r4, #112]	; 0x70
 8025192:	e9cd 1700 	strd	r1, r7, [sp]
 8025196:	4631      	mov	r1, r6
 8025198:	f001 fae8 	bl	802676c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802519c:	4620      	mov	r0, r4
 802519e:	b006      	add	sp, #24
 80251a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80251a4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80251a8:	2104      	movs	r1, #4
 80251aa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80251ae:	fb92 f1f1 	sdiv	r1, r2, r1
 80251b2:	fb07 1303 	mla	r3, r7, r3, r1
 80251b6:	441e      	add	r6, r3
 80251b8:	4253      	negs	r3, r2
 80251ba:	f002 0203 	and.w	r2, r2, #3
 80251be:	f003 0303 	and.w	r3, r3, #3
 80251c2:	e7dd      	b.n	8025180 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 80251c4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80251c8:	2102      	movs	r1, #2
 80251ca:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80251ce:	2a00      	cmp	r2, #0
 80251d0:	fb92 f1f1 	sdiv	r1, r2, r1
 80251d4:	f002 0201 	and.w	r2, r2, #1
 80251d8:	fb07 1303 	mla	r3, r7, r3, r1
 80251dc:	bfb8      	it	lt
 80251de:	4252      	neglt	r2, r2
 80251e0:	441e      	add	r6, r3
 80251e2:	e7cf      	b.n	8025184 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 80251e4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80251e8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80251ec:	437b      	muls	r3, r7
 80251ee:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80251f2:	441e      	add	r6, r3
 80251f4:	2200      	movs	r2, #0
 80251f6:	e7c6      	b.n	8025186 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 80251f8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80251fc:	2103      	movs	r1, #3
 80251fe:	fb07 f203 	mul.w	r2, r7, r3
 8025202:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8025206:	fb13 2301 	smlabb	r3, r3, r1, r2
 802520a:	e7f2      	b.n	80251f2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 802520c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8025210:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025214:	fb07 2303 	mla	r3, r7, r3, r2
 8025218:	e7eb      	b.n	80251f2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 802521a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802521e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025222:	437b      	muls	r3, r7
 8025224:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8025228:	e7e3      	b.n	80251f2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 802522a:	4b07      	ldr	r3, [pc, #28]	; (8025248 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 802522c:	216c      	movs	r1, #108	; 0x6c
 802522e:	4a03      	ldr	r2, [pc, #12]	; (802523c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8025230:	e70e      	b.n	8025050 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 8025232:	bf00      	nop
 8025234:	0802f354 	.word	0x0802f354
 8025238:	0802f29f 	.word	0x0802f29f
 802523c:	0802f35c 	.word	0x0802f35c
 8025240:	0802f2fb 	.word	0x0802f2fb
 8025244:	2005677c 	.word	0x2005677c
 8025248:	0802f32f 	.word	0x0802f32f

0802524c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 802524c:	6812      	ldr	r2, [r2, #0]
 802524e:	2a00      	cmp	r2, #0
 8025250:	db0b      	blt.n	802526a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8025252:	9800      	ldr	r0, [sp, #0]
 8025254:	6800      	ldr	r0, [r0, #0]
 8025256:	4290      	cmp	r0, r2
 8025258:	bfd4      	ite	le
 802525a:	2002      	movle	r0, #2
 802525c:	2000      	movgt	r0, #0
 802525e:	680a      	ldr	r2, [r1, #0]
 8025260:	2a00      	cmp	r2, #0
 8025262:	da04      	bge.n	802526e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8025264:	f040 0004 	orr.w	r0, r0, #4
 8025268:	4770      	bx	lr
 802526a:	2001      	movs	r0, #1
 802526c:	e7f7      	b.n	802525e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802526e:	681b      	ldr	r3, [r3, #0]
 8025270:	4293      	cmp	r3, r2
 8025272:	bfd8      	it	le
 8025274:	f040 0008 	orrle.w	r0, r0, #8
 8025278:	4770      	bx	lr
	...

0802527c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802527c:	4b07      	ldr	r3, [pc, #28]	; (802529c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802527e:	b510      	push	{r4, lr}
 8025280:	781b      	ldrb	r3, [r3, #0]
 8025282:	2b01      	cmp	r3, #1
 8025284:	d108      	bne.n	8025298 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8025286:	6843      	ldr	r3, [r0, #4]
 8025288:	6814      	ldr	r4, [r2, #0]
 802528a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802528e:	680b      	ldr	r3, [r1, #0]
 8025290:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8025294:	6013      	str	r3, [r2, #0]
 8025296:	600c      	str	r4, [r1, #0]
 8025298:	bd10      	pop	{r4, pc}
 802529a:	bf00      	nop
 802529c:	20056774 	.word	0x20056774

080252a0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80252a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80252a2:	b085      	sub	sp, #20
 80252a4:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 80252a8:	4604      	mov	r4, r0
 80252aa:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80252ae:	b33b      	cbz	r3, 8025300 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 80252b0:	aa02      	add	r2, sp, #8
 80252b2:	a903      	add	r1, sp, #12
 80252b4:	f7ff ffe2 	bl	802527c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80252b8:	68a3      	ldr	r3, [r4, #8]
 80252ba:	9e03      	ldr	r6, [sp, #12]
 80252bc:	aa02      	add	r2, sp, #8
 80252be:	9f02      	ldr	r7, [sp, #8]
 80252c0:	a903      	add	r1, sp, #12
 80252c2:	1af6      	subs	r6, r6, r3
 80252c4:	68e3      	ldr	r3, [r4, #12]
 80252c6:	4620      	mov	r0, r4
 80252c8:	1aff      	subs	r7, r7, r3
 80252ca:	f104 0314 	add.w	r3, r4, #20
 80252ce:	9603      	str	r6, [sp, #12]
 80252d0:	9300      	str	r3, [sp, #0]
 80252d2:	f104 0310 	add.w	r3, r4, #16
 80252d6:	9702      	str	r7, [sp, #8]
 80252d8:	f7ff ffb8 	bl	802524c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80252dc:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80252e0:	4605      	mov	r5, r0
 80252e2:	b97b      	cbnz	r3, 8025304 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 80252e4:	463a      	mov	r2, r7
 80252e6:	4631      	mov	r1, r6
 80252e8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80252ec:	f7ff fe78 	bl	8024fe0 <_ZN8touchgfx10Rasterizer6lineToEii>
 80252f0:	9b03      	ldr	r3, [sp, #12]
 80252f2:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 80252f6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80252fa:	9b02      	ldr	r3, [sp, #8]
 80252fc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8025300:	b005      	add	sp, #20
 8025302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025304:	b110      	cbz	r0, 802530c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8025306:	ea13 0200 	ands.w	r2, r3, r0
 802530a:	d11c      	bne.n	8025346 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 802530c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 8025310:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8025314:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 8025318:	b188      	cbz	r0, 802533e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802531a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802531e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8025322:	b913      	cbnz	r3, 802532a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8025324:	4630      	mov	r0, r6
 8025326:	f001 f821 	bl	802636c <_ZN8touchgfx7Outline6moveToEii>
 802532a:	2300      	movs	r3, #0
 802532c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8025330:	2301      	movs	r3, #1
 8025332:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8025336:	4630      	mov	r0, r6
 8025338:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802533c:	e7d6      	b.n	80252ec <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802533e:	4630      	mov	r0, r6
 8025340:	f7ff fe4e 	bl	8024fe0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025344:	e7f7      	b.n	8025336 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8025346:	4615      	mov	r5, r2
 8025348:	e7d2      	b.n	80252f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802534a <_ZN8touchgfx6Canvas5closeEv>:
 802534a:	b538      	push	{r3, r4, r5, lr}
 802534c:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8025350:	4604      	mov	r4, r0
 8025352:	b993      	cbnz	r3, 802537a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025354:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8025358:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 802535c:	4213      	tst	r3, r2
 802535e:	d10c      	bne.n	802537a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025360:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8025364:	b123      	cbz	r3, 8025370 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8025366:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802536a:	4628      	mov	r0, r5
 802536c:	f7ff fe38 	bl	8024fe0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025370:	4628      	mov	r0, r5
 8025372:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 8025376:	f7ff fe33 	bl	8024fe0 <_ZN8touchgfx10Rasterizer6lineToEii>
 802537a:	2300      	movs	r3, #0
 802537c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8025380:	bd38      	pop	{r3, r4, r5, pc}

08025382 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8025382:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025384:	b085      	sub	sp, #20
 8025386:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802538a:	4604      	mov	r4, r0
 802538c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8025390:	b353      	cbz	r3, 80253e8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8025392:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8025396:	b90b      	cbnz	r3, 802539c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8025398:	f7ff ffd7 	bl	802534a <_ZN8touchgfx6Canvas5closeEv>
 802539c:	aa02      	add	r2, sp, #8
 802539e:	a903      	add	r1, sp, #12
 80253a0:	4620      	mov	r0, r4
 80253a2:	f7ff ff6b 	bl	802527c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80253a6:	68a3      	ldr	r3, [r4, #8]
 80253a8:	9d03      	ldr	r5, [sp, #12]
 80253aa:	aa02      	add	r2, sp, #8
 80253ac:	9e02      	ldr	r6, [sp, #8]
 80253ae:	a903      	add	r1, sp, #12
 80253b0:	1aed      	subs	r5, r5, r3
 80253b2:	68e3      	ldr	r3, [r4, #12]
 80253b4:	4620      	mov	r0, r4
 80253b6:	1af6      	subs	r6, r6, r3
 80253b8:	f104 0314 	add.w	r3, r4, #20
 80253bc:	9503      	str	r5, [sp, #12]
 80253be:	9300      	str	r3, [sp, #0]
 80253c0:	f104 0310 	add.w	r3, r4, #16
 80253c4:	9602      	str	r6, [sp, #8]
 80253c6:	f7ff ff41 	bl	802524c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80253ca:	4607      	mov	r7, r0
 80253cc:	b170      	cbz	r0, 80253ec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 80253ce:	2301      	movs	r3, #1
 80253d0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80253d4:	9a03      	ldr	r2, [sp, #12]
 80253d6:	9b02      	ldr	r3, [sp, #8]
 80253d8:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 80253dc:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80253e0:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 80253e4:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 80253e8:	b005      	add	sp, #20
 80253ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80253ec:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80253f0:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 80253f4:	b92b      	cbnz	r3, 8025402 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 80253f6:	4632      	mov	r2, r6
 80253f8:	4629      	mov	r1, r5
 80253fa:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80253fe:	f000 ffb5 	bl	802636c <_ZN8touchgfx7Outline6moveToEii>
 8025402:	2300      	movs	r3, #0
 8025404:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8025408:	2301      	movs	r3, #1
 802540a:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802540e:	e7e1      	b.n	80253d4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08025410 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8025410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025414:	4604      	mov	r4, r0
 8025416:	b087      	sub	sp, #28
 8025418:	9105      	str	r1, [sp, #20]
 802541a:	f001 f8ec 	bl	80265f6 <_ZN8touchgfx7Outline8getCellsEv>
 802541e:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8025422:	4605      	mov	r5, r0
 8025424:	f1b9 0f00 	cmp.w	r9, #0
 8025428:	d103      	bne.n	8025432 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802542a:	2001      	movs	r0, #1
 802542c:	b007      	add	sp, #28
 802542e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025432:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8025436:	2e00      	cmp	r6, #0
 8025438:	d139      	bne.n	80254ae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802543a:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802543e:	f105 0708 	add.w	r7, r5, #8
 8025442:	4640      	mov	r0, r8
 8025444:	f001 f919 	bl	802667a <_ZN8touchgfx8Scanline5resetEv>
 8025448:	f109 33ff 	add.w	r3, r9, #4294967295
 802544c:	9303      	str	r3, [sp, #12]
 802544e:	f9b5 b000 	ldrsh.w	fp, [r5]
 8025452:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8025456:	46da      	mov	sl, fp
 8025458:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802545c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8025460:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8025464:	9b03      	ldr	r3, [sp, #12]
 8025466:	4416      	add	r6, r2
 8025468:	9504      	str	r5, [sp, #16]
 802546a:	463d      	mov	r5, r7
 802546c:	3b01      	subs	r3, #1
 802546e:	9303      	str	r3, [sp, #12]
 8025470:	3301      	adds	r3, #1
 8025472:	d01e      	beq.n	80254b2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8025474:	3708      	adds	r7, #8
 8025476:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802547a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802547e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8025482:	4290      	cmp	r0, r2
 8025484:	d11e      	bne.n	80254c4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8025486:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802548a:	4411      	add	r1, r2
 802548c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8025490:	e7e8      	b.n	8025464 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8025492:	1c91      	adds	r1, r2, #2
 8025494:	f04f 0301 	mov.w	r3, #1
 8025498:	65e1      	str	r1, [r4, #92]	; 0x5c
 802549a:	8053      	strh	r3, [r2, #2]
 802549c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802549e:	1c91      	adds	r1, r2, #2
 80254a0:	65a1      	str	r1, [r4, #88]	; 0x58
 80254a2:	f8a2 b002 	strh.w	fp, [r2, #2]
 80254a6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80254a8:	3201      	adds	r2, #1
 80254aa:	6562      	str	r2, [r4, #84]	; 0x54
 80254ac:	e03a      	b.n	8025524 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 80254ae:	2000      	movs	r0, #0
 80254b0:	e7bc      	b.n	802542c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 80254b2:	b951      	cbnz	r1, 80254ca <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 80254b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80254b6:	2b00      	cmp	r3, #0
 80254b8:	d0b7      	beq.n	802542a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80254ba:	4641      	mov	r1, r8
 80254bc:	9805      	ldr	r0, [sp, #20]
 80254be:	f7ff fd59 	bl	8024f74 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80254c2:	e7b2      	b.n	802542a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80254c4:	2900      	cmp	r1, #0
 80254c6:	d035      	beq.n	8025534 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 80254c8:	9504      	str	r5, [sp, #16]
 80254ca:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 80254ce:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80254d2:	f7ff fd3b 	bl	8024f4c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 80254d6:	4605      	mov	r5, r0
 80254d8:	b330      	cbz	r0, 8025528 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80254da:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80254dc:	b182      	cbz	r2, 8025500 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80254de:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80254e0:	4591      	cmp	r9, r2
 80254e2:	d00d      	beq.n	8025500 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80254e4:	4641      	mov	r1, r8
 80254e6:	9805      	ldr	r0, [sp, #20]
 80254e8:	f7ff fd44 	bl	8024f74 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80254ec:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80254f0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80254f2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80254f6:	65e2      	str	r2, [r4, #92]	; 0x5c
 80254f8:	2300      	movs	r3, #0
 80254fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80254fc:	6563      	str	r3, [r4, #84]	; 0x54
 80254fe:	65a2      	str	r2, [r4, #88]	; 0x58
 8025500:	f1bb 0f00 	cmp.w	fp, #0
 8025504:	db10      	blt.n	8025528 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8025506:	f7f2 fce3 	bl	8017ed0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802550a:	4583      	cmp	fp, r0
 802550c:	da0c      	bge.n	8025528 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802550e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8025510:	f802 500b 	strb.w	r5, [r2, fp]
 8025514:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8025516:	3201      	adds	r2, #1
 8025518:	4593      	cmp	fp, r2
 802551a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802551c:	d1b9      	bne.n	8025492 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802551e:	8811      	ldrh	r1, [r2, #0]
 8025520:	3101      	adds	r1, #1
 8025522:	8011      	strh	r1, [r2, #0]
 8025524:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8025528:	9b03      	ldr	r3, [sp, #12]
 802552a:	3301      	adds	r3, #1
 802552c:	d0c2      	beq.n	80254b4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802552e:	f10b 0a01 	add.w	sl, fp, #1
 8025532:	9d04      	ldr	r5, [sp, #16]
 8025534:	f9b5 3000 	ldrsh.w	r3, [r5]
 8025538:	4553      	cmp	r3, sl
 802553a:	dd88      	ble.n	802544e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802553c:	01b1      	lsls	r1, r6, #6
 802553e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8025542:	f7ff fd03 	bl	8024f4c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 8025546:	4683      	mov	fp, r0
 8025548:	2800      	cmp	r0, #0
 802554a:	d080      	beq.n	802544e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802554c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802554e:	b183      	cbz	r3, 8025572 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8025550:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8025552:	4599      	cmp	r9, r3
 8025554:	d00d      	beq.n	8025572 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8025556:	4641      	mov	r1, r8
 8025558:	9805      	ldr	r0, [sp, #20]
 802555a:	f7ff fd0b 	bl	8024f74 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802555e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025562:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8025566:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8025568:	65e3      	str	r3, [r4, #92]	; 0x5c
 802556a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802556c:	65a3      	str	r3, [r4, #88]	; 0x58
 802556e:	2300      	movs	r3, #0
 8025570:	6563      	str	r3, [r4, #84]	; 0x54
 8025572:	f9b5 3000 	ldrsh.w	r3, [r5]
 8025576:	464a      	mov	r2, r9
 8025578:	f8cd b000 	str.w	fp, [sp]
 802557c:	4651      	mov	r1, sl
 802557e:	eba3 030a 	sub.w	r3, r3, sl
 8025582:	4640      	mov	r0, r8
 8025584:	f001 f8a4 	bl	80266d0 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8025588:	e761      	b.n	802544e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802558a <_ZN8touchgfx6Canvas6renderEh>:
 802558a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802558c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8025590:	4604      	mov	r4, r0
 8025592:	460d      	mov	r5, r1
 8025594:	b913      	cbnz	r3, 802559c <_ZN8touchgfx6Canvas6renderEh+0x12>
 8025596:	2001      	movs	r0, #1
 8025598:	b003      	add	sp, #12
 802559a:	bd30      	pop	{r4, r5, pc}
 802559c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80255a0:	2b00      	cmp	r3, #0
 80255a2:	d12f      	bne.n	8025604 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 80255a4:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 80255a8:	2b00      	cmp	r3, #0
 80255aa:	d0f4      	beq.n	8025596 <_ZN8touchgfx6Canvas6renderEh+0xc>
 80255ac:	6840      	ldr	r0, [r0, #4]
 80255ae:	6803      	ldr	r3, [r0, #0]
 80255b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80255b2:	4798      	blx	r3
 80255b4:	fb10 f105 	smulbb	r1, r0, r5
 80255b8:	b288      	uxth	r0, r1
 80255ba:	1c41      	adds	r1, r0, #1
 80255bc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80255c0:	120d      	asrs	r5, r1, #8
 80255c2:	d0e8      	beq.n	8025596 <_ZN8touchgfx6Canvas6renderEh+0xc>
 80255c4:	4620      	mov	r0, r4
 80255c6:	f7ff fec0 	bl	802534a <_ZN8touchgfx6Canvas5closeEv>
 80255ca:	6860      	ldr	r0, [r4, #4]
 80255cc:	6803      	ldr	r3, [r0, #0]
 80255ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80255d0:	4798      	blx	r3
 80255d2:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 80255d6:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 80255da:	8082      	strh	r2, [r0, #4]
 80255dc:	80c3      	strh	r3, [r0, #6]
 80255de:	6860      	ldr	r0, [r4, #4]
 80255e0:	6803      	ldr	r3, [r0, #0]
 80255e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80255e4:	4798      	blx	r3
 80255e6:	7205      	strb	r5, [r0, #8]
 80255e8:	6860      	ldr	r0, [r4, #4]
 80255ea:	6803      	ldr	r3, [r0, #0]
 80255ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80255ee:	4798      	blx	r3
 80255f0:	f104 0318 	add.w	r3, r4, #24
 80255f4:	4669      	mov	r1, sp
 80255f6:	e9cd 3000 	strd	r3, r0, [sp]
 80255fa:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80255fe:	f7ff ff07 	bl	8025410 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8025602:	e7c9      	b.n	8025598 <_ZN8touchgfx6Canvas6renderEh+0xe>
 8025604:	2000      	movs	r0, #0
 8025606:	e7c7      	b.n	8025598 <_ZN8touchgfx6Canvas6renderEh+0xe>

08025608 <_ZN8touchgfx6CanvasD1Ev>:
 8025608:	b538      	push	{r3, r4, r5, lr}
 802560a:	4605      	mov	r5, r0
 802560c:	4b08      	ldr	r3, [pc, #32]	; (8025630 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802560e:	4604      	mov	r4, r0
 8025610:	f845 3b30 	str.w	r3, [r5], #48
 8025614:	4b07      	ldr	r3, [pc, #28]	; (8025634 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8025616:	6818      	ldr	r0, [r3, #0]
 8025618:	6803      	ldr	r3, [r0, #0]
 802561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802561c:	4798      	blx	r3
 802561e:	4628      	mov	r0, r5
 8025620:	f000 f814 	bl	802564c <_ZN8touchgfx7OutlineD1Ev>
 8025624:	f104 0018 	add.w	r0, r4, #24
 8025628:	f001 f88b 	bl	8026742 <_ZN8touchgfx15RenderingBufferD1Ev>
 802562c:	4620      	mov	r0, r4
 802562e:	bd38      	pop	{r3, r4, r5, pc}
 8025630:	0802f354 	.word	0x0802f354
 8025634:	2005677c 	.word	0x2005677c

08025638 <_ZN8touchgfx6CanvasD0Ev>:
 8025638:	b510      	push	{r4, lr}
 802563a:	4604      	mov	r4, r0
 802563c:	f7ff ffe4 	bl	8025608 <_ZN8touchgfx6CanvasD1Ev>
 8025640:	21bc      	movs	r1, #188	; 0xbc
 8025642:	4620      	mov	r0, r4
 8025644:	f001 f89f 	bl	8026786 <_ZdlPvj>
 8025648:	4620      	mov	r0, r4
 802564a:	bd10      	pop	{r4, pc}

0802564c <_ZN8touchgfx7OutlineD1Ev>:
 802564c:	4770      	bx	lr

0802564e <_ZN8touchgfx7OutlineD0Ev>:
 802564e:	b510      	push	{r4, lr}
 8025650:	4604      	mov	r4, r0
 8025652:	2148      	movs	r1, #72	; 0x48
 8025654:	f001 f897 	bl	8026786 <_ZdlPvj>
 8025658:	4620      	mov	r0, r4
 802565a:	bd10      	pop	{r4, pc}

0802565c <_ZN8touchgfx7Outline5resetEv>:
 802565c:	b510      	push	{r4, lr}
 802565e:	4604      	mov	r4, r0
 8025660:	f7f2 fc4e 	bl	8017f00 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8025664:	60e0      	str	r0, [r4, #12]
 8025666:	f7f2 fc51 	bl	8017f0c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802566a:	68e3      	ldr	r3, [r4, #12]
 802566c:	2200      	movs	r2, #0
 802566e:	08c0      	lsrs	r0, r0, #3
 8025670:	6123      	str	r3, [r4, #16]
 8025672:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025676:	6060      	str	r0, [r4, #4]
 8025678:	82a3      	strh	r3, [r4, #20]
 802567a:	82e3      	strh	r3, [r4, #22]
 802567c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802567e:	60a2      	str	r2, [r4, #8]
 8025680:	f023 0301 	bic.w	r3, r3, #1
 8025684:	8322      	strh	r2, [r4, #24]
 8025686:	8362      	strh	r2, [r4, #26]
 8025688:	f043 0302 	orr.w	r3, r3, #2
 802568c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025690:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025692:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025696:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802569a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802569e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80256a2:	bd10      	pop	{r4, pc}

080256a4 <_ZN8touchgfx7OutlineC1Ev>:
 80256a4:	4b0f      	ldr	r3, [pc, #60]	; (80256e4 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 80256a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80256aa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80256ae:	b510      	push	{r4, lr}
 80256b0:	6003      	str	r3, [r0, #0]
 80256b2:	2300      	movs	r3, #0
 80256b4:	4604      	mov	r4, r0
 80256b6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80256ba:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80256be:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80256c2:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80256c6:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80256ca:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 80256ce:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80256d2:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 80256d6:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 80256da:	f7ff ffbf 	bl	802565c <_ZN8touchgfx7Outline5resetEv>
 80256de:	4620      	mov	r0, r4
 80256e0:	bd10      	pop	{r4, pc}
 80256e2:	bf00      	nop
 80256e4:	0802f424 	.word	0x0802f424

080256e8 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80256e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256ec:	b095      	sub	sp, #84	; 0x54
 80256ee:	4604      	mov	r4, r0
 80256f0:	1155      	asrs	r5, r2, #5
 80256f2:	f002 061f 	and.w	r6, r2, #31
 80256f6:	981e      	ldr	r0, [sp, #120]	; 0x78
 80256f8:	1157      	asrs	r7, r2, #5
 80256fa:	9304      	str	r3, [sp, #16]
 80256fc:	1153      	asrs	r3, r2, #5
 80256fe:	9300      	str	r3, [sp, #0]
 8025700:	1143      	asrs	r3, r0, #5
 8025702:	930c      	str	r3, [sp, #48]	; 0x30
 8025704:	f000 031f 	and.w	r3, r0, #31
 8025708:	9303      	str	r3, [sp, #12]
 802570a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802570c:	42ab      	cmp	r3, r5
 802570e:	bfc8      	it	gt
 8025710:	462b      	movgt	r3, r5
 8025712:	ea4f 1562 	mov.w	r5, r2, asr #5
 8025716:	bfc8      	it	gt
 8025718:	6323      	strgt	r3, [r4, #48]	; 0x30
 802571a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802571c:	42ab      	cmp	r3, r5
 802571e:	bfd8      	it	le
 8025720:	462b      	movle	r3, r5
 8025722:	ea4f 1560 	mov.w	r5, r0, asr #5
 8025726:	bfdc      	itt	le
 8025728:	3301      	addle	r3, #1
 802572a:	63a3      	strle	r3, [r4, #56]	; 0x38
 802572c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802572e:	42ab      	cmp	r3, r5
 8025730:	bfc8      	it	gt
 8025732:	462b      	movgt	r3, r5
 8025734:	ea4f 1560 	mov.w	r5, r0, asr #5
 8025738:	bfc8      	it	gt
 802573a:	6323      	strgt	r3, [r4, #48]	; 0x30
 802573c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802573e:	42ab      	cmp	r3, r5
 8025740:	bfd8      	it	le
 8025742:	462b      	movle	r3, r5
 8025744:	ea4f 1561 	mov.w	r5, r1, asr #5
 8025748:	bfdc      	itt	le
 802574a:	3301      	addle	r3, #1
 802574c:	63a3      	strle	r3, [r4, #56]	; 0x38
 802574e:	9b04      	ldr	r3, [sp, #16]
 8025750:	eba3 0a01 	sub.w	sl, r3, r1
 8025754:	1143      	asrs	r3, r0, #5
 8025756:	429f      	cmp	r7, r3
 8025758:	f040 811d 	bne.w	8025996 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ae>
 802575c:	9b04      	ldr	r3, [sp, #16]
 802575e:	ea4f 1b63 	mov.w	fp, r3, asr #5
 8025762:	9b03      	ldr	r3, [sp, #12]
 8025764:	429e      	cmp	r6, r3
 8025766:	d131      	bne.n	80257cc <_ZN8touchgfx7Outline10renderLineEiiii+0xe4>
 8025768:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802576c:	fa0f fb8b 	sxth.w	fp, fp
 8025770:	f9bd 2000 	ldrsh.w	r2, [sp]
 8025774:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025778:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 802577c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025780:	4281      	cmp	r1, r0
 8025782:	f000 80e6 	beq.w	8025952 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8025786:	8b60      	ldrh	r0, [r4, #26]
 8025788:	8b21      	ldrh	r1, [r4, #24]
 802578a:	4301      	orrs	r1, r0
 802578c:	d00b      	beq.n	80257a6 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 802578e:	2b00      	cmp	r3, #0
 8025790:	db09      	blt.n	80257a6 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8025792:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025794:	428b      	cmp	r3, r1
 8025796:	da06      	bge.n	80257a6 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8025798:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802579c:	4299      	cmp	r1, r3
 802579e:	d308      	bcc.n	80257b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xca>
 80257a0:	2301      	movs	r3, #1
 80257a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80257a6:	f8a4 b014 	strh.w	fp, [r4, #20]
 80257aa:	2300      	movs	r3, #0
 80257ac:	82e2      	strh	r2, [r4, #22]
 80257ae:	8323      	strh	r3, [r4, #24]
 80257b0:	e01f      	b.n	80257f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 80257b2:	f104 0314 	add.w	r3, r4, #20
 80257b6:	6925      	ldr	r5, [r4, #16]
 80257b8:	cb03      	ldmia	r3!, {r0, r1}
 80257ba:	6028      	str	r0, [r5, #0]
 80257bc:	6069      	str	r1, [r5, #4]
 80257be:	6923      	ldr	r3, [r4, #16]
 80257c0:	3308      	adds	r3, #8
 80257c2:	6123      	str	r3, [r4, #16]
 80257c4:	68a3      	ldr	r3, [r4, #8]
 80257c6:	3301      	adds	r3, #1
 80257c8:	60a3      	str	r3, [r4, #8]
 80257ca:	e7ec      	b.n	80257a6 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 80257cc:	9b04      	ldr	r3, [sp, #16]
 80257ce:	45ab      	cmp	fp, r5
 80257d0:	f001 011f 	and.w	r1, r1, #31
 80257d4:	8b20      	ldrh	r0, [r4, #24]
 80257d6:	f003 031f 	and.w	r3, r3, #31
 80257da:	8b62      	ldrh	r2, [r4, #26]
 80257dc:	9305      	str	r3, [sp, #20]
 80257de:	9b03      	ldr	r3, [sp, #12]
 80257e0:	eba3 0306 	sub.w	r3, r3, r6
 80257e4:	d107      	bne.n	80257f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x10e>
 80257e6:	4418      	add	r0, r3
 80257e8:	8320      	strh	r0, [r4, #24]
 80257ea:	9805      	ldr	r0, [sp, #20]
 80257ec:	4401      	add	r1, r0
 80257ee:	fb03 2301 	mla	r3, r3, r1, r2
 80257f2:	8363      	strh	r3, [r4, #26]
 80257f4:	e0ad      	b.n	8025952 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 80257f6:	f1ba 0f00 	cmp.w	sl, #0
 80257fa:	db33      	blt.n	8025864 <_ZN8touchgfx7Outline10renderLineEiiii+0x17c>
 80257fc:	2701      	movs	r7, #1
 80257fe:	f1c1 0c20 	rsb	ip, r1, #32
 8025802:	9702      	str	r7, [sp, #8]
 8025804:	2720      	movs	r7, #32
 8025806:	fb03 f30c 	mul.w	r3, r3, ip
 802580a:	9701      	str	r7, [sp, #4]
 802580c:	9f01      	ldr	r7, [sp, #4]
 802580e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8025812:	4439      	add	r1, r7
 8025814:	fb93 fcfa 	sdiv	ip, r3, sl
 8025818:	fb0a 331c 	mls	r3, sl, ip, r3
 802581c:	2b00      	cmp	r3, #0
 802581e:	bfbc      	itt	lt
 8025820:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8025824:	4453      	addlt	r3, sl
 8025826:	fb0c 2101 	mla	r1, ip, r1, r2
 802582a:	9a02      	ldr	r2, [sp, #8]
 802582c:	4460      	add	r0, ip
 802582e:	4415      	add	r5, r2
 8025830:	f9bd 2000 	ldrsh.w	r2, [sp]
 8025834:	b200      	sxth	r0, r0
 8025836:	0417      	lsls	r7, r2, #16
 8025838:	9200      	str	r2, [sp, #0]
 802583a:	fa0f fe85 	sxth.w	lr, r5
 802583e:	8320      	strh	r0, [r4, #24]
 8025840:	9704      	str	r7, [sp, #16]
 8025842:	b209      	sxth	r1, r1
 8025844:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 8025848:	9a04      	ldr	r2, [sp, #16]
 802584a:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 802584e:	8361      	strh	r1, [r4, #26]
 8025850:	eb0e 0902 	add.w	r9, lr, r2
 8025854:	454f      	cmp	r7, r9
 8025856:	d10d      	bne.n	8025874 <_ZN8touchgfx7Outline10renderLineEiiii+0x18c>
 8025858:	4ba0      	ldr	r3, [pc, #640]	; (8025adc <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 802585a:	2177      	movs	r1, #119	; 0x77
 802585c:	4aa0      	ldr	r2, [pc, #640]	; (8025ae0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>)
 802585e:	48a1      	ldr	r0, [pc, #644]	; (8025ae4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3fc>)
 8025860:	f001 f8c6 	bl	80269f0 <__assert_func>
 8025864:	f04f 37ff 	mov.w	r7, #4294967295
 8025868:	434b      	muls	r3, r1
 802586a:	f1ca 0a00 	rsb	sl, sl, #0
 802586e:	9702      	str	r7, [sp, #8]
 8025870:	2700      	movs	r7, #0
 8025872:	e7ca      	b.n	802580a <_ZN8touchgfx7Outline10renderLineEiiii+0x122>
 8025874:	ea50 0201 	orrs.w	r2, r0, r1
 8025878:	d00c      	beq.n	8025894 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 802587a:	f1b8 0f00 	cmp.w	r8, #0
 802587e:	db09      	blt.n	8025894 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8025880:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025882:	4588      	cmp	r8, r1
 8025884:	da06      	bge.n	8025894 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8025886:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802588a:	4288      	cmp	r0, r1
 802588c:	d364      	bcc.n	8025958 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 802588e:	2101      	movs	r1, #1
 8025890:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025894:	2100      	movs	r1, #0
 8025896:	9a00      	ldr	r2, [sp, #0]
 8025898:	45ab      	cmp	fp, r5
 802589a:	f8a4 e014 	strh.w	lr, [r4, #20]
 802589e:	82e2      	strh	r2, [r4, #22]
 80258a0:	4466      	add	r6, ip
 80258a2:	8321      	strh	r1, [r4, #24]
 80258a4:	8361      	strh	r1, [r4, #26]
 80258a6:	d04b      	beq.n	8025940 <_ZN8touchgfx7Outline10renderLineEiiii+0x258>
 80258a8:	9a03      	ldr	r2, [sp, #12]
 80258aa:	eba3 030a 	sub.w	r3, r3, sl
 80258ae:	f04f 0800 	mov.w	r8, #0
 80258b2:	1b91      	subs	r1, r2, r6
 80258b4:	448c      	add	ip, r1
 80258b6:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 80258ba:	fb9c f7fa 	sdiv	r7, ip, sl
 80258be:	fb0a cc17 	mls	ip, sl, r7, ip
 80258c2:	f1bc 0f00 	cmp.w	ip, #0
 80258c6:	bfbc      	itt	lt
 80258c8:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80258cc:	44d4      	addlt	ip, sl
 80258ce:	1c7a      	adds	r2, r7, #1
 80258d0:	9207      	str	r2, [sp, #28]
 80258d2:	eb13 030c 	adds.w	r3, r3, ip
 80258d6:	9a02      	ldr	r2, [sp, #8]
 80258d8:	bf54      	ite	pl
 80258da:	9807      	ldrpl	r0, [sp, #28]
 80258dc:	4638      	movmi	r0, r7
 80258de:	4415      	add	r5, r2
 80258e0:	9a04      	ldr	r2, [sp, #16]
 80258e2:	fa0f fe80 	sxth.w	lr, r0
 80258e6:	4406      	add	r6, r0
 80258e8:	ea4f 1140 	mov.w	r1, r0, lsl #5
 80258ec:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80258f0:	fa0f f985 	sxth.w	r9, r5
 80258f4:	bf58      	it	pl
 80258f6:	eba3 030a 	subpl.w	r3, r3, sl
 80258fa:	4410      	add	r0, r2
 80258fc:	b209      	sxth	r1, r1
 80258fe:	444a      	add	r2, r9
 8025900:	f8a4 e018 	strh.w	lr, [r4, #24]
 8025904:	8361      	strh	r1, [r4, #26]
 8025906:	4290      	cmp	r0, r2
 8025908:	d0a6      	beq.n	8025858 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802590a:	ea5e 0201 	orrs.w	r2, lr, r1
 802590e:	d00d      	beq.n	802592c <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8025910:	9a00      	ldr	r2, [sp, #0]
 8025912:	2a00      	cmp	r2, #0
 8025914:	db0a      	blt.n	802592c <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8025916:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025918:	428a      	cmp	r2, r1
 802591a:	da07      	bge.n	802592c <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 802591c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025920:	4288      	cmp	r0, r1
 8025922:	d329      	bcc.n	8025978 <_ZN8touchgfx7Outline10renderLineEiiii+0x290>
 8025924:	f04f 0201 	mov.w	r2, #1
 8025928:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802592c:	9a00      	ldr	r2, [sp, #0]
 802592e:	45ab      	cmp	fp, r5
 8025930:	f8a4 9014 	strh.w	r9, [r4, #20]
 8025934:	82e2      	strh	r2, [r4, #22]
 8025936:	f8a4 8018 	strh.w	r8, [r4, #24]
 802593a:	f8a4 801a 	strh.w	r8, [r4, #26]
 802593e:	d1c8      	bne.n	80258d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ea>
 8025940:	9b03      	ldr	r3, [sp, #12]
 8025942:	9a01      	ldr	r2, [sp, #4]
 8025944:	1b9e      	subs	r6, r3, r6
 8025946:	9b05      	ldr	r3, [sp, #20]
 8025948:	3320      	adds	r3, #32
 802594a:	8326      	strh	r6, [r4, #24]
 802594c:	1a9b      	subs	r3, r3, r2
 802594e:	435e      	muls	r6, r3
 8025950:	8366      	strh	r6, [r4, #26]
 8025952:	b015      	add	sp, #84	; 0x54
 8025954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025958:	f104 0714 	add.w	r7, r4, #20
 802595c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025960:	cf03      	ldmia	r7!, {r0, r1}
 8025962:	f8c8 0000 	str.w	r0, [r8]
 8025966:	f8c8 1004 	str.w	r1, [r8, #4]
 802596a:	6921      	ldr	r1, [r4, #16]
 802596c:	3108      	adds	r1, #8
 802596e:	6121      	str	r1, [r4, #16]
 8025970:	68a1      	ldr	r1, [r4, #8]
 8025972:	3101      	adds	r1, #1
 8025974:	60a1      	str	r1, [r4, #8]
 8025976:	e78d      	b.n	8025894 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8025978:	f104 0e14 	add.w	lr, r4, #20
 802597c:	6922      	ldr	r2, [r4, #16]
 802597e:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8025982:	9206      	str	r2, [sp, #24]
 8025984:	6010      	str	r0, [r2, #0]
 8025986:	6051      	str	r1, [r2, #4]
 8025988:	6921      	ldr	r1, [r4, #16]
 802598a:	3108      	adds	r1, #8
 802598c:	6121      	str	r1, [r4, #16]
 802598e:	68a1      	ldr	r1, [r4, #8]
 8025990:	3101      	adds	r1, #1
 8025992:	60a1      	str	r1, [r4, #8]
 8025994:	e7ca      	b.n	802592c <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8025996:	eba0 0b02 	sub.w	fp, r0, r2
 802599a:	f1ba 0f00 	cmp.w	sl, #0
 802599e:	f040 80a3 	bne.w	8025ae8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80259a2:	f1bb 0f00 	cmp.w	fp, #0
 80259a6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80259aa:	8b62      	ldrh	r2, [r4, #26]
 80259ac:	b22d      	sxth	r5, r5
 80259ae:	bfa8      	it	ge
 80259b0:	f04f 0a20 	movge.w	sl, #32
 80259b4:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 80259b8:	8b21      	ldrh	r1, [r4, #24]
 80259ba:	bfb8      	it	lt
 80259bc:	f04f 39ff 	movlt.w	r9, #4294967295
 80259c0:	ebaa 0606 	sub.w	r6, sl, r6
 80259c4:	bfa8      	it	ge
 80259c6:	f04f 0901 	movge.w	r9, #1
 80259ca:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80259ce:	4431      	add	r1, r6
 80259d0:	fb06 2603 	mla	r6, r6, r3, r2
 80259d4:	9a00      	ldr	r2, [sp, #0]
 80259d6:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 80259da:	b209      	sxth	r1, r1
 80259dc:	444a      	add	r2, r9
 80259de:	b236      	sxth	r6, r6
 80259e0:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 80259e4:	8321      	strh	r1, [r4, #24]
 80259e6:	b217      	sxth	r7, r2
 80259e8:	8366      	strh	r6, [r4, #26]
 80259ea:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 80259ee:	45f4      	cmp	ip, lr
 80259f0:	f43f af32 	beq.w	8025858 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80259f4:	4331      	orrs	r1, r6
 80259f6:	d00b      	beq.n	8025a10 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 80259f8:	2800      	cmp	r0, #0
 80259fa:	db09      	blt.n	8025a10 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 80259fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80259fe:	4288      	cmp	r0, r1
 8025a00:	da06      	bge.n	8025a10 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8025a02:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025a06:	4288      	cmp	r0, r1
 8025a08:	d33b      	bcc.n	8025a82 <_ZN8touchgfx7Outline10renderLineEiiii+0x39a>
 8025a0a:	2101      	movs	r1, #1
 8025a0c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025a10:	f1aa 0610 	sub.w	r6, sl, #16
 8025a14:	82e7      	strh	r7, [r4, #22]
 8025a16:	2700      	movs	r7, #0
 8025a18:	82a5      	strh	r5, [r4, #20]
 8025a1a:	0076      	lsls	r6, r6, #1
 8025a1c:	8327      	strh	r7, [r4, #24]
 8025a1e:	fb06 fc03 	mul.w	ip, r6, r3
 8025a22:	b236      	sxth	r6, r6
 8025a24:	8367      	strh	r7, [r4, #26]
 8025a26:	fa0f fc8c 	sxth.w	ip, ip
 8025a2a:	ea46 010c 	orr.w	r1, r6, ip
 8025a2e:	9100      	str	r1, [sp, #0]
 8025a30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025a32:	428a      	cmp	r2, r1
 8025a34:	d046      	beq.n	8025ac4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3dc>
 8025a36:	444a      	add	r2, r9
 8025a38:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8025a3c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8025a40:	fa0f f882 	sxth.w	r8, r2
 8025a44:	8326      	strh	r6, [r4, #24]
 8025a46:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8025a4a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8025a4e:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 8025a52:	4570      	cmp	r0, lr
 8025a54:	f43f af00 	beq.w	8025858 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025a58:	9800      	ldr	r0, [sp, #0]
 8025a5a:	b160      	cbz	r0, 8025a76 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8025a5c:	2900      	cmp	r1, #0
 8025a5e:	db0a      	blt.n	8025a76 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8025a60:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8025a62:	4281      	cmp	r1, r0
 8025a64:	da07      	bge.n	8025a76 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8025a66:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025a6a:	4288      	cmp	r0, r1
 8025a6c:	d319      	bcc.n	8025aa2 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ba>
 8025a6e:	f04f 0101 	mov.w	r1, #1
 8025a72:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025a76:	82a5      	strh	r5, [r4, #20]
 8025a78:	f8a4 8016 	strh.w	r8, [r4, #22]
 8025a7c:	8327      	strh	r7, [r4, #24]
 8025a7e:	8367      	strh	r7, [r4, #26]
 8025a80:	e7d6      	b.n	8025a30 <_ZN8touchgfx7Outline10renderLineEiiii+0x348>
 8025a82:	f104 0614 	add.w	r6, r4, #20
 8025a86:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8025a8a:	ce03      	ldmia	r6!, {r0, r1}
 8025a8c:	f8cc 0000 	str.w	r0, [ip]
 8025a90:	f8cc 1004 	str.w	r1, [ip, #4]
 8025a94:	6921      	ldr	r1, [r4, #16]
 8025a96:	3108      	adds	r1, #8
 8025a98:	6121      	str	r1, [r4, #16]
 8025a9a:	68a1      	ldr	r1, [r4, #8]
 8025a9c:	3101      	adds	r1, #1
 8025a9e:	60a1      	str	r1, [r4, #8]
 8025aa0:	e7b6      	b.n	8025a10 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8025aa2:	f104 0e14 	add.w	lr, r4, #20
 8025aa6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8025aaa:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8025aae:	f8cb 0000 	str.w	r0, [fp]
 8025ab2:	f8cb 1004 	str.w	r1, [fp, #4]
 8025ab6:	6921      	ldr	r1, [r4, #16]
 8025ab8:	3108      	adds	r1, #8
 8025aba:	6121      	str	r1, [r4, #16]
 8025abc:	68a1      	ldr	r1, [r4, #8]
 8025abe:	3101      	adds	r1, #1
 8025ac0:	60a1      	str	r1, [r4, #8]
 8025ac2:	e7d8      	b.n	8025a76 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8025ac4:	9a03      	ldr	r2, [sp, #12]
 8025ac6:	8b61      	ldrh	r1, [r4, #26]
 8025ac8:	f1a2 0e20 	sub.w	lr, r2, #32
 8025acc:	8b22      	ldrh	r2, [r4, #24]
 8025ace:	44d6      	add	lr, sl
 8025ad0:	4472      	add	r2, lr
 8025ad2:	fb0e 1303 	mla	r3, lr, r3, r1
 8025ad6:	8322      	strh	r2, [r4, #24]
 8025ad8:	e68b      	b.n	80257f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 8025ada:	bf00      	nop
 8025adc:	0802f3ab 	.word	0x0802f3ab
 8025ae0:	0802f42c 	.word	0x0802f42c
 8025ae4:	0802f3dc 	.word	0x0802f3dc
 8025ae8:	f1bb 0f00 	cmp.w	fp, #0
 8025aec:	f2c0 8124 	blt.w	8025d38 <_ZN8touchgfx7Outline10renderLineEiiii+0x650>
 8025af0:	2201      	movs	r2, #1
 8025af2:	f1c6 0320 	rsb	r3, r6, #32
 8025af6:	920b      	str	r2, [sp, #44]	; 0x2c
 8025af8:	2220      	movs	r2, #32
 8025afa:	fb0a f303 	mul.w	r3, sl, r3
 8025afe:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8025b02:	9202      	str	r2, [sp, #8]
 8025b04:	fb93 fcfb 	sdiv	ip, r3, fp
 8025b08:	fb0b 331c 	mls	r3, fp, ip, r3
 8025b0c:	2b00      	cmp	r3, #0
 8025b0e:	9308      	str	r3, [sp, #32]
 8025b10:	bfbe      	ittt	lt
 8025b12:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8025b16:	445b      	addlt	r3, fp
 8025b18:	9308      	strlt	r3, [sp, #32]
 8025b1a:	eb0c 0301 	add.w	r3, ip, r1
 8025b1e:	9301      	str	r3, [sp, #4]
 8025b20:	115b      	asrs	r3, r3, #5
 8025b22:	9305      	str	r3, [sp, #20]
 8025b24:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8025b28:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 8025b2c:	461f      	mov	r7, r3
 8025b2e:	9b02      	ldr	r3, [sp, #8]
 8025b30:	42b3      	cmp	r3, r6
 8025b32:	f040 8117 	bne.w	8025d64 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 8025b36:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8025b3a:	f9bd 3000 	ldrsh.w	r3, [sp]
 8025b3e:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8025b42:	42b9      	cmp	r1, r7
 8025b44:	d016      	beq.n	8025b74 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8025b46:	8b60      	ldrh	r0, [r4, #26]
 8025b48:	8b21      	ldrh	r1, [r4, #24]
 8025b4a:	4301      	orrs	r1, r0
 8025b4c:	d00d      	beq.n	8025b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8025b4e:	f1b8 0f00 	cmp.w	r8, #0
 8025b52:	db0a      	blt.n	8025b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8025b54:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025b56:	4541      	cmp	r1, r8
 8025b58:	dd07      	ble.n	8025b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8025b5a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025b5e:	4288      	cmp	r0, r1
 8025b60:	f0c0 80f3 	bcc.w	8025d4a <_ZN8touchgfx7Outline10renderLineEiiii+0x662>
 8025b64:	2101      	movs	r1, #1
 8025b66:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025b6a:	82e3      	strh	r3, [r4, #22]
 8025b6c:	2300      	movs	r3, #0
 8025b6e:	82a2      	strh	r2, [r4, #20]
 8025b70:	8323      	strh	r3, [r4, #24]
 8025b72:	8363      	strh	r3, [r4, #26]
 8025b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025b76:	9a00      	ldr	r2, [sp, #0]
 8025b78:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025b7c:	441a      	add	r2, r3
 8025b7e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8025b82:	4691      	mov	r9, r2
 8025b84:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8025b88:	fa0f f589 	sxth.w	r5, r9
 8025b8c:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8025b90:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8025b94:	4281      	cmp	r1, r0
 8025b96:	d015      	beq.n	8025bc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4dc>
 8025b98:	8b60      	ldrh	r0, [r4, #26]
 8025b9a:	8b21      	ldrh	r1, [r4, #24]
 8025b9c:	4301      	orrs	r1, r0
 8025b9e:	d00c      	beq.n	8025bba <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8025ba0:	2a00      	cmp	r2, #0
 8025ba2:	db0a      	blt.n	8025bba <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8025ba4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025ba6:	428a      	cmp	r2, r1
 8025ba8:	da07      	bge.n	8025bba <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8025baa:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8025bae:	4291      	cmp	r1, r2
 8025bb0:	f0c0 81ae 	bcc.w	8025f10 <_ZN8touchgfx7Outline10renderLineEiiii+0x828>
 8025bb4:	2201      	movs	r2, #1
 8025bb6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025bba:	82a3      	strh	r3, [r4, #20]
 8025bbc:	2300      	movs	r3, #0
 8025bbe:	82e5      	strh	r5, [r4, #22]
 8025bc0:	8323      	strh	r3, [r4, #24]
 8025bc2:	8363      	strh	r3, [r4, #26]
 8025bc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025bc6:	454b      	cmp	r3, r9
 8025bc8:	f000 808a 	beq.w	8025ce0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f8>
 8025bcc:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8025bd0:	fb93 f2fb 	sdiv	r2, r3, fp
 8025bd4:	fb0b 3312 	mls	r3, fp, r2, r3
 8025bd8:	9205      	str	r2, [sp, #20]
 8025bda:	2b00      	cmp	r3, #0
 8025bdc:	9307      	str	r3, [sp, #28]
 8025bde:	da04      	bge.n	8025bea <_ZN8touchgfx7Outline10renderLineEiiii+0x502>
 8025be0:	1e53      	subs	r3, r2, #1
 8025be2:	9305      	str	r3, [sp, #20]
 8025be4:	9b07      	ldr	r3, [sp, #28]
 8025be6:	445b      	add	r3, fp
 8025be8:	9307      	str	r3, [sp, #28]
 8025bea:	9b08      	ldr	r3, [sp, #32]
 8025bec:	f04f 0a00 	mov.w	sl, #0
 8025bf0:	eba3 030b 	sub.w	r3, r3, fp
 8025bf4:	9308      	str	r3, [sp, #32]
 8025bf6:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 8025bfa:	f1c3 0320 	rsb	r3, r3, #32
 8025bfe:	930a      	str	r3, [sp, #40]	; 0x28
 8025c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025c02:	9b02      	ldr	r3, [sp, #8]
 8025c04:	1a9b      	subs	r3, r3, r2
 8025c06:	9309      	str	r3, [sp, #36]	; 0x24
 8025c08:	9902      	ldr	r1, [sp, #8]
 8025c0a:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 8025c0e:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8025c12:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8025c16:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 8025c1a:	189b      	adds	r3, r3, r2
 8025c1c:	9308      	str	r3, [sp, #32]
 8025c1e:	bf57      	itett	pl
 8025c20:	eba3 030b 	subpl.w	r3, r3, fp
 8025c24:	9b05      	ldrmi	r3, [sp, #20]
 8025c26:	9308      	strpl	r3, [sp, #32]
 8025c28:	9b05      	ldrpl	r3, [sp, #20]
 8025c2a:	bf58      	it	pl
 8025c2c:	3301      	addpl	r3, #1
 8025c2e:	9300      	str	r3, [sp, #0]
 8025c30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025c34:	4413      	add	r3, r2
 8025c36:	9301      	str	r3, [sp, #4]
 8025c38:	115b      	asrs	r3, r3, #5
 8025c3a:	9306      	str	r3, [sp, #24]
 8025c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c3e:	428b      	cmp	r3, r1
 8025c40:	f040 8180 	bne.w	8025f44 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8025c44:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8025c48:	fa0f f389 	sxth.w	r3, r9
 8025c4c:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8025c50:	4541      	cmp	r1, r8
 8025c52:	d017      	beq.n	8025c84 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8025c54:	8b60      	ldrh	r0, [r4, #26]
 8025c56:	8b21      	ldrh	r1, [r4, #24]
 8025c58:	4301      	orrs	r1, r0
 8025c5a:	d00d      	beq.n	8025c78 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025c5c:	2e00      	cmp	r6, #0
 8025c5e:	db0b      	blt.n	8025c78 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025c60:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025c62:	42b1      	cmp	r1, r6
 8025c64:	dd08      	ble.n	8025c78 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025c66:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025c6a:	4288      	cmp	r0, r1
 8025c6c:	f0c0 815d 	bcc.w	8025f2a <_ZN8touchgfx7Outline10renderLineEiiii+0x842>
 8025c70:	f04f 0101 	mov.w	r1, #1
 8025c74:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025c78:	82a2      	strh	r2, [r4, #20]
 8025c7a:	82e3      	strh	r3, [r4, #22]
 8025c7c:	f8a4 a018 	strh.w	sl, [r4, #24]
 8025c80:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8025c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025c86:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8025c8a:	4499      	add	r9, r3
 8025c8c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025c90:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8025c94:	fa0f f589 	sxth.w	r5, r9
 8025c98:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8025c9c:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8025ca0:	4281      	cmp	r1, r0
 8025ca2:	f43f add9 	beq.w	8025858 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025ca6:	8b60      	ldrh	r0, [r4, #26]
 8025ca8:	8b21      	ldrh	r1, [r4, #24]
 8025caa:	4301      	orrs	r1, r0
 8025cac:	d00d      	beq.n	8025cca <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8025cae:	2a00      	cmp	r2, #0
 8025cb0:	db0b      	blt.n	8025cca <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8025cb2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025cb4:	428a      	cmp	r2, r1
 8025cb6:	da08      	bge.n	8025cca <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8025cb8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8025cbc:	4291      	cmp	r1, r2
 8025cbe:	f0c0 8228 	bcc.w	8026112 <_ZN8touchgfx7Outline10renderLineEiiii+0xa2a>
 8025cc2:	f04f 0201 	mov.w	r2, #1
 8025cc6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025cca:	82a3      	strh	r3, [r4, #20]
 8025ccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025cce:	82e5      	strh	r5, [r4, #22]
 8025cd0:	454b      	cmp	r3, r9
 8025cd2:	f8a4 a018 	strh.w	sl, [r4, #24]
 8025cd6:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8025cda:	f8dd c004 	ldr.w	ip, [sp, #4]
 8025cde:	d193      	bne.n	8025c08 <_ZN8touchgfx7Outline10renderLineEiiii+0x520>
 8025ce0:	9b02      	ldr	r3, [sp, #8]
 8025ce2:	f1c3 0e20 	rsb	lr, r3, #32
 8025ce6:	9b04      	ldr	r3, [sp, #16]
 8025ce8:	ea4f 1b63 	mov.w	fp, r3, asr #5
 8025cec:	9b03      	ldr	r3, [sp, #12]
 8025cee:	459e      	cmp	lr, r3
 8025cf0:	f040 8229 	bne.w	8026146 <_ZN8touchgfx7Outline10renderLineEiiii+0xa5e>
 8025cf4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025cf8:	fa0f f58b 	sxth.w	r5, fp
 8025cfc:	fa0f f289 	sxth.w	r2, r9
 8025d00:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025d04:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 8025d08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025d0c:	4281      	cmp	r1, r0
 8025d0e:	f43f ae20 	beq.w	8025952 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8025d12:	8b60      	ldrh	r0, [r4, #26]
 8025d14:	8b21      	ldrh	r1, [r4, #24]
 8025d16:	4301      	orrs	r1, r0
 8025d18:	d00c      	beq.n	8025d34 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8025d1a:	2b00      	cmp	r3, #0
 8025d1c:	db0a      	blt.n	8025d34 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8025d1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025d20:	428b      	cmp	r3, r1
 8025d22:	da07      	bge.n	8025d34 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8025d24:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025d28:	4299      	cmp	r1, r3
 8025d2a:	f0c0 81ff 	bcc.w	802612c <_ZN8touchgfx7Outline10renderLineEiiii+0xa44>
 8025d2e:	2301      	movs	r3, #1
 8025d30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025d34:	82a5      	strh	r5, [r4, #20]
 8025d36:	e538      	b.n	80257aa <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 8025d38:	f04f 32ff 	mov.w	r2, #4294967295
 8025d3c:	fb0a f306 	mul.w	r3, sl, r6
 8025d40:	f1cb 0b00 	rsb	fp, fp, #0
 8025d44:	920b      	str	r2, [sp, #44]	; 0x2c
 8025d46:	2200      	movs	r2, #0
 8025d48:	e6d9      	b.n	8025afe <_ZN8touchgfx7Outline10renderLineEiiii+0x416>
 8025d4a:	f104 0514 	add.w	r5, r4, #20
 8025d4e:	6926      	ldr	r6, [r4, #16]
 8025d50:	cd03      	ldmia	r5!, {r0, r1}
 8025d52:	6030      	str	r0, [r6, #0]
 8025d54:	6071      	str	r1, [r6, #4]
 8025d56:	6921      	ldr	r1, [r4, #16]
 8025d58:	3108      	adds	r1, #8
 8025d5a:	6121      	str	r1, [r4, #16]
 8025d5c:	68a1      	ldr	r1, [r4, #8]
 8025d5e:	3101      	adds	r1, #1
 8025d60:	60a1      	str	r1, [r4, #8]
 8025d62:	e702      	b.n	8025b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8025d64:	9b01      	ldr	r3, [sp, #4]
 8025d66:	f001 011f 	and.w	r1, r1, #31
 8025d6a:	8b20      	ldrh	r0, [r4, #24]
 8025d6c:	f003 031f 	and.w	r3, r3, #31
 8025d70:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8025d74:	930d      	str	r3, [sp, #52]	; 0x34
 8025d76:	9b02      	ldr	r3, [sp, #8]
 8025d78:	1b9a      	subs	r2, r3, r6
 8025d7a:	9b05      	ldr	r3, [sp, #20]
 8025d7c:	42ab      	cmp	r3, r5
 8025d7e:	d107      	bne.n	8025d90 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a8>
 8025d80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025d82:	4410      	add	r0, r2
 8025d84:	4419      	add	r1, r3
 8025d86:	8320      	strh	r0, [r4, #24]
 8025d88:	fb02 9201 	mla	r2, r2, r1, r9
 8025d8c:	8362      	strh	r2, [r4, #26]
 8025d8e:	e6f1      	b.n	8025b74 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8025d90:	f1bc 0f00 	cmp.w	ip, #0
 8025d94:	f2c0 8093 	blt.w	8025ebe <_ZN8touchgfx7Outline10renderLineEiiii+0x7d6>
 8025d98:	f1c1 0320 	rsb	r3, r1, #32
 8025d9c:	435a      	muls	r2, r3
 8025d9e:	2301      	movs	r3, #1
 8025da0:	9309      	str	r3, [sp, #36]	; 0x24
 8025da2:	2320      	movs	r3, #32
 8025da4:	9307      	str	r3, [sp, #28]
 8025da6:	9b07      	ldr	r3, [sp, #28]
 8025da8:	fb92 fefc 	sdiv	lr, r2, ip
 8025dac:	fb0c 221e 	mls	r2, ip, lr, r2
 8025db0:	4419      	add	r1, r3
 8025db2:	2a00      	cmp	r2, #0
 8025db4:	bfbc      	itt	lt
 8025db6:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8025dba:	4462      	addlt	r2, ip
 8025dbc:	fb0e 9101 	mla	r1, lr, r1, r9
 8025dc0:	4470      	add	r0, lr
 8025dc2:	b20b      	sxth	r3, r1
 8025dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025dc6:	b200      	sxth	r0, r0
 8025dc8:	440d      	add	r5, r1
 8025dca:	f9bd 1000 	ldrsh.w	r1, [sp]
 8025dce:	8320      	strh	r0, [r4, #24]
 8025dd0:	fa0f f985 	sxth.w	r9, r5
 8025dd4:	9106      	str	r1, [sp, #24]
 8025dd6:	0409      	lsls	r1, r1, #16
 8025dd8:	8363      	strh	r3, [r4, #26]
 8025dda:	910a      	str	r1, [sp, #40]	; 0x28
 8025ddc:	4449      	add	r1, r9
 8025dde:	42b9      	cmp	r1, r7
 8025de0:	f43f ad3a 	beq.w	8025858 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025de4:	4303      	orrs	r3, r0
 8025de6:	d00c      	beq.n	8025e02 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8025de8:	f1b8 0f00 	cmp.w	r8, #0
 8025dec:	db09      	blt.n	8025e02 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8025dee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025df0:	4543      	cmp	r3, r8
 8025df2:	dd06      	ble.n	8025e02 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8025df4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025df8:	4299      	cmp	r1, r3
 8025dfa:	d368      	bcc.n	8025ece <_ZN8touchgfx7Outline10renderLineEiiii+0x7e6>
 8025dfc:	2301      	movs	r3, #1
 8025dfe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025e02:	9b06      	ldr	r3, [sp, #24]
 8025e04:	4476      	add	r6, lr
 8025e06:	f8a4 9014 	strh.w	r9, [r4, #20]
 8025e0a:	82e3      	strh	r3, [r4, #22]
 8025e0c:	2300      	movs	r3, #0
 8025e0e:	8323      	strh	r3, [r4, #24]
 8025e10:	8363      	strh	r3, [r4, #26]
 8025e12:	9b05      	ldr	r3, [sp, #20]
 8025e14:	42ab      	cmp	r3, r5
 8025e16:	d048      	beq.n	8025eaa <_ZN8touchgfx7Outline10renderLineEiiii+0x7c2>
 8025e18:	9b02      	ldr	r3, [sp, #8]
 8025e1a:	eba2 020c 	sub.w	r2, r2, ip
 8025e1e:	1b9b      	subs	r3, r3, r6
 8025e20:	4473      	add	r3, lr
 8025e22:	015b      	lsls	r3, r3, #5
 8025e24:	fb93 f8fc 	sdiv	r8, r3, ip
 8025e28:	fb0c 3318 	mls	r3, ip, r8, r3
 8025e2c:	2b00      	cmp	r3, #0
 8025e2e:	bfbc      	itt	lt
 8025e30:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8025e34:	4463      	addlt	r3, ip
 8025e36:	f108 0101 	add.w	r1, r8, #1
 8025e3a:	910f      	str	r1, [sp, #60]	; 0x3c
 8025e3c:	18d2      	adds	r2, r2, r3
 8025e3e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025e40:	bf56      	itet	pl
 8025e42:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 8025e44:	4640      	movmi	r0, r8
 8025e46:	eba2 020c 	subpl.w	r2, r2, ip
 8025e4a:	fa0f fe80 	sxth.w	lr, r0
 8025e4e:	4406      	add	r6, r0
 8025e50:	0141      	lsls	r1, r0, #5
 8025e52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025e54:	f8a4 e018 	strh.w	lr, [r4, #24]
 8025e58:	4405      	add	r5, r0
 8025e5a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8025e5e:	b209      	sxth	r1, r1
 8025e60:	fa0f f985 	sxth.w	r9, r5
 8025e64:	4438      	add	r0, r7
 8025e66:	8361      	strh	r1, [r4, #26]
 8025e68:	444f      	add	r7, r9
 8025e6a:	42b8      	cmp	r0, r7
 8025e6c:	f43f acf4 	beq.w	8025858 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025e70:	ea5e 0101 	orrs.w	r1, lr, r1
 8025e74:	d00e      	beq.n	8025e94 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025e76:	9906      	ldr	r1, [sp, #24]
 8025e78:	2900      	cmp	r1, #0
 8025e7a:	db0b      	blt.n	8025e94 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025e7c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025e7e:	9806      	ldr	r0, [sp, #24]
 8025e80:	4288      	cmp	r0, r1
 8025e82:	da07      	bge.n	8025e94 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025e84:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025e88:	4288      	cmp	r0, r1
 8025e8a:	d330      	bcc.n	8025eee <_ZN8touchgfx7Outline10renderLineEiiii+0x806>
 8025e8c:	f04f 0101 	mov.w	r1, #1
 8025e90:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025e94:	9906      	ldr	r1, [sp, #24]
 8025e96:	f8a4 9014 	strh.w	r9, [r4, #20]
 8025e9a:	82e1      	strh	r1, [r4, #22]
 8025e9c:	f04f 0100 	mov.w	r1, #0
 8025ea0:	8321      	strh	r1, [r4, #24]
 8025ea2:	8361      	strh	r1, [r4, #26]
 8025ea4:	9905      	ldr	r1, [sp, #20]
 8025ea6:	42a9      	cmp	r1, r5
 8025ea8:	d1c8      	bne.n	8025e3c <_ZN8touchgfx7Outline10renderLineEiiii+0x754>
 8025eaa:	9b02      	ldr	r3, [sp, #8]
 8025eac:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025eae:	1b9e      	subs	r6, r3, r6
 8025eb0:	9b07      	ldr	r3, [sp, #28]
 8025eb2:	3120      	adds	r1, #32
 8025eb4:	8326      	strh	r6, [r4, #24]
 8025eb6:	1ac9      	subs	r1, r1, r3
 8025eb8:	434e      	muls	r6, r1
 8025eba:	8366      	strh	r6, [r4, #26]
 8025ebc:	e65a      	b.n	8025b74 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8025ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8025ec2:	434a      	muls	r2, r1
 8025ec4:	f1cc 0c00 	rsb	ip, ip, #0
 8025ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8025eca:	2300      	movs	r3, #0
 8025ecc:	e76a      	b.n	8025da4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6bc>
 8025ece:	f104 0314 	add.w	r3, r4, #20
 8025ed2:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025ed6:	cb03      	ldmia	r3!, {r0, r1}
 8025ed8:	f8c8 0000 	str.w	r0, [r8]
 8025edc:	f8c8 1004 	str.w	r1, [r8, #4]
 8025ee0:	6923      	ldr	r3, [r4, #16]
 8025ee2:	3308      	adds	r3, #8
 8025ee4:	6123      	str	r3, [r4, #16]
 8025ee6:	68a3      	ldr	r3, [r4, #8]
 8025ee8:	3301      	adds	r3, #1
 8025eea:	60a3      	str	r3, [r4, #8]
 8025eec:	e789      	b.n	8025e02 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8025eee:	6921      	ldr	r1, [r4, #16]
 8025ef0:	f104 0e14 	add.w	lr, r4, #20
 8025ef4:	910e      	str	r1, [sp, #56]	; 0x38
 8025ef6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8025ef8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8025efc:	6038      	str	r0, [r7, #0]
 8025efe:	4638      	mov	r0, r7
 8025f00:	6079      	str	r1, [r7, #4]
 8025f02:	6921      	ldr	r1, [r4, #16]
 8025f04:	3108      	adds	r1, #8
 8025f06:	6121      	str	r1, [r4, #16]
 8025f08:	68a1      	ldr	r1, [r4, #8]
 8025f0a:	3101      	adds	r1, #1
 8025f0c:	60a1      	str	r1, [r4, #8]
 8025f0e:	e7c1      	b.n	8025e94 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025f10:	f104 0214 	add.w	r2, r4, #20
 8025f14:	6926      	ldr	r6, [r4, #16]
 8025f16:	ca03      	ldmia	r2!, {r0, r1}
 8025f18:	6030      	str	r0, [r6, #0]
 8025f1a:	6071      	str	r1, [r6, #4]
 8025f1c:	6922      	ldr	r2, [r4, #16]
 8025f1e:	3208      	adds	r2, #8
 8025f20:	6122      	str	r2, [r4, #16]
 8025f22:	68a2      	ldr	r2, [r4, #8]
 8025f24:	3201      	adds	r2, #1
 8025f26:	60a2      	str	r2, [r4, #8]
 8025f28:	e647      	b.n	8025bba <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8025f2a:	f104 0514 	add.w	r5, r4, #20
 8025f2e:	6926      	ldr	r6, [r4, #16]
 8025f30:	cd03      	ldmia	r5!, {r0, r1}
 8025f32:	6030      	str	r0, [r6, #0]
 8025f34:	6071      	str	r1, [r6, #4]
 8025f36:	6921      	ldr	r1, [r4, #16]
 8025f38:	3108      	adds	r1, #8
 8025f3a:	6121      	str	r1, [r4, #16]
 8025f3c:	68a1      	ldr	r1, [r4, #8]
 8025f3e:	3101      	adds	r1, #1
 8025f40:	60a1      	str	r1, [r4, #8]
 8025f42:	e699      	b.n	8025c78 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025f44:	9b01      	ldr	r3, [sp, #4]
 8025f46:	ea4f 176c 	mov.w	r7, ip, asr #5
 8025f4a:	8b20      	ldrh	r0, [r4, #24]
 8025f4c:	f00c 0c1f 	and.w	ip, ip, #31
 8025f50:	f003 031f 	and.w	r3, r3, #31
 8025f54:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 8025f58:	9310      	str	r3, [sp, #64]	; 0x40
 8025f5a:	9b06      	ldr	r3, [sp, #24]
 8025f5c:	429f      	cmp	r7, r3
 8025f5e:	d10a      	bne.n	8025f76 <_ZN8touchgfx7Outline10renderLineEiiii+0x88e>
 8025f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025f62:	4418      	add	r0, r3
 8025f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025f66:	449c      	add	ip, r3
 8025f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025f6a:	8320      	strh	r0, [r4, #24]
 8025f6c:	fb03 ee0c 	mla	lr, r3, ip, lr
 8025f70:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8025f74:	e686      	b.n	8025c84 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8025f76:	9b00      	ldr	r3, [sp, #0]
 8025f78:	2b00      	cmp	r3, #0
 8025f7a:	f2c0 80a0 	blt.w	80260be <_ZN8touchgfx7Outline10renderLineEiiii+0x9d6>
 8025f7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025f80:	f1cc 0320 	rsb	r3, ip, #32
 8025f84:	434b      	muls	r3, r1
 8025f86:	2101      	movs	r1, #1
 8025f88:	910e      	str	r1, [sp, #56]	; 0x38
 8025f8a:	2120      	movs	r1, #32
 8025f8c:	9a00      	ldr	r2, [sp, #0]
 8025f8e:	910d      	str	r1, [sp, #52]	; 0x34
 8025f90:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025f92:	fb93 f5f2 	sdiv	r5, r3, r2
 8025f96:	fb02 3315 	mls	r3, r2, r5, r3
 8025f9a:	448c      	add	ip, r1
 8025f9c:	2b00      	cmp	r3, #0
 8025f9e:	bfbc      	itt	lt
 8025fa0:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8025fa4:	189b      	addlt	r3, r3, r2
 8025fa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025fa8:	fb05 ec0c 	mla	ip, r5, ip, lr
 8025fac:	4428      	add	r0, r5
 8025fae:	4417      	add	r7, r2
 8025fb0:	fa0f f18c 	sxth.w	r1, ip
 8025fb4:	fa0f fc89 	sxth.w	ip, r9
 8025fb8:	fa0f fe87 	sxth.w	lr, r7
 8025fbc:	8361      	strh	r1, [r4, #26]
 8025fbe:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8025fc2:	b200      	sxth	r0, r0
 8025fc4:	920f      	str	r2, [sp, #60]	; 0x3c
 8025fc6:	4472      	add	r2, lr
 8025fc8:	8320      	strh	r0, [r4, #24]
 8025fca:	4542      	cmp	r2, r8
 8025fcc:	f43f ac44 	beq.w	8025858 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025fd0:	ea50 0201 	orrs.w	r2, r0, r1
 8025fd4:	d00c      	beq.n	8025ff0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8025fd6:	2e00      	cmp	r6, #0
 8025fd8:	db0a      	blt.n	8025ff0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8025fda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025fdc:	42b1      	cmp	r1, r6
 8025fde:	dd07      	ble.n	8025ff0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8025fe0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025fe4:	4288      	cmp	r0, r1
 8025fe6:	d375      	bcc.n	80260d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8025fe8:	f04f 0201 	mov.w	r2, #1
 8025fec:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025ff2:	f8a4 e014 	strh.w	lr, [r4, #20]
 8025ff6:	1956      	adds	r6, r2, r5
 8025ff8:	9a06      	ldr	r2, [sp, #24]
 8025ffa:	f8a4 c016 	strh.w	ip, [r4, #22]
 8025ffe:	42ba      	cmp	r2, r7
 8026000:	f8a4 a018 	strh.w	sl, [r4, #24]
 8026004:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8026008:	d04c      	beq.n	80260a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9bc>
 802600a:	9a02      	ldr	r2, [sp, #8]
 802600c:	1b91      	subs	r1, r2, r6
 802600e:	9a00      	ldr	r2, [sp, #0]
 8026010:	440d      	add	r5, r1
 8026012:	016d      	lsls	r5, r5, #5
 8026014:	fb95 fef2 	sdiv	lr, r5, r2
 8026018:	fb02 551e 	mls	r5, r2, lr, r5
 802601c:	2d00      	cmp	r5, #0
 802601e:	bfbc      	itt	lt
 8026020:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8026024:	18ad      	addlt	r5, r5, r2
 8026026:	9a00      	ldr	r2, [sp, #0]
 8026028:	1a9b      	subs	r3, r3, r2
 802602a:	f10e 0201 	add.w	r2, lr, #1
 802602e:	9213      	str	r2, [sp, #76]	; 0x4c
 8026030:	195b      	adds	r3, r3, r5
 8026032:	bf57      	itett	pl
 8026034:	9a00      	ldrpl	r2, [sp, #0]
 8026036:	4670      	movmi	r0, lr
 8026038:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 802603a:	1a9b      	subpl	r3, r3, r2
 802603c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802603e:	fa0f f880 	sxth.w	r8, r0
 8026042:	4406      	add	r6, r0
 8026044:	4417      	add	r7, r2
 8026046:	0141      	lsls	r1, r0, #5
 8026048:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802604c:	b23a      	sxth	r2, r7
 802604e:	f8a4 8018 	strh.w	r8, [r4, #24]
 8026052:	b209      	sxth	r1, r1
 8026054:	9211      	str	r2, [sp, #68]	; 0x44
 8026056:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026058:	8361      	strh	r1, [r4, #26]
 802605a:	1882      	adds	r2, r0, r2
 802605c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802605e:	9212      	str	r2, [sp, #72]	; 0x48
 8026060:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026062:	4402      	add	r2, r0
 8026064:	9812      	ldr	r0, [sp, #72]	; 0x48
 8026066:	4290      	cmp	r0, r2
 8026068:	f43f abf6 	beq.w	8025858 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802606c:	ea58 0201 	orrs.w	r2, r8, r1
 8026070:	d00d      	beq.n	802608e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8026072:	f1bc 0f00 	cmp.w	ip, #0
 8026076:	db0a      	blt.n	802608e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8026078:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802607a:	458c      	cmp	ip, r1
 802607c:	da07      	bge.n	802608e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 802607e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026082:	4288      	cmp	r0, r1
 8026084:	d336      	bcc.n	80260f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0c>
 8026086:	f04f 0201 	mov.w	r2, #1
 802608a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802608e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026090:	f8a4 c016 	strh.w	ip, [r4, #22]
 8026094:	82a2      	strh	r2, [r4, #20]
 8026096:	9a06      	ldr	r2, [sp, #24]
 8026098:	f8a4 a018 	strh.w	sl, [r4, #24]
 802609c:	42ba      	cmp	r2, r7
 802609e:	f8a4 a01a 	strh.w	sl, [r4, #26]
 80260a2:	d1c5      	bne.n	8026030 <_ZN8touchgfx7Outline10renderLineEiiii+0x948>
 80260a4:	9b02      	ldr	r3, [sp, #8]
 80260a6:	1b9e      	subs	r6, r3, r6
 80260a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80260aa:	f103 0c20 	add.w	ip, r3, #32
 80260ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80260b0:	8326      	strh	r6, [r4, #24]
 80260b2:	ebac 0c03 	sub.w	ip, ip, r3
 80260b6:	fb06 f60c 	mul.w	r6, r6, ip
 80260ba:	8366      	strh	r6, [r4, #26]
 80260bc:	e5e2      	b.n	8025c84 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 80260be:	9a00      	ldr	r2, [sp, #0]
 80260c0:	f04f 31ff 	mov.w	r1, #4294967295
 80260c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80260c6:	4252      	negs	r2, r2
 80260c8:	910e      	str	r1, [sp, #56]	; 0x38
 80260ca:	fb03 f30c 	mul.w	r3, r3, ip
 80260ce:	2100      	movs	r1, #0
 80260d0:	9200      	str	r2, [sp, #0]
 80260d2:	e75b      	b.n	8025f8c <_ZN8touchgfx7Outline10renderLineEiiii+0x8a4>
 80260d4:	f104 0614 	add.w	r6, r4, #20
 80260d8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80260dc:	ce03      	ldmia	r6!, {r0, r1}
 80260de:	f8c8 0000 	str.w	r0, [r8]
 80260e2:	f8c8 1004 	str.w	r1, [r8, #4]
 80260e6:	6921      	ldr	r1, [r4, #16]
 80260e8:	3108      	adds	r1, #8
 80260ea:	6121      	str	r1, [r4, #16]
 80260ec:	68a1      	ldr	r1, [r4, #8]
 80260ee:	3101      	adds	r1, #1
 80260f0:	60a1      	str	r1, [r4, #8]
 80260f2:	e77d      	b.n	8025ff0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80260f4:	f104 0814 	add.w	r8, r4, #20
 80260f8:	6922      	ldr	r2, [r4, #16]
 80260fa:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80260fe:	9212      	str	r2, [sp, #72]	; 0x48
 8026100:	6010      	str	r0, [r2, #0]
 8026102:	6051      	str	r1, [r2, #4]
 8026104:	6921      	ldr	r1, [r4, #16]
 8026106:	3108      	adds	r1, #8
 8026108:	6121      	str	r1, [r4, #16]
 802610a:	68a1      	ldr	r1, [r4, #8]
 802610c:	3101      	adds	r1, #1
 802610e:	60a1      	str	r1, [r4, #8]
 8026110:	e7bd      	b.n	802608e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8026112:	f104 0214 	add.w	r2, r4, #20
 8026116:	6926      	ldr	r6, [r4, #16]
 8026118:	ca03      	ldmia	r2!, {r0, r1}
 802611a:	6030      	str	r0, [r6, #0]
 802611c:	6071      	str	r1, [r6, #4]
 802611e:	6922      	ldr	r2, [r4, #16]
 8026120:	3208      	adds	r2, #8
 8026122:	6122      	str	r2, [r4, #16]
 8026124:	68a2      	ldr	r2, [r4, #8]
 8026126:	3201      	adds	r2, #1
 8026128:	60a2      	str	r2, [r4, #8]
 802612a:	e5ce      	b.n	8025cca <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802612c:	f104 0314 	add.w	r3, r4, #20
 8026130:	6926      	ldr	r6, [r4, #16]
 8026132:	cb03      	ldmia	r3!, {r0, r1}
 8026134:	6030      	str	r0, [r6, #0]
 8026136:	6071      	str	r1, [r6, #4]
 8026138:	6923      	ldr	r3, [r4, #16]
 802613a:	3308      	adds	r3, #8
 802613c:	6123      	str	r3, [r4, #16]
 802613e:	68a3      	ldr	r3, [r4, #8]
 8026140:	3301      	adds	r3, #1
 8026142:	60a3      	str	r3, [r4, #8]
 8026144:	e5f6      	b.n	8025d34 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8026146:	9b01      	ldr	r3, [sp, #4]
 8026148:	8b20      	ldrh	r0, [r4, #24]
 802614a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802614e:	f003 021f 	and.w	r2, r3, #31
 8026152:	9b04      	ldr	r3, [sp, #16]
 8026154:	45dc      	cmp	ip, fp
 8026156:	8b66      	ldrh	r6, [r4, #26]
 8026158:	f003 031f 	and.w	r3, r3, #31
 802615c:	9305      	str	r3, [sp, #20]
 802615e:	9b03      	ldr	r3, [sp, #12]
 8026160:	eba3 050e 	sub.w	r5, r3, lr
 8026164:	d108      	bne.n	8026178 <_ZN8touchgfx7Outline10renderLineEiiii+0xa90>
 8026166:	9b05      	ldr	r3, [sp, #20]
 8026168:	4428      	add	r0, r5
 802616a:	441a      	add	r2, r3
 802616c:	8320      	strh	r0, [r4, #24]
 802616e:	fb05 6502 	mla	r5, r5, r2, r6
 8026172:	8365      	strh	r5, [r4, #26]
 8026174:	f7ff bbed 	b.w	8025952 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8026178:	9b04      	ldr	r3, [sp, #16]
 802617a:	9901      	ldr	r1, [sp, #4]
 802617c:	1a5b      	subs	r3, r3, r1
 802617e:	9300      	str	r3, [sp, #0]
 8026180:	f100 809c 	bmi.w	80262bc <_ZN8touchgfx7Outline10renderLineEiiii+0xbd4>
 8026184:	f1c2 0120 	rsb	r1, r2, #32
 8026188:	434d      	muls	r5, r1
 802618a:	2101      	movs	r1, #1
 802618c:	9102      	str	r1, [sp, #8]
 802618e:	2120      	movs	r1, #32
 8026190:	9b00      	ldr	r3, [sp, #0]
 8026192:	9101      	str	r1, [sp, #4]
 8026194:	9901      	ldr	r1, [sp, #4]
 8026196:	fb95 f7f3 	sdiv	r7, r5, r3
 802619a:	fb03 5517 	mls	r5, r3, r7, r5
 802619e:	440a      	add	r2, r1
 80261a0:	2d00      	cmp	r5, #0
 80261a2:	bfbc      	itt	lt
 80261a4:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80261a8:	18ed      	addlt	r5, r5, r3
 80261aa:	fb07 6202 	mla	r2, r7, r2, r6
 80261ae:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 80261b2:	4438      	add	r0, r7
 80261b4:	b211      	sxth	r1, r2
 80261b6:	9a02      	ldr	r2, [sp, #8]
 80261b8:	b200      	sxth	r0, r0
 80261ba:	4494      	add	ip, r2
 80261bc:	fa0f f289 	sxth.w	r2, r9
 80261c0:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80261c4:	0413      	lsls	r3, r2, #16
 80261c6:	8320      	strh	r0, [r4, #24]
 80261c8:	fa0f f88c 	sxth.w	r8, ip
 80261cc:	8361      	strh	r1, [r4, #26]
 80261ce:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 80261d2:	9304      	str	r3, [sp, #16]
 80261d4:	eb08 0a03 	add.w	sl, r8, r3
 80261d8:	45d1      	cmp	r9, sl
 80261da:	f43f ab3d 	beq.w	8025858 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80261de:	ea50 0301 	orrs.w	r3, r0, r1
 80261e2:	d00b      	beq.n	80261fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80261e4:	2e00      	cmp	r6, #0
 80261e6:	db09      	blt.n	80261fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80261e8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80261ea:	428e      	cmp	r6, r1
 80261ec:	da06      	bge.n	80261fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80261ee:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80261f2:	4288      	cmp	r0, r1
 80261f4:	d36b      	bcc.n	80262ce <_ZN8touchgfx7Outline10renderLineEiiii+0xbe6>
 80261f6:	2101      	movs	r1, #1
 80261f8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80261fc:	2100      	movs	r1, #0
 80261fe:	45e3      	cmp	fp, ip
 8026200:	f8a4 8014 	strh.w	r8, [r4, #20]
 8026204:	44be      	add	lr, r7
 8026206:	82e2      	strh	r2, [r4, #22]
 8026208:	8321      	strh	r1, [r4, #24]
 802620a:	8361      	strh	r1, [r4, #26]
 802620c:	d047      	beq.n	802629e <_ZN8touchgfx7Outline10renderLineEiiii+0xbb6>
 802620e:	9b03      	ldr	r3, [sp, #12]
 8026210:	f04f 0900 	mov.w	r9, #0
 8026214:	eba3 060e 	sub.w	r6, r3, lr
 8026218:	9b00      	ldr	r3, [sp, #0]
 802621a:	443e      	add	r6, r7
 802621c:	0176      	lsls	r6, r6, #5
 802621e:	fb96 f7f3 	sdiv	r7, r6, r3
 8026222:	fb03 6617 	mls	r6, r3, r7, r6
 8026226:	428e      	cmp	r6, r1
 8026228:	bfbc      	itt	lt
 802622a:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802622e:	18f6      	addlt	r6, r6, r3
 8026230:	9b00      	ldr	r3, [sp, #0]
 8026232:	1aed      	subs	r5, r5, r3
 8026234:	1c7b      	adds	r3, r7, #1
 8026236:	9307      	str	r3, [sp, #28]
 8026238:	19ad      	adds	r5, r5, r6
 802623a:	bf57      	itett	pl
 802623c:	9b00      	ldrpl	r3, [sp, #0]
 802623e:	4638      	movmi	r0, r7
 8026240:	9807      	ldrpl	r0, [sp, #28]
 8026242:	1aed      	subpl	r5, r5, r3
 8026244:	9b02      	ldr	r3, [sp, #8]
 8026246:	fa0f f880 	sxth.w	r8, r0
 802624a:	4486      	add	lr, r0
 802624c:	449c      	add	ip, r3
 802624e:	0141      	lsls	r1, r0, #5
 8026250:	9b04      	ldr	r3, [sp, #16]
 8026252:	fa0f fa8c 	sxth.w	sl, ip
 8026256:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802625a:	b209      	sxth	r1, r1
 802625c:	f8a4 8018 	strh.w	r8, [r4, #24]
 8026260:	4418      	add	r0, r3
 8026262:	4453      	add	r3, sl
 8026264:	8361      	strh	r1, [r4, #26]
 8026266:	4298      	cmp	r0, r3
 8026268:	f43f aaf6 	beq.w	8025858 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802626c:	ea58 0301 	orrs.w	r3, r8, r1
 8026270:	d00c      	beq.n	802628c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8026272:	2a00      	cmp	r2, #0
 8026274:	db0a      	blt.n	802628c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8026276:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026278:	428a      	cmp	r2, r1
 802627a:	da07      	bge.n	802628c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 802627c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026280:	4288      	cmp	r0, r1
 8026282:	d334      	bcc.n	80262ee <_ZN8touchgfx7Outline10renderLineEiiii+0xc06>
 8026284:	f04f 0301 	mov.w	r3, #1
 8026288:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802628c:	45e3      	cmp	fp, ip
 802628e:	f8a4 a014 	strh.w	sl, [r4, #20]
 8026292:	82e2      	strh	r2, [r4, #22]
 8026294:	f8a4 9018 	strh.w	r9, [r4, #24]
 8026298:	f8a4 901a 	strh.w	r9, [r4, #26]
 802629c:	d1cc      	bne.n	8026238 <_ZN8touchgfx7Outline10renderLineEiiii+0xb50>
 802629e:	9b03      	ldr	r3, [sp, #12]
 80262a0:	9e05      	ldr	r6, [sp, #20]
 80262a2:	eba3 0e0e 	sub.w	lr, r3, lr
 80262a6:	9b01      	ldr	r3, [sp, #4]
 80262a8:	3620      	adds	r6, #32
 80262aa:	f8a4 e018 	strh.w	lr, [r4, #24]
 80262ae:	1af6      	subs	r6, r6, r3
 80262b0:	fb0e fe06 	mul.w	lr, lr, r6
 80262b4:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80262b8:	f7ff bb4b 	b.w	8025952 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 80262bc:	9b00      	ldr	r3, [sp, #0]
 80262be:	f04f 31ff 	mov.w	r1, #4294967295
 80262c2:	4355      	muls	r5, r2
 80262c4:	425b      	negs	r3, r3
 80262c6:	9102      	str	r1, [sp, #8]
 80262c8:	2100      	movs	r1, #0
 80262ca:	9300      	str	r3, [sp, #0]
 80262cc:	e760      	b.n	8026190 <_ZN8touchgfx7Outline10renderLineEiiii+0xaa8>
 80262ce:	f104 0614 	add.w	r6, r4, #20
 80262d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80262d6:	ce03      	ldmia	r6!, {r0, r1}
 80262d8:	f8c9 0000 	str.w	r0, [r9]
 80262dc:	f8c9 1004 	str.w	r1, [r9, #4]
 80262e0:	6921      	ldr	r1, [r4, #16]
 80262e2:	3108      	adds	r1, #8
 80262e4:	6121      	str	r1, [r4, #16]
 80262e6:	68a1      	ldr	r1, [r4, #8]
 80262e8:	3101      	adds	r1, #1
 80262ea:	60a1      	str	r1, [r4, #8]
 80262ec:	e786      	b.n	80261fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80262ee:	f104 0814 	add.w	r8, r4, #20
 80262f2:	6923      	ldr	r3, [r4, #16]
 80262f4:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80262f8:	9306      	str	r3, [sp, #24]
 80262fa:	6018      	str	r0, [r3, #0]
 80262fc:	6059      	str	r1, [r3, #4]
 80262fe:	6921      	ldr	r1, [r4, #16]
 8026300:	3108      	adds	r1, #8
 8026302:	6121      	str	r1, [r4, #16]
 8026304:	68a1      	ldr	r1, [r4, #8]
 8026306:	3101      	adds	r1, #1
 8026308:	60a1      	str	r1, [r4, #8]
 802630a:	e7bf      	b.n	802628c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>

0802630c <_ZN8touchgfx7Outline6lineToEii>:
 802630c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802630e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8026310:	4604      	mov	r4, r0
 8026312:	460d      	mov	r5, r1
 8026314:	4616      	mov	r6, r2
 8026316:	079b      	lsls	r3, r3, #30
 8026318:	d526      	bpl.n	8026368 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802631a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802631e:	ea85 0001 	eor.w	r0, r5, r1
 8026322:	ea86 0302 	eor.w	r3, r6, r2
 8026326:	4303      	orrs	r3, r0
 8026328:	d01e      	beq.n	8026368 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802632a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802632c:	114b      	asrs	r3, r1, #5
 802632e:	9600      	str	r6, [sp, #0]
 8026330:	4283      	cmp	r3, r0
 8026332:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8026334:	bfb8      	it	lt
 8026336:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8026338:	3301      	adds	r3, #1
 802633a:	4283      	cmp	r3, r0
 802633c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802633e:	bfc8      	it	gt
 8026340:	6363      	strgt	r3, [r4, #52]	; 0x34
 8026342:	116b      	asrs	r3, r5, #5
 8026344:	4283      	cmp	r3, r0
 8026346:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8026348:	bfb8      	it	lt
 802634a:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802634c:	3301      	adds	r3, #1
 802634e:	4283      	cmp	r3, r0
 8026350:	4620      	mov	r0, r4
 8026352:	bfc8      	it	gt
 8026354:	6363      	strgt	r3, [r4, #52]	; 0x34
 8026356:	462b      	mov	r3, r5
 8026358:	f7ff f9c6 	bl	80256e8 <_ZN8touchgfx7Outline10renderLineEiiii>
 802635c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802635e:	f043 0301 	orr.w	r3, r3, #1
 8026362:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8026366:	63e3      	str	r3, [r4, #60]	; 0x3c
 8026368:	b002      	add	sp, #8
 802636a:	bd70      	pop	{r4, r5, r6, pc}

0802636c <_ZN8touchgfx7Outline6moveToEii>:
 802636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802636e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8026370:	4615      	mov	r5, r2
 8026372:	4604      	mov	r4, r0
 8026374:	460e      	mov	r6, r1
 8026376:	079a      	lsls	r2, r3, #30
 8026378:	d401      	bmi.n	802637e <_ZN8touchgfx7Outline6moveToEii+0x12>
 802637a:	f7ff f96f 	bl	802565c <_ZN8touchgfx7Outline5resetEv>
 802637e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8026380:	07db      	lsls	r3, r3, #31
 8026382:	d504      	bpl.n	802638e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8026384:	4620      	mov	r0, r4
 8026386:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802638a:	f7ff ffbf 	bl	802630c <_ZN8touchgfx7Outline6lineToEii>
 802638e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8026392:	f346 1c4f 	sbfx	ip, r6, #5, #16
 8026396:	f345 174f 	sbfx	r7, r5, #5, #16
 802639a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802639e:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 80263a2:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80263a6:	428a      	cmp	r2, r1
 80263a8:	d015      	beq.n	80263d6 <_ZN8touchgfx7Outline6moveToEii+0x6a>
 80263aa:	8b61      	ldrh	r1, [r4, #26]
 80263ac:	8b22      	ldrh	r2, [r4, #24]
 80263ae:	430a      	orrs	r2, r1
 80263b0:	d00b      	beq.n	80263ca <_ZN8touchgfx7Outline6moveToEii+0x5e>
 80263b2:	2b00      	cmp	r3, #0
 80263b4:	db09      	blt.n	80263ca <_ZN8touchgfx7Outline6moveToEii+0x5e>
 80263b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80263b8:	4293      	cmp	r3, r2
 80263ba:	da06      	bge.n	80263ca <_ZN8touchgfx7Outline6moveToEii+0x5e>
 80263bc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80263c0:	429a      	cmp	r2, r3
 80263c2:	d30d      	bcc.n	80263e0 <_ZN8touchgfx7Outline6moveToEii+0x74>
 80263c4:	2301      	movs	r3, #1
 80263c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80263ca:	2300      	movs	r3, #0
 80263cc:	f8a4 c014 	strh.w	ip, [r4, #20]
 80263d0:	82e7      	strh	r7, [r4, #22]
 80263d2:	8323      	strh	r3, [r4, #24]
 80263d4:	8363      	strh	r3, [r4, #26]
 80263d6:	61e6      	str	r6, [r4, #28]
 80263d8:	62a5      	str	r5, [r4, #40]	; 0x28
 80263da:	e9c4 5608 	strd	r5, r6, [r4, #32]
 80263de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80263e0:	f104 0314 	add.w	r3, r4, #20
 80263e4:	6922      	ldr	r2, [r4, #16]
 80263e6:	cb03      	ldmia	r3!, {r0, r1}
 80263e8:	6010      	str	r0, [r2, #0]
 80263ea:	6051      	str	r1, [r2, #4]
 80263ec:	6923      	ldr	r3, [r4, #16]
 80263ee:	3308      	adds	r3, #8
 80263f0:	6123      	str	r3, [r4, #16]
 80263f2:	68a3      	ldr	r3, [r4, #8]
 80263f4:	3301      	adds	r3, #1
 80263f6:	60a3      	str	r3, [r4, #8]
 80263f8:	e7e7      	b.n	80263ca <_ZN8touchgfx7Outline6moveToEii+0x5e>

080263fa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80263fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80263fe:	b0d1      	sub	sp, #324	; 0x144
 8026400:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8026404:	466c      	mov	r4, sp
 8026406:	1a0d      	subs	r5, r1, r0
 8026408:	f100 0208 	add.w	r2, r0, #8
 802640c:	2d48      	cmp	r5, #72	; 0x48
 802640e:	f340 80ba 	ble.w	8026586 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8026412:	112d      	asrs	r5, r5, #4
 8026414:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8026418:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802641c:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8026420:	f9b0 8000 	ldrsh.w	r8, [r0]
 8026424:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8026428:	681e      	ldr	r6, [r3, #0]
 802642a:	6006      	str	r6, [r0, #0]
 802642c:	685e      	ldr	r6, [r3, #4]
 802642e:	6046      	str	r6, [r0, #4]
 8026430:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8026434:	f8a3 e002 	strh.w	lr, [r3, #2]
 8026438:	f8a3 c004 	strh.w	ip, [r3, #4]
 802643c:	80df      	strh	r7, [r3, #6]
 802643e:	f1a1 0308 	sub.w	r3, r1, #8
 8026442:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 8026446:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802644a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802644e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8026452:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8026456:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802645a:	4565      	cmp	r5, ip
 802645c:	da0f      	bge.n	802647e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802645e:	681d      	ldr	r5, [r3, #0]
 8026460:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8026464:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8026468:	6015      	str	r5, [r2, #0]
 802646a:	685d      	ldr	r5, [r3, #4]
 802646c:	6055      	str	r5, [r2, #4]
 802646e:	f821 7c08 	strh.w	r7, [r1, #-8]
 8026472:	f821 6c06 	strh.w	r6, [r1, #-6]
 8026476:	f821 ec04 	strh.w	lr, [r1, #-4]
 802647a:	f821 cc02 	strh.w	ip, [r1, #-2]
 802647e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8026482:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8026486:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 802648a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802648e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8026492:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8026496:	45ac      	cmp	ip, r5
 8026498:	da0d      	bge.n	80264b6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802649a:	6815      	ldr	r5, [r2, #0]
 802649c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80264a0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80264a4:	6005      	str	r5, [r0, #0]
 80264a6:	6855      	ldr	r5, [r2, #4]
 80264a8:	8107      	strh	r7, [r0, #8]
 80264aa:	6045      	str	r5, [r0, #4]
 80264ac:	8146      	strh	r6, [r0, #10]
 80264ae:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80264b2:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80264b6:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 80264ba:	f9b0 7000 	ldrsh.w	r7, [r0]
 80264be:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80264c2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80264c6:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80264ca:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80264ce:	4565      	cmp	r5, ip
 80264d0:	da0f      	bge.n	80264f2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80264d2:	681d      	ldr	r5, [r3, #0]
 80264d4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80264d8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80264dc:	6005      	str	r5, [r0, #0]
 80264de:	685d      	ldr	r5, [r3, #4]
 80264e0:	6045      	str	r5, [r0, #4]
 80264e2:	f821 7c08 	strh.w	r7, [r1, #-8]
 80264e6:	f821 6c06 	strh.w	r6, [r1, #-6]
 80264ea:	f821 ec04 	strh.w	lr, [r1, #-4]
 80264ee:	f821 cc02 	strh.w	ip, [r1, #-2]
 80264f2:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 80264f6:	f102 0508 	add.w	r5, r2, #8
 80264fa:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 80264fe:	f9b0 e000 	ldrsh.w	lr, [r0]
 8026502:	462f      	mov	r7, r5
 8026504:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8026508:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 802650c:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8026510:	4556      	cmp	r6, sl
 8026512:	db18      	blt.n	8026546 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8026514:	3b08      	subs	r3, #8
 8026516:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802651a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802651e:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8026522:	45b2      	cmp	sl, r6
 8026524:	dbf6      	blt.n	8026514 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8026526:	42ab      	cmp	r3, r5
 8026528:	681e      	ldr	r6, [r3, #0]
 802652a:	d30e      	bcc.n	802654a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 802652c:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8026530:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8026534:	602e      	str	r6, [r5, #0]
 8026536:	685e      	ldr	r6, [r3, #4]
 8026538:	606e      	str	r6, [r5, #4]
 802653a:	f8a3 9000 	strh.w	r9, [r3]
 802653e:	f8a3 8002 	strh.w	r8, [r3, #2]
 8026542:	809f      	strh	r7, [r3, #4]
 8026544:	80da      	strh	r2, [r3, #6]
 8026546:	462a      	mov	r2, r5
 8026548:	e7d3      	b.n	80264f2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802654a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802654e:	6006      	str	r6, [r0, #0]
 8026550:	685e      	ldr	r6, [r3, #4]
 8026552:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8026556:	6046      	str	r6, [r0, #4]
 8026558:	1a1e      	subs	r6, r3, r0
 802655a:	80da      	strh	r2, [r3, #6]
 802655c:	1b4a      	subs	r2, r1, r5
 802655e:	f8a3 e000 	strh.w	lr, [r3]
 8026562:	10d2      	asrs	r2, r2, #3
 8026564:	f8a3 c002 	strh.w	ip, [r3, #2]
 8026568:	f8a3 8004 	strh.w	r8, [r3, #4]
 802656c:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8026570:	bfb5      	itete	lt
 8026572:	e9c4 0300 	strdlt	r0, r3, [r4]
 8026576:	4607      	movge	r7, r0
 8026578:	460b      	movlt	r3, r1
 802657a:	e9c4 5100 	strdge	r5, r1, [r4]
 802657e:	4638      	mov	r0, r7
 8026580:	3408      	adds	r4, #8
 8026582:	4619      	mov	r1, r3
 8026584:	e73f      	b.n	8026406 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8026586:	4291      	cmp	r1, r2
 8026588:	d925      	bls.n	80265d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802658a:	f1a2 0310 	sub.w	r3, r2, #16
 802658e:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8026592:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8026596:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 802659a:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802659e:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 80265a2:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80265a6:	42ae      	cmp	r6, r5
 80265a8:	da13      	bge.n	80265d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 80265aa:	461d      	mov	r5, r3
 80265ac:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80265b0:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 80265b4:	3b08      	subs	r3, #8
 80265b6:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80265ba:	619e      	str	r6, [r3, #24]
 80265bc:	42a8      	cmp	r0, r5
 80265be:	686e      	ldr	r6, [r5, #4]
 80265c0:	f8a3 c010 	strh.w	ip, [r3, #16]
 80265c4:	61de      	str	r6, [r3, #28]
 80265c6:	825f      	strh	r7, [r3, #18]
 80265c8:	f8a3 8014 	strh.w	r8, [r3, #20]
 80265cc:	f8a3 e016 	strh.w	lr, [r3, #22]
 80265d0:	d1dd      	bne.n	802658e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 80265d2:	3208      	adds	r2, #8
 80265d4:	e7d7      	b.n	8026586 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80265d6:	466b      	mov	r3, sp
 80265d8:	429c      	cmp	r4, r3
 80265da:	d903      	bls.n	80265e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 80265dc:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80265e0:	3c08      	subs	r4, #8
 80265e2:	e710      	b.n	8026406 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80265e4:	b051      	add	sp, #324	; 0x144
 80265e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080265ea <_ZN8touchgfx7Outline9sortCellsEv>:
 80265ea:	6881      	ldr	r1, [r0, #8]
 80265ec:	b111      	cbz	r1, 80265f4 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 80265ee:	68c0      	ldr	r0, [r0, #12]
 80265f0:	f7ff bf03 	b.w	80263fa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80265f4:	4770      	bx	lr

080265f6 <_ZN8touchgfx7Outline8getCellsEv>:
 80265f6:	b510      	push	{r4, lr}
 80265f8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80265fa:	4604      	mov	r4, r0
 80265fc:	07da      	lsls	r2, r3, #31
 80265fe:	d507      	bpl.n	8026610 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8026600:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8026604:	f7ff fe82 	bl	802630c <_ZN8touchgfx7Outline6lineToEii>
 8026608:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802660a:	f023 0301 	bic.w	r3, r3, #1
 802660e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8026610:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8026612:	079b      	lsls	r3, r3, #30
 8026614:	d51a      	bpl.n	802664c <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8026616:	8b62      	ldrh	r2, [r4, #26]
 8026618:	8b23      	ldrh	r3, [r4, #24]
 802661a:	4313      	orrs	r3, r2
 802661c:	d00d      	beq.n	802663a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802661e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8026622:	2b00      	cmp	r3, #0
 8026624:	db09      	blt.n	802663a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8026626:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8026628:	4293      	cmp	r3, r2
 802662a:	da06      	bge.n	802663a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802662c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8026630:	429a      	cmp	r2, r3
 8026632:	d80d      	bhi.n	8026650 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8026634:	2301      	movs	r3, #1
 8026636:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802663a:	68a0      	ldr	r0, [r4, #8]
 802663c:	b138      	cbz	r0, 802664e <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802663e:	4620      	mov	r0, r4
 8026640:	f7ff ffd3 	bl	80265ea <_ZN8touchgfx7Outline9sortCellsEv>
 8026644:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8026646:	f023 0302 	bic.w	r3, r3, #2
 802664a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802664c:	68e0      	ldr	r0, [r4, #12]
 802664e:	bd10      	pop	{r4, pc}
 8026650:	f104 0314 	add.w	r3, r4, #20
 8026654:	6922      	ldr	r2, [r4, #16]
 8026656:	cb03      	ldmia	r3!, {r0, r1}
 8026658:	6010      	str	r0, [r2, #0]
 802665a:	6051      	str	r1, [r2, #4]
 802665c:	6923      	ldr	r3, [r4, #16]
 802665e:	3308      	adds	r3, #8
 8026660:	6123      	str	r3, [r4, #16]
 8026662:	68a3      	ldr	r3, [r4, #8]
 8026664:	3301      	adds	r3, #1
 8026666:	60a3      	str	r3, [r4, #8]
 8026668:	e7e7      	b.n	802663a <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802666a <_ZN8touchgfx8ScanlineD1Ev>:
 802666a:	4770      	bx	lr

0802666c <_ZN8touchgfx8ScanlineD0Ev>:
 802666c:	b510      	push	{r4, lr}
 802666e:	4604      	mov	r4, r0
 8026670:	2124      	movs	r1, #36	; 0x24
 8026672:	f000 f888 	bl	8026786 <_ZdlPvj>
 8026676:	4620      	mov	r0, r4
 8026678:	bd10      	pop	{r4, pc}

0802667a <_ZN8touchgfx8Scanline5resetEv>:
 802667a:	b510      	push	{r4, lr}
 802667c:	4604      	mov	r4, r0
 802667e:	f7f1 fc2d 	bl	8017edc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8026682:	61a0      	str	r0, [r4, #24]
 8026684:	f7f1 fc30 	bl	8017ee8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8026688:	61e0      	str	r0, [r4, #28]
 802668a:	f7f1 fc33 	bl	8017ef4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802668e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8026692:	6220      	str	r0, [r4, #32]
 8026694:	6160      	str	r0, [r4, #20]
 8026696:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802669a:	69e3      	ldr	r3, [r4, #28]
 802669c:	6123      	str	r3, [r4, #16]
 802669e:	2300      	movs	r3, #0
 80266a0:	60e3      	str	r3, [r4, #12]
 80266a2:	bd10      	pop	{r4, pc}

080266a4 <_ZN8touchgfx8ScanlineC1Ev>:
 80266a4:	4b09      	ldr	r3, [pc, #36]	; (80266cc <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 80266a6:	b510      	push	{r4, lr}
 80266a8:	6003      	str	r3, [r0, #0]
 80266aa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80266ae:	4604      	mov	r4, r0
 80266b0:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80266b4:	2300      	movs	r3, #0
 80266b6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80266ba:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80266be:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80266c2:	f7ff ffda 	bl	802667a <_ZN8touchgfx8Scanline5resetEv>
 80266c6:	4620      	mov	r0, r4
 80266c8:	bd10      	pop	{r4, pc}
 80266ca:	bf00      	nop
 80266cc:	0802f464 	.word	0x0802f464

080266d0 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 80266d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80266d4:	1e0c      	subs	r4, r1, #0
 80266d6:	4605      	mov	r5, r0
 80266d8:	4617      	mov	r7, r2
 80266da:	461e      	mov	r6, r3
 80266dc:	da03      	bge.n	80266e6 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 80266de:	4426      	add	r6, r4
 80266e0:	2e01      	cmp	r6, #1
 80266e2:	d421      	bmi.n	8026728 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80266e4:	2400      	movs	r4, #0
 80266e6:	f7f1 fbf3 	bl	8017ed0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80266ea:	42a0      	cmp	r0, r4
 80266ec:	dd1c      	ble.n	8026728 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80266ee:	eb04 0806 	add.w	r8, r4, r6
 80266f2:	f7f1 fbed 	bl	8017ed0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80266f6:	4580      	cmp	r8, r0
 80266f8:	d902      	bls.n	8026700 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 80266fa:	f7f1 fbe9 	bl	8017ed0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80266fe:	1b06      	subs	r6, r0, r4
 8026700:	69a8      	ldr	r0, [r5, #24]
 8026702:	4632      	mov	r2, r6
 8026704:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8026708:	4420      	add	r0, r4
 802670a:	f7f4 f92f 	bl	801a96c <_ZN8touchgfx6memsetEPvhm>
 802670e:	686b      	ldr	r3, [r5, #4]
 8026710:	b2b2      	uxth	r2, r6
 8026712:	3301      	adds	r3, #1
 8026714:	42a3      	cmp	r3, r4
 8026716:	696b      	ldr	r3, [r5, #20]
 8026718:	d108      	bne.n	802672c <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802671a:	8819      	ldrh	r1, [r3, #0]
 802671c:	440a      	add	r2, r1
 802671e:	801a      	strh	r2, [r3, #0]
 8026720:	3c01      	subs	r4, #1
 8026722:	4434      	add	r4, r6
 8026724:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8026728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802672c:	1c99      	adds	r1, r3, #2
 802672e:	6169      	str	r1, [r5, #20]
 8026730:	805a      	strh	r2, [r3, #2]
 8026732:	692b      	ldr	r3, [r5, #16]
 8026734:	1c9a      	adds	r2, r3, #2
 8026736:	612a      	str	r2, [r5, #16]
 8026738:	805c      	strh	r4, [r3, #2]
 802673a:	68eb      	ldr	r3, [r5, #12]
 802673c:	3301      	adds	r3, #1
 802673e:	60eb      	str	r3, [r5, #12]
 8026740:	e7ee      	b.n	8026720 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08026742 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8026742:	4770      	bx	lr

08026744 <_ZN8touchgfx15RenderingBufferD0Ev>:
 8026744:	b510      	push	{r4, lr}
 8026746:	4604      	mov	r4, r0
 8026748:	2118      	movs	r1, #24
 802674a:	f000 f81c 	bl	8026786 <_ZdlPvj>
 802674e:	4620      	mov	r0, r4
 8026750:	bd10      	pop	{r4, pc}
	...

08026754 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8026754:	4a04      	ldr	r2, [pc, #16]	; (8026768 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 8026756:	6002      	str	r2, [r0, #0]
 8026758:	2200      	movs	r2, #0
 802675a:	6042      	str	r2, [r0, #4]
 802675c:	7202      	strb	r2, [r0, #8]
 802675e:	6142      	str	r2, [r0, #20]
 8026760:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8026764:	4770      	bx	lr
 8026766:	bf00      	nop
 8026768:	0802f474 	.word	0x0802f474

0802676c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802676c:	60c3      	str	r3, [r0, #12]
 802676e:	9b00      	ldr	r3, [sp, #0]
 8026770:	6041      	str	r1, [r0, #4]
 8026772:	6103      	str	r3, [r0, #16]
 8026774:	9b01      	ldr	r3, [sp, #4]
 8026776:	7202      	strb	r2, [r0, #8]
 8026778:	6143      	str	r3, [r0, #20]
 802677a:	4770      	bx	lr

0802677c <__aeabi_atexit>:
 802677c:	460b      	mov	r3, r1
 802677e:	4601      	mov	r1, r0
 8026780:	4618      	mov	r0, r3
 8026782:	f000 b959 	b.w	8026a38 <__cxa_atexit>

08026786 <_ZdlPvj>:
 8026786:	f000 b812 	b.w	80267ae <_ZdlPv>

0802678a <__cxa_guard_acquire>:
 802678a:	6803      	ldr	r3, [r0, #0]
 802678c:	07db      	lsls	r3, r3, #31
 802678e:	d406      	bmi.n	802679e <__cxa_guard_acquire+0x14>
 8026790:	7843      	ldrb	r3, [r0, #1]
 8026792:	b103      	cbz	r3, 8026796 <__cxa_guard_acquire+0xc>
 8026794:	deff      	udf	#255	; 0xff
 8026796:	2301      	movs	r3, #1
 8026798:	7043      	strb	r3, [r0, #1]
 802679a:	4618      	mov	r0, r3
 802679c:	4770      	bx	lr
 802679e:	2000      	movs	r0, #0
 80267a0:	4770      	bx	lr

080267a2 <__cxa_guard_release>:
 80267a2:	2301      	movs	r3, #1
 80267a4:	6003      	str	r3, [r0, #0]
 80267a6:	4770      	bx	lr

080267a8 <__cxa_pure_virtual>:
 80267a8:	b508      	push	{r3, lr}
 80267aa:	f000 f80f 	bl	80267cc <_ZSt9terminatev>

080267ae <_ZdlPv>:
 80267ae:	f000 b995 	b.w	8026adc <free>

080267b2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80267b2:	b508      	push	{r3, lr}
 80267b4:	4780      	blx	r0
 80267b6:	f000 f913 	bl	80269e0 <abort>
	...

080267bc <_ZSt13get_terminatev>:
 80267bc:	4b02      	ldr	r3, [pc, #8]	; (80267c8 <_ZSt13get_terminatev+0xc>)
 80267be:	6818      	ldr	r0, [r3, #0]
 80267c0:	f3bf 8f5b 	dmb	ish
 80267c4:	4770      	bx	lr
 80267c6:	bf00      	nop
 80267c8:	20000078 	.word	0x20000078

080267cc <_ZSt9terminatev>:
 80267cc:	b508      	push	{r3, lr}
 80267ce:	f7ff fff5 	bl	80267bc <_ZSt13get_terminatev>
 80267d2:	f7ff ffee 	bl	80267b2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080267d8 <ceil>:
 80267d8:	ee10 1a90 	vmov	r1, s1
 80267dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80267e0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80267e4:	2b13      	cmp	r3, #19
 80267e6:	b530      	push	{r4, r5, lr}
 80267e8:	ee10 0a10 	vmov	r0, s0
 80267ec:	ee10 5a10 	vmov	r5, s0
 80267f0:	dc2f      	bgt.n	8026852 <ceil+0x7a>
 80267f2:	2b00      	cmp	r3, #0
 80267f4:	da13      	bge.n	802681e <ceil+0x46>
 80267f6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80268b8 <ceil+0xe0>
 80267fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80267fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8026802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026806:	dd05      	ble.n	8026814 <ceil+0x3c>
 8026808:	2900      	cmp	r1, #0
 802680a:	db4c      	blt.n	80268a6 <ceil+0xce>
 802680c:	4301      	orrs	r1, r0
 802680e:	d04e      	beq.n	80268ae <ceil+0xd6>
 8026810:	492b      	ldr	r1, [pc, #172]	; (80268c0 <ceil+0xe8>)
 8026812:	2000      	movs	r0, #0
 8026814:	460b      	mov	r3, r1
 8026816:	4602      	mov	r2, r0
 8026818:	ec43 2b10 	vmov	d0, r2, r3
 802681c:	e020      	b.n	8026860 <ceil+0x88>
 802681e:	4a29      	ldr	r2, [pc, #164]	; (80268c4 <ceil+0xec>)
 8026820:	411a      	asrs	r2, r3
 8026822:	ea01 0402 	and.w	r4, r1, r2
 8026826:	4304      	orrs	r4, r0
 8026828:	d01a      	beq.n	8026860 <ceil+0x88>
 802682a:	ed9f 7b23 	vldr	d7, [pc, #140]	; 80268b8 <ceil+0xe0>
 802682e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8026832:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8026836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802683a:	ddeb      	ble.n	8026814 <ceil+0x3c>
 802683c:	2900      	cmp	r1, #0
 802683e:	bfc2      	ittt	gt
 8026840:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8026844:	fa40 f303 	asrgt.w	r3, r0, r3
 8026848:	18c9      	addgt	r1, r1, r3
 802684a:	ea21 0102 	bic.w	r1, r1, r2
 802684e:	2000      	movs	r0, #0
 8026850:	e7e0      	b.n	8026814 <ceil+0x3c>
 8026852:	2b33      	cmp	r3, #51	; 0x33
 8026854:	dd05      	ble.n	8026862 <ceil+0x8a>
 8026856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802685a:	d101      	bne.n	8026860 <ceil+0x88>
 802685c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8026860:	bd30      	pop	{r4, r5, pc}
 8026862:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8026866:	f04f 32ff 	mov.w	r2, #4294967295
 802686a:	40e2      	lsrs	r2, r4
 802686c:	4202      	tst	r2, r0
 802686e:	d0f7      	beq.n	8026860 <ceil+0x88>
 8026870:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80268b8 <ceil+0xe0>
 8026874:	ee30 0b07 	vadd.f64	d0, d0, d7
 8026878:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802687c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026880:	ddc8      	ble.n	8026814 <ceil+0x3c>
 8026882:	2900      	cmp	r1, #0
 8026884:	dd02      	ble.n	802688c <ceil+0xb4>
 8026886:	2b14      	cmp	r3, #20
 8026888:	d103      	bne.n	8026892 <ceil+0xba>
 802688a:	3101      	adds	r1, #1
 802688c:	ea20 0002 	bic.w	r0, r0, r2
 8026890:	e7c0      	b.n	8026814 <ceil+0x3c>
 8026892:	2401      	movs	r4, #1
 8026894:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8026898:	fa04 f303 	lsl.w	r3, r4, r3
 802689c:	4418      	add	r0, r3
 802689e:	42a8      	cmp	r0, r5
 80268a0:	bf38      	it	cc
 80268a2:	1909      	addcc	r1, r1, r4
 80268a4:	e7f2      	b.n	802688c <ceil+0xb4>
 80268a6:	2000      	movs	r0, #0
 80268a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80268ac:	e7b2      	b.n	8026814 <ceil+0x3c>
 80268ae:	4608      	mov	r0, r1
 80268b0:	e7b0      	b.n	8026814 <ceil+0x3c>
 80268b2:	bf00      	nop
 80268b4:	f3af 8000 	nop.w
 80268b8:	8800759c 	.word	0x8800759c
 80268bc:	7e37e43c 	.word	0x7e37e43c
 80268c0:	3ff00000 	.word	0x3ff00000
 80268c4:	000fffff 	.word	0x000fffff

080268c8 <fmin>:
 80268c8:	b508      	push	{r3, lr}
 80268ca:	ed2d 8b04 	vpush	{d8-d9}
 80268ce:	eeb0 8b40 	vmov.f64	d8, d0
 80268d2:	eeb0 9b41 	vmov.f64	d9, d1
 80268d6:	f000 f813 	bl	8026900 <__fpclassifyd>
 80268da:	b148      	cbz	r0, 80268f0 <fmin+0x28>
 80268dc:	eeb0 0b49 	vmov.f64	d0, d9
 80268e0:	f000 f80e 	bl	8026900 <__fpclassifyd>
 80268e4:	b130      	cbz	r0, 80268f4 <fmin+0x2c>
 80268e6:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80268ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80268ee:	d401      	bmi.n	80268f4 <fmin+0x2c>
 80268f0:	eeb0 8b49 	vmov.f64	d8, d9
 80268f4:	eeb0 0b48 	vmov.f64	d0, d8
 80268f8:	ecbd 8b04 	vpop	{d8-d9}
 80268fc:	bd08      	pop	{r3, pc}
	...

08026900 <__fpclassifyd>:
 8026900:	ec51 0b10 	vmov	r0, r1, d0
 8026904:	b510      	push	{r4, lr}
 8026906:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 802690a:	460b      	mov	r3, r1
 802690c:	d019      	beq.n	8026942 <__fpclassifyd+0x42>
 802690e:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8026912:	490e      	ldr	r1, [pc, #56]	; (802694c <__fpclassifyd+0x4c>)
 8026914:	428a      	cmp	r2, r1
 8026916:	d90e      	bls.n	8026936 <__fpclassifyd+0x36>
 8026918:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 802691c:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8026920:	428a      	cmp	r2, r1
 8026922:	d908      	bls.n	8026936 <__fpclassifyd+0x36>
 8026924:	4a0a      	ldr	r2, [pc, #40]	; (8026950 <__fpclassifyd+0x50>)
 8026926:	4213      	tst	r3, r2
 8026928:	d007      	beq.n	802693a <__fpclassifyd+0x3a>
 802692a:	4294      	cmp	r4, r2
 802692c:	d107      	bne.n	802693e <__fpclassifyd+0x3e>
 802692e:	fab0 f080 	clz	r0, r0
 8026932:	0940      	lsrs	r0, r0, #5
 8026934:	bd10      	pop	{r4, pc}
 8026936:	2004      	movs	r0, #4
 8026938:	e7fc      	b.n	8026934 <__fpclassifyd+0x34>
 802693a:	2003      	movs	r0, #3
 802693c:	e7fa      	b.n	8026934 <__fpclassifyd+0x34>
 802693e:	2000      	movs	r0, #0
 8026940:	e7f8      	b.n	8026934 <__fpclassifyd+0x34>
 8026942:	2800      	cmp	r0, #0
 8026944:	d1ee      	bne.n	8026924 <__fpclassifyd+0x24>
 8026946:	2002      	movs	r0, #2
 8026948:	e7f4      	b.n	8026934 <__fpclassifyd+0x34>
 802694a:	bf00      	nop
 802694c:	7fdfffff 	.word	0x7fdfffff
 8026950:	7ff00000 	.word	0x7ff00000

08026954 <round>:
 8026954:	ee10 1a90 	vmov	r1, s1
 8026958:	f3c1 500a 	ubfx	r0, r1, #20, #11
 802695c:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 8026960:	2a13      	cmp	r2, #19
 8026962:	b510      	push	{r4, lr}
 8026964:	ee10 3a10 	vmov	r3, s0
 8026968:	dc19      	bgt.n	802699e <round+0x4a>
 802696a:	2a00      	cmp	r2, #0
 802696c:	da09      	bge.n	8026982 <round+0x2e>
 802696e:	3201      	adds	r2, #1
 8026970:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8026974:	d103      	bne.n	802697e <round+0x2a>
 8026976:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 802697a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 802697e:	2000      	movs	r0, #0
 8026980:	e027      	b.n	80269d2 <round+0x7e>
 8026982:	4816      	ldr	r0, [pc, #88]	; (80269dc <round+0x88>)
 8026984:	4110      	asrs	r0, r2
 8026986:	ea01 0400 	and.w	r4, r1, r0
 802698a:	4323      	orrs	r3, r4
 802698c:	d00e      	beq.n	80269ac <round+0x58>
 802698e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8026992:	fa43 f202 	asr.w	r2, r3, r2
 8026996:	4411      	add	r1, r2
 8026998:	ea21 0100 	bic.w	r1, r1, r0
 802699c:	e7ef      	b.n	802697e <round+0x2a>
 802699e:	2a33      	cmp	r2, #51	; 0x33
 80269a0:	dd05      	ble.n	80269ae <round+0x5a>
 80269a2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80269a6:	d101      	bne.n	80269ac <round+0x58>
 80269a8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80269ac:	bd10      	pop	{r4, pc}
 80269ae:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 80269b2:	f04f 30ff 	mov.w	r0, #4294967295
 80269b6:	fa20 f404 	lsr.w	r4, r0, r4
 80269ba:	4223      	tst	r3, r4
 80269bc:	d0f6      	beq.n	80269ac <round+0x58>
 80269be:	2001      	movs	r0, #1
 80269c0:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 80269c4:	fa00 f202 	lsl.w	r2, r0, r2
 80269c8:	189b      	adds	r3, r3, r2
 80269ca:	bf28      	it	cs
 80269cc:	1809      	addcs	r1, r1, r0
 80269ce:	ea23 0004 	bic.w	r0, r3, r4
 80269d2:	460b      	mov	r3, r1
 80269d4:	4602      	mov	r2, r0
 80269d6:	ec43 2b10 	vmov	d0, r2, r3
 80269da:	e7e7      	b.n	80269ac <round+0x58>
 80269dc:	000fffff 	.word	0x000fffff

080269e0 <abort>:
 80269e0:	b508      	push	{r3, lr}
 80269e2:	2006      	movs	r0, #6
 80269e4:	f001 f920 	bl	8027c28 <raise>
 80269e8:	2001      	movs	r0, #1
 80269ea:	f7dc fa8d 	bl	8002f08 <_exit>
	...

080269f0 <__assert_func>:
 80269f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80269f2:	4614      	mov	r4, r2
 80269f4:	461a      	mov	r2, r3
 80269f6:	4b09      	ldr	r3, [pc, #36]	; (8026a1c <__assert_func+0x2c>)
 80269f8:	681b      	ldr	r3, [r3, #0]
 80269fa:	4605      	mov	r5, r0
 80269fc:	68d8      	ldr	r0, [r3, #12]
 80269fe:	b14c      	cbz	r4, 8026a14 <__assert_func+0x24>
 8026a00:	4b07      	ldr	r3, [pc, #28]	; (8026a20 <__assert_func+0x30>)
 8026a02:	9100      	str	r1, [sp, #0]
 8026a04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026a08:	4906      	ldr	r1, [pc, #24]	; (8026a24 <__assert_func+0x34>)
 8026a0a:	462b      	mov	r3, r5
 8026a0c:	f000 f828 	bl	8026a60 <fiprintf>
 8026a10:	f7ff ffe6 	bl	80269e0 <abort>
 8026a14:	4b04      	ldr	r3, [pc, #16]	; (8026a28 <__assert_func+0x38>)
 8026a16:	461c      	mov	r4, r3
 8026a18:	e7f3      	b.n	8026a02 <__assert_func+0x12>
 8026a1a:	bf00      	nop
 8026a1c:	2000007c 	.word	0x2000007c
 8026a20:	0802f47c 	.word	0x0802f47c
 8026a24:	0802f489 	.word	0x0802f489
 8026a28:	0802f4b7 	.word	0x0802f4b7

08026a2c <atexit>:
 8026a2c:	2300      	movs	r3, #0
 8026a2e:	4601      	mov	r1, r0
 8026a30:	461a      	mov	r2, r3
 8026a32:	4618      	mov	r0, r3
 8026a34:	f002 b872 	b.w	8028b1c <__register_exitproc>

08026a38 <__cxa_atexit>:
 8026a38:	b510      	push	{r4, lr}
 8026a3a:	4c05      	ldr	r4, [pc, #20]	; (8026a50 <__cxa_atexit+0x18>)
 8026a3c:	4613      	mov	r3, r2
 8026a3e:	b12c      	cbz	r4, 8026a4c <__cxa_atexit+0x14>
 8026a40:	460a      	mov	r2, r1
 8026a42:	4601      	mov	r1, r0
 8026a44:	2002      	movs	r0, #2
 8026a46:	f002 f869 	bl	8028b1c <__register_exitproc>
 8026a4a:	bd10      	pop	{r4, pc}
 8026a4c:	4620      	mov	r0, r4
 8026a4e:	e7fc      	b.n	8026a4a <__cxa_atexit+0x12>
 8026a50:	08028b1d 	.word	0x08028b1d

08026a54 <__errno>:
 8026a54:	4b01      	ldr	r3, [pc, #4]	; (8026a5c <__errno+0x8>)
 8026a56:	6818      	ldr	r0, [r3, #0]
 8026a58:	4770      	bx	lr
 8026a5a:	bf00      	nop
 8026a5c:	2000007c 	.word	0x2000007c

08026a60 <fiprintf>:
 8026a60:	b40e      	push	{r1, r2, r3}
 8026a62:	b503      	push	{r0, r1, lr}
 8026a64:	4601      	mov	r1, r0
 8026a66:	ab03      	add	r3, sp, #12
 8026a68:	4805      	ldr	r0, [pc, #20]	; (8026a80 <fiprintf+0x20>)
 8026a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8026a6e:	6800      	ldr	r0, [r0, #0]
 8026a70:	9301      	str	r3, [sp, #4]
 8026a72:	f000 f925 	bl	8026cc0 <_vfiprintf_r>
 8026a76:	b002      	add	sp, #8
 8026a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8026a7c:	b003      	add	sp, #12
 8026a7e:	4770      	bx	lr
 8026a80:	2000007c 	.word	0x2000007c

08026a84 <__libc_init_array>:
 8026a84:	b570      	push	{r4, r5, r6, lr}
 8026a86:	4d0d      	ldr	r5, [pc, #52]	; (8026abc <__libc_init_array+0x38>)
 8026a88:	4c0d      	ldr	r4, [pc, #52]	; (8026ac0 <__libc_init_array+0x3c>)
 8026a8a:	1b64      	subs	r4, r4, r5
 8026a8c:	10a4      	asrs	r4, r4, #2
 8026a8e:	2600      	movs	r6, #0
 8026a90:	42a6      	cmp	r6, r4
 8026a92:	d109      	bne.n	8026aa8 <__libc_init_array+0x24>
 8026a94:	4d0b      	ldr	r5, [pc, #44]	; (8026ac4 <__libc_init_array+0x40>)
 8026a96:	4c0c      	ldr	r4, [pc, #48]	; (8026ac8 <__libc_init_array+0x44>)
 8026a98:	f004 fba0 	bl	802b1dc <_init>
 8026a9c:	1b64      	subs	r4, r4, r5
 8026a9e:	10a4      	asrs	r4, r4, #2
 8026aa0:	2600      	movs	r6, #0
 8026aa2:	42a6      	cmp	r6, r4
 8026aa4:	d105      	bne.n	8026ab2 <__libc_init_array+0x2e>
 8026aa6:	bd70      	pop	{r4, r5, r6, pc}
 8026aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8026aac:	4798      	blx	r3
 8026aae:	3601      	adds	r6, #1
 8026ab0:	e7ee      	b.n	8026a90 <__libc_init_array+0xc>
 8026ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8026ab6:	4798      	blx	r3
 8026ab8:	3601      	adds	r6, #1
 8026aba:	e7f2      	b.n	8026aa2 <__libc_init_array+0x1e>
 8026abc:	080d999c 	.word	0x080d999c
 8026ac0:	080d999c 	.word	0x080d999c
 8026ac4:	080d999c 	.word	0x080d999c
 8026ac8:	080d99cc 	.word	0x080d99cc

08026acc <malloc>:
 8026acc:	4b02      	ldr	r3, [pc, #8]	; (8026ad8 <malloc+0xc>)
 8026ace:	4601      	mov	r1, r0
 8026ad0:	6818      	ldr	r0, [r3, #0]
 8026ad2:	f000 b871 	b.w	8026bb8 <_malloc_r>
 8026ad6:	bf00      	nop
 8026ad8:	2000007c 	.word	0x2000007c

08026adc <free>:
 8026adc:	4b02      	ldr	r3, [pc, #8]	; (8026ae8 <free+0xc>)
 8026ade:	4601      	mov	r1, r0
 8026ae0:	6818      	ldr	r0, [r3, #0]
 8026ae2:	f000 b819 	b.w	8026b18 <_free_r>
 8026ae6:	bf00      	nop
 8026ae8:	2000007c 	.word	0x2000007c

08026aec <memcpy>:
 8026aec:	440a      	add	r2, r1
 8026aee:	4291      	cmp	r1, r2
 8026af0:	f100 33ff 	add.w	r3, r0, #4294967295
 8026af4:	d100      	bne.n	8026af8 <memcpy+0xc>
 8026af6:	4770      	bx	lr
 8026af8:	b510      	push	{r4, lr}
 8026afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026afe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026b02:	4291      	cmp	r1, r2
 8026b04:	d1f9      	bne.n	8026afa <memcpy+0xe>
 8026b06:	bd10      	pop	{r4, pc}

08026b08 <memset>:
 8026b08:	4402      	add	r2, r0
 8026b0a:	4603      	mov	r3, r0
 8026b0c:	4293      	cmp	r3, r2
 8026b0e:	d100      	bne.n	8026b12 <memset+0xa>
 8026b10:	4770      	bx	lr
 8026b12:	f803 1b01 	strb.w	r1, [r3], #1
 8026b16:	e7f9      	b.n	8026b0c <memset+0x4>

08026b18 <_free_r>:
 8026b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026b1a:	2900      	cmp	r1, #0
 8026b1c:	d048      	beq.n	8026bb0 <_free_r+0x98>
 8026b1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026b22:	9001      	str	r0, [sp, #4]
 8026b24:	2b00      	cmp	r3, #0
 8026b26:	f1a1 0404 	sub.w	r4, r1, #4
 8026b2a:	bfb8      	it	lt
 8026b2c:	18e4      	addlt	r4, r4, r3
 8026b2e:	f003 fc23 	bl	802a378 <__malloc_lock>
 8026b32:	4a20      	ldr	r2, [pc, #128]	; (8026bb4 <_free_r+0x9c>)
 8026b34:	9801      	ldr	r0, [sp, #4]
 8026b36:	6813      	ldr	r3, [r2, #0]
 8026b38:	4615      	mov	r5, r2
 8026b3a:	b933      	cbnz	r3, 8026b4a <_free_r+0x32>
 8026b3c:	6063      	str	r3, [r4, #4]
 8026b3e:	6014      	str	r4, [r2, #0]
 8026b40:	b003      	add	sp, #12
 8026b42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026b46:	f003 bc1d 	b.w	802a384 <__malloc_unlock>
 8026b4a:	42a3      	cmp	r3, r4
 8026b4c:	d90b      	bls.n	8026b66 <_free_r+0x4e>
 8026b4e:	6821      	ldr	r1, [r4, #0]
 8026b50:	1862      	adds	r2, r4, r1
 8026b52:	4293      	cmp	r3, r2
 8026b54:	bf04      	itt	eq
 8026b56:	681a      	ldreq	r2, [r3, #0]
 8026b58:	685b      	ldreq	r3, [r3, #4]
 8026b5a:	6063      	str	r3, [r4, #4]
 8026b5c:	bf04      	itt	eq
 8026b5e:	1852      	addeq	r2, r2, r1
 8026b60:	6022      	streq	r2, [r4, #0]
 8026b62:	602c      	str	r4, [r5, #0]
 8026b64:	e7ec      	b.n	8026b40 <_free_r+0x28>
 8026b66:	461a      	mov	r2, r3
 8026b68:	685b      	ldr	r3, [r3, #4]
 8026b6a:	b10b      	cbz	r3, 8026b70 <_free_r+0x58>
 8026b6c:	42a3      	cmp	r3, r4
 8026b6e:	d9fa      	bls.n	8026b66 <_free_r+0x4e>
 8026b70:	6811      	ldr	r1, [r2, #0]
 8026b72:	1855      	adds	r5, r2, r1
 8026b74:	42a5      	cmp	r5, r4
 8026b76:	d10b      	bne.n	8026b90 <_free_r+0x78>
 8026b78:	6824      	ldr	r4, [r4, #0]
 8026b7a:	4421      	add	r1, r4
 8026b7c:	1854      	adds	r4, r2, r1
 8026b7e:	42a3      	cmp	r3, r4
 8026b80:	6011      	str	r1, [r2, #0]
 8026b82:	d1dd      	bne.n	8026b40 <_free_r+0x28>
 8026b84:	681c      	ldr	r4, [r3, #0]
 8026b86:	685b      	ldr	r3, [r3, #4]
 8026b88:	6053      	str	r3, [r2, #4]
 8026b8a:	4421      	add	r1, r4
 8026b8c:	6011      	str	r1, [r2, #0]
 8026b8e:	e7d7      	b.n	8026b40 <_free_r+0x28>
 8026b90:	d902      	bls.n	8026b98 <_free_r+0x80>
 8026b92:	230c      	movs	r3, #12
 8026b94:	6003      	str	r3, [r0, #0]
 8026b96:	e7d3      	b.n	8026b40 <_free_r+0x28>
 8026b98:	6825      	ldr	r5, [r4, #0]
 8026b9a:	1961      	adds	r1, r4, r5
 8026b9c:	428b      	cmp	r3, r1
 8026b9e:	bf04      	itt	eq
 8026ba0:	6819      	ldreq	r1, [r3, #0]
 8026ba2:	685b      	ldreq	r3, [r3, #4]
 8026ba4:	6063      	str	r3, [r4, #4]
 8026ba6:	bf04      	itt	eq
 8026ba8:	1949      	addeq	r1, r1, r5
 8026baa:	6021      	streq	r1, [r4, #0]
 8026bac:	6054      	str	r4, [r2, #4]
 8026bae:	e7c7      	b.n	8026b40 <_free_r+0x28>
 8026bb0:	b003      	add	sp, #12
 8026bb2:	bd30      	pop	{r4, r5, pc}
 8026bb4:	20056878 	.word	0x20056878

08026bb8 <_malloc_r>:
 8026bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026bba:	1ccd      	adds	r5, r1, #3
 8026bbc:	f025 0503 	bic.w	r5, r5, #3
 8026bc0:	3508      	adds	r5, #8
 8026bc2:	2d0c      	cmp	r5, #12
 8026bc4:	bf38      	it	cc
 8026bc6:	250c      	movcc	r5, #12
 8026bc8:	2d00      	cmp	r5, #0
 8026bca:	4606      	mov	r6, r0
 8026bcc:	db01      	blt.n	8026bd2 <_malloc_r+0x1a>
 8026bce:	42a9      	cmp	r1, r5
 8026bd0:	d903      	bls.n	8026bda <_malloc_r+0x22>
 8026bd2:	230c      	movs	r3, #12
 8026bd4:	6033      	str	r3, [r6, #0]
 8026bd6:	2000      	movs	r0, #0
 8026bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026bda:	f003 fbcd 	bl	802a378 <__malloc_lock>
 8026bde:	4921      	ldr	r1, [pc, #132]	; (8026c64 <_malloc_r+0xac>)
 8026be0:	680a      	ldr	r2, [r1, #0]
 8026be2:	4614      	mov	r4, r2
 8026be4:	b99c      	cbnz	r4, 8026c0e <_malloc_r+0x56>
 8026be6:	4f20      	ldr	r7, [pc, #128]	; (8026c68 <_malloc_r+0xb0>)
 8026be8:	683b      	ldr	r3, [r7, #0]
 8026bea:	b923      	cbnz	r3, 8026bf6 <_malloc_r+0x3e>
 8026bec:	4621      	mov	r1, r4
 8026bee:	4630      	mov	r0, r6
 8026bf0:	f000 ffdc 	bl	8027bac <_sbrk_r>
 8026bf4:	6038      	str	r0, [r7, #0]
 8026bf6:	4629      	mov	r1, r5
 8026bf8:	4630      	mov	r0, r6
 8026bfa:	f000 ffd7 	bl	8027bac <_sbrk_r>
 8026bfe:	1c43      	adds	r3, r0, #1
 8026c00:	d123      	bne.n	8026c4a <_malloc_r+0x92>
 8026c02:	230c      	movs	r3, #12
 8026c04:	6033      	str	r3, [r6, #0]
 8026c06:	4630      	mov	r0, r6
 8026c08:	f003 fbbc 	bl	802a384 <__malloc_unlock>
 8026c0c:	e7e3      	b.n	8026bd6 <_malloc_r+0x1e>
 8026c0e:	6823      	ldr	r3, [r4, #0]
 8026c10:	1b5b      	subs	r3, r3, r5
 8026c12:	d417      	bmi.n	8026c44 <_malloc_r+0x8c>
 8026c14:	2b0b      	cmp	r3, #11
 8026c16:	d903      	bls.n	8026c20 <_malloc_r+0x68>
 8026c18:	6023      	str	r3, [r4, #0]
 8026c1a:	441c      	add	r4, r3
 8026c1c:	6025      	str	r5, [r4, #0]
 8026c1e:	e004      	b.n	8026c2a <_malloc_r+0x72>
 8026c20:	6863      	ldr	r3, [r4, #4]
 8026c22:	42a2      	cmp	r2, r4
 8026c24:	bf0c      	ite	eq
 8026c26:	600b      	streq	r3, [r1, #0]
 8026c28:	6053      	strne	r3, [r2, #4]
 8026c2a:	4630      	mov	r0, r6
 8026c2c:	f003 fbaa 	bl	802a384 <__malloc_unlock>
 8026c30:	f104 000b 	add.w	r0, r4, #11
 8026c34:	1d23      	adds	r3, r4, #4
 8026c36:	f020 0007 	bic.w	r0, r0, #7
 8026c3a:	1ac2      	subs	r2, r0, r3
 8026c3c:	d0cc      	beq.n	8026bd8 <_malloc_r+0x20>
 8026c3e:	1a1b      	subs	r3, r3, r0
 8026c40:	50a3      	str	r3, [r4, r2]
 8026c42:	e7c9      	b.n	8026bd8 <_malloc_r+0x20>
 8026c44:	4622      	mov	r2, r4
 8026c46:	6864      	ldr	r4, [r4, #4]
 8026c48:	e7cc      	b.n	8026be4 <_malloc_r+0x2c>
 8026c4a:	1cc4      	adds	r4, r0, #3
 8026c4c:	f024 0403 	bic.w	r4, r4, #3
 8026c50:	42a0      	cmp	r0, r4
 8026c52:	d0e3      	beq.n	8026c1c <_malloc_r+0x64>
 8026c54:	1a21      	subs	r1, r4, r0
 8026c56:	4630      	mov	r0, r6
 8026c58:	f000 ffa8 	bl	8027bac <_sbrk_r>
 8026c5c:	3001      	adds	r0, #1
 8026c5e:	d1dd      	bne.n	8026c1c <_malloc_r+0x64>
 8026c60:	e7cf      	b.n	8026c02 <_malloc_r+0x4a>
 8026c62:	bf00      	nop
 8026c64:	20056878 	.word	0x20056878
 8026c68:	2005687c 	.word	0x2005687c

08026c6c <__sfputc_r>:
 8026c6c:	6893      	ldr	r3, [r2, #8]
 8026c6e:	3b01      	subs	r3, #1
 8026c70:	2b00      	cmp	r3, #0
 8026c72:	b410      	push	{r4}
 8026c74:	6093      	str	r3, [r2, #8]
 8026c76:	da08      	bge.n	8026c8a <__sfputc_r+0x1e>
 8026c78:	6994      	ldr	r4, [r2, #24]
 8026c7a:	42a3      	cmp	r3, r4
 8026c7c:	db01      	blt.n	8026c82 <__sfputc_r+0x16>
 8026c7e:	290a      	cmp	r1, #10
 8026c80:	d103      	bne.n	8026c8a <__sfputc_r+0x1e>
 8026c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026c86:	f001 be89 	b.w	802899c <__swbuf_r>
 8026c8a:	6813      	ldr	r3, [r2, #0]
 8026c8c:	1c58      	adds	r0, r3, #1
 8026c8e:	6010      	str	r0, [r2, #0]
 8026c90:	7019      	strb	r1, [r3, #0]
 8026c92:	4608      	mov	r0, r1
 8026c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026c98:	4770      	bx	lr

08026c9a <__sfputs_r>:
 8026c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c9c:	4606      	mov	r6, r0
 8026c9e:	460f      	mov	r7, r1
 8026ca0:	4614      	mov	r4, r2
 8026ca2:	18d5      	adds	r5, r2, r3
 8026ca4:	42ac      	cmp	r4, r5
 8026ca6:	d101      	bne.n	8026cac <__sfputs_r+0x12>
 8026ca8:	2000      	movs	r0, #0
 8026caa:	e007      	b.n	8026cbc <__sfputs_r+0x22>
 8026cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026cb0:	463a      	mov	r2, r7
 8026cb2:	4630      	mov	r0, r6
 8026cb4:	f7ff ffda 	bl	8026c6c <__sfputc_r>
 8026cb8:	1c43      	adds	r3, r0, #1
 8026cba:	d1f3      	bne.n	8026ca4 <__sfputs_r+0xa>
 8026cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026cc0 <_vfiprintf_r>:
 8026cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cc4:	460d      	mov	r5, r1
 8026cc6:	b09d      	sub	sp, #116	; 0x74
 8026cc8:	4614      	mov	r4, r2
 8026cca:	4698      	mov	r8, r3
 8026ccc:	4606      	mov	r6, r0
 8026cce:	b118      	cbz	r0, 8026cd8 <_vfiprintf_r+0x18>
 8026cd0:	6983      	ldr	r3, [r0, #24]
 8026cd2:	b90b      	cbnz	r3, 8026cd8 <_vfiprintf_r+0x18>
 8026cd4:	f002 feac 	bl	8029a30 <__sinit>
 8026cd8:	4b89      	ldr	r3, [pc, #548]	; (8026f00 <_vfiprintf_r+0x240>)
 8026cda:	429d      	cmp	r5, r3
 8026cdc:	d11b      	bne.n	8026d16 <_vfiprintf_r+0x56>
 8026cde:	6875      	ldr	r5, [r6, #4]
 8026ce0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026ce2:	07d9      	lsls	r1, r3, #31
 8026ce4:	d405      	bmi.n	8026cf2 <_vfiprintf_r+0x32>
 8026ce6:	89ab      	ldrh	r3, [r5, #12]
 8026ce8:	059a      	lsls	r2, r3, #22
 8026cea:	d402      	bmi.n	8026cf2 <_vfiprintf_r+0x32>
 8026cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026cee:	f003 fab0 	bl	802a252 <__retarget_lock_acquire_recursive>
 8026cf2:	89ab      	ldrh	r3, [r5, #12]
 8026cf4:	071b      	lsls	r3, r3, #28
 8026cf6:	d501      	bpl.n	8026cfc <_vfiprintf_r+0x3c>
 8026cf8:	692b      	ldr	r3, [r5, #16]
 8026cfa:	b9eb      	cbnz	r3, 8026d38 <_vfiprintf_r+0x78>
 8026cfc:	4629      	mov	r1, r5
 8026cfe:	4630      	mov	r0, r6
 8026d00:	f001 fe9e 	bl	8028a40 <__swsetup_r>
 8026d04:	b1c0      	cbz	r0, 8026d38 <_vfiprintf_r+0x78>
 8026d06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026d08:	07dc      	lsls	r4, r3, #31
 8026d0a:	d50e      	bpl.n	8026d2a <_vfiprintf_r+0x6a>
 8026d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8026d10:	b01d      	add	sp, #116	; 0x74
 8026d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d16:	4b7b      	ldr	r3, [pc, #492]	; (8026f04 <_vfiprintf_r+0x244>)
 8026d18:	429d      	cmp	r5, r3
 8026d1a:	d101      	bne.n	8026d20 <_vfiprintf_r+0x60>
 8026d1c:	68b5      	ldr	r5, [r6, #8]
 8026d1e:	e7df      	b.n	8026ce0 <_vfiprintf_r+0x20>
 8026d20:	4b79      	ldr	r3, [pc, #484]	; (8026f08 <_vfiprintf_r+0x248>)
 8026d22:	429d      	cmp	r5, r3
 8026d24:	bf08      	it	eq
 8026d26:	68f5      	ldreq	r5, [r6, #12]
 8026d28:	e7da      	b.n	8026ce0 <_vfiprintf_r+0x20>
 8026d2a:	89ab      	ldrh	r3, [r5, #12]
 8026d2c:	0598      	lsls	r0, r3, #22
 8026d2e:	d4ed      	bmi.n	8026d0c <_vfiprintf_r+0x4c>
 8026d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026d32:	f003 fa90 	bl	802a256 <__retarget_lock_release_recursive>
 8026d36:	e7e9      	b.n	8026d0c <_vfiprintf_r+0x4c>
 8026d38:	2300      	movs	r3, #0
 8026d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8026d3c:	2320      	movs	r3, #32
 8026d3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026d42:	f8cd 800c 	str.w	r8, [sp, #12]
 8026d46:	2330      	movs	r3, #48	; 0x30
 8026d48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8026f0c <_vfiprintf_r+0x24c>
 8026d4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026d50:	f04f 0901 	mov.w	r9, #1
 8026d54:	4623      	mov	r3, r4
 8026d56:	469a      	mov	sl, r3
 8026d58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026d5c:	b10a      	cbz	r2, 8026d62 <_vfiprintf_r+0xa2>
 8026d5e:	2a25      	cmp	r2, #37	; 0x25
 8026d60:	d1f9      	bne.n	8026d56 <_vfiprintf_r+0x96>
 8026d62:	ebba 0b04 	subs.w	fp, sl, r4
 8026d66:	d00b      	beq.n	8026d80 <_vfiprintf_r+0xc0>
 8026d68:	465b      	mov	r3, fp
 8026d6a:	4622      	mov	r2, r4
 8026d6c:	4629      	mov	r1, r5
 8026d6e:	4630      	mov	r0, r6
 8026d70:	f7ff ff93 	bl	8026c9a <__sfputs_r>
 8026d74:	3001      	adds	r0, #1
 8026d76:	f000 80aa 	beq.w	8026ece <_vfiprintf_r+0x20e>
 8026d7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026d7c:	445a      	add	r2, fp
 8026d7e:	9209      	str	r2, [sp, #36]	; 0x24
 8026d80:	f89a 3000 	ldrb.w	r3, [sl]
 8026d84:	2b00      	cmp	r3, #0
 8026d86:	f000 80a2 	beq.w	8026ece <_vfiprintf_r+0x20e>
 8026d8a:	2300      	movs	r3, #0
 8026d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8026d90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026d94:	f10a 0a01 	add.w	sl, sl, #1
 8026d98:	9304      	str	r3, [sp, #16]
 8026d9a:	9307      	str	r3, [sp, #28]
 8026d9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026da0:	931a      	str	r3, [sp, #104]	; 0x68
 8026da2:	4654      	mov	r4, sl
 8026da4:	2205      	movs	r2, #5
 8026da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026daa:	4858      	ldr	r0, [pc, #352]	; (8026f0c <_vfiprintf_r+0x24c>)
 8026dac:	f7d9 fa50 	bl	8000250 <memchr>
 8026db0:	9a04      	ldr	r2, [sp, #16]
 8026db2:	b9d8      	cbnz	r0, 8026dec <_vfiprintf_r+0x12c>
 8026db4:	06d1      	lsls	r1, r2, #27
 8026db6:	bf44      	itt	mi
 8026db8:	2320      	movmi	r3, #32
 8026dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026dbe:	0713      	lsls	r3, r2, #28
 8026dc0:	bf44      	itt	mi
 8026dc2:	232b      	movmi	r3, #43	; 0x2b
 8026dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8026dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8026dce:	d015      	beq.n	8026dfc <_vfiprintf_r+0x13c>
 8026dd0:	9a07      	ldr	r2, [sp, #28]
 8026dd2:	4654      	mov	r4, sl
 8026dd4:	2000      	movs	r0, #0
 8026dd6:	f04f 0c0a 	mov.w	ip, #10
 8026dda:	4621      	mov	r1, r4
 8026ddc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026de0:	3b30      	subs	r3, #48	; 0x30
 8026de2:	2b09      	cmp	r3, #9
 8026de4:	d94e      	bls.n	8026e84 <_vfiprintf_r+0x1c4>
 8026de6:	b1b0      	cbz	r0, 8026e16 <_vfiprintf_r+0x156>
 8026de8:	9207      	str	r2, [sp, #28]
 8026dea:	e014      	b.n	8026e16 <_vfiprintf_r+0x156>
 8026dec:	eba0 0308 	sub.w	r3, r0, r8
 8026df0:	fa09 f303 	lsl.w	r3, r9, r3
 8026df4:	4313      	orrs	r3, r2
 8026df6:	9304      	str	r3, [sp, #16]
 8026df8:	46a2      	mov	sl, r4
 8026dfa:	e7d2      	b.n	8026da2 <_vfiprintf_r+0xe2>
 8026dfc:	9b03      	ldr	r3, [sp, #12]
 8026dfe:	1d19      	adds	r1, r3, #4
 8026e00:	681b      	ldr	r3, [r3, #0]
 8026e02:	9103      	str	r1, [sp, #12]
 8026e04:	2b00      	cmp	r3, #0
 8026e06:	bfbb      	ittet	lt
 8026e08:	425b      	neglt	r3, r3
 8026e0a:	f042 0202 	orrlt.w	r2, r2, #2
 8026e0e:	9307      	strge	r3, [sp, #28]
 8026e10:	9307      	strlt	r3, [sp, #28]
 8026e12:	bfb8      	it	lt
 8026e14:	9204      	strlt	r2, [sp, #16]
 8026e16:	7823      	ldrb	r3, [r4, #0]
 8026e18:	2b2e      	cmp	r3, #46	; 0x2e
 8026e1a:	d10c      	bne.n	8026e36 <_vfiprintf_r+0x176>
 8026e1c:	7863      	ldrb	r3, [r4, #1]
 8026e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8026e20:	d135      	bne.n	8026e8e <_vfiprintf_r+0x1ce>
 8026e22:	9b03      	ldr	r3, [sp, #12]
 8026e24:	1d1a      	adds	r2, r3, #4
 8026e26:	681b      	ldr	r3, [r3, #0]
 8026e28:	9203      	str	r2, [sp, #12]
 8026e2a:	2b00      	cmp	r3, #0
 8026e2c:	bfb8      	it	lt
 8026e2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8026e32:	3402      	adds	r4, #2
 8026e34:	9305      	str	r3, [sp, #20]
 8026e36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8026f1c <_vfiprintf_r+0x25c>
 8026e3a:	7821      	ldrb	r1, [r4, #0]
 8026e3c:	2203      	movs	r2, #3
 8026e3e:	4650      	mov	r0, sl
 8026e40:	f7d9 fa06 	bl	8000250 <memchr>
 8026e44:	b140      	cbz	r0, 8026e58 <_vfiprintf_r+0x198>
 8026e46:	2340      	movs	r3, #64	; 0x40
 8026e48:	eba0 000a 	sub.w	r0, r0, sl
 8026e4c:	fa03 f000 	lsl.w	r0, r3, r0
 8026e50:	9b04      	ldr	r3, [sp, #16]
 8026e52:	4303      	orrs	r3, r0
 8026e54:	3401      	adds	r4, #1
 8026e56:	9304      	str	r3, [sp, #16]
 8026e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026e5c:	482c      	ldr	r0, [pc, #176]	; (8026f10 <_vfiprintf_r+0x250>)
 8026e5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026e62:	2206      	movs	r2, #6
 8026e64:	f7d9 f9f4 	bl	8000250 <memchr>
 8026e68:	2800      	cmp	r0, #0
 8026e6a:	d03f      	beq.n	8026eec <_vfiprintf_r+0x22c>
 8026e6c:	4b29      	ldr	r3, [pc, #164]	; (8026f14 <_vfiprintf_r+0x254>)
 8026e6e:	bb1b      	cbnz	r3, 8026eb8 <_vfiprintf_r+0x1f8>
 8026e70:	9b03      	ldr	r3, [sp, #12]
 8026e72:	3307      	adds	r3, #7
 8026e74:	f023 0307 	bic.w	r3, r3, #7
 8026e78:	3308      	adds	r3, #8
 8026e7a:	9303      	str	r3, [sp, #12]
 8026e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e7e:	443b      	add	r3, r7
 8026e80:	9309      	str	r3, [sp, #36]	; 0x24
 8026e82:	e767      	b.n	8026d54 <_vfiprintf_r+0x94>
 8026e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8026e88:	460c      	mov	r4, r1
 8026e8a:	2001      	movs	r0, #1
 8026e8c:	e7a5      	b.n	8026dda <_vfiprintf_r+0x11a>
 8026e8e:	2300      	movs	r3, #0
 8026e90:	3401      	adds	r4, #1
 8026e92:	9305      	str	r3, [sp, #20]
 8026e94:	4619      	mov	r1, r3
 8026e96:	f04f 0c0a 	mov.w	ip, #10
 8026e9a:	4620      	mov	r0, r4
 8026e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026ea0:	3a30      	subs	r2, #48	; 0x30
 8026ea2:	2a09      	cmp	r2, #9
 8026ea4:	d903      	bls.n	8026eae <_vfiprintf_r+0x1ee>
 8026ea6:	2b00      	cmp	r3, #0
 8026ea8:	d0c5      	beq.n	8026e36 <_vfiprintf_r+0x176>
 8026eaa:	9105      	str	r1, [sp, #20]
 8026eac:	e7c3      	b.n	8026e36 <_vfiprintf_r+0x176>
 8026eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8026eb2:	4604      	mov	r4, r0
 8026eb4:	2301      	movs	r3, #1
 8026eb6:	e7f0      	b.n	8026e9a <_vfiprintf_r+0x1da>
 8026eb8:	ab03      	add	r3, sp, #12
 8026eba:	9300      	str	r3, [sp, #0]
 8026ebc:	462a      	mov	r2, r5
 8026ebe:	4b16      	ldr	r3, [pc, #88]	; (8026f18 <_vfiprintf_r+0x258>)
 8026ec0:	a904      	add	r1, sp, #16
 8026ec2:	4630      	mov	r0, r6
 8026ec4:	f000 f8bc 	bl	8027040 <_printf_float>
 8026ec8:	4607      	mov	r7, r0
 8026eca:	1c78      	adds	r0, r7, #1
 8026ecc:	d1d6      	bne.n	8026e7c <_vfiprintf_r+0x1bc>
 8026ece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026ed0:	07d9      	lsls	r1, r3, #31
 8026ed2:	d405      	bmi.n	8026ee0 <_vfiprintf_r+0x220>
 8026ed4:	89ab      	ldrh	r3, [r5, #12]
 8026ed6:	059a      	lsls	r2, r3, #22
 8026ed8:	d402      	bmi.n	8026ee0 <_vfiprintf_r+0x220>
 8026eda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026edc:	f003 f9bb 	bl	802a256 <__retarget_lock_release_recursive>
 8026ee0:	89ab      	ldrh	r3, [r5, #12]
 8026ee2:	065b      	lsls	r3, r3, #25
 8026ee4:	f53f af12 	bmi.w	8026d0c <_vfiprintf_r+0x4c>
 8026ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026eea:	e711      	b.n	8026d10 <_vfiprintf_r+0x50>
 8026eec:	ab03      	add	r3, sp, #12
 8026eee:	9300      	str	r3, [sp, #0]
 8026ef0:	462a      	mov	r2, r5
 8026ef2:	4b09      	ldr	r3, [pc, #36]	; (8026f18 <_vfiprintf_r+0x258>)
 8026ef4:	a904      	add	r1, sp, #16
 8026ef6:	4630      	mov	r0, r6
 8026ef8:	f000 fb2e 	bl	8027558 <_printf_i>
 8026efc:	e7e4      	b.n	8026ec8 <_vfiprintf_r+0x208>
 8026efe:	bf00      	nop
 8026f00:	0802f710 	.word	0x0802f710
 8026f04:	0802f730 	.word	0x0802f730
 8026f08:	0802f6f0 	.word	0x0802f6f0
 8026f0c:	0802f4bc 	.word	0x0802f4bc
 8026f10:	0802f4c6 	.word	0x0802f4c6
 8026f14:	08027041 	.word	0x08027041
 8026f18:	08026c9b 	.word	0x08026c9b
 8026f1c:	0802f4c2 	.word	0x0802f4c2

08026f20 <__cvt>:
 8026f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026f22:	ed2d 8b02 	vpush	{d8}
 8026f26:	eeb0 8b40 	vmov.f64	d8, d0
 8026f2a:	b085      	sub	sp, #20
 8026f2c:	4617      	mov	r7, r2
 8026f2e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026f30:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8026f32:	ee18 2a90 	vmov	r2, s17
 8026f36:	f025 0520 	bic.w	r5, r5, #32
 8026f3a:	2a00      	cmp	r2, #0
 8026f3c:	bfb6      	itet	lt
 8026f3e:	222d      	movlt	r2, #45	; 0x2d
 8026f40:	2200      	movge	r2, #0
 8026f42:	eeb1 8b40 	vneglt.f64	d8, d0
 8026f46:	2d46      	cmp	r5, #70	; 0x46
 8026f48:	460c      	mov	r4, r1
 8026f4a:	701a      	strb	r2, [r3, #0]
 8026f4c:	d004      	beq.n	8026f58 <__cvt+0x38>
 8026f4e:	2d45      	cmp	r5, #69	; 0x45
 8026f50:	d100      	bne.n	8026f54 <__cvt+0x34>
 8026f52:	3401      	adds	r4, #1
 8026f54:	2102      	movs	r1, #2
 8026f56:	e000      	b.n	8026f5a <__cvt+0x3a>
 8026f58:	2103      	movs	r1, #3
 8026f5a:	ab03      	add	r3, sp, #12
 8026f5c:	9301      	str	r3, [sp, #4]
 8026f5e:	ab02      	add	r3, sp, #8
 8026f60:	9300      	str	r3, [sp, #0]
 8026f62:	4622      	mov	r2, r4
 8026f64:	4633      	mov	r3, r6
 8026f66:	eeb0 0b48 	vmov.f64	d0, d8
 8026f6a:	f001 fec5 	bl	8028cf8 <_dtoa_r>
 8026f6e:	2d47      	cmp	r5, #71	; 0x47
 8026f70:	d109      	bne.n	8026f86 <__cvt+0x66>
 8026f72:	07fb      	lsls	r3, r7, #31
 8026f74:	d407      	bmi.n	8026f86 <__cvt+0x66>
 8026f76:	9b03      	ldr	r3, [sp, #12]
 8026f78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026f7a:	1a1b      	subs	r3, r3, r0
 8026f7c:	6013      	str	r3, [r2, #0]
 8026f7e:	b005      	add	sp, #20
 8026f80:	ecbd 8b02 	vpop	{d8}
 8026f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026f86:	2d46      	cmp	r5, #70	; 0x46
 8026f88:	eb00 0204 	add.w	r2, r0, r4
 8026f8c:	d10c      	bne.n	8026fa8 <__cvt+0x88>
 8026f8e:	7803      	ldrb	r3, [r0, #0]
 8026f90:	2b30      	cmp	r3, #48	; 0x30
 8026f92:	d107      	bne.n	8026fa4 <__cvt+0x84>
 8026f94:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f9c:	bf1c      	itt	ne
 8026f9e:	f1c4 0401 	rsbne	r4, r4, #1
 8026fa2:	6034      	strne	r4, [r6, #0]
 8026fa4:	6833      	ldr	r3, [r6, #0]
 8026fa6:	441a      	add	r2, r3
 8026fa8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026fb0:	bf08      	it	eq
 8026fb2:	9203      	streq	r2, [sp, #12]
 8026fb4:	2130      	movs	r1, #48	; 0x30
 8026fb6:	9b03      	ldr	r3, [sp, #12]
 8026fb8:	4293      	cmp	r3, r2
 8026fba:	d2dc      	bcs.n	8026f76 <__cvt+0x56>
 8026fbc:	1c5c      	adds	r4, r3, #1
 8026fbe:	9403      	str	r4, [sp, #12]
 8026fc0:	7019      	strb	r1, [r3, #0]
 8026fc2:	e7f8      	b.n	8026fb6 <__cvt+0x96>

08026fc4 <__exponent>:
 8026fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026fc6:	4603      	mov	r3, r0
 8026fc8:	2900      	cmp	r1, #0
 8026fca:	bfb8      	it	lt
 8026fcc:	4249      	neglt	r1, r1
 8026fce:	f803 2b02 	strb.w	r2, [r3], #2
 8026fd2:	bfb4      	ite	lt
 8026fd4:	222d      	movlt	r2, #45	; 0x2d
 8026fd6:	222b      	movge	r2, #43	; 0x2b
 8026fd8:	2909      	cmp	r1, #9
 8026fda:	7042      	strb	r2, [r0, #1]
 8026fdc:	dd2a      	ble.n	8027034 <__exponent+0x70>
 8026fde:	f10d 0407 	add.w	r4, sp, #7
 8026fe2:	46a4      	mov	ip, r4
 8026fe4:	270a      	movs	r7, #10
 8026fe6:	46a6      	mov	lr, r4
 8026fe8:	460a      	mov	r2, r1
 8026fea:	fb91 f6f7 	sdiv	r6, r1, r7
 8026fee:	fb07 1516 	mls	r5, r7, r6, r1
 8026ff2:	3530      	adds	r5, #48	; 0x30
 8026ff4:	2a63      	cmp	r2, #99	; 0x63
 8026ff6:	f104 34ff 	add.w	r4, r4, #4294967295
 8026ffa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8026ffe:	4631      	mov	r1, r6
 8027000:	dcf1      	bgt.n	8026fe6 <__exponent+0x22>
 8027002:	3130      	adds	r1, #48	; 0x30
 8027004:	f1ae 0502 	sub.w	r5, lr, #2
 8027008:	f804 1c01 	strb.w	r1, [r4, #-1]
 802700c:	1c44      	adds	r4, r0, #1
 802700e:	4629      	mov	r1, r5
 8027010:	4561      	cmp	r1, ip
 8027012:	d30a      	bcc.n	802702a <__exponent+0x66>
 8027014:	f10d 0209 	add.w	r2, sp, #9
 8027018:	eba2 020e 	sub.w	r2, r2, lr
 802701c:	4565      	cmp	r5, ip
 802701e:	bf88      	it	hi
 8027020:	2200      	movhi	r2, #0
 8027022:	4413      	add	r3, r2
 8027024:	1a18      	subs	r0, r3, r0
 8027026:	b003      	add	sp, #12
 8027028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802702a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802702e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8027032:	e7ed      	b.n	8027010 <__exponent+0x4c>
 8027034:	2330      	movs	r3, #48	; 0x30
 8027036:	3130      	adds	r1, #48	; 0x30
 8027038:	7083      	strb	r3, [r0, #2]
 802703a:	70c1      	strb	r1, [r0, #3]
 802703c:	1d03      	adds	r3, r0, #4
 802703e:	e7f1      	b.n	8027024 <__exponent+0x60>

08027040 <_printf_float>:
 8027040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027044:	b08b      	sub	sp, #44	; 0x2c
 8027046:	460c      	mov	r4, r1
 8027048:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802704c:	4616      	mov	r6, r2
 802704e:	461f      	mov	r7, r3
 8027050:	4605      	mov	r5, r0
 8027052:	f003 f8f9 	bl	802a248 <_localeconv_r>
 8027056:	f8d0 b000 	ldr.w	fp, [r0]
 802705a:	4658      	mov	r0, fp
 802705c:	f7d9 f8f0 	bl	8000240 <strlen>
 8027060:	2300      	movs	r3, #0
 8027062:	9308      	str	r3, [sp, #32]
 8027064:	f8d8 3000 	ldr.w	r3, [r8]
 8027068:	f894 9018 	ldrb.w	r9, [r4, #24]
 802706c:	6822      	ldr	r2, [r4, #0]
 802706e:	3307      	adds	r3, #7
 8027070:	f023 0307 	bic.w	r3, r3, #7
 8027074:	f103 0108 	add.w	r1, r3, #8
 8027078:	f8c8 1000 	str.w	r1, [r8]
 802707c:	4682      	mov	sl, r0
 802707e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027082:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8027086:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80272e8 <_printf_float+0x2a8>
 802708a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 802708e:	eeb0 6bc0 	vabs.f64	d6, d0
 8027092:	eeb4 6b47 	vcmp.f64	d6, d7
 8027096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802709a:	dd24      	ble.n	80270e6 <_printf_float+0xa6>
 802709c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80270a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80270a4:	d502      	bpl.n	80270ac <_printf_float+0x6c>
 80270a6:	232d      	movs	r3, #45	; 0x2d
 80270a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80270ac:	4b90      	ldr	r3, [pc, #576]	; (80272f0 <_printf_float+0x2b0>)
 80270ae:	4891      	ldr	r0, [pc, #580]	; (80272f4 <_printf_float+0x2b4>)
 80270b0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80270b4:	bf94      	ite	ls
 80270b6:	4698      	movls	r8, r3
 80270b8:	4680      	movhi	r8, r0
 80270ba:	2303      	movs	r3, #3
 80270bc:	6123      	str	r3, [r4, #16]
 80270be:	f022 0204 	bic.w	r2, r2, #4
 80270c2:	2300      	movs	r3, #0
 80270c4:	6022      	str	r2, [r4, #0]
 80270c6:	9304      	str	r3, [sp, #16]
 80270c8:	9700      	str	r7, [sp, #0]
 80270ca:	4633      	mov	r3, r6
 80270cc:	aa09      	add	r2, sp, #36	; 0x24
 80270ce:	4621      	mov	r1, r4
 80270d0:	4628      	mov	r0, r5
 80270d2:	f000 f9d3 	bl	802747c <_printf_common>
 80270d6:	3001      	adds	r0, #1
 80270d8:	f040 808a 	bne.w	80271f0 <_printf_float+0x1b0>
 80270dc:	f04f 30ff 	mov.w	r0, #4294967295
 80270e0:	b00b      	add	sp, #44	; 0x2c
 80270e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80270e6:	eeb4 0b40 	vcmp.f64	d0, d0
 80270ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80270ee:	d709      	bvc.n	8027104 <_printf_float+0xc4>
 80270f0:	ee10 3a90 	vmov	r3, s1
 80270f4:	2b00      	cmp	r3, #0
 80270f6:	bfbc      	itt	lt
 80270f8:	232d      	movlt	r3, #45	; 0x2d
 80270fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80270fe:	487e      	ldr	r0, [pc, #504]	; (80272f8 <_printf_float+0x2b8>)
 8027100:	4b7e      	ldr	r3, [pc, #504]	; (80272fc <_printf_float+0x2bc>)
 8027102:	e7d5      	b.n	80270b0 <_printf_float+0x70>
 8027104:	6863      	ldr	r3, [r4, #4]
 8027106:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 802710a:	9104      	str	r1, [sp, #16]
 802710c:	1c59      	adds	r1, r3, #1
 802710e:	d13c      	bne.n	802718a <_printf_float+0x14a>
 8027110:	2306      	movs	r3, #6
 8027112:	6063      	str	r3, [r4, #4]
 8027114:	2300      	movs	r3, #0
 8027116:	9303      	str	r3, [sp, #12]
 8027118:	ab08      	add	r3, sp, #32
 802711a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 802711e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8027122:	ab07      	add	r3, sp, #28
 8027124:	6861      	ldr	r1, [r4, #4]
 8027126:	9300      	str	r3, [sp, #0]
 8027128:	6022      	str	r2, [r4, #0]
 802712a:	f10d 031b 	add.w	r3, sp, #27
 802712e:	4628      	mov	r0, r5
 8027130:	f7ff fef6 	bl	8026f20 <__cvt>
 8027134:	9b04      	ldr	r3, [sp, #16]
 8027136:	9907      	ldr	r1, [sp, #28]
 8027138:	2b47      	cmp	r3, #71	; 0x47
 802713a:	4680      	mov	r8, r0
 802713c:	d108      	bne.n	8027150 <_printf_float+0x110>
 802713e:	1cc8      	adds	r0, r1, #3
 8027140:	db02      	blt.n	8027148 <_printf_float+0x108>
 8027142:	6863      	ldr	r3, [r4, #4]
 8027144:	4299      	cmp	r1, r3
 8027146:	dd41      	ble.n	80271cc <_printf_float+0x18c>
 8027148:	f1a9 0902 	sub.w	r9, r9, #2
 802714c:	fa5f f989 	uxtb.w	r9, r9
 8027150:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8027154:	d820      	bhi.n	8027198 <_printf_float+0x158>
 8027156:	3901      	subs	r1, #1
 8027158:	464a      	mov	r2, r9
 802715a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802715e:	9107      	str	r1, [sp, #28]
 8027160:	f7ff ff30 	bl	8026fc4 <__exponent>
 8027164:	9a08      	ldr	r2, [sp, #32]
 8027166:	9004      	str	r0, [sp, #16]
 8027168:	1813      	adds	r3, r2, r0
 802716a:	2a01      	cmp	r2, #1
 802716c:	6123      	str	r3, [r4, #16]
 802716e:	dc02      	bgt.n	8027176 <_printf_float+0x136>
 8027170:	6822      	ldr	r2, [r4, #0]
 8027172:	07d2      	lsls	r2, r2, #31
 8027174:	d501      	bpl.n	802717a <_printf_float+0x13a>
 8027176:	3301      	adds	r3, #1
 8027178:	6123      	str	r3, [r4, #16]
 802717a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 802717e:	2b00      	cmp	r3, #0
 8027180:	d0a2      	beq.n	80270c8 <_printf_float+0x88>
 8027182:	232d      	movs	r3, #45	; 0x2d
 8027184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027188:	e79e      	b.n	80270c8 <_printf_float+0x88>
 802718a:	9904      	ldr	r1, [sp, #16]
 802718c:	2947      	cmp	r1, #71	; 0x47
 802718e:	d1c1      	bne.n	8027114 <_printf_float+0xd4>
 8027190:	2b00      	cmp	r3, #0
 8027192:	d1bf      	bne.n	8027114 <_printf_float+0xd4>
 8027194:	2301      	movs	r3, #1
 8027196:	e7bc      	b.n	8027112 <_printf_float+0xd2>
 8027198:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 802719c:	d118      	bne.n	80271d0 <_printf_float+0x190>
 802719e:	2900      	cmp	r1, #0
 80271a0:	6863      	ldr	r3, [r4, #4]
 80271a2:	dd0b      	ble.n	80271bc <_printf_float+0x17c>
 80271a4:	6121      	str	r1, [r4, #16]
 80271a6:	b913      	cbnz	r3, 80271ae <_printf_float+0x16e>
 80271a8:	6822      	ldr	r2, [r4, #0]
 80271aa:	07d0      	lsls	r0, r2, #31
 80271ac:	d502      	bpl.n	80271b4 <_printf_float+0x174>
 80271ae:	3301      	adds	r3, #1
 80271b0:	440b      	add	r3, r1
 80271b2:	6123      	str	r3, [r4, #16]
 80271b4:	2300      	movs	r3, #0
 80271b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80271b8:	9304      	str	r3, [sp, #16]
 80271ba:	e7de      	b.n	802717a <_printf_float+0x13a>
 80271bc:	b913      	cbnz	r3, 80271c4 <_printf_float+0x184>
 80271be:	6822      	ldr	r2, [r4, #0]
 80271c0:	07d2      	lsls	r2, r2, #31
 80271c2:	d501      	bpl.n	80271c8 <_printf_float+0x188>
 80271c4:	3302      	adds	r3, #2
 80271c6:	e7f4      	b.n	80271b2 <_printf_float+0x172>
 80271c8:	2301      	movs	r3, #1
 80271ca:	e7f2      	b.n	80271b2 <_printf_float+0x172>
 80271cc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80271d0:	9b08      	ldr	r3, [sp, #32]
 80271d2:	4299      	cmp	r1, r3
 80271d4:	db05      	blt.n	80271e2 <_printf_float+0x1a2>
 80271d6:	6823      	ldr	r3, [r4, #0]
 80271d8:	6121      	str	r1, [r4, #16]
 80271da:	07d8      	lsls	r0, r3, #31
 80271dc:	d5ea      	bpl.n	80271b4 <_printf_float+0x174>
 80271de:	1c4b      	adds	r3, r1, #1
 80271e0:	e7e7      	b.n	80271b2 <_printf_float+0x172>
 80271e2:	2900      	cmp	r1, #0
 80271e4:	bfd4      	ite	le
 80271e6:	f1c1 0202 	rsble	r2, r1, #2
 80271ea:	2201      	movgt	r2, #1
 80271ec:	4413      	add	r3, r2
 80271ee:	e7e0      	b.n	80271b2 <_printf_float+0x172>
 80271f0:	6823      	ldr	r3, [r4, #0]
 80271f2:	055a      	lsls	r2, r3, #21
 80271f4:	d407      	bmi.n	8027206 <_printf_float+0x1c6>
 80271f6:	6923      	ldr	r3, [r4, #16]
 80271f8:	4642      	mov	r2, r8
 80271fa:	4631      	mov	r1, r6
 80271fc:	4628      	mov	r0, r5
 80271fe:	47b8      	blx	r7
 8027200:	3001      	adds	r0, #1
 8027202:	d12a      	bne.n	802725a <_printf_float+0x21a>
 8027204:	e76a      	b.n	80270dc <_printf_float+0x9c>
 8027206:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 802720a:	f240 80e2 	bls.w	80273d2 <_printf_float+0x392>
 802720e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8027212:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8027216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802721a:	d133      	bne.n	8027284 <_printf_float+0x244>
 802721c:	4a38      	ldr	r2, [pc, #224]	; (8027300 <_printf_float+0x2c0>)
 802721e:	2301      	movs	r3, #1
 8027220:	4631      	mov	r1, r6
 8027222:	4628      	mov	r0, r5
 8027224:	47b8      	blx	r7
 8027226:	3001      	adds	r0, #1
 8027228:	f43f af58 	beq.w	80270dc <_printf_float+0x9c>
 802722c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8027230:	429a      	cmp	r2, r3
 8027232:	db02      	blt.n	802723a <_printf_float+0x1fa>
 8027234:	6823      	ldr	r3, [r4, #0]
 8027236:	07d8      	lsls	r0, r3, #31
 8027238:	d50f      	bpl.n	802725a <_printf_float+0x21a>
 802723a:	4653      	mov	r3, sl
 802723c:	465a      	mov	r2, fp
 802723e:	4631      	mov	r1, r6
 8027240:	4628      	mov	r0, r5
 8027242:	47b8      	blx	r7
 8027244:	3001      	adds	r0, #1
 8027246:	f43f af49 	beq.w	80270dc <_printf_float+0x9c>
 802724a:	f04f 0800 	mov.w	r8, #0
 802724e:	f104 091a 	add.w	r9, r4, #26
 8027252:	9b08      	ldr	r3, [sp, #32]
 8027254:	3b01      	subs	r3, #1
 8027256:	4543      	cmp	r3, r8
 8027258:	dc09      	bgt.n	802726e <_printf_float+0x22e>
 802725a:	6823      	ldr	r3, [r4, #0]
 802725c:	079b      	lsls	r3, r3, #30
 802725e:	f100 8108 	bmi.w	8027472 <_printf_float+0x432>
 8027262:	68e0      	ldr	r0, [r4, #12]
 8027264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027266:	4298      	cmp	r0, r3
 8027268:	bfb8      	it	lt
 802726a:	4618      	movlt	r0, r3
 802726c:	e738      	b.n	80270e0 <_printf_float+0xa0>
 802726e:	2301      	movs	r3, #1
 8027270:	464a      	mov	r2, r9
 8027272:	4631      	mov	r1, r6
 8027274:	4628      	mov	r0, r5
 8027276:	47b8      	blx	r7
 8027278:	3001      	adds	r0, #1
 802727a:	f43f af2f 	beq.w	80270dc <_printf_float+0x9c>
 802727e:	f108 0801 	add.w	r8, r8, #1
 8027282:	e7e6      	b.n	8027252 <_printf_float+0x212>
 8027284:	9b07      	ldr	r3, [sp, #28]
 8027286:	2b00      	cmp	r3, #0
 8027288:	dc3c      	bgt.n	8027304 <_printf_float+0x2c4>
 802728a:	4a1d      	ldr	r2, [pc, #116]	; (8027300 <_printf_float+0x2c0>)
 802728c:	2301      	movs	r3, #1
 802728e:	4631      	mov	r1, r6
 8027290:	4628      	mov	r0, r5
 8027292:	47b8      	blx	r7
 8027294:	3001      	adds	r0, #1
 8027296:	f43f af21 	beq.w	80270dc <_printf_float+0x9c>
 802729a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802729e:	4313      	orrs	r3, r2
 80272a0:	d102      	bne.n	80272a8 <_printf_float+0x268>
 80272a2:	6823      	ldr	r3, [r4, #0]
 80272a4:	07d9      	lsls	r1, r3, #31
 80272a6:	d5d8      	bpl.n	802725a <_printf_float+0x21a>
 80272a8:	4653      	mov	r3, sl
 80272aa:	465a      	mov	r2, fp
 80272ac:	4631      	mov	r1, r6
 80272ae:	4628      	mov	r0, r5
 80272b0:	47b8      	blx	r7
 80272b2:	3001      	adds	r0, #1
 80272b4:	f43f af12 	beq.w	80270dc <_printf_float+0x9c>
 80272b8:	f04f 0900 	mov.w	r9, #0
 80272bc:	f104 0a1a 	add.w	sl, r4, #26
 80272c0:	9b07      	ldr	r3, [sp, #28]
 80272c2:	425b      	negs	r3, r3
 80272c4:	454b      	cmp	r3, r9
 80272c6:	dc01      	bgt.n	80272cc <_printf_float+0x28c>
 80272c8:	9b08      	ldr	r3, [sp, #32]
 80272ca:	e795      	b.n	80271f8 <_printf_float+0x1b8>
 80272cc:	2301      	movs	r3, #1
 80272ce:	4652      	mov	r2, sl
 80272d0:	4631      	mov	r1, r6
 80272d2:	4628      	mov	r0, r5
 80272d4:	47b8      	blx	r7
 80272d6:	3001      	adds	r0, #1
 80272d8:	f43f af00 	beq.w	80270dc <_printf_float+0x9c>
 80272dc:	f109 0901 	add.w	r9, r9, #1
 80272e0:	e7ee      	b.n	80272c0 <_printf_float+0x280>
 80272e2:	bf00      	nop
 80272e4:	f3af 8000 	nop.w
 80272e8:	ffffffff 	.word	0xffffffff
 80272ec:	7fefffff 	.word	0x7fefffff
 80272f0:	0802f4cd 	.word	0x0802f4cd
 80272f4:	0802f4d1 	.word	0x0802f4d1
 80272f8:	0802f4d9 	.word	0x0802f4d9
 80272fc:	0802f4d5 	.word	0x0802f4d5
 8027300:	0802e7e2 	.word	0x0802e7e2
 8027304:	9a08      	ldr	r2, [sp, #32]
 8027306:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8027308:	429a      	cmp	r2, r3
 802730a:	bfa8      	it	ge
 802730c:	461a      	movge	r2, r3
 802730e:	2a00      	cmp	r2, #0
 8027310:	4691      	mov	r9, r2
 8027312:	dc38      	bgt.n	8027386 <_printf_float+0x346>
 8027314:	2300      	movs	r3, #0
 8027316:	9305      	str	r3, [sp, #20]
 8027318:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802731c:	f104 021a 	add.w	r2, r4, #26
 8027320:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8027322:	9905      	ldr	r1, [sp, #20]
 8027324:	9304      	str	r3, [sp, #16]
 8027326:	eba3 0309 	sub.w	r3, r3, r9
 802732a:	428b      	cmp	r3, r1
 802732c:	dc33      	bgt.n	8027396 <_printf_float+0x356>
 802732e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8027332:	429a      	cmp	r2, r3
 8027334:	db3c      	blt.n	80273b0 <_printf_float+0x370>
 8027336:	6823      	ldr	r3, [r4, #0]
 8027338:	07da      	lsls	r2, r3, #31
 802733a:	d439      	bmi.n	80273b0 <_printf_float+0x370>
 802733c:	9a08      	ldr	r2, [sp, #32]
 802733e:	9b04      	ldr	r3, [sp, #16]
 8027340:	9907      	ldr	r1, [sp, #28]
 8027342:	1ad3      	subs	r3, r2, r3
 8027344:	eba2 0901 	sub.w	r9, r2, r1
 8027348:	4599      	cmp	r9, r3
 802734a:	bfa8      	it	ge
 802734c:	4699      	movge	r9, r3
 802734e:	f1b9 0f00 	cmp.w	r9, #0
 8027352:	dc35      	bgt.n	80273c0 <_printf_float+0x380>
 8027354:	f04f 0800 	mov.w	r8, #0
 8027358:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802735c:	f104 0a1a 	add.w	sl, r4, #26
 8027360:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8027364:	1a9b      	subs	r3, r3, r2
 8027366:	eba3 0309 	sub.w	r3, r3, r9
 802736a:	4543      	cmp	r3, r8
 802736c:	f77f af75 	ble.w	802725a <_printf_float+0x21a>
 8027370:	2301      	movs	r3, #1
 8027372:	4652      	mov	r2, sl
 8027374:	4631      	mov	r1, r6
 8027376:	4628      	mov	r0, r5
 8027378:	47b8      	blx	r7
 802737a:	3001      	adds	r0, #1
 802737c:	f43f aeae 	beq.w	80270dc <_printf_float+0x9c>
 8027380:	f108 0801 	add.w	r8, r8, #1
 8027384:	e7ec      	b.n	8027360 <_printf_float+0x320>
 8027386:	4613      	mov	r3, r2
 8027388:	4631      	mov	r1, r6
 802738a:	4642      	mov	r2, r8
 802738c:	4628      	mov	r0, r5
 802738e:	47b8      	blx	r7
 8027390:	3001      	adds	r0, #1
 8027392:	d1bf      	bne.n	8027314 <_printf_float+0x2d4>
 8027394:	e6a2      	b.n	80270dc <_printf_float+0x9c>
 8027396:	2301      	movs	r3, #1
 8027398:	4631      	mov	r1, r6
 802739a:	4628      	mov	r0, r5
 802739c:	9204      	str	r2, [sp, #16]
 802739e:	47b8      	blx	r7
 80273a0:	3001      	adds	r0, #1
 80273a2:	f43f ae9b 	beq.w	80270dc <_printf_float+0x9c>
 80273a6:	9b05      	ldr	r3, [sp, #20]
 80273a8:	9a04      	ldr	r2, [sp, #16]
 80273aa:	3301      	adds	r3, #1
 80273ac:	9305      	str	r3, [sp, #20]
 80273ae:	e7b7      	b.n	8027320 <_printf_float+0x2e0>
 80273b0:	4653      	mov	r3, sl
 80273b2:	465a      	mov	r2, fp
 80273b4:	4631      	mov	r1, r6
 80273b6:	4628      	mov	r0, r5
 80273b8:	47b8      	blx	r7
 80273ba:	3001      	adds	r0, #1
 80273bc:	d1be      	bne.n	802733c <_printf_float+0x2fc>
 80273be:	e68d      	b.n	80270dc <_printf_float+0x9c>
 80273c0:	9a04      	ldr	r2, [sp, #16]
 80273c2:	464b      	mov	r3, r9
 80273c4:	4442      	add	r2, r8
 80273c6:	4631      	mov	r1, r6
 80273c8:	4628      	mov	r0, r5
 80273ca:	47b8      	blx	r7
 80273cc:	3001      	adds	r0, #1
 80273ce:	d1c1      	bne.n	8027354 <_printf_float+0x314>
 80273d0:	e684      	b.n	80270dc <_printf_float+0x9c>
 80273d2:	9a08      	ldr	r2, [sp, #32]
 80273d4:	2a01      	cmp	r2, #1
 80273d6:	dc01      	bgt.n	80273dc <_printf_float+0x39c>
 80273d8:	07db      	lsls	r3, r3, #31
 80273da:	d537      	bpl.n	802744c <_printf_float+0x40c>
 80273dc:	2301      	movs	r3, #1
 80273de:	4642      	mov	r2, r8
 80273e0:	4631      	mov	r1, r6
 80273e2:	4628      	mov	r0, r5
 80273e4:	47b8      	blx	r7
 80273e6:	3001      	adds	r0, #1
 80273e8:	f43f ae78 	beq.w	80270dc <_printf_float+0x9c>
 80273ec:	4653      	mov	r3, sl
 80273ee:	465a      	mov	r2, fp
 80273f0:	4631      	mov	r1, r6
 80273f2:	4628      	mov	r0, r5
 80273f4:	47b8      	blx	r7
 80273f6:	3001      	adds	r0, #1
 80273f8:	f43f ae70 	beq.w	80270dc <_printf_float+0x9c>
 80273fc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8027400:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8027404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027408:	d01b      	beq.n	8027442 <_printf_float+0x402>
 802740a:	9b08      	ldr	r3, [sp, #32]
 802740c:	f108 0201 	add.w	r2, r8, #1
 8027410:	3b01      	subs	r3, #1
 8027412:	4631      	mov	r1, r6
 8027414:	4628      	mov	r0, r5
 8027416:	47b8      	blx	r7
 8027418:	3001      	adds	r0, #1
 802741a:	d10e      	bne.n	802743a <_printf_float+0x3fa>
 802741c:	e65e      	b.n	80270dc <_printf_float+0x9c>
 802741e:	2301      	movs	r3, #1
 8027420:	464a      	mov	r2, r9
 8027422:	4631      	mov	r1, r6
 8027424:	4628      	mov	r0, r5
 8027426:	47b8      	blx	r7
 8027428:	3001      	adds	r0, #1
 802742a:	f43f ae57 	beq.w	80270dc <_printf_float+0x9c>
 802742e:	f108 0801 	add.w	r8, r8, #1
 8027432:	9b08      	ldr	r3, [sp, #32]
 8027434:	3b01      	subs	r3, #1
 8027436:	4543      	cmp	r3, r8
 8027438:	dcf1      	bgt.n	802741e <_printf_float+0x3de>
 802743a:	9b04      	ldr	r3, [sp, #16]
 802743c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8027440:	e6db      	b.n	80271fa <_printf_float+0x1ba>
 8027442:	f04f 0800 	mov.w	r8, #0
 8027446:	f104 091a 	add.w	r9, r4, #26
 802744a:	e7f2      	b.n	8027432 <_printf_float+0x3f2>
 802744c:	2301      	movs	r3, #1
 802744e:	4642      	mov	r2, r8
 8027450:	e7df      	b.n	8027412 <_printf_float+0x3d2>
 8027452:	2301      	movs	r3, #1
 8027454:	464a      	mov	r2, r9
 8027456:	4631      	mov	r1, r6
 8027458:	4628      	mov	r0, r5
 802745a:	47b8      	blx	r7
 802745c:	3001      	adds	r0, #1
 802745e:	f43f ae3d 	beq.w	80270dc <_printf_float+0x9c>
 8027462:	f108 0801 	add.w	r8, r8, #1
 8027466:	68e3      	ldr	r3, [r4, #12]
 8027468:	9909      	ldr	r1, [sp, #36]	; 0x24
 802746a:	1a5b      	subs	r3, r3, r1
 802746c:	4543      	cmp	r3, r8
 802746e:	dcf0      	bgt.n	8027452 <_printf_float+0x412>
 8027470:	e6f7      	b.n	8027262 <_printf_float+0x222>
 8027472:	f04f 0800 	mov.w	r8, #0
 8027476:	f104 0919 	add.w	r9, r4, #25
 802747a:	e7f4      	b.n	8027466 <_printf_float+0x426>

0802747c <_printf_common>:
 802747c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027480:	4616      	mov	r6, r2
 8027482:	4699      	mov	r9, r3
 8027484:	688a      	ldr	r2, [r1, #8]
 8027486:	690b      	ldr	r3, [r1, #16]
 8027488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802748c:	4293      	cmp	r3, r2
 802748e:	bfb8      	it	lt
 8027490:	4613      	movlt	r3, r2
 8027492:	6033      	str	r3, [r6, #0]
 8027494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027498:	4607      	mov	r7, r0
 802749a:	460c      	mov	r4, r1
 802749c:	b10a      	cbz	r2, 80274a2 <_printf_common+0x26>
 802749e:	3301      	adds	r3, #1
 80274a0:	6033      	str	r3, [r6, #0]
 80274a2:	6823      	ldr	r3, [r4, #0]
 80274a4:	0699      	lsls	r1, r3, #26
 80274a6:	bf42      	ittt	mi
 80274a8:	6833      	ldrmi	r3, [r6, #0]
 80274aa:	3302      	addmi	r3, #2
 80274ac:	6033      	strmi	r3, [r6, #0]
 80274ae:	6825      	ldr	r5, [r4, #0]
 80274b0:	f015 0506 	ands.w	r5, r5, #6
 80274b4:	d106      	bne.n	80274c4 <_printf_common+0x48>
 80274b6:	f104 0a19 	add.w	sl, r4, #25
 80274ba:	68e3      	ldr	r3, [r4, #12]
 80274bc:	6832      	ldr	r2, [r6, #0]
 80274be:	1a9b      	subs	r3, r3, r2
 80274c0:	42ab      	cmp	r3, r5
 80274c2:	dc26      	bgt.n	8027512 <_printf_common+0x96>
 80274c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80274c8:	1e13      	subs	r3, r2, #0
 80274ca:	6822      	ldr	r2, [r4, #0]
 80274cc:	bf18      	it	ne
 80274ce:	2301      	movne	r3, #1
 80274d0:	0692      	lsls	r2, r2, #26
 80274d2:	d42b      	bmi.n	802752c <_printf_common+0xb0>
 80274d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80274d8:	4649      	mov	r1, r9
 80274da:	4638      	mov	r0, r7
 80274dc:	47c0      	blx	r8
 80274de:	3001      	adds	r0, #1
 80274e0:	d01e      	beq.n	8027520 <_printf_common+0xa4>
 80274e2:	6823      	ldr	r3, [r4, #0]
 80274e4:	68e5      	ldr	r5, [r4, #12]
 80274e6:	6832      	ldr	r2, [r6, #0]
 80274e8:	f003 0306 	and.w	r3, r3, #6
 80274ec:	2b04      	cmp	r3, #4
 80274ee:	bf08      	it	eq
 80274f0:	1aad      	subeq	r5, r5, r2
 80274f2:	68a3      	ldr	r3, [r4, #8]
 80274f4:	6922      	ldr	r2, [r4, #16]
 80274f6:	bf0c      	ite	eq
 80274f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80274fc:	2500      	movne	r5, #0
 80274fe:	4293      	cmp	r3, r2
 8027500:	bfc4      	itt	gt
 8027502:	1a9b      	subgt	r3, r3, r2
 8027504:	18ed      	addgt	r5, r5, r3
 8027506:	2600      	movs	r6, #0
 8027508:	341a      	adds	r4, #26
 802750a:	42b5      	cmp	r5, r6
 802750c:	d11a      	bne.n	8027544 <_printf_common+0xc8>
 802750e:	2000      	movs	r0, #0
 8027510:	e008      	b.n	8027524 <_printf_common+0xa8>
 8027512:	2301      	movs	r3, #1
 8027514:	4652      	mov	r2, sl
 8027516:	4649      	mov	r1, r9
 8027518:	4638      	mov	r0, r7
 802751a:	47c0      	blx	r8
 802751c:	3001      	adds	r0, #1
 802751e:	d103      	bne.n	8027528 <_printf_common+0xac>
 8027520:	f04f 30ff 	mov.w	r0, #4294967295
 8027524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027528:	3501      	adds	r5, #1
 802752a:	e7c6      	b.n	80274ba <_printf_common+0x3e>
 802752c:	18e1      	adds	r1, r4, r3
 802752e:	1c5a      	adds	r2, r3, #1
 8027530:	2030      	movs	r0, #48	; 0x30
 8027532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027536:	4422      	add	r2, r4
 8027538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802753c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027540:	3302      	adds	r3, #2
 8027542:	e7c7      	b.n	80274d4 <_printf_common+0x58>
 8027544:	2301      	movs	r3, #1
 8027546:	4622      	mov	r2, r4
 8027548:	4649      	mov	r1, r9
 802754a:	4638      	mov	r0, r7
 802754c:	47c0      	blx	r8
 802754e:	3001      	adds	r0, #1
 8027550:	d0e6      	beq.n	8027520 <_printf_common+0xa4>
 8027552:	3601      	adds	r6, #1
 8027554:	e7d9      	b.n	802750a <_printf_common+0x8e>
	...

08027558 <_printf_i>:
 8027558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802755c:	460c      	mov	r4, r1
 802755e:	4691      	mov	r9, r2
 8027560:	7e27      	ldrb	r7, [r4, #24]
 8027562:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027564:	2f78      	cmp	r7, #120	; 0x78
 8027566:	4680      	mov	r8, r0
 8027568:	469a      	mov	sl, r3
 802756a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802756e:	d807      	bhi.n	8027580 <_printf_i+0x28>
 8027570:	2f62      	cmp	r7, #98	; 0x62
 8027572:	d80a      	bhi.n	802758a <_printf_i+0x32>
 8027574:	2f00      	cmp	r7, #0
 8027576:	f000 80d8 	beq.w	802772a <_printf_i+0x1d2>
 802757a:	2f58      	cmp	r7, #88	; 0x58
 802757c:	f000 80a3 	beq.w	80276c6 <_printf_i+0x16e>
 8027580:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8027584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027588:	e03a      	b.n	8027600 <_printf_i+0xa8>
 802758a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802758e:	2b15      	cmp	r3, #21
 8027590:	d8f6      	bhi.n	8027580 <_printf_i+0x28>
 8027592:	a001      	add	r0, pc, #4	; (adr r0, 8027598 <_printf_i+0x40>)
 8027594:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8027598:	080275f1 	.word	0x080275f1
 802759c:	08027605 	.word	0x08027605
 80275a0:	08027581 	.word	0x08027581
 80275a4:	08027581 	.word	0x08027581
 80275a8:	08027581 	.word	0x08027581
 80275ac:	08027581 	.word	0x08027581
 80275b0:	08027605 	.word	0x08027605
 80275b4:	08027581 	.word	0x08027581
 80275b8:	08027581 	.word	0x08027581
 80275bc:	08027581 	.word	0x08027581
 80275c0:	08027581 	.word	0x08027581
 80275c4:	08027711 	.word	0x08027711
 80275c8:	08027635 	.word	0x08027635
 80275cc:	080276f3 	.word	0x080276f3
 80275d0:	08027581 	.word	0x08027581
 80275d4:	08027581 	.word	0x08027581
 80275d8:	08027733 	.word	0x08027733
 80275dc:	08027581 	.word	0x08027581
 80275e0:	08027635 	.word	0x08027635
 80275e4:	08027581 	.word	0x08027581
 80275e8:	08027581 	.word	0x08027581
 80275ec:	080276fb 	.word	0x080276fb
 80275f0:	680b      	ldr	r3, [r1, #0]
 80275f2:	1d1a      	adds	r2, r3, #4
 80275f4:	681b      	ldr	r3, [r3, #0]
 80275f6:	600a      	str	r2, [r1, #0]
 80275f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80275fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027600:	2301      	movs	r3, #1
 8027602:	e0a3      	b.n	802774c <_printf_i+0x1f4>
 8027604:	6825      	ldr	r5, [r4, #0]
 8027606:	6808      	ldr	r0, [r1, #0]
 8027608:	062e      	lsls	r6, r5, #24
 802760a:	f100 0304 	add.w	r3, r0, #4
 802760e:	d50a      	bpl.n	8027626 <_printf_i+0xce>
 8027610:	6805      	ldr	r5, [r0, #0]
 8027612:	600b      	str	r3, [r1, #0]
 8027614:	2d00      	cmp	r5, #0
 8027616:	da03      	bge.n	8027620 <_printf_i+0xc8>
 8027618:	232d      	movs	r3, #45	; 0x2d
 802761a:	426d      	negs	r5, r5
 802761c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027620:	485e      	ldr	r0, [pc, #376]	; (802779c <_printf_i+0x244>)
 8027622:	230a      	movs	r3, #10
 8027624:	e019      	b.n	802765a <_printf_i+0x102>
 8027626:	f015 0f40 	tst.w	r5, #64	; 0x40
 802762a:	6805      	ldr	r5, [r0, #0]
 802762c:	600b      	str	r3, [r1, #0]
 802762e:	bf18      	it	ne
 8027630:	b22d      	sxthne	r5, r5
 8027632:	e7ef      	b.n	8027614 <_printf_i+0xbc>
 8027634:	680b      	ldr	r3, [r1, #0]
 8027636:	6825      	ldr	r5, [r4, #0]
 8027638:	1d18      	adds	r0, r3, #4
 802763a:	6008      	str	r0, [r1, #0]
 802763c:	0628      	lsls	r0, r5, #24
 802763e:	d501      	bpl.n	8027644 <_printf_i+0xec>
 8027640:	681d      	ldr	r5, [r3, #0]
 8027642:	e002      	b.n	802764a <_printf_i+0xf2>
 8027644:	0669      	lsls	r1, r5, #25
 8027646:	d5fb      	bpl.n	8027640 <_printf_i+0xe8>
 8027648:	881d      	ldrh	r5, [r3, #0]
 802764a:	4854      	ldr	r0, [pc, #336]	; (802779c <_printf_i+0x244>)
 802764c:	2f6f      	cmp	r7, #111	; 0x6f
 802764e:	bf0c      	ite	eq
 8027650:	2308      	moveq	r3, #8
 8027652:	230a      	movne	r3, #10
 8027654:	2100      	movs	r1, #0
 8027656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802765a:	6866      	ldr	r6, [r4, #4]
 802765c:	60a6      	str	r6, [r4, #8]
 802765e:	2e00      	cmp	r6, #0
 8027660:	bfa2      	ittt	ge
 8027662:	6821      	ldrge	r1, [r4, #0]
 8027664:	f021 0104 	bicge.w	r1, r1, #4
 8027668:	6021      	strge	r1, [r4, #0]
 802766a:	b90d      	cbnz	r5, 8027670 <_printf_i+0x118>
 802766c:	2e00      	cmp	r6, #0
 802766e:	d04d      	beq.n	802770c <_printf_i+0x1b4>
 8027670:	4616      	mov	r6, r2
 8027672:	fbb5 f1f3 	udiv	r1, r5, r3
 8027676:	fb03 5711 	mls	r7, r3, r1, r5
 802767a:	5dc7      	ldrb	r7, [r0, r7]
 802767c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8027680:	462f      	mov	r7, r5
 8027682:	42bb      	cmp	r3, r7
 8027684:	460d      	mov	r5, r1
 8027686:	d9f4      	bls.n	8027672 <_printf_i+0x11a>
 8027688:	2b08      	cmp	r3, #8
 802768a:	d10b      	bne.n	80276a4 <_printf_i+0x14c>
 802768c:	6823      	ldr	r3, [r4, #0]
 802768e:	07df      	lsls	r7, r3, #31
 8027690:	d508      	bpl.n	80276a4 <_printf_i+0x14c>
 8027692:	6923      	ldr	r3, [r4, #16]
 8027694:	6861      	ldr	r1, [r4, #4]
 8027696:	4299      	cmp	r1, r3
 8027698:	bfde      	ittt	le
 802769a:	2330      	movle	r3, #48	; 0x30
 802769c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80276a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80276a4:	1b92      	subs	r2, r2, r6
 80276a6:	6122      	str	r2, [r4, #16]
 80276a8:	f8cd a000 	str.w	sl, [sp]
 80276ac:	464b      	mov	r3, r9
 80276ae:	aa03      	add	r2, sp, #12
 80276b0:	4621      	mov	r1, r4
 80276b2:	4640      	mov	r0, r8
 80276b4:	f7ff fee2 	bl	802747c <_printf_common>
 80276b8:	3001      	adds	r0, #1
 80276ba:	d14c      	bne.n	8027756 <_printf_i+0x1fe>
 80276bc:	f04f 30ff 	mov.w	r0, #4294967295
 80276c0:	b004      	add	sp, #16
 80276c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80276c6:	4835      	ldr	r0, [pc, #212]	; (802779c <_printf_i+0x244>)
 80276c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80276cc:	6823      	ldr	r3, [r4, #0]
 80276ce:	680e      	ldr	r6, [r1, #0]
 80276d0:	061f      	lsls	r7, r3, #24
 80276d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80276d6:	600e      	str	r6, [r1, #0]
 80276d8:	d514      	bpl.n	8027704 <_printf_i+0x1ac>
 80276da:	07d9      	lsls	r1, r3, #31
 80276dc:	bf44      	itt	mi
 80276de:	f043 0320 	orrmi.w	r3, r3, #32
 80276e2:	6023      	strmi	r3, [r4, #0]
 80276e4:	b91d      	cbnz	r5, 80276ee <_printf_i+0x196>
 80276e6:	6823      	ldr	r3, [r4, #0]
 80276e8:	f023 0320 	bic.w	r3, r3, #32
 80276ec:	6023      	str	r3, [r4, #0]
 80276ee:	2310      	movs	r3, #16
 80276f0:	e7b0      	b.n	8027654 <_printf_i+0xfc>
 80276f2:	6823      	ldr	r3, [r4, #0]
 80276f4:	f043 0320 	orr.w	r3, r3, #32
 80276f8:	6023      	str	r3, [r4, #0]
 80276fa:	2378      	movs	r3, #120	; 0x78
 80276fc:	4828      	ldr	r0, [pc, #160]	; (80277a0 <_printf_i+0x248>)
 80276fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8027702:	e7e3      	b.n	80276cc <_printf_i+0x174>
 8027704:	065e      	lsls	r6, r3, #25
 8027706:	bf48      	it	mi
 8027708:	b2ad      	uxthmi	r5, r5
 802770a:	e7e6      	b.n	80276da <_printf_i+0x182>
 802770c:	4616      	mov	r6, r2
 802770e:	e7bb      	b.n	8027688 <_printf_i+0x130>
 8027710:	680b      	ldr	r3, [r1, #0]
 8027712:	6826      	ldr	r6, [r4, #0]
 8027714:	6960      	ldr	r0, [r4, #20]
 8027716:	1d1d      	adds	r5, r3, #4
 8027718:	600d      	str	r5, [r1, #0]
 802771a:	0635      	lsls	r5, r6, #24
 802771c:	681b      	ldr	r3, [r3, #0]
 802771e:	d501      	bpl.n	8027724 <_printf_i+0x1cc>
 8027720:	6018      	str	r0, [r3, #0]
 8027722:	e002      	b.n	802772a <_printf_i+0x1d2>
 8027724:	0671      	lsls	r1, r6, #25
 8027726:	d5fb      	bpl.n	8027720 <_printf_i+0x1c8>
 8027728:	8018      	strh	r0, [r3, #0]
 802772a:	2300      	movs	r3, #0
 802772c:	6123      	str	r3, [r4, #16]
 802772e:	4616      	mov	r6, r2
 8027730:	e7ba      	b.n	80276a8 <_printf_i+0x150>
 8027732:	680b      	ldr	r3, [r1, #0]
 8027734:	1d1a      	adds	r2, r3, #4
 8027736:	600a      	str	r2, [r1, #0]
 8027738:	681e      	ldr	r6, [r3, #0]
 802773a:	6862      	ldr	r2, [r4, #4]
 802773c:	2100      	movs	r1, #0
 802773e:	4630      	mov	r0, r6
 8027740:	f7d8 fd86 	bl	8000250 <memchr>
 8027744:	b108      	cbz	r0, 802774a <_printf_i+0x1f2>
 8027746:	1b80      	subs	r0, r0, r6
 8027748:	6060      	str	r0, [r4, #4]
 802774a:	6863      	ldr	r3, [r4, #4]
 802774c:	6123      	str	r3, [r4, #16]
 802774e:	2300      	movs	r3, #0
 8027750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027754:	e7a8      	b.n	80276a8 <_printf_i+0x150>
 8027756:	6923      	ldr	r3, [r4, #16]
 8027758:	4632      	mov	r2, r6
 802775a:	4649      	mov	r1, r9
 802775c:	4640      	mov	r0, r8
 802775e:	47d0      	blx	sl
 8027760:	3001      	adds	r0, #1
 8027762:	d0ab      	beq.n	80276bc <_printf_i+0x164>
 8027764:	6823      	ldr	r3, [r4, #0]
 8027766:	079b      	lsls	r3, r3, #30
 8027768:	d413      	bmi.n	8027792 <_printf_i+0x23a>
 802776a:	68e0      	ldr	r0, [r4, #12]
 802776c:	9b03      	ldr	r3, [sp, #12]
 802776e:	4298      	cmp	r0, r3
 8027770:	bfb8      	it	lt
 8027772:	4618      	movlt	r0, r3
 8027774:	e7a4      	b.n	80276c0 <_printf_i+0x168>
 8027776:	2301      	movs	r3, #1
 8027778:	4632      	mov	r2, r6
 802777a:	4649      	mov	r1, r9
 802777c:	4640      	mov	r0, r8
 802777e:	47d0      	blx	sl
 8027780:	3001      	adds	r0, #1
 8027782:	d09b      	beq.n	80276bc <_printf_i+0x164>
 8027784:	3501      	adds	r5, #1
 8027786:	68e3      	ldr	r3, [r4, #12]
 8027788:	9903      	ldr	r1, [sp, #12]
 802778a:	1a5b      	subs	r3, r3, r1
 802778c:	42ab      	cmp	r3, r5
 802778e:	dcf2      	bgt.n	8027776 <_printf_i+0x21e>
 8027790:	e7eb      	b.n	802776a <_printf_i+0x212>
 8027792:	2500      	movs	r5, #0
 8027794:	f104 0619 	add.w	r6, r4, #25
 8027798:	e7f5      	b.n	8027786 <_printf_i+0x22e>
 802779a:	bf00      	nop
 802779c:	0802f4dd 	.word	0x0802f4dd
 80277a0:	0802f4ee 	.word	0x0802f4ee

080277a4 <_scanf_float>:
 80277a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80277a8:	b087      	sub	sp, #28
 80277aa:	4617      	mov	r7, r2
 80277ac:	9303      	str	r3, [sp, #12]
 80277ae:	688b      	ldr	r3, [r1, #8]
 80277b0:	1e5a      	subs	r2, r3, #1
 80277b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80277b6:	bf83      	ittte	hi
 80277b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80277bc:	195b      	addhi	r3, r3, r5
 80277be:	9302      	strhi	r3, [sp, #8]
 80277c0:	2300      	movls	r3, #0
 80277c2:	bf86      	itte	hi
 80277c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80277c8:	608b      	strhi	r3, [r1, #8]
 80277ca:	9302      	strls	r3, [sp, #8]
 80277cc:	680b      	ldr	r3, [r1, #0]
 80277ce:	468b      	mov	fp, r1
 80277d0:	2500      	movs	r5, #0
 80277d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80277d6:	f84b 3b1c 	str.w	r3, [fp], #28
 80277da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80277de:	4680      	mov	r8, r0
 80277e0:	460c      	mov	r4, r1
 80277e2:	465e      	mov	r6, fp
 80277e4:	46aa      	mov	sl, r5
 80277e6:	46a9      	mov	r9, r5
 80277e8:	9501      	str	r5, [sp, #4]
 80277ea:	68a2      	ldr	r2, [r4, #8]
 80277ec:	b152      	cbz	r2, 8027804 <_scanf_float+0x60>
 80277ee:	683b      	ldr	r3, [r7, #0]
 80277f0:	781b      	ldrb	r3, [r3, #0]
 80277f2:	2b4e      	cmp	r3, #78	; 0x4e
 80277f4:	d864      	bhi.n	80278c0 <_scanf_float+0x11c>
 80277f6:	2b40      	cmp	r3, #64	; 0x40
 80277f8:	d83c      	bhi.n	8027874 <_scanf_float+0xd0>
 80277fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80277fe:	b2c8      	uxtb	r0, r1
 8027800:	280e      	cmp	r0, #14
 8027802:	d93a      	bls.n	802787a <_scanf_float+0xd6>
 8027804:	f1b9 0f00 	cmp.w	r9, #0
 8027808:	d003      	beq.n	8027812 <_scanf_float+0x6e>
 802780a:	6823      	ldr	r3, [r4, #0]
 802780c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8027810:	6023      	str	r3, [r4, #0]
 8027812:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027816:	f1ba 0f01 	cmp.w	sl, #1
 802781a:	f200 8113 	bhi.w	8027a44 <_scanf_float+0x2a0>
 802781e:	455e      	cmp	r6, fp
 8027820:	f200 8105 	bhi.w	8027a2e <_scanf_float+0x28a>
 8027824:	2501      	movs	r5, #1
 8027826:	4628      	mov	r0, r5
 8027828:	b007      	add	sp, #28
 802782a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802782e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8027832:	2a0d      	cmp	r2, #13
 8027834:	d8e6      	bhi.n	8027804 <_scanf_float+0x60>
 8027836:	a101      	add	r1, pc, #4	; (adr r1, 802783c <_scanf_float+0x98>)
 8027838:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802783c:	0802797b 	.word	0x0802797b
 8027840:	08027805 	.word	0x08027805
 8027844:	08027805 	.word	0x08027805
 8027848:	08027805 	.word	0x08027805
 802784c:	080279db 	.word	0x080279db
 8027850:	080279b3 	.word	0x080279b3
 8027854:	08027805 	.word	0x08027805
 8027858:	08027805 	.word	0x08027805
 802785c:	08027989 	.word	0x08027989
 8027860:	08027805 	.word	0x08027805
 8027864:	08027805 	.word	0x08027805
 8027868:	08027805 	.word	0x08027805
 802786c:	08027805 	.word	0x08027805
 8027870:	08027941 	.word	0x08027941
 8027874:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8027878:	e7db      	b.n	8027832 <_scanf_float+0x8e>
 802787a:	290e      	cmp	r1, #14
 802787c:	d8c2      	bhi.n	8027804 <_scanf_float+0x60>
 802787e:	a001      	add	r0, pc, #4	; (adr r0, 8027884 <_scanf_float+0xe0>)
 8027880:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8027884:	08027933 	.word	0x08027933
 8027888:	08027805 	.word	0x08027805
 802788c:	08027933 	.word	0x08027933
 8027890:	080279c7 	.word	0x080279c7
 8027894:	08027805 	.word	0x08027805
 8027898:	080278e1 	.word	0x080278e1
 802789c:	0802791d 	.word	0x0802791d
 80278a0:	0802791d 	.word	0x0802791d
 80278a4:	0802791d 	.word	0x0802791d
 80278a8:	0802791d 	.word	0x0802791d
 80278ac:	0802791d 	.word	0x0802791d
 80278b0:	0802791d 	.word	0x0802791d
 80278b4:	0802791d 	.word	0x0802791d
 80278b8:	0802791d 	.word	0x0802791d
 80278bc:	0802791d 	.word	0x0802791d
 80278c0:	2b6e      	cmp	r3, #110	; 0x6e
 80278c2:	d809      	bhi.n	80278d8 <_scanf_float+0x134>
 80278c4:	2b60      	cmp	r3, #96	; 0x60
 80278c6:	d8b2      	bhi.n	802782e <_scanf_float+0x8a>
 80278c8:	2b54      	cmp	r3, #84	; 0x54
 80278ca:	d077      	beq.n	80279bc <_scanf_float+0x218>
 80278cc:	2b59      	cmp	r3, #89	; 0x59
 80278ce:	d199      	bne.n	8027804 <_scanf_float+0x60>
 80278d0:	2d07      	cmp	r5, #7
 80278d2:	d197      	bne.n	8027804 <_scanf_float+0x60>
 80278d4:	2508      	movs	r5, #8
 80278d6:	e029      	b.n	802792c <_scanf_float+0x188>
 80278d8:	2b74      	cmp	r3, #116	; 0x74
 80278da:	d06f      	beq.n	80279bc <_scanf_float+0x218>
 80278dc:	2b79      	cmp	r3, #121	; 0x79
 80278de:	e7f6      	b.n	80278ce <_scanf_float+0x12a>
 80278e0:	6821      	ldr	r1, [r4, #0]
 80278e2:	05c8      	lsls	r0, r1, #23
 80278e4:	d51a      	bpl.n	802791c <_scanf_float+0x178>
 80278e6:	9b02      	ldr	r3, [sp, #8]
 80278e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80278ec:	6021      	str	r1, [r4, #0]
 80278ee:	f109 0901 	add.w	r9, r9, #1
 80278f2:	b11b      	cbz	r3, 80278fc <_scanf_float+0x158>
 80278f4:	3b01      	subs	r3, #1
 80278f6:	3201      	adds	r2, #1
 80278f8:	9302      	str	r3, [sp, #8]
 80278fa:	60a2      	str	r2, [r4, #8]
 80278fc:	68a3      	ldr	r3, [r4, #8]
 80278fe:	3b01      	subs	r3, #1
 8027900:	60a3      	str	r3, [r4, #8]
 8027902:	6923      	ldr	r3, [r4, #16]
 8027904:	3301      	adds	r3, #1
 8027906:	6123      	str	r3, [r4, #16]
 8027908:	687b      	ldr	r3, [r7, #4]
 802790a:	3b01      	subs	r3, #1
 802790c:	2b00      	cmp	r3, #0
 802790e:	607b      	str	r3, [r7, #4]
 8027910:	f340 8084 	ble.w	8027a1c <_scanf_float+0x278>
 8027914:	683b      	ldr	r3, [r7, #0]
 8027916:	3301      	adds	r3, #1
 8027918:	603b      	str	r3, [r7, #0]
 802791a:	e766      	b.n	80277ea <_scanf_float+0x46>
 802791c:	eb1a 0f05 	cmn.w	sl, r5
 8027920:	f47f af70 	bne.w	8027804 <_scanf_float+0x60>
 8027924:	6822      	ldr	r2, [r4, #0]
 8027926:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 802792a:	6022      	str	r2, [r4, #0]
 802792c:	f806 3b01 	strb.w	r3, [r6], #1
 8027930:	e7e4      	b.n	80278fc <_scanf_float+0x158>
 8027932:	6822      	ldr	r2, [r4, #0]
 8027934:	0610      	lsls	r0, r2, #24
 8027936:	f57f af65 	bpl.w	8027804 <_scanf_float+0x60>
 802793a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802793e:	e7f4      	b.n	802792a <_scanf_float+0x186>
 8027940:	f1ba 0f00 	cmp.w	sl, #0
 8027944:	d10e      	bne.n	8027964 <_scanf_float+0x1c0>
 8027946:	f1b9 0f00 	cmp.w	r9, #0
 802794a:	d10e      	bne.n	802796a <_scanf_float+0x1c6>
 802794c:	6822      	ldr	r2, [r4, #0]
 802794e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8027952:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8027956:	d108      	bne.n	802796a <_scanf_float+0x1c6>
 8027958:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802795c:	6022      	str	r2, [r4, #0]
 802795e:	f04f 0a01 	mov.w	sl, #1
 8027962:	e7e3      	b.n	802792c <_scanf_float+0x188>
 8027964:	f1ba 0f02 	cmp.w	sl, #2
 8027968:	d055      	beq.n	8027a16 <_scanf_float+0x272>
 802796a:	2d01      	cmp	r5, #1
 802796c:	d002      	beq.n	8027974 <_scanf_float+0x1d0>
 802796e:	2d04      	cmp	r5, #4
 8027970:	f47f af48 	bne.w	8027804 <_scanf_float+0x60>
 8027974:	3501      	adds	r5, #1
 8027976:	b2ed      	uxtb	r5, r5
 8027978:	e7d8      	b.n	802792c <_scanf_float+0x188>
 802797a:	f1ba 0f01 	cmp.w	sl, #1
 802797e:	f47f af41 	bne.w	8027804 <_scanf_float+0x60>
 8027982:	f04f 0a02 	mov.w	sl, #2
 8027986:	e7d1      	b.n	802792c <_scanf_float+0x188>
 8027988:	b97d      	cbnz	r5, 80279aa <_scanf_float+0x206>
 802798a:	f1b9 0f00 	cmp.w	r9, #0
 802798e:	f47f af3c 	bne.w	802780a <_scanf_float+0x66>
 8027992:	6822      	ldr	r2, [r4, #0]
 8027994:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8027998:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802799c:	f47f af39 	bne.w	8027812 <_scanf_float+0x6e>
 80279a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80279a4:	6022      	str	r2, [r4, #0]
 80279a6:	2501      	movs	r5, #1
 80279a8:	e7c0      	b.n	802792c <_scanf_float+0x188>
 80279aa:	2d03      	cmp	r5, #3
 80279ac:	d0e2      	beq.n	8027974 <_scanf_float+0x1d0>
 80279ae:	2d05      	cmp	r5, #5
 80279b0:	e7de      	b.n	8027970 <_scanf_float+0x1cc>
 80279b2:	2d02      	cmp	r5, #2
 80279b4:	f47f af26 	bne.w	8027804 <_scanf_float+0x60>
 80279b8:	2503      	movs	r5, #3
 80279ba:	e7b7      	b.n	802792c <_scanf_float+0x188>
 80279bc:	2d06      	cmp	r5, #6
 80279be:	f47f af21 	bne.w	8027804 <_scanf_float+0x60>
 80279c2:	2507      	movs	r5, #7
 80279c4:	e7b2      	b.n	802792c <_scanf_float+0x188>
 80279c6:	6822      	ldr	r2, [r4, #0]
 80279c8:	0591      	lsls	r1, r2, #22
 80279ca:	f57f af1b 	bpl.w	8027804 <_scanf_float+0x60>
 80279ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80279d2:	6022      	str	r2, [r4, #0]
 80279d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80279d8:	e7a8      	b.n	802792c <_scanf_float+0x188>
 80279da:	6822      	ldr	r2, [r4, #0]
 80279dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80279e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80279e4:	d006      	beq.n	80279f4 <_scanf_float+0x250>
 80279e6:	0550      	lsls	r0, r2, #21
 80279e8:	f57f af0c 	bpl.w	8027804 <_scanf_float+0x60>
 80279ec:	f1b9 0f00 	cmp.w	r9, #0
 80279f0:	f43f af0f 	beq.w	8027812 <_scanf_float+0x6e>
 80279f4:	0591      	lsls	r1, r2, #22
 80279f6:	bf58      	it	pl
 80279f8:	9901      	ldrpl	r1, [sp, #4]
 80279fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80279fe:	bf58      	it	pl
 8027a00:	eba9 0101 	subpl.w	r1, r9, r1
 8027a04:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8027a08:	bf58      	it	pl
 8027a0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8027a0e:	6022      	str	r2, [r4, #0]
 8027a10:	f04f 0900 	mov.w	r9, #0
 8027a14:	e78a      	b.n	802792c <_scanf_float+0x188>
 8027a16:	f04f 0a03 	mov.w	sl, #3
 8027a1a:	e787      	b.n	802792c <_scanf_float+0x188>
 8027a1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8027a20:	4639      	mov	r1, r7
 8027a22:	4640      	mov	r0, r8
 8027a24:	4798      	blx	r3
 8027a26:	2800      	cmp	r0, #0
 8027a28:	f43f aedf 	beq.w	80277ea <_scanf_float+0x46>
 8027a2c:	e6ea      	b.n	8027804 <_scanf_float+0x60>
 8027a2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027a32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8027a36:	463a      	mov	r2, r7
 8027a38:	4640      	mov	r0, r8
 8027a3a:	4798      	blx	r3
 8027a3c:	6923      	ldr	r3, [r4, #16]
 8027a3e:	3b01      	subs	r3, #1
 8027a40:	6123      	str	r3, [r4, #16]
 8027a42:	e6ec      	b.n	802781e <_scanf_float+0x7a>
 8027a44:	1e6b      	subs	r3, r5, #1
 8027a46:	2b06      	cmp	r3, #6
 8027a48:	d825      	bhi.n	8027a96 <_scanf_float+0x2f2>
 8027a4a:	2d02      	cmp	r5, #2
 8027a4c:	d836      	bhi.n	8027abc <_scanf_float+0x318>
 8027a4e:	455e      	cmp	r6, fp
 8027a50:	f67f aee8 	bls.w	8027824 <_scanf_float+0x80>
 8027a54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027a58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8027a5c:	463a      	mov	r2, r7
 8027a5e:	4640      	mov	r0, r8
 8027a60:	4798      	blx	r3
 8027a62:	6923      	ldr	r3, [r4, #16]
 8027a64:	3b01      	subs	r3, #1
 8027a66:	6123      	str	r3, [r4, #16]
 8027a68:	e7f1      	b.n	8027a4e <_scanf_float+0x2aa>
 8027a6a:	9802      	ldr	r0, [sp, #8]
 8027a6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027a70:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8027a74:	9002      	str	r0, [sp, #8]
 8027a76:	463a      	mov	r2, r7
 8027a78:	4640      	mov	r0, r8
 8027a7a:	4798      	blx	r3
 8027a7c:	6923      	ldr	r3, [r4, #16]
 8027a7e:	3b01      	subs	r3, #1
 8027a80:	6123      	str	r3, [r4, #16]
 8027a82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027a86:	fa5f fa8a 	uxtb.w	sl, sl
 8027a8a:	f1ba 0f02 	cmp.w	sl, #2
 8027a8e:	d1ec      	bne.n	8027a6a <_scanf_float+0x2c6>
 8027a90:	3d03      	subs	r5, #3
 8027a92:	b2ed      	uxtb	r5, r5
 8027a94:	1b76      	subs	r6, r6, r5
 8027a96:	6823      	ldr	r3, [r4, #0]
 8027a98:	05da      	lsls	r2, r3, #23
 8027a9a:	d52f      	bpl.n	8027afc <_scanf_float+0x358>
 8027a9c:	055b      	lsls	r3, r3, #21
 8027a9e:	d510      	bpl.n	8027ac2 <_scanf_float+0x31e>
 8027aa0:	455e      	cmp	r6, fp
 8027aa2:	f67f aebf 	bls.w	8027824 <_scanf_float+0x80>
 8027aa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027aaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8027aae:	463a      	mov	r2, r7
 8027ab0:	4640      	mov	r0, r8
 8027ab2:	4798      	blx	r3
 8027ab4:	6923      	ldr	r3, [r4, #16]
 8027ab6:	3b01      	subs	r3, #1
 8027ab8:	6123      	str	r3, [r4, #16]
 8027aba:	e7f1      	b.n	8027aa0 <_scanf_float+0x2fc>
 8027abc:	46aa      	mov	sl, r5
 8027abe:	9602      	str	r6, [sp, #8]
 8027ac0:	e7df      	b.n	8027a82 <_scanf_float+0x2de>
 8027ac2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8027ac6:	6923      	ldr	r3, [r4, #16]
 8027ac8:	2965      	cmp	r1, #101	; 0x65
 8027aca:	f103 33ff 	add.w	r3, r3, #4294967295
 8027ace:	f106 35ff 	add.w	r5, r6, #4294967295
 8027ad2:	6123      	str	r3, [r4, #16]
 8027ad4:	d00c      	beq.n	8027af0 <_scanf_float+0x34c>
 8027ad6:	2945      	cmp	r1, #69	; 0x45
 8027ad8:	d00a      	beq.n	8027af0 <_scanf_float+0x34c>
 8027ada:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027ade:	463a      	mov	r2, r7
 8027ae0:	4640      	mov	r0, r8
 8027ae2:	4798      	blx	r3
 8027ae4:	6923      	ldr	r3, [r4, #16]
 8027ae6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8027aea:	3b01      	subs	r3, #1
 8027aec:	1eb5      	subs	r5, r6, #2
 8027aee:	6123      	str	r3, [r4, #16]
 8027af0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027af4:	463a      	mov	r2, r7
 8027af6:	4640      	mov	r0, r8
 8027af8:	4798      	blx	r3
 8027afa:	462e      	mov	r6, r5
 8027afc:	6825      	ldr	r5, [r4, #0]
 8027afe:	f015 0510 	ands.w	r5, r5, #16
 8027b02:	d14d      	bne.n	8027ba0 <_scanf_float+0x3fc>
 8027b04:	7035      	strb	r5, [r6, #0]
 8027b06:	6823      	ldr	r3, [r4, #0]
 8027b08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8027b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027b10:	d11a      	bne.n	8027b48 <_scanf_float+0x3a4>
 8027b12:	9b01      	ldr	r3, [sp, #4]
 8027b14:	454b      	cmp	r3, r9
 8027b16:	eba3 0209 	sub.w	r2, r3, r9
 8027b1a:	d122      	bne.n	8027b62 <_scanf_float+0x3be>
 8027b1c:	2200      	movs	r2, #0
 8027b1e:	4659      	mov	r1, fp
 8027b20:	4640      	mov	r0, r8
 8027b22:	f000 feaf 	bl	8028884 <_strtod_r>
 8027b26:	9b03      	ldr	r3, [sp, #12]
 8027b28:	6821      	ldr	r1, [r4, #0]
 8027b2a:	681b      	ldr	r3, [r3, #0]
 8027b2c:	f011 0f02 	tst.w	r1, #2
 8027b30:	f103 0204 	add.w	r2, r3, #4
 8027b34:	d020      	beq.n	8027b78 <_scanf_float+0x3d4>
 8027b36:	9903      	ldr	r1, [sp, #12]
 8027b38:	600a      	str	r2, [r1, #0]
 8027b3a:	681b      	ldr	r3, [r3, #0]
 8027b3c:	ed83 0b00 	vstr	d0, [r3]
 8027b40:	68e3      	ldr	r3, [r4, #12]
 8027b42:	3301      	adds	r3, #1
 8027b44:	60e3      	str	r3, [r4, #12]
 8027b46:	e66e      	b.n	8027826 <_scanf_float+0x82>
 8027b48:	9b04      	ldr	r3, [sp, #16]
 8027b4a:	2b00      	cmp	r3, #0
 8027b4c:	d0e6      	beq.n	8027b1c <_scanf_float+0x378>
 8027b4e:	9905      	ldr	r1, [sp, #20]
 8027b50:	230a      	movs	r3, #10
 8027b52:	462a      	mov	r2, r5
 8027b54:	3101      	adds	r1, #1
 8027b56:	4640      	mov	r0, r8
 8027b58:	f000 ff1e 	bl	8028998 <_strtol_r>
 8027b5c:	9b04      	ldr	r3, [sp, #16]
 8027b5e:	9e05      	ldr	r6, [sp, #20]
 8027b60:	1ac2      	subs	r2, r0, r3
 8027b62:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8027b66:	429e      	cmp	r6, r3
 8027b68:	bf28      	it	cs
 8027b6a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8027b6e:	490d      	ldr	r1, [pc, #52]	; (8027ba4 <_scanf_float+0x400>)
 8027b70:	4630      	mov	r0, r6
 8027b72:	f000 f875 	bl	8027c60 <siprintf>
 8027b76:	e7d1      	b.n	8027b1c <_scanf_float+0x378>
 8027b78:	f011 0f04 	tst.w	r1, #4
 8027b7c:	9903      	ldr	r1, [sp, #12]
 8027b7e:	600a      	str	r2, [r1, #0]
 8027b80:	d1db      	bne.n	8027b3a <_scanf_float+0x396>
 8027b82:	eeb4 0b40 	vcmp.f64	d0, d0
 8027b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b8a:	681e      	ldr	r6, [r3, #0]
 8027b8c:	d705      	bvc.n	8027b9a <_scanf_float+0x3f6>
 8027b8e:	4806      	ldr	r0, [pc, #24]	; (8027ba8 <_scanf_float+0x404>)
 8027b90:	f000 f81c 	bl	8027bcc <nanf>
 8027b94:	ed86 0a00 	vstr	s0, [r6]
 8027b98:	e7d2      	b.n	8027b40 <_scanf_float+0x39c>
 8027b9a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8027b9e:	e7f9      	b.n	8027b94 <_scanf_float+0x3f0>
 8027ba0:	2500      	movs	r5, #0
 8027ba2:	e640      	b.n	8027826 <_scanf_float+0x82>
 8027ba4:	0802f4ff 	.word	0x0802f4ff
 8027ba8:	0802f4b7 	.word	0x0802f4b7

08027bac <_sbrk_r>:
 8027bac:	b538      	push	{r3, r4, r5, lr}
 8027bae:	4d06      	ldr	r5, [pc, #24]	; (8027bc8 <_sbrk_r+0x1c>)
 8027bb0:	2300      	movs	r3, #0
 8027bb2:	4604      	mov	r4, r0
 8027bb4:	4608      	mov	r0, r1
 8027bb6:	602b      	str	r3, [r5, #0]
 8027bb8:	f7db fa1e 	bl	8002ff8 <_sbrk>
 8027bbc:	1c43      	adds	r3, r0, #1
 8027bbe:	d102      	bne.n	8027bc6 <_sbrk_r+0x1a>
 8027bc0:	682b      	ldr	r3, [r5, #0]
 8027bc2:	b103      	cbz	r3, 8027bc6 <_sbrk_r+0x1a>
 8027bc4:	6023      	str	r3, [r4, #0]
 8027bc6:	bd38      	pop	{r3, r4, r5, pc}
 8027bc8:	200571d8 	.word	0x200571d8

08027bcc <nanf>:
 8027bcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8027bd4 <nanf+0x8>
 8027bd0:	4770      	bx	lr
 8027bd2:	bf00      	nop
 8027bd4:	7fc00000 	.word	0x7fc00000

08027bd8 <_raise_r>:
 8027bd8:	291f      	cmp	r1, #31
 8027bda:	b538      	push	{r3, r4, r5, lr}
 8027bdc:	4604      	mov	r4, r0
 8027bde:	460d      	mov	r5, r1
 8027be0:	d904      	bls.n	8027bec <_raise_r+0x14>
 8027be2:	2316      	movs	r3, #22
 8027be4:	6003      	str	r3, [r0, #0]
 8027be6:	f04f 30ff 	mov.w	r0, #4294967295
 8027bea:	bd38      	pop	{r3, r4, r5, pc}
 8027bec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8027bee:	b112      	cbz	r2, 8027bf6 <_raise_r+0x1e>
 8027bf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027bf4:	b94b      	cbnz	r3, 8027c0a <_raise_r+0x32>
 8027bf6:	4620      	mov	r0, r4
 8027bf8:	f000 f830 	bl	8027c5c <_getpid_r>
 8027bfc:	462a      	mov	r2, r5
 8027bfe:	4601      	mov	r1, r0
 8027c00:	4620      	mov	r0, r4
 8027c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027c06:	f000 b817 	b.w	8027c38 <_kill_r>
 8027c0a:	2b01      	cmp	r3, #1
 8027c0c:	d00a      	beq.n	8027c24 <_raise_r+0x4c>
 8027c0e:	1c59      	adds	r1, r3, #1
 8027c10:	d103      	bne.n	8027c1a <_raise_r+0x42>
 8027c12:	2316      	movs	r3, #22
 8027c14:	6003      	str	r3, [r0, #0]
 8027c16:	2001      	movs	r0, #1
 8027c18:	e7e7      	b.n	8027bea <_raise_r+0x12>
 8027c1a:	2400      	movs	r4, #0
 8027c1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027c20:	4628      	mov	r0, r5
 8027c22:	4798      	blx	r3
 8027c24:	2000      	movs	r0, #0
 8027c26:	e7e0      	b.n	8027bea <_raise_r+0x12>

08027c28 <raise>:
 8027c28:	4b02      	ldr	r3, [pc, #8]	; (8027c34 <raise+0xc>)
 8027c2a:	4601      	mov	r1, r0
 8027c2c:	6818      	ldr	r0, [r3, #0]
 8027c2e:	f7ff bfd3 	b.w	8027bd8 <_raise_r>
 8027c32:	bf00      	nop
 8027c34:	2000007c 	.word	0x2000007c

08027c38 <_kill_r>:
 8027c38:	b538      	push	{r3, r4, r5, lr}
 8027c3a:	4d07      	ldr	r5, [pc, #28]	; (8027c58 <_kill_r+0x20>)
 8027c3c:	2300      	movs	r3, #0
 8027c3e:	4604      	mov	r4, r0
 8027c40:	4608      	mov	r0, r1
 8027c42:	4611      	mov	r1, r2
 8027c44:	602b      	str	r3, [r5, #0]
 8027c46:	f7db f94f 	bl	8002ee8 <_kill>
 8027c4a:	1c43      	adds	r3, r0, #1
 8027c4c:	d102      	bne.n	8027c54 <_kill_r+0x1c>
 8027c4e:	682b      	ldr	r3, [r5, #0]
 8027c50:	b103      	cbz	r3, 8027c54 <_kill_r+0x1c>
 8027c52:	6023      	str	r3, [r4, #0]
 8027c54:	bd38      	pop	{r3, r4, r5, pc}
 8027c56:	bf00      	nop
 8027c58:	200571d8 	.word	0x200571d8

08027c5c <_getpid_r>:
 8027c5c:	f7db b93c 	b.w	8002ed8 <_getpid>

08027c60 <siprintf>:
 8027c60:	b40e      	push	{r1, r2, r3}
 8027c62:	b500      	push	{lr}
 8027c64:	b09c      	sub	sp, #112	; 0x70
 8027c66:	ab1d      	add	r3, sp, #116	; 0x74
 8027c68:	9002      	str	r0, [sp, #8]
 8027c6a:	9006      	str	r0, [sp, #24]
 8027c6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8027c70:	4809      	ldr	r0, [pc, #36]	; (8027c98 <siprintf+0x38>)
 8027c72:	9107      	str	r1, [sp, #28]
 8027c74:	9104      	str	r1, [sp, #16]
 8027c76:	4909      	ldr	r1, [pc, #36]	; (8027c9c <siprintf+0x3c>)
 8027c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8027c7c:	9105      	str	r1, [sp, #20]
 8027c7e:	6800      	ldr	r0, [r0, #0]
 8027c80:	9301      	str	r3, [sp, #4]
 8027c82:	a902      	add	r1, sp, #8
 8027c84:	f003 f8d0 	bl	802ae28 <_svfiprintf_r>
 8027c88:	9b02      	ldr	r3, [sp, #8]
 8027c8a:	2200      	movs	r2, #0
 8027c8c:	701a      	strb	r2, [r3, #0]
 8027c8e:	b01c      	add	sp, #112	; 0x70
 8027c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8027c94:	b003      	add	sp, #12
 8027c96:	4770      	bx	lr
 8027c98:	2000007c 	.word	0x2000007c
 8027c9c:	ffff0208 	.word	0xffff0208

08027ca0 <sulp>:
 8027ca0:	b570      	push	{r4, r5, r6, lr}
 8027ca2:	4604      	mov	r4, r0
 8027ca4:	460d      	mov	r5, r1
 8027ca6:	4616      	mov	r6, r2
 8027ca8:	ec45 4b10 	vmov	d0, r4, r5
 8027cac:	f002 fedc 	bl	802aa68 <__ulp>
 8027cb0:	b17e      	cbz	r6, 8027cd2 <sulp+0x32>
 8027cb2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8027cb6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8027cba:	2b00      	cmp	r3, #0
 8027cbc:	dd09      	ble.n	8027cd2 <sulp+0x32>
 8027cbe:	051b      	lsls	r3, r3, #20
 8027cc0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8027cc4:	2000      	movs	r0, #0
 8027cc6:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8027cca:	ec41 0b17 	vmov	d7, r0, r1
 8027cce:	ee20 0b07 	vmul.f64	d0, d0, d7
 8027cd2:	bd70      	pop	{r4, r5, r6, pc}
 8027cd4:	0000      	movs	r0, r0
	...

08027cd8 <_strtod_l>:
 8027cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027cdc:	ed2d 8b0c 	vpush	{d8-d13}
 8027ce0:	b09d      	sub	sp, #116	; 0x74
 8027ce2:	461f      	mov	r7, r3
 8027ce4:	2300      	movs	r3, #0
 8027ce6:	9318      	str	r3, [sp, #96]	; 0x60
 8027ce8:	4ba6      	ldr	r3, [pc, #664]	; (8027f84 <_strtod_l+0x2ac>)
 8027cea:	9213      	str	r2, [sp, #76]	; 0x4c
 8027cec:	681b      	ldr	r3, [r3, #0]
 8027cee:	9308      	str	r3, [sp, #32]
 8027cf0:	4604      	mov	r4, r0
 8027cf2:	4618      	mov	r0, r3
 8027cf4:	468a      	mov	sl, r1
 8027cf6:	f7d8 faa3 	bl	8000240 <strlen>
 8027cfa:	f04f 0800 	mov.w	r8, #0
 8027cfe:	4605      	mov	r5, r0
 8027d00:	f04f 0900 	mov.w	r9, #0
 8027d04:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8027d08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027d0a:	781a      	ldrb	r2, [r3, #0]
 8027d0c:	2a2b      	cmp	r2, #43	; 0x2b
 8027d0e:	d04d      	beq.n	8027dac <_strtod_l+0xd4>
 8027d10:	d83a      	bhi.n	8027d88 <_strtod_l+0xb0>
 8027d12:	2a0d      	cmp	r2, #13
 8027d14:	d833      	bhi.n	8027d7e <_strtod_l+0xa6>
 8027d16:	2a08      	cmp	r2, #8
 8027d18:	d833      	bhi.n	8027d82 <_strtod_l+0xaa>
 8027d1a:	2a00      	cmp	r2, #0
 8027d1c:	d03d      	beq.n	8027d9a <_strtod_l+0xc2>
 8027d1e:	2300      	movs	r3, #0
 8027d20:	930b      	str	r3, [sp, #44]	; 0x2c
 8027d22:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8027d24:	7833      	ldrb	r3, [r6, #0]
 8027d26:	2b30      	cmp	r3, #48	; 0x30
 8027d28:	f040 80b6 	bne.w	8027e98 <_strtod_l+0x1c0>
 8027d2c:	7873      	ldrb	r3, [r6, #1]
 8027d2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8027d32:	2b58      	cmp	r3, #88	; 0x58
 8027d34:	d16d      	bne.n	8027e12 <_strtod_l+0x13a>
 8027d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027d38:	9301      	str	r3, [sp, #4]
 8027d3a:	ab18      	add	r3, sp, #96	; 0x60
 8027d3c:	9702      	str	r7, [sp, #8]
 8027d3e:	9300      	str	r3, [sp, #0]
 8027d40:	4a91      	ldr	r2, [pc, #580]	; (8027f88 <_strtod_l+0x2b0>)
 8027d42:	ab19      	add	r3, sp, #100	; 0x64
 8027d44:	a917      	add	r1, sp, #92	; 0x5c
 8027d46:	4620      	mov	r0, r4
 8027d48:	f001 ff76 	bl	8029c38 <__gethex>
 8027d4c:	f010 0507 	ands.w	r5, r0, #7
 8027d50:	4607      	mov	r7, r0
 8027d52:	d005      	beq.n	8027d60 <_strtod_l+0x88>
 8027d54:	2d06      	cmp	r5, #6
 8027d56:	d12b      	bne.n	8027db0 <_strtod_l+0xd8>
 8027d58:	3601      	adds	r6, #1
 8027d5a:	2300      	movs	r3, #0
 8027d5c:	9617      	str	r6, [sp, #92]	; 0x5c
 8027d5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8027d60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027d62:	2b00      	cmp	r3, #0
 8027d64:	f040 856e 	bne.w	8028844 <_strtod_l+0xb6c>
 8027d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027d6a:	b1e3      	cbz	r3, 8027da6 <_strtod_l+0xce>
 8027d6c:	ec49 8b17 	vmov	d7, r8, r9
 8027d70:	eeb1 0b47 	vneg.f64	d0, d7
 8027d74:	b01d      	add	sp, #116	; 0x74
 8027d76:	ecbd 8b0c 	vpop	{d8-d13}
 8027d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d7e:	2a20      	cmp	r2, #32
 8027d80:	d1cd      	bne.n	8027d1e <_strtod_l+0x46>
 8027d82:	3301      	adds	r3, #1
 8027d84:	9317      	str	r3, [sp, #92]	; 0x5c
 8027d86:	e7bf      	b.n	8027d08 <_strtod_l+0x30>
 8027d88:	2a2d      	cmp	r2, #45	; 0x2d
 8027d8a:	d1c8      	bne.n	8027d1e <_strtod_l+0x46>
 8027d8c:	2201      	movs	r2, #1
 8027d8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8027d90:	1c5a      	adds	r2, r3, #1
 8027d92:	9217      	str	r2, [sp, #92]	; 0x5c
 8027d94:	785b      	ldrb	r3, [r3, #1]
 8027d96:	2b00      	cmp	r3, #0
 8027d98:	d1c3      	bne.n	8027d22 <_strtod_l+0x4a>
 8027d9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027d9c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8027da0:	2b00      	cmp	r3, #0
 8027da2:	f040 854d 	bne.w	8028840 <_strtod_l+0xb68>
 8027da6:	ec49 8b10 	vmov	d0, r8, r9
 8027daa:	e7e3      	b.n	8027d74 <_strtod_l+0x9c>
 8027dac:	2200      	movs	r2, #0
 8027dae:	e7ee      	b.n	8027d8e <_strtod_l+0xb6>
 8027db0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027db2:	b13a      	cbz	r2, 8027dc4 <_strtod_l+0xec>
 8027db4:	2135      	movs	r1, #53	; 0x35
 8027db6:	a81a      	add	r0, sp, #104	; 0x68
 8027db8:	f002 ff62 	bl	802ac80 <__copybits>
 8027dbc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027dbe:	4620      	mov	r0, r4
 8027dc0:	f002 fb26 	bl	802a410 <_Bfree>
 8027dc4:	3d01      	subs	r5, #1
 8027dc6:	2d05      	cmp	r5, #5
 8027dc8:	d807      	bhi.n	8027dda <_strtod_l+0x102>
 8027dca:	e8df f005 	tbb	[pc, r5]
 8027dce:	0b0e      	.short	0x0b0e
 8027dd0:	030e1d18 	.word	0x030e1d18
 8027dd4:	f04f 0900 	mov.w	r9, #0
 8027dd8:	46c8      	mov	r8, r9
 8027dda:	073b      	lsls	r3, r7, #28
 8027ddc:	d5c0      	bpl.n	8027d60 <_strtod_l+0x88>
 8027dde:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8027de2:	e7bd      	b.n	8027d60 <_strtod_l+0x88>
 8027de4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8027de8:	e7f7      	b.n	8027dda <_strtod_l+0x102>
 8027dea:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8027dee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8027df0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8027df4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8027df8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8027dfc:	e7ed      	b.n	8027dda <_strtod_l+0x102>
 8027dfe:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8027f8c <_strtod_l+0x2b4>
 8027e02:	f04f 0800 	mov.w	r8, #0
 8027e06:	e7e8      	b.n	8027dda <_strtod_l+0x102>
 8027e08:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8027e0c:	f04f 38ff 	mov.w	r8, #4294967295
 8027e10:	e7e3      	b.n	8027dda <_strtod_l+0x102>
 8027e12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027e14:	1c5a      	adds	r2, r3, #1
 8027e16:	9217      	str	r2, [sp, #92]	; 0x5c
 8027e18:	785b      	ldrb	r3, [r3, #1]
 8027e1a:	2b30      	cmp	r3, #48	; 0x30
 8027e1c:	d0f9      	beq.n	8027e12 <_strtod_l+0x13a>
 8027e1e:	2b00      	cmp	r3, #0
 8027e20:	d09e      	beq.n	8027d60 <_strtod_l+0x88>
 8027e22:	2301      	movs	r3, #1
 8027e24:	9306      	str	r3, [sp, #24]
 8027e26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027e28:	930c      	str	r3, [sp, #48]	; 0x30
 8027e2a:	2300      	movs	r3, #0
 8027e2c:	9304      	str	r3, [sp, #16]
 8027e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8027e30:	461e      	mov	r6, r3
 8027e32:	220a      	movs	r2, #10
 8027e34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8027e36:	f890 b000 	ldrb.w	fp, [r0]
 8027e3a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8027e3e:	b2d9      	uxtb	r1, r3
 8027e40:	2909      	cmp	r1, #9
 8027e42:	d92b      	bls.n	8027e9c <_strtod_l+0x1c4>
 8027e44:	9908      	ldr	r1, [sp, #32]
 8027e46:	462a      	mov	r2, r5
 8027e48:	f003 f939 	bl	802b0be <strncmp>
 8027e4c:	2800      	cmp	r0, #0
 8027e4e:	d035      	beq.n	8027ebc <_strtod_l+0x1e4>
 8027e50:	2000      	movs	r0, #0
 8027e52:	465a      	mov	r2, fp
 8027e54:	4633      	mov	r3, r6
 8027e56:	4683      	mov	fp, r0
 8027e58:	4601      	mov	r1, r0
 8027e5a:	2a65      	cmp	r2, #101	; 0x65
 8027e5c:	d001      	beq.n	8027e62 <_strtod_l+0x18a>
 8027e5e:	2a45      	cmp	r2, #69	; 0x45
 8027e60:	d118      	bne.n	8027e94 <_strtod_l+0x1bc>
 8027e62:	b91b      	cbnz	r3, 8027e6c <_strtod_l+0x194>
 8027e64:	9b06      	ldr	r3, [sp, #24]
 8027e66:	4303      	orrs	r3, r0
 8027e68:	d097      	beq.n	8027d9a <_strtod_l+0xc2>
 8027e6a:	2300      	movs	r3, #0
 8027e6c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8027e70:	f10a 0201 	add.w	r2, sl, #1
 8027e74:	9217      	str	r2, [sp, #92]	; 0x5c
 8027e76:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8027e7a:	2a2b      	cmp	r2, #43	; 0x2b
 8027e7c:	d077      	beq.n	8027f6e <_strtod_l+0x296>
 8027e7e:	2a2d      	cmp	r2, #45	; 0x2d
 8027e80:	d07d      	beq.n	8027f7e <_strtod_l+0x2a6>
 8027e82:	f04f 0e00 	mov.w	lr, #0
 8027e86:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8027e8a:	2d09      	cmp	r5, #9
 8027e8c:	f240 8084 	bls.w	8027f98 <_strtod_l+0x2c0>
 8027e90:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8027e94:	2500      	movs	r5, #0
 8027e96:	e09f      	b.n	8027fd8 <_strtod_l+0x300>
 8027e98:	2300      	movs	r3, #0
 8027e9a:	e7c3      	b.n	8027e24 <_strtod_l+0x14c>
 8027e9c:	2e08      	cmp	r6, #8
 8027e9e:	bfd5      	itete	le
 8027ea0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8027ea2:	9904      	ldrgt	r1, [sp, #16]
 8027ea4:	fb02 3301 	mlale	r3, r2, r1, r3
 8027ea8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8027eac:	f100 0001 	add.w	r0, r0, #1
 8027eb0:	bfd4      	ite	le
 8027eb2:	930a      	strle	r3, [sp, #40]	; 0x28
 8027eb4:	9304      	strgt	r3, [sp, #16]
 8027eb6:	3601      	adds	r6, #1
 8027eb8:	9017      	str	r0, [sp, #92]	; 0x5c
 8027eba:	e7bb      	b.n	8027e34 <_strtod_l+0x15c>
 8027ebc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027ebe:	195a      	adds	r2, r3, r5
 8027ec0:	9217      	str	r2, [sp, #92]	; 0x5c
 8027ec2:	5d5a      	ldrb	r2, [r3, r5]
 8027ec4:	b3ae      	cbz	r6, 8027f32 <_strtod_l+0x25a>
 8027ec6:	4683      	mov	fp, r0
 8027ec8:	4633      	mov	r3, r6
 8027eca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8027ece:	2909      	cmp	r1, #9
 8027ed0:	d912      	bls.n	8027ef8 <_strtod_l+0x220>
 8027ed2:	2101      	movs	r1, #1
 8027ed4:	e7c1      	b.n	8027e5a <_strtod_l+0x182>
 8027ed6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027ed8:	1c5a      	adds	r2, r3, #1
 8027eda:	9217      	str	r2, [sp, #92]	; 0x5c
 8027edc:	785a      	ldrb	r2, [r3, #1]
 8027ede:	3001      	adds	r0, #1
 8027ee0:	2a30      	cmp	r2, #48	; 0x30
 8027ee2:	d0f8      	beq.n	8027ed6 <_strtod_l+0x1fe>
 8027ee4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8027ee8:	2b08      	cmp	r3, #8
 8027eea:	f200 84b0 	bhi.w	802884e <_strtod_l+0xb76>
 8027eee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027ef0:	930c      	str	r3, [sp, #48]	; 0x30
 8027ef2:	4683      	mov	fp, r0
 8027ef4:	2000      	movs	r0, #0
 8027ef6:	4603      	mov	r3, r0
 8027ef8:	3a30      	subs	r2, #48	; 0x30
 8027efa:	f100 0101 	add.w	r1, r0, #1
 8027efe:	d012      	beq.n	8027f26 <_strtod_l+0x24e>
 8027f00:	448b      	add	fp, r1
 8027f02:	eb00 0c03 	add.w	ip, r0, r3
 8027f06:	4619      	mov	r1, r3
 8027f08:	250a      	movs	r5, #10
 8027f0a:	4561      	cmp	r1, ip
 8027f0c:	d113      	bne.n	8027f36 <_strtod_l+0x25e>
 8027f0e:	1819      	adds	r1, r3, r0
 8027f10:	2908      	cmp	r1, #8
 8027f12:	f103 0301 	add.w	r3, r3, #1
 8027f16:	4403      	add	r3, r0
 8027f18:	dc1d      	bgt.n	8027f56 <_strtod_l+0x27e>
 8027f1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027f1c:	210a      	movs	r1, #10
 8027f1e:	fb01 2200 	mla	r2, r1, r0, r2
 8027f22:	920a      	str	r2, [sp, #40]	; 0x28
 8027f24:	2100      	movs	r1, #0
 8027f26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027f28:	1c50      	adds	r0, r2, #1
 8027f2a:	9017      	str	r0, [sp, #92]	; 0x5c
 8027f2c:	7852      	ldrb	r2, [r2, #1]
 8027f2e:	4608      	mov	r0, r1
 8027f30:	e7cb      	b.n	8027eca <_strtod_l+0x1f2>
 8027f32:	4630      	mov	r0, r6
 8027f34:	e7d4      	b.n	8027ee0 <_strtod_l+0x208>
 8027f36:	2908      	cmp	r1, #8
 8027f38:	dc04      	bgt.n	8027f44 <_strtod_l+0x26c>
 8027f3a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027f3c:	436f      	muls	r7, r5
 8027f3e:	970a      	str	r7, [sp, #40]	; 0x28
 8027f40:	3101      	adds	r1, #1
 8027f42:	e7e2      	b.n	8027f0a <_strtod_l+0x232>
 8027f44:	f101 0e01 	add.w	lr, r1, #1
 8027f48:	f1be 0f10 	cmp.w	lr, #16
 8027f4c:	bfde      	ittt	le
 8027f4e:	9f04      	ldrle	r7, [sp, #16]
 8027f50:	436f      	mulle	r7, r5
 8027f52:	9704      	strle	r7, [sp, #16]
 8027f54:	e7f4      	b.n	8027f40 <_strtod_l+0x268>
 8027f56:	2b10      	cmp	r3, #16
 8027f58:	bfdf      	itttt	le
 8027f5a:	9804      	ldrle	r0, [sp, #16]
 8027f5c:	210a      	movle	r1, #10
 8027f5e:	fb01 2200 	mlale	r2, r1, r0, r2
 8027f62:	9204      	strle	r2, [sp, #16]
 8027f64:	e7de      	b.n	8027f24 <_strtod_l+0x24c>
 8027f66:	f04f 0b00 	mov.w	fp, #0
 8027f6a:	2101      	movs	r1, #1
 8027f6c:	e77a      	b.n	8027e64 <_strtod_l+0x18c>
 8027f6e:	f04f 0e00 	mov.w	lr, #0
 8027f72:	f10a 0202 	add.w	r2, sl, #2
 8027f76:	9217      	str	r2, [sp, #92]	; 0x5c
 8027f78:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8027f7c:	e783      	b.n	8027e86 <_strtod_l+0x1ae>
 8027f7e:	f04f 0e01 	mov.w	lr, #1
 8027f82:	e7f6      	b.n	8027f72 <_strtod_l+0x29a>
 8027f84:	0802f7bc 	.word	0x0802f7bc
 8027f88:	0802f508 	.word	0x0802f508
 8027f8c:	7ff00000 	.word	0x7ff00000
 8027f90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027f92:	1c55      	adds	r5, r2, #1
 8027f94:	9517      	str	r5, [sp, #92]	; 0x5c
 8027f96:	7852      	ldrb	r2, [r2, #1]
 8027f98:	2a30      	cmp	r2, #48	; 0x30
 8027f9a:	d0f9      	beq.n	8027f90 <_strtod_l+0x2b8>
 8027f9c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8027fa0:	2d08      	cmp	r5, #8
 8027fa2:	f63f af77 	bhi.w	8027e94 <_strtod_l+0x1bc>
 8027fa6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8027faa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027fac:	9208      	str	r2, [sp, #32]
 8027fae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027fb0:	1c55      	adds	r5, r2, #1
 8027fb2:	9517      	str	r5, [sp, #92]	; 0x5c
 8027fb4:	7852      	ldrb	r2, [r2, #1]
 8027fb6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8027fba:	2f09      	cmp	r7, #9
 8027fbc:	d937      	bls.n	802802e <_strtod_l+0x356>
 8027fbe:	9f08      	ldr	r7, [sp, #32]
 8027fc0:	1bed      	subs	r5, r5, r7
 8027fc2:	2d08      	cmp	r5, #8
 8027fc4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8027fc8:	dc02      	bgt.n	8027fd0 <_strtod_l+0x2f8>
 8027fca:	4565      	cmp	r5, ip
 8027fcc:	bfa8      	it	ge
 8027fce:	4665      	movge	r5, ip
 8027fd0:	f1be 0f00 	cmp.w	lr, #0
 8027fd4:	d000      	beq.n	8027fd8 <_strtod_l+0x300>
 8027fd6:	426d      	negs	r5, r5
 8027fd8:	2b00      	cmp	r3, #0
 8027fda:	d14f      	bne.n	802807c <_strtod_l+0x3a4>
 8027fdc:	9b06      	ldr	r3, [sp, #24]
 8027fde:	4303      	orrs	r3, r0
 8027fe0:	f47f aebe 	bne.w	8027d60 <_strtod_l+0x88>
 8027fe4:	2900      	cmp	r1, #0
 8027fe6:	f47f aed8 	bne.w	8027d9a <_strtod_l+0xc2>
 8027fea:	2a69      	cmp	r2, #105	; 0x69
 8027fec:	d027      	beq.n	802803e <_strtod_l+0x366>
 8027fee:	dc24      	bgt.n	802803a <_strtod_l+0x362>
 8027ff0:	2a49      	cmp	r2, #73	; 0x49
 8027ff2:	d024      	beq.n	802803e <_strtod_l+0x366>
 8027ff4:	2a4e      	cmp	r2, #78	; 0x4e
 8027ff6:	f47f aed0 	bne.w	8027d9a <_strtod_l+0xc2>
 8027ffa:	499b      	ldr	r1, [pc, #620]	; (8028268 <_strtod_l+0x590>)
 8027ffc:	a817      	add	r0, sp, #92	; 0x5c
 8027ffe:	f002 f873 	bl	802a0e8 <__match>
 8028002:	2800      	cmp	r0, #0
 8028004:	f43f aec9 	beq.w	8027d9a <_strtod_l+0xc2>
 8028008:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802800a:	781b      	ldrb	r3, [r3, #0]
 802800c:	2b28      	cmp	r3, #40	; 0x28
 802800e:	d12d      	bne.n	802806c <_strtod_l+0x394>
 8028010:	4996      	ldr	r1, [pc, #600]	; (802826c <_strtod_l+0x594>)
 8028012:	aa1a      	add	r2, sp, #104	; 0x68
 8028014:	a817      	add	r0, sp, #92	; 0x5c
 8028016:	f002 f87b 	bl	802a110 <__hexnan>
 802801a:	2805      	cmp	r0, #5
 802801c:	d126      	bne.n	802806c <_strtod_l+0x394>
 802801e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8028020:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8028024:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8028028:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 802802c:	e698      	b.n	8027d60 <_strtod_l+0x88>
 802802e:	250a      	movs	r5, #10
 8028030:	fb05 250c 	mla	r5, r5, ip, r2
 8028034:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8028038:	e7b9      	b.n	8027fae <_strtod_l+0x2d6>
 802803a:	2a6e      	cmp	r2, #110	; 0x6e
 802803c:	e7db      	b.n	8027ff6 <_strtod_l+0x31e>
 802803e:	498c      	ldr	r1, [pc, #560]	; (8028270 <_strtod_l+0x598>)
 8028040:	a817      	add	r0, sp, #92	; 0x5c
 8028042:	f002 f851 	bl	802a0e8 <__match>
 8028046:	2800      	cmp	r0, #0
 8028048:	f43f aea7 	beq.w	8027d9a <_strtod_l+0xc2>
 802804c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802804e:	4989      	ldr	r1, [pc, #548]	; (8028274 <_strtod_l+0x59c>)
 8028050:	3b01      	subs	r3, #1
 8028052:	a817      	add	r0, sp, #92	; 0x5c
 8028054:	9317      	str	r3, [sp, #92]	; 0x5c
 8028056:	f002 f847 	bl	802a0e8 <__match>
 802805a:	b910      	cbnz	r0, 8028062 <_strtod_l+0x38a>
 802805c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802805e:	3301      	adds	r3, #1
 8028060:	9317      	str	r3, [sp, #92]	; 0x5c
 8028062:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8028288 <_strtod_l+0x5b0>
 8028066:	f04f 0800 	mov.w	r8, #0
 802806a:	e679      	b.n	8027d60 <_strtod_l+0x88>
 802806c:	4882      	ldr	r0, [pc, #520]	; (8028278 <_strtod_l+0x5a0>)
 802806e:	f002 ffdb 	bl	802b028 <nan>
 8028072:	ed8d 0b04 	vstr	d0, [sp, #16]
 8028076:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 802807a:	e671      	b.n	8027d60 <_strtod_l+0x88>
 802807c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8028080:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8028084:	eba5 020b 	sub.w	r2, r5, fp
 8028088:	2e00      	cmp	r6, #0
 802808a:	bf08      	it	eq
 802808c:	461e      	moveq	r6, r3
 802808e:	2b10      	cmp	r3, #16
 8028090:	ed8d 7b08 	vstr	d7, [sp, #32]
 8028094:	9206      	str	r2, [sp, #24]
 8028096:	461a      	mov	r2, r3
 8028098:	bfa8      	it	ge
 802809a:	2210      	movge	r2, #16
 802809c:	2b09      	cmp	r3, #9
 802809e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80280a2:	dd0e      	ble.n	80280c2 <_strtod_l+0x3ea>
 80280a4:	4975      	ldr	r1, [pc, #468]	; (802827c <_strtod_l+0x5a4>)
 80280a6:	eddd 7a04 	vldr	s15, [sp, #16]
 80280aa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80280ae:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80280b2:	ed9d 5b08 	vldr	d5, [sp, #32]
 80280b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80280ba:	eea5 7b06 	vfma.f64	d7, d5, d6
 80280be:	ec59 8b17 	vmov	r8, r9, d7
 80280c2:	2b0f      	cmp	r3, #15
 80280c4:	dc37      	bgt.n	8028136 <_strtod_l+0x45e>
 80280c6:	9906      	ldr	r1, [sp, #24]
 80280c8:	2900      	cmp	r1, #0
 80280ca:	f43f ae49 	beq.w	8027d60 <_strtod_l+0x88>
 80280ce:	dd23      	ble.n	8028118 <_strtod_l+0x440>
 80280d0:	2916      	cmp	r1, #22
 80280d2:	dc0b      	bgt.n	80280ec <_strtod_l+0x414>
 80280d4:	4b69      	ldr	r3, [pc, #420]	; (802827c <_strtod_l+0x5a4>)
 80280d6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80280da:	ed93 7b00 	vldr	d7, [r3]
 80280de:	ec49 8b16 	vmov	d6, r8, r9
 80280e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80280e6:	ec59 8b17 	vmov	r8, r9, d7
 80280ea:	e639      	b.n	8027d60 <_strtod_l+0x88>
 80280ec:	9806      	ldr	r0, [sp, #24]
 80280ee:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80280f2:	4281      	cmp	r1, r0
 80280f4:	db1f      	blt.n	8028136 <_strtod_l+0x45e>
 80280f6:	4a61      	ldr	r2, [pc, #388]	; (802827c <_strtod_l+0x5a4>)
 80280f8:	f1c3 030f 	rsb	r3, r3, #15
 80280fc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8028100:	ed91 7b00 	vldr	d7, [r1]
 8028104:	ec49 8b16 	vmov	d6, r8, r9
 8028108:	1ac3      	subs	r3, r0, r3
 802810a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802810e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028112:	ed92 6b00 	vldr	d6, [r2]
 8028116:	e7e4      	b.n	80280e2 <_strtod_l+0x40a>
 8028118:	9906      	ldr	r1, [sp, #24]
 802811a:	3116      	adds	r1, #22
 802811c:	db0b      	blt.n	8028136 <_strtod_l+0x45e>
 802811e:	4b57      	ldr	r3, [pc, #348]	; (802827c <_strtod_l+0x5a4>)
 8028120:	ebab 0505 	sub.w	r5, fp, r5
 8028124:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8028128:	ed95 7b00 	vldr	d7, [r5]
 802812c:	ec49 8b16 	vmov	d6, r8, r9
 8028130:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8028134:	e7d7      	b.n	80280e6 <_strtod_l+0x40e>
 8028136:	9906      	ldr	r1, [sp, #24]
 8028138:	1a9a      	subs	r2, r3, r2
 802813a:	440a      	add	r2, r1
 802813c:	2a00      	cmp	r2, #0
 802813e:	dd74      	ble.n	802822a <_strtod_l+0x552>
 8028140:	f012 000f 	ands.w	r0, r2, #15
 8028144:	d00a      	beq.n	802815c <_strtod_l+0x484>
 8028146:	494d      	ldr	r1, [pc, #308]	; (802827c <_strtod_l+0x5a4>)
 8028148:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 802814c:	ed91 7b00 	vldr	d7, [r1]
 8028150:	ec49 8b16 	vmov	d6, r8, r9
 8028154:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028158:	ec59 8b17 	vmov	r8, r9, d7
 802815c:	f032 020f 	bics.w	r2, r2, #15
 8028160:	d04f      	beq.n	8028202 <_strtod_l+0x52a>
 8028162:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8028166:	dd22      	ble.n	80281ae <_strtod_l+0x4d6>
 8028168:	2500      	movs	r5, #0
 802816a:	462e      	mov	r6, r5
 802816c:	950a      	str	r5, [sp, #40]	; 0x28
 802816e:	462f      	mov	r7, r5
 8028170:	2322      	movs	r3, #34	; 0x22
 8028172:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8028288 <_strtod_l+0x5b0>
 8028176:	6023      	str	r3, [r4, #0]
 8028178:	f04f 0800 	mov.w	r8, #0
 802817c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802817e:	2b00      	cmp	r3, #0
 8028180:	f43f adee 	beq.w	8027d60 <_strtod_l+0x88>
 8028184:	9918      	ldr	r1, [sp, #96]	; 0x60
 8028186:	4620      	mov	r0, r4
 8028188:	f002 f942 	bl	802a410 <_Bfree>
 802818c:	4639      	mov	r1, r7
 802818e:	4620      	mov	r0, r4
 8028190:	f002 f93e 	bl	802a410 <_Bfree>
 8028194:	4631      	mov	r1, r6
 8028196:	4620      	mov	r0, r4
 8028198:	f002 f93a 	bl	802a410 <_Bfree>
 802819c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802819e:	4620      	mov	r0, r4
 80281a0:	f002 f936 	bl	802a410 <_Bfree>
 80281a4:	4629      	mov	r1, r5
 80281a6:	4620      	mov	r0, r4
 80281a8:	f002 f932 	bl	802a410 <_Bfree>
 80281ac:	e5d8      	b.n	8027d60 <_strtod_l+0x88>
 80281ae:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80281b2:	2000      	movs	r0, #0
 80281b4:	4f32      	ldr	r7, [pc, #200]	; (8028280 <_strtod_l+0x5a8>)
 80281b6:	1112      	asrs	r2, r2, #4
 80281b8:	4601      	mov	r1, r0
 80281ba:	2a01      	cmp	r2, #1
 80281bc:	dc24      	bgt.n	8028208 <_strtod_l+0x530>
 80281be:	b108      	cbz	r0, 80281c4 <_strtod_l+0x4ec>
 80281c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80281c4:	4a2e      	ldr	r2, [pc, #184]	; (8028280 <_strtod_l+0x5a8>)
 80281c6:	482f      	ldr	r0, [pc, #188]	; (8028284 <_strtod_l+0x5ac>)
 80281c8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80281cc:	ed91 7b00 	vldr	d7, [r1]
 80281d0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80281d4:	ec49 8b16 	vmov	d6, r8, r9
 80281d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80281dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80281e0:	9905      	ldr	r1, [sp, #20]
 80281e2:	4a29      	ldr	r2, [pc, #164]	; (8028288 <_strtod_l+0x5b0>)
 80281e4:	400a      	ands	r2, r1
 80281e6:	4282      	cmp	r2, r0
 80281e8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80281ec:	d8bc      	bhi.n	8028168 <_strtod_l+0x490>
 80281ee:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80281f2:	4282      	cmp	r2, r0
 80281f4:	bf86      	itte	hi
 80281f6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 802828c <_strtod_l+0x5b4>
 80281fa:	f04f 38ff 	movhi.w	r8, #4294967295
 80281fe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8028202:	2200      	movs	r2, #0
 8028204:	9204      	str	r2, [sp, #16]
 8028206:	e07f      	b.n	8028308 <_strtod_l+0x630>
 8028208:	f012 0f01 	tst.w	r2, #1
 802820c:	d00a      	beq.n	8028224 <_strtod_l+0x54c>
 802820e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8028212:	ed90 7b00 	vldr	d7, [r0]
 8028216:	ed9d 6b04 	vldr	d6, [sp, #16]
 802821a:	ee26 7b07 	vmul.f64	d7, d6, d7
 802821e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8028222:	2001      	movs	r0, #1
 8028224:	3101      	adds	r1, #1
 8028226:	1052      	asrs	r2, r2, #1
 8028228:	e7c7      	b.n	80281ba <_strtod_l+0x4e2>
 802822a:	d0ea      	beq.n	8028202 <_strtod_l+0x52a>
 802822c:	4252      	negs	r2, r2
 802822e:	f012 000f 	ands.w	r0, r2, #15
 8028232:	d00a      	beq.n	802824a <_strtod_l+0x572>
 8028234:	4911      	ldr	r1, [pc, #68]	; (802827c <_strtod_l+0x5a4>)
 8028236:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 802823a:	ed91 7b00 	vldr	d7, [r1]
 802823e:	ec49 8b16 	vmov	d6, r8, r9
 8028242:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8028246:	ec59 8b17 	vmov	r8, r9, d7
 802824a:	1112      	asrs	r2, r2, #4
 802824c:	d0d9      	beq.n	8028202 <_strtod_l+0x52a>
 802824e:	2a1f      	cmp	r2, #31
 8028250:	dd1e      	ble.n	8028290 <_strtod_l+0x5b8>
 8028252:	2500      	movs	r5, #0
 8028254:	462e      	mov	r6, r5
 8028256:	950a      	str	r5, [sp, #40]	; 0x28
 8028258:	462f      	mov	r7, r5
 802825a:	2322      	movs	r3, #34	; 0x22
 802825c:	f04f 0800 	mov.w	r8, #0
 8028260:	f04f 0900 	mov.w	r9, #0
 8028264:	6023      	str	r3, [r4, #0]
 8028266:	e789      	b.n	802817c <_strtod_l+0x4a4>
 8028268:	0802f4da 	.word	0x0802f4da
 802826c:	0802f51c 	.word	0x0802f51c
 8028270:	0802f4d2 	.word	0x0802f4d2
 8028274:	0802f65c 	.word	0x0802f65c
 8028278:	0802f4b7 	.word	0x0802f4b7
 802827c:	0802f858 	.word	0x0802f858
 8028280:	0802f830 	.word	0x0802f830
 8028284:	7ca00000 	.word	0x7ca00000
 8028288:	7ff00000 	.word	0x7ff00000
 802828c:	7fefffff 	.word	0x7fefffff
 8028290:	f012 0110 	ands.w	r1, r2, #16
 8028294:	bf18      	it	ne
 8028296:	216a      	movne	r1, #106	; 0x6a
 8028298:	e9cd 8908 	strd	r8, r9, [sp, #32]
 802829c:	9104      	str	r1, [sp, #16]
 802829e:	49c0      	ldr	r1, [pc, #768]	; (80285a0 <_strtod_l+0x8c8>)
 80282a0:	2000      	movs	r0, #0
 80282a2:	07d7      	lsls	r7, r2, #31
 80282a4:	d508      	bpl.n	80282b8 <_strtod_l+0x5e0>
 80282a6:	ed9d 6b08 	vldr	d6, [sp, #32]
 80282aa:	ed91 7b00 	vldr	d7, [r1]
 80282ae:	ee26 7b07 	vmul.f64	d7, d6, d7
 80282b2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80282b6:	2001      	movs	r0, #1
 80282b8:	1052      	asrs	r2, r2, #1
 80282ba:	f101 0108 	add.w	r1, r1, #8
 80282be:	d1f0      	bne.n	80282a2 <_strtod_l+0x5ca>
 80282c0:	b108      	cbz	r0, 80282c6 <_strtod_l+0x5ee>
 80282c2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80282c6:	9a04      	ldr	r2, [sp, #16]
 80282c8:	b1ba      	cbz	r2, 80282fa <_strtod_l+0x622>
 80282ca:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80282ce:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80282d2:	2a00      	cmp	r2, #0
 80282d4:	4649      	mov	r1, r9
 80282d6:	dd10      	ble.n	80282fa <_strtod_l+0x622>
 80282d8:	2a1f      	cmp	r2, #31
 80282da:	f340 8132 	ble.w	8028542 <_strtod_l+0x86a>
 80282de:	2a34      	cmp	r2, #52	; 0x34
 80282e0:	bfde      	ittt	le
 80282e2:	3a20      	suble	r2, #32
 80282e4:	f04f 30ff 	movle.w	r0, #4294967295
 80282e8:	fa00 f202 	lslle.w	r2, r0, r2
 80282ec:	f04f 0800 	mov.w	r8, #0
 80282f0:	bfcc      	ite	gt
 80282f2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80282f6:	ea02 0901 	andle.w	r9, r2, r1
 80282fa:	ec49 8b17 	vmov	d7, r8, r9
 80282fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8028302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028306:	d0a4      	beq.n	8028252 <_strtod_l+0x57a>
 8028308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802830a:	9200      	str	r2, [sp, #0]
 802830c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802830e:	4632      	mov	r2, r6
 8028310:	4620      	mov	r0, r4
 8028312:	f002 f8e9 	bl	802a4e8 <__s2b>
 8028316:	900a      	str	r0, [sp, #40]	; 0x28
 8028318:	2800      	cmp	r0, #0
 802831a:	f43f af25 	beq.w	8028168 <_strtod_l+0x490>
 802831e:	9b06      	ldr	r3, [sp, #24]
 8028320:	ebab 0505 	sub.w	r5, fp, r5
 8028324:	2b00      	cmp	r3, #0
 8028326:	bfb4      	ite	lt
 8028328:	462b      	movlt	r3, r5
 802832a:	2300      	movge	r3, #0
 802832c:	930c      	str	r3, [sp, #48]	; 0x30
 802832e:	9b06      	ldr	r3, [sp, #24]
 8028330:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8028588 <_strtod_l+0x8b0>
 8028334:	ed9f ab96 	vldr	d10, [pc, #600]	; 8028590 <_strtod_l+0x8b8>
 8028338:	ed9f bb97 	vldr	d11, [pc, #604]	; 8028598 <_strtod_l+0x8c0>
 802833c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8028340:	2500      	movs	r5, #0
 8028342:	9312      	str	r3, [sp, #72]	; 0x48
 8028344:	462e      	mov	r6, r5
 8028346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028348:	4620      	mov	r0, r4
 802834a:	6859      	ldr	r1, [r3, #4]
 802834c:	f002 f820 	bl	802a390 <_Balloc>
 8028350:	4607      	mov	r7, r0
 8028352:	2800      	cmp	r0, #0
 8028354:	f43f af0c 	beq.w	8028170 <_strtod_l+0x498>
 8028358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802835a:	691a      	ldr	r2, [r3, #16]
 802835c:	3202      	adds	r2, #2
 802835e:	f103 010c 	add.w	r1, r3, #12
 8028362:	0092      	lsls	r2, r2, #2
 8028364:	300c      	adds	r0, #12
 8028366:	f7fe fbc1 	bl	8026aec <memcpy>
 802836a:	ec49 8b10 	vmov	d0, r8, r9
 802836e:	aa1a      	add	r2, sp, #104	; 0x68
 8028370:	a919      	add	r1, sp, #100	; 0x64
 8028372:	4620      	mov	r0, r4
 8028374:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8028378:	f002 fbf2 	bl	802ab60 <__d2b>
 802837c:	9018      	str	r0, [sp, #96]	; 0x60
 802837e:	2800      	cmp	r0, #0
 8028380:	f43f aef6 	beq.w	8028170 <_strtod_l+0x498>
 8028384:	2101      	movs	r1, #1
 8028386:	4620      	mov	r0, r4
 8028388:	f002 f948 	bl	802a61c <__i2b>
 802838c:	4606      	mov	r6, r0
 802838e:	2800      	cmp	r0, #0
 8028390:	f43f aeee 	beq.w	8028170 <_strtod_l+0x498>
 8028394:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8028396:	991a      	ldr	r1, [sp, #104]	; 0x68
 8028398:	2b00      	cmp	r3, #0
 802839a:	bfab      	itete	ge
 802839c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 802839e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80283a0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 80283a4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80283a8:	bfac      	ite	ge
 80283aa:	eb03 0b02 	addge.w	fp, r3, r2
 80283ae:	eba2 0a03 	sublt.w	sl, r2, r3
 80283b2:	9a04      	ldr	r2, [sp, #16]
 80283b4:	1a9b      	subs	r3, r3, r2
 80283b6:	440b      	add	r3, r1
 80283b8:	4a7a      	ldr	r2, [pc, #488]	; (80285a4 <_strtod_l+0x8cc>)
 80283ba:	3b01      	subs	r3, #1
 80283bc:	4293      	cmp	r3, r2
 80283be:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80283c2:	f280 80d1 	bge.w	8028568 <_strtod_l+0x890>
 80283c6:	1ad2      	subs	r2, r2, r3
 80283c8:	2a1f      	cmp	r2, #31
 80283ca:	eba1 0102 	sub.w	r1, r1, r2
 80283ce:	f04f 0001 	mov.w	r0, #1
 80283d2:	f300 80bd 	bgt.w	8028550 <_strtod_l+0x878>
 80283d6:	fa00 f302 	lsl.w	r3, r0, r2
 80283da:	930e      	str	r3, [sp, #56]	; 0x38
 80283dc:	2300      	movs	r3, #0
 80283de:	930d      	str	r3, [sp, #52]	; 0x34
 80283e0:	eb0b 0301 	add.w	r3, fp, r1
 80283e4:	9a04      	ldr	r2, [sp, #16]
 80283e6:	459b      	cmp	fp, r3
 80283e8:	448a      	add	sl, r1
 80283ea:	4492      	add	sl, r2
 80283ec:	465a      	mov	r2, fp
 80283ee:	bfa8      	it	ge
 80283f0:	461a      	movge	r2, r3
 80283f2:	4552      	cmp	r2, sl
 80283f4:	bfa8      	it	ge
 80283f6:	4652      	movge	r2, sl
 80283f8:	2a00      	cmp	r2, #0
 80283fa:	bfc2      	ittt	gt
 80283fc:	1a9b      	subgt	r3, r3, r2
 80283fe:	ebaa 0a02 	subgt.w	sl, sl, r2
 8028402:	ebab 0b02 	subgt.w	fp, fp, r2
 8028406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028408:	2a00      	cmp	r2, #0
 802840a:	dd18      	ble.n	802843e <_strtod_l+0x766>
 802840c:	4631      	mov	r1, r6
 802840e:	4620      	mov	r0, r4
 8028410:	9315      	str	r3, [sp, #84]	; 0x54
 8028412:	f002 f9bf 	bl	802a794 <__pow5mult>
 8028416:	4606      	mov	r6, r0
 8028418:	2800      	cmp	r0, #0
 802841a:	f43f aea9 	beq.w	8028170 <_strtod_l+0x498>
 802841e:	4601      	mov	r1, r0
 8028420:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8028422:	4620      	mov	r0, r4
 8028424:	f002 f910 	bl	802a648 <__multiply>
 8028428:	9014      	str	r0, [sp, #80]	; 0x50
 802842a:	2800      	cmp	r0, #0
 802842c:	f43f aea0 	beq.w	8028170 <_strtod_l+0x498>
 8028430:	9918      	ldr	r1, [sp, #96]	; 0x60
 8028432:	4620      	mov	r0, r4
 8028434:	f001 ffec 	bl	802a410 <_Bfree>
 8028438:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802843a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802843c:	9218      	str	r2, [sp, #96]	; 0x60
 802843e:	2b00      	cmp	r3, #0
 8028440:	f300 8097 	bgt.w	8028572 <_strtod_l+0x89a>
 8028444:	9b06      	ldr	r3, [sp, #24]
 8028446:	2b00      	cmp	r3, #0
 8028448:	dd08      	ble.n	802845c <_strtod_l+0x784>
 802844a:	4639      	mov	r1, r7
 802844c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802844e:	4620      	mov	r0, r4
 8028450:	f002 f9a0 	bl	802a794 <__pow5mult>
 8028454:	4607      	mov	r7, r0
 8028456:	2800      	cmp	r0, #0
 8028458:	f43f ae8a 	beq.w	8028170 <_strtod_l+0x498>
 802845c:	f1ba 0f00 	cmp.w	sl, #0
 8028460:	dd08      	ble.n	8028474 <_strtod_l+0x79c>
 8028462:	4639      	mov	r1, r7
 8028464:	4652      	mov	r2, sl
 8028466:	4620      	mov	r0, r4
 8028468:	f002 f9ee 	bl	802a848 <__lshift>
 802846c:	4607      	mov	r7, r0
 802846e:	2800      	cmp	r0, #0
 8028470:	f43f ae7e 	beq.w	8028170 <_strtod_l+0x498>
 8028474:	f1bb 0f00 	cmp.w	fp, #0
 8028478:	dd08      	ble.n	802848c <_strtod_l+0x7b4>
 802847a:	4631      	mov	r1, r6
 802847c:	465a      	mov	r2, fp
 802847e:	4620      	mov	r0, r4
 8028480:	f002 f9e2 	bl	802a848 <__lshift>
 8028484:	4606      	mov	r6, r0
 8028486:	2800      	cmp	r0, #0
 8028488:	f43f ae72 	beq.w	8028170 <_strtod_l+0x498>
 802848c:	9918      	ldr	r1, [sp, #96]	; 0x60
 802848e:	463a      	mov	r2, r7
 8028490:	4620      	mov	r0, r4
 8028492:	f002 fa61 	bl	802a958 <__mdiff>
 8028496:	4605      	mov	r5, r0
 8028498:	2800      	cmp	r0, #0
 802849a:	f43f ae69 	beq.w	8028170 <_strtod_l+0x498>
 802849e:	2300      	movs	r3, #0
 80284a0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80284a4:	60c3      	str	r3, [r0, #12]
 80284a6:	4631      	mov	r1, r6
 80284a8:	f002 fa3a 	bl	802a920 <__mcmp>
 80284ac:	2800      	cmp	r0, #0
 80284ae:	da7f      	bge.n	80285b0 <_strtod_l+0x8d8>
 80284b0:	ea5a 0308 	orrs.w	r3, sl, r8
 80284b4:	f040 80a5 	bne.w	8028602 <_strtod_l+0x92a>
 80284b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80284bc:	2b00      	cmp	r3, #0
 80284be:	f040 80a0 	bne.w	8028602 <_strtod_l+0x92a>
 80284c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80284c6:	0d1b      	lsrs	r3, r3, #20
 80284c8:	051b      	lsls	r3, r3, #20
 80284ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80284ce:	f240 8098 	bls.w	8028602 <_strtod_l+0x92a>
 80284d2:	696b      	ldr	r3, [r5, #20]
 80284d4:	b91b      	cbnz	r3, 80284de <_strtod_l+0x806>
 80284d6:	692b      	ldr	r3, [r5, #16]
 80284d8:	2b01      	cmp	r3, #1
 80284da:	f340 8092 	ble.w	8028602 <_strtod_l+0x92a>
 80284de:	4629      	mov	r1, r5
 80284e0:	2201      	movs	r2, #1
 80284e2:	4620      	mov	r0, r4
 80284e4:	f002 f9b0 	bl	802a848 <__lshift>
 80284e8:	4631      	mov	r1, r6
 80284ea:	4605      	mov	r5, r0
 80284ec:	f002 fa18 	bl	802a920 <__mcmp>
 80284f0:	2800      	cmp	r0, #0
 80284f2:	f340 8086 	ble.w	8028602 <_strtod_l+0x92a>
 80284f6:	9904      	ldr	r1, [sp, #16]
 80284f8:	4a2b      	ldr	r2, [pc, #172]	; (80285a8 <_strtod_l+0x8d0>)
 80284fa:	464b      	mov	r3, r9
 80284fc:	2900      	cmp	r1, #0
 80284fe:	f000 80a1 	beq.w	8028644 <_strtod_l+0x96c>
 8028502:	ea02 0109 	and.w	r1, r2, r9
 8028506:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802850a:	f300 809b 	bgt.w	8028644 <_strtod_l+0x96c>
 802850e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8028512:	f77f aea2 	ble.w	802825a <_strtod_l+0x582>
 8028516:	4a25      	ldr	r2, [pc, #148]	; (80285ac <_strtod_l+0x8d4>)
 8028518:	2300      	movs	r3, #0
 802851a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 802851e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8028522:	ec49 8b17 	vmov	d7, r8, r9
 8028526:	ee27 7b06 	vmul.f64	d7, d7, d6
 802852a:	ed8d 7b04 	vstr	d7, [sp, #16]
 802852e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8028532:	4313      	orrs	r3, r2
 8028534:	bf08      	it	eq
 8028536:	2322      	moveq	r3, #34	; 0x22
 8028538:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 802853c:	bf08      	it	eq
 802853e:	6023      	streq	r3, [r4, #0]
 8028540:	e620      	b.n	8028184 <_strtod_l+0x4ac>
 8028542:	f04f 31ff 	mov.w	r1, #4294967295
 8028546:	fa01 f202 	lsl.w	r2, r1, r2
 802854a:	ea02 0808 	and.w	r8, r2, r8
 802854e:	e6d4      	b.n	80282fa <_strtod_l+0x622>
 8028550:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8028554:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8028558:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 802855c:	33e2      	adds	r3, #226	; 0xe2
 802855e:	fa00 f303 	lsl.w	r3, r0, r3
 8028562:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8028566:	e73b      	b.n	80283e0 <_strtod_l+0x708>
 8028568:	2000      	movs	r0, #0
 802856a:	2301      	movs	r3, #1
 802856c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8028570:	e736      	b.n	80283e0 <_strtod_l+0x708>
 8028572:	9918      	ldr	r1, [sp, #96]	; 0x60
 8028574:	461a      	mov	r2, r3
 8028576:	4620      	mov	r0, r4
 8028578:	f002 f966 	bl	802a848 <__lshift>
 802857c:	9018      	str	r0, [sp, #96]	; 0x60
 802857e:	2800      	cmp	r0, #0
 8028580:	f47f af60 	bne.w	8028444 <_strtod_l+0x76c>
 8028584:	e5f4      	b.n	8028170 <_strtod_l+0x498>
 8028586:	bf00      	nop
 8028588:	94a03595 	.word	0x94a03595
 802858c:	3fcfffff 	.word	0x3fcfffff
 8028590:	94a03595 	.word	0x94a03595
 8028594:	3fdfffff 	.word	0x3fdfffff
 8028598:	35afe535 	.word	0x35afe535
 802859c:	3fe00000 	.word	0x3fe00000
 80285a0:	0802f530 	.word	0x0802f530
 80285a4:	fffffc02 	.word	0xfffffc02
 80285a8:	7ff00000 	.word	0x7ff00000
 80285ac:	39500000 	.word	0x39500000
 80285b0:	46cb      	mov	fp, r9
 80285b2:	d165      	bne.n	8028680 <_strtod_l+0x9a8>
 80285b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80285b8:	f1ba 0f00 	cmp.w	sl, #0
 80285bc:	d02a      	beq.n	8028614 <_strtod_l+0x93c>
 80285be:	4aaa      	ldr	r2, [pc, #680]	; (8028868 <_strtod_l+0xb90>)
 80285c0:	4293      	cmp	r3, r2
 80285c2:	d12b      	bne.n	802861c <_strtod_l+0x944>
 80285c4:	9b04      	ldr	r3, [sp, #16]
 80285c6:	4641      	mov	r1, r8
 80285c8:	b1fb      	cbz	r3, 802860a <_strtod_l+0x932>
 80285ca:	4aa8      	ldr	r2, [pc, #672]	; (802886c <_strtod_l+0xb94>)
 80285cc:	ea09 0202 	and.w	r2, r9, r2
 80285d0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80285d4:	f04f 30ff 	mov.w	r0, #4294967295
 80285d8:	d81a      	bhi.n	8028610 <_strtod_l+0x938>
 80285da:	0d12      	lsrs	r2, r2, #20
 80285dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80285e0:	fa00 f303 	lsl.w	r3, r0, r3
 80285e4:	4299      	cmp	r1, r3
 80285e6:	d119      	bne.n	802861c <_strtod_l+0x944>
 80285e8:	4ba1      	ldr	r3, [pc, #644]	; (8028870 <_strtod_l+0xb98>)
 80285ea:	459b      	cmp	fp, r3
 80285ec:	d102      	bne.n	80285f4 <_strtod_l+0x91c>
 80285ee:	3101      	adds	r1, #1
 80285f0:	f43f adbe 	beq.w	8028170 <_strtod_l+0x498>
 80285f4:	4b9d      	ldr	r3, [pc, #628]	; (802886c <_strtod_l+0xb94>)
 80285f6:	ea0b 0303 	and.w	r3, fp, r3
 80285fa:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80285fe:	f04f 0800 	mov.w	r8, #0
 8028602:	9b04      	ldr	r3, [sp, #16]
 8028604:	2b00      	cmp	r3, #0
 8028606:	d186      	bne.n	8028516 <_strtod_l+0x83e>
 8028608:	e5bc      	b.n	8028184 <_strtod_l+0x4ac>
 802860a:	f04f 33ff 	mov.w	r3, #4294967295
 802860e:	e7e9      	b.n	80285e4 <_strtod_l+0x90c>
 8028610:	4603      	mov	r3, r0
 8028612:	e7e7      	b.n	80285e4 <_strtod_l+0x90c>
 8028614:	ea53 0308 	orrs.w	r3, r3, r8
 8028618:	f43f af6d 	beq.w	80284f6 <_strtod_l+0x81e>
 802861c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802861e:	b1db      	cbz	r3, 8028658 <_strtod_l+0x980>
 8028620:	ea13 0f0b 	tst.w	r3, fp
 8028624:	d0ed      	beq.n	8028602 <_strtod_l+0x92a>
 8028626:	9a04      	ldr	r2, [sp, #16]
 8028628:	4640      	mov	r0, r8
 802862a:	4649      	mov	r1, r9
 802862c:	f1ba 0f00 	cmp.w	sl, #0
 8028630:	d016      	beq.n	8028660 <_strtod_l+0x988>
 8028632:	f7ff fb35 	bl	8027ca0 <sulp>
 8028636:	ed9d 7b08 	vldr	d7, [sp, #32]
 802863a:	ee37 7b00 	vadd.f64	d7, d7, d0
 802863e:	ec59 8b17 	vmov	r8, r9, d7
 8028642:	e7de      	b.n	8028602 <_strtod_l+0x92a>
 8028644:	4013      	ands	r3, r2
 8028646:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802864a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 802864e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8028652:	f04f 38ff 	mov.w	r8, #4294967295
 8028656:	e7d4      	b.n	8028602 <_strtod_l+0x92a>
 8028658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802865a:	ea13 0f08 	tst.w	r3, r8
 802865e:	e7e1      	b.n	8028624 <_strtod_l+0x94c>
 8028660:	f7ff fb1e 	bl	8027ca0 <sulp>
 8028664:	ed9d 7b08 	vldr	d7, [sp, #32]
 8028668:	ee37 7b40 	vsub.f64	d7, d7, d0
 802866c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8028670:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8028674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028678:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 802867c:	d1c1      	bne.n	8028602 <_strtod_l+0x92a>
 802867e:	e5ec      	b.n	802825a <_strtod_l+0x582>
 8028680:	4631      	mov	r1, r6
 8028682:	4628      	mov	r0, r5
 8028684:	f002 fac8 	bl	802ac18 <__ratio>
 8028688:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 802868c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8028690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028694:	d867      	bhi.n	8028766 <_strtod_l+0xa8e>
 8028696:	f1ba 0f00 	cmp.w	sl, #0
 802869a:	d044      	beq.n	8028726 <_strtod_l+0xa4e>
 802869c:	4b75      	ldr	r3, [pc, #468]	; (8028874 <_strtod_l+0xb9c>)
 802869e:	2200      	movs	r2, #0
 80286a0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80286a4:	4971      	ldr	r1, [pc, #452]	; (802886c <_strtod_l+0xb94>)
 80286a6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8028880 <_strtod_l+0xba8>
 80286aa:	ea0b 0001 	and.w	r0, fp, r1
 80286ae:	4560      	cmp	r0, ip
 80286b0:	900d      	str	r0, [sp, #52]	; 0x34
 80286b2:	f040 808b 	bne.w	80287cc <_strtod_l+0xaf4>
 80286b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80286ba:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80286be:	ec49 8b10 	vmov	d0, r8, r9
 80286c2:	ec43 2b1c 	vmov	d12, r2, r3
 80286c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80286ca:	f002 f9cd 	bl	802aa68 <__ulp>
 80286ce:	ec49 8b1d 	vmov	d13, r8, r9
 80286d2:	eeac db00 	vfma.f64	d13, d12, d0
 80286d6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 80286da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80286dc:	4963      	ldr	r1, [pc, #396]	; (802886c <_strtod_l+0xb94>)
 80286de:	4a66      	ldr	r2, [pc, #408]	; (8028878 <_strtod_l+0xba0>)
 80286e0:	4019      	ands	r1, r3
 80286e2:	4291      	cmp	r1, r2
 80286e4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80286e8:	d947      	bls.n	802877a <_strtod_l+0xaa2>
 80286ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80286ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80286f0:	4293      	cmp	r3, r2
 80286f2:	d103      	bne.n	80286fc <_strtod_l+0xa24>
 80286f4:	9b08      	ldr	r3, [sp, #32]
 80286f6:	3301      	adds	r3, #1
 80286f8:	f43f ad3a 	beq.w	8028170 <_strtod_l+0x498>
 80286fc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8028870 <_strtod_l+0xb98>
 8028700:	f04f 38ff 	mov.w	r8, #4294967295
 8028704:	9918      	ldr	r1, [sp, #96]	; 0x60
 8028706:	4620      	mov	r0, r4
 8028708:	f001 fe82 	bl	802a410 <_Bfree>
 802870c:	4639      	mov	r1, r7
 802870e:	4620      	mov	r0, r4
 8028710:	f001 fe7e 	bl	802a410 <_Bfree>
 8028714:	4631      	mov	r1, r6
 8028716:	4620      	mov	r0, r4
 8028718:	f001 fe7a 	bl	802a410 <_Bfree>
 802871c:	4629      	mov	r1, r5
 802871e:	4620      	mov	r0, r4
 8028720:	f001 fe76 	bl	802a410 <_Bfree>
 8028724:	e60f      	b.n	8028346 <_strtod_l+0x66e>
 8028726:	f1b8 0f00 	cmp.w	r8, #0
 802872a:	d112      	bne.n	8028752 <_strtod_l+0xa7a>
 802872c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8028730:	b9b3      	cbnz	r3, 8028760 <_strtod_l+0xa88>
 8028732:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8028736:	eeb4 0bc7 	vcmpe.f64	d0, d7
 802873a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802873e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8028742:	d401      	bmi.n	8028748 <_strtod_l+0xa70>
 8028744:	ee20 8b08 	vmul.f64	d8, d0, d8
 8028748:	eeb1 7b48 	vneg.f64	d7, d8
 802874c:	ec53 2b17 	vmov	r2, r3, d7
 8028750:	e7a8      	b.n	80286a4 <_strtod_l+0x9cc>
 8028752:	f1b8 0f01 	cmp.w	r8, #1
 8028756:	d103      	bne.n	8028760 <_strtod_l+0xa88>
 8028758:	f1b9 0f00 	cmp.w	r9, #0
 802875c:	f43f ad7d 	beq.w	802825a <_strtod_l+0x582>
 8028760:	4b46      	ldr	r3, [pc, #280]	; (802887c <_strtod_l+0xba4>)
 8028762:	2200      	movs	r2, #0
 8028764:	e79c      	b.n	80286a0 <_strtod_l+0x9c8>
 8028766:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 802876a:	ee20 8b08 	vmul.f64	d8, d0, d8
 802876e:	f1ba 0f00 	cmp.w	sl, #0
 8028772:	d0e9      	beq.n	8028748 <_strtod_l+0xa70>
 8028774:	ec53 2b18 	vmov	r2, r3, d8
 8028778:	e794      	b.n	80286a4 <_strtod_l+0x9cc>
 802877a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 802877e:	9b04      	ldr	r3, [sp, #16]
 8028780:	2b00      	cmp	r3, #0
 8028782:	d1bf      	bne.n	8028704 <_strtod_l+0xa2c>
 8028784:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8028788:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802878a:	0d1b      	lsrs	r3, r3, #20
 802878c:	051b      	lsls	r3, r3, #20
 802878e:	429a      	cmp	r2, r3
 8028790:	d1b8      	bne.n	8028704 <_strtod_l+0xa2c>
 8028792:	ec51 0b18 	vmov	r0, r1, d8
 8028796:	f7d7 ff7f 	bl	8000698 <__aeabi_d2lz>
 802879a:	f7d7 ff37 	bl	800060c <__aeabi_l2d>
 802879e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80287a2:	ec41 0b17 	vmov	d7, r0, r1
 80287a6:	ea43 0308 	orr.w	r3, r3, r8
 80287aa:	ea53 030a 	orrs.w	r3, r3, sl
 80287ae:	ee38 8b47 	vsub.f64	d8, d8, d7
 80287b2:	d03e      	beq.n	8028832 <_strtod_l+0xb5a>
 80287b4:	eeb4 8bca 	vcmpe.f64	d8, d10
 80287b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80287bc:	f53f ace2 	bmi.w	8028184 <_strtod_l+0x4ac>
 80287c0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80287c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80287c8:	dd9c      	ble.n	8028704 <_strtod_l+0xa2c>
 80287ca:	e4db      	b.n	8028184 <_strtod_l+0x4ac>
 80287cc:	9904      	ldr	r1, [sp, #16]
 80287ce:	b301      	cbz	r1, 8028812 <_strtod_l+0xb3a>
 80287d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80287d2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80287d6:	d81c      	bhi.n	8028812 <_strtod_l+0xb3a>
 80287d8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8028860 <_strtod_l+0xb88>
 80287dc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80287e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80287e4:	d811      	bhi.n	802880a <_strtod_l+0xb32>
 80287e6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80287ea:	ee18 3a10 	vmov	r3, s16
 80287ee:	2b01      	cmp	r3, #1
 80287f0:	bf38      	it	cc
 80287f2:	2301      	movcc	r3, #1
 80287f4:	ee08 3a10 	vmov	s16, r3
 80287f8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80287fc:	f1ba 0f00 	cmp.w	sl, #0
 8028800:	d114      	bne.n	802882c <_strtod_l+0xb54>
 8028802:	eeb1 7b48 	vneg.f64	d7, d8
 8028806:	ec53 2b17 	vmov	r2, r3, d7
 802880a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802880c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8028810:	1a0b      	subs	r3, r1, r0
 8028812:	ed9d 0b08 	vldr	d0, [sp, #32]
 8028816:	ec43 2b1c 	vmov	d12, r2, r3
 802881a:	f002 f925 	bl	802aa68 <__ulp>
 802881e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8028822:	eeac 7b00 	vfma.f64	d7, d12, d0
 8028826:	ec59 8b17 	vmov	r8, r9, d7
 802882a:	e7a8      	b.n	802877e <_strtod_l+0xaa6>
 802882c:	ec53 2b18 	vmov	r2, r3, d8
 8028830:	e7eb      	b.n	802880a <_strtod_l+0xb32>
 8028832:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8028836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802883a:	f57f af63 	bpl.w	8028704 <_strtod_l+0xa2c>
 802883e:	e4a1      	b.n	8028184 <_strtod_l+0x4ac>
 8028840:	2300      	movs	r3, #0
 8028842:	930b      	str	r3, [sp, #44]	; 0x2c
 8028844:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028846:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028848:	6013      	str	r3, [r2, #0]
 802884a:	f7ff ba8d 	b.w	8027d68 <_strtod_l+0x90>
 802884e:	2a65      	cmp	r2, #101	; 0x65
 8028850:	f43f ab89 	beq.w	8027f66 <_strtod_l+0x28e>
 8028854:	2a45      	cmp	r2, #69	; 0x45
 8028856:	f43f ab86 	beq.w	8027f66 <_strtod_l+0x28e>
 802885a:	2101      	movs	r1, #1
 802885c:	f7ff bbbe 	b.w	8027fdc <_strtod_l+0x304>
 8028860:	ffc00000 	.word	0xffc00000
 8028864:	41dfffff 	.word	0x41dfffff
 8028868:	000fffff 	.word	0x000fffff
 802886c:	7ff00000 	.word	0x7ff00000
 8028870:	7fefffff 	.word	0x7fefffff
 8028874:	3ff00000 	.word	0x3ff00000
 8028878:	7c9fffff 	.word	0x7c9fffff
 802887c:	bff00000 	.word	0xbff00000
 8028880:	7fe00000 	.word	0x7fe00000

08028884 <_strtod_r>:
 8028884:	4b01      	ldr	r3, [pc, #4]	; (802888c <_strtod_r+0x8>)
 8028886:	f7ff ba27 	b.w	8027cd8 <_strtod_l>
 802888a:	bf00      	nop
 802888c:	200000e8 	.word	0x200000e8

08028890 <_strtol_l.isra.0>:
 8028890:	2b01      	cmp	r3, #1
 8028892:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028896:	d001      	beq.n	802889c <_strtol_l.isra.0+0xc>
 8028898:	2b24      	cmp	r3, #36	; 0x24
 802889a:	d906      	bls.n	80288aa <_strtol_l.isra.0+0x1a>
 802889c:	f7fe f8da 	bl	8026a54 <__errno>
 80288a0:	2316      	movs	r3, #22
 80288a2:	6003      	str	r3, [r0, #0]
 80288a4:	2000      	movs	r0, #0
 80288a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80288aa:	4f3a      	ldr	r7, [pc, #232]	; (8028994 <_strtol_l.isra.0+0x104>)
 80288ac:	468e      	mov	lr, r1
 80288ae:	4676      	mov	r6, lr
 80288b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80288b4:	5de5      	ldrb	r5, [r4, r7]
 80288b6:	f015 0508 	ands.w	r5, r5, #8
 80288ba:	d1f8      	bne.n	80288ae <_strtol_l.isra.0+0x1e>
 80288bc:	2c2d      	cmp	r4, #45	; 0x2d
 80288be:	d134      	bne.n	802892a <_strtol_l.isra.0+0x9a>
 80288c0:	f89e 4000 	ldrb.w	r4, [lr]
 80288c4:	f04f 0801 	mov.w	r8, #1
 80288c8:	f106 0e02 	add.w	lr, r6, #2
 80288cc:	2b00      	cmp	r3, #0
 80288ce:	d05c      	beq.n	802898a <_strtol_l.isra.0+0xfa>
 80288d0:	2b10      	cmp	r3, #16
 80288d2:	d10c      	bne.n	80288ee <_strtol_l.isra.0+0x5e>
 80288d4:	2c30      	cmp	r4, #48	; 0x30
 80288d6:	d10a      	bne.n	80288ee <_strtol_l.isra.0+0x5e>
 80288d8:	f89e 4000 	ldrb.w	r4, [lr]
 80288dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80288e0:	2c58      	cmp	r4, #88	; 0x58
 80288e2:	d14d      	bne.n	8028980 <_strtol_l.isra.0+0xf0>
 80288e4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80288e8:	2310      	movs	r3, #16
 80288ea:	f10e 0e02 	add.w	lr, lr, #2
 80288ee:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80288f2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80288f6:	2600      	movs	r6, #0
 80288f8:	fbbc f9f3 	udiv	r9, ip, r3
 80288fc:	4635      	mov	r5, r6
 80288fe:	fb03 ca19 	mls	sl, r3, r9, ip
 8028902:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8028906:	2f09      	cmp	r7, #9
 8028908:	d818      	bhi.n	802893c <_strtol_l.isra.0+0xac>
 802890a:	463c      	mov	r4, r7
 802890c:	42a3      	cmp	r3, r4
 802890e:	dd24      	ble.n	802895a <_strtol_l.isra.0+0xca>
 8028910:	2e00      	cmp	r6, #0
 8028912:	db1f      	blt.n	8028954 <_strtol_l.isra.0+0xc4>
 8028914:	45a9      	cmp	r9, r5
 8028916:	d31d      	bcc.n	8028954 <_strtol_l.isra.0+0xc4>
 8028918:	d101      	bne.n	802891e <_strtol_l.isra.0+0x8e>
 802891a:	45a2      	cmp	sl, r4
 802891c:	db1a      	blt.n	8028954 <_strtol_l.isra.0+0xc4>
 802891e:	fb05 4503 	mla	r5, r5, r3, r4
 8028922:	2601      	movs	r6, #1
 8028924:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8028928:	e7eb      	b.n	8028902 <_strtol_l.isra.0+0x72>
 802892a:	2c2b      	cmp	r4, #43	; 0x2b
 802892c:	bf08      	it	eq
 802892e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8028932:	46a8      	mov	r8, r5
 8028934:	bf08      	it	eq
 8028936:	f106 0e02 	addeq.w	lr, r6, #2
 802893a:	e7c7      	b.n	80288cc <_strtol_l.isra.0+0x3c>
 802893c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8028940:	2f19      	cmp	r7, #25
 8028942:	d801      	bhi.n	8028948 <_strtol_l.isra.0+0xb8>
 8028944:	3c37      	subs	r4, #55	; 0x37
 8028946:	e7e1      	b.n	802890c <_strtol_l.isra.0+0x7c>
 8028948:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 802894c:	2f19      	cmp	r7, #25
 802894e:	d804      	bhi.n	802895a <_strtol_l.isra.0+0xca>
 8028950:	3c57      	subs	r4, #87	; 0x57
 8028952:	e7db      	b.n	802890c <_strtol_l.isra.0+0x7c>
 8028954:	f04f 36ff 	mov.w	r6, #4294967295
 8028958:	e7e4      	b.n	8028924 <_strtol_l.isra.0+0x94>
 802895a:	2e00      	cmp	r6, #0
 802895c:	da05      	bge.n	802896a <_strtol_l.isra.0+0xda>
 802895e:	2322      	movs	r3, #34	; 0x22
 8028960:	6003      	str	r3, [r0, #0]
 8028962:	4665      	mov	r5, ip
 8028964:	b942      	cbnz	r2, 8028978 <_strtol_l.isra.0+0xe8>
 8028966:	4628      	mov	r0, r5
 8028968:	e79d      	b.n	80288a6 <_strtol_l.isra.0+0x16>
 802896a:	f1b8 0f00 	cmp.w	r8, #0
 802896e:	d000      	beq.n	8028972 <_strtol_l.isra.0+0xe2>
 8028970:	426d      	negs	r5, r5
 8028972:	2a00      	cmp	r2, #0
 8028974:	d0f7      	beq.n	8028966 <_strtol_l.isra.0+0xd6>
 8028976:	b10e      	cbz	r6, 802897c <_strtol_l.isra.0+0xec>
 8028978:	f10e 31ff 	add.w	r1, lr, #4294967295
 802897c:	6011      	str	r1, [r2, #0]
 802897e:	e7f2      	b.n	8028966 <_strtol_l.isra.0+0xd6>
 8028980:	2430      	movs	r4, #48	; 0x30
 8028982:	2b00      	cmp	r3, #0
 8028984:	d1b3      	bne.n	80288ee <_strtol_l.isra.0+0x5e>
 8028986:	2308      	movs	r3, #8
 8028988:	e7b1      	b.n	80288ee <_strtol_l.isra.0+0x5e>
 802898a:	2c30      	cmp	r4, #48	; 0x30
 802898c:	d0a4      	beq.n	80288d8 <_strtol_l.isra.0+0x48>
 802898e:	230a      	movs	r3, #10
 8028990:	e7ad      	b.n	80288ee <_strtol_l.isra.0+0x5e>
 8028992:	bf00      	nop
 8028994:	0802f559 	.word	0x0802f559

08028998 <_strtol_r>:
 8028998:	f7ff bf7a 	b.w	8028890 <_strtol_l.isra.0>

0802899c <__swbuf_r>:
 802899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802899e:	460e      	mov	r6, r1
 80289a0:	4614      	mov	r4, r2
 80289a2:	4605      	mov	r5, r0
 80289a4:	b118      	cbz	r0, 80289ae <__swbuf_r+0x12>
 80289a6:	6983      	ldr	r3, [r0, #24]
 80289a8:	b90b      	cbnz	r3, 80289ae <__swbuf_r+0x12>
 80289aa:	f001 f841 	bl	8029a30 <__sinit>
 80289ae:	4b21      	ldr	r3, [pc, #132]	; (8028a34 <__swbuf_r+0x98>)
 80289b0:	429c      	cmp	r4, r3
 80289b2:	d12b      	bne.n	8028a0c <__swbuf_r+0x70>
 80289b4:	686c      	ldr	r4, [r5, #4]
 80289b6:	69a3      	ldr	r3, [r4, #24]
 80289b8:	60a3      	str	r3, [r4, #8]
 80289ba:	89a3      	ldrh	r3, [r4, #12]
 80289bc:	071a      	lsls	r2, r3, #28
 80289be:	d52f      	bpl.n	8028a20 <__swbuf_r+0x84>
 80289c0:	6923      	ldr	r3, [r4, #16]
 80289c2:	b36b      	cbz	r3, 8028a20 <__swbuf_r+0x84>
 80289c4:	6923      	ldr	r3, [r4, #16]
 80289c6:	6820      	ldr	r0, [r4, #0]
 80289c8:	1ac0      	subs	r0, r0, r3
 80289ca:	6963      	ldr	r3, [r4, #20]
 80289cc:	b2f6      	uxtb	r6, r6
 80289ce:	4283      	cmp	r3, r0
 80289d0:	4637      	mov	r7, r6
 80289d2:	dc04      	bgt.n	80289de <__swbuf_r+0x42>
 80289d4:	4621      	mov	r1, r4
 80289d6:	4628      	mov	r0, r5
 80289d8:	f000 ff96 	bl	8029908 <_fflush_r>
 80289dc:	bb30      	cbnz	r0, 8028a2c <__swbuf_r+0x90>
 80289de:	68a3      	ldr	r3, [r4, #8]
 80289e0:	3b01      	subs	r3, #1
 80289e2:	60a3      	str	r3, [r4, #8]
 80289e4:	6823      	ldr	r3, [r4, #0]
 80289e6:	1c5a      	adds	r2, r3, #1
 80289e8:	6022      	str	r2, [r4, #0]
 80289ea:	701e      	strb	r6, [r3, #0]
 80289ec:	6963      	ldr	r3, [r4, #20]
 80289ee:	3001      	adds	r0, #1
 80289f0:	4283      	cmp	r3, r0
 80289f2:	d004      	beq.n	80289fe <__swbuf_r+0x62>
 80289f4:	89a3      	ldrh	r3, [r4, #12]
 80289f6:	07db      	lsls	r3, r3, #31
 80289f8:	d506      	bpl.n	8028a08 <__swbuf_r+0x6c>
 80289fa:	2e0a      	cmp	r6, #10
 80289fc:	d104      	bne.n	8028a08 <__swbuf_r+0x6c>
 80289fe:	4621      	mov	r1, r4
 8028a00:	4628      	mov	r0, r5
 8028a02:	f000 ff81 	bl	8029908 <_fflush_r>
 8028a06:	b988      	cbnz	r0, 8028a2c <__swbuf_r+0x90>
 8028a08:	4638      	mov	r0, r7
 8028a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028a0c:	4b0a      	ldr	r3, [pc, #40]	; (8028a38 <__swbuf_r+0x9c>)
 8028a0e:	429c      	cmp	r4, r3
 8028a10:	d101      	bne.n	8028a16 <__swbuf_r+0x7a>
 8028a12:	68ac      	ldr	r4, [r5, #8]
 8028a14:	e7cf      	b.n	80289b6 <__swbuf_r+0x1a>
 8028a16:	4b09      	ldr	r3, [pc, #36]	; (8028a3c <__swbuf_r+0xa0>)
 8028a18:	429c      	cmp	r4, r3
 8028a1a:	bf08      	it	eq
 8028a1c:	68ec      	ldreq	r4, [r5, #12]
 8028a1e:	e7ca      	b.n	80289b6 <__swbuf_r+0x1a>
 8028a20:	4621      	mov	r1, r4
 8028a22:	4628      	mov	r0, r5
 8028a24:	f000 f80c 	bl	8028a40 <__swsetup_r>
 8028a28:	2800      	cmp	r0, #0
 8028a2a:	d0cb      	beq.n	80289c4 <__swbuf_r+0x28>
 8028a2c:	f04f 37ff 	mov.w	r7, #4294967295
 8028a30:	e7ea      	b.n	8028a08 <__swbuf_r+0x6c>
 8028a32:	bf00      	nop
 8028a34:	0802f710 	.word	0x0802f710
 8028a38:	0802f730 	.word	0x0802f730
 8028a3c:	0802f6f0 	.word	0x0802f6f0

08028a40 <__swsetup_r>:
 8028a40:	4b32      	ldr	r3, [pc, #200]	; (8028b0c <__swsetup_r+0xcc>)
 8028a42:	b570      	push	{r4, r5, r6, lr}
 8028a44:	681d      	ldr	r5, [r3, #0]
 8028a46:	4606      	mov	r6, r0
 8028a48:	460c      	mov	r4, r1
 8028a4a:	b125      	cbz	r5, 8028a56 <__swsetup_r+0x16>
 8028a4c:	69ab      	ldr	r3, [r5, #24]
 8028a4e:	b913      	cbnz	r3, 8028a56 <__swsetup_r+0x16>
 8028a50:	4628      	mov	r0, r5
 8028a52:	f000 ffed 	bl	8029a30 <__sinit>
 8028a56:	4b2e      	ldr	r3, [pc, #184]	; (8028b10 <__swsetup_r+0xd0>)
 8028a58:	429c      	cmp	r4, r3
 8028a5a:	d10f      	bne.n	8028a7c <__swsetup_r+0x3c>
 8028a5c:	686c      	ldr	r4, [r5, #4]
 8028a5e:	89a3      	ldrh	r3, [r4, #12]
 8028a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028a64:	0719      	lsls	r1, r3, #28
 8028a66:	d42c      	bmi.n	8028ac2 <__swsetup_r+0x82>
 8028a68:	06dd      	lsls	r5, r3, #27
 8028a6a:	d411      	bmi.n	8028a90 <__swsetup_r+0x50>
 8028a6c:	2309      	movs	r3, #9
 8028a6e:	6033      	str	r3, [r6, #0]
 8028a70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8028a74:	81a3      	strh	r3, [r4, #12]
 8028a76:	f04f 30ff 	mov.w	r0, #4294967295
 8028a7a:	e03e      	b.n	8028afa <__swsetup_r+0xba>
 8028a7c:	4b25      	ldr	r3, [pc, #148]	; (8028b14 <__swsetup_r+0xd4>)
 8028a7e:	429c      	cmp	r4, r3
 8028a80:	d101      	bne.n	8028a86 <__swsetup_r+0x46>
 8028a82:	68ac      	ldr	r4, [r5, #8]
 8028a84:	e7eb      	b.n	8028a5e <__swsetup_r+0x1e>
 8028a86:	4b24      	ldr	r3, [pc, #144]	; (8028b18 <__swsetup_r+0xd8>)
 8028a88:	429c      	cmp	r4, r3
 8028a8a:	bf08      	it	eq
 8028a8c:	68ec      	ldreq	r4, [r5, #12]
 8028a8e:	e7e6      	b.n	8028a5e <__swsetup_r+0x1e>
 8028a90:	0758      	lsls	r0, r3, #29
 8028a92:	d512      	bpl.n	8028aba <__swsetup_r+0x7a>
 8028a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028a96:	b141      	cbz	r1, 8028aaa <__swsetup_r+0x6a>
 8028a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028a9c:	4299      	cmp	r1, r3
 8028a9e:	d002      	beq.n	8028aa6 <__swsetup_r+0x66>
 8028aa0:	4630      	mov	r0, r6
 8028aa2:	f7fe f839 	bl	8026b18 <_free_r>
 8028aa6:	2300      	movs	r3, #0
 8028aa8:	6363      	str	r3, [r4, #52]	; 0x34
 8028aaa:	89a3      	ldrh	r3, [r4, #12]
 8028aac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028ab0:	81a3      	strh	r3, [r4, #12]
 8028ab2:	2300      	movs	r3, #0
 8028ab4:	6063      	str	r3, [r4, #4]
 8028ab6:	6923      	ldr	r3, [r4, #16]
 8028ab8:	6023      	str	r3, [r4, #0]
 8028aba:	89a3      	ldrh	r3, [r4, #12]
 8028abc:	f043 0308 	orr.w	r3, r3, #8
 8028ac0:	81a3      	strh	r3, [r4, #12]
 8028ac2:	6923      	ldr	r3, [r4, #16]
 8028ac4:	b94b      	cbnz	r3, 8028ada <__swsetup_r+0x9a>
 8028ac6:	89a3      	ldrh	r3, [r4, #12]
 8028ac8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8028acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028ad0:	d003      	beq.n	8028ada <__swsetup_r+0x9a>
 8028ad2:	4621      	mov	r1, r4
 8028ad4:	4630      	mov	r0, r6
 8028ad6:	f001 fbe3 	bl	802a2a0 <__smakebuf_r>
 8028ada:	89a0      	ldrh	r0, [r4, #12]
 8028adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028ae0:	f010 0301 	ands.w	r3, r0, #1
 8028ae4:	d00a      	beq.n	8028afc <__swsetup_r+0xbc>
 8028ae6:	2300      	movs	r3, #0
 8028ae8:	60a3      	str	r3, [r4, #8]
 8028aea:	6963      	ldr	r3, [r4, #20]
 8028aec:	425b      	negs	r3, r3
 8028aee:	61a3      	str	r3, [r4, #24]
 8028af0:	6923      	ldr	r3, [r4, #16]
 8028af2:	b943      	cbnz	r3, 8028b06 <__swsetup_r+0xc6>
 8028af4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8028af8:	d1ba      	bne.n	8028a70 <__swsetup_r+0x30>
 8028afa:	bd70      	pop	{r4, r5, r6, pc}
 8028afc:	0781      	lsls	r1, r0, #30
 8028afe:	bf58      	it	pl
 8028b00:	6963      	ldrpl	r3, [r4, #20]
 8028b02:	60a3      	str	r3, [r4, #8]
 8028b04:	e7f4      	b.n	8028af0 <__swsetup_r+0xb0>
 8028b06:	2000      	movs	r0, #0
 8028b08:	e7f7      	b.n	8028afa <__swsetup_r+0xba>
 8028b0a:	bf00      	nop
 8028b0c:	2000007c 	.word	0x2000007c
 8028b10:	0802f710 	.word	0x0802f710
 8028b14:	0802f730 	.word	0x0802f730
 8028b18:	0802f6f0 	.word	0x0802f6f0

08028b1c <__register_exitproc>:
 8028b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028b20:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8028bdc <__register_exitproc+0xc0>
 8028b24:	4606      	mov	r6, r0
 8028b26:	f8d8 0000 	ldr.w	r0, [r8]
 8028b2a:	461f      	mov	r7, r3
 8028b2c:	460d      	mov	r5, r1
 8028b2e:	4691      	mov	r9, r2
 8028b30:	f001 fb8f 	bl	802a252 <__retarget_lock_acquire_recursive>
 8028b34:	4b25      	ldr	r3, [pc, #148]	; (8028bcc <__register_exitproc+0xb0>)
 8028b36:	681c      	ldr	r4, [r3, #0]
 8028b38:	b934      	cbnz	r4, 8028b48 <__register_exitproc+0x2c>
 8028b3a:	4c25      	ldr	r4, [pc, #148]	; (8028bd0 <__register_exitproc+0xb4>)
 8028b3c:	601c      	str	r4, [r3, #0]
 8028b3e:	4b25      	ldr	r3, [pc, #148]	; (8028bd4 <__register_exitproc+0xb8>)
 8028b40:	b113      	cbz	r3, 8028b48 <__register_exitproc+0x2c>
 8028b42:	681b      	ldr	r3, [r3, #0]
 8028b44:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8028b48:	6863      	ldr	r3, [r4, #4]
 8028b4a:	2b1f      	cmp	r3, #31
 8028b4c:	dd07      	ble.n	8028b5e <__register_exitproc+0x42>
 8028b4e:	f8d8 0000 	ldr.w	r0, [r8]
 8028b52:	f001 fb80 	bl	802a256 <__retarget_lock_release_recursive>
 8028b56:	f04f 30ff 	mov.w	r0, #4294967295
 8028b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028b5e:	b34e      	cbz	r6, 8028bb4 <__register_exitproc+0x98>
 8028b60:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8028b64:	b988      	cbnz	r0, 8028b8a <__register_exitproc+0x6e>
 8028b66:	4b1c      	ldr	r3, [pc, #112]	; (8028bd8 <__register_exitproc+0xbc>)
 8028b68:	b923      	cbnz	r3, 8028b74 <__register_exitproc+0x58>
 8028b6a:	f8d8 0000 	ldr.w	r0, [r8]
 8028b6e:	f001 fb71 	bl	802a254 <__retarget_lock_release>
 8028b72:	e7f0      	b.n	8028b56 <__register_exitproc+0x3a>
 8028b74:	f44f 7084 	mov.w	r0, #264	; 0x108
 8028b78:	f7fd ffa8 	bl	8026acc <malloc>
 8028b7c:	2800      	cmp	r0, #0
 8028b7e:	d0f4      	beq.n	8028b6a <__register_exitproc+0x4e>
 8028b80:	2300      	movs	r3, #0
 8028b82:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8028b86:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8028b8a:	6863      	ldr	r3, [r4, #4]
 8028b8c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8028b90:	2201      	movs	r2, #1
 8028b92:	409a      	lsls	r2, r3
 8028b94:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8028b98:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8028b9c:	4313      	orrs	r3, r2
 8028b9e:	2e02      	cmp	r6, #2
 8028ba0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8028ba4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8028ba8:	bf02      	ittt	eq
 8028baa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8028bae:	431a      	orreq	r2, r3
 8028bb0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8028bb4:	6863      	ldr	r3, [r4, #4]
 8028bb6:	f8d8 0000 	ldr.w	r0, [r8]
 8028bba:	1c5a      	adds	r2, r3, #1
 8028bbc:	3302      	adds	r3, #2
 8028bbe:	6062      	str	r2, [r4, #4]
 8028bc0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8028bc4:	f001 fb47 	bl	802a256 <__retarget_lock_release_recursive>
 8028bc8:	2000      	movs	r0, #0
 8028bca:	e7c6      	b.n	8028b5a <__register_exitproc+0x3e>
 8028bcc:	20056a14 	.word	0x20056a14
 8028bd0:	20056988 	.word	0x20056988
 8028bd4:	0802f504 	.word	0x0802f504
 8028bd8:	08026acd 	.word	0x08026acd
 8028bdc:	200000e0 	.word	0x200000e0

08028be0 <quorem>:
 8028be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028be4:	6903      	ldr	r3, [r0, #16]
 8028be6:	690c      	ldr	r4, [r1, #16]
 8028be8:	42a3      	cmp	r3, r4
 8028bea:	4607      	mov	r7, r0
 8028bec:	f2c0 8081 	blt.w	8028cf2 <quorem+0x112>
 8028bf0:	3c01      	subs	r4, #1
 8028bf2:	f101 0814 	add.w	r8, r1, #20
 8028bf6:	f100 0514 	add.w	r5, r0, #20
 8028bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8028bfe:	9301      	str	r3, [sp, #4]
 8028c00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8028c04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8028c08:	3301      	adds	r3, #1
 8028c0a:	429a      	cmp	r2, r3
 8028c0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8028c10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8028c14:	fbb2 f6f3 	udiv	r6, r2, r3
 8028c18:	d331      	bcc.n	8028c7e <quorem+0x9e>
 8028c1a:	f04f 0e00 	mov.w	lr, #0
 8028c1e:	4640      	mov	r0, r8
 8028c20:	46ac      	mov	ip, r5
 8028c22:	46f2      	mov	sl, lr
 8028c24:	f850 2b04 	ldr.w	r2, [r0], #4
 8028c28:	b293      	uxth	r3, r2
 8028c2a:	fb06 e303 	mla	r3, r6, r3, lr
 8028c2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8028c32:	b29b      	uxth	r3, r3
 8028c34:	ebaa 0303 	sub.w	r3, sl, r3
 8028c38:	0c12      	lsrs	r2, r2, #16
 8028c3a:	f8dc a000 	ldr.w	sl, [ip]
 8028c3e:	fb06 e202 	mla	r2, r6, r2, lr
 8028c42:	fa13 f38a 	uxtah	r3, r3, sl
 8028c46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8028c4a:	fa1f fa82 	uxth.w	sl, r2
 8028c4e:	f8dc 2000 	ldr.w	r2, [ip]
 8028c52:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8028c56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8028c5a:	b29b      	uxth	r3, r3
 8028c5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028c60:	4581      	cmp	r9, r0
 8028c62:	f84c 3b04 	str.w	r3, [ip], #4
 8028c66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8028c6a:	d2db      	bcs.n	8028c24 <quorem+0x44>
 8028c6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8028c70:	b92b      	cbnz	r3, 8028c7e <quorem+0x9e>
 8028c72:	9b01      	ldr	r3, [sp, #4]
 8028c74:	3b04      	subs	r3, #4
 8028c76:	429d      	cmp	r5, r3
 8028c78:	461a      	mov	r2, r3
 8028c7a:	d32e      	bcc.n	8028cda <quorem+0xfa>
 8028c7c:	613c      	str	r4, [r7, #16]
 8028c7e:	4638      	mov	r0, r7
 8028c80:	f001 fe4e 	bl	802a920 <__mcmp>
 8028c84:	2800      	cmp	r0, #0
 8028c86:	db24      	blt.n	8028cd2 <quorem+0xf2>
 8028c88:	3601      	adds	r6, #1
 8028c8a:	4628      	mov	r0, r5
 8028c8c:	f04f 0c00 	mov.w	ip, #0
 8028c90:	f858 2b04 	ldr.w	r2, [r8], #4
 8028c94:	f8d0 e000 	ldr.w	lr, [r0]
 8028c98:	b293      	uxth	r3, r2
 8028c9a:	ebac 0303 	sub.w	r3, ip, r3
 8028c9e:	0c12      	lsrs	r2, r2, #16
 8028ca0:	fa13 f38e 	uxtah	r3, r3, lr
 8028ca4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8028ca8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8028cac:	b29b      	uxth	r3, r3
 8028cae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028cb2:	45c1      	cmp	r9, r8
 8028cb4:	f840 3b04 	str.w	r3, [r0], #4
 8028cb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8028cbc:	d2e8      	bcs.n	8028c90 <quorem+0xb0>
 8028cbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8028cc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8028cc6:	b922      	cbnz	r2, 8028cd2 <quorem+0xf2>
 8028cc8:	3b04      	subs	r3, #4
 8028cca:	429d      	cmp	r5, r3
 8028ccc:	461a      	mov	r2, r3
 8028cce:	d30a      	bcc.n	8028ce6 <quorem+0x106>
 8028cd0:	613c      	str	r4, [r7, #16]
 8028cd2:	4630      	mov	r0, r6
 8028cd4:	b003      	add	sp, #12
 8028cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028cda:	6812      	ldr	r2, [r2, #0]
 8028cdc:	3b04      	subs	r3, #4
 8028cde:	2a00      	cmp	r2, #0
 8028ce0:	d1cc      	bne.n	8028c7c <quorem+0x9c>
 8028ce2:	3c01      	subs	r4, #1
 8028ce4:	e7c7      	b.n	8028c76 <quorem+0x96>
 8028ce6:	6812      	ldr	r2, [r2, #0]
 8028ce8:	3b04      	subs	r3, #4
 8028cea:	2a00      	cmp	r2, #0
 8028cec:	d1f0      	bne.n	8028cd0 <quorem+0xf0>
 8028cee:	3c01      	subs	r4, #1
 8028cf0:	e7eb      	b.n	8028cca <quorem+0xea>
 8028cf2:	2000      	movs	r0, #0
 8028cf4:	e7ee      	b.n	8028cd4 <quorem+0xf4>
	...

08028cf8 <_dtoa_r>:
 8028cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028cfc:	ec59 8b10 	vmov	r8, r9, d0
 8028d00:	b095      	sub	sp, #84	; 0x54
 8028d02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8028d04:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8028d06:	9107      	str	r1, [sp, #28]
 8028d08:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8028d0c:	4606      	mov	r6, r0
 8028d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8028d10:	9310      	str	r3, [sp, #64]	; 0x40
 8028d12:	b975      	cbnz	r5, 8028d32 <_dtoa_r+0x3a>
 8028d14:	2010      	movs	r0, #16
 8028d16:	f7fd fed9 	bl	8026acc <malloc>
 8028d1a:	4602      	mov	r2, r0
 8028d1c:	6270      	str	r0, [r6, #36]	; 0x24
 8028d1e:	b920      	cbnz	r0, 8028d2a <_dtoa_r+0x32>
 8028d20:	4bab      	ldr	r3, [pc, #684]	; (8028fd0 <_dtoa_r+0x2d8>)
 8028d22:	21ea      	movs	r1, #234	; 0xea
 8028d24:	48ab      	ldr	r0, [pc, #684]	; (8028fd4 <_dtoa_r+0x2dc>)
 8028d26:	f7fd fe63 	bl	80269f0 <__assert_func>
 8028d2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8028d2e:	6005      	str	r5, [r0, #0]
 8028d30:	60c5      	str	r5, [r0, #12]
 8028d32:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8028d34:	6819      	ldr	r1, [r3, #0]
 8028d36:	b151      	cbz	r1, 8028d4e <_dtoa_r+0x56>
 8028d38:	685a      	ldr	r2, [r3, #4]
 8028d3a:	604a      	str	r2, [r1, #4]
 8028d3c:	2301      	movs	r3, #1
 8028d3e:	4093      	lsls	r3, r2
 8028d40:	608b      	str	r3, [r1, #8]
 8028d42:	4630      	mov	r0, r6
 8028d44:	f001 fb64 	bl	802a410 <_Bfree>
 8028d48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8028d4a:	2200      	movs	r2, #0
 8028d4c:	601a      	str	r2, [r3, #0]
 8028d4e:	f1b9 0300 	subs.w	r3, r9, #0
 8028d52:	bfbb      	ittet	lt
 8028d54:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8028d58:	9303      	strlt	r3, [sp, #12]
 8028d5a:	2300      	movge	r3, #0
 8028d5c:	2201      	movlt	r2, #1
 8028d5e:	bfac      	ite	ge
 8028d60:	6023      	strge	r3, [r4, #0]
 8028d62:	6022      	strlt	r2, [r4, #0]
 8028d64:	4b9c      	ldr	r3, [pc, #624]	; (8028fd8 <_dtoa_r+0x2e0>)
 8028d66:	9c03      	ldr	r4, [sp, #12]
 8028d68:	43a3      	bics	r3, r4
 8028d6a:	d11a      	bne.n	8028da2 <_dtoa_r+0xaa>
 8028d6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028d6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8028d72:	6013      	str	r3, [r2, #0]
 8028d74:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8028d78:	ea53 0308 	orrs.w	r3, r3, r8
 8028d7c:	f000 8512 	beq.w	80297a4 <_dtoa_r+0xaac>
 8028d80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028d82:	b953      	cbnz	r3, 8028d9a <_dtoa_r+0xa2>
 8028d84:	4b95      	ldr	r3, [pc, #596]	; (8028fdc <_dtoa_r+0x2e4>)
 8028d86:	e01f      	b.n	8028dc8 <_dtoa_r+0xd0>
 8028d88:	4b95      	ldr	r3, [pc, #596]	; (8028fe0 <_dtoa_r+0x2e8>)
 8028d8a:	9300      	str	r3, [sp, #0]
 8028d8c:	3308      	adds	r3, #8
 8028d8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8028d90:	6013      	str	r3, [r2, #0]
 8028d92:	9800      	ldr	r0, [sp, #0]
 8028d94:	b015      	add	sp, #84	; 0x54
 8028d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028d9a:	4b90      	ldr	r3, [pc, #576]	; (8028fdc <_dtoa_r+0x2e4>)
 8028d9c:	9300      	str	r3, [sp, #0]
 8028d9e:	3303      	adds	r3, #3
 8028da0:	e7f5      	b.n	8028d8e <_dtoa_r+0x96>
 8028da2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8028da6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8028daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028dae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8028db2:	d10b      	bne.n	8028dcc <_dtoa_r+0xd4>
 8028db4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028db6:	2301      	movs	r3, #1
 8028db8:	6013      	str	r3, [r2, #0]
 8028dba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028dbc:	2b00      	cmp	r3, #0
 8028dbe:	f000 84ee 	beq.w	802979e <_dtoa_r+0xaa6>
 8028dc2:	4888      	ldr	r0, [pc, #544]	; (8028fe4 <_dtoa_r+0x2ec>)
 8028dc4:	6018      	str	r0, [r3, #0]
 8028dc6:	1e43      	subs	r3, r0, #1
 8028dc8:	9300      	str	r3, [sp, #0]
 8028dca:	e7e2      	b.n	8028d92 <_dtoa_r+0x9a>
 8028dcc:	a913      	add	r1, sp, #76	; 0x4c
 8028dce:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8028dd2:	aa12      	add	r2, sp, #72	; 0x48
 8028dd4:	4630      	mov	r0, r6
 8028dd6:	f001 fec3 	bl	802ab60 <__d2b>
 8028dda:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8028dde:	4605      	mov	r5, r0
 8028de0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8028de2:	2900      	cmp	r1, #0
 8028de4:	d047      	beq.n	8028e76 <_dtoa_r+0x17e>
 8028de6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028de8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8028dec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8028df0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8028df4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8028df8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8028dfc:	2400      	movs	r4, #0
 8028dfe:	ec43 2b16 	vmov	d6, r2, r3
 8028e02:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8028e06:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8028fb8 <_dtoa_r+0x2c0>
 8028e0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028e0e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8028fc0 <_dtoa_r+0x2c8>
 8028e12:	eea7 6b05 	vfma.f64	d6, d7, d5
 8028e16:	eeb0 7b46 	vmov.f64	d7, d6
 8028e1a:	ee06 1a90 	vmov	s13, r1
 8028e1e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8028e22:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8028fc8 <_dtoa_r+0x2d0>
 8028e26:	eea5 7b06 	vfma.f64	d7, d5, d6
 8028e2a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8028e2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8028e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e36:	ee16 ba90 	vmov	fp, s13
 8028e3a:	9411      	str	r4, [sp, #68]	; 0x44
 8028e3c:	d508      	bpl.n	8028e50 <_dtoa_r+0x158>
 8028e3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8028e42:	eeb4 6b47 	vcmp.f64	d6, d7
 8028e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e4a:	bf18      	it	ne
 8028e4c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8028e50:	f1bb 0f16 	cmp.w	fp, #22
 8028e54:	d832      	bhi.n	8028ebc <_dtoa_r+0x1c4>
 8028e56:	4b64      	ldr	r3, [pc, #400]	; (8028fe8 <_dtoa_r+0x2f0>)
 8028e58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8028e5c:	ed93 7b00 	vldr	d7, [r3]
 8028e60:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8028e64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e6c:	d501      	bpl.n	8028e72 <_dtoa_r+0x17a>
 8028e6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028e72:	2300      	movs	r3, #0
 8028e74:	e023      	b.n	8028ebe <_dtoa_r+0x1c6>
 8028e76:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8028e78:	4401      	add	r1, r0
 8028e7a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8028e7e:	2b20      	cmp	r3, #32
 8028e80:	bfc3      	ittte	gt
 8028e82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8028e86:	fa04 f303 	lslgt.w	r3, r4, r3
 8028e8a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8028e8e:	f1c3 0320 	rsble	r3, r3, #32
 8028e92:	bfc6      	itte	gt
 8028e94:	fa28 f804 	lsrgt.w	r8, r8, r4
 8028e98:	ea43 0308 	orrgt.w	r3, r3, r8
 8028e9c:	fa08 f303 	lslle.w	r3, r8, r3
 8028ea0:	ee07 3a90 	vmov	s15, r3
 8028ea4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8028ea8:	3901      	subs	r1, #1
 8028eaa:	ed8d 7b00 	vstr	d7, [sp]
 8028eae:	9c01      	ldr	r4, [sp, #4]
 8028eb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8028eb4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8028eb8:	2401      	movs	r4, #1
 8028eba:	e7a0      	b.n	8028dfe <_dtoa_r+0x106>
 8028ebc:	2301      	movs	r3, #1
 8028ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8028ec0:	1a43      	subs	r3, r0, r1
 8028ec2:	1e5a      	subs	r2, r3, #1
 8028ec4:	bf45      	ittet	mi
 8028ec6:	f1c3 0301 	rsbmi	r3, r3, #1
 8028eca:	9305      	strmi	r3, [sp, #20]
 8028ecc:	2300      	movpl	r3, #0
 8028ece:	2300      	movmi	r3, #0
 8028ed0:	9206      	str	r2, [sp, #24]
 8028ed2:	bf54      	ite	pl
 8028ed4:	9305      	strpl	r3, [sp, #20]
 8028ed6:	9306      	strmi	r3, [sp, #24]
 8028ed8:	f1bb 0f00 	cmp.w	fp, #0
 8028edc:	db18      	blt.n	8028f10 <_dtoa_r+0x218>
 8028ede:	9b06      	ldr	r3, [sp, #24]
 8028ee0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8028ee4:	445b      	add	r3, fp
 8028ee6:	9306      	str	r3, [sp, #24]
 8028ee8:	2300      	movs	r3, #0
 8028eea:	9a07      	ldr	r2, [sp, #28]
 8028eec:	2a09      	cmp	r2, #9
 8028eee:	d849      	bhi.n	8028f84 <_dtoa_r+0x28c>
 8028ef0:	2a05      	cmp	r2, #5
 8028ef2:	bfc4      	itt	gt
 8028ef4:	3a04      	subgt	r2, #4
 8028ef6:	9207      	strgt	r2, [sp, #28]
 8028ef8:	9a07      	ldr	r2, [sp, #28]
 8028efa:	f1a2 0202 	sub.w	r2, r2, #2
 8028efe:	bfcc      	ite	gt
 8028f00:	2400      	movgt	r4, #0
 8028f02:	2401      	movle	r4, #1
 8028f04:	2a03      	cmp	r2, #3
 8028f06:	d848      	bhi.n	8028f9a <_dtoa_r+0x2a2>
 8028f08:	e8df f002 	tbb	[pc, r2]
 8028f0c:	3a2c2e0b 	.word	0x3a2c2e0b
 8028f10:	9b05      	ldr	r3, [sp, #20]
 8028f12:	2200      	movs	r2, #0
 8028f14:	eba3 030b 	sub.w	r3, r3, fp
 8028f18:	9305      	str	r3, [sp, #20]
 8028f1a:	920e      	str	r2, [sp, #56]	; 0x38
 8028f1c:	f1cb 0300 	rsb	r3, fp, #0
 8028f20:	e7e3      	b.n	8028eea <_dtoa_r+0x1f2>
 8028f22:	2200      	movs	r2, #0
 8028f24:	9208      	str	r2, [sp, #32]
 8028f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028f28:	2a00      	cmp	r2, #0
 8028f2a:	dc39      	bgt.n	8028fa0 <_dtoa_r+0x2a8>
 8028f2c:	f04f 0a01 	mov.w	sl, #1
 8028f30:	46d1      	mov	r9, sl
 8028f32:	4652      	mov	r2, sl
 8028f34:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8028f38:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8028f3a:	2100      	movs	r1, #0
 8028f3c:	6079      	str	r1, [r7, #4]
 8028f3e:	2004      	movs	r0, #4
 8028f40:	f100 0c14 	add.w	ip, r0, #20
 8028f44:	4594      	cmp	ip, r2
 8028f46:	6879      	ldr	r1, [r7, #4]
 8028f48:	d92f      	bls.n	8028faa <_dtoa_r+0x2b2>
 8028f4a:	4630      	mov	r0, r6
 8028f4c:	930c      	str	r3, [sp, #48]	; 0x30
 8028f4e:	f001 fa1f 	bl	802a390 <_Balloc>
 8028f52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028f54:	9000      	str	r0, [sp, #0]
 8028f56:	4602      	mov	r2, r0
 8028f58:	2800      	cmp	r0, #0
 8028f5a:	d149      	bne.n	8028ff0 <_dtoa_r+0x2f8>
 8028f5c:	4b23      	ldr	r3, [pc, #140]	; (8028fec <_dtoa_r+0x2f4>)
 8028f5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8028f62:	e6df      	b.n	8028d24 <_dtoa_r+0x2c>
 8028f64:	2201      	movs	r2, #1
 8028f66:	e7dd      	b.n	8028f24 <_dtoa_r+0x22c>
 8028f68:	2200      	movs	r2, #0
 8028f6a:	9208      	str	r2, [sp, #32]
 8028f6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028f6e:	eb0b 0a02 	add.w	sl, fp, r2
 8028f72:	f10a 0901 	add.w	r9, sl, #1
 8028f76:	464a      	mov	r2, r9
 8028f78:	2a01      	cmp	r2, #1
 8028f7a:	bfb8      	it	lt
 8028f7c:	2201      	movlt	r2, #1
 8028f7e:	e7db      	b.n	8028f38 <_dtoa_r+0x240>
 8028f80:	2201      	movs	r2, #1
 8028f82:	e7f2      	b.n	8028f6a <_dtoa_r+0x272>
 8028f84:	2401      	movs	r4, #1
 8028f86:	2200      	movs	r2, #0
 8028f88:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8028f8c:	f04f 3aff 	mov.w	sl, #4294967295
 8028f90:	2100      	movs	r1, #0
 8028f92:	46d1      	mov	r9, sl
 8028f94:	2212      	movs	r2, #18
 8028f96:	9109      	str	r1, [sp, #36]	; 0x24
 8028f98:	e7ce      	b.n	8028f38 <_dtoa_r+0x240>
 8028f9a:	2201      	movs	r2, #1
 8028f9c:	9208      	str	r2, [sp, #32]
 8028f9e:	e7f5      	b.n	8028f8c <_dtoa_r+0x294>
 8028fa0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8028fa4:	46d1      	mov	r9, sl
 8028fa6:	4652      	mov	r2, sl
 8028fa8:	e7c6      	b.n	8028f38 <_dtoa_r+0x240>
 8028faa:	3101      	adds	r1, #1
 8028fac:	6079      	str	r1, [r7, #4]
 8028fae:	0040      	lsls	r0, r0, #1
 8028fb0:	e7c6      	b.n	8028f40 <_dtoa_r+0x248>
 8028fb2:	bf00      	nop
 8028fb4:	f3af 8000 	nop.w
 8028fb8:	636f4361 	.word	0x636f4361
 8028fbc:	3fd287a7 	.word	0x3fd287a7
 8028fc0:	8b60c8b3 	.word	0x8b60c8b3
 8028fc4:	3fc68a28 	.word	0x3fc68a28
 8028fc8:	509f79fb 	.word	0x509f79fb
 8028fcc:	3fd34413 	.word	0x3fd34413
 8028fd0:	0802f666 	.word	0x0802f666
 8028fd4:	0802f67d 	.word	0x0802f67d
 8028fd8:	7ff00000 	.word	0x7ff00000
 8028fdc:	0802f662 	.word	0x0802f662
 8028fe0:	0802f659 	.word	0x0802f659
 8028fe4:	0802e7e3 	.word	0x0802e7e3
 8028fe8:	0802f858 	.word	0x0802f858
 8028fec:	0802f6dc 	.word	0x0802f6dc
 8028ff0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8028ff2:	9900      	ldr	r1, [sp, #0]
 8028ff4:	6011      	str	r1, [r2, #0]
 8028ff6:	f1b9 0f0e 	cmp.w	r9, #14
 8028ffa:	d872      	bhi.n	80290e2 <_dtoa_r+0x3ea>
 8028ffc:	2c00      	cmp	r4, #0
 8028ffe:	d070      	beq.n	80290e2 <_dtoa_r+0x3ea>
 8029000:	f1bb 0f00 	cmp.w	fp, #0
 8029004:	f340 80a6 	ble.w	8029154 <_dtoa_r+0x45c>
 8029008:	49ca      	ldr	r1, [pc, #808]	; (8029334 <_dtoa_r+0x63c>)
 802900a:	f00b 020f 	and.w	r2, fp, #15
 802900e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8029012:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8029016:	ed92 7b00 	vldr	d7, [r2]
 802901a:	ea4f 112b 	mov.w	r1, fp, asr #4
 802901e:	f000 808d 	beq.w	802913c <_dtoa_r+0x444>
 8029022:	4ac5      	ldr	r2, [pc, #788]	; (8029338 <_dtoa_r+0x640>)
 8029024:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8029028:	ed92 6b08 	vldr	d6, [r2, #32]
 802902c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8029030:	ed8d 6b02 	vstr	d6, [sp, #8]
 8029034:	f001 010f 	and.w	r1, r1, #15
 8029038:	2203      	movs	r2, #3
 802903a:	48bf      	ldr	r0, [pc, #764]	; (8029338 <_dtoa_r+0x640>)
 802903c:	2900      	cmp	r1, #0
 802903e:	d17f      	bne.n	8029140 <_dtoa_r+0x448>
 8029040:	ed9d 6b02 	vldr	d6, [sp, #8]
 8029044:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8029048:	ed8d 7b02 	vstr	d7, [sp, #8]
 802904c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802904e:	2900      	cmp	r1, #0
 8029050:	f000 80b2 	beq.w	80291b8 <_dtoa_r+0x4c0>
 8029054:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8029058:	ed9d 7b02 	vldr	d7, [sp, #8]
 802905c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8029060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029064:	f140 80a8 	bpl.w	80291b8 <_dtoa_r+0x4c0>
 8029068:	f1b9 0f00 	cmp.w	r9, #0
 802906c:	f000 80a4 	beq.w	80291b8 <_dtoa_r+0x4c0>
 8029070:	f1ba 0f00 	cmp.w	sl, #0
 8029074:	dd31      	ble.n	80290da <_dtoa_r+0x3e2>
 8029076:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 802907a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802907e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8029082:	f10b 37ff 	add.w	r7, fp, #4294967295
 8029086:	3201      	adds	r2, #1
 8029088:	4650      	mov	r0, sl
 802908a:	ed9d 6b02 	vldr	d6, [sp, #8]
 802908e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8029092:	ee07 2a90 	vmov	s15, r2
 8029096:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802909a:	eea7 5b06 	vfma.f64	d5, d7, d6
 802909e:	ed8d 5b02 	vstr	d5, [sp, #8]
 80290a2:	9c03      	ldr	r4, [sp, #12]
 80290a4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80290a8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80290ac:	2800      	cmp	r0, #0
 80290ae:	f040 8086 	bne.w	80291be <_dtoa_r+0x4c6>
 80290b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80290b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80290ba:	ec42 1b17 	vmov	d7, r1, r2
 80290be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80290c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80290c6:	f300 8272 	bgt.w	80295ae <_dtoa_r+0x8b6>
 80290ca:	eeb1 7b47 	vneg.f64	d7, d7
 80290ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80290d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80290d6:	f100 8267 	bmi.w	80295a8 <_dtoa_r+0x8b0>
 80290da:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80290de:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80290e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80290e4:	2a00      	cmp	r2, #0
 80290e6:	f2c0 8129 	blt.w	802933c <_dtoa_r+0x644>
 80290ea:	f1bb 0f0e 	cmp.w	fp, #14
 80290ee:	f300 8125 	bgt.w	802933c <_dtoa_r+0x644>
 80290f2:	4b90      	ldr	r3, [pc, #576]	; (8029334 <_dtoa_r+0x63c>)
 80290f4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80290f8:	ed93 6b00 	vldr	d6, [r3]
 80290fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80290fe:	2b00      	cmp	r3, #0
 8029100:	f280 80c3 	bge.w	802928a <_dtoa_r+0x592>
 8029104:	f1b9 0f00 	cmp.w	r9, #0
 8029108:	f300 80bf 	bgt.w	802928a <_dtoa_r+0x592>
 802910c:	f040 824c 	bne.w	80295a8 <_dtoa_r+0x8b0>
 8029110:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8029114:	ee26 6b07 	vmul.f64	d6, d6, d7
 8029118:	ed9d 7b02 	vldr	d7, [sp, #8]
 802911c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8029120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029124:	464c      	mov	r4, r9
 8029126:	464f      	mov	r7, r9
 8029128:	f280 8222 	bge.w	8029570 <_dtoa_r+0x878>
 802912c:	f8dd 8000 	ldr.w	r8, [sp]
 8029130:	2331      	movs	r3, #49	; 0x31
 8029132:	f808 3b01 	strb.w	r3, [r8], #1
 8029136:	f10b 0b01 	add.w	fp, fp, #1
 802913a:	e21e      	b.n	802957a <_dtoa_r+0x882>
 802913c:	2202      	movs	r2, #2
 802913e:	e77c      	b.n	802903a <_dtoa_r+0x342>
 8029140:	07cc      	lsls	r4, r1, #31
 8029142:	d504      	bpl.n	802914e <_dtoa_r+0x456>
 8029144:	ed90 6b00 	vldr	d6, [r0]
 8029148:	3201      	adds	r2, #1
 802914a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802914e:	1049      	asrs	r1, r1, #1
 8029150:	3008      	adds	r0, #8
 8029152:	e773      	b.n	802903c <_dtoa_r+0x344>
 8029154:	d02e      	beq.n	80291b4 <_dtoa_r+0x4bc>
 8029156:	f1cb 0100 	rsb	r1, fp, #0
 802915a:	4a76      	ldr	r2, [pc, #472]	; (8029334 <_dtoa_r+0x63c>)
 802915c:	f001 000f 	and.w	r0, r1, #15
 8029160:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8029164:	ed92 7b00 	vldr	d7, [r2]
 8029168:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 802916c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8029170:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8029174:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8029178:	e9cd 7802 	strd	r7, r8, [sp, #8]
 802917c:	486e      	ldr	r0, [pc, #440]	; (8029338 <_dtoa_r+0x640>)
 802917e:	1109      	asrs	r1, r1, #4
 8029180:	2400      	movs	r4, #0
 8029182:	2202      	movs	r2, #2
 8029184:	b939      	cbnz	r1, 8029196 <_dtoa_r+0x49e>
 8029186:	2c00      	cmp	r4, #0
 8029188:	f43f af60 	beq.w	802904c <_dtoa_r+0x354>
 802918c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8029190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029194:	e75a      	b.n	802904c <_dtoa_r+0x354>
 8029196:	07cf      	lsls	r7, r1, #31
 8029198:	d509      	bpl.n	80291ae <_dtoa_r+0x4b6>
 802919a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 802919e:	ed90 7b00 	vldr	d7, [r0]
 80291a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80291a6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80291aa:	3201      	adds	r2, #1
 80291ac:	2401      	movs	r4, #1
 80291ae:	1049      	asrs	r1, r1, #1
 80291b0:	3008      	adds	r0, #8
 80291b2:	e7e7      	b.n	8029184 <_dtoa_r+0x48c>
 80291b4:	2202      	movs	r2, #2
 80291b6:	e749      	b.n	802904c <_dtoa_r+0x354>
 80291b8:	465f      	mov	r7, fp
 80291ba:	4648      	mov	r0, r9
 80291bc:	e765      	b.n	802908a <_dtoa_r+0x392>
 80291be:	ec42 1b17 	vmov	d7, r1, r2
 80291c2:	4a5c      	ldr	r2, [pc, #368]	; (8029334 <_dtoa_r+0x63c>)
 80291c4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80291c8:	ed12 4b02 	vldr	d4, [r2, #-8]
 80291cc:	9a00      	ldr	r2, [sp, #0]
 80291ce:	1814      	adds	r4, r2, r0
 80291d0:	9a08      	ldr	r2, [sp, #32]
 80291d2:	b352      	cbz	r2, 802922a <_dtoa_r+0x532>
 80291d4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80291d8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80291dc:	f8dd 8000 	ldr.w	r8, [sp]
 80291e0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80291e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80291e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80291ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80291f0:	ee14 2a90 	vmov	r2, s9
 80291f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80291f8:	3230      	adds	r2, #48	; 0x30
 80291fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80291fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8029202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029206:	f808 2b01 	strb.w	r2, [r8], #1
 802920a:	d439      	bmi.n	8029280 <_dtoa_r+0x588>
 802920c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8029210:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8029214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029218:	d472      	bmi.n	8029300 <_dtoa_r+0x608>
 802921a:	45a0      	cmp	r8, r4
 802921c:	f43f af5d 	beq.w	80290da <_dtoa_r+0x3e2>
 8029220:	ee27 7b03 	vmul.f64	d7, d7, d3
 8029224:	ee26 6b03 	vmul.f64	d6, d6, d3
 8029228:	e7e0      	b.n	80291ec <_dtoa_r+0x4f4>
 802922a:	f8dd 8000 	ldr.w	r8, [sp]
 802922e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8029232:	4621      	mov	r1, r4
 8029234:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8029238:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802923c:	ee14 2a90 	vmov	r2, s9
 8029240:	3230      	adds	r2, #48	; 0x30
 8029242:	f808 2b01 	strb.w	r2, [r8], #1
 8029246:	45a0      	cmp	r8, r4
 8029248:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802924c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8029250:	d118      	bne.n	8029284 <_dtoa_r+0x58c>
 8029252:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8029256:	ee37 4b05 	vadd.f64	d4, d7, d5
 802925a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802925e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029262:	dc4d      	bgt.n	8029300 <_dtoa_r+0x608>
 8029264:	ee35 7b47 	vsub.f64	d7, d5, d7
 8029268:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802926c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029270:	f57f af33 	bpl.w	80290da <_dtoa_r+0x3e2>
 8029274:	4688      	mov	r8, r1
 8029276:	3901      	subs	r1, #1
 8029278:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 802927c:	2b30      	cmp	r3, #48	; 0x30
 802927e:	d0f9      	beq.n	8029274 <_dtoa_r+0x57c>
 8029280:	46bb      	mov	fp, r7
 8029282:	e02a      	b.n	80292da <_dtoa_r+0x5e2>
 8029284:	ee26 6b03 	vmul.f64	d6, d6, d3
 8029288:	e7d6      	b.n	8029238 <_dtoa_r+0x540>
 802928a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802928e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8029292:	f8dd 8000 	ldr.w	r8, [sp]
 8029296:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802929a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802929e:	ee15 3a10 	vmov	r3, s10
 80292a2:	3330      	adds	r3, #48	; 0x30
 80292a4:	f808 3b01 	strb.w	r3, [r8], #1
 80292a8:	9b00      	ldr	r3, [sp, #0]
 80292aa:	eba8 0303 	sub.w	r3, r8, r3
 80292ae:	4599      	cmp	r9, r3
 80292b0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80292b4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80292b8:	d133      	bne.n	8029322 <_dtoa_r+0x62a>
 80292ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80292be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80292c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80292c6:	dc1a      	bgt.n	80292fe <_dtoa_r+0x606>
 80292c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80292cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80292d0:	d103      	bne.n	80292da <_dtoa_r+0x5e2>
 80292d2:	ee15 3a10 	vmov	r3, s10
 80292d6:	07d9      	lsls	r1, r3, #31
 80292d8:	d411      	bmi.n	80292fe <_dtoa_r+0x606>
 80292da:	4629      	mov	r1, r5
 80292dc:	4630      	mov	r0, r6
 80292de:	f001 f897 	bl	802a410 <_Bfree>
 80292e2:	2300      	movs	r3, #0
 80292e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80292e6:	f888 3000 	strb.w	r3, [r8]
 80292ea:	f10b 0301 	add.w	r3, fp, #1
 80292ee:	6013      	str	r3, [r2, #0]
 80292f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80292f2:	2b00      	cmp	r3, #0
 80292f4:	f43f ad4d 	beq.w	8028d92 <_dtoa_r+0x9a>
 80292f8:	f8c3 8000 	str.w	r8, [r3]
 80292fc:	e549      	b.n	8028d92 <_dtoa_r+0x9a>
 80292fe:	465f      	mov	r7, fp
 8029300:	4643      	mov	r3, r8
 8029302:	4698      	mov	r8, r3
 8029304:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8029308:	2a39      	cmp	r2, #57	; 0x39
 802930a:	d106      	bne.n	802931a <_dtoa_r+0x622>
 802930c:	9a00      	ldr	r2, [sp, #0]
 802930e:	429a      	cmp	r2, r3
 8029310:	d1f7      	bne.n	8029302 <_dtoa_r+0x60a>
 8029312:	9900      	ldr	r1, [sp, #0]
 8029314:	2230      	movs	r2, #48	; 0x30
 8029316:	3701      	adds	r7, #1
 8029318:	700a      	strb	r2, [r1, #0]
 802931a:	781a      	ldrb	r2, [r3, #0]
 802931c:	3201      	adds	r2, #1
 802931e:	701a      	strb	r2, [r3, #0]
 8029320:	e7ae      	b.n	8029280 <_dtoa_r+0x588>
 8029322:	ee27 7b04 	vmul.f64	d7, d7, d4
 8029326:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802932a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802932e:	d1b2      	bne.n	8029296 <_dtoa_r+0x59e>
 8029330:	e7d3      	b.n	80292da <_dtoa_r+0x5e2>
 8029332:	bf00      	nop
 8029334:	0802f858 	.word	0x0802f858
 8029338:	0802f830 	.word	0x0802f830
 802933c:	9908      	ldr	r1, [sp, #32]
 802933e:	2900      	cmp	r1, #0
 8029340:	f000 80d1 	beq.w	80294e6 <_dtoa_r+0x7ee>
 8029344:	9907      	ldr	r1, [sp, #28]
 8029346:	2901      	cmp	r1, #1
 8029348:	f300 80b4 	bgt.w	80294b4 <_dtoa_r+0x7bc>
 802934c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802934e:	2900      	cmp	r1, #0
 8029350:	f000 80ac 	beq.w	80294ac <_dtoa_r+0x7b4>
 8029354:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8029358:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802935c:	461c      	mov	r4, r3
 802935e:	930a      	str	r3, [sp, #40]	; 0x28
 8029360:	9b05      	ldr	r3, [sp, #20]
 8029362:	4413      	add	r3, r2
 8029364:	9305      	str	r3, [sp, #20]
 8029366:	9b06      	ldr	r3, [sp, #24]
 8029368:	2101      	movs	r1, #1
 802936a:	4413      	add	r3, r2
 802936c:	4630      	mov	r0, r6
 802936e:	9306      	str	r3, [sp, #24]
 8029370:	f001 f954 	bl	802a61c <__i2b>
 8029374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029376:	4607      	mov	r7, r0
 8029378:	f1b8 0f00 	cmp.w	r8, #0
 802937c:	dd0d      	ble.n	802939a <_dtoa_r+0x6a2>
 802937e:	9a06      	ldr	r2, [sp, #24]
 8029380:	2a00      	cmp	r2, #0
 8029382:	dd0a      	ble.n	802939a <_dtoa_r+0x6a2>
 8029384:	4542      	cmp	r2, r8
 8029386:	9905      	ldr	r1, [sp, #20]
 8029388:	bfa8      	it	ge
 802938a:	4642      	movge	r2, r8
 802938c:	1a89      	subs	r1, r1, r2
 802938e:	9105      	str	r1, [sp, #20]
 8029390:	9906      	ldr	r1, [sp, #24]
 8029392:	eba8 0802 	sub.w	r8, r8, r2
 8029396:	1a8a      	subs	r2, r1, r2
 8029398:	9206      	str	r2, [sp, #24]
 802939a:	b303      	cbz	r3, 80293de <_dtoa_r+0x6e6>
 802939c:	9a08      	ldr	r2, [sp, #32]
 802939e:	2a00      	cmp	r2, #0
 80293a0:	f000 80a6 	beq.w	80294f0 <_dtoa_r+0x7f8>
 80293a4:	2c00      	cmp	r4, #0
 80293a6:	dd13      	ble.n	80293d0 <_dtoa_r+0x6d8>
 80293a8:	4639      	mov	r1, r7
 80293aa:	4622      	mov	r2, r4
 80293ac:	4630      	mov	r0, r6
 80293ae:	930c      	str	r3, [sp, #48]	; 0x30
 80293b0:	f001 f9f0 	bl	802a794 <__pow5mult>
 80293b4:	462a      	mov	r2, r5
 80293b6:	4601      	mov	r1, r0
 80293b8:	4607      	mov	r7, r0
 80293ba:	4630      	mov	r0, r6
 80293bc:	f001 f944 	bl	802a648 <__multiply>
 80293c0:	4629      	mov	r1, r5
 80293c2:	900a      	str	r0, [sp, #40]	; 0x28
 80293c4:	4630      	mov	r0, r6
 80293c6:	f001 f823 	bl	802a410 <_Bfree>
 80293ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80293cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80293ce:	4615      	mov	r5, r2
 80293d0:	1b1a      	subs	r2, r3, r4
 80293d2:	d004      	beq.n	80293de <_dtoa_r+0x6e6>
 80293d4:	4629      	mov	r1, r5
 80293d6:	4630      	mov	r0, r6
 80293d8:	f001 f9dc 	bl	802a794 <__pow5mult>
 80293dc:	4605      	mov	r5, r0
 80293de:	2101      	movs	r1, #1
 80293e0:	4630      	mov	r0, r6
 80293e2:	f001 f91b 	bl	802a61c <__i2b>
 80293e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80293e8:	2b00      	cmp	r3, #0
 80293ea:	4604      	mov	r4, r0
 80293ec:	f340 8082 	ble.w	80294f4 <_dtoa_r+0x7fc>
 80293f0:	461a      	mov	r2, r3
 80293f2:	4601      	mov	r1, r0
 80293f4:	4630      	mov	r0, r6
 80293f6:	f001 f9cd 	bl	802a794 <__pow5mult>
 80293fa:	9b07      	ldr	r3, [sp, #28]
 80293fc:	2b01      	cmp	r3, #1
 80293fe:	4604      	mov	r4, r0
 8029400:	dd7b      	ble.n	80294fa <_dtoa_r+0x802>
 8029402:	2300      	movs	r3, #0
 8029404:	930a      	str	r3, [sp, #40]	; 0x28
 8029406:	6922      	ldr	r2, [r4, #16]
 8029408:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802940c:	6910      	ldr	r0, [r2, #16]
 802940e:	f001 f8b5 	bl	802a57c <__hi0bits>
 8029412:	f1c0 0020 	rsb	r0, r0, #32
 8029416:	9b06      	ldr	r3, [sp, #24]
 8029418:	4418      	add	r0, r3
 802941a:	f010 001f 	ands.w	r0, r0, #31
 802941e:	f000 808d 	beq.w	802953c <_dtoa_r+0x844>
 8029422:	f1c0 0220 	rsb	r2, r0, #32
 8029426:	2a04      	cmp	r2, #4
 8029428:	f340 8086 	ble.w	8029538 <_dtoa_r+0x840>
 802942c:	f1c0 001c 	rsb	r0, r0, #28
 8029430:	9b05      	ldr	r3, [sp, #20]
 8029432:	4403      	add	r3, r0
 8029434:	9305      	str	r3, [sp, #20]
 8029436:	9b06      	ldr	r3, [sp, #24]
 8029438:	4403      	add	r3, r0
 802943a:	4480      	add	r8, r0
 802943c:	9306      	str	r3, [sp, #24]
 802943e:	9b05      	ldr	r3, [sp, #20]
 8029440:	2b00      	cmp	r3, #0
 8029442:	dd05      	ble.n	8029450 <_dtoa_r+0x758>
 8029444:	4629      	mov	r1, r5
 8029446:	461a      	mov	r2, r3
 8029448:	4630      	mov	r0, r6
 802944a:	f001 f9fd 	bl	802a848 <__lshift>
 802944e:	4605      	mov	r5, r0
 8029450:	9b06      	ldr	r3, [sp, #24]
 8029452:	2b00      	cmp	r3, #0
 8029454:	dd05      	ble.n	8029462 <_dtoa_r+0x76a>
 8029456:	4621      	mov	r1, r4
 8029458:	461a      	mov	r2, r3
 802945a:	4630      	mov	r0, r6
 802945c:	f001 f9f4 	bl	802a848 <__lshift>
 8029460:	4604      	mov	r4, r0
 8029462:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8029464:	2b00      	cmp	r3, #0
 8029466:	d06b      	beq.n	8029540 <_dtoa_r+0x848>
 8029468:	4621      	mov	r1, r4
 802946a:	4628      	mov	r0, r5
 802946c:	f001 fa58 	bl	802a920 <__mcmp>
 8029470:	2800      	cmp	r0, #0
 8029472:	da65      	bge.n	8029540 <_dtoa_r+0x848>
 8029474:	2300      	movs	r3, #0
 8029476:	4629      	mov	r1, r5
 8029478:	220a      	movs	r2, #10
 802947a:	4630      	mov	r0, r6
 802947c:	f000 ffea 	bl	802a454 <__multadd>
 8029480:	9b08      	ldr	r3, [sp, #32]
 8029482:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029486:	4605      	mov	r5, r0
 8029488:	2b00      	cmp	r3, #0
 802948a:	f000 8192 	beq.w	80297b2 <_dtoa_r+0xaba>
 802948e:	4639      	mov	r1, r7
 8029490:	2300      	movs	r3, #0
 8029492:	220a      	movs	r2, #10
 8029494:	4630      	mov	r0, r6
 8029496:	f000 ffdd 	bl	802a454 <__multadd>
 802949a:	f1ba 0f00 	cmp.w	sl, #0
 802949e:	4607      	mov	r7, r0
 80294a0:	f300 808e 	bgt.w	80295c0 <_dtoa_r+0x8c8>
 80294a4:	9b07      	ldr	r3, [sp, #28]
 80294a6:	2b02      	cmp	r3, #2
 80294a8:	dc51      	bgt.n	802954e <_dtoa_r+0x856>
 80294aa:	e089      	b.n	80295c0 <_dtoa_r+0x8c8>
 80294ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80294ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80294b2:	e751      	b.n	8029358 <_dtoa_r+0x660>
 80294b4:	f109 34ff 	add.w	r4, r9, #4294967295
 80294b8:	42a3      	cmp	r3, r4
 80294ba:	bfbf      	itttt	lt
 80294bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80294be:	1ae3      	sublt	r3, r4, r3
 80294c0:	18d2      	addlt	r2, r2, r3
 80294c2:	4613      	movlt	r3, r2
 80294c4:	bfb7      	itett	lt
 80294c6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80294c8:	1b1c      	subge	r4, r3, r4
 80294ca:	4623      	movlt	r3, r4
 80294cc:	2400      	movlt	r4, #0
 80294ce:	f1b9 0f00 	cmp.w	r9, #0
 80294d2:	bfb5      	itete	lt
 80294d4:	9a05      	ldrlt	r2, [sp, #20]
 80294d6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80294da:	eba2 0809 	sublt.w	r8, r2, r9
 80294de:	464a      	movge	r2, r9
 80294e0:	bfb8      	it	lt
 80294e2:	2200      	movlt	r2, #0
 80294e4:	e73b      	b.n	802935e <_dtoa_r+0x666>
 80294e6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80294ea:	9f08      	ldr	r7, [sp, #32]
 80294ec:	461c      	mov	r4, r3
 80294ee:	e743      	b.n	8029378 <_dtoa_r+0x680>
 80294f0:	461a      	mov	r2, r3
 80294f2:	e76f      	b.n	80293d4 <_dtoa_r+0x6dc>
 80294f4:	9b07      	ldr	r3, [sp, #28]
 80294f6:	2b01      	cmp	r3, #1
 80294f8:	dc18      	bgt.n	802952c <_dtoa_r+0x834>
 80294fa:	9b02      	ldr	r3, [sp, #8]
 80294fc:	b9b3      	cbnz	r3, 802952c <_dtoa_r+0x834>
 80294fe:	9b03      	ldr	r3, [sp, #12]
 8029500:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8029504:	b9a2      	cbnz	r2, 8029530 <_dtoa_r+0x838>
 8029506:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802950a:	0d12      	lsrs	r2, r2, #20
 802950c:	0512      	lsls	r2, r2, #20
 802950e:	b18a      	cbz	r2, 8029534 <_dtoa_r+0x83c>
 8029510:	9b05      	ldr	r3, [sp, #20]
 8029512:	3301      	adds	r3, #1
 8029514:	9305      	str	r3, [sp, #20]
 8029516:	9b06      	ldr	r3, [sp, #24]
 8029518:	3301      	adds	r3, #1
 802951a:	9306      	str	r3, [sp, #24]
 802951c:	2301      	movs	r3, #1
 802951e:	930a      	str	r3, [sp, #40]	; 0x28
 8029520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029522:	2b00      	cmp	r3, #0
 8029524:	f47f af6f 	bne.w	8029406 <_dtoa_r+0x70e>
 8029528:	2001      	movs	r0, #1
 802952a:	e774      	b.n	8029416 <_dtoa_r+0x71e>
 802952c:	2300      	movs	r3, #0
 802952e:	e7f6      	b.n	802951e <_dtoa_r+0x826>
 8029530:	9b02      	ldr	r3, [sp, #8]
 8029532:	e7f4      	b.n	802951e <_dtoa_r+0x826>
 8029534:	920a      	str	r2, [sp, #40]	; 0x28
 8029536:	e7f3      	b.n	8029520 <_dtoa_r+0x828>
 8029538:	d081      	beq.n	802943e <_dtoa_r+0x746>
 802953a:	4610      	mov	r0, r2
 802953c:	301c      	adds	r0, #28
 802953e:	e777      	b.n	8029430 <_dtoa_r+0x738>
 8029540:	f1b9 0f00 	cmp.w	r9, #0
 8029544:	dc37      	bgt.n	80295b6 <_dtoa_r+0x8be>
 8029546:	9b07      	ldr	r3, [sp, #28]
 8029548:	2b02      	cmp	r3, #2
 802954a:	dd34      	ble.n	80295b6 <_dtoa_r+0x8be>
 802954c:	46ca      	mov	sl, r9
 802954e:	f1ba 0f00 	cmp.w	sl, #0
 8029552:	d10d      	bne.n	8029570 <_dtoa_r+0x878>
 8029554:	4621      	mov	r1, r4
 8029556:	4653      	mov	r3, sl
 8029558:	2205      	movs	r2, #5
 802955a:	4630      	mov	r0, r6
 802955c:	f000 ff7a 	bl	802a454 <__multadd>
 8029560:	4601      	mov	r1, r0
 8029562:	4604      	mov	r4, r0
 8029564:	4628      	mov	r0, r5
 8029566:	f001 f9db 	bl	802a920 <__mcmp>
 802956a:	2800      	cmp	r0, #0
 802956c:	f73f adde 	bgt.w	802912c <_dtoa_r+0x434>
 8029570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029572:	f8dd 8000 	ldr.w	r8, [sp]
 8029576:	ea6f 0b03 	mvn.w	fp, r3
 802957a:	f04f 0900 	mov.w	r9, #0
 802957e:	4621      	mov	r1, r4
 8029580:	4630      	mov	r0, r6
 8029582:	f000 ff45 	bl	802a410 <_Bfree>
 8029586:	2f00      	cmp	r7, #0
 8029588:	f43f aea7 	beq.w	80292da <_dtoa_r+0x5e2>
 802958c:	f1b9 0f00 	cmp.w	r9, #0
 8029590:	d005      	beq.n	802959e <_dtoa_r+0x8a6>
 8029592:	45b9      	cmp	r9, r7
 8029594:	d003      	beq.n	802959e <_dtoa_r+0x8a6>
 8029596:	4649      	mov	r1, r9
 8029598:	4630      	mov	r0, r6
 802959a:	f000 ff39 	bl	802a410 <_Bfree>
 802959e:	4639      	mov	r1, r7
 80295a0:	4630      	mov	r0, r6
 80295a2:	f000 ff35 	bl	802a410 <_Bfree>
 80295a6:	e698      	b.n	80292da <_dtoa_r+0x5e2>
 80295a8:	2400      	movs	r4, #0
 80295aa:	4627      	mov	r7, r4
 80295ac:	e7e0      	b.n	8029570 <_dtoa_r+0x878>
 80295ae:	46bb      	mov	fp, r7
 80295b0:	4604      	mov	r4, r0
 80295b2:	4607      	mov	r7, r0
 80295b4:	e5ba      	b.n	802912c <_dtoa_r+0x434>
 80295b6:	9b08      	ldr	r3, [sp, #32]
 80295b8:	46ca      	mov	sl, r9
 80295ba:	2b00      	cmp	r3, #0
 80295bc:	f000 8100 	beq.w	80297c0 <_dtoa_r+0xac8>
 80295c0:	f1b8 0f00 	cmp.w	r8, #0
 80295c4:	dd05      	ble.n	80295d2 <_dtoa_r+0x8da>
 80295c6:	4639      	mov	r1, r7
 80295c8:	4642      	mov	r2, r8
 80295ca:	4630      	mov	r0, r6
 80295cc:	f001 f93c 	bl	802a848 <__lshift>
 80295d0:	4607      	mov	r7, r0
 80295d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80295d4:	2b00      	cmp	r3, #0
 80295d6:	d05d      	beq.n	8029694 <_dtoa_r+0x99c>
 80295d8:	6879      	ldr	r1, [r7, #4]
 80295da:	4630      	mov	r0, r6
 80295dc:	f000 fed8 	bl	802a390 <_Balloc>
 80295e0:	4680      	mov	r8, r0
 80295e2:	b928      	cbnz	r0, 80295f0 <_dtoa_r+0x8f8>
 80295e4:	4b82      	ldr	r3, [pc, #520]	; (80297f0 <_dtoa_r+0xaf8>)
 80295e6:	4602      	mov	r2, r0
 80295e8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80295ec:	f7ff bb9a 	b.w	8028d24 <_dtoa_r+0x2c>
 80295f0:	693a      	ldr	r2, [r7, #16]
 80295f2:	3202      	adds	r2, #2
 80295f4:	0092      	lsls	r2, r2, #2
 80295f6:	f107 010c 	add.w	r1, r7, #12
 80295fa:	300c      	adds	r0, #12
 80295fc:	f7fd fa76 	bl	8026aec <memcpy>
 8029600:	2201      	movs	r2, #1
 8029602:	4641      	mov	r1, r8
 8029604:	4630      	mov	r0, r6
 8029606:	f001 f91f 	bl	802a848 <__lshift>
 802960a:	9b00      	ldr	r3, [sp, #0]
 802960c:	3301      	adds	r3, #1
 802960e:	9305      	str	r3, [sp, #20]
 8029610:	9b00      	ldr	r3, [sp, #0]
 8029612:	4453      	add	r3, sl
 8029614:	9309      	str	r3, [sp, #36]	; 0x24
 8029616:	9b02      	ldr	r3, [sp, #8]
 8029618:	f003 0301 	and.w	r3, r3, #1
 802961c:	46b9      	mov	r9, r7
 802961e:	9308      	str	r3, [sp, #32]
 8029620:	4607      	mov	r7, r0
 8029622:	9b05      	ldr	r3, [sp, #20]
 8029624:	4621      	mov	r1, r4
 8029626:	3b01      	subs	r3, #1
 8029628:	4628      	mov	r0, r5
 802962a:	9302      	str	r3, [sp, #8]
 802962c:	f7ff fad8 	bl	8028be0 <quorem>
 8029630:	4603      	mov	r3, r0
 8029632:	3330      	adds	r3, #48	; 0x30
 8029634:	9006      	str	r0, [sp, #24]
 8029636:	4649      	mov	r1, r9
 8029638:	4628      	mov	r0, r5
 802963a:	930a      	str	r3, [sp, #40]	; 0x28
 802963c:	f001 f970 	bl	802a920 <__mcmp>
 8029640:	463a      	mov	r2, r7
 8029642:	4682      	mov	sl, r0
 8029644:	4621      	mov	r1, r4
 8029646:	4630      	mov	r0, r6
 8029648:	f001 f986 	bl	802a958 <__mdiff>
 802964c:	68c2      	ldr	r2, [r0, #12]
 802964e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029650:	4680      	mov	r8, r0
 8029652:	bb0a      	cbnz	r2, 8029698 <_dtoa_r+0x9a0>
 8029654:	4601      	mov	r1, r0
 8029656:	4628      	mov	r0, r5
 8029658:	f001 f962 	bl	802a920 <__mcmp>
 802965c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802965e:	4602      	mov	r2, r0
 8029660:	4641      	mov	r1, r8
 8029662:	4630      	mov	r0, r6
 8029664:	920e      	str	r2, [sp, #56]	; 0x38
 8029666:	930a      	str	r3, [sp, #40]	; 0x28
 8029668:	f000 fed2 	bl	802a410 <_Bfree>
 802966c:	9b07      	ldr	r3, [sp, #28]
 802966e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029670:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8029674:	ea43 0102 	orr.w	r1, r3, r2
 8029678:	9b08      	ldr	r3, [sp, #32]
 802967a:	430b      	orrs	r3, r1
 802967c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802967e:	d10d      	bne.n	802969c <_dtoa_r+0x9a4>
 8029680:	2b39      	cmp	r3, #57	; 0x39
 8029682:	d029      	beq.n	80296d8 <_dtoa_r+0x9e0>
 8029684:	f1ba 0f00 	cmp.w	sl, #0
 8029688:	dd01      	ble.n	802968e <_dtoa_r+0x996>
 802968a:	9b06      	ldr	r3, [sp, #24]
 802968c:	3331      	adds	r3, #49	; 0x31
 802968e:	9a02      	ldr	r2, [sp, #8]
 8029690:	7013      	strb	r3, [r2, #0]
 8029692:	e774      	b.n	802957e <_dtoa_r+0x886>
 8029694:	4638      	mov	r0, r7
 8029696:	e7b8      	b.n	802960a <_dtoa_r+0x912>
 8029698:	2201      	movs	r2, #1
 802969a:	e7e1      	b.n	8029660 <_dtoa_r+0x968>
 802969c:	f1ba 0f00 	cmp.w	sl, #0
 80296a0:	db06      	blt.n	80296b0 <_dtoa_r+0x9b8>
 80296a2:	9907      	ldr	r1, [sp, #28]
 80296a4:	ea41 0a0a 	orr.w	sl, r1, sl
 80296a8:	9908      	ldr	r1, [sp, #32]
 80296aa:	ea5a 0101 	orrs.w	r1, sl, r1
 80296ae:	d120      	bne.n	80296f2 <_dtoa_r+0x9fa>
 80296b0:	2a00      	cmp	r2, #0
 80296b2:	ddec      	ble.n	802968e <_dtoa_r+0x996>
 80296b4:	4629      	mov	r1, r5
 80296b6:	2201      	movs	r2, #1
 80296b8:	4630      	mov	r0, r6
 80296ba:	9305      	str	r3, [sp, #20]
 80296bc:	f001 f8c4 	bl	802a848 <__lshift>
 80296c0:	4621      	mov	r1, r4
 80296c2:	4605      	mov	r5, r0
 80296c4:	f001 f92c 	bl	802a920 <__mcmp>
 80296c8:	2800      	cmp	r0, #0
 80296ca:	9b05      	ldr	r3, [sp, #20]
 80296cc:	dc02      	bgt.n	80296d4 <_dtoa_r+0x9dc>
 80296ce:	d1de      	bne.n	802968e <_dtoa_r+0x996>
 80296d0:	07da      	lsls	r2, r3, #31
 80296d2:	d5dc      	bpl.n	802968e <_dtoa_r+0x996>
 80296d4:	2b39      	cmp	r3, #57	; 0x39
 80296d6:	d1d8      	bne.n	802968a <_dtoa_r+0x992>
 80296d8:	9a02      	ldr	r2, [sp, #8]
 80296da:	2339      	movs	r3, #57	; 0x39
 80296dc:	7013      	strb	r3, [r2, #0]
 80296de:	4643      	mov	r3, r8
 80296e0:	4698      	mov	r8, r3
 80296e2:	3b01      	subs	r3, #1
 80296e4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80296e8:	2a39      	cmp	r2, #57	; 0x39
 80296ea:	d051      	beq.n	8029790 <_dtoa_r+0xa98>
 80296ec:	3201      	adds	r2, #1
 80296ee:	701a      	strb	r2, [r3, #0]
 80296f0:	e745      	b.n	802957e <_dtoa_r+0x886>
 80296f2:	2a00      	cmp	r2, #0
 80296f4:	dd03      	ble.n	80296fe <_dtoa_r+0xa06>
 80296f6:	2b39      	cmp	r3, #57	; 0x39
 80296f8:	d0ee      	beq.n	80296d8 <_dtoa_r+0x9e0>
 80296fa:	3301      	adds	r3, #1
 80296fc:	e7c7      	b.n	802968e <_dtoa_r+0x996>
 80296fe:	9a05      	ldr	r2, [sp, #20]
 8029700:	9909      	ldr	r1, [sp, #36]	; 0x24
 8029702:	f802 3c01 	strb.w	r3, [r2, #-1]
 8029706:	428a      	cmp	r2, r1
 8029708:	d02b      	beq.n	8029762 <_dtoa_r+0xa6a>
 802970a:	4629      	mov	r1, r5
 802970c:	2300      	movs	r3, #0
 802970e:	220a      	movs	r2, #10
 8029710:	4630      	mov	r0, r6
 8029712:	f000 fe9f 	bl	802a454 <__multadd>
 8029716:	45b9      	cmp	r9, r7
 8029718:	4605      	mov	r5, r0
 802971a:	f04f 0300 	mov.w	r3, #0
 802971e:	f04f 020a 	mov.w	r2, #10
 8029722:	4649      	mov	r1, r9
 8029724:	4630      	mov	r0, r6
 8029726:	d107      	bne.n	8029738 <_dtoa_r+0xa40>
 8029728:	f000 fe94 	bl	802a454 <__multadd>
 802972c:	4681      	mov	r9, r0
 802972e:	4607      	mov	r7, r0
 8029730:	9b05      	ldr	r3, [sp, #20]
 8029732:	3301      	adds	r3, #1
 8029734:	9305      	str	r3, [sp, #20]
 8029736:	e774      	b.n	8029622 <_dtoa_r+0x92a>
 8029738:	f000 fe8c 	bl	802a454 <__multadd>
 802973c:	4639      	mov	r1, r7
 802973e:	4681      	mov	r9, r0
 8029740:	2300      	movs	r3, #0
 8029742:	220a      	movs	r2, #10
 8029744:	4630      	mov	r0, r6
 8029746:	f000 fe85 	bl	802a454 <__multadd>
 802974a:	4607      	mov	r7, r0
 802974c:	e7f0      	b.n	8029730 <_dtoa_r+0xa38>
 802974e:	f1ba 0f00 	cmp.w	sl, #0
 8029752:	9a00      	ldr	r2, [sp, #0]
 8029754:	bfcc      	ite	gt
 8029756:	46d0      	movgt	r8, sl
 8029758:	f04f 0801 	movle.w	r8, #1
 802975c:	4490      	add	r8, r2
 802975e:	f04f 0900 	mov.w	r9, #0
 8029762:	4629      	mov	r1, r5
 8029764:	2201      	movs	r2, #1
 8029766:	4630      	mov	r0, r6
 8029768:	9302      	str	r3, [sp, #8]
 802976a:	f001 f86d 	bl	802a848 <__lshift>
 802976e:	4621      	mov	r1, r4
 8029770:	4605      	mov	r5, r0
 8029772:	f001 f8d5 	bl	802a920 <__mcmp>
 8029776:	2800      	cmp	r0, #0
 8029778:	dcb1      	bgt.n	80296de <_dtoa_r+0x9e6>
 802977a:	d102      	bne.n	8029782 <_dtoa_r+0xa8a>
 802977c:	9b02      	ldr	r3, [sp, #8]
 802977e:	07db      	lsls	r3, r3, #31
 8029780:	d4ad      	bmi.n	80296de <_dtoa_r+0x9e6>
 8029782:	4643      	mov	r3, r8
 8029784:	4698      	mov	r8, r3
 8029786:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802978a:	2a30      	cmp	r2, #48	; 0x30
 802978c:	d0fa      	beq.n	8029784 <_dtoa_r+0xa8c>
 802978e:	e6f6      	b.n	802957e <_dtoa_r+0x886>
 8029790:	9a00      	ldr	r2, [sp, #0]
 8029792:	429a      	cmp	r2, r3
 8029794:	d1a4      	bne.n	80296e0 <_dtoa_r+0x9e8>
 8029796:	f10b 0b01 	add.w	fp, fp, #1
 802979a:	2331      	movs	r3, #49	; 0x31
 802979c:	e778      	b.n	8029690 <_dtoa_r+0x998>
 802979e:	4b15      	ldr	r3, [pc, #84]	; (80297f4 <_dtoa_r+0xafc>)
 80297a0:	f7ff bb12 	b.w	8028dc8 <_dtoa_r+0xd0>
 80297a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80297a6:	2b00      	cmp	r3, #0
 80297a8:	f47f aaee 	bne.w	8028d88 <_dtoa_r+0x90>
 80297ac:	4b12      	ldr	r3, [pc, #72]	; (80297f8 <_dtoa_r+0xb00>)
 80297ae:	f7ff bb0b 	b.w	8028dc8 <_dtoa_r+0xd0>
 80297b2:	f1ba 0f00 	cmp.w	sl, #0
 80297b6:	dc03      	bgt.n	80297c0 <_dtoa_r+0xac8>
 80297b8:	9b07      	ldr	r3, [sp, #28]
 80297ba:	2b02      	cmp	r3, #2
 80297bc:	f73f aec7 	bgt.w	802954e <_dtoa_r+0x856>
 80297c0:	f8dd 8000 	ldr.w	r8, [sp]
 80297c4:	4621      	mov	r1, r4
 80297c6:	4628      	mov	r0, r5
 80297c8:	f7ff fa0a 	bl	8028be0 <quorem>
 80297cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80297d0:	f808 3b01 	strb.w	r3, [r8], #1
 80297d4:	9a00      	ldr	r2, [sp, #0]
 80297d6:	eba8 0202 	sub.w	r2, r8, r2
 80297da:	4592      	cmp	sl, r2
 80297dc:	ddb7      	ble.n	802974e <_dtoa_r+0xa56>
 80297de:	4629      	mov	r1, r5
 80297e0:	2300      	movs	r3, #0
 80297e2:	220a      	movs	r2, #10
 80297e4:	4630      	mov	r0, r6
 80297e6:	f000 fe35 	bl	802a454 <__multadd>
 80297ea:	4605      	mov	r5, r0
 80297ec:	e7ea      	b.n	80297c4 <_dtoa_r+0xacc>
 80297ee:	bf00      	nop
 80297f0:	0802f6dc 	.word	0x0802f6dc
 80297f4:	0802e7e2 	.word	0x0802e7e2
 80297f8:	0802f659 	.word	0x0802f659

080297fc <__sflush_r>:
 80297fc:	898a      	ldrh	r2, [r1, #12]
 80297fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029802:	4605      	mov	r5, r0
 8029804:	0710      	lsls	r0, r2, #28
 8029806:	460c      	mov	r4, r1
 8029808:	d458      	bmi.n	80298bc <__sflush_r+0xc0>
 802980a:	684b      	ldr	r3, [r1, #4]
 802980c:	2b00      	cmp	r3, #0
 802980e:	dc05      	bgt.n	802981c <__sflush_r+0x20>
 8029810:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8029812:	2b00      	cmp	r3, #0
 8029814:	dc02      	bgt.n	802981c <__sflush_r+0x20>
 8029816:	2000      	movs	r0, #0
 8029818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802981c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802981e:	2e00      	cmp	r6, #0
 8029820:	d0f9      	beq.n	8029816 <__sflush_r+0x1a>
 8029822:	2300      	movs	r3, #0
 8029824:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8029828:	682f      	ldr	r7, [r5, #0]
 802982a:	602b      	str	r3, [r5, #0]
 802982c:	d032      	beq.n	8029894 <__sflush_r+0x98>
 802982e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8029830:	89a3      	ldrh	r3, [r4, #12]
 8029832:	075a      	lsls	r2, r3, #29
 8029834:	d505      	bpl.n	8029842 <__sflush_r+0x46>
 8029836:	6863      	ldr	r3, [r4, #4]
 8029838:	1ac0      	subs	r0, r0, r3
 802983a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802983c:	b10b      	cbz	r3, 8029842 <__sflush_r+0x46>
 802983e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029840:	1ac0      	subs	r0, r0, r3
 8029842:	2300      	movs	r3, #0
 8029844:	4602      	mov	r2, r0
 8029846:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029848:	6a21      	ldr	r1, [r4, #32]
 802984a:	4628      	mov	r0, r5
 802984c:	47b0      	blx	r6
 802984e:	1c43      	adds	r3, r0, #1
 8029850:	89a3      	ldrh	r3, [r4, #12]
 8029852:	d106      	bne.n	8029862 <__sflush_r+0x66>
 8029854:	6829      	ldr	r1, [r5, #0]
 8029856:	291d      	cmp	r1, #29
 8029858:	d82c      	bhi.n	80298b4 <__sflush_r+0xb8>
 802985a:	4a2a      	ldr	r2, [pc, #168]	; (8029904 <__sflush_r+0x108>)
 802985c:	40ca      	lsrs	r2, r1
 802985e:	07d6      	lsls	r6, r2, #31
 8029860:	d528      	bpl.n	80298b4 <__sflush_r+0xb8>
 8029862:	2200      	movs	r2, #0
 8029864:	6062      	str	r2, [r4, #4]
 8029866:	04d9      	lsls	r1, r3, #19
 8029868:	6922      	ldr	r2, [r4, #16]
 802986a:	6022      	str	r2, [r4, #0]
 802986c:	d504      	bpl.n	8029878 <__sflush_r+0x7c>
 802986e:	1c42      	adds	r2, r0, #1
 8029870:	d101      	bne.n	8029876 <__sflush_r+0x7a>
 8029872:	682b      	ldr	r3, [r5, #0]
 8029874:	b903      	cbnz	r3, 8029878 <__sflush_r+0x7c>
 8029876:	6560      	str	r0, [r4, #84]	; 0x54
 8029878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802987a:	602f      	str	r7, [r5, #0]
 802987c:	2900      	cmp	r1, #0
 802987e:	d0ca      	beq.n	8029816 <__sflush_r+0x1a>
 8029880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029884:	4299      	cmp	r1, r3
 8029886:	d002      	beq.n	802988e <__sflush_r+0x92>
 8029888:	4628      	mov	r0, r5
 802988a:	f7fd f945 	bl	8026b18 <_free_r>
 802988e:	2000      	movs	r0, #0
 8029890:	6360      	str	r0, [r4, #52]	; 0x34
 8029892:	e7c1      	b.n	8029818 <__sflush_r+0x1c>
 8029894:	6a21      	ldr	r1, [r4, #32]
 8029896:	2301      	movs	r3, #1
 8029898:	4628      	mov	r0, r5
 802989a:	47b0      	blx	r6
 802989c:	1c41      	adds	r1, r0, #1
 802989e:	d1c7      	bne.n	8029830 <__sflush_r+0x34>
 80298a0:	682b      	ldr	r3, [r5, #0]
 80298a2:	2b00      	cmp	r3, #0
 80298a4:	d0c4      	beq.n	8029830 <__sflush_r+0x34>
 80298a6:	2b1d      	cmp	r3, #29
 80298a8:	d001      	beq.n	80298ae <__sflush_r+0xb2>
 80298aa:	2b16      	cmp	r3, #22
 80298ac:	d101      	bne.n	80298b2 <__sflush_r+0xb6>
 80298ae:	602f      	str	r7, [r5, #0]
 80298b0:	e7b1      	b.n	8029816 <__sflush_r+0x1a>
 80298b2:	89a3      	ldrh	r3, [r4, #12]
 80298b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80298b8:	81a3      	strh	r3, [r4, #12]
 80298ba:	e7ad      	b.n	8029818 <__sflush_r+0x1c>
 80298bc:	690f      	ldr	r7, [r1, #16]
 80298be:	2f00      	cmp	r7, #0
 80298c0:	d0a9      	beq.n	8029816 <__sflush_r+0x1a>
 80298c2:	0793      	lsls	r3, r2, #30
 80298c4:	680e      	ldr	r6, [r1, #0]
 80298c6:	bf08      	it	eq
 80298c8:	694b      	ldreq	r3, [r1, #20]
 80298ca:	600f      	str	r7, [r1, #0]
 80298cc:	bf18      	it	ne
 80298ce:	2300      	movne	r3, #0
 80298d0:	eba6 0807 	sub.w	r8, r6, r7
 80298d4:	608b      	str	r3, [r1, #8]
 80298d6:	f1b8 0f00 	cmp.w	r8, #0
 80298da:	dd9c      	ble.n	8029816 <__sflush_r+0x1a>
 80298dc:	6a21      	ldr	r1, [r4, #32]
 80298de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80298e0:	4643      	mov	r3, r8
 80298e2:	463a      	mov	r2, r7
 80298e4:	4628      	mov	r0, r5
 80298e6:	47b0      	blx	r6
 80298e8:	2800      	cmp	r0, #0
 80298ea:	dc06      	bgt.n	80298fa <__sflush_r+0xfe>
 80298ec:	89a3      	ldrh	r3, [r4, #12]
 80298ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80298f2:	81a3      	strh	r3, [r4, #12]
 80298f4:	f04f 30ff 	mov.w	r0, #4294967295
 80298f8:	e78e      	b.n	8029818 <__sflush_r+0x1c>
 80298fa:	4407      	add	r7, r0
 80298fc:	eba8 0800 	sub.w	r8, r8, r0
 8029900:	e7e9      	b.n	80298d6 <__sflush_r+0xda>
 8029902:	bf00      	nop
 8029904:	20400001 	.word	0x20400001

08029908 <_fflush_r>:
 8029908:	b538      	push	{r3, r4, r5, lr}
 802990a:	690b      	ldr	r3, [r1, #16]
 802990c:	4605      	mov	r5, r0
 802990e:	460c      	mov	r4, r1
 8029910:	b913      	cbnz	r3, 8029918 <_fflush_r+0x10>
 8029912:	2500      	movs	r5, #0
 8029914:	4628      	mov	r0, r5
 8029916:	bd38      	pop	{r3, r4, r5, pc}
 8029918:	b118      	cbz	r0, 8029922 <_fflush_r+0x1a>
 802991a:	6983      	ldr	r3, [r0, #24]
 802991c:	b90b      	cbnz	r3, 8029922 <_fflush_r+0x1a>
 802991e:	f000 f887 	bl	8029a30 <__sinit>
 8029922:	4b14      	ldr	r3, [pc, #80]	; (8029974 <_fflush_r+0x6c>)
 8029924:	429c      	cmp	r4, r3
 8029926:	d11b      	bne.n	8029960 <_fflush_r+0x58>
 8029928:	686c      	ldr	r4, [r5, #4]
 802992a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802992e:	2b00      	cmp	r3, #0
 8029930:	d0ef      	beq.n	8029912 <_fflush_r+0xa>
 8029932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8029934:	07d0      	lsls	r0, r2, #31
 8029936:	d404      	bmi.n	8029942 <_fflush_r+0x3a>
 8029938:	0599      	lsls	r1, r3, #22
 802993a:	d402      	bmi.n	8029942 <_fflush_r+0x3a>
 802993c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802993e:	f000 fc88 	bl	802a252 <__retarget_lock_acquire_recursive>
 8029942:	4628      	mov	r0, r5
 8029944:	4621      	mov	r1, r4
 8029946:	f7ff ff59 	bl	80297fc <__sflush_r>
 802994a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802994c:	07da      	lsls	r2, r3, #31
 802994e:	4605      	mov	r5, r0
 8029950:	d4e0      	bmi.n	8029914 <_fflush_r+0xc>
 8029952:	89a3      	ldrh	r3, [r4, #12]
 8029954:	059b      	lsls	r3, r3, #22
 8029956:	d4dd      	bmi.n	8029914 <_fflush_r+0xc>
 8029958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802995a:	f000 fc7c 	bl	802a256 <__retarget_lock_release_recursive>
 802995e:	e7d9      	b.n	8029914 <_fflush_r+0xc>
 8029960:	4b05      	ldr	r3, [pc, #20]	; (8029978 <_fflush_r+0x70>)
 8029962:	429c      	cmp	r4, r3
 8029964:	d101      	bne.n	802996a <_fflush_r+0x62>
 8029966:	68ac      	ldr	r4, [r5, #8]
 8029968:	e7df      	b.n	802992a <_fflush_r+0x22>
 802996a:	4b04      	ldr	r3, [pc, #16]	; (802997c <_fflush_r+0x74>)
 802996c:	429c      	cmp	r4, r3
 802996e:	bf08      	it	eq
 8029970:	68ec      	ldreq	r4, [r5, #12]
 8029972:	e7da      	b.n	802992a <_fflush_r+0x22>
 8029974:	0802f710 	.word	0x0802f710
 8029978:	0802f730 	.word	0x0802f730
 802997c:	0802f6f0 	.word	0x0802f6f0

08029980 <std>:
 8029980:	2300      	movs	r3, #0
 8029982:	b510      	push	{r4, lr}
 8029984:	4604      	mov	r4, r0
 8029986:	e9c0 3300 	strd	r3, r3, [r0]
 802998a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802998e:	6083      	str	r3, [r0, #8]
 8029990:	8181      	strh	r1, [r0, #12]
 8029992:	6643      	str	r3, [r0, #100]	; 0x64
 8029994:	81c2      	strh	r2, [r0, #14]
 8029996:	6183      	str	r3, [r0, #24]
 8029998:	4619      	mov	r1, r3
 802999a:	2208      	movs	r2, #8
 802999c:	305c      	adds	r0, #92	; 0x5c
 802999e:	f7fd f8b3 	bl	8026b08 <memset>
 80299a2:	4b05      	ldr	r3, [pc, #20]	; (80299b8 <std+0x38>)
 80299a4:	6263      	str	r3, [r4, #36]	; 0x24
 80299a6:	4b05      	ldr	r3, [pc, #20]	; (80299bc <std+0x3c>)
 80299a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80299aa:	4b05      	ldr	r3, [pc, #20]	; (80299c0 <std+0x40>)
 80299ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80299ae:	4b05      	ldr	r3, [pc, #20]	; (80299c4 <std+0x44>)
 80299b0:	6224      	str	r4, [r4, #32]
 80299b2:	6323      	str	r3, [r4, #48]	; 0x30
 80299b4:	bd10      	pop	{r4, pc}
 80299b6:	bf00      	nop
 80299b8:	0802b039 	.word	0x0802b039
 80299bc:	0802b05b 	.word	0x0802b05b
 80299c0:	0802b093 	.word	0x0802b093
 80299c4:	0802b0b7 	.word	0x0802b0b7

080299c8 <_cleanup_r>:
 80299c8:	4901      	ldr	r1, [pc, #4]	; (80299d0 <_cleanup_r+0x8>)
 80299ca:	f000 b8af 	b.w	8029b2c <_fwalk_reent>
 80299ce:	bf00      	nop
 80299d0:	08029909 	.word	0x08029909

080299d4 <__sfmoreglue>:
 80299d4:	b570      	push	{r4, r5, r6, lr}
 80299d6:	1e4a      	subs	r2, r1, #1
 80299d8:	2568      	movs	r5, #104	; 0x68
 80299da:	4355      	muls	r5, r2
 80299dc:	460e      	mov	r6, r1
 80299de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80299e2:	f7fd f8e9 	bl	8026bb8 <_malloc_r>
 80299e6:	4604      	mov	r4, r0
 80299e8:	b140      	cbz	r0, 80299fc <__sfmoreglue+0x28>
 80299ea:	2100      	movs	r1, #0
 80299ec:	e9c0 1600 	strd	r1, r6, [r0]
 80299f0:	300c      	adds	r0, #12
 80299f2:	60a0      	str	r0, [r4, #8]
 80299f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80299f8:	f7fd f886 	bl	8026b08 <memset>
 80299fc:	4620      	mov	r0, r4
 80299fe:	bd70      	pop	{r4, r5, r6, pc}

08029a00 <__sfp_lock_acquire>:
 8029a00:	4801      	ldr	r0, [pc, #4]	; (8029a08 <__sfp_lock_acquire+0x8>)
 8029a02:	f000 bc26 	b.w	802a252 <__retarget_lock_acquire_recursive>
 8029a06:	bf00      	nop
 8029a08:	200571d4 	.word	0x200571d4

08029a0c <__sfp_lock_release>:
 8029a0c:	4801      	ldr	r0, [pc, #4]	; (8029a14 <__sfp_lock_release+0x8>)
 8029a0e:	f000 bc22 	b.w	802a256 <__retarget_lock_release_recursive>
 8029a12:	bf00      	nop
 8029a14:	200571d4 	.word	0x200571d4

08029a18 <__sinit_lock_acquire>:
 8029a18:	4801      	ldr	r0, [pc, #4]	; (8029a20 <__sinit_lock_acquire+0x8>)
 8029a1a:	f000 bc1a 	b.w	802a252 <__retarget_lock_acquire_recursive>
 8029a1e:	bf00      	nop
 8029a20:	200571cf 	.word	0x200571cf

08029a24 <__sinit_lock_release>:
 8029a24:	4801      	ldr	r0, [pc, #4]	; (8029a2c <__sinit_lock_release+0x8>)
 8029a26:	f000 bc16 	b.w	802a256 <__retarget_lock_release_recursive>
 8029a2a:	bf00      	nop
 8029a2c:	200571cf 	.word	0x200571cf

08029a30 <__sinit>:
 8029a30:	b510      	push	{r4, lr}
 8029a32:	4604      	mov	r4, r0
 8029a34:	f7ff fff0 	bl	8029a18 <__sinit_lock_acquire>
 8029a38:	69a3      	ldr	r3, [r4, #24]
 8029a3a:	b11b      	cbz	r3, 8029a44 <__sinit+0x14>
 8029a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029a40:	f7ff bff0 	b.w	8029a24 <__sinit_lock_release>
 8029a44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8029a48:	6523      	str	r3, [r4, #80]	; 0x50
 8029a4a:	4b13      	ldr	r3, [pc, #76]	; (8029a98 <__sinit+0x68>)
 8029a4c:	4a13      	ldr	r2, [pc, #76]	; (8029a9c <__sinit+0x6c>)
 8029a4e:	681b      	ldr	r3, [r3, #0]
 8029a50:	62a2      	str	r2, [r4, #40]	; 0x28
 8029a52:	42a3      	cmp	r3, r4
 8029a54:	bf04      	itt	eq
 8029a56:	2301      	moveq	r3, #1
 8029a58:	61a3      	streq	r3, [r4, #24]
 8029a5a:	4620      	mov	r0, r4
 8029a5c:	f000 f820 	bl	8029aa0 <__sfp>
 8029a60:	6060      	str	r0, [r4, #4]
 8029a62:	4620      	mov	r0, r4
 8029a64:	f000 f81c 	bl	8029aa0 <__sfp>
 8029a68:	60a0      	str	r0, [r4, #8]
 8029a6a:	4620      	mov	r0, r4
 8029a6c:	f000 f818 	bl	8029aa0 <__sfp>
 8029a70:	2200      	movs	r2, #0
 8029a72:	60e0      	str	r0, [r4, #12]
 8029a74:	2104      	movs	r1, #4
 8029a76:	6860      	ldr	r0, [r4, #4]
 8029a78:	f7ff ff82 	bl	8029980 <std>
 8029a7c:	68a0      	ldr	r0, [r4, #8]
 8029a7e:	2201      	movs	r2, #1
 8029a80:	2109      	movs	r1, #9
 8029a82:	f7ff ff7d 	bl	8029980 <std>
 8029a86:	68e0      	ldr	r0, [r4, #12]
 8029a88:	2202      	movs	r2, #2
 8029a8a:	2112      	movs	r1, #18
 8029a8c:	f7ff ff78 	bl	8029980 <std>
 8029a90:	2301      	movs	r3, #1
 8029a92:	61a3      	str	r3, [r4, #24]
 8029a94:	e7d2      	b.n	8029a3c <__sinit+0xc>
 8029a96:	bf00      	nop
 8029a98:	0802f4b8 	.word	0x0802f4b8
 8029a9c:	080299c9 	.word	0x080299c9

08029aa0 <__sfp>:
 8029aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029aa2:	4607      	mov	r7, r0
 8029aa4:	f7ff ffac 	bl	8029a00 <__sfp_lock_acquire>
 8029aa8:	4b1e      	ldr	r3, [pc, #120]	; (8029b24 <__sfp+0x84>)
 8029aaa:	681e      	ldr	r6, [r3, #0]
 8029aac:	69b3      	ldr	r3, [r6, #24]
 8029aae:	b913      	cbnz	r3, 8029ab6 <__sfp+0x16>
 8029ab0:	4630      	mov	r0, r6
 8029ab2:	f7ff ffbd 	bl	8029a30 <__sinit>
 8029ab6:	3648      	adds	r6, #72	; 0x48
 8029ab8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8029abc:	3b01      	subs	r3, #1
 8029abe:	d503      	bpl.n	8029ac8 <__sfp+0x28>
 8029ac0:	6833      	ldr	r3, [r6, #0]
 8029ac2:	b30b      	cbz	r3, 8029b08 <__sfp+0x68>
 8029ac4:	6836      	ldr	r6, [r6, #0]
 8029ac6:	e7f7      	b.n	8029ab8 <__sfp+0x18>
 8029ac8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8029acc:	b9d5      	cbnz	r5, 8029b04 <__sfp+0x64>
 8029ace:	4b16      	ldr	r3, [pc, #88]	; (8029b28 <__sfp+0x88>)
 8029ad0:	60e3      	str	r3, [r4, #12]
 8029ad2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8029ad6:	6665      	str	r5, [r4, #100]	; 0x64
 8029ad8:	f000 fbba 	bl	802a250 <__retarget_lock_init_recursive>
 8029adc:	f7ff ff96 	bl	8029a0c <__sfp_lock_release>
 8029ae0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8029ae4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8029ae8:	6025      	str	r5, [r4, #0]
 8029aea:	61a5      	str	r5, [r4, #24]
 8029aec:	2208      	movs	r2, #8
 8029aee:	4629      	mov	r1, r5
 8029af0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8029af4:	f7fd f808 	bl	8026b08 <memset>
 8029af8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8029afc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8029b00:	4620      	mov	r0, r4
 8029b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029b04:	3468      	adds	r4, #104	; 0x68
 8029b06:	e7d9      	b.n	8029abc <__sfp+0x1c>
 8029b08:	2104      	movs	r1, #4
 8029b0a:	4638      	mov	r0, r7
 8029b0c:	f7ff ff62 	bl	80299d4 <__sfmoreglue>
 8029b10:	4604      	mov	r4, r0
 8029b12:	6030      	str	r0, [r6, #0]
 8029b14:	2800      	cmp	r0, #0
 8029b16:	d1d5      	bne.n	8029ac4 <__sfp+0x24>
 8029b18:	f7ff ff78 	bl	8029a0c <__sfp_lock_release>
 8029b1c:	230c      	movs	r3, #12
 8029b1e:	603b      	str	r3, [r7, #0]
 8029b20:	e7ee      	b.n	8029b00 <__sfp+0x60>
 8029b22:	bf00      	nop
 8029b24:	0802f4b8 	.word	0x0802f4b8
 8029b28:	ffff0001 	.word	0xffff0001

08029b2c <_fwalk_reent>:
 8029b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029b30:	4606      	mov	r6, r0
 8029b32:	4688      	mov	r8, r1
 8029b34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8029b38:	2700      	movs	r7, #0
 8029b3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8029b3e:	f1b9 0901 	subs.w	r9, r9, #1
 8029b42:	d505      	bpl.n	8029b50 <_fwalk_reent+0x24>
 8029b44:	6824      	ldr	r4, [r4, #0]
 8029b46:	2c00      	cmp	r4, #0
 8029b48:	d1f7      	bne.n	8029b3a <_fwalk_reent+0xe>
 8029b4a:	4638      	mov	r0, r7
 8029b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029b50:	89ab      	ldrh	r3, [r5, #12]
 8029b52:	2b01      	cmp	r3, #1
 8029b54:	d907      	bls.n	8029b66 <_fwalk_reent+0x3a>
 8029b56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029b5a:	3301      	adds	r3, #1
 8029b5c:	d003      	beq.n	8029b66 <_fwalk_reent+0x3a>
 8029b5e:	4629      	mov	r1, r5
 8029b60:	4630      	mov	r0, r6
 8029b62:	47c0      	blx	r8
 8029b64:	4307      	orrs	r7, r0
 8029b66:	3568      	adds	r5, #104	; 0x68
 8029b68:	e7e9      	b.n	8029b3e <_fwalk_reent+0x12>

08029b6a <rshift>:
 8029b6a:	6903      	ldr	r3, [r0, #16]
 8029b6c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8029b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029b74:	ea4f 1261 	mov.w	r2, r1, asr #5
 8029b78:	f100 0414 	add.w	r4, r0, #20
 8029b7c:	dd45      	ble.n	8029c0a <rshift+0xa0>
 8029b7e:	f011 011f 	ands.w	r1, r1, #31
 8029b82:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8029b86:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8029b8a:	d10c      	bne.n	8029ba6 <rshift+0x3c>
 8029b8c:	f100 0710 	add.w	r7, r0, #16
 8029b90:	4629      	mov	r1, r5
 8029b92:	42b1      	cmp	r1, r6
 8029b94:	d334      	bcc.n	8029c00 <rshift+0x96>
 8029b96:	1a9b      	subs	r3, r3, r2
 8029b98:	009b      	lsls	r3, r3, #2
 8029b9a:	1eea      	subs	r2, r5, #3
 8029b9c:	4296      	cmp	r6, r2
 8029b9e:	bf38      	it	cc
 8029ba0:	2300      	movcc	r3, #0
 8029ba2:	4423      	add	r3, r4
 8029ba4:	e015      	b.n	8029bd2 <rshift+0x68>
 8029ba6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8029baa:	f1c1 0820 	rsb	r8, r1, #32
 8029bae:	40cf      	lsrs	r7, r1
 8029bb0:	f105 0e04 	add.w	lr, r5, #4
 8029bb4:	46a1      	mov	r9, r4
 8029bb6:	4576      	cmp	r6, lr
 8029bb8:	46f4      	mov	ip, lr
 8029bba:	d815      	bhi.n	8029be8 <rshift+0x7e>
 8029bbc:	1a9b      	subs	r3, r3, r2
 8029bbe:	009a      	lsls	r2, r3, #2
 8029bc0:	3a04      	subs	r2, #4
 8029bc2:	3501      	adds	r5, #1
 8029bc4:	42ae      	cmp	r6, r5
 8029bc6:	bf38      	it	cc
 8029bc8:	2200      	movcc	r2, #0
 8029bca:	18a3      	adds	r3, r4, r2
 8029bcc:	50a7      	str	r7, [r4, r2]
 8029bce:	b107      	cbz	r7, 8029bd2 <rshift+0x68>
 8029bd0:	3304      	adds	r3, #4
 8029bd2:	1b1a      	subs	r2, r3, r4
 8029bd4:	42a3      	cmp	r3, r4
 8029bd6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8029bda:	bf08      	it	eq
 8029bdc:	2300      	moveq	r3, #0
 8029bde:	6102      	str	r2, [r0, #16]
 8029be0:	bf08      	it	eq
 8029be2:	6143      	streq	r3, [r0, #20]
 8029be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029be8:	f8dc c000 	ldr.w	ip, [ip]
 8029bec:	fa0c fc08 	lsl.w	ip, ip, r8
 8029bf0:	ea4c 0707 	orr.w	r7, ip, r7
 8029bf4:	f849 7b04 	str.w	r7, [r9], #4
 8029bf8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8029bfc:	40cf      	lsrs	r7, r1
 8029bfe:	e7da      	b.n	8029bb6 <rshift+0x4c>
 8029c00:	f851 cb04 	ldr.w	ip, [r1], #4
 8029c04:	f847 cf04 	str.w	ip, [r7, #4]!
 8029c08:	e7c3      	b.n	8029b92 <rshift+0x28>
 8029c0a:	4623      	mov	r3, r4
 8029c0c:	e7e1      	b.n	8029bd2 <rshift+0x68>

08029c0e <__hexdig_fun>:
 8029c0e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8029c12:	2b09      	cmp	r3, #9
 8029c14:	d802      	bhi.n	8029c1c <__hexdig_fun+0xe>
 8029c16:	3820      	subs	r0, #32
 8029c18:	b2c0      	uxtb	r0, r0
 8029c1a:	4770      	bx	lr
 8029c1c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8029c20:	2b05      	cmp	r3, #5
 8029c22:	d801      	bhi.n	8029c28 <__hexdig_fun+0x1a>
 8029c24:	3847      	subs	r0, #71	; 0x47
 8029c26:	e7f7      	b.n	8029c18 <__hexdig_fun+0xa>
 8029c28:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8029c2c:	2b05      	cmp	r3, #5
 8029c2e:	d801      	bhi.n	8029c34 <__hexdig_fun+0x26>
 8029c30:	3827      	subs	r0, #39	; 0x27
 8029c32:	e7f1      	b.n	8029c18 <__hexdig_fun+0xa>
 8029c34:	2000      	movs	r0, #0
 8029c36:	4770      	bx	lr

08029c38 <__gethex>:
 8029c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029c3c:	ed2d 8b02 	vpush	{d8}
 8029c40:	b089      	sub	sp, #36	; 0x24
 8029c42:	ee08 0a10 	vmov	s16, r0
 8029c46:	9304      	str	r3, [sp, #16]
 8029c48:	4bbc      	ldr	r3, [pc, #752]	; (8029f3c <__gethex+0x304>)
 8029c4a:	681b      	ldr	r3, [r3, #0]
 8029c4c:	9301      	str	r3, [sp, #4]
 8029c4e:	4618      	mov	r0, r3
 8029c50:	468b      	mov	fp, r1
 8029c52:	4690      	mov	r8, r2
 8029c54:	f7d6 faf4 	bl	8000240 <strlen>
 8029c58:	9b01      	ldr	r3, [sp, #4]
 8029c5a:	f8db 2000 	ldr.w	r2, [fp]
 8029c5e:	4403      	add	r3, r0
 8029c60:	4682      	mov	sl, r0
 8029c62:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8029c66:	9305      	str	r3, [sp, #20]
 8029c68:	1c93      	adds	r3, r2, #2
 8029c6a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8029c6e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8029c72:	32fe      	adds	r2, #254	; 0xfe
 8029c74:	18d1      	adds	r1, r2, r3
 8029c76:	461f      	mov	r7, r3
 8029c78:	f813 0b01 	ldrb.w	r0, [r3], #1
 8029c7c:	9100      	str	r1, [sp, #0]
 8029c7e:	2830      	cmp	r0, #48	; 0x30
 8029c80:	d0f8      	beq.n	8029c74 <__gethex+0x3c>
 8029c82:	f7ff ffc4 	bl	8029c0e <__hexdig_fun>
 8029c86:	4604      	mov	r4, r0
 8029c88:	2800      	cmp	r0, #0
 8029c8a:	d13a      	bne.n	8029d02 <__gethex+0xca>
 8029c8c:	9901      	ldr	r1, [sp, #4]
 8029c8e:	4652      	mov	r2, sl
 8029c90:	4638      	mov	r0, r7
 8029c92:	f001 fa14 	bl	802b0be <strncmp>
 8029c96:	4605      	mov	r5, r0
 8029c98:	2800      	cmp	r0, #0
 8029c9a:	d168      	bne.n	8029d6e <__gethex+0x136>
 8029c9c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8029ca0:	eb07 060a 	add.w	r6, r7, sl
 8029ca4:	f7ff ffb3 	bl	8029c0e <__hexdig_fun>
 8029ca8:	2800      	cmp	r0, #0
 8029caa:	d062      	beq.n	8029d72 <__gethex+0x13a>
 8029cac:	4633      	mov	r3, r6
 8029cae:	7818      	ldrb	r0, [r3, #0]
 8029cb0:	2830      	cmp	r0, #48	; 0x30
 8029cb2:	461f      	mov	r7, r3
 8029cb4:	f103 0301 	add.w	r3, r3, #1
 8029cb8:	d0f9      	beq.n	8029cae <__gethex+0x76>
 8029cba:	f7ff ffa8 	bl	8029c0e <__hexdig_fun>
 8029cbe:	2301      	movs	r3, #1
 8029cc0:	fab0 f480 	clz	r4, r0
 8029cc4:	0964      	lsrs	r4, r4, #5
 8029cc6:	4635      	mov	r5, r6
 8029cc8:	9300      	str	r3, [sp, #0]
 8029cca:	463a      	mov	r2, r7
 8029ccc:	4616      	mov	r6, r2
 8029cce:	3201      	adds	r2, #1
 8029cd0:	7830      	ldrb	r0, [r6, #0]
 8029cd2:	f7ff ff9c 	bl	8029c0e <__hexdig_fun>
 8029cd6:	2800      	cmp	r0, #0
 8029cd8:	d1f8      	bne.n	8029ccc <__gethex+0x94>
 8029cda:	9901      	ldr	r1, [sp, #4]
 8029cdc:	4652      	mov	r2, sl
 8029cde:	4630      	mov	r0, r6
 8029ce0:	f001 f9ed 	bl	802b0be <strncmp>
 8029ce4:	b980      	cbnz	r0, 8029d08 <__gethex+0xd0>
 8029ce6:	b94d      	cbnz	r5, 8029cfc <__gethex+0xc4>
 8029ce8:	eb06 050a 	add.w	r5, r6, sl
 8029cec:	462a      	mov	r2, r5
 8029cee:	4616      	mov	r6, r2
 8029cf0:	3201      	adds	r2, #1
 8029cf2:	7830      	ldrb	r0, [r6, #0]
 8029cf4:	f7ff ff8b 	bl	8029c0e <__hexdig_fun>
 8029cf8:	2800      	cmp	r0, #0
 8029cfa:	d1f8      	bne.n	8029cee <__gethex+0xb6>
 8029cfc:	1bad      	subs	r5, r5, r6
 8029cfe:	00ad      	lsls	r5, r5, #2
 8029d00:	e004      	b.n	8029d0c <__gethex+0xd4>
 8029d02:	2400      	movs	r4, #0
 8029d04:	4625      	mov	r5, r4
 8029d06:	e7e0      	b.n	8029cca <__gethex+0x92>
 8029d08:	2d00      	cmp	r5, #0
 8029d0a:	d1f7      	bne.n	8029cfc <__gethex+0xc4>
 8029d0c:	7833      	ldrb	r3, [r6, #0]
 8029d0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8029d12:	2b50      	cmp	r3, #80	; 0x50
 8029d14:	d13b      	bne.n	8029d8e <__gethex+0x156>
 8029d16:	7873      	ldrb	r3, [r6, #1]
 8029d18:	2b2b      	cmp	r3, #43	; 0x2b
 8029d1a:	d02c      	beq.n	8029d76 <__gethex+0x13e>
 8029d1c:	2b2d      	cmp	r3, #45	; 0x2d
 8029d1e:	d02e      	beq.n	8029d7e <__gethex+0x146>
 8029d20:	1c71      	adds	r1, r6, #1
 8029d22:	f04f 0900 	mov.w	r9, #0
 8029d26:	7808      	ldrb	r0, [r1, #0]
 8029d28:	f7ff ff71 	bl	8029c0e <__hexdig_fun>
 8029d2c:	1e43      	subs	r3, r0, #1
 8029d2e:	b2db      	uxtb	r3, r3
 8029d30:	2b18      	cmp	r3, #24
 8029d32:	d82c      	bhi.n	8029d8e <__gethex+0x156>
 8029d34:	f1a0 0210 	sub.w	r2, r0, #16
 8029d38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8029d3c:	f7ff ff67 	bl	8029c0e <__hexdig_fun>
 8029d40:	1e43      	subs	r3, r0, #1
 8029d42:	b2db      	uxtb	r3, r3
 8029d44:	2b18      	cmp	r3, #24
 8029d46:	d91d      	bls.n	8029d84 <__gethex+0x14c>
 8029d48:	f1b9 0f00 	cmp.w	r9, #0
 8029d4c:	d000      	beq.n	8029d50 <__gethex+0x118>
 8029d4e:	4252      	negs	r2, r2
 8029d50:	4415      	add	r5, r2
 8029d52:	f8cb 1000 	str.w	r1, [fp]
 8029d56:	b1e4      	cbz	r4, 8029d92 <__gethex+0x15a>
 8029d58:	9b00      	ldr	r3, [sp, #0]
 8029d5a:	2b00      	cmp	r3, #0
 8029d5c:	bf14      	ite	ne
 8029d5e:	2700      	movne	r7, #0
 8029d60:	2706      	moveq	r7, #6
 8029d62:	4638      	mov	r0, r7
 8029d64:	b009      	add	sp, #36	; 0x24
 8029d66:	ecbd 8b02 	vpop	{d8}
 8029d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029d6e:	463e      	mov	r6, r7
 8029d70:	4625      	mov	r5, r4
 8029d72:	2401      	movs	r4, #1
 8029d74:	e7ca      	b.n	8029d0c <__gethex+0xd4>
 8029d76:	f04f 0900 	mov.w	r9, #0
 8029d7a:	1cb1      	adds	r1, r6, #2
 8029d7c:	e7d3      	b.n	8029d26 <__gethex+0xee>
 8029d7e:	f04f 0901 	mov.w	r9, #1
 8029d82:	e7fa      	b.n	8029d7a <__gethex+0x142>
 8029d84:	230a      	movs	r3, #10
 8029d86:	fb03 0202 	mla	r2, r3, r2, r0
 8029d8a:	3a10      	subs	r2, #16
 8029d8c:	e7d4      	b.n	8029d38 <__gethex+0x100>
 8029d8e:	4631      	mov	r1, r6
 8029d90:	e7df      	b.n	8029d52 <__gethex+0x11a>
 8029d92:	1bf3      	subs	r3, r6, r7
 8029d94:	3b01      	subs	r3, #1
 8029d96:	4621      	mov	r1, r4
 8029d98:	2b07      	cmp	r3, #7
 8029d9a:	dc0b      	bgt.n	8029db4 <__gethex+0x17c>
 8029d9c:	ee18 0a10 	vmov	r0, s16
 8029da0:	f000 faf6 	bl	802a390 <_Balloc>
 8029da4:	4604      	mov	r4, r0
 8029da6:	b940      	cbnz	r0, 8029dba <__gethex+0x182>
 8029da8:	4b65      	ldr	r3, [pc, #404]	; (8029f40 <__gethex+0x308>)
 8029daa:	4602      	mov	r2, r0
 8029dac:	21de      	movs	r1, #222	; 0xde
 8029dae:	4865      	ldr	r0, [pc, #404]	; (8029f44 <__gethex+0x30c>)
 8029db0:	f7fc fe1e 	bl	80269f0 <__assert_func>
 8029db4:	3101      	adds	r1, #1
 8029db6:	105b      	asrs	r3, r3, #1
 8029db8:	e7ee      	b.n	8029d98 <__gethex+0x160>
 8029dba:	f100 0914 	add.w	r9, r0, #20
 8029dbe:	f04f 0b00 	mov.w	fp, #0
 8029dc2:	f1ca 0301 	rsb	r3, sl, #1
 8029dc6:	f8cd 9008 	str.w	r9, [sp, #8]
 8029dca:	f8cd b000 	str.w	fp, [sp]
 8029dce:	9306      	str	r3, [sp, #24]
 8029dd0:	42b7      	cmp	r7, r6
 8029dd2:	d340      	bcc.n	8029e56 <__gethex+0x21e>
 8029dd4:	9802      	ldr	r0, [sp, #8]
 8029dd6:	9b00      	ldr	r3, [sp, #0]
 8029dd8:	f840 3b04 	str.w	r3, [r0], #4
 8029ddc:	eba0 0009 	sub.w	r0, r0, r9
 8029de0:	1080      	asrs	r0, r0, #2
 8029de2:	0146      	lsls	r6, r0, #5
 8029de4:	6120      	str	r0, [r4, #16]
 8029de6:	4618      	mov	r0, r3
 8029de8:	f000 fbc8 	bl	802a57c <__hi0bits>
 8029dec:	1a30      	subs	r0, r6, r0
 8029dee:	f8d8 6000 	ldr.w	r6, [r8]
 8029df2:	42b0      	cmp	r0, r6
 8029df4:	dd63      	ble.n	8029ebe <__gethex+0x286>
 8029df6:	1b87      	subs	r7, r0, r6
 8029df8:	4639      	mov	r1, r7
 8029dfa:	4620      	mov	r0, r4
 8029dfc:	f000 ff63 	bl	802acc6 <__any_on>
 8029e00:	4682      	mov	sl, r0
 8029e02:	b1a8      	cbz	r0, 8029e30 <__gethex+0x1f8>
 8029e04:	1e7b      	subs	r3, r7, #1
 8029e06:	1159      	asrs	r1, r3, #5
 8029e08:	f003 021f 	and.w	r2, r3, #31
 8029e0c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8029e10:	f04f 0a01 	mov.w	sl, #1
 8029e14:	fa0a f202 	lsl.w	r2, sl, r2
 8029e18:	420a      	tst	r2, r1
 8029e1a:	d009      	beq.n	8029e30 <__gethex+0x1f8>
 8029e1c:	4553      	cmp	r3, sl
 8029e1e:	dd05      	ble.n	8029e2c <__gethex+0x1f4>
 8029e20:	1eb9      	subs	r1, r7, #2
 8029e22:	4620      	mov	r0, r4
 8029e24:	f000 ff4f 	bl	802acc6 <__any_on>
 8029e28:	2800      	cmp	r0, #0
 8029e2a:	d145      	bne.n	8029eb8 <__gethex+0x280>
 8029e2c:	f04f 0a02 	mov.w	sl, #2
 8029e30:	4639      	mov	r1, r7
 8029e32:	4620      	mov	r0, r4
 8029e34:	f7ff fe99 	bl	8029b6a <rshift>
 8029e38:	443d      	add	r5, r7
 8029e3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8029e3e:	42ab      	cmp	r3, r5
 8029e40:	da4c      	bge.n	8029edc <__gethex+0x2a4>
 8029e42:	ee18 0a10 	vmov	r0, s16
 8029e46:	4621      	mov	r1, r4
 8029e48:	f000 fae2 	bl	802a410 <_Bfree>
 8029e4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029e4e:	2300      	movs	r3, #0
 8029e50:	6013      	str	r3, [r2, #0]
 8029e52:	27a3      	movs	r7, #163	; 0xa3
 8029e54:	e785      	b.n	8029d62 <__gethex+0x12a>
 8029e56:	1e73      	subs	r3, r6, #1
 8029e58:	9a05      	ldr	r2, [sp, #20]
 8029e5a:	9303      	str	r3, [sp, #12]
 8029e5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8029e60:	4293      	cmp	r3, r2
 8029e62:	d019      	beq.n	8029e98 <__gethex+0x260>
 8029e64:	f1bb 0f20 	cmp.w	fp, #32
 8029e68:	d107      	bne.n	8029e7a <__gethex+0x242>
 8029e6a:	9b02      	ldr	r3, [sp, #8]
 8029e6c:	9a00      	ldr	r2, [sp, #0]
 8029e6e:	f843 2b04 	str.w	r2, [r3], #4
 8029e72:	9302      	str	r3, [sp, #8]
 8029e74:	2300      	movs	r3, #0
 8029e76:	9300      	str	r3, [sp, #0]
 8029e78:	469b      	mov	fp, r3
 8029e7a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8029e7e:	f7ff fec6 	bl	8029c0e <__hexdig_fun>
 8029e82:	9b00      	ldr	r3, [sp, #0]
 8029e84:	f000 000f 	and.w	r0, r0, #15
 8029e88:	fa00 f00b 	lsl.w	r0, r0, fp
 8029e8c:	4303      	orrs	r3, r0
 8029e8e:	9300      	str	r3, [sp, #0]
 8029e90:	f10b 0b04 	add.w	fp, fp, #4
 8029e94:	9b03      	ldr	r3, [sp, #12]
 8029e96:	e00d      	b.n	8029eb4 <__gethex+0x27c>
 8029e98:	9b03      	ldr	r3, [sp, #12]
 8029e9a:	9a06      	ldr	r2, [sp, #24]
 8029e9c:	4413      	add	r3, r2
 8029e9e:	42bb      	cmp	r3, r7
 8029ea0:	d3e0      	bcc.n	8029e64 <__gethex+0x22c>
 8029ea2:	4618      	mov	r0, r3
 8029ea4:	9901      	ldr	r1, [sp, #4]
 8029ea6:	9307      	str	r3, [sp, #28]
 8029ea8:	4652      	mov	r2, sl
 8029eaa:	f001 f908 	bl	802b0be <strncmp>
 8029eae:	9b07      	ldr	r3, [sp, #28]
 8029eb0:	2800      	cmp	r0, #0
 8029eb2:	d1d7      	bne.n	8029e64 <__gethex+0x22c>
 8029eb4:	461e      	mov	r6, r3
 8029eb6:	e78b      	b.n	8029dd0 <__gethex+0x198>
 8029eb8:	f04f 0a03 	mov.w	sl, #3
 8029ebc:	e7b8      	b.n	8029e30 <__gethex+0x1f8>
 8029ebe:	da0a      	bge.n	8029ed6 <__gethex+0x29e>
 8029ec0:	1a37      	subs	r7, r6, r0
 8029ec2:	4621      	mov	r1, r4
 8029ec4:	ee18 0a10 	vmov	r0, s16
 8029ec8:	463a      	mov	r2, r7
 8029eca:	f000 fcbd 	bl	802a848 <__lshift>
 8029ece:	1bed      	subs	r5, r5, r7
 8029ed0:	4604      	mov	r4, r0
 8029ed2:	f100 0914 	add.w	r9, r0, #20
 8029ed6:	f04f 0a00 	mov.w	sl, #0
 8029eda:	e7ae      	b.n	8029e3a <__gethex+0x202>
 8029edc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8029ee0:	42a8      	cmp	r0, r5
 8029ee2:	dd72      	ble.n	8029fca <__gethex+0x392>
 8029ee4:	1b45      	subs	r5, r0, r5
 8029ee6:	42ae      	cmp	r6, r5
 8029ee8:	dc36      	bgt.n	8029f58 <__gethex+0x320>
 8029eea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8029eee:	2b02      	cmp	r3, #2
 8029ef0:	d02a      	beq.n	8029f48 <__gethex+0x310>
 8029ef2:	2b03      	cmp	r3, #3
 8029ef4:	d02c      	beq.n	8029f50 <__gethex+0x318>
 8029ef6:	2b01      	cmp	r3, #1
 8029ef8:	d115      	bne.n	8029f26 <__gethex+0x2ee>
 8029efa:	42ae      	cmp	r6, r5
 8029efc:	d113      	bne.n	8029f26 <__gethex+0x2ee>
 8029efe:	2e01      	cmp	r6, #1
 8029f00:	d10b      	bne.n	8029f1a <__gethex+0x2e2>
 8029f02:	9a04      	ldr	r2, [sp, #16]
 8029f04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8029f08:	6013      	str	r3, [r2, #0]
 8029f0a:	2301      	movs	r3, #1
 8029f0c:	6123      	str	r3, [r4, #16]
 8029f0e:	f8c9 3000 	str.w	r3, [r9]
 8029f12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029f14:	2762      	movs	r7, #98	; 0x62
 8029f16:	601c      	str	r4, [r3, #0]
 8029f18:	e723      	b.n	8029d62 <__gethex+0x12a>
 8029f1a:	1e71      	subs	r1, r6, #1
 8029f1c:	4620      	mov	r0, r4
 8029f1e:	f000 fed2 	bl	802acc6 <__any_on>
 8029f22:	2800      	cmp	r0, #0
 8029f24:	d1ed      	bne.n	8029f02 <__gethex+0x2ca>
 8029f26:	ee18 0a10 	vmov	r0, s16
 8029f2a:	4621      	mov	r1, r4
 8029f2c:	f000 fa70 	bl	802a410 <_Bfree>
 8029f30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029f32:	2300      	movs	r3, #0
 8029f34:	6013      	str	r3, [r2, #0]
 8029f36:	2750      	movs	r7, #80	; 0x50
 8029f38:	e713      	b.n	8029d62 <__gethex+0x12a>
 8029f3a:	bf00      	nop
 8029f3c:	0802f7bc 	.word	0x0802f7bc
 8029f40:	0802f6dc 	.word	0x0802f6dc
 8029f44:	0802f750 	.word	0x0802f750
 8029f48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029f4a:	2b00      	cmp	r3, #0
 8029f4c:	d1eb      	bne.n	8029f26 <__gethex+0x2ee>
 8029f4e:	e7d8      	b.n	8029f02 <__gethex+0x2ca>
 8029f50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029f52:	2b00      	cmp	r3, #0
 8029f54:	d1d5      	bne.n	8029f02 <__gethex+0x2ca>
 8029f56:	e7e6      	b.n	8029f26 <__gethex+0x2ee>
 8029f58:	1e6f      	subs	r7, r5, #1
 8029f5a:	f1ba 0f00 	cmp.w	sl, #0
 8029f5e:	d131      	bne.n	8029fc4 <__gethex+0x38c>
 8029f60:	b127      	cbz	r7, 8029f6c <__gethex+0x334>
 8029f62:	4639      	mov	r1, r7
 8029f64:	4620      	mov	r0, r4
 8029f66:	f000 feae 	bl	802acc6 <__any_on>
 8029f6a:	4682      	mov	sl, r0
 8029f6c:	117b      	asrs	r3, r7, #5
 8029f6e:	2101      	movs	r1, #1
 8029f70:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8029f74:	f007 071f 	and.w	r7, r7, #31
 8029f78:	fa01 f707 	lsl.w	r7, r1, r7
 8029f7c:	421f      	tst	r7, r3
 8029f7e:	4629      	mov	r1, r5
 8029f80:	4620      	mov	r0, r4
 8029f82:	bf18      	it	ne
 8029f84:	f04a 0a02 	orrne.w	sl, sl, #2
 8029f88:	1b76      	subs	r6, r6, r5
 8029f8a:	f7ff fdee 	bl	8029b6a <rshift>
 8029f8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029f92:	2702      	movs	r7, #2
 8029f94:	f1ba 0f00 	cmp.w	sl, #0
 8029f98:	d048      	beq.n	802a02c <__gethex+0x3f4>
 8029f9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8029f9e:	2b02      	cmp	r3, #2
 8029fa0:	d015      	beq.n	8029fce <__gethex+0x396>
 8029fa2:	2b03      	cmp	r3, #3
 8029fa4:	d017      	beq.n	8029fd6 <__gethex+0x39e>
 8029fa6:	2b01      	cmp	r3, #1
 8029fa8:	d109      	bne.n	8029fbe <__gethex+0x386>
 8029faa:	f01a 0f02 	tst.w	sl, #2
 8029fae:	d006      	beq.n	8029fbe <__gethex+0x386>
 8029fb0:	f8d9 0000 	ldr.w	r0, [r9]
 8029fb4:	ea4a 0a00 	orr.w	sl, sl, r0
 8029fb8:	f01a 0f01 	tst.w	sl, #1
 8029fbc:	d10e      	bne.n	8029fdc <__gethex+0x3a4>
 8029fbe:	f047 0710 	orr.w	r7, r7, #16
 8029fc2:	e033      	b.n	802a02c <__gethex+0x3f4>
 8029fc4:	f04f 0a01 	mov.w	sl, #1
 8029fc8:	e7d0      	b.n	8029f6c <__gethex+0x334>
 8029fca:	2701      	movs	r7, #1
 8029fcc:	e7e2      	b.n	8029f94 <__gethex+0x35c>
 8029fce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029fd0:	f1c3 0301 	rsb	r3, r3, #1
 8029fd4:	9315      	str	r3, [sp, #84]	; 0x54
 8029fd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029fd8:	2b00      	cmp	r3, #0
 8029fda:	d0f0      	beq.n	8029fbe <__gethex+0x386>
 8029fdc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8029fe0:	f104 0314 	add.w	r3, r4, #20
 8029fe4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8029fe8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8029fec:	f04f 0c00 	mov.w	ip, #0
 8029ff0:	4618      	mov	r0, r3
 8029ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8029ff6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8029ffa:	d01c      	beq.n	802a036 <__gethex+0x3fe>
 8029ffc:	3201      	adds	r2, #1
 8029ffe:	6002      	str	r2, [r0, #0]
 802a000:	2f02      	cmp	r7, #2
 802a002:	f104 0314 	add.w	r3, r4, #20
 802a006:	d13f      	bne.n	802a088 <__gethex+0x450>
 802a008:	f8d8 2000 	ldr.w	r2, [r8]
 802a00c:	3a01      	subs	r2, #1
 802a00e:	42b2      	cmp	r2, r6
 802a010:	d10a      	bne.n	802a028 <__gethex+0x3f0>
 802a012:	1171      	asrs	r1, r6, #5
 802a014:	2201      	movs	r2, #1
 802a016:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802a01a:	f006 061f 	and.w	r6, r6, #31
 802a01e:	fa02 f606 	lsl.w	r6, r2, r6
 802a022:	421e      	tst	r6, r3
 802a024:	bf18      	it	ne
 802a026:	4617      	movne	r7, r2
 802a028:	f047 0720 	orr.w	r7, r7, #32
 802a02c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802a02e:	601c      	str	r4, [r3, #0]
 802a030:	9b04      	ldr	r3, [sp, #16]
 802a032:	601d      	str	r5, [r3, #0]
 802a034:	e695      	b.n	8029d62 <__gethex+0x12a>
 802a036:	4299      	cmp	r1, r3
 802a038:	f843 cc04 	str.w	ip, [r3, #-4]
 802a03c:	d8d8      	bhi.n	8029ff0 <__gethex+0x3b8>
 802a03e:	68a3      	ldr	r3, [r4, #8]
 802a040:	459b      	cmp	fp, r3
 802a042:	db19      	blt.n	802a078 <__gethex+0x440>
 802a044:	6861      	ldr	r1, [r4, #4]
 802a046:	ee18 0a10 	vmov	r0, s16
 802a04a:	3101      	adds	r1, #1
 802a04c:	f000 f9a0 	bl	802a390 <_Balloc>
 802a050:	4681      	mov	r9, r0
 802a052:	b918      	cbnz	r0, 802a05c <__gethex+0x424>
 802a054:	4b1a      	ldr	r3, [pc, #104]	; (802a0c0 <__gethex+0x488>)
 802a056:	4602      	mov	r2, r0
 802a058:	2184      	movs	r1, #132	; 0x84
 802a05a:	e6a8      	b.n	8029dae <__gethex+0x176>
 802a05c:	6922      	ldr	r2, [r4, #16]
 802a05e:	3202      	adds	r2, #2
 802a060:	f104 010c 	add.w	r1, r4, #12
 802a064:	0092      	lsls	r2, r2, #2
 802a066:	300c      	adds	r0, #12
 802a068:	f7fc fd40 	bl	8026aec <memcpy>
 802a06c:	4621      	mov	r1, r4
 802a06e:	ee18 0a10 	vmov	r0, s16
 802a072:	f000 f9cd 	bl	802a410 <_Bfree>
 802a076:	464c      	mov	r4, r9
 802a078:	6923      	ldr	r3, [r4, #16]
 802a07a:	1c5a      	adds	r2, r3, #1
 802a07c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802a080:	6122      	str	r2, [r4, #16]
 802a082:	2201      	movs	r2, #1
 802a084:	615a      	str	r2, [r3, #20]
 802a086:	e7bb      	b.n	802a000 <__gethex+0x3c8>
 802a088:	6922      	ldr	r2, [r4, #16]
 802a08a:	455a      	cmp	r2, fp
 802a08c:	dd0b      	ble.n	802a0a6 <__gethex+0x46e>
 802a08e:	2101      	movs	r1, #1
 802a090:	4620      	mov	r0, r4
 802a092:	f7ff fd6a 	bl	8029b6a <rshift>
 802a096:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802a09a:	3501      	adds	r5, #1
 802a09c:	42ab      	cmp	r3, r5
 802a09e:	f6ff aed0 	blt.w	8029e42 <__gethex+0x20a>
 802a0a2:	2701      	movs	r7, #1
 802a0a4:	e7c0      	b.n	802a028 <__gethex+0x3f0>
 802a0a6:	f016 061f 	ands.w	r6, r6, #31
 802a0aa:	d0fa      	beq.n	802a0a2 <__gethex+0x46a>
 802a0ac:	449a      	add	sl, r3
 802a0ae:	f1c6 0620 	rsb	r6, r6, #32
 802a0b2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 802a0b6:	f000 fa61 	bl	802a57c <__hi0bits>
 802a0ba:	42b0      	cmp	r0, r6
 802a0bc:	dbe7      	blt.n	802a08e <__gethex+0x456>
 802a0be:	e7f0      	b.n	802a0a2 <__gethex+0x46a>
 802a0c0:	0802f6dc 	.word	0x0802f6dc

0802a0c4 <L_shift>:
 802a0c4:	f1c2 0208 	rsb	r2, r2, #8
 802a0c8:	0092      	lsls	r2, r2, #2
 802a0ca:	b570      	push	{r4, r5, r6, lr}
 802a0cc:	f1c2 0620 	rsb	r6, r2, #32
 802a0d0:	6843      	ldr	r3, [r0, #4]
 802a0d2:	6804      	ldr	r4, [r0, #0]
 802a0d4:	fa03 f506 	lsl.w	r5, r3, r6
 802a0d8:	432c      	orrs	r4, r5
 802a0da:	40d3      	lsrs	r3, r2
 802a0dc:	6004      	str	r4, [r0, #0]
 802a0de:	f840 3f04 	str.w	r3, [r0, #4]!
 802a0e2:	4288      	cmp	r0, r1
 802a0e4:	d3f4      	bcc.n	802a0d0 <L_shift+0xc>
 802a0e6:	bd70      	pop	{r4, r5, r6, pc}

0802a0e8 <__match>:
 802a0e8:	b530      	push	{r4, r5, lr}
 802a0ea:	6803      	ldr	r3, [r0, #0]
 802a0ec:	3301      	adds	r3, #1
 802a0ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a0f2:	b914      	cbnz	r4, 802a0fa <__match+0x12>
 802a0f4:	6003      	str	r3, [r0, #0]
 802a0f6:	2001      	movs	r0, #1
 802a0f8:	bd30      	pop	{r4, r5, pc}
 802a0fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a0fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802a102:	2d19      	cmp	r5, #25
 802a104:	bf98      	it	ls
 802a106:	3220      	addls	r2, #32
 802a108:	42a2      	cmp	r2, r4
 802a10a:	d0f0      	beq.n	802a0ee <__match+0x6>
 802a10c:	2000      	movs	r0, #0
 802a10e:	e7f3      	b.n	802a0f8 <__match+0x10>

0802a110 <__hexnan>:
 802a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a114:	680b      	ldr	r3, [r1, #0]
 802a116:	6801      	ldr	r1, [r0, #0]
 802a118:	115e      	asrs	r6, r3, #5
 802a11a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802a11e:	f013 031f 	ands.w	r3, r3, #31
 802a122:	b087      	sub	sp, #28
 802a124:	bf18      	it	ne
 802a126:	3604      	addne	r6, #4
 802a128:	2500      	movs	r5, #0
 802a12a:	1f37      	subs	r7, r6, #4
 802a12c:	4682      	mov	sl, r0
 802a12e:	4690      	mov	r8, r2
 802a130:	9301      	str	r3, [sp, #4]
 802a132:	f846 5c04 	str.w	r5, [r6, #-4]
 802a136:	46b9      	mov	r9, r7
 802a138:	463c      	mov	r4, r7
 802a13a:	9502      	str	r5, [sp, #8]
 802a13c:	46ab      	mov	fp, r5
 802a13e:	784a      	ldrb	r2, [r1, #1]
 802a140:	1c4b      	adds	r3, r1, #1
 802a142:	9303      	str	r3, [sp, #12]
 802a144:	b342      	cbz	r2, 802a198 <__hexnan+0x88>
 802a146:	4610      	mov	r0, r2
 802a148:	9105      	str	r1, [sp, #20]
 802a14a:	9204      	str	r2, [sp, #16]
 802a14c:	f7ff fd5f 	bl	8029c0e <__hexdig_fun>
 802a150:	2800      	cmp	r0, #0
 802a152:	d14f      	bne.n	802a1f4 <__hexnan+0xe4>
 802a154:	9a04      	ldr	r2, [sp, #16]
 802a156:	9905      	ldr	r1, [sp, #20]
 802a158:	2a20      	cmp	r2, #32
 802a15a:	d818      	bhi.n	802a18e <__hexnan+0x7e>
 802a15c:	9b02      	ldr	r3, [sp, #8]
 802a15e:	459b      	cmp	fp, r3
 802a160:	dd13      	ble.n	802a18a <__hexnan+0x7a>
 802a162:	454c      	cmp	r4, r9
 802a164:	d206      	bcs.n	802a174 <__hexnan+0x64>
 802a166:	2d07      	cmp	r5, #7
 802a168:	dc04      	bgt.n	802a174 <__hexnan+0x64>
 802a16a:	462a      	mov	r2, r5
 802a16c:	4649      	mov	r1, r9
 802a16e:	4620      	mov	r0, r4
 802a170:	f7ff ffa8 	bl	802a0c4 <L_shift>
 802a174:	4544      	cmp	r4, r8
 802a176:	d950      	bls.n	802a21a <__hexnan+0x10a>
 802a178:	2300      	movs	r3, #0
 802a17a:	f1a4 0904 	sub.w	r9, r4, #4
 802a17e:	f844 3c04 	str.w	r3, [r4, #-4]
 802a182:	f8cd b008 	str.w	fp, [sp, #8]
 802a186:	464c      	mov	r4, r9
 802a188:	461d      	mov	r5, r3
 802a18a:	9903      	ldr	r1, [sp, #12]
 802a18c:	e7d7      	b.n	802a13e <__hexnan+0x2e>
 802a18e:	2a29      	cmp	r2, #41	; 0x29
 802a190:	d156      	bne.n	802a240 <__hexnan+0x130>
 802a192:	3102      	adds	r1, #2
 802a194:	f8ca 1000 	str.w	r1, [sl]
 802a198:	f1bb 0f00 	cmp.w	fp, #0
 802a19c:	d050      	beq.n	802a240 <__hexnan+0x130>
 802a19e:	454c      	cmp	r4, r9
 802a1a0:	d206      	bcs.n	802a1b0 <__hexnan+0xa0>
 802a1a2:	2d07      	cmp	r5, #7
 802a1a4:	dc04      	bgt.n	802a1b0 <__hexnan+0xa0>
 802a1a6:	462a      	mov	r2, r5
 802a1a8:	4649      	mov	r1, r9
 802a1aa:	4620      	mov	r0, r4
 802a1ac:	f7ff ff8a 	bl	802a0c4 <L_shift>
 802a1b0:	4544      	cmp	r4, r8
 802a1b2:	d934      	bls.n	802a21e <__hexnan+0x10e>
 802a1b4:	f1a8 0204 	sub.w	r2, r8, #4
 802a1b8:	4623      	mov	r3, r4
 802a1ba:	f853 1b04 	ldr.w	r1, [r3], #4
 802a1be:	f842 1f04 	str.w	r1, [r2, #4]!
 802a1c2:	429f      	cmp	r7, r3
 802a1c4:	d2f9      	bcs.n	802a1ba <__hexnan+0xaa>
 802a1c6:	1b3b      	subs	r3, r7, r4
 802a1c8:	f023 0303 	bic.w	r3, r3, #3
 802a1cc:	3304      	adds	r3, #4
 802a1ce:	3401      	adds	r4, #1
 802a1d0:	3e03      	subs	r6, #3
 802a1d2:	42b4      	cmp	r4, r6
 802a1d4:	bf88      	it	hi
 802a1d6:	2304      	movhi	r3, #4
 802a1d8:	4443      	add	r3, r8
 802a1da:	2200      	movs	r2, #0
 802a1dc:	f843 2b04 	str.w	r2, [r3], #4
 802a1e0:	429f      	cmp	r7, r3
 802a1e2:	d2fb      	bcs.n	802a1dc <__hexnan+0xcc>
 802a1e4:	683b      	ldr	r3, [r7, #0]
 802a1e6:	b91b      	cbnz	r3, 802a1f0 <__hexnan+0xe0>
 802a1e8:	4547      	cmp	r7, r8
 802a1ea:	d127      	bne.n	802a23c <__hexnan+0x12c>
 802a1ec:	2301      	movs	r3, #1
 802a1ee:	603b      	str	r3, [r7, #0]
 802a1f0:	2005      	movs	r0, #5
 802a1f2:	e026      	b.n	802a242 <__hexnan+0x132>
 802a1f4:	3501      	adds	r5, #1
 802a1f6:	2d08      	cmp	r5, #8
 802a1f8:	f10b 0b01 	add.w	fp, fp, #1
 802a1fc:	dd06      	ble.n	802a20c <__hexnan+0xfc>
 802a1fe:	4544      	cmp	r4, r8
 802a200:	d9c3      	bls.n	802a18a <__hexnan+0x7a>
 802a202:	2300      	movs	r3, #0
 802a204:	f844 3c04 	str.w	r3, [r4, #-4]
 802a208:	2501      	movs	r5, #1
 802a20a:	3c04      	subs	r4, #4
 802a20c:	6822      	ldr	r2, [r4, #0]
 802a20e:	f000 000f 	and.w	r0, r0, #15
 802a212:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 802a216:	6022      	str	r2, [r4, #0]
 802a218:	e7b7      	b.n	802a18a <__hexnan+0x7a>
 802a21a:	2508      	movs	r5, #8
 802a21c:	e7b5      	b.n	802a18a <__hexnan+0x7a>
 802a21e:	9b01      	ldr	r3, [sp, #4]
 802a220:	2b00      	cmp	r3, #0
 802a222:	d0df      	beq.n	802a1e4 <__hexnan+0xd4>
 802a224:	f04f 32ff 	mov.w	r2, #4294967295
 802a228:	f1c3 0320 	rsb	r3, r3, #32
 802a22c:	fa22 f303 	lsr.w	r3, r2, r3
 802a230:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802a234:	401a      	ands	r2, r3
 802a236:	f846 2c04 	str.w	r2, [r6, #-4]
 802a23a:	e7d3      	b.n	802a1e4 <__hexnan+0xd4>
 802a23c:	3f04      	subs	r7, #4
 802a23e:	e7d1      	b.n	802a1e4 <__hexnan+0xd4>
 802a240:	2004      	movs	r0, #4
 802a242:	b007      	add	sp, #28
 802a244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a248 <_localeconv_r>:
 802a248:	4800      	ldr	r0, [pc, #0]	; (802a24c <_localeconv_r+0x4>)
 802a24a:	4770      	bx	lr
 802a24c:	200001d8 	.word	0x200001d8

0802a250 <__retarget_lock_init_recursive>:
 802a250:	4770      	bx	lr

0802a252 <__retarget_lock_acquire_recursive>:
 802a252:	4770      	bx	lr

0802a254 <__retarget_lock_release>:
 802a254:	4770      	bx	lr

0802a256 <__retarget_lock_release_recursive>:
 802a256:	4770      	bx	lr

0802a258 <__swhatbuf_r>:
 802a258:	b570      	push	{r4, r5, r6, lr}
 802a25a:	460e      	mov	r6, r1
 802a25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a260:	2900      	cmp	r1, #0
 802a262:	b096      	sub	sp, #88	; 0x58
 802a264:	4614      	mov	r4, r2
 802a266:	461d      	mov	r5, r3
 802a268:	da07      	bge.n	802a27a <__swhatbuf_r+0x22>
 802a26a:	2300      	movs	r3, #0
 802a26c:	602b      	str	r3, [r5, #0]
 802a26e:	89b3      	ldrh	r3, [r6, #12]
 802a270:	061a      	lsls	r2, r3, #24
 802a272:	d410      	bmi.n	802a296 <__swhatbuf_r+0x3e>
 802a274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a278:	e00e      	b.n	802a298 <__swhatbuf_r+0x40>
 802a27a:	466a      	mov	r2, sp
 802a27c:	f000 ff60 	bl	802b140 <_fstat_r>
 802a280:	2800      	cmp	r0, #0
 802a282:	dbf2      	blt.n	802a26a <__swhatbuf_r+0x12>
 802a284:	9a01      	ldr	r2, [sp, #4]
 802a286:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802a28a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802a28e:	425a      	negs	r2, r3
 802a290:	415a      	adcs	r2, r3
 802a292:	602a      	str	r2, [r5, #0]
 802a294:	e7ee      	b.n	802a274 <__swhatbuf_r+0x1c>
 802a296:	2340      	movs	r3, #64	; 0x40
 802a298:	2000      	movs	r0, #0
 802a29a:	6023      	str	r3, [r4, #0]
 802a29c:	b016      	add	sp, #88	; 0x58
 802a29e:	bd70      	pop	{r4, r5, r6, pc}

0802a2a0 <__smakebuf_r>:
 802a2a0:	898b      	ldrh	r3, [r1, #12]
 802a2a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a2a4:	079d      	lsls	r5, r3, #30
 802a2a6:	4606      	mov	r6, r0
 802a2a8:	460c      	mov	r4, r1
 802a2aa:	d507      	bpl.n	802a2bc <__smakebuf_r+0x1c>
 802a2ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802a2b0:	6023      	str	r3, [r4, #0]
 802a2b2:	6123      	str	r3, [r4, #16]
 802a2b4:	2301      	movs	r3, #1
 802a2b6:	6163      	str	r3, [r4, #20]
 802a2b8:	b002      	add	sp, #8
 802a2ba:	bd70      	pop	{r4, r5, r6, pc}
 802a2bc:	ab01      	add	r3, sp, #4
 802a2be:	466a      	mov	r2, sp
 802a2c0:	f7ff ffca 	bl	802a258 <__swhatbuf_r>
 802a2c4:	9900      	ldr	r1, [sp, #0]
 802a2c6:	4605      	mov	r5, r0
 802a2c8:	4630      	mov	r0, r6
 802a2ca:	f7fc fc75 	bl	8026bb8 <_malloc_r>
 802a2ce:	b948      	cbnz	r0, 802a2e4 <__smakebuf_r+0x44>
 802a2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a2d4:	059a      	lsls	r2, r3, #22
 802a2d6:	d4ef      	bmi.n	802a2b8 <__smakebuf_r+0x18>
 802a2d8:	f023 0303 	bic.w	r3, r3, #3
 802a2dc:	f043 0302 	orr.w	r3, r3, #2
 802a2e0:	81a3      	strh	r3, [r4, #12]
 802a2e2:	e7e3      	b.n	802a2ac <__smakebuf_r+0xc>
 802a2e4:	4b0d      	ldr	r3, [pc, #52]	; (802a31c <__smakebuf_r+0x7c>)
 802a2e6:	62b3      	str	r3, [r6, #40]	; 0x28
 802a2e8:	89a3      	ldrh	r3, [r4, #12]
 802a2ea:	6020      	str	r0, [r4, #0]
 802a2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a2f0:	81a3      	strh	r3, [r4, #12]
 802a2f2:	9b00      	ldr	r3, [sp, #0]
 802a2f4:	6163      	str	r3, [r4, #20]
 802a2f6:	9b01      	ldr	r3, [sp, #4]
 802a2f8:	6120      	str	r0, [r4, #16]
 802a2fa:	b15b      	cbz	r3, 802a314 <__smakebuf_r+0x74>
 802a2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a300:	4630      	mov	r0, r6
 802a302:	f000 ff2f 	bl	802b164 <_isatty_r>
 802a306:	b128      	cbz	r0, 802a314 <__smakebuf_r+0x74>
 802a308:	89a3      	ldrh	r3, [r4, #12]
 802a30a:	f023 0303 	bic.w	r3, r3, #3
 802a30e:	f043 0301 	orr.w	r3, r3, #1
 802a312:	81a3      	strh	r3, [r4, #12]
 802a314:	89a0      	ldrh	r0, [r4, #12]
 802a316:	4305      	orrs	r5, r0
 802a318:	81a5      	strh	r5, [r4, #12]
 802a31a:	e7cd      	b.n	802a2b8 <__smakebuf_r+0x18>
 802a31c:	080299c9 	.word	0x080299c9

0802a320 <__ascii_mbtowc>:
 802a320:	b082      	sub	sp, #8
 802a322:	b901      	cbnz	r1, 802a326 <__ascii_mbtowc+0x6>
 802a324:	a901      	add	r1, sp, #4
 802a326:	b142      	cbz	r2, 802a33a <__ascii_mbtowc+0x1a>
 802a328:	b14b      	cbz	r3, 802a33e <__ascii_mbtowc+0x1e>
 802a32a:	7813      	ldrb	r3, [r2, #0]
 802a32c:	600b      	str	r3, [r1, #0]
 802a32e:	7812      	ldrb	r2, [r2, #0]
 802a330:	1e10      	subs	r0, r2, #0
 802a332:	bf18      	it	ne
 802a334:	2001      	movne	r0, #1
 802a336:	b002      	add	sp, #8
 802a338:	4770      	bx	lr
 802a33a:	4610      	mov	r0, r2
 802a33c:	e7fb      	b.n	802a336 <__ascii_mbtowc+0x16>
 802a33e:	f06f 0001 	mvn.w	r0, #1
 802a342:	e7f8      	b.n	802a336 <__ascii_mbtowc+0x16>

0802a344 <memmove>:
 802a344:	4288      	cmp	r0, r1
 802a346:	b510      	push	{r4, lr}
 802a348:	eb01 0402 	add.w	r4, r1, r2
 802a34c:	d902      	bls.n	802a354 <memmove+0x10>
 802a34e:	4284      	cmp	r4, r0
 802a350:	4623      	mov	r3, r4
 802a352:	d807      	bhi.n	802a364 <memmove+0x20>
 802a354:	1e43      	subs	r3, r0, #1
 802a356:	42a1      	cmp	r1, r4
 802a358:	d008      	beq.n	802a36c <memmove+0x28>
 802a35a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802a35e:	f803 2f01 	strb.w	r2, [r3, #1]!
 802a362:	e7f8      	b.n	802a356 <memmove+0x12>
 802a364:	4402      	add	r2, r0
 802a366:	4601      	mov	r1, r0
 802a368:	428a      	cmp	r2, r1
 802a36a:	d100      	bne.n	802a36e <memmove+0x2a>
 802a36c:	bd10      	pop	{r4, pc}
 802a36e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802a372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802a376:	e7f7      	b.n	802a368 <memmove+0x24>

0802a378 <__malloc_lock>:
 802a378:	4801      	ldr	r0, [pc, #4]	; (802a380 <__malloc_lock+0x8>)
 802a37a:	f7ff bf6a 	b.w	802a252 <__retarget_lock_acquire_recursive>
 802a37e:	bf00      	nop
 802a380:	200571d0 	.word	0x200571d0

0802a384 <__malloc_unlock>:
 802a384:	4801      	ldr	r0, [pc, #4]	; (802a38c <__malloc_unlock+0x8>)
 802a386:	f7ff bf66 	b.w	802a256 <__retarget_lock_release_recursive>
 802a38a:	bf00      	nop
 802a38c:	200571d0 	.word	0x200571d0

0802a390 <_Balloc>:
 802a390:	b570      	push	{r4, r5, r6, lr}
 802a392:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802a394:	4604      	mov	r4, r0
 802a396:	460d      	mov	r5, r1
 802a398:	b976      	cbnz	r6, 802a3b8 <_Balloc+0x28>
 802a39a:	2010      	movs	r0, #16
 802a39c:	f7fc fb96 	bl	8026acc <malloc>
 802a3a0:	4602      	mov	r2, r0
 802a3a2:	6260      	str	r0, [r4, #36]	; 0x24
 802a3a4:	b920      	cbnz	r0, 802a3b0 <_Balloc+0x20>
 802a3a6:	4b18      	ldr	r3, [pc, #96]	; (802a408 <_Balloc+0x78>)
 802a3a8:	4818      	ldr	r0, [pc, #96]	; (802a40c <_Balloc+0x7c>)
 802a3aa:	2166      	movs	r1, #102	; 0x66
 802a3ac:	f7fc fb20 	bl	80269f0 <__assert_func>
 802a3b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802a3b4:	6006      	str	r6, [r0, #0]
 802a3b6:	60c6      	str	r6, [r0, #12]
 802a3b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802a3ba:	68f3      	ldr	r3, [r6, #12]
 802a3bc:	b183      	cbz	r3, 802a3e0 <_Balloc+0x50>
 802a3be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802a3c0:	68db      	ldr	r3, [r3, #12]
 802a3c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802a3c6:	b9b8      	cbnz	r0, 802a3f8 <_Balloc+0x68>
 802a3c8:	2101      	movs	r1, #1
 802a3ca:	fa01 f605 	lsl.w	r6, r1, r5
 802a3ce:	1d72      	adds	r2, r6, #5
 802a3d0:	0092      	lsls	r2, r2, #2
 802a3d2:	4620      	mov	r0, r4
 802a3d4:	f000 fc98 	bl	802ad08 <_calloc_r>
 802a3d8:	b160      	cbz	r0, 802a3f4 <_Balloc+0x64>
 802a3da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802a3de:	e00e      	b.n	802a3fe <_Balloc+0x6e>
 802a3e0:	2221      	movs	r2, #33	; 0x21
 802a3e2:	2104      	movs	r1, #4
 802a3e4:	4620      	mov	r0, r4
 802a3e6:	f000 fc8f 	bl	802ad08 <_calloc_r>
 802a3ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802a3ec:	60f0      	str	r0, [r6, #12]
 802a3ee:	68db      	ldr	r3, [r3, #12]
 802a3f0:	2b00      	cmp	r3, #0
 802a3f2:	d1e4      	bne.n	802a3be <_Balloc+0x2e>
 802a3f4:	2000      	movs	r0, #0
 802a3f6:	bd70      	pop	{r4, r5, r6, pc}
 802a3f8:	6802      	ldr	r2, [r0, #0]
 802a3fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802a3fe:	2300      	movs	r3, #0
 802a400:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802a404:	e7f7      	b.n	802a3f6 <_Balloc+0x66>
 802a406:	bf00      	nop
 802a408:	0802f666 	.word	0x0802f666
 802a40c:	0802f7d0 	.word	0x0802f7d0

0802a410 <_Bfree>:
 802a410:	b570      	push	{r4, r5, r6, lr}
 802a412:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802a414:	4605      	mov	r5, r0
 802a416:	460c      	mov	r4, r1
 802a418:	b976      	cbnz	r6, 802a438 <_Bfree+0x28>
 802a41a:	2010      	movs	r0, #16
 802a41c:	f7fc fb56 	bl	8026acc <malloc>
 802a420:	4602      	mov	r2, r0
 802a422:	6268      	str	r0, [r5, #36]	; 0x24
 802a424:	b920      	cbnz	r0, 802a430 <_Bfree+0x20>
 802a426:	4b09      	ldr	r3, [pc, #36]	; (802a44c <_Bfree+0x3c>)
 802a428:	4809      	ldr	r0, [pc, #36]	; (802a450 <_Bfree+0x40>)
 802a42a:	218a      	movs	r1, #138	; 0x8a
 802a42c:	f7fc fae0 	bl	80269f0 <__assert_func>
 802a430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802a434:	6006      	str	r6, [r0, #0]
 802a436:	60c6      	str	r6, [r0, #12]
 802a438:	b13c      	cbz	r4, 802a44a <_Bfree+0x3a>
 802a43a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802a43c:	6862      	ldr	r2, [r4, #4]
 802a43e:	68db      	ldr	r3, [r3, #12]
 802a440:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802a444:	6021      	str	r1, [r4, #0]
 802a446:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802a44a:	bd70      	pop	{r4, r5, r6, pc}
 802a44c:	0802f666 	.word	0x0802f666
 802a450:	0802f7d0 	.word	0x0802f7d0

0802a454 <__multadd>:
 802a454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a458:	690e      	ldr	r6, [r1, #16]
 802a45a:	4607      	mov	r7, r0
 802a45c:	4698      	mov	r8, r3
 802a45e:	460c      	mov	r4, r1
 802a460:	f101 0014 	add.w	r0, r1, #20
 802a464:	2300      	movs	r3, #0
 802a466:	6805      	ldr	r5, [r0, #0]
 802a468:	b2a9      	uxth	r1, r5
 802a46a:	fb02 8101 	mla	r1, r2, r1, r8
 802a46e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802a472:	0c2d      	lsrs	r5, r5, #16
 802a474:	fb02 c505 	mla	r5, r2, r5, ip
 802a478:	b289      	uxth	r1, r1
 802a47a:	3301      	adds	r3, #1
 802a47c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 802a480:	429e      	cmp	r6, r3
 802a482:	f840 1b04 	str.w	r1, [r0], #4
 802a486:	ea4f 4815 	mov.w	r8, r5, lsr #16
 802a48a:	dcec      	bgt.n	802a466 <__multadd+0x12>
 802a48c:	f1b8 0f00 	cmp.w	r8, #0
 802a490:	d022      	beq.n	802a4d8 <__multadd+0x84>
 802a492:	68a3      	ldr	r3, [r4, #8]
 802a494:	42b3      	cmp	r3, r6
 802a496:	dc19      	bgt.n	802a4cc <__multadd+0x78>
 802a498:	6861      	ldr	r1, [r4, #4]
 802a49a:	4638      	mov	r0, r7
 802a49c:	3101      	adds	r1, #1
 802a49e:	f7ff ff77 	bl	802a390 <_Balloc>
 802a4a2:	4605      	mov	r5, r0
 802a4a4:	b928      	cbnz	r0, 802a4b2 <__multadd+0x5e>
 802a4a6:	4602      	mov	r2, r0
 802a4a8:	4b0d      	ldr	r3, [pc, #52]	; (802a4e0 <__multadd+0x8c>)
 802a4aa:	480e      	ldr	r0, [pc, #56]	; (802a4e4 <__multadd+0x90>)
 802a4ac:	21b5      	movs	r1, #181	; 0xb5
 802a4ae:	f7fc fa9f 	bl	80269f0 <__assert_func>
 802a4b2:	6922      	ldr	r2, [r4, #16]
 802a4b4:	3202      	adds	r2, #2
 802a4b6:	f104 010c 	add.w	r1, r4, #12
 802a4ba:	0092      	lsls	r2, r2, #2
 802a4bc:	300c      	adds	r0, #12
 802a4be:	f7fc fb15 	bl	8026aec <memcpy>
 802a4c2:	4621      	mov	r1, r4
 802a4c4:	4638      	mov	r0, r7
 802a4c6:	f7ff ffa3 	bl	802a410 <_Bfree>
 802a4ca:	462c      	mov	r4, r5
 802a4cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802a4d0:	3601      	adds	r6, #1
 802a4d2:	f8c3 8014 	str.w	r8, [r3, #20]
 802a4d6:	6126      	str	r6, [r4, #16]
 802a4d8:	4620      	mov	r0, r4
 802a4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a4de:	bf00      	nop
 802a4e0:	0802f6dc 	.word	0x0802f6dc
 802a4e4:	0802f7d0 	.word	0x0802f7d0

0802a4e8 <__s2b>:
 802a4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a4ec:	460c      	mov	r4, r1
 802a4ee:	4615      	mov	r5, r2
 802a4f0:	461f      	mov	r7, r3
 802a4f2:	2209      	movs	r2, #9
 802a4f4:	3308      	adds	r3, #8
 802a4f6:	4606      	mov	r6, r0
 802a4f8:	fb93 f3f2 	sdiv	r3, r3, r2
 802a4fc:	2100      	movs	r1, #0
 802a4fe:	2201      	movs	r2, #1
 802a500:	429a      	cmp	r2, r3
 802a502:	db09      	blt.n	802a518 <__s2b+0x30>
 802a504:	4630      	mov	r0, r6
 802a506:	f7ff ff43 	bl	802a390 <_Balloc>
 802a50a:	b940      	cbnz	r0, 802a51e <__s2b+0x36>
 802a50c:	4602      	mov	r2, r0
 802a50e:	4b19      	ldr	r3, [pc, #100]	; (802a574 <__s2b+0x8c>)
 802a510:	4819      	ldr	r0, [pc, #100]	; (802a578 <__s2b+0x90>)
 802a512:	21ce      	movs	r1, #206	; 0xce
 802a514:	f7fc fa6c 	bl	80269f0 <__assert_func>
 802a518:	0052      	lsls	r2, r2, #1
 802a51a:	3101      	adds	r1, #1
 802a51c:	e7f0      	b.n	802a500 <__s2b+0x18>
 802a51e:	9b08      	ldr	r3, [sp, #32]
 802a520:	6143      	str	r3, [r0, #20]
 802a522:	2d09      	cmp	r5, #9
 802a524:	f04f 0301 	mov.w	r3, #1
 802a528:	6103      	str	r3, [r0, #16]
 802a52a:	dd16      	ble.n	802a55a <__s2b+0x72>
 802a52c:	f104 0909 	add.w	r9, r4, #9
 802a530:	46c8      	mov	r8, r9
 802a532:	442c      	add	r4, r5
 802a534:	f818 3b01 	ldrb.w	r3, [r8], #1
 802a538:	4601      	mov	r1, r0
 802a53a:	3b30      	subs	r3, #48	; 0x30
 802a53c:	220a      	movs	r2, #10
 802a53e:	4630      	mov	r0, r6
 802a540:	f7ff ff88 	bl	802a454 <__multadd>
 802a544:	45a0      	cmp	r8, r4
 802a546:	d1f5      	bne.n	802a534 <__s2b+0x4c>
 802a548:	f1a5 0408 	sub.w	r4, r5, #8
 802a54c:	444c      	add	r4, r9
 802a54e:	1b2d      	subs	r5, r5, r4
 802a550:	1963      	adds	r3, r4, r5
 802a552:	42bb      	cmp	r3, r7
 802a554:	db04      	blt.n	802a560 <__s2b+0x78>
 802a556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a55a:	340a      	adds	r4, #10
 802a55c:	2509      	movs	r5, #9
 802a55e:	e7f6      	b.n	802a54e <__s2b+0x66>
 802a560:	f814 3b01 	ldrb.w	r3, [r4], #1
 802a564:	4601      	mov	r1, r0
 802a566:	3b30      	subs	r3, #48	; 0x30
 802a568:	220a      	movs	r2, #10
 802a56a:	4630      	mov	r0, r6
 802a56c:	f7ff ff72 	bl	802a454 <__multadd>
 802a570:	e7ee      	b.n	802a550 <__s2b+0x68>
 802a572:	bf00      	nop
 802a574:	0802f6dc 	.word	0x0802f6dc
 802a578:	0802f7d0 	.word	0x0802f7d0

0802a57c <__hi0bits>:
 802a57c:	0c03      	lsrs	r3, r0, #16
 802a57e:	041b      	lsls	r3, r3, #16
 802a580:	b9d3      	cbnz	r3, 802a5b8 <__hi0bits+0x3c>
 802a582:	0400      	lsls	r0, r0, #16
 802a584:	2310      	movs	r3, #16
 802a586:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802a58a:	bf04      	itt	eq
 802a58c:	0200      	lsleq	r0, r0, #8
 802a58e:	3308      	addeq	r3, #8
 802a590:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802a594:	bf04      	itt	eq
 802a596:	0100      	lsleq	r0, r0, #4
 802a598:	3304      	addeq	r3, #4
 802a59a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802a59e:	bf04      	itt	eq
 802a5a0:	0080      	lsleq	r0, r0, #2
 802a5a2:	3302      	addeq	r3, #2
 802a5a4:	2800      	cmp	r0, #0
 802a5a6:	db05      	blt.n	802a5b4 <__hi0bits+0x38>
 802a5a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802a5ac:	f103 0301 	add.w	r3, r3, #1
 802a5b0:	bf08      	it	eq
 802a5b2:	2320      	moveq	r3, #32
 802a5b4:	4618      	mov	r0, r3
 802a5b6:	4770      	bx	lr
 802a5b8:	2300      	movs	r3, #0
 802a5ba:	e7e4      	b.n	802a586 <__hi0bits+0xa>

0802a5bc <__lo0bits>:
 802a5bc:	6803      	ldr	r3, [r0, #0]
 802a5be:	f013 0207 	ands.w	r2, r3, #7
 802a5c2:	4601      	mov	r1, r0
 802a5c4:	d00b      	beq.n	802a5de <__lo0bits+0x22>
 802a5c6:	07da      	lsls	r2, r3, #31
 802a5c8:	d424      	bmi.n	802a614 <__lo0bits+0x58>
 802a5ca:	0798      	lsls	r0, r3, #30
 802a5cc:	bf49      	itett	mi
 802a5ce:	085b      	lsrmi	r3, r3, #1
 802a5d0:	089b      	lsrpl	r3, r3, #2
 802a5d2:	2001      	movmi	r0, #1
 802a5d4:	600b      	strmi	r3, [r1, #0]
 802a5d6:	bf5c      	itt	pl
 802a5d8:	600b      	strpl	r3, [r1, #0]
 802a5da:	2002      	movpl	r0, #2
 802a5dc:	4770      	bx	lr
 802a5de:	b298      	uxth	r0, r3
 802a5e0:	b9b0      	cbnz	r0, 802a610 <__lo0bits+0x54>
 802a5e2:	0c1b      	lsrs	r3, r3, #16
 802a5e4:	2010      	movs	r0, #16
 802a5e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 802a5ea:	bf04      	itt	eq
 802a5ec:	0a1b      	lsreq	r3, r3, #8
 802a5ee:	3008      	addeq	r0, #8
 802a5f0:	071a      	lsls	r2, r3, #28
 802a5f2:	bf04      	itt	eq
 802a5f4:	091b      	lsreq	r3, r3, #4
 802a5f6:	3004      	addeq	r0, #4
 802a5f8:	079a      	lsls	r2, r3, #30
 802a5fa:	bf04      	itt	eq
 802a5fc:	089b      	lsreq	r3, r3, #2
 802a5fe:	3002      	addeq	r0, #2
 802a600:	07da      	lsls	r2, r3, #31
 802a602:	d403      	bmi.n	802a60c <__lo0bits+0x50>
 802a604:	085b      	lsrs	r3, r3, #1
 802a606:	f100 0001 	add.w	r0, r0, #1
 802a60a:	d005      	beq.n	802a618 <__lo0bits+0x5c>
 802a60c:	600b      	str	r3, [r1, #0]
 802a60e:	4770      	bx	lr
 802a610:	4610      	mov	r0, r2
 802a612:	e7e8      	b.n	802a5e6 <__lo0bits+0x2a>
 802a614:	2000      	movs	r0, #0
 802a616:	4770      	bx	lr
 802a618:	2020      	movs	r0, #32
 802a61a:	4770      	bx	lr

0802a61c <__i2b>:
 802a61c:	b510      	push	{r4, lr}
 802a61e:	460c      	mov	r4, r1
 802a620:	2101      	movs	r1, #1
 802a622:	f7ff feb5 	bl	802a390 <_Balloc>
 802a626:	4602      	mov	r2, r0
 802a628:	b928      	cbnz	r0, 802a636 <__i2b+0x1a>
 802a62a:	4b05      	ldr	r3, [pc, #20]	; (802a640 <__i2b+0x24>)
 802a62c:	4805      	ldr	r0, [pc, #20]	; (802a644 <__i2b+0x28>)
 802a62e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802a632:	f7fc f9dd 	bl	80269f0 <__assert_func>
 802a636:	2301      	movs	r3, #1
 802a638:	6144      	str	r4, [r0, #20]
 802a63a:	6103      	str	r3, [r0, #16]
 802a63c:	bd10      	pop	{r4, pc}
 802a63e:	bf00      	nop
 802a640:	0802f6dc 	.word	0x0802f6dc
 802a644:	0802f7d0 	.word	0x0802f7d0

0802a648 <__multiply>:
 802a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a64c:	4614      	mov	r4, r2
 802a64e:	690a      	ldr	r2, [r1, #16]
 802a650:	6923      	ldr	r3, [r4, #16]
 802a652:	429a      	cmp	r2, r3
 802a654:	bfb8      	it	lt
 802a656:	460b      	movlt	r3, r1
 802a658:	460d      	mov	r5, r1
 802a65a:	bfbc      	itt	lt
 802a65c:	4625      	movlt	r5, r4
 802a65e:	461c      	movlt	r4, r3
 802a660:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802a664:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802a668:	68ab      	ldr	r3, [r5, #8]
 802a66a:	6869      	ldr	r1, [r5, #4]
 802a66c:	eb0a 0709 	add.w	r7, sl, r9
 802a670:	42bb      	cmp	r3, r7
 802a672:	b085      	sub	sp, #20
 802a674:	bfb8      	it	lt
 802a676:	3101      	addlt	r1, #1
 802a678:	f7ff fe8a 	bl	802a390 <_Balloc>
 802a67c:	b930      	cbnz	r0, 802a68c <__multiply+0x44>
 802a67e:	4602      	mov	r2, r0
 802a680:	4b42      	ldr	r3, [pc, #264]	; (802a78c <__multiply+0x144>)
 802a682:	4843      	ldr	r0, [pc, #268]	; (802a790 <__multiply+0x148>)
 802a684:	f240 115d 	movw	r1, #349	; 0x15d
 802a688:	f7fc f9b2 	bl	80269f0 <__assert_func>
 802a68c:	f100 0614 	add.w	r6, r0, #20
 802a690:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802a694:	4633      	mov	r3, r6
 802a696:	2200      	movs	r2, #0
 802a698:	4543      	cmp	r3, r8
 802a69a:	d31e      	bcc.n	802a6da <__multiply+0x92>
 802a69c:	f105 0c14 	add.w	ip, r5, #20
 802a6a0:	f104 0314 	add.w	r3, r4, #20
 802a6a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 802a6a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 802a6ac:	9202      	str	r2, [sp, #8]
 802a6ae:	ebac 0205 	sub.w	r2, ip, r5
 802a6b2:	3a15      	subs	r2, #21
 802a6b4:	f022 0203 	bic.w	r2, r2, #3
 802a6b8:	3204      	adds	r2, #4
 802a6ba:	f105 0115 	add.w	r1, r5, #21
 802a6be:	458c      	cmp	ip, r1
 802a6c0:	bf38      	it	cc
 802a6c2:	2204      	movcc	r2, #4
 802a6c4:	9201      	str	r2, [sp, #4]
 802a6c6:	9a02      	ldr	r2, [sp, #8]
 802a6c8:	9303      	str	r3, [sp, #12]
 802a6ca:	429a      	cmp	r2, r3
 802a6cc:	d808      	bhi.n	802a6e0 <__multiply+0x98>
 802a6ce:	2f00      	cmp	r7, #0
 802a6d0:	dc55      	bgt.n	802a77e <__multiply+0x136>
 802a6d2:	6107      	str	r7, [r0, #16]
 802a6d4:	b005      	add	sp, #20
 802a6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a6da:	f843 2b04 	str.w	r2, [r3], #4
 802a6de:	e7db      	b.n	802a698 <__multiply+0x50>
 802a6e0:	f8b3 a000 	ldrh.w	sl, [r3]
 802a6e4:	f1ba 0f00 	cmp.w	sl, #0
 802a6e8:	d020      	beq.n	802a72c <__multiply+0xe4>
 802a6ea:	f105 0e14 	add.w	lr, r5, #20
 802a6ee:	46b1      	mov	r9, r6
 802a6f0:	2200      	movs	r2, #0
 802a6f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 802a6f6:	f8d9 b000 	ldr.w	fp, [r9]
 802a6fa:	b2a1      	uxth	r1, r4
 802a6fc:	fa1f fb8b 	uxth.w	fp, fp
 802a700:	fb0a b101 	mla	r1, sl, r1, fp
 802a704:	4411      	add	r1, r2
 802a706:	f8d9 2000 	ldr.w	r2, [r9]
 802a70a:	0c24      	lsrs	r4, r4, #16
 802a70c:	0c12      	lsrs	r2, r2, #16
 802a70e:	fb0a 2404 	mla	r4, sl, r4, r2
 802a712:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 802a716:	b289      	uxth	r1, r1
 802a718:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 802a71c:	45f4      	cmp	ip, lr
 802a71e:	f849 1b04 	str.w	r1, [r9], #4
 802a722:	ea4f 4214 	mov.w	r2, r4, lsr #16
 802a726:	d8e4      	bhi.n	802a6f2 <__multiply+0xaa>
 802a728:	9901      	ldr	r1, [sp, #4]
 802a72a:	5072      	str	r2, [r6, r1]
 802a72c:	9a03      	ldr	r2, [sp, #12]
 802a72e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802a732:	3304      	adds	r3, #4
 802a734:	f1b9 0f00 	cmp.w	r9, #0
 802a738:	d01f      	beq.n	802a77a <__multiply+0x132>
 802a73a:	6834      	ldr	r4, [r6, #0]
 802a73c:	f105 0114 	add.w	r1, r5, #20
 802a740:	46b6      	mov	lr, r6
 802a742:	f04f 0a00 	mov.w	sl, #0
 802a746:	880a      	ldrh	r2, [r1, #0]
 802a748:	f8be b002 	ldrh.w	fp, [lr, #2]
 802a74c:	fb09 b202 	mla	r2, r9, r2, fp
 802a750:	4492      	add	sl, r2
 802a752:	b2a4      	uxth	r4, r4
 802a754:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 802a758:	f84e 4b04 	str.w	r4, [lr], #4
 802a75c:	f851 4b04 	ldr.w	r4, [r1], #4
 802a760:	f8be 2000 	ldrh.w	r2, [lr]
 802a764:	0c24      	lsrs	r4, r4, #16
 802a766:	fb09 2404 	mla	r4, r9, r4, r2
 802a76a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 802a76e:	458c      	cmp	ip, r1
 802a770:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802a774:	d8e7      	bhi.n	802a746 <__multiply+0xfe>
 802a776:	9a01      	ldr	r2, [sp, #4]
 802a778:	50b4      	str	r4, [r6, r2]
 802a77a:	3604      	adds	r6, #4
 802a77c:	e7a3      	b.n	802a6c6 <__multiply+0x7e>
 802a77e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802a782:	2b00      	cmp	r3, #0
 802a784:	d1a5      	bne.n	802a6d2 <__multiply+0x8a>
 802a786:	3f01      	subs	r7, #1
 802a788:	e7a1      	b.n	802a6ce <__multiply+0x86>
 802a78a:	bf00      	nop
 802a78c:	0802f6dc 	.word	0x0802f6dc
 802a790:	0802f7d0 	.word	0x0802f7d0

0802a794 <__pow5mult>:
 802a794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a798:	4615      	mov	r5, r2
 802a79a:	f012 0203 	ands.w	r2, r2, #3
 802a79e:	4606      	mov	r6, r0
 802a7a0:	460f      	mov	r7, r1
 802a7a2:	d007      	beq.n	802a7b4 <__pow5mult+0x20>
 802a7a4:	4c25      	ldr	r4, [pc, #148]	; (802a83c <__pow5mult+0xa8>)
 802a7a6:	3a01      	subs	r2, #1
 802a7a8:	2300      	movs	r3, #0
 802a7aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802a7ae:	f7ff fe51 	bl	802a454 <__multadd>
 802a7b2:	4607      	mov	r7, r0
 802a7b4:	10ad      	asrs	r5, r5, #2
 802a7b6:	d03d      	beq.n	802a834 <__pow5mult+0xa0>
 802a7b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802a7ba:	b97c      	cbnz	r4, 802a7dc <__pow5mult+0x48>
 802a7bc:	2010      	movs	r0, #16
 802a7be:	f7fc f985 	bl	8026acc <malloc>
 802a7c2:	4602      	mov	r2, r0
 802a7c4:	6270      	str	r0, [r6, #36]	; 0x24
 802a7c6:	b928      	cbnz	r0, 802a7d4 <__pow5mult+0x40>
 802a7c8:	4b1d      	ldr	r3, [pc, #116]	; (802a840 <__pow5mult+0xac>)
 802a7ca:	481e      	ldr	r0, [pc, #120]	; (802a844 <__pow5mult+0xb0>)
 802a7cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802a7d0:	f7fc f90e 	bl	80269f0 <__assert_func>
 802a7d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802a7d8:	6004      	str	r4, [r0, #0]
 802a7da:	60c4      	str	r4, [r0, #12]
 802a7dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802a7e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802a7e4:	b94c      	cbnz	r4, 802a7fa <__pow5mult+0x66>
 802a7e6:	f240 2171 	movw	r1, #625	; 0x271
 802a7ea:	4630      	mov	r0, r6
 802a7ec:	f7ff ff16 	bl	802a61c <__i2b>
 802a7f0:	2300      	movs	r3, #0
 802a7f2:	f8c8 0008 	str.w	r0, [r8, #8]
 802a7f6:	4604      	mov	r4, r0
 802a7f8:	6003      	str	r3, [r0, #0]
 802a7fa:	f04f 0900 	mov.w	r9, #0
 802a7fe:	07eb      	lsls	r3, r5, #31
 802a800:	d50a      	bpl.n	802a818 <__pow5mult+0x84>
 802a802:	4639      	mov	r1, r7
 802a804:	4622      	mov	r2, r4
 802a806:	4630      	mov	r0, r6
 802a808:	f7ff ff1e 	bl	802a648 <__multiply>
 802a80c:	4639      	mov	r1, r7
 802a80e:	4680      	mov	r8, r0
 802a810:	4630      	mov	r0, r6
 802a812:	f7ff fdfd 	bl	802a410 <_Bfree>
 802a816:	4647      	mov	r7, r8
 802a818:	106d      	asrs	r5, r5, #1
 802a81a:	d00b      	beq.n	802a834 <__pow5mult+0xa0>
 802a81c:	6820      	ldr	r0, [r4, #0]
 802a81e:	b938      	cbnz	r0, 802a830 <__pow5mult+0x9c>
 802a820:	4622      	mov	r2, r4
 802a822:	4621      	mov	r1, r4
 802a824:	4630      	mov	r0, r6
 802a826:	f7ff ff0f 	bl	802a648 <__multiply>
 802a82a:	6020      	str	r0, [r4, #0]
 802a82c:	f8c0 9000 	str.w	r9, [r0]
 802a830:	4604      	mov	r4, r0
 802a832:	e7e4      	b.n	802a7fe <__pow5mult+0x6a>
 802a834:	4638      	mov	r0, r7
 802a836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a83a:	bf00      	nop
 802a83c:	0802f920 	.word	0x0802f920
 802a840:	0802f666 	.word	0x0802f666
 802a844:	0802f7d0 	.word	0x0802f7d0

0802a848 <__lshift>:
 802a848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a84c:	460c      	mov	r4, r1
 802a84e:	6849      	ldr	r1, [r1, #4]
 802a850:	6923      	ldr	r3, [r4, #16]
 802a852:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802a856:	68a3      	ldr	r3, [r4, #8]
 802a858:	4607      	mov	r7, r0
 802a85a:	4691      	mov	r9, r2
 802a85c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802a860:	f108 0601 	add.w	r6, r8, #1
 802a864:	42b3      	cmp	r3, r6
 802a866:	db0b      	blt.n	802a880 <__lshift+0x38>
 802a868:	4638      	mov	r0, r7
 802a86a:	f7ff fd91 	bl	802a390 <_Balloc>
 802a86e:	4605      	mov	r5, r0
 802a870:	b948      	cbnz	r0, 802a886 <__lshift+0x3e>
 802a872:	4602      	mov	r2, r0
 802a874:	4b28      	ldr	r3, [pc, #160]	; (802a918 <__lshift+0xd0>)
 802a876:	4829      	ldr	r0, [pc, #164]	; (802a91c <__lshift+0xd4>)
 802a878:	f240 11d9 	movw	r1, #473	; 0x1d9
 802a87c:	f7fc f8b8 	bl	80269f0 <__assert_func>
 802a880:	3101      	adds	r1, #1
 802a882:	005b      	lsls	r3, r3, #1
 802a884:	e7ee      	b.n	802a864 <__lshift+0x1c>
 802a886:	2300      	movs	r3, #0
 802a888:	f100 0114 	add.w	r1, r0, #20
 802a88c:	f100 0210 	add.w	r2, r0, #16
 802a890:	4618      	mov	r0, r3
 802a892:	4553      	cmp	r3, sl
 802a894:	db33      	blt.n	802a8fe <__lshift+0xb6>
 802a896:	6920      	ldr	r0, [r4, #16]
 802a898:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802a89c:	f104 0314 	add.w	r3, r4, #20
 802a8a0:	f019 091f 	ands.w	r9, r9, #31
 802a8a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802a8a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802a8ac:	d02b      	beq.n	802a906 <__lshift+0xbe>
 802a8ae:	f1c9 0e20 	rsb	lr, r9, #32
 802a8b2:	468a      	mov	sl, r1
 802a8b4:	2200      	movs	r2, #0
 802a8b6:	6818      	ldr	r0, [r3, #0]
 802a8b8:	fa00 f009 	lsl.w	r0, r0, r9
 802a8bc:	4302      	orrs	r2, r0
 802a8be:	f84a 2b04 	str.w	r2, [sl], #4
 802a8c2:	f853 2b04 	ldr.w	r2, [r3], #4
 802a8c6:	459c      	cmp	ip, r3
 802a8c8:	fa22 f20e 	lsr.w	r2, r2, lr
 802a8cc:	d8f3      	bhi.n	802a8b6 <__lshift+0x6e>
 802a8ce:	ebac 0304 	sub.w	r3, ip, r4
 802a8d2:	3b15      	subs	r3, #21
 802a8d4:	f023 0303 	bic.w	r3, r3, #3
 802a8d8:	3304      	adds	r3, #4
 802a8da:	f104 0015 	add.w	r0, r4, #21
 802a8de:	4584      	cmp	ip, r0
 802a8e0:	bf38      	it	cc
 802a8e2:	2304      	movcc	r3, #4
 802a8e4:	50ca      	str	r2, [r1, r3]
 802a8e6:	b10a      	cbz	r2, 802a8ec <__lshift+0xa4>
 802a8e8:	f108 0602 	add.w	r6, r8, #2
 802a8ec:	3e01      	subs	r6, #1
 802a8ee:	4638      	mov	r0, r7
 802a8f0:	612e      	str	r6, [r5, #16]
 802a8f2:	4621      	mov	r1, r4
 802a8f4:	f7ff fd8c 	bl	802a410 <_Bfree>
 802a8f8:	4628      	mov	r0, r5
 802a8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a8fe:	f842 0f04 	str.w	r0, [r2, #4]!
 802a902:	3301      	adds	r3, #1
 802a904:	e7c5      	b.n	802a892 <__lshift+0x4a>
 802a906:	3904      	subs	r1, #4
 802a908:	f853 2b04 	ldr.w	r2, [r3], #4
 802a90c:	f841 2f04 	str.w	r2, [r1, #4]!
 802a910:	459c      	cmp	ip, r3
 802a912:	d8f9      	bhi.n	802a908 <__lshift+0xc0>
 802a914:	e7ea      	b.n	802a8ec <__lshift+0xa4>
 802a916:	bf00      	nop
 802a918:	0802f6dc 	.word	0x0802f6dc
 802a91c:	0802f7d0 	.word	0x0802f7d0

0802a920 <__mcmp>:
 802a920:	b530      	push	{r4, r5, lr}
 802a922:	6902      	ldr	r2, [r0, #16]
 802a924:	690c      	ldr	r4, [r1, #16]
 802a926:	1b12      	subs	r2, r2, r4
 802a928:	d10e      	bne.n	802a948 <__mcmp+0x28>
 802a92a:	f100 0314 	add.w	r3, r0, #20
 802a92e:	3114      	adds	r1, #20
 802a930:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802a934:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802a938:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802a93c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802a940:	42a5      	cmp	r5, r4
 802a942:	d003      	beq.n	802a94c <__mcmp+0x2c>
 802a944:	d305      	bcc.n	802a952 <__mcmp+0x32>
 802a946:	2201      	movs	r2, #1
 802a948:	4610      	mov	r0, r2
 802a94a:	bd30      	pop	{r4, r5, pc}
 802a94c:	4283      	cmp	r3, r0
 802a94e:	d3f3      	bcc.n	802a938 <__mcmp+0x18>
 802a950:	e7fa      	b.n	802a948 <__mcmp+0x28>
 802a952:	f04f 32ff 	mov.w	r2, #4294967295
 802a956:	e7f7      	b.n	802a948 <__mcmp+0x28>

0802a958 <__mdiff>:
 802a958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a95c:	460c      	mov	r4, r1
 802a95e:	4606      	mov	r6, r0
 802a960:	4611      	mov	r1, r2
 802a962:	4620      	mov	r0, r4
 802a964:	4617      	mov	r7, r2
 802a966:	f7ff ffdb 	bl	802a920 <__mcmp>
 802a96a:	1e05      	subs	r5, r0, #0
 802a96c:	d110      	bne.n	802a990 <__mdiff+0x38>
 802a96e:	4629      	mov	r1, r5
 802a970:	4630      	mov	r0, r6
 802a972:	f7ff fd0d 	bl	802a390 <_Balloc>
 802a976:	b930      	cbnz	r0, 802a986 <__mdiff+0x2e>
 802a978:	4b39      	ldr	r3, [pc, #228]	; (802aa60 <__mdiff+0x108>)
 802a97a:	4602      	mov	r2, r0
 802a97c:	f240 2132 	movw	r1, #562	; 0x232
 802a980:	4838      	ldr	r0, [pc, #224]	; (802aa64 <__mdiff+0x10c>)
 802a982:	f7fc f835 	bl	80269f0 <__assert_func>
 802a986:	2301      	movs	r3, #1
 802a988:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802a98c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a990:	bfa4      	itt	ge
 802a992:	463b      	movge	r3, r7
 802a994:	4627      	movge	r7, r4
 802a996:	4630      	mov	r0, r6
 802a998:	6879      	ldr	r1, [r7, #4]
 802a99a:	bfa6      	itte	ge
 802a99c:	461c      	movge	r4, r3
 802a99e:	2500      	movge	r5, #0
 802a9a0:	2501      	movlt	r5, #1
 802a9a2:	f7ff fcf5 	bl	802a390 <_Balloc>
 802a9a6:	b920      	cbnz	r0, 802a9b2 <__mdiff+0x5a>
 802a9a8:	4b2d      	ldr	r3, [pc, #180]	; (802aa60 <__mdiff+0x108>)
 802a9aa:	4602      	mov	r2, r0
 802a9ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 802a9b0:	e7e6      	b.n	802a980 <__mdiff+0x28>
 802a9b2:	693e      	ldr	r6, [r7, #16]
 802a9b4:	60c5      	str	r5, [r0, #12]
 802a9b6:	6925      	ldr	r5, [r4, #16]
 802a9b8:	f107 0114 	add.w	r1, r7, #20
 802a9bc:	f104 0914 	add.w	r9, r4, #20
 802a9c0:	f100 0e14 	add.w	lr, r0, #20
 802a9c4:	f107 0210 	add.w	r2, r7, #16
 802a9c8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 802a9cc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 802a9d0:	46f2      	mov	sl, lr
 802a9d2:	2700      	movs	r7, #0
 802a9d4:	f859 3b04 	ldr.w	r3, [r9], #4
 802a9d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802a9dc:	fa1f f883 	uxth.w	r8, r3
 802a9e0:	fa17 f78b 	uxtah	r7, r7, fp
 802a9e4:	0c1b      	lsrs	r3, r3, #16
 802a9e6:	eba7 0808 	sub.w	r8, r7, r8
 802a9ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802a9ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802a9f2:	fa1f f888 	uxth.w	r8, r8
 802a9f6:	141f      	asrs	r7, r3, #16
 802a9f8:	454d      	cmp	r5, r9
 802a9fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802a9fe:	f84a 3b04 	str.w	r3, [sl], #4
 802aa02:	d8e7      	bhi.n	802a9d4 <__mdiff+0x7c>
 802aa04:	1b2b      	subs	r3, r5, r4
 802aa06:	3b15      	subs	r3, #21
 802aa08:	f023 0303 	bic.w	r3, r3, #3
 802aa0c:	3304      	adds	r3, #4
 802aa0e:	3415      	adds	r4, #21
 802aa10:	42a5      	cmp	r5, r4
 802aa12:	bf38      	it	cc
 802aa14:	2304      	movcc	r3, #4
 802aa16:	4419      	add	r1, r3
 802aa18:	4473      	add	r3, lr
 802aa1a:	469e      	mov	lr, r3
 802aa1c:	460d      	mov	r5, r1
 802aa1e:	4565      	cmp	r5, ip
 802aa20:	d30e      	bcc.n	802aa40 <__mdiff+0xe8>
 802aa22:	f10c 0203 	add.w	r2, ip, #3
 802aa26:	1a52      	subs	r2, r2, r1
 802aa28:	f022 0203 	bic.w	r2, r2, #3
 802aa2c:	3903      	subs	r1, #3
 802aa2e:	458c      	cmp	ip, r1
 802aa30:	bf38      	it	cc
 802aa32:	2200      	movcc	r2, #0
 802aa34:	441a      	add	r2, r3
 802aa36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802aa3a:	b17b      	cbz	r3, 802aa5c <__mdiff+0x104>
 802aa3c:	6106      	str	r6, [r0, #16]
 802aa3e:	e7a5      	b.n	802a98c <__mdiff+0x34>
 802aa40:	f855 8b04 	ldr.w	r8, [r5], #4
 802aa44:	fa17 f488 	uxtah	r4, r7, r8
 802aa48:	1422      	asrs	r2, r4, #16
 802aa4a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802aa4e:	b2a4      	uxth	r4, r4
 802aa50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 802aa54:	f84e 4b04 	str.w	r4, [lr], #4
 802aa58:	1417      	asrs	r7, r2, #16
 802aa5a:	e7e0      	b.n	802aa1e <__mdiff+0xc6>
 802aa5c:	3e01      	subs	r6, #1
 802aa5e:	e7ea      	b.n	802aa36 <__mdiff+0xde>
 802aa60:	0802f6dc 	.word	0x0802f6dc
 802aa64:	0802f7d0 	.word	0x0802f7d0

0802aa68 <__ulp>:
 802aa68:	b082      	sub	sp, #8
 802aa6a:	ed8d 0b00 	vstr	d0, [sp]
 802aa6e:	9b01      	ldr	r3, [sp, #4]
 802aa70:	4912      	ldr	r1, [pc, #72]	; (802aabc <__ulp+0x54>)
 802aa72:	4019      	ands	r1, r3
 802aa74:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 802aa78:	2900      	cmp	r1, #0
 802aa7a:	dd05      	ble.n	802aa88 <__ulp+0x20>
 802aa7c:	2200      	movs	r2, #0
 802aa7e:	460b      	mov	r3, r1
 802aa80:	ec43 2b10 	vmov	d0, r2, r3
 802aa84:	b002      	add	sp, #8
 802aa86:	4770      	bx	lr
 802aa88:	4249      	negs	r1, r1
 802aa8a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802aa8e:	ea4f 5021 	mov.w	r0, r1, asr #20
 802aa92:	f04f 0200 	mov.w	r2, #0
 802aa96:	f04f 0300 	mov.w	r3, #0
 802aa9a:	da04      	bge.n	802aaa6 <__ulp+0x3e>
 802aa9c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 802aaa0:	fa41 f300 	asr.w	r3, r1, r0
 802aaa4:	e7ec      	b.n	802aa80 <__ulp+0x18>
 802aaa6:	f1a0 0114 	sub.w	r1, r0, #20
 802aaaa:	291e      	cmp	r1, #30
 802aaac:	bfda      	itte	le
 802aaae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802aab2:	fa20 f101 	lsrle.w	r1, r0, r1
 802aab6:	2101      	movgt	r1, #1
 802aab8:	460a      	mov	r2, r1
 802aaba:	e7e1      	b.n	802aa80 <__ulp+0x18>
 802aabc:	7ff00000 	.word	0x7ff00000

0802aac0 <__b2d>:
 802aac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aac2:	6905      	ldr	r5, [r0, #16]
 802aac4:	f100 0714 	add.w	r7, r0, #20
 802aac8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 802aacc:	1f2e      	subs	r6, r5, #4
 802aace:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802aad2:	4620      	mov	r0, r4
 802aad4:	f7ff fd52 	bl	802a57c <__hi0bits>
 802aad8:	f1c0 0320 	rsb	r3, r0, #32
 802aadc:	280a      	cmp	r0, #10
 802aade:	f8df c07c 	ldr.w	ip, [pc, #124]	; 802ab5c <__b2d+0x9c>
 802aae2:	600b      	str	r3, [r1, #0]
 802aae4:	dc14      	bgt.n	802ab10 <__b2d+0x50>
 802aae6:	f1c0 0e0b 	rsb	lr, r0, #11
 802aaea:	fa24 f10e 	lsr.w	r1, r4, lr
 802aaee:	42b7      	cmp	r7, r6
 802aaf0:	ea41 030c 	orr.w	r3, r1, ip
 802aaf4:	bf34      	ite	cc
 802aaf6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802aafa:	2100      	movcs	r1, #0
 802aafc:	3015      	adds	r0, #21
 802aafe:	fa04 f000 	lsl.w	r0, r4, r0
 802ab02:	fa21 f10e 	lsr.w	r1, r1, lr
 802ab06:	ea40 0201 	orr.w	r2, r0, r1
 802ab0a:	ec43 2b10 	vmov	d0, r2, r3
 802ab0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ab10:	42b7      	cmp	r7, r6
 802ab12:	bf3a      	itte	cc
 802ab14:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802ab18:	f1a5 0608 	subcc.w	r6, r5, #8
 802ab1c:	2100      	movcs	r1, #0
 802ab1e:	380b      	subs	r0, #11
 802ab20:	d017      	beq.n	802ab52 <__b2d+0x92>
 802ab22:	f1c0 0c20 	rsb	ip, r0, #32
 802ab26:	fa04 f500 	lsl.w	r5, r4, r0
 802ab2a:	42be      	cmp	r6, r7
 802ab2c:	fa21 f40c 	lsr.w	r4, r1, ip
 802ab30:	ea45 0504 	orr.w	r5, r5, r4
 802ab34:	bf8c      	ite	hi
 802ab36:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802ab3a:	2400      	movls	r4, #0
 802ab3c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802ab40:	fa01 f000 	lsl.w	r0, r1, r0
 802ab44:	fa24 f40c 	lsr.w	r4, r4, ip
 802ab48:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802ab4c:	ea40 0204 	orr.w	r2, r0, r4
 802ab50:	e7db      	b.n	802ab0a <__b2d+0x4a>
 802ab52:	ea44 030c 	orr.w	r3, r4, ip
 802ab56:	460a      	mov	r2, r1
 802ab58:	e7d7      	b.n	802ab0a <__b2d+0x4a>
 802ab5a:	bf00      	nop
 802ab5c:	3ff00000 	.word	0x3ff00000

0802ab60 <__d2b>:
 802ab60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802ab64:	4689      	mov	r9, r1
 802ab66:	2101      	movs	r1, #1
 802ab68:	ec57 6b10 	vmov	r6, r7, d0
 802ab6c:	4690      	mov	r8, r2
 802ab6e:	f7ff fc0f 	bl	802a390 <_Balloc>
 802ab72:	4604      	mov	r4, r0
 802ab74:	b930      	cbnz	r0, 802ab84 <__d2b+0x24>
 802ab76:	4602      	mov	r2, r0
 802ab78:	4b25      	ldr	r3, [pc, #148]	; (802ac10 <__d2b+0xb0>)
 802ab7a:	4826      	ldr	r0, [pc, #152]	; (802ac14 <__d2b+0xb4>)
 802ab7c:	f240 310a 	movw	r1, #778	; 0x30a
 802ab80:	f7fb ff36 	bl	80269f0 <__assert_func>
 802ab84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802ab88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802ab8c:	bb35      	cbnz	r5, 802abdc <__d2b+0x7c>
 802ab8e:	2e00      	cmp	r6, #0
 802ab90:	9301      	str	r3, [sp, #4]
 802ab92:	d028      	beq.n	802abe6 <__d2b+0x86>
 802ab94:	4668      	mov	r0, sp
 802ab96:	9600      	str	r6, [sp, #0]
 802ab98:	f7ff fd10 	bl	802a5bc <__lo0bits>
 802ab9c:	9900      	ldr	r1, [sp, #0]
 802ab9e:	b300      	cbz	r0, 802abe2 <__d2b+0x82>
 802aba0:	9a01      	ldr	r2, [sp, #4]
 802aba2:	f1c0 0320 	rsb	r3, r0, #32
 802aba6:	fa02 f303 	lsl.w	r3, r2, r3
 802abaa:	430b      	orrs	r3, r1
 802abac:	40c2      	lsrs	r2, r0
 802abae:	6163      	str	r3, [r4, #20]
 802abb0:	9201      	str	r2, [sp, #4]
 802abb2:	9b01      	ldr	r3, [sp, #4]
 802abb4:	61a3      	str	r3, [r4, #24]
 802abb6:	2b00      	cmp	r3, #0
 802abb8:	bf14      	ite	ne
 802abba:	2202      	movne	r2, #2
 802abbc:	2201      	moveq	r2, #1
 802abbe:	6122      	str	r2, [r4, #16]
 802abc0:	b1d5      	cbz	r5, 802abf8 <__d2b+0x98>
 802abc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802abc6:	4405      	add	r5, r0
 802abc8:	f8c9 5000 	str.w	r5, [r9]
 802abcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802abd0:	f8c8 0000 	str.w	r0, [r8]
 802abd4:	4620      	mov	r0, r4
 802abd6:	b003      	add	sp, #12
 802abd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802abdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802abe0:	e7d5      	b.n	802ab8e <__d2b+0x2e>
 802abe2:	6161      	str	r1, [r4, #20]
 802abe4:	e7e5      	b.n	802abb2 <__d2b+0x52>
 802abe6:	a801      	add	r0, sp, #4
 802abe8:	f7ff fce8 	bl	802a5bc <__lo0bits>
 802abec:	9b01      	ldr	r3, [sp, #4]
 802abee:	6163      	str	r3, [r4, #20]
 802abf0:	2201      	movs	r2, #1
 802abf2:	6122      	str	r2, [r4, #16]
 802abf4:	3020      	adds	r0, #32
 802abf6:	e7e3      	b.n	802abc0 <__d2b+0x60>
 802abf8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802abfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802ac00:	f8c9 0000 	str.w	r0, [r9]
 802ac04:	6918      	ldr	r0, [r3, #16]
 802ac06:	f7ff fcb9 	bl	802a57c <__hi0bits>
 802ac0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802ac0e:	e7df      	b.n	802abd0 <__d2b+0x70>
 802ac10:	0802f6dc 	.word	0x0802f6dc
 802ac14:	0802f7d0 	.word	0x0802f7d0

0802ac18 <__ratio>:
 802ac18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ac1c:	468a      	mov	sl, r1
 802ac1e:	4669      	mov	r1, sp
 802ac20:	4683      	mov	fp, r0
 802ac22:	f7ff ff4d 	bl	802aac0 <__b2d>
 802ac26:	a901      	add	r1, sp, #4
 802ac28:	4650      	mov	r0, sl
 802ac2a:	ec59 8b10 	vmov	r8, r9, d0
 802ac2e:	ee10 6a10 	vmov	r6, s0
 802ac32:	f7ff ff45 	bl	802aac0 <__b2d>
 802ac36:	f8db 3010 	ldr.w	r3, [fp, #16]
 802ac3a:	f8da 2010 	ldr.w	r2, [sl, #16]
 802ac3e:	eba3 0c02 	sub.w	ip, r3, r2
 802ac42:	e9dd 3200 	ldrd	r3, r2, [sp]
 802ac46:	1a9b      	subs	r3, r3, r2
 802ac48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802ac4c:	ec55 4b10 	vmov	r4, r5, d0
 802ac50:	2b00      	cmp	r3, #0
 802ac52:	ee10 0a10 	vmov	r0, s0
 802ac56:	bfce      	itee	gt
 802ac58:	464a      	movgt	r2, r9
 802ac5a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802ac5e:	462a      	movle	r2, r5
 802ac60:	464f      	mov	r7, r9
 802ac62:	4629      	mov	r1, r5
 802ac64:	bfcc      	ite	gt
 802ac66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802ac6a:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 802ac6e:	ec47 6b17 	vmov	d7, r6, r7
 802ac72:	ec41 0b16 	vmov	d6, r0, r1
 802ac76:	ee87 0b06 	vdiv.f64	d0, d7, d6
 802ac7a:	b003      	add	sp, #12
 802ac7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802ac80 <__copybits>:
 802ac80:	3901      	subs	r1, #1
 802ac82:	b570      	push	{r4, r5, r6, lr}
 802ac84:	1149      	asrs	r1, r1, #5
 802ac86:	6914      	ldr	r4, [r2, #16]
 802ac88:	3101      	adds	r1, #1
 802ac8a:	f102 0314 	add.w	r3, r2, #20
 802ac8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802ac92:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802ac96:	1f05      	subs	r5, r0, #4
 802ac98:	42a3      	cmp	r3, r4
 802ac9a:	d30c      	bcc.n	802acb6 <__copybits+0x36>
 802ac9c:	1aa3      	subs	r3, r4, r2
 802ac9e:	3b11      	subs	r3, #17
 802aca0:	f023 0303 	bic.w	r3, r3, #3
 802aca4:	3211      	adds	r2, #17
 802aca6:	42a2      	cmp	r2, r4
 802aca8:	bf88      	it	hi
 802acaa:	2300      	movhi	r3, #0
 802acac:	4418      	add	r0, r3
 802acae:	2300      	movs	r3, #0
 802acb0:	4288      	cmp	r0, r1
 802acb2:	d305      	bcc.n	802acc0 <__copybits+0x40>
 802acb4:	bd70      	pop	{r4, r5, r6, pc}
 802acb6:	f853 6b04 	ldr.w	r6, [r3], #4
 802acba:	f845 6f04 	str.w	r6, [r5, #4]!
 802acbe:	e7eb      	b.n	802ac98 <__copybits+0x18>
 802acc0:	f840 3b04 	str.w	r3, [r0], #4
 802acc4:	e7f4      	b.n	802acb0 <__copybits+0x30>

0802acc6 <__any_on>:
 802acc6:	f100 0214 	add.w	r2, r0, #20
 802acca:	6900      	ldr	r0, [r0, #16]
 802accc:	114b      	asrs	r3, r1, #5
 802acce:	4298      	cmp	r0, r3
 802acd0:	b510      	push	{r4, lr}
 802acd2:	db11      	blt.n	802acf8 <__any_on+0x32>
 802acd4:	dd0a      	ble.n	802acec <__any_on+0x26>
 802acd6:	f011 011f 	ands.w	r1, r1, #31
 802acda:	d007      	beq.n	802acec <__any_on+0x26>
 802acdc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802ace0:	fa24 f001 	lsr.w	r0, r4, r1
 802ace4:	fa00 f101 	lsl.w	r1, r0, r1
 802ace8:	428c      	cmp	r4, r1
 802acea:	d10b      	bne.n	802ad04 <__any_on+0x3e>
 802acec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802acf0:	4293      	cmp	r3, r2
 802acf2:	d803      	bhi.n	802acfc <__any_on+0x36>
 802acf4:	2000      	movs	r0, #0
 802acf6:	bd10      	pop	{r4, pc}
 802acf8:	4603      	mov	r3, r0
 802acfa:	e7f7      	b.n	802acec <__any_on+0x26>
 802acfc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802ad00:	2900      	cmp	r1, #0
 802ad02:	d0f5      	beq.n	802acf0 <__any_on+0x2a>
 802ad04:	2001      	movs	r0, #1
 802ad06:	e7f6      	b.n	802acf6 <__any_on+0x30>

0802ad08 <_calloc_r>:
 802ad08:	b513      	push	{r0, r1, r4, lr}
 802ad0a:	434a      	muls	r2, r1
 802ad0c:	4611      	mov	r1, r2
 802ad0e:	9201      	str	r2, [sp, #4]
 802ad10:	f7fb ff52 	bl	8026bb8 <_malloc_r>
 802ad14:	4604      	mov	r4, r0
 802ad16:	b118      	cbz	r0, 802ad20 <_calloc_r+0x18>
 802ad18:	9a01      	ldr	r2, [sp, #4]
 802ad1a:	2100      	movs	r1, #0
 802ad1c:	f7fb fef4 	bl	8026b08 <memset>
 802ad20:	4620      	mov	r0, r4
 802ad22:	b002      	add	sp, #8
 802ad24:	bd10      	pop	{r4, pc}

0802ad26 <_realloc_r>:
 802ad26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ad28:	4607      	mov	r7, r0
 802ad2a:	4614      	mov	r4, r2
 802ad2c:	460e      	mov	r6, r1
 802ad2e:	b921      	cbnz	r1, 802ad3a <_realloc_r+0x14>
 802ad30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802ad34:	4611      	mov	r1, r2
 802ad36:	f7fb bf3f 	b.w	8026bb8 <_malloc_r>
 802ad3a:	b922      	cbnz	r2, 802ad46 <_realloc_r+0x20>
 802ad3c:	f7fb feec 	bl	8026b18 <_free_r>
 802ad40:	4625      	mov	r5, r4
 802ad42:	4628      	mov	r0, r5
 802ad44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ad46:	f000 fa2f 	bl	802b1a8 <_malloc_usable_size_r>
 802ad4a:	42a0      	cmp	r0, r4
 802ad4c:	d20f      	bcs.n	802ad6e <_realloc_r+0x48>
 802ad4e:	4621      	mov	r1, r4
 802ad50:	4638      	mov	r0, r7
 802ad52:	f7fb ff31 	bl	8026bb8 <_malloc_r>
 802ad56:	4605      	mov	r5, r0
 802ad58:	2800      	cmp	r0, #0
 802ad5a:	d0f2      	beq.n	802ad42 <_realloc_r+0x1c>
 802ad5c:	4631      	mov	r1, r6
 802ad5e:	4622      	mov	r2, r4
 802ad60:	f7fb fec4 	bl	8026aec <memcpy>
 802ad64:	4631      	mov	r1, r6
 802ad66:	4638      	mov	r0, r7
 802ad68:	f7fb fed6 	bl	8026b18 <_free_r>
 802ad6c:	e7e9      	b.n	802ad42 <_realloc_r+0x1c>
 802ad6e:	4635      	mov	r5, r6
 802ad70:	e7e7      	b.n	802ad42 <_realloc_r+0x1c>

0802ad72 <__ssputs_r>:
 802ad72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ad76:	688e      	ldr	r6, [r1, #8]
 802ad78:	429e      	cmp	r6, r3
 802ad7a:	4682      	mov	sl, r0
 802ad7c:	460c      	mov	r4, r1
 802ad7e:	4690      	mov	r8, r2
 802ad80:	461f      	mov	r7, r3
 802ad82:	d838      	bhi.n	802adf6 <__ssputs_r+0x84>
 802ad84:	898a      	ldrh	r2, [r1, #12]
 802ad86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802ad8a:	d032      	beq.n	802adf2 <__ssputs_r+0x80>
 802ad8c:	6825      	ldr	r5, [r4, #0]
 802ad8e:	6909      	ldr	r1, [r1, #16]
 802ad90:	eba5 0901 	sub.w	r9, r5, r1
 802ad94:	6965      	ldr	r5, [r4, #20]
 802ad96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802ad9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802ad9e:	3301      	adds	r3, #1
 802ada0:	444b      	add	r3, r9
 802ada2:	106d      	asrs	r5, r5, #1
 802ada4:	429d      	cmp	r5, r3
 802ada6:	bf38      	it	cc
 802ada8:	461d      	movcc	r5, r3
 802adaa:	0553      	lsls	r3, r2, #21
 802adac:	d531      	bpl.n	802ae12 <__ssputs_r+0xa0>
 802adae:	4629      	mov	r1, r5
 802adb0:	f7fb ff02 	bl	8026bb8 <_malloc_r>
 802adb4:	4606      	mov	r6, r0
 802adb6:	b950      	cbnz	r0, 802adce <__ssputs_r+0x5c>
 802adb8:	230c      	movs	r3, #12
 802adba:	f8ca 3000 	str.w	r3, [sl]
 802adbe:	89a3      	ldrh	r3, [r4, #12]
 802adc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802adc4:	81a3      	strh	r3, [r4, #12]
 802adc6:	f04f 30ff 	mov.w	r0, #4294967295
 802adca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802adce:	6921      	ldr	r1, [r4, #16]
 802add0:	464a      	mov	r2, r9
 802add2:	f7fb fe8b 	bl	8026aec <memcpy>
 802add6:	89a3      	ldrh	r3, [r4, #12]
 802add8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802addc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ade0:	81a3      	strh	r3, [r4, #12]
 802ade2:	6126      	str	r6, [r4, #16]
 802ade4:	6165      	str	r5, [r4, #20]
 802ade6:	444e      	add	r6, r9
 802ade8:	eba5 0509 	sub.w	r5, r5, r9
 802adec:	6026      	str	r6, [r4, #0]
 802adee:	60a5      	str	r5, [r4, #8]
 802adf0:	463e      	mov	r6, r7
 802adf2:	42be      	cmp	r6, r7
 802adf4:	d900      	bls.n	802adf8 <__ssputs_r+0x86>
 802adf6:	463e      	mov	r6, r7
 802adf8:	4632      	mov	r2, r6
 802adfa:	6820      	ldr	r0, [r4, #0]
 802adfc:	4641      	mov	r1, r8
 802adfe:	f7ff faa1 	bl	802a344 <memmove>
 802ae02:	68a3      	ldr	r3, [r4, #8]
 802ae04:	6822      	ldr	r2, [r4, #0]
 802ae06:	1b9b      	subs	r3, r3, r6
 802ae08:	4432      	add	r2, r6
 802ae0a:	60a3      	str	r3, [r4, #8]
 802ae0c:	6022      	str	r2, [r4, #0]
 802ae0e:	2000      	movs	r0, #0
 802ae10:	e7db      	b.n	802adca <__ssputs_r+0x58>
 802ae12:	462a      	mov	r2, r5
 802ae14:	f7ff ff87 	bl	802ad26 <_realloc_r>
 802ae18:	4606      	mov	r6, r0
 802ae1a:	2800      	cmp	r0, #0
 802ae1c:	d1e1      	bne.n	802ade2 <__ssputs_r+0x70>
 802ae1e:	6921      	ldr	r1, [r4, #16]
 802ae20:	4650      	mov	r0, sl
 802ae22:	f7fb fe79 	bl	8026b18 <_free_r>
 802ae26:	e7c7      	b.n	802adb8 <__ssputs_r+0x46>

0802ae28 <_svfiprintf_r>:
 802ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ae2c:	4698      	mov	r8, r3
 802ae2e:	898b      	ldrh	r3, [r1, #12]
 802ae30:	061b      	lsls	r3, r3, #24
 802ae32:	b09d      	sub	sp, #116	; 0x74
 802ae34:	4607      	mov	r7, r0
 802ae36:	460d      	mov	r5, r1
 802ae38:	4614      	mov	r4, r2
 802ae3a:	d50e      	bpl.n	802ae5a <_svfiprintf_r+0x32>
 802ae3c:	690b      	ldr	r3, [r1, #16]
 802ae3e:	b963      	cbnz	r3, 802ae5a <_svfiprintf_r+0x32>
 802ae40:	2140      	movs	r1, #64	; 0x40
 802ae42:	f7fb feb9 	bl	8026bb8 <_malloc_r>
 802ae46:	6028      	str	r0, [r5, #0]
 802ae48:	6128      	str	r0, [r5, #16]
 802ae4a:	b920      	cbnz	r0, 802ae56 <_svfiprintf_r+0x2e>
 802ae4c:	230c      	movs	r3, #12
 802ae4e:	603b      	str	r3, [r7, #0]
 802ae50:	f04f 30ff 	mov.w	r0, #4294967295
 802ae54:	e0d1      	b.n	802affa <_svfiprintf_r+0x1d2>
 802ae56:	2340      	movs	r3, #64	; 0x40
 802ae58:	616b      	str	r3, [r5, #20]
 802ae5a:	2300      	movs	r3, #0
 802ae5c:	9309      	str	r3, [sp, #36]	; 0x24
 802ae5e:	2320      	movs	r3, #32
 802ae60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ae64:	f8cd 800c 	str.w	r8, [sp, #12]
 802ae68:	2330      	movs	r3, #48	; 0x30
 802ae6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802b014 <_svfiprintf_r+0x1ec>
 802ae6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ae72:	f04f 0901 	mov.w	r9, #1
 802ae76:	4623      	mov	r3, r4
 802ae78:	469a      	mov	sl, r3
 802ae7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ae7e:	b10a      	cbz	r2, 802ae84 <_svfiprintf_r+0x5c>
 802ae80:	2a25      	cmp	r2, #37	; 0x25
 802ae82:	d1f9      	bne.n	802ae78 <_svfiprintf_r+0x50>
 802ae84:	ebba 0b04 	subs.w	fp, sl, r4
 802ae88:	d00b      	beq.n	802aea2 <_svfiprintf_r+0x7a>
 802ae8a:	465b      	mov	r3, fp
 802ae8c:	4622      	mov	r2, r4
 802ae8e:	4629      	mov	r1, r5
 802ae90:	4638      	mov	r0, r7
 802ae92:	f7ff ff6e 	bl	802ad72 <__ssputs_r>
 802ae96:	3001      	adds	r0, #1
 802ae98:	f000 80aa 	beq.w	802aff0 <_svfiprintf_r+0x1c8>
 802ae9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802ae9e:	445a      	add	r2, fp
 802aea0:	9209      	str	r2, [sp, #36]	; 0x24
 802aea2:	f89a 3000 	ldrb.w	r3, [sl]
 802aea6:	2b00      	cmp	r3, #0
 802aea8:	f000 80a2 	beq.w	802aff0 <_svfiprintf_r+0x1c8>
 802aeac:	2300      	movs	r3, #0
 802aeae:	f04f 32ff 	mov.w	r2, #4294967295
 802aeb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802aeb6:	f10a 0a01 	add.w	sl, sl, #1
 802aeba:	9304      	str	r3, [sp, #16]
 802aebc:	9307      	str	r3, [sp, #28]
 802aebe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802aec2:	931a      	str	r3, [sp, #104]	; 0x68
 802aec4:	4654      	mov	r4, sl
 802aec6:	2205      	movs	r2, #5
 802aec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802aecc:	4851      	ldr	r0, [pc, #324]	; (802b014 <_svfiprintf_r+0x1ec>)
 802aece:	f7d5 f9bf 	bl	8000250 <memchr>
 802aed2:	9a04      	ldr	r2, [sp, #16]
 802aed4:	b9d8      	cbnz	r0, 802af0e <_svfiprintf_r+0xe6>
 802aed6:	06d0      	lsls	r0, r2, #27
 802aed8:	bf44      	itt	mi
 802aeda:	2320      	movmi	r3, #32
 802aedc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802aee0:	0711      	lsls	r1, r2, #28
 802aee2:	bf44      	itt	mi
 802aee4:	232b      	movmi	r3, #43	; 0x2b
 802aee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802aeea:	f89a 3000 	ldrb.w	r3, [sl]
 802aeee:	2b2a      	cmp	r3, #42	; 0x2a
 802aef0:	d015      	beq.n	802af1e <_svfiprintf_r+0xf6>
 802aef2:	9a07      	ldr	r2, [sp, #28]
 802aef4:	4654      	mov	r4, sl
 802aef6:	2000      	movs	r0, #0
 802aef8:	f04f 0c0a 	mov.w	ip, #10
 802aefc:	4621      	mov	r1, r4
 802aefe:	f811 3b01 	ldrb.w	r3, [r1], #1
 802af02:	3b30      	subs	r3, #48	; 0x30
 802af04:	2b09      	cmp	r3, #9
 802af06:	d94e      	bls.n	802afa6 <_svfiprintf_r+0x17e>
 802af08:	b1b0      	cbz	r0, 802af38 <_svfiprintf_r+0x110>
 802af0a:	9207      	str	r2, [sp, #28]
 802af0c:	e014      	b.n	802af38 <_svfiprintf_r+0x110>
 802af0e:	eba0 0308 	sub.w	r3, r0, r8
 802af12:	fa09 f303 	lsl.w	r3, r9, r3
 802af16:	4313      	orrs	r3, r2
 802af18:	9304      	str	r3, [sp, #16]
 802af1a:	46a2      	mov	sl, r4
 802af1c:	e7d2      	b.n	802aec4 <_svfiprintf_r+0x9c>
 802af1e:	9b03      	ldr	r3, [sp, #12]
 802af20:	1d19      	adds	r1, r3, #4
 802af22:	681b      	ldr	r3, [r3, #0]
 802af24:	9103      	str	r1, [sp, #12]
 802af26:	2b00      	cmp	r3, #0
 802af28:	bfbb      	ittet	lt
 802af2a:	425b      	neglt	r3, r3
 802af2c:	f042 0202 	orrlt.w	r2, r2, #2
 802af30:	9307      	strge	r3, [sp, #28]
 802af32:	9307      	strlt	r3, [sp, #28]
 802af34:	bfb8      	it	lt
 802af36:	9204      	strlt	r2, [sp, #16]
 802af38:	7823      	ldrb	r3, [r4, #0]
 802af3a:	2b2e      	cmp	r3, #46	; 0x2e
 802af3c:	d10c      	bne.n	802af58 <_svfiprintf_r+0x130>
 802af3e:	7863      	ldrb	r3, [r4, #1]
 802af40:	2b2a      	cmp	r3, #42	; 0x2a
 802af42:	d135      	bne.n	802afb0 <_svfiprintf_r+0x188>
 802af44:	9b03      	ldr	r3, [sp, #12]
 802af46:	1d1a      	adds	r2, r3, #4
 802af48:	681b      	ldr	r3, [r3, #0]
 802af4a:	9203      	str	r2, [sp, #12]
 802af4c:	2b00      	cmp	r3, #0
 802af4e:	bfb8      	it	lt
 802af50:	f04f 33ff 	movlt.w	r3, #4294967295
 802af54:	3402      	adds	r4, #2
 802af56:	9305      	str	r3, [sp, #20]
 802af58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802b024 <_svfiprintf_r+0x1fc>
 802af5c:	7821      	ldrb	r1, [r4, #0]
 802af5e:	2203      	movs	r2, #3
 802af60:	4650      	mov	r0, sl
 802af62:	f7d5 f975 	bl	8000250 <memchr>
 802af66:	b140      	cbz	r0, 802af7a <_svfiprintf_r+0x152>
 802af68:	2340      	movs	r3, #64	; 0x40
 802af6a:	eba0 000a 	sub.w	r0, r0, sl
 802af6e:	fa03 f000 	lsl.w	r0, r3, r0
 802af72:	9b04      	ldr	r3, [sp, #16]
 802af74:	4303      	orrs	r3, r0
 802af76:	3401      	adds	r4, #1
 802af78:	9304      	str	r3, [sp, #16]
 802af7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802af7e:	4826      	ldr	r0, [pc, #152]	; (802b018 <_svfiprintf_r+0x1f0>)
 802af80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802af84:	2206      	movs	r2, #6
 802af86:	f7d5 f963 	bl	8000250 <memchr>
 802af8a:	2800      	cmp	r0, #0
 802af8c:	d038      	beq.n	802b000 <_svfiprintf_r+0x1d8>
 802af8e:	4b23      	ldr	r3, [pc, #140]	; (802b01c <_svfiprintf_r+0x1f4>)
 802af90:	bb1b      	cbnz	r3, 802afda <_svfiprintf_r+0x1b2>
 802af92:	9b03      	ldr	r3, [sp, #12]
 802af94:	3307      	adds	r3, #7
 802af96:	f023 0307 	bic.w	r3, r3, #7
 802af9a:	3308      	adds	r3, #8
 802af9c:	9303      	str	r3, [sp, #12]
 802af9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802afa0:	4433      	add	r3, r6
 802afa2:	9309      	str	r3, [sp, #36]	; 0x24
 802afa4:	e767      	b.n	802ae76 <_svfiprintf_r+0x4e>
 802afa6:	fb0c 3202 	mla	r2, ip, r2, r3
 802afaa:	460c      	mov	r4, r1
 802afac:	2001      	movs	r0, #1
 802afae:	e7a5      	b.n	802aefc <_svfiprintf_r+0xd4>
 802afb0:	2300      	movs	r3, #0
 802afb2:	3401      	adds	r4, #1
 802afb4:	9305      	str	r3, [sp, #20]
 802afb6:	4619      	mov	r1, r3
 802afb8:	f04f 0c0a 	mov.w	ip, #10
 802afbc:	4620      	mov	r0, r4
 802afbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 802afc2:	3a30      	subs	r2, #48	; 0x30
 802afc4:	2a09      	cmp	r2, #9
 802afc6:	d903      	bls.n	802afd0 <_svfiprintf_r+0x1a8>
 802afc8:	2b00      	cmp	r3, #0
 802afca:	d0c5      	beq.n	802af58 <_svfiprintf_r+0x130>
 802afcc:	9105      	str	r1, [sp, #20]
 802afce:	e7c3      	b.n	802af58 <_svfiprintf_r+0x130>
 802afd0:	fb0c 2101 	mla	r1, ip, r1, r2
 802afd4:	4604      	mov	r4, r0
 802afd6:	2301      	movs	r3, #1
 802afd8:	e7f0      	b.n	802afbc <_svfiprintf_r+0x194>
 802afda:	ab03      	add	r3, sp, #12
 802afdc:	9300      	str	r3, [sp, #0]
 802afde:	462a      	mov	r2, r5
 802afe0:	4b0f      	ldr	r3, [pc, #60]	; (802b020 <_svfiprintf_r+0x1f8>)
 802afe2:	a904      	add	r1, sp, #16
 802afe4:	4638      	mov	r0, r7
 802afe6:	f7fc f82b 	bl	8027040 <_printf_float>
 802afea:	1c42      	adds	r2, r0, #1
 802afec:	4606      	mov	r6, r0
 802afee:	d1d6      	bne.n	802af9e <_svfiprintf_r+0x176>
 802aff0:	89ab      	ldrh	r3, [r5, #12]
 802aff2:	065b      	lsls	r3, r3, #25
 802aff4:	f53f af2c 	bmi.w	802ae50 <_svfiprintf_r+0x28>
 802aff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 802affa:	b01d      	add	sp, #116	; 0x74
 802affc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b000:	ab03      	add	r3, sp, #12
 802b002:	9300      	str	r3, [sp, #0]
 802b004:	462a      	mov	r2, r5
 802b006:	4b06      	ldr	r3, [pc, #24]	; (802b020 <_svfiprintf_r+0x1f8>)
 802b008:	a904      	add	r1, sp, #16
 802b00a:	4638      	mov	r0, r7
 802b00c:	f7fc faa4 	bl	8027558 <_printf_i>
 802b010:	e7eb      	b.n	802afea <_svfiprintf_r+0x1c2>
 802b012:	bf00      	nop
 802b014:	0802f4bc 	.word	0x0802f4bc
 802b018:	0802f4c6 	.word	0x0802f4c6
 802b01c:	08027041 	.word	0x08027041
 802b020:	0802ad73 	.word	0x0802ad73
 802b024:	0802f4c2 	.word	0x0802f4c2

0802b028 <nan>:
 802b028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802b030 <nan+0x8>
 802b02c:	4770      	bx	lr
 802b02e:	bf00      	nop
 802b030:	00000000 	.word	0x00000000
 802b034:	7ff80000 	.word	0x7ff80000

0802b038 <__sread>:
 802b038:	b510      	push	{r4, lr}
 802b03a:	460c      	mov	r4, r1
 802b03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b040:	f000 f8ba 	bl	802b1b8 <_read_r>
 802b044:	2800      	cmp	r0, #0
 802b046:	bfab      	itete	ge
 802b048:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802b04a:	89a3      	ldrhlt	r3, [r4, #12]
 802b04c:	181b      	addge	r3, r3, r0
 802b04e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802b052:	bfac      	ite	ge
 802b054:	6563      	strge	r3, [r4, #84]	; 0x54
 802b056:	81a3      	strhlt	r3, [r4, #12]
 802b058:	bd10      	pop	{r4, pc}

0802b05a <__swrite>:
 802b05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b05e:	461f      	mov	r7, r3
 802b060:	898b      	ldrh	r3, [r1, #12]
 802b062:	05db      	lsls	r3, r3, #23
 802b064:	4605      	mov	r5, r0
 802b066:	460c      	mov	r4, r1
 802b068:	4616      	mov	r6, r2
 802b06a:	d505      	bpl.n	802b078 <__swrite+0x1e>
 802b06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b070:	2302      	movs	r3, #2
 802b072:	2200      	movs	r2, #0
 802b074:	f000 f886 	bl	802b184 <_lseek_r>
 802b078:	89a3      	ldrh	r3, [r4, #12]
 802b07a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b07e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b082:	81a3      	strh	r3, [r4, #12]
 802b084:	4632      	mov	r2, r6
 802b086:	463b      	mov	r3, r7
 802b088:	4628      	mov	r0, r5
 802b08a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b08e:	f000 b835 	b.w	802b0fc <_write_r>

0802b092 <__sseek>:
 802b092:	b510      	push	{r4, lr}
 802b094:	460c      	mov	r4, r1
 802b096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b09a:	f000 f873 	bl	802b184 <_lseek_r>
 802b09e:	1c43      	adds	r3, r0, #1
 802b0a0:	89a3      	ldrh	r3, [r4, #12]
 802b0a2:	bf15      	itete	ne
 802b0a4:	6560      	strne	r0, [r4, #84]	; 0x54
 802b0a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802b0aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802b0ae:	81a3      	strheq	r3, [r4, #12]
 802b0b0:	bf18      	it	ne
 802b0b2:	81a3      	strhne	r3, [r4, #12]
 802b0b4:	bd10      	pop	{r4, pc}

0802b0b6 <__sclose>:
 802b0b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b0ba:	f000 b831 	b.w	802b120 <_close_r>

0802b0be <strncmp>:
 802b0be:	b510      	push	{r4, lr}
 802b0c0:	b16a      	cbz	r2, 802b0de <strncmp+0x20>
 802b0c2:	3901      	subs	r1, #1
 802b0c4:	1884      	adds	r4, r0, r2
 802b0c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 802b0ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802b0ce:	4293      	cmp	r3, r2
 802b0d0:	d103      	bne.n	802b0da <strncmp+0x1c>
 802b0d2:	42a0      	cmp	r0, r4
 802b0d4:	d001      	beq.n	802b0da <strncmp+0x1c>
 802b0d6:	2b00      	cmp	r3, #0
 802b0d8:	d1f5      	bne.n	802b0c6 <strncmp+0x8>
 802b0da:	1a98      	subs	r0, r3, r2
 802b0dc:	bd10      	pop	{r4, pc}
 802b0de:	4610      	mov	r0, r2
 802b0e0:	e7fc      	b.n	802b0dc <strncmp+0x1e>

0802b0e2 <__ascii_wctomb>:
 802b0e2:	b149      	cbz	r1, 802b0f8 <__ascii_wctomb+0x16>
 802b0e4:	2aff      	cmp	r2, #255	; 0xff
 802b0e6:	bf85      	ittet	hi
 802b0e8:	238a      	movhi	r3, #138	; 0x8a
 802b0ea:	6003      	strhi	r3, [r0, #0]
 802b0ec:	700a      	strbls	r2, [r1, #0]
 802b0ee:	f04f 30ff 	movhi.w	r0, #4294967295
 802b0f2:	bf98      	it	ls
 802b0f4:	2001      	movls	r0, #1
 802b0f6:	4770      	bx	lr
 802b0f8:	4608      	mov	r0, r1
 802b0fa:	4770      	bx	lr

0802b0fc <_write_r>:
 802b0fc:	b538      	push	{r3, r4, r5, lr}
 802b0fe:	4d07      	ldr	r5, [pc, #28]	; (802b11c <_write_r+0x20>)
 802b100:	4604      	mov	r4, r0
 802b102:	4608      	mov	r0, r1
 802b104:	4611      	mov	r1, r2
 802b106:	2200      	movs	r2, #0
 802b108:	602a      	str	r2, [r5, #0]
 802b10a:	461a      	mov	r2, r3
 802b10c:	f7d7 ff23 	bl	8002f56 <_write>
 802b110:	1c43      	adds	r3, r0, #1
 802b112:	d102      	bne.n	802b11a <_write_r+0x1e>
 802b114:	682b      	ldr	r3, [r5, #0]
 802b116:	b103      	cbz	r3, 802b11a <_write_r+0x1e>
 802b118:	6023      	str	r3, [r4, #0]
 802b11a:	bd38      	pop	{r3, r4, r5, pc}
 802b11c:	200571d8 	.word	0x200571d8

0802b120 <_close_r>:
 802b120:	b538      	push	{r3, r4, r5, lr}
 802b122:	4d06      	ldr	r5, [pc, #24]	; (802b13c <_close_r+0x1c>)
 802b124:	2300      	movs	r3, #0
 802b126:	4604      	mov	r4, r0
 802b128:	4608      	mov	r0, r1
 802b12a:	602b      	str	r3, [r5, #0]
 802b12c:	f7d7 ff2f 	bl	8002f8e <_close>
 802b130:	1c43      	adds	r3, r0, #1
 802b132:	d102      	bne.n	802b13a <_close_r+0x1a>
 802b134:	682b      	ldr	r3, [r5, #0]
 802b136:	b103      	cbz	r3, 802b13a <_close_r+0x1a>
 802b138:	6023      	str	r3, [r4, #0]
 802b13a:	bd38      	pop	{r3, r4, r5, pc}
 802b13c:	200571d8 	.word	0x200571d8

0802b140 <_fstat_r>:
 802b140:	b538      	push	{r3, r4, r5, lr}
 802b142:	4d07      	ldr	r5, [pc, #28]	; (802b160 <_fstat_r+0x20>)
 802b144:	2300      	movs	r3, #0
 802b146:	4604      	mov	r4, r0
 802b148:	4608      	mov	r0, r1
 802b14a:	4611      	mov	r1, r2
 802b14c:	602b      	str	r3, [r5, #0]
 802b14e:	f7d7 ff2a 	bl	8002fa6 <_fstat>
 802b152:	1c43      	adds	r3, r0, #1
 802b154:	d102      	bne.n	802b15c <_fstat_r+0x1c>
 802b156:	682b      	ldr	r3, [r5, #0]
 802b158:	b103      	cbz	r3, 802b15c <_fstat_r+0x1c>
 802b15a:	6023      	str	r3, [r4, #0]
 802b15c:	bd38      	pop	{r3, r4, r5, pc}
 802b15e:	bf00      	nop
 802b160:	200571d8 	.word	0x200571d8

0802b164 <_isatty_r>:
 802b164:	b538      	push	{r3, r4, r5, lr}
 802b166:	4d06      	ldr	r5, [pc, #24]	; (802b180 <_isatty_r+0x1c>)
 802b168:	2300      	movs	r3, #0
 802b16a:	4604      	mov	r4, r0
 802b16c:	4608      	mov	r0, r1
 802b16e:	602b      	str	r3, [r5, #0]
 802b170:	f7d7 ff29 	bl	8002fc6 <_isatty>
 802b174:	1c43      	adds	r3, r0, #1
 802b176:	d102      	bne.n	802b17e <_isatty_r+0x1a>
 802b178:	682b      	ldr	r3, [r5, #0]
 802b17a:	b103      	cbz	r3, 802b17e <_isatty_r+0x1a>
 802b17c:	6023      	str	r3, [r4, #0]
 802b17e:	bd38      	pop	{r3, r4, r5, pc}
 802b180:	200571d8 	.word	0x200571d8

0802b184 <_lseek_r>:
 802b184:	b538      	push	{r3, r4, r5, lr}
 802b186:	4d07      	ldr	r5, [pc, #28]	; (802b1a4 <_lseek_r+0x20>)
 802b188:	4604      	mov	r4, r0
 802b18a:	4608      	mov	r0, r1
 802b18c:	4611      	mov	r1, r2
 802b18e:	2200      	movs	r2, #0
 802b190:	602a      	str	r2, [r5, #0]
 802b192:	461a      	mov	r2, r3
 802b194:	f7d7 ff22 	bl	8002fdc <_lseek>
 802b198:	1c43      	adds	r3, r0, #1
 802b19a:	d102      	bne.n	802b1a2 <_lseek_r+0x1e>
 802b19c:	682b      	ldr	r3, [r5, #0]
 802b19e:	b103      	cbz	r3, 802b1a2 <_lseek_r+0x1e>
 802b1a0:	6023      	str	r3, [r4, #0]
 802b1a2:	bd38      	pop	{r3, r4, r5, pc}
 802b1a4:	200571d8 	.word	0x200571d8

0802b1a8 <_malloc_usable_size_r>:
 802b1a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b1ac:	1f18      	subs	r0, r3, #4
 802b1ae:	2b00      	cmp	r3, #0
 802b1b0:	bfbc      	itt	lt
 802b1b2:	580b      	ldrlt	r3, [r1, r0]
 802b1b4:	18c0      	addlt	r0, r0, r3
 802b1b6:	4770      	bx	lr

0802b1b8 <_read_r>:
 802b1b8:	b538      	push	{r3, r4, r5, lr}
 802b1ba:	4d07      	ldr	r5, [pc, #28]	; (802b1d8 <_read_r+0x20>)
 802b1bc:	4604      	mov	r4, r0
 802b1be:	4608      	mov	r0, r1
 802b1c0:	4611      	mov	r1, r2
 802b1c2:	2200      	movs	r2, #0
 802b1c4:	602a      	str	r2, [r5, #0]
 802b1c6:	461a      	mov	r2, r3
 802b1c8:	f7d7 fea8 	bl	8002f1c <_read>
 802b1cc:	1c43      	adds	r3, r0, #1
 802b1ce:	d102      	bne.n	802b1d6 <_read_r+0x1e>
 802b1d0:	682b      	ldr	r3, [r5, #0]
 802b1d2:	b103      	cbz	r3, 802b1d6 <_read_r+0x1e>
 802b1d4:	6023      	str	r3, [r4, #0]
 802b1d6:	bd38      	pop	{r3, r4, r5, pc}
 802b1d8:	200571d8 	.word	0x200571d8

0802b1dc <_init>:
 802b1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b1de:	bf00      	nop
 802b1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b1e2:	bc08      	pop	{r3}
 802b1e4:	469e      	mov	lr, r3
 802b1e6:	4770      	bx	lr

0802b1e8 <_fini>:
 802b1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b1ea:	bf00      	nop
 802b1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b1ee:	bc08      	pop	{r3}
 802b1f0:	469e      	mov	lr, r3
 802b1f2:	4770      	bx	lr
