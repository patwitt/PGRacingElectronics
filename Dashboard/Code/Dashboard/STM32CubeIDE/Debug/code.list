
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002940c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004674  08029610  08029610  00039610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000a53c2  0802dc84  0802dc84  0003dc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000000f8  080d3048  080d3048  000e3048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000cc  080d3140  080d3140  000e3140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080d320c  080d320c  001898c8  2**0
                  CONTENTS
  7 .ARM          00000008  080d320c  080d320c  000e320c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080d3214  080d3214  001898c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000030  080d3214  080d3214  000e3214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080d3244  080d3244  000e3244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000024c  20000000  080d324c  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00056b84  2000024c  080d3498  000f024c  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  20056dd0  080d3498  000f6dd0  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  001898c8  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 000898c8  90000000  90000000  00100000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000d7758  00000000  00000000  001898f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0001736c  00000000  00000000  0026104e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003ff0  00000000  00000000  002783c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000039d0  00000000  00000000  0027c3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00039d17  00000000  00000000  0027fd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004dd36  00000000  00000000  002b9a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0012ef5f  00000000  00000000  003077cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  0043672c  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00011b84  00000000  00000000  00436800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000024c 	.word	0x2000024c
 800021c:	00000000 	.word	0x00000000
 8000220:	080295f4 	.word	0x080295f4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000250 	.word	0x20000250
 800023c:	080295f4 	.word	0x080295f4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <HAL_TIM_PWM_PulseFinishedCallback>:
#define LED_N			15

volatile uint16_t leds[RESET_LEN + 24 * LED_N];

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef* htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80009d8:	2100      	movs	r1, #0
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f00e fb80 	bl	800f0e0 <HAL_TIM_PWM_Stop_DMA>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ee:	463b      	mov	r3, r7
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <MX_ADC1_Init+0x98>)
 80009fc:	4a21      	ldr	r2, [pc, #132]	; (8000a84 <MX_ADC1_Init+0x9c>)
 80009fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_ADC1_Init+0x98>)
 8000a02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <MX_ADC1_Init+0x98>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_ADC1_Init+0x98>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_ADC1_Init+0x98>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_ADC1_Init+0x98>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_ADC1_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_ADC1_Init+0x98>)
 8000a2a:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <MX_ADC1_Init+0xa0>)
 8000a2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_ADC1_Init+0x98>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_ADC1_Init+0x98>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_ADC1_Init+0x98>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_ADC1_Init+0x98>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <MX_ADC1_Init+0x98>)
 8000a4a:	f009 f95f 	bl	8009d0c <HAL_ADC_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a54:	f001 fb30 	bl	80020b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a58:	230b      	movs	r3, #11
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a60:	2307      	movs	r3, #7
 8000a62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_ADC1_Init+0x98>)
 8000a6a:	f009 faf9 	bl	800a060 <HAL_ADC_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a74:	f001 fb20 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2005697c 	.word	0x2005697c
 8000a84:	40012000 	.word	0x40012000
 8000a88:	0f000001 	.word	0x0f000001

08000a8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <HAL_ADC_MspInit+0x74>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d123      	bne.n	8000af6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_ADC_MspInit+0x78>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <HAL_ADC_MspInit+0x78>)
 8000ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_ADC_MspInit+0x78>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_ADC_MspInit+0x78>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <HAL_ADC_MspInit+0x78>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_ADC_MspInit+0x78>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <HAL_ADC_MspInit+0x7c>)
 8000af2:	f00b f99f 	bl	800be34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	; 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40012000 	.word	0x40012000
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020800 	.word	0x40020800

08000b0c <FLASH_QSPI_Init>:
static uint8_t FLASH_QSPI_Configuration(void);
static uint8_t FLASH_QSPI_ResetChip(void);
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
uint8_t FLASH_QSPI_Init(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <FLASH_QSPI_Init+0x70>)
 8000b12:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <FLASH_QSPI_Init+0x74>)
 8000b14:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8000b16:	4819      	ldr	r0, [pc, #100]	; (8000b7c <FLASH_QSPI_Init+0x70>)
 8000b18:	f00c f8dc 	bl	800ccd4 <HAL_QSPI_DeInit>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <FLASH_QSPI_Init+0x1a>
		return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e028      	b.n	8000b78 <FLASH_QSPI_Init+0x6c>
	}

	MX_QUADSPI_Init();
 8000b26:	f001 facd 	bl	80020c4 <MX_QUADSPI_Init>

	if (FLASH_QSPI_ResetChip() != HAL_OK) {
 8000b2a:	f000 f82b 	bl	8000b84 <FLASH_QSPI_ResetChip>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <FLASH_QSPI_Init+0x2c>
		return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e01f      	b.n	8000b78 <FLASH_QSPI_Init+0x6c>
	}

	HAL_Delay(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f009 f8c3 	bl	8009cc4 <HAL_Delay>

	if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
 8000b3e:	f000 f87f 	bl	8000c40 <FLASH_QSPI_AutoPollingMemReady>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <FLASH_QSPI_Init+0x40>
		return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e015      	b.n	8000b78 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8000b4c:	f000 f8b0 	bl	8000cb0 <FLASH_QSPI_WriteEnable>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <FLASH_QSPI_Init+0x4e>

		return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <FLASH_QSPI_Init+0x6c>
	}

	/* Sets QE bit and starts QUADSPI communication */
	if (FLASH_QSPI_Configuration() != HAL_OK) {
 8000b5a:	f000 f8f3 	bl	8000d44 <FLASH_QSPI_Configuration>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <FLASH_QSPI_Init+0x5c>
		return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e007      	b.n	8000b78 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 8000b68:	f000 f962 	bl	8000e30 <FLASH_QSPI_EnableMemoryMappedMode>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <FLASH_QSPI_Init+0x6a>
			return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e000      	b.n	8000b78 <FLASH_QSPI_Init+0x6c>
		}

	return HAL_OK;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20056b8c 	.word	0x20056b8c
 8000b80:	a0001000 	.word	0xa0001000

08000b84 <FLASH_QSPI_ResetChip>:
	}

	return HAL_OK;
}

uint8_t FLASH_QSPI_ResetChip() {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b090      	sub	sp, #64	; 0x40
 8000b88:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.Instruction = ENABLE_RESET_CMD;
 8000b8e:	2366      	movs	r3, #102	; 0x66
 8000b90:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b96:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9c:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000baa:	2300      	movs	r3, #0
 8000bac:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481d      	ldr	r0, [pc, #116]	; (8000c3c <FLASH_QSPI_ResetChip+0xb8>)
 8000bc8:	f00c fa62 	bl	800d090 <HAL_QSPI_Command>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <FLASH_QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e02e      	b.n	8000c34 <FLASH_QSPI_ResetChip+0xb0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bda:	e003      	b.n	8000be4 <FLASH_QSPI_ResetChip+0x60>
		__NOP();
 8000bdc:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8000bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000be0:	3301      	adds	r3, #1
 8000be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000be6:	2b2e      	cmp	r3, #46	; 0x2e
 8000be8:	d9f8      	bls.n	8000bdc <FLASH_QSPI_ResetChip+0x58>
	}

	sCommand.Instruction = RESET_DEVICE_CMD;
 8000bea:	2399      	movs	r3, #153	; 0x99
 8000bec:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf2:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf8:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c02:	2300      	movs	r3, #0
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c06:	2300      	movs	r3, #0
 8000c08:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c20:	4619      	mov	r1, r3
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <FLASH_QSPI_ResetChip+0xb8>)
 8000c24:	f00c fa34 	bl	800d090 <HAL_QSPI_Command>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <FLASH_QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e000      	b.n	8000c34 <FLASH_QSPI_ResetChip+0xb0>
	}
	return HAL_OK;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3740      	adds	r7, #64	; 0x40
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20056b8c 	.word	0x20056b8c

08000c40 <FLASH_QSPI_AutoPollingMemReady>:

uint8_t FLASH_QSPI_AutoPollingMemReady(void) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b094      	sub	sp, #80	; 0x50
 8000c44:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 8000c46:	2305      	movs	r3, #5
 8000c48:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000c58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c66:	2300      	movs	r3, #0
 8000c68:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
	sConfig.Mask = AT25SF128A_SR_WIP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000c7e:	2310      	movs	r3, #16
 8000c80:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000c82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c86:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000c88:	463a      	mov	r2, r7
 8000c8a:	f107 0118 	add.w	r1, r7, #24
 8000c8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <FLASH_QSPI_AutoPollingMemReady+0x6c>)
 8000c94:	f00c fb89 	bl	800d3aa <HAL_QSPI_AutoPolling>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <FLASH_QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e000      	b.n	8000ca4 <FLASH_QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3750      	adds	r7, #80	; 0x50
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20056b8c 	.word	0x20056b8c

08000cb0 <FLASH_QSPI_WriteEnable>:

static uint8_t FLASH_QSPI_WriteEnable(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b094      	sub	sp, #80	; 0x50
 8000cb4:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.Instruction = WRITE_ENABLE_CMD;
 8000cb6:	2306      	movs	r3, #6
 8000cb8:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000cdc:	f107 0318 	add.w	r3, r7, #24
 8000ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4816      	ldr	r0, [pc, #88]	; (8000d40 <FLASH_QSPI_WriteEnable+0x90>)
 8000ce8:	f00c f9d2 	bl	800d090 <HAL_QSPI_Command>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <FLASH_QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e01f      	b.n	8000d36 <FLASH_QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000d06:	2310      	movs	r3, #16
 8000d08:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000d0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d0e:	617b      	str	r3, [r7, #20]
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 8000d10:	2305      	movs	r3, #5
 8000d12:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d18:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000d1a:	463a      	mov	r2, r7
 8000d1c:	f107 0118 	add.w	r1, r7, #24
 8000d20:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <FLASH_QSPI_WriteEnable+0x90>)
 8000d26:	f00c fb40 	bl	800d3aa <HAL_QSPI_AutoPolling>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <FLASH_QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <FLASH_QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3750      	adds	r7, #80	; 0x50
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20056b8c 	.word	0x20056b8c

08000d44 <FLASH_QSPI_Configuration>:

/*Enable quad mode and set dummy cycles count*/
uint8_t FLASH_QSPI_Configuration(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b090      	sub	sp, #64	; 0x40
 8000d48:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t reg;

	/*read configuration register*/
	sCommand.Instruction = READ_STATUS_REG_MIDDLE_CMD;
 8000d4a:	2335      	movs	r3, #53	; 0x35
 8000d4c:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d52:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000d5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d7e:	4619      	mov	r1, r3
 8000d80:	482a      	ldr	r0, [pc, #168]	; (8000e2c <FLASH_QSPI_Configuration+0xe8>)
 8000d82:	f00c f985 	bl	800d090 <HAL_QSPI_Command>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <FLASH_QSPI_Configuration+0x4c>
			!= HAL_OK) {
		return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e049      	b.n	8000e24 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Receive(&hqspi, &reg,
 8000d90:	1dfb      	adds	r3, r7, #7
 8000d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d96:	4619      	mov	r1, r3
 8000d98:	4824      	ldr	r0, [pc, #144]	; (8000e2c <FLASH_QSPI_Configuration+0xe8>)
 8000d9a:	f00c fa69 	bl	800d270 <HAL_QSPI_Receive>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <FLASH_QSPI_Configuration+0x64>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e03d      	b.n	8000e24 <FLASH_QSPI_Configuration+0xe0>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8000da8:	f7ff ff82 	bl	8000cb0 <FLASH_QSPI_WriteEnable>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <FLASH_QSPI_Configuration+0x72>

		return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e036      	b.n	8000e24 <FLASH_QSPI_Configuration+0xe0>
	}

	/*set dummy cycles*/
	//MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
	/* Set QE bit in register to enable QUADSPI mode in at25sf128a */
	reg = reg | 0x02;
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	71fb      	strb	r3, [r7, #7]

	sCommand.Instruction = WRITE_STATUS_REG_MIDDLE_CMD;
 8000dc0:	2331      	movs	r3, #49	; 0x31
 8000dc2:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc8:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000dde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000df4:	4619      	mov	r1, r3
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <FLASH_QSPI_Configuration+0xe8>)
 8000df8:	f00c f94a 	bl	800d090 <HAL_QSPI_Command>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <FLASH_QSPI_Configuration+0xc2>
			!= HAL_OK) {
		return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00e      	b.n	8000e24 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg,
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4807      	ldr	r0, [pc, #28]	; (8000e2c <FLASH_QSPI_Configuration+0xe8>)
 8000e10:	f00c f99c 	bl	800d14c <HAL_QSPI_Transmit>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <FLASH_QSPI_Configuration+0xde>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8000e1a:	f001 f94d 	bl	80020b8 <Error_Handler>
		return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e000      	b.n	8000e24 <FLASH_QSPI_Configuration+0xe0>
	}
	return HAL_OK;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3740      	adds	r7, #64	; 0x40
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20056b8c 	.word	0x20056b8c

08000e30 <FLASH_QSPI_EnableMemoryMappedMode>:
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
}

uint8_t FLASH_QSPI_EnableMemoryMappedMode(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b090      	sub	sp, #64	; 0x40
 8000e34:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	s_command.Instruction = QUAD_INOUT_FAST_READ_CMD;
 8000e36:	23eb      	movs	r3, #235	; 0xeb
 8000e38:	60bb      	str	r3, [r7, #8]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e3e:	623b      	str	r3, [r7, #32]
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8000e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e44:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8000e46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
		s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
		s_command.AlternateBytes = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 8000e60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DataMode = QSPI_DATA_4_LINES;
 8000e66:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.NbData = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.Address = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
	s_command.DummyCycles = 0x4; //moze 4?
 8000e74:	2304      	movs	r3, #4
 8000e76:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &sMemMappedCfg) != HAL_OK) {
 8000e7c:	463a      	mov	r2, r7
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	4619      	mov	r1, r3
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <FLASH_QSPI_EnableMemoryMappedMode+0x70>)
 8000e86:	f00c fb07 	bl	800d498 <HAL_QSPI_MemoryMapped>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <FLASH_QSPI_EnableMemoryMappedMode+0x64>
		return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e000      	b.n	8000e96 <FLASH_QSPI_EnableMemoryMappedMode+0x66>
	}
	return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3740      	adds	r7, #64	; 0x40
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20056b8c 	.word	0x20056b8c

08000ea4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <MX_CAN1_Init+0x64>)
 8000eaa:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <MX_CAN1_Init+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_CAN1_Init+0x64>)
 8000eb0:	2209      	movs	r2, #9
 8000eb2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_CAN1_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_CAN1_Init+0x64>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_CAN1_Init+0x64>)
 8000ec2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ec6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_CAN1_Init+0x64>)
 8000eca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ece:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <MX_CAN1_Init+0x64>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_CAN1_Init+0x64>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <MX_CAN1_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_CAN1_Init+0x64>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <MX_CAN1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_CAN1_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <MX_CAN1_Init+0x64>)
 8000ef6:	f009 faf7 	bl	800a4e8 <HAL_CAN_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f00:	f001 f8da 	bl	80020b8 <Error_Handler>

	//HAL_CAN_Start(&hcan1);

  /* USER CODE END CAN1_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200569ec 	.word	0x200569ec
 8000f0c:	40006400 	.word	0x40006400

08000f10 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <MX_CAN2_Init+0xa0>)
 8000f18:	4a26      	ldr	r2, [pc, #152]	; (8000fb4 <MX_CAN2_Init+0xa4>)
 8000f1a:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <MX_CAN2_Init+0xa0>)
 8000f1e:	2209      	movs	r2, #9
 8000f20:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <MX_CAN2_Init+0xa0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000f28:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_CAN2_Init+0xa0>)
 8000f2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f2e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <MX_CAN2_Init+0xa0>)
 8000f32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f36:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_CAN2_Init+0xa0>)
 8000f3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f3e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_CAN2_Init+0xa0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_CAN2_Init+0xa0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_CAN2_Init+0xa0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_CAN2_Init+0xa0>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_CAN2_Init+0xa0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_CAN2_Init+0xa0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f64:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <MX_CAN2_Init+0xa0>)
 8000f66:	f009 fabf 	bl	800a4e8 <HAL_CAN_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_CAN2_Init+0x64>
  {
    Error_Handler();
 8000f70:	f001 f8a2 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000f74:	2301      	movs	r3, #1
 8000f76:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8000f78:	2312      	movs	r3, #18
 8000f7a:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 10;
 8000f98:	230a      	movs	r3, #10
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <MX_CAN2_Init+0xa0>)
 8000fa2:	f009 fb9d 	bl	800a6e0 <HAL_CAN_ConfigFilter>

	//HAL_CAN_Start(&hcan2);

  /* USER CODE END CAN2_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	3728      	adds	r7, #40	; 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200569c4 	.word	0x200569c4
 8000fb4:	40006800 	.word	0x40006800

08000fb8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08e      	sub	sp, #56	; 0x38
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a4c      	ldr	r2, [pc, #304]	; (8001108 <HAL_CAN_MspInit+0x150>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d13a      	bne.n	8001050 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000fda:	4b4c      	ldr	r3, [pc, #304]	; (800110c <HAL_CAN_MspInit+0x154>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	4a4a      	ldr	r2, [pc, #296]	; (800110c <HAL_CAN_MspInit+0x154>)
 8000fe2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000fe4:	4b49      	ldr	r3, [pc, #292]	; (800110c <HAL_CAN_MspInit+0x154>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d10b      	bne.n	8001004 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fec:	4b48      	ldr	r3, [pc, #288]	; (8001110 <HAL_CAN_MspInit+0x158>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a47      	ldr	r2, [pc, #284]	; (8001110 <HAL_CAN_MspInit+0x158>)
 8000ff2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b45      	ldr	r3, [pc, #276]	; (8001110 <HAL_CAN_MspInit+0x158>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001000:	623b      	str	r3, [r7, #32]
 8001002:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b42      	ldr	r3, [pc, #264]	; (8001110 <HAL_CAN_MspInit+0x158>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	4a41      	ldr	r2, [pc, #260]	; (8001110 <HAL_CAN_MspInit+0x158>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6313      	str	r3, [r2, #48]	; 0x30
 8001010:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <HAL_CAN_MspInit+0x158>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800101c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800102e:	2309      	movs	r3, #9
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	4836      	ldr	r0, [pc, #216]	; (8001114 <HAL_CAN_MspInit+0x15c>)
 800103a:	f00a fefb 	bl	800be34 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2103      	movs	r1, #3
 8001042:	2014      	movs	r0, #20
 8001044:	f00a f8c0 	bl	800b1c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001048:	2014      	movs	r0, #20
 800104a:	f00a f8d9 	bl	800b200 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800104e:	e056      	b.n	80010fe <HAL_CAN_MspInit+0x146>
  else if(canHandle->Instance==CAN2)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a30      	ldr	r2, [pc, #192]	; (8001118 <HAL_CAN_MspInit+0x160>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d151      	bne.n	80010fe <HAL_CAN_MspInit+0x146>
    __HAL_RCC_CAN3_CLK_ENABLE();
 800105a:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <HAL_CAN_MspInit+0x158>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a2c      	ldr	r2, [pc, #176]	; (8001110 <HAL_CAN_MspInit+0x158>)
 8001060:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <HAL_CAN_MspInit+0x158>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <HAL_CAN_MspInit+0x158>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a26      	ldr	r2, [pc, #152]	; (8001110 <HAL_CAN_MspInit+0x158>)
 8001078:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <HAL_CAN_MspInit+0x158>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <HAL_CAN_MspInit+0x154>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	4a1e      	ldr	r2, [pc, #120]	; (800110c <HAL_CAN_MspInit+0x154>)
 8001092:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <HAL_CAN_MspInit+0x154>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d10b      	bne.n	80010b4 <HAL_CAN_MspInit+0xfc>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <HAL_CAN_MspInit+0x158>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	4a1b      	ldr	r2, [pc, #108]	; (8001110 <HAL_CAN_MspInit+0x158>)
 80010a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010a6:	6413      	str	r3, [r2, #64]	; 0x40
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <HAL_CAN_MspInit+0x158>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <HAL_CAN_MspInit+0x158>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	4a15      	ldr	r2, [pc, #84]	; (8001110 <HAL_CAN_MspInit+0x158>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	6313      	str	r3, [r2, #48]	; 0x30
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <HAL_CAN_MspInit+0x158>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80010cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80010de:	2309      	movs	r3, #9
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	4619      	mov	r1, r3
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <HAL_CAN_MspInit+0x164>)
 80010ea:	f00a fea3 	bl	800be34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 3, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2103      	movs	r1, #3
 80010f2:	2040      	movs	r0, #64	; 0x40
 80010f4:	f00a f868 	bl	800b1c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80010f8:	2040      	movs	r0, #64	; 0x40
 80010fa:	f00a f881 	bl	800b200 <HAL_NVIC_EnableIRQ>
}
 80010fe:	bf00      	nop
 8001100:	3738      	adds	r7, #56	; 0x38
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40006400 	.word	0x40006400
 800110c:	20000268 	.word	0x20000268
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000
 8001118:	40006800 	.word	0x40006800
 800111c:	40020400 	.word	0x40020400

08001120 <HAL_CAN_RxFifo0MsgPendingCallback>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b091      	sub	sp, #68	; 0x44
 8001124:	af04      	add	r7, sp, #16
 8001126:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	f107 0214 	add.w	r2, r7, #20
 8001130:	2100      	movs	r1, #0
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f009 fc04 	bl	800a940 <HAL_CAN_GetRxMessage>
	if (hcan->Instance == CAN1) {
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a12      	ldr	r2, [pc, #72]	; (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10f      	bne.n	8001162 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		//ComputeEcumasterFrame(RxHeader, RxData);
		ComputeInternalFrame(RxHeader, RxData);
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	9303      	str	r3, [sp, #12]
 8001148:	466c      	mov	r4, sp
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001152:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115c:	f000 f8e4 	bl	8001328 <ComputeInternalFrame>
	} else {
		//ComputeInternalFrame(RxHeader, RxData);
		ComputeEcumasterFrame(RxHeader, RxData);
	}
}
 8001160:	e00e      	b.n	8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		ComputeEcumasterFrame(RxHeader, RxData);
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	9303      	str	r3, [sp, #12]
 8001168:	466c      	mov	r4, sp
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001172:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117c:	f000 f806 	bl	800118c <ComputeEcumasterFrame>
}
 8001180:	bf00      	nop
 8001182:	3734      	adds	r7, #52	; 0x34
 8001184:	46bd      	mov	sp, r7
 8001186:	bd90      	pop	{r4, r7, pc}
 8001188:	40006400 	.word	0x40006400

0800118c <ComputeEcumasterFrame>:

void ComputeEcumasterFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData) {
 800118c:	b084      	sub	sp, #16
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
 8001192:	f107 0c08 	add.w	ip, r7, #8
 8001196:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (RxHeader.StdId == Frame1) {
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80011a0:	d121      	bne.n	80011e6 <ComputeEcumasterFrame+0x5a>
		EcuData.rpm = LittleToBigEndian(&RxData[0]);
 80011a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011a4:	f000 f8cc 	bl	8001340 <LittleToBigEndian>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b5d      	ldr	r3, [pc, #372]	; (8001324 <ComputeEcumasterFrame+0x198>)
 80011ae:	801a      	strh	r2, [r3, #0]
		EcuData.tps = RxData[2];
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	789a      	ldrb	r2, [r3, #2]
 80011b4:	4b5b      	ldr	r3, [pc, #364]	; (8001324 <ComputeEcumasterFrame+0x198>)
 80011b6:	709a      	strb	r2, [r3, #2]
		EcuData.iat = RxData[3];
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	78da      	ldrb	r2, [r3, #3]
 80011bc:	4b59      	ldr	r3, [pc, #356]	; (8001324 <ComputeEcumasterFrame+0x198>)
 80011be:	70da      	strb	r2, [r3, #3]
		EcuData.map = LittleToBigEndian(&RxData[4]);
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	3304      	adds	r3, #4
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f8bb 	bl	8001340 <LittleToBigEndian>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b55      	ldr	r3, [pc, #340]	; (8001324 <ComputeEcumasterFrame+0x198>)
 80011d0:	809a      	strh	r2, [r3, #4]
		EcuData.injPW = LittleToBigEndian(&RxData[6]);
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	3306      	adds	r3, #6
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f8b2 	bl	8001340 <LittleToBigEndian>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	4b50      	ldr	r3, [pc, #320]	; (8001324 <ComputeEcumasterFrame+0x198>)
 80011e2:	80da      	strh	r2, [r3, #6]
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
		EcuData.TCTorqueReduction = RxData[6];
		EcuData.PitLimitTorqueReduction = RxData[7];
	}
}
 80011e4:	e097      	b.n	8001316 <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame3) {
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	f240 6202 	movw	r2, #1538	; 0x602
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d118      	bne.n	8001222 <ComputeEcumasterFrame+0x96>
		EcuData.speed = LittleToBigEndian(&RxData[0]);
 80011f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011f2:	f000 f8a5 	bl	8001340 <LittleToBigEndian>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b4a      	ldr	r3, [pc, #296]	; (8001324 <ComputeEcumasterFrame+0x198>)
 80011fc:	811a      	strh	r2, [r3, #8]
		EcuData.oilTemp = RxData[3];
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	78da      	ldrb	r2, [r3, #3]
 8001202:	4b48      	ldr	r3, [pc, #288]	; (8001324 <ComputeEcumasterFrame+0x198>)
 8001204:	72da      	strb	r2, [r3, #11]
		EcuData.oilPress = RxData[4];
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	791a      	ldrb	r2, [r3, #4]
 800120a:	4b46      	ldr	r3, [pc, #280]	; (8001324 <ComputeEcumasterFrame+0x198>)
 800120c:	731a      	strb	r2, [r3, #12]
		EcuData.clt = LittleToBigEndian(&RxData[6]);
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	3306      	adds	r3, #6
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f894 	bl	8001340 <LittleToBigEndian>
 8001218:	4603      	mov	r3, r0
 800121a:	b21a      	sxth	r2, r3
 800121c:	4b41      	ldr	r3, [pc, #260]	; (8001324 <ComputeEcumasterFrame+0x198>)
 800121e:	81da      	strh	r2, [r3, #14]
}
 8001220:	e079      	b.n	8001316 <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame4) {
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	f240 6203 	movw	r2, #1539	; 0x603
 8001228:	4293      	cmp	r3, r2
 800122a:	d123      	bne.n	8001274 <ComputeEcumasterFrame+0xe8>
		EcuData.ignAngle = RxData[0];
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b25a      	sxtb	r2, r3
 8001232:	4b3c      	ldr	r3, [pc, #240]	; (8001324 <ComputeEcumasterFrame+0x198>)
 8001234:	741a      	strb	r2, [r3, #16]
		EcuData.ignDwell = RxData[1];
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	785a      	ldrb	r2, [r3, #1]
 800123a:	4b3a      	ldr	r3, [pc, #232]	; (8001324 <ComputeEcumasterFrame+0x198>)
 800123c:	745a      	strb	r2, [r3, #17]
		EcuData.lambda = RxData[2];
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	789a      	ldrb	r2, [r3, #2]
 8001242:	4b38      	ldr	r3, [pc, #224]	; (8001324 <ComputeEcumasterFrame+0x198>)
 8001244:	749a      	strb	r2, [r3, #18]
		EcuData.lambdaCorrection = RxData[3];
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	78da      	ldrb	r2, [r3, #3]
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <ComputeEcumasterFrame+0x198>)
 800124c:	74da      	strb	r2, [r3, #19]
		EcuData.egt1 = LittleToBigEndian(&RxData[4]);
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	3304      	adds	r3, #4
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f874 	bl	8001340 <LittleToBigEndian>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	4b31      	ldr	r3, [pc, #196]	; (8001324 <ComputeEcumasterFrame+0x198>)
 800125e:	829a      	strh	r2, [r3, #20]
		EcuData.egt2 = LittleToBigEndian(&RxData[6]);
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	3306      	adds	r3, #6
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f86b 	bl	8001340 <LittleToBigEndian>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <ComputeEcumasterFrame+0x198>)
 8001270:	82da      	strh	r2, [r3, #22]
}
 8001272:	e050      	b.n	8001316 <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame5) {
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	f240 6204 	movw	r2, #1540	; 0x604
 800127a:	4293      	cmp	r3, r2
 800127c:	d120      	bne.n	80012c0 <ComputeEcumasterFrame+0x134>
		EcuData.gear = RxData[0];
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	781a      	ldrb	r2, [r3, #0]
 8001282:	4b28      	ldr	r3, [pc, #160]	; (8001324 <ComputeEcumasterFrame+0x198>)
 8001284:	761a      	strb	r2, [r3, #24]
		EcuData.ecuTemp = RxData[1];
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	3301      	adds	r3, #1
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b25a      	sxtb	r2, r3
 800128e:	4b25      	ldr	r3, [pc, #148]	; (8001324 <ComputeEcumasterFrame+0x198>)
 8001290:	765a      	strb	r2, [r3, #25]
		EcuData.batt = LittleToBigEndian(&RxData[2]);
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	3302      	adds	r3, #2
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f852 	bl	8001340 <LittleToBigEndian>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <ComputeEcumasterFrame+0x198>)
 80012a2:	835a      	strh	r2, [r3, #26]
		EcuData.errflag = LittleToBigEndian(&RxData[5]);
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	3305      	adds	r3, #5
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f849 	bl	8001340 <LittleToBigEndian>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <ComputeEcumasterFrame+0x198>)
 80012b4:	839a      	strh	r2, [r3, #28]
		EcuData.flags1 = RxData[7];
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	79da      	ldrb	r2, [r3, #7]
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <ComputeEcumasterFrame+0x198>)
 80012bc:	779a      	strb	r2, [r3, #30]
}
 80012be:	e02a      	b.n	8001316 <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame6) {
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	f240 6205 	movw	r2, #1541	; 0x605
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d125      	bne.n	8001316 <ComputeEcumasterFrame+0x18a>
		EcuData.DBWPosition = RxData[0];
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <ComputeEcumasterFrame+0x198>)
 80012d0:	77da      	strb	r2, [r3, #31]
		EcuData.DBWTrigger = RxData[1];
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	785a      	ldrb	r2, [r3, #1]
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <ComputeEcumasterFrame+0x198>)
 80012d8:	f883 2020 	strb.w	r2, [r3, #32]
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	3302      	adds	r3, #2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f82d 	bl	8001340 <LittleToBigEndian>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <ComputeEcumasterFrame+0x198>)
 80012ec:	845a      	strh	r2, [r3, #34]	; 0x22
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	3304      	adds	r3, #4
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f824 	bl	8001340 <LittleToBigEndian>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <ComputeEcumasterFrame+0x198>)
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		EcuData.TCTorqueReduction = RxData[6];
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	799a      	ldrb	r2, [r3, #6]
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <ComputeEcumasterFrame+0x198>)
 8001308:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		EcuData.PitLimitTorqueReduction = RxData[7];
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	79da      	ldrb	r2, [r3, #7]
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <ComputeEcumasterFrame+0x198>)
 8001312:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800131e:	b004      	add	sp, #16
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20023964 	.word	0x20023964

08001328 <ComputeInternalFrame>:

void ComputeInternalFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData) {
 8001328:	b084      	sub	sp, #16
 800132a:	b490      	push	{r4, r7}
 800132c:	af00      	add	r7, sp, #0
 800132e:	f107 0408 	add.w	r4, r7, #8
 8001332:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	bc90      	pop	{r4, r7}
 800133c:	b004      	add	sp, #16
 800133e:	4770      	bx	lr

08001340 <LittleToBigEndian>:

uint16_t LittleToBigEndian(uint8_t *data) {
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	uint16_t returnData = data[0] + data[1] * 0xFF;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b29a      	uxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3301      	adds	r3, #1
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4619      	mov	r1, r3
 8001358:	0209      	lsls	r1, r1, #8
 800135a:	1acb      	subs	r3, r1, r3
 800135c:	b29b      	uxth	r3, r3
 800135e:	4413      	add	r3, r2
 8001360:	81fb      	strh	r3, [r7, #14]
	return returnData;
 8001362:	89fb      	ldrh	r3, [r7, #14]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <MX_CRC_Init+0x3c>)
 8001376:	4a0e      	ldr	r2, [pc, #56]	; (80013b0 <MX_CRC_Init+0x40>)
 8001378:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_CRC_Init+0x3c>)
 800137c:	2200      	movs	r2, #0
 800137e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <MX_CRC_Init+0x3c>)
 8001382:	2200      	movs	r2, #0
 8001384:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_CRC_Init+0x3c>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MX_CRC_Init+0x3c>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_CRC_Init+0x3c>)
 8001394:	2201      	movs	r2, #1
 8001396:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_CRC_Init+0x3c>)
 800139a:	f009 ff4d 	bl	800b238 <HAL_CRC_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80013a4:	f000 fe88 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20056a14 	.word	0x20056a14
 80013b0:	40023000 	.word	0x40023000

080013b4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_CRC_MspInit+0x38>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d10b      	bne.n	80013de <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_CRC_MspInit+0x3c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <HAL_CRC_MspInit+0x3c>)
 80013cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <HAL_CRC_MspInit+0x3c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023000 	.word	0x40023000
 80013f0:	40023800 	.word	0x40023800

080013f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_DMA_Init+0x48>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a0f      	ldr	r2, [pc, #60]	; (800143c <MX_DMA_Init+0x48>)
 8001400:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <MX_DMA_Init+0x48>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2103      	movs	r1, #3
 8001416:	200b      	movs	r0, #11
 8001418:	f009 fed6 	bl	800b1c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800141c:	200b      	movs	r0, #11
 800141e:	f009 feef 	bl	800b200 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2103      	movs	r1, #3
 8001426:	200f      	movs	r0, #15
 8001428:	f009 fece 	bl	800b1c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800142c:	200f      	movs	r0, #15
 800142e:	f009 fee7 	bl	800b200 <HAL_NVIC_EnableIRQ>

}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_DMA2D_Init+0x68>)
 8001446:	4a19      	ldr	r2, [pc, #100]	; (80014ac <MX_DMA2D_Init+0x6c>)
 8001448:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_DMA2D_Init+0x68>)
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_DMA2D_Init+0x68>)
 8001452:	2201      	movs	r2, #1
 8001454:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_DMA2D_Init+0x68>)
 8001458:	2200      	movs	r2, #0
 800145a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_DMA2D_Init+0x68>)
 800145e:	2200      	movs	r2, #0
 8001460:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_DMA2D_Init+0x68>)
 8001464:	2201      	movs	r2, #1
 8001466:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_DMA2D_Init+0x68>)
 800146a:	2200      	movs	r2, #0
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_DMA2D_Init+0x68>)
 8001470:	2200      	movs	r2, #0
 8001472:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_DMA2D_Init+0x68>)
 8001476:	2200      	movs	r2, #0
 8001478:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_DMA2D_Init+0x68>)
 800147c:	2200      	movs	r2, #0
 800147e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001480:	4809      	ldr	r0, [pc, #36]	; (80014a8 <MX_DMA2D_Init+0x68>)
 8001482:	f00a facf 	bl	800ba24 <HAL_DMA2D_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 800148c:	f000 fe14 	bl	80020b8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001490:	2101      	movs	r1, #1
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_DMA2D_Init+0x68>)
 8001494:	f00a fc30 	bl	800bcf8 <HAL_DMA2D_ConfigLayer>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800149e:	f000 fe0b 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20056a38 	.word	0x20056a38
 80014ac:	4002b000 	.word	0x4002b000

080014b0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <HAL_DMA2D_MspInit+0x44>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d113      	bne.n	80014ea <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_DMA2D_MspInit+0x48>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <HAL_DMA2D_MspInit+0x48>)
 80014c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_DMA2D_MspInit+0x48>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2103      	movs	r1, #3
 80014de:	205a      	movs	r0, #90	; 0x5a
 80014e0:	f009 fe72 	bl	800b1c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80014e4:	205a      	movs	r0, #90	; 0x5a
 80014e6:	f009 fe8b 	bl	800b200 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	4002b000 	.word	0x4002b000
 80014f8:	40023800 	.word	0x40023800

080014fc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
 8001510:	615a      	str	r2, [r3, #20]
 8001512:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001514:	4b4a      	ldr	r3, [pc, #296]	; (8001640 <MX_FMC_Init+0x144>)
 8001516:	4a4b      	ldr	r2, [pc, #300]	; (8001644 <MX_FMC_Init+0x148>)
 8001518:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800151a:	4b49      	ldr	r3, [pc, #292]	; (8001640 <MX_FMC_Init+0x144>)
 800151c:	2200      	movs	r2, #0
 800151e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001520:	4b47      	ldr	r3, [pc, #284]	; (8001640 <MX_FMC_Init+0x144>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8001526:	4b46      	ldr	r3, [pc, #280]	; (8001640 <MX_FMC_Init+0x144>)
 8001528:	2200      	movs	r2, #0
 800152a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800152c:	4b44      	ldr	r3, [pc, #272]	; (8001640 <MX_FMC_Init+0x144>)
 800152e:	2210      	movs	r2, #16
 8001530:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8001532:	4b43      	ldr	r3, [pc, #268]	; (8001640 <MX_FMC_Init+0x144>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001538:	4b41      	ldr	r3, [pc, #260]	; (8001640 <MX_FMC_Init+0x144>)
 800153a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800153e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001540:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <MX_FMC_Init+0x144>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001546:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <MX_FMC_Init+0x144>)
 8001548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800154c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800154e:	4b3c      	ldr	r3, [pc, #240]	; (8001640 <MX_FMC_Init+0x144>)
 8001550:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001554:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001556:	4b3a      	ldr	r3, [pc, #232]	; (8001640 <MX_FMC_Init+0x144>)
 8001558:	2200      	movs	r2, #0
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800155c:	2302      	movs	r3, #2
 800155e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001560:	2307      	movs	r3, #7
 8001562:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001564:	2304      	movs	r3, #4
 8001566:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8001568:	2306      	movs	r3, #6
 800156a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800156c:	2303      	movs	r3, #3
 800156e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001570:	2302      	movs	r3, #2
 8001572:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001574:	2302      	movs	r3, #2
 8001576:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	4619      	mov	r1, r3
 800157c:	4830      	ldr	r0, [pc, #192]	; (8001640 <MX_FMC_Init+0x144>)
 800157e:	f00d fb05 	bl	800eb8c <HAL_SDRAM_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001588:	f000 fd96 	bl	80020b8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	static FMC_SDRAM_CommandTypeDef command;
	__IO uint32_t
	tmp = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	603b      	str	r3, [r7, #0]

	//Krok 1: Konfiguracja zegarow
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <MX_FMC_Init+0x14c>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <MX_FMC_Init+0x14c>)
 8001598:	2210      	movs	r2, #16
 800159a:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <MX_FMC_Init+0x14c>)
 800159e:	2201      	movs	r2, #1
 80015a0:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80015a2:	4b29      	ldr	r3, [pc, #164]	; (8001648 <MX_FMC_Init+0x14c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	4926      	ldr	r1, [pc, #152]	; (8001648 <MX_FMC_Init+0x14c>)
 80015ae:	4824      	ldr	r0, [pc, #144]	; (8001640 <MX_FMC_Init+0x144>)
 80015b0:	f00d fb20 	bl	800ebf4 <HAL_SDRAM_SendCommand>
	//Krok 2: Opoznienie 100us minimum, wyslane 1ms Systick
	HAL_Delay(1);
 80015b4:	2001      	movs	r0, #1
 80015b6:	f008 fb85 	bl	8009cc4 <HAL_Delay>
	//Krok 3: Konfiguracja PALL (precharge all)
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <MX_FMC_Init+0x14c>)
 80015bc:	2202      	movs	r2, #2
 80015be:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80015c0:	4b21      	ldr	r3, [pc, #132]	; (8001648 <MX_FMC_Init+0x14c>)
 80015c2:	2210      	movs	r2, #16
 80015c4:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <MX_FMC_Init+0x14c>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <MX_FMC_Init+0x14c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 80015d2:	f04f 32ff 	mov.w	r2, #4294967295
 80015d6:	491c      	ldr	r1, [pc, #112]	; (8001648 <MX_FMC_Init+0x14c>)
 80015d8:	4819      	ldr	r0, [pc, #100]	; (8001640 <MX_FMC_Init+0x144>)
 80015da:	f00d fb0b 	bl	800ebf4 <HAL_SDRAM_SendCommand>
	//Krok 4: Komenda Auto Refresh
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_FMC_Init+0x14c>)
 80015e0:	2203      	movs	r2, #3
 80015e2:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <MX_FMC_Init+0x14c>)
 80015e6:	2210      	movs	r2, #16
 80015e8:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_FMC_Init+0x14c>)
 80015ec:	2208      	movs	r2, #8
 80015ee:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MX_FMC_Init+0x14c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 80015f6:	f04f 32ff 	mov.w	r2, #4294967295
 80015fa:	4913      	ldr	r1, [pc, #76]	; (8001648 <MX_FMC_Init+0x14c>)
 80015fc:	4810      	ldr	r0, [pc, #64]	; (8001640 <MX_FMC_Init+0x144>)
 80015fe:	f00d faf9 	bl	800ebf4 <HAL_SDRAM_SendCommand>
	//Krok 5: Programowanie trybu dla zewnetrznej pamieci
	tmp = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 8001602:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001606:	603b      	str	r3, [r7, #0]
			| SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
			| SDRAM_MODEREG_OPERATING_MODE_STANDARD
			| SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_FMC_Init+0x14c>)
 800160a:	2204      	movs	r2, #4
 800160c:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_FMC_Init+0x14c>)
 8001610:	2210      	movs	r2, #16
 8001612:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_FMC_Init+0x14c>)
 8001616:	2201      	movs	r2, #1
 8001618:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmp;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <MX_FMC_Init+0x14c>)
 800161e:	60d3      	str	r3, [r2, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	4908      	ldr	r1, [pc, #32]	; (8001648 <MX_FMC_Init+0x14c>)
 8001626:	4806      	ldr	r0, [pc, #24]	; (8001640 <MX_FMC_Init+0x144>)
 8001628:	f00d fae4 	bl	800ebf4 <HAL_SDRAM_SendCommand>
	//Krok 6: Ustawienie licznika odswiezania
	//15.62us*freq -20
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1660);
 800162c:	f240 617c 	movw	r1, #1660	; 0x67c
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <MX_FMC_Init+0x144>)
 8001632:	f00d fb0a 	bl	800ec4a <HAL_SDRAM_ProgramRefreshRate>
	//HAL_SDRAM_ProgramRefreshRate(&hsdram1, 760);

  /* USER CODE END FMC_Init 2 */
}
 8001636:	bf00      	nop
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20056a90 	.word	0x20056a90
 8001644:	a0000140 	.word	0xa0000140
 8001648:	20000270 	.word	0x20000270

0800164c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001660:	4b3a      	ldr	r3, [pc, #232]	; (800174c <HAL_FMC_MspInit+0x100>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d16d      	bne.n	8001744 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001668:	4b38      	ldr	r3, [pc, #224]	; (800174c <HAL_FMC_MspInit+0x100>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800166e:	4b38      	ldr	r3, [pc, #224]	; (8001750 <HAL_FMC_MspInit+0x104>)
 8001670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001672:	4a37      	ldr	r2, [pc, #220]	; (8001750 <HAL_FMC_MspInit+0x104>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6393      	str	r3, [r2, #56]	; 0x38
 800167a:	4b35      	ldr	r3, [pc, #212]	; (8001750 <HAL_FMC_MspInit+0x104>)
 800167c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001686:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800168a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001698:	230c      	movs	r3, #12
 800169a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	482c      	ldr	r0, [pc, #176]	; (8001754 <HAL_FMC_MspInit+0x108>)
 80016a2:	f00a fbc7 	bl	800be34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016a6:	230c      	movs	r3, #12
 80016a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016b6:	230c      	movs	r3, #12
 80016b8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	4619      	mov	r1, r3
 80016be:	4826      	ldr	r0, [pc, #152]	; (8001758 <HAL_FMC_MspInit+0x10c>)
 80016c0:	f00a fbb8 	bl	800be34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016d4:	230c      	movs	r3, #12
 80016d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	481f      	ldr	r0, [pc, #124]	; (800175c <HAL_FMC_MspInit+0x110>)
 80016de:	f00a fba9 	bl	800be34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 80016e2:	f248 1311 	movw	r3, #33041	; 0x8111
 80016e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016f4:	230c      	movs	r3, #12
 80016f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4619      	mov	r1, r3
 80016fc:	4818      	ldr	r0, [pc, #96]	; (8001760 <HAL_FMC_MspInit+0x114>)
 80016fe:	f00a fb99 	bl	800be34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001702:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001706:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001714:	230c      	movs	r3, #12
 8001716:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4619      	mov	r1, r3
 800171c:	4811      	ldr	r0, [pc, #68]	; (8001764 <HAL_FMC_MspInit+0x118>)
 800171e:	f00a fb89 	bl	800be34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001722:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001726:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001734:	230c      	movs	r3, #12
 8001736:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4619      	mov	r1, r3
 800173c:	480a      	ldr	r0, [pc, #40]	; (8001768 <HAL_FMC_MspInit+0x11c>)
 800173e:	f00a fb79 	bl	800be34 <HAL_GPIO_Init>
 8001742:	e000      	b.n	8001746 <HAL_FMC_MspInit+0xfa>
    return;
 8001744:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	2000026c 	.word	0x2000026c
 8001750:	40023800 	.word	0x40023800
 8001754:	40021400 	.word	0x40021400
 8001758:	40020800 	.word	0x40020800
 800175c:	40020000 	.word	0x40020000
 8001760:	40021800 	.word	0x40021800
 8001764:	40021000 	.word	0x40021000
 8001768:	40020c00 	.word	0x40020c00

0800176c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001774:	f7ff ff6a 	bl	800164c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of hardwareTASK */
  hardwareTASKHandle = osThreadNew(StartHardwareTask, NULL, &hardwareTASK_attributes);
 8001784:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <MX_FREERTOS_Init+0x48>)
 8001786:	2100      	movs	r1, #0
 8001788:	4810      	ldr	r0, [pc, #64]	; (80017cc <MX_FREERTOS_Init+0x4c>)
 800178a:	f00e fe9b 	bl	80104c4 <osThreadNew>
 800178e:	4603      	mov	r3, r0
 8001790:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <MX_FREERTOS_Init+0x50>)
 8001792:	6013      	str	r3, [r2, #0]

  /* creation of touchGFXTask */
  touchGFXTaskHandle = osThreadNew(StartTouchGFXTask, NULL, &touchGFXTask_attributes);
 8001794:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <MX_FREERTOS_Init+0x54>)
 8001796:	2100      	movs	r1, #0
 8001798:	480f      	ldr	r0, [pc, #60]	; (80017d8 <MX_FREERTOS_Init+0x58>)
 800179a:	f00e fe93 	bl	80104c4 <osThreadNew>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <MX_FREERTOS_Init+0x5c>)
 80017a2:	6013      	str	r3, [r2, #0]

  /* creation of infoLed */
  infoLedHandle = osThreadNew(StartInfoLed, NULL, &infoLed_attributes);
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <MX_FREERTOS_Init+0x60>)
 80017a6:	2100      	movs	r1, #0
 80017a8:	480e      	ldr	r0, [pc, #56]	; (80017e4 <MX_FREERTOS_Init+0x64>)
 80017aa:	f00e fe8b 	bl	80104c4 <osThreadNew>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <MX_FREERTOS_Init+0x68>)
 80017b2:	6013      	str	r3, [r2, #0]

  /* creation of displayBackligh */
  displayBacklighHandle = osThreadNew(StartDisplayBacklight, NULL, &displayBackligh_attributes);
 80017b4:	4a0d      	ldr	r2, [pc, #52]	; (80017ec <MX_FREERTOS_Init+0x6c>)
 80017b6:	2100      	movs	r1, #0
 80017b8:	480d      	ldr	r0, [pc, #52]	; (80017f0 <MX_FREERTOS_Init+0x70>)
 80017ba:	f00e fe83 	bl	80104c4 <osThreadNew>
 80017be:	4603      	mov	r3, r0
 80017c0:	4a0c      	ldr	r2, [pc, #48]	; (80017f4 <MX_FREERTOS_Init+0x74>)
 80017c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	0802a230 	.word	0x0802a230
 80017cc:	080017f9 	.word	0x080017f9
 80017d0:	20056ad0 	.word	0x20056ad0
 80017d4:	0802a254 	.word	0x0802a254
 80017d8:	08001829 	.word	0x08001829
 80017dc:	20056acc 	.word	0x20056acc
 80017e0:	0802a278 	.word	0x0802a278
 80017e4:	0800183d 	.word	0x0800183d
 80017e8:	20056ad4 	.word	0x20056ad4
 80017ec:	0802a29c 	.word	0x0802a29c
 80017f0:	08001859 	.word	0x08001859
 80017f4:	20056ae0 	.word	0x20056ae0

080017f8 <StartHardwareTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void *argument)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	MX_DMA_Init();
	uint16_t rpm = 5000;
	leds_init();
	osDelay(1000);*/
	 //MX_CAN2_Init();
	osDelay(10);
 8001800:	200a      	movs	r0, #10
 8001802:	f00e ff37 	bl	8010674 <osDelay>

	HAL_CAN_Start(&hcan2);
 8001806:	4807      	ldr	r0, [pc, #28]	; (8001824 <StartHardwareTask+0x2c>)
 8001808:	f009 f856 	bl	800a8b8 <HAL_CAN_Start>
	//HAL_CAN_Start(&hcan1);

	osDelay(10);
 800180c:	200a      	movs	r0, #10
 800180e:	f00e ff31 	bl	8010674 <osDelay>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001812:	2102      	movs	r1, #2
 8001814:	4803      	ldr	r0, [pc, #12]	; (8001824 <StartHardwareTask+0x2c>)
 8001816:	f009 f9a5 	bl	800ab64 <HAL_CAN_ActivateNotification>
		if(rpm > 12000)
		{
			rpm = 4000;
		}*/
		//EcuData.rpm+=100;
		osDelay(100);
 800181a:	2064      	movs	r0, #100	; 0x64
 800181c:	f00e ff2a 	bl	8010674 <osDelay>
 8001820:	e7fb      	b.n	800181a <StartHardwareTask+0x22>
 8001822:	bf00      	nop
 8001824:	200569c4 	.word	0x200569c4

08001828 <StartTouchGFXTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTouchGFXTask */
void StartTouchGFXTask(void *argument)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTouchGFXTask */
	MX_TouchGFX_Process();
 8001830:	f001 f8eb 	bl	8002a0a <MX_TouchGFX_Process>
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001834:	2001      	movs	r0, #1
 8001836:	f00e ff1d 	bl	8010674 <osDelay>
 800183a:	e7fb      	b.n	8001834 <StartTouchGFXTask+0xc>

0800183c <StartInfoLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInfoLed */
void StartInfoLed(void *argument)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInfoLed */
  /* Infinite loop */
  for(;;)
  {
    osDelay(250);
 8001844:	20fa      	movs	r0, #250	; 0xfa
 8001846:	f00e ff15 	bl	8010674 <osDelay>
    HAL_GPIO_TogglePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin);
 800184a:	2104      	movs	r1, #4
 800184c:	4801      	ldr	r0, [pc, #4]	; (8001854 <StartInfoLed+0x18>)
 800184e:	f00a fdc2 	bl	800c3d6 <HAL_GPIO_TogglePin>
    osDelay(250);
 8001852:	e7f7      	b.n	8001844 <StartInfoLed+0x8>
 8001854:	40021000 	.word	0x40021000

08001858 <StartDisplayBacklight>:
float data3;
float data4;
uint8_t data;
/* USER CODE END Header_StartDisplayBacklight */
void StartDisplayBacklight(void *argument)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

	//MX_TIM4_Init();
	//MX_ADC1_Init();


	uint8_t setPoint = 100;
 8001860:	2364      	movs	r3, #100	; 0x64
 8001862:	73fb      	strb	r3, [r7, #15]
	// HAL_TIM_Base_Start(&htim4);

	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001864:	2100      	movs	r1, #0
 8001866:	4833      	ldr	r0, [pc, #204]	; (8001934 <StartDisplayBacklight+0xdc>)
 8001868:	f00d fb40 	bl	800eeec <HAL_TIM_PWM_Start>
	  osDelay(250);
 800186c:	20fa      	movs	r0, #250	; 0xfa
 800186e:	f00e ff01 	bl	8010674 <osDelay>
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8001872:	4831      	ldr	r0, [pc, #196]	; (8001938 <StartDisplayBacklight+0xe0>)
 8001874:	f008 fa8e 	bl	8009d94 <HAL_ADC_Start>

	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, data);
 8001878:	4b30      	ldr	r3, [pc, #192]	; (800193c <StartDisplayBacklight+0xe4>)
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <StartDisplayBacklight+0xdc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	635a      	str	r2, [r3, #52]	; 0x34

	 // data+=50;
		//	  data%= 200;
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001882:	f04f 31ff 	mov.w	r1, #4294967295
 8001886:	482c      	ldr	r0, [pc, #176]	; (8001938 <StartDisplayBacklight+0xe0>)
 8001888:	f008 fb52 	bl	8009f30 <HAL_ADC_PollForConversion>

	  osDelay(100);
 800188c:	2064      	movs	r0, #100	; 0x64
 800188e:	f00e fef1 	bl	8010674 <osDelay>
	  data2 = HAL_ADC_GetValue(&hadc1);
 8001892:	4829      	ldr	r0, [pc, #164]	; (8001938 <StartDisplayBacklight+0xe0>)
 8001894:	f008 fbd7 	bl	800a046 <HAL_ADC_GetValue>
 8001898:	4603      	mov	r3, r0
 800189a:	b29a      	uxth	r2, r3
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <StartDisplayBacklight+0xe8>)
 800189e:	801a      	strh	r2, [r3, #0]
	  data3 = 3.3f * data2 /4095.0f;
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <StartDisplayBacklight+0xe8>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ac:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001944 <StartDisplayBacklight+0xec>
 80018b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018b4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001948 <StartDisplayBacklight+0xf0>
 80018b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <StartDisplayBacklight+0xf4>)
 80018be:	edc3 7a00 	vstr	s15, [r3]
	  data4 = data3 / 5.1f * 1000.0f;
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <StartDisplayBacklight+0xf4>)
 80018c4:	ed93 7a00 	vldr	s14, [r3]
 80018c8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001950 <StartDisplayBacklight+0xf8>
 80018cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018d0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001954 <StartDisplayBacklight+0xfc>
 80018d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <StartDisplayBacklight+0x100>)
 80018da:	edc3 7a00 	vstr	s15, [r3]

	  data+= (int8_t)round((setPoint- data4)/ 10.0f);
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <StartDisplayBacklight+0x100>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018f2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80018f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018fe:	eeb0 0b47 	vmov.f64	d0, d7
 8001902:	f023 fa31 	bl	8024d68 <round>
 8001906:	eeb0 7b40 	vmov.f64	d7, d0
 800190a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800190e:	edc7 7a00 	vstr	s15, [r7]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b25b      	sxtb	r3, r3
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <StartDisplayBacklight+0xe4>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4413      	add	r3, r2
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <StartDisplayBacklight+0xe4>)
 8001922:	701a      	strb	r2, [r3, #0]
	  if(data>215)
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <StartDisplayBacklight+0xe4>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2bd7      	cmp	r3, #215	; 0xd7
 800192a:	d9a2      	bls.n	8001872 <StartDisplayBacklight+0x1a>
		  data = 215;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <StartDisplayBacklight+0xe4>)
 800192e:	22d7      	movs	r2, #215	; 0xd7
 8001930:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_Start(&hadc1);
 8001932:	e79e      	b.n	8001872 <StartDisplayBacklight+0x1a>
 8001934:	20056c24 	.word	0x20056c24
 8001938:	2005697c 	.word	0x2005697c
 800193c:	20056ad8 	.word	0x20056ad8
 8001940:	20056ac4 	.word	0x20056ac4
 8001944:	40533333 	.word	0x40533333
 8001948:	457ff000 	.word	0x457ff000
 800194c:	20056adc 	.word	0x20056adc
 8001950:	40a33333 	.word	0x40a33333
 8001954:	447a0000 	.word	0x447a0000
 8001958:	20056ac8 	.word	0x20056ac8

0800195c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08e      	sub	sp, #56	; 0x38
 8001960:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001972:	4b46      	ldr	r3, [pc, #280]	; (8001a8c <MX_GPIO_Init+0x130>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a45      	ldr	r2, [pc, #276]	; (8001a8c <MX_GPIO_Init+0x130>)
 8001978:	f043 0310 	orr.w	r3, r3, #16
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b43      	ldr	r3, [pc, #268]	; (8001a8c <MX_GPIO_Init+0x130>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	623b      	str	r3, [r7, #32]
 8001988:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800198a:	4b40      	ldr	r3, [pc, #256]	; (8001a8c <MX_GPIO_Init+0x130>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a3f      	ldr	r2, [pc, #252]	; (8001a8c <MX_GPIO_Init+0x130>)
 8001990:	f043 0320 	orr.w	r3, r3, #32
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b3d      	ldr	r3, [pc, #244]	; (8001a8c <MX_GPIO_Init+0x130>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019a2:	4b3a      	ldr	r3, [pc, #232]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a39      	ldr	r2, [pc, #228]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ba:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a33      	ldr	r2, [pc, #204]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a2d      	ldr	r2, [pc, #180]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a27      	ldr	r2, [pc, #156]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a02:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <MX_GPIO_Init+0x130>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <MX_GPIO_Init+0x130>)
 8001a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <MX_GPIO_Init+0x130>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <MX_GPIO_Init+0x130>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <MX_GPIO_Init+0x130>)
 8001a20:	f043 0308 	orr.w	r3, r3, #8
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <MX_GPIO_Init+0x130>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2104      	movs	r1, #4
 8001a36:	4816      	ldr	r0, [pc, #88]	; (8001a90 <MX_GPIO_Init+0x134>)
 8001a38:	f00a fcb4 	bl	800c3a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ESP_RESET_Pin|ESP_PD_Pin, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001a42:	4814      	ldr	r0, [pc, #80]	; (8001a94 <MX_GPIO_Init+0x138>)
 8001a44:	f00a fcae 	bl	800c3a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SIGNAL_LED_Pin;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SIGNAL_LED_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480c      	ldr	r0, [pc, #48]	; (8001a90 <MX_GPIO_Init+0x134>)
 8001a60:	f00a f9e8 	bl	800be34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ESP_RESET_Pin|ESP_PD_Pin;
 8001a64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_GPIO_Init+0x138>)
 8001a7e:	f00a f9d9 	bl	800be34 <HAL_GPIO_Init>

}
 8001a82:	bf00      	nop
 8001a84:	3738      	adds	r7, #56	; 0x38
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40020800 	.word	0x40020800

08001a98 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08e      	sub	sp, #56	; 0x38
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	2234      	movs	r2, #52	; 0x34
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f023 fa39 	bl	8024f1c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001aac:	4a3a      	ldr	r2, [pc, #232]	; (8001b98 <MX_LTDC_Init+0x100>)
 8001aae:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001ab0:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001ab6:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001abc:	4b35      	ldr	r3, [pc, #212]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ac2:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8001ac8:	4b32      	ldr	r3, [pc, #200]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001aca:	2203      	movs	r2, #3
 8001acc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 39;
 8001ace:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001ad0:	2227      	movs	r2, #39	; 0x27
 8001ad2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001ad6:	220b      	movs	r2, #11
 8001ad8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 47;
 8001ada:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001adc:	222f      	movs	r2, #47	; 0x2f
 8001ade:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8001ae0:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001ae2:	f240 322b 	movw	r2, #811	; 0x32b
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 527;
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001aea:	f240 220f 	movw	r2, #527	; 0x20f
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 819;
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001af2:	f240 3233 	movw	r2, #819	; 0x333
 8001af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 535;
 8001af8:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001afa:	f240 2217 	movw	r2, #535	; 0x217
 8001afe:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001b08:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001b10:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b18:	481e      	ldr	r0, [pc, #120]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001b1a:	f00a fc77 	bl	800c40c <HAL_LTDC_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001b24:	f000 fac8 	bl	80020b8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001b2c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001b30:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001b36:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b3a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001b40:	23ff      	movs	r3, #255	; 0xff
 8001b42:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b4c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b4e:	2305      	movs	r3, #5
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001b52:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8001b58:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8001b5e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4805      	ldr	r0, [pc, #20]	; (8001b94 <MX_LTDC_Init+0xfc>)
 8001b7e:	f00a fdcd 	bl	800c71c <HAL_LTDC_ConfigLayer>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001b88:	f000 fa96 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	3738      	adds	r7, #56	; 0x38
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20056ae4 	.word	0x20056ae4
 8001b98:	40016800 	.word	0x40016800

08001b9c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b0b4      	sub	sp, #208	; 0xd0
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb8:	2290      	movs	r2, #144	; 0x90
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f023 f9ad 	bl	8024f1c <memset>
  if(ltdcHandle->Instance==LTDC)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4aa6      	ldr	r2, [pc, #664]	; (8001e60 <HAL_LTDC_MspInit+0x2c4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	f040 8144 	bne.w	8001e56 <HAL_LTDC_MspInit+0x2ba>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001bce:	2308      	movs	r3, #8
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 279;
 8001bd2:	f240 1317 	movw	r3, #279	; 0x117
 8001bd6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001be0:	2300      	movs	r3, #0
 8001be2:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001be4:	2301      	movs	r3, #1
 8001be6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bec:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f00c fba2 	bl	800e33c <HAL_RCCEx_PeriphCLKConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8001bfe:	f000 fa5b 	bl	80020b8 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c02:	4b98      	ldr	r3, [pc, #608]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a97      	ldr	r2, [pc, #604]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b95      	ldr	r3, [pc, #596]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c18:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c1a:	4b92      	ldr	r3, [pc, #584]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a91      	ldr	r2, [pc, #580]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c20:	f043 0310 	orr.w	r3, r3, #16
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b8f      	ldr	r3, [pc, #572]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c32:	4b8c      	ldr	r3, [pc, #560]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a8b      	ldr	r2, [pc, #556]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c38:	f043 0320 	orr.w	r3, r3, #32
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b89      	ldr	r3, [pc, #548]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	623b      	str	r3, [r7, #32]
 8001c48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	4b86      	ldr	r3, [pc, #536]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a85      	ldr	r2, [pc, #532]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b83      	ldr	r3, [pc, #524]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	4b80      	ldr	r3, [pc, #512]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a7f      	ldr	r2, [pc, #508]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b7d      	ldr	r3, [pc, #500]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	4b7a      	ldr	r3, [pc, #488]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a79      	ldr	r2, [pc, #484]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b77      	ldr	r3, [pc, #476]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c92:	4b74      	ldr	r3, [pc, #464]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a73      	ldr	r2, [pc, #460]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b71      	ldr	r3, [pc, #452]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001caa:	4b6e      	ldr	r3, [pc, #440]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a6d      	ldr	r2, [pc, #436]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001cb0:	f043 0308 	orr.w	r3, r3, #8
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b6b      	ldr	r3, [pc, #428]	; (8001e64 <HAL_LTDC_MspInit+0x2c8>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001cc2:	2370      	movs	r3, #112	; 0x70
 8001cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cda:	230e      	movs	r3, #14
 8001cdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ce0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4860      	ldr	r0, [pc, #384]	; (8001e68 <HAL_LTDC_MspInit+0x2cc>)
 8001ce8:	f00a f8a4 	bl	800be34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d06:	230e      	movs	r3, #14
 8001d08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d0c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d10:	4619      	mov	r1, r3
 8001d12:	4856      	ldr	r0, [pc, #344]	; (8001e6c <HAL_LTDC_MspInit+0x2d0>)
 8001d14:	f00a f88e 	bl	800be34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8001d18:	23c1      	movs	r3, #193	; 0xc1
 8001d1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d30:	230e      	movs	r3, #14
 8001d32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d36:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	484c      	ldr	r0, [pc, #304]	; (8001e70 <HAL_LTDC_MspInit+0x2d4>)
 8001d3e:	f00a f879 	bl	800be34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001d42:	f240 437e 	movw	r3, #1150	; 0x47e
 8001d46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d5c:	230e      	movs	r3, #14
 8001d5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d66:	4619      	mov	r1, r3
 8001d68:	4842      	ldr	r0, [pc, #264]	; (8001e74 <HAL_LTDC_MspInit+0x2d8>)
 8001d6a:	f00a f863 	bl	800be34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d86:	2309      	movs	r3, #9
 8001d88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d90:	4619      	mov	r1, r3
 8001d92:	4839      	ldr	r0, [pc, #228]	; (8001e78 <HAL_LTDC_MspInit+0x2dc>)
 8001d94:	f00a f84e 	bl	800be34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001d98:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001db2:	230e      	movs	r3, #14
 8001db4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	482e      	ldr	r0, [pc, #184]	; (8001e78 <HAL_LTDC_MspInit+0x2dc>)
 8001dc0:	f00a f838 	bl	800be34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 8001dc4:	f44f 5323 	mov.w	r3, #10432	; 0x28c0
 8001dc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dde:	230e      	movs	r3, #14
 8001de0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001de4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001de8:	4619      	mov	r1, r3
 8001dea:	4824      	ldr	r0, [pc, #144]	; (8001e7c <HAL_LTDC_MspInit+0x2e0>)
 8001dec:	f00a f822 	bl	800be34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001df0:	2348      	movs	r3, #72	; 0x48
 8001df2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e08:	230e      	movs	r3, #14
 8001e0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e0e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e12:	4619      	mov	r1, r3
 8001e14:	481a      	ldr	r0, [pc, #104]	; (8001e80 <HAL_LTDC_MspInit+0x2e4>)
 8001e16:	f00a f80d 	bl	800be34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001e1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e34:	2309      	movs	r3, #9
 8001e36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e3a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480e      	ldr	r0, [pc, #56]	; (8001e7c <HAL_LTDC_MspInit+0x2e0>)
 8001e42:	f009 fff7 	bl	800be34 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2103      	movs	r1, #3
 8001e4a:	2058      	movs	r0, #88	; 0x58
 8001e4c:	f009 f9bc 	bl	800b1c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e50:	2058      	movs	r0, #88	; 0x58
 8001e52:	f009 f9d5 	bl	800b200 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001e56:	bf00      	nop
 8001e58:	37d0      	adds	r7, #208	; 0xd0
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40016800 	.word	0x40016800
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40021400 	.word	0x40021400
 8001e70:	40020800 	.word	0x40020800
 8001e74:	40020000 	.word	0x40020000
 8001e78:	40020400 	.word	0x40020400
 8001e7c:	40021800 	.word	0x40021800
 8001e80:	40020c00 	.word	0x40020c00

08001e84 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e88:	f3bf 8f4f 	dsb	sy
}
 8001e8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e8e:	f3bf 8f6f 	isb	sy
}
 8001e92:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <SCB_EnableICache+0x48>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e9c:	f3bf 8f4f 	dsb	sy
}
 8001ea0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ea2:	f3bf 8f6f 	isb	sy
}
 8001ea6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <SCB_EnableICache+0x48>)
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <SCB_EnableICache+0x48>)
 8001eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eb4:	f3bf 8f4f 	dsb	sy
}
 8001eb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eba:	f3bf 8f6f 	isb	sy
}
 8001ebe:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <SCB_EnableDCache+0x84>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ede:	f3bf 8f4f 	dsb	sy
}
 8001ee2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <SCB_EnableDCache+0x84>)
 8001ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eea:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	0b5b      	lsrs	r3, r3, #13
 8001ef0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ef4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001efe:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001f08:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f0e:	4911      	ldr	r1, [pc, #68]	; (8001f54 <SCB_EnableDCache+0x84>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1e5a      	subs	r2, r3, #1
 8001f1a:	60ba      	str	r2, [r7, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1ef      	bne.n	8001f00 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1e5a      	subs	r2, r3, #1
 8001f24:	60fa      	str	r2, [r7, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1e5      	bne.n	8001ef6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f2a:	f3bf 8f4f 	dsb	sy
}
 8001f2e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <SCB_EnableDCache+0x84>)
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <SCB_EnableDCache+0x84>)
 8001f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f3c:	f3bf 8f4f 	dsb	sy
}
 8001f40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f42:	f3bf 8f6f 	isb	sy
}
 8001f46:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001f5c:	f7ff ff92 	bl	8001e84 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001f60:	f7ff ffb6 	bl	8001ed0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f64:	f007 fe80 	bl	8009c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f68:	f000 f824 	bl	8001fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f6c:	f7ff fcf6 	bl	800195c <MX_GPIO_Init>
  MX_CRC_Init();
 8001f70:	f7ff f9fe 	bl	8001370 <MX_CRC_Init>
  MX_FMC_Init();
 8001f74:	f7ff fac2 	bl	80014fc <MX_FMC_Init>
  MX_QUADSPI_Init();
 8001f78:	f000 f8a4 	bl	80020c4 <MX_QUADSPI_Init>
  MX_LTDC_Init();
 8001f7c:	f7ff fd8c 	bl	8001a98 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001f80:	f7ff fa5e 	bl	8001440 <MX_DMA2D_Init>
  MX_TIM3_Init();
 8001f84:	f000 fb28 	bl	80025d8 <MX_TIM3_Init>
  MX_CAN2_Init();
 8001f88:	f7fe ffc2 	bl	8000f10 <MX_CAN2_Init>
  MX_CAN1_Init();
 8001f8c:	f7fe ff8a 	bl	8000ea4 <MX_CAN1_Init>
  MX_DMA_Init();
 8001f90:	f7ff fa30 	bl	80013f4 <MX_DMA_Init>
  MX_TIM4_Init();
 8001f94:	f000 fb96 	bl	80026c4 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001f98:	f7fe fd26 	bl	80009e8 <MX_ADC1_Init>
  MX_TouchGFX_Init();
 8001f9c:	f000 fd2f 	bl	80029fe <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  FLASH_QSPI_Init();
 8001fa0:	f7fe fdb4 	bl	8000b0c <FLASH_QSPI_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001fa4:	f00e fa24 	bl	80103f0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001fa8:	f7ff fbea 	bl	8001780 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001fac:	f00e fa54 	bl	8010458 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <main+0x58>
	...

08001fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b094      	sub	sp, #80	; 0x50
 8001fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	2234      	movs	r2, #52	; 0x34
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f022 ffaa 	bl	8024f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc8:	f107 0308 	add.w	r3, r7, #8
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	4b2c      	ldr	r3, [pc, #176]	; (800208c <SystemClock_Config+0xd8>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	4a2b      	ldr	r2, [pc, #172]	; (800208c <SystemClock_Config+0xd8>)
 8001fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe4:	4b29      	ldr	r3, [pc, #164]	; (800208c <SystemClock_Config+0xd8>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ff0:	4b27      	ldr	r3, [pc, #156]	; (8002090 <SystemClock_Config+0xdc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a26      	ldr	r2, [pc, #152]	; (8002090 <SystemClock_Config+0xdc>)
 8001ff6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b24      	ldr	r3, [pc, #144]	; (8002090 <SystemClock_Config+0xdc>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002008:	2301      	movs	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800200c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002010:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002012:	2302      	movs	r3, #2
 8002014:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002016:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800201a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800201c:	2319      	movs	r3, #25
 800201e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002020:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002024:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002026:	2302      	movs	r3, #2
 8002028:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800202a:	2302      	movs	r3, #2
 800202c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800202e:	2302      	movs	r3, #2
 8002030:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	4618      	mov	r0, r3
 8002038:	f00b fcde 	bl	800d9f8 <HAL_RCC_OscConfig>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002042:	f000 f839 	bl	80020b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002046:	f00a fd79 	bl	800cb3c <HAL_PWREx_EnableOverDrive>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002050:	f000 f832 	bl	80020b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002054:	230f      	movs	r3, #15
 8002056:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002058:	2302      	movs	r3, #2
 800205a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002060:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002064:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800206c:	f107 0308 	add.w	r3, r7, #8
 8002070:	2107      	movs	r1, #7
 8002072:	4618      	mov	r0, r3
 8002074:	f00b ff6e 	bl	800df54 <HAL_RCC_ClockConfig>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800207e:	f000 f81b 	bl	80020b8 <Error_Handler>
  }
}
 8002082:	bf00      	nop
 8002084:	3750      	adds	r7, #80	; 0x50
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	40007000 	.word	0x40007000

08002094 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020a6:	f007 fded 	bl	8009c84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40001000 	.word	0x40001000

080020b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020bc:	b672      	cpsid	i
}
 80020be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <Error_Handler+0x8>
	...

080020c4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <MX_QUADSPI_Init+0x50>)
 80020ca:	4a13      	ldr	r2, [pc, #76]	; (8002118 <MX_QUADSPI_Init+0x54>)
 80020cc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 3;
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <MX_QUADSPI_Init+0x50>)
 80020d0:	2203      	movs	r2, #3
 80020d2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <MX_QUADSPI_Init+0x50>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <MX_QUADSPI_Init+0x50>)
 80020dc:	2210      	movs	r2, #16
 80020de:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <MX_QUADSPI_Init+0x50>)
 80020e2:	2217      	movs	r2, #23
 80020e4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <MX_QUADSPI_Init+0x50>)
 80020e8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80020ec:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <MX_QUADSPI_Init+0x50>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <MX_QUADSPI_Init+0x50>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <MX_QUADSPI_Init+0x50>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002100:	4804      	ldr	r0, [pc, #16]	; (8002114 <MX_QUADSPI_Init+0x50>)
 8002102:	f00a fd6b 	bl	800cbdc <HAL_QSPI_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 800210c:	f7ff ffd4 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20056b8c 	.word	0x20056b8c
 8002118:	a0001000 	.word	0xa0001000

0800211c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a39      	ldr	r2, [pc, #228]	; (8002220 <HAL_QSPI_MspInit+0x104>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d16c      	bne.n	8002218 <HAL_QSPI_MspInit+0xfc>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800213e:	4b39      	ldr	r3, [pc, #228]	; (8002224 <HAL_QSPI_MspInit+0x108>)
 8002140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002142:	4a38      	ldr	r2, [pc, #224]	; (8002224 <HAL_QSPI_MspInit+0x108>)
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	6393      	str	r3, [r2, #56]	; 0x38
 800214a:	4b36      	ldr	r3, [pc, #216]	; (8002224 <HAL_QSPI_MspInit+0x108>)
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002156:	4b33      	ldr	r3, [pc, #204]	; (8002224 <HAL_QSPI_MspInit+0x108>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a32      	ldr	r2, [pc, #200]	; (8002224 <HAL_QSPI_MspInit+0x108>)
 800215c:	f043 0320 	orr.w	r3, r3, #32
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b30      	ldr	r3, [pc, #192]	; (8002224 <HAL_QSPI_MspInit+0x108>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_QSPI_MspInit+0x108>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a2c      	ldr	r2, [pc, #176]	; (8002224 <HAL_QSPI_MspInit+0x108>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <HAL_QSPI_MspInit+0x108>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002186:	23c0      	movs	r3, #192	; 0xc0
 8002188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002196:	2309      	movs	r3, #9
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	4821      	ldr	r0, [pc, #132]	; (8002228 <HAL_QSPI_MspInit+0x10c>)
 80021a2:	f009 fe47 	bl	800be34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80021b8:	230a      	movs	r3, #10
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	4619      	mov	r1, r3
 80021c2:	4819      	ldr	r0, [pc, #100]	; (8002228 <HAL_QSPI_MspInit+0x10c>)
 80021c4:	f009 fe36 	bl	800be34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021c8:	2304      	movs	r3, #4
 80021ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021d8:	2309      	movs	r3, #9
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	4812      	ldr	r0, [pc, #72]	; (800222c <HAL_QSPI_MspInit+0x110>)
 80021e4:	f009 fe26 	bl	800be34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021e8:	2340      	movs	r3, #64	; 0x40
 80021ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80021f8:	230a      	movs	r3, #10
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	4619      	mov	r1, r3
 8002202:	480a      	ldr	r0, [pc, #40]	; (800222c <HAL_QSPI_MspInit+0x110>)
 8002204:	f009 fe16 	bl	800be34 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 3, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2103      	movs	r1, #3
 800220c:	205c      	movs	r0, #92	; 0x5c
 800220e:	f008 ffdb 	bl	800b1c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002212:	205c      	movs	r0, #92	; 0x5c
 8002214:	f008 fff4 	bl	800b200 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	; 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	a0001000 	.word	0xa0001000
 8002224:	40023800 	.word	0x40023800
 8002228:	40021400 	.word	0x40021400
 800222c:	40020400 	.word	0x40020400

08002230 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <HAL_QSPI_MspDeInit+0x40>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d111      	bne.n	8002266 <HAL_QSPI_MspDeInit+0x36>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <HAL_QSPI_MspDeInit+0x44>)
 8002244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002246:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <HAL_QSPI_MspDeInit+0x44>)
 8002248:	f023 0302 	bic.w	r3, r3, #2
 800224c:	6393      	str	r3, [r2, #56]	; 0x38
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800224e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002252:	4809      	ldr	r0, [pc, #36]	; (8002278 <HAL_QSPI_MspDeInit+0x48>)
 8002254:	f009 ff9a 	bl	800c18c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 8002258:	2144      	movs	r1, #68	; 0x44
 800225a:	4808      	ldr	r0, [pc, #32]	; (800227c <HAL_QSPI_MspDeInit+0x4c>)
 800225c:	f009 ff96 	bl	800c18c <HAL_GPIO_DeInit>

    /* QUADSPI interrupt Deinit */
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8002260:	205c      	movs	r0, #92	; 0x5c
 8002262:	f008 ffdb 	bl	800b21c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	a0001000 	.word	0xa0001000
 8002274:	40023800 	.word	0x40023800
 8002278:	40021400 	.word	0x40021400
 800227c:	40020400 	.word	0x40020400

08002280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_MspInit+0x4c>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a10      	ldr	r2, [pc, #64]	; (80022cc <HAL_MspInit+0x4c>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_MspInit+0x4c>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_MspInit+0x4c>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <HAL_MspInit+0x4c>)
 80022a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_MspInit+0x4c>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	210f      	movs	r1, #15
 80022ba:	f06f 0001 	mvn.w	r0, #1
 80022be:	f008 ff83 	bl	800b1c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800

080022d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08c      	sub	sp, #48	; 0x30
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	2036      	movs	r0, #54	; 0x36
 80022e6:	f008 ff6f 	bl	800b1c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022ea:	2036      	movs	r0, #54	; 0x36
 80022ec:	f008 ff88 	bl	800b200 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022f0:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <HAL_InitTick+0xa0>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	4a1e      	ldr	r2, [pc, #120]	; (8002370 <HAL_InitTick+0xa0>)
 80022f6:	f043 0310 	orr.w	r3, r3, #16
 80022fa:	6413      	str	r3, [r2, #64]	; 0x40
 80022fc:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <HAL_InitTick+0xa0>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002308:	f107 0210 	add.w	r2, r7, #16
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f00b ffe0 	bl	800e2d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002318:	f00b ffca 	bl	800e2b0 <HAL_RCC_GetPCLK1Freq>
 800231c:	4603      	mov	r3, r0
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	4a13      	ldr	r2, [pc, #76]	; (8002374 <HAL_InitTick+0xa4>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	0c9b      	lsrs	r3, r3, #18
 800232c:	3b01      	subs	r3, #1
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_InitTick+0xa8>)
 8002332:	4a12      	ldr	r2, [pc, #72]	; (800237c <HAL_InitTick+0xac>)
 8002334:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_InitTick+0xa8>)
 8002338:	f240 32e7 	movw	r2, #999	; 0x3e7
 800233c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800233e:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <HAL_InitTick+0xa8>)
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <HAL_InitTick+0xa8>)
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_InitTick+0xa8>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002350:	4809      	ldr	r0, [pc, #36]	; (8002378 <HAL_InitTick+0xa8>)
 8002352:	f00c fc9a 	bl	800ec8a <HAL_TIM_Base_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d104      	bne.n	8002366 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800235c:	4806      	ldr	r0, [pc, #24]	; (8002378 <HAL_InitTick+0xa8>)
 800235e:	f00c fceb 	bl	800ed38 <HAL_TIM_Base_Start_IT>
 8002362:	4603      	mov	r3, r0
 8002364:	e000      	b.n	8002368 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
}
 8002368:	4618      	mov	r0, r3
 800236a:	3730      	adds	r7, #48	; 0x30
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40023800 	.word	0x40023800
 8002374:	431bde83 	.word	0x431bde83
 8002378:	20056bd8 	.word	0x20056bd8
 800237c:	40001000 	.word	0x40001000

08002380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <NMI_Handler+0x4>

08002386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238a:	e7fe      	b.n	800238a <HardFault_Handler+0x4>

0800238c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <MemManage_Handler+0x4>

08002392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <BusFault_Handler+0x4>

08002398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <UsageFault_Handler+0x4>

0800239e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <DMA1_Stream0_IRQHandler+0x10>)
 80023b2:	f009 f8fb 	bl	800b5ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20056d1c 	.word	0x20056d1c

080023c0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <DMA1_Stream4_IRQHandler+0x10>)
 80023c6:	f009 f8f1 	bl	800b5ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20056cbc 	.word	0x20056cbc

080023d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <CAN1_RX0_IRQHandler+0x10>)
 80023da:	f008 fbe9 	bl	800abb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1-_RX0_IRQn 1 */
}///
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200569ec 	.word	0x200569ec

080023e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <TIM6_DAC_IRQHandler+0x10>)
 80023ee:	f00c ff51 	bl	800f294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20056bd8 	.word	0x20056bd8

080023fc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <CAN2_RX0_IRQHandler+0x10>)
 8002402:	f008 fbd5 	bl	800abb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200569c4 	.word	0x200569c4

08002410 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <LTDC_IRQHandler+0x10>)
 8002416:	f00a f8c9 	bl	800c5ac <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20056ae4 	.word	0x20056ae4

08002424 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <DMA2D_IRQHandler+0x10>)
 800242a:	f009 fb55 	bl	800bad8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20056a38 	.word	0x20056a38

08002438 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <QUADSPI_IRQHandler+0x10>)
 800243e:	f00a fc6d 	bl	800cd1c <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20056b8c 	.word	0x20056b8c

0800244c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
	return 1;
 8002450:	2301      	movs	r3, #1
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <_kill>:

int _kill(int pid, int sig)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002466:	f022 fcff 	bl	8024e68 <__errno>
 800246a:	4603      	mov	r3, r0
 800246c:	2216      	movs	r2, #22
 800246e:	601a      	str	r2, [r3, #0]
	return -1;
 8002470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <_exit>:

void _exit (int status)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002484:	f04f 31ff 	mov.w	r1, #4294967295
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ffe7 	bl	800245c <_kill>
	while (1) {}		/* Make sure we hang here */
 800248e:	e7fe      	b.n	800248e <_exit+0x12>

08002490 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	e00a      	b.n	80024b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024a2:	f3af 8000 	nop.w
 80024a6:	4601      	mov	r1, r0
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	60ba      	str	r2, [r7, #8]
 80024ae:	b2ca      	uxtb	r2, r1
 80024b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3301      	adds	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	429a      	cmp	r2, r3
 80024be:	dbf0      	blt.n	80024a2 <_read+0x12>
	}

return len;
 80024c0:	687b      	ldr	r3, [r7, #4]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e009      	b.n	80024f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	60ba      	str	r2, [r7, #8]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3301      	adds	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	dbf1      	blt.n	80024dc <_write+0x12>
	}
	return len;
 80024f8:	687b      	ldr	r3, [r7, #4]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <_close>:

int _close(int file)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
	return -1;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800252a:	605a      	str	r2, [r3, #4]
	return 0;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <_isatty>:

int _isatty(int file)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
	return 1;
 8002542:	2301      	movs	r3, #1
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
	return 0;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002574:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <_sbrk+0x5c>)
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <_sbrk+0x60>)
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <_sbrk+0x64>)
 800258a:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <_sbrk+0x68>)
 800258c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <_sbrk+0x64>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	429a      	cmp	r2, r3
 800259a:	d207      	bcs.n	80025ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800259c:	f022 fc64 	bl	8024e68 <__errno>
 80025a0:	4603      	mov	r3, r0
 80025a2:	220c      	movs	r2, #12
 80025a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	e009      	b.n	80025c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <_sbrk+0x64>)
 80025bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025be:	68fb      	ldr	r3, [r7, #12]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20080000 	.word	0x20080000
 80025cc:	00000400 	.word	0x00000400
 80025d0:	20000280 	.word	0x20000280
 80025d4:	20056dd0 	.word	0x20056dd0

080025d8 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08e      	sub	sp, #56	; 0x38
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ec:	f107 031c 	add.w	r3, r7, #28
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025f8:	463b      	mov	r3, r7
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	60da      	str	r2, [r3, #12]
 8002604:	611a      	str	r2, [r3, #16]
 8002606:	615a      	str	r2, [r3, #20]
 8002608:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800260a:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <MX_TIM3_Init+0xe4>)
 800260c:	4a2c      	ldr	r2, [pc, #176]	; (80026c0 <MX_TIM3_Init+0xe8>)
 800260e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002610:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <MX_TIM3_Init+0xe4>)
 8002612:	2200      	movs	r2, #0
 8002614:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002616:	4b29      	ldr	r3, [pc, #164]	; (80026bc <MX_TIM3_Init+0xe4>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 134;
 800261c:	4b27      	ldr	r3, [pc, #156]	; (80026bc <MX_TIM3_Init+0xe4>)
 800261e:	2286      	movs	r2, #134	; 0x86
 8002620:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002622:	4b26      	ldr	r3, [pc, #152]	; (80026bc <MX_TIM3_Init+0xe4>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002628:	4b24      	ldr	r3, [pc, #144]	; (80026bc <MX_TIM3_Init+0xe4>)
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800262e:	4823      	ldr	r0, [pc, #140]	; (80026bc <MX_TIM3_Init+0xe4>)
 8002630:	f00c fb2b 	bl	800ec8a <HAL_TIM_Base_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800263a:	f7ff fd3d 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800263e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002648:	4619      	mov	r1, r3
 800264a:	481c      	ldr	r0, [pc, #112]	; (80026bc <MX_TIM3_Init+0xe4>)
 800264c:	f00d f852 	bl	800f6f4 <HAL_TIM_ConfigClockSource>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002656:	f7ff fd2f 	bl	80020b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800265a:	4818      	ldr	r0, [pc, #96]	; (80026bc <MX_TIM3_Init+0xe4>)
 800265c:	f00c fbe4 	bl	800ee28 <HAL_TIM_PWM_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002666:	f7ff fd27 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002672:	f107 031c 	add.w	r3, r7, #28
 8002676:	4619      	mov	r1, r3
 8002678:	4810      	ldr	r0, [pc, #64]	; (80026bc <MX_TIM3_Init+0xe4>)
 800267a:	f00d fcdd 	bl	8010038 <HAL_TIMEx_MasterConfigSynchronization>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002684:	f7ff fd18 	bl	80020b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002688:	2360      	movs	r3, #96	; 0x60
 800268a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002698:	463b      	mov	r3, r7
 800269a:	2200      	movs	r2, #0
 800269c:	4619      	mov	r1, r3
 800269e:	4807      	ldr	r0, [pc, #28]	; (80026bc <MX_TIM3_Init+0xe4>)
 80026a0:	f00c ff18 	bl	800f4d4 <HAL_TIM_PWM_ConfigChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80026aa:	f7ff fd05 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026ae:	4803      	ldr	r0, [pc, #12]	; (80026bc <MX_TIM3_Init+0xe4>)
 80026b0:	f000 f91e 	bl	80028f0 <HAL_TIM_MspPostInit>

}
 80026b4:	bf00      	nop
 80026b6:	3738      	adds	r7, #56	; 0x38
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20056c70 	.word	0x20056c70
 80026c0:	40000400 	.word	0x40000400

080026c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08e      	sub	sp, #56	; 0x38
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d8:	f107 031c 	add.w	r3, r7, #28
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026e4:	463b      	mov	r3, r7
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	60da      	str	r2, [r3, #12]
 80026f0:	611a      	str	r2, [r3, #16]
 80026f2:	615a      	str	r2, [r3, #20]
 80026f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026f6:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <MX_TIM4_Init+0xe4>)
 80026f8:	4a2c      	ldr	r2, [pc, #176]	; (80027ac <MX_TIM4_Init+0xe8>)
 80026fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80026fc:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <MX_TIM4_Init+0xe4>)
 80026fe:	2200      	movs	r2, #0
 8002700:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002702:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <MX_TIM4_Init+0xe4>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 215;
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <MX_TIM4_Init+0xe4>)
 800270a:	22d7      	movs	r2, #215	; 0xd7
 800270c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800270e:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <MX_TIM4_Init+0xe4>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002714:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <MX_TIM4_Init+0xe4>)
 8002716:	2200      	movs	r2, #0
 8002718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800271a:	4823      	ldr	r0, [pc, #140]	; (80027a8 <MX_TIM4_Init+0xe4>)
 800271c:	f00c fab5 	bl	800ec8a <HAL_TIM_Base_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002726:	f7ff fcc7 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800272a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002730:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002734:	4619      	mov	r1, r3
 8002736:	481c      	ldr	r0, [pc, #112]	; (80027a8 <MX_TIM4_Init+0xe4>)
 8002738:	f00c ffdc 	bl	800f6f4 <HAL_TIM_ConfigClockSource>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002742:	f7ff fcb9 	bl	80020b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002746:	4818      	ldr	r0, [pc, #96]	; (80027a8 <MX_TIM4_Init+0xe4>)
 8002748:	f00c fb6e 	bl	800ee28 <HAL_TIM_PWM_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002752:	f7ff fcb1 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800275e:	f107 031c 	add.w	r3, r7, #28
 8002762:	4619      	mov	r1, r3
 8002764:	4810      	ldr	r0, [pc, #64]	; (80027a8 <MX_TIM4_Init+0xe4>)
 8002766:	f00d fc67 	bl	8010038 <HAL_TIMEx_MasterConfigSynchronization>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002770:	f7ff fca2 	bl	80020b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002774:	2360      	movs	r3, #96	; 0x60
 8002776:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002784:	463b      	mov	r3, r7
 8002786:	2200      	movs	r2, #0
 8002788:	4619      	mov	r1, r3
 800278a:	4807      	ldr	r0, [pc, #28]	; (80027a8 <MX_TIM4_Init+0xe4>)
 800278c:	f00c fea2 	bl	800f4d4 <HAL_TIM_PWM_ConfigChannel>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002796:	f7ff fc8f 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800279a:	4803      	ldr	r0, [pc, #12]	; (80027a8 <MX_TIM4_Init+0xe4>)
 800279c:	f000 f8a8 	bl	80028f0 <HAL_TIM_MspPostInit>

}
 80027a0:	bf00      	nop
 80027a2:	3738      	adds	r7, #56	; 0x38
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20056c24 	.word	0x20056c24
 80027ac:	40000800 	.word	0x40000800

080027b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a45      	ldr	r2, [pc, #276]	; (80028d4 <HAL_TIM_Base_MspInit+0x124>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d142      	bne.n	8002848 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027c2:	4b45      	ldr	r3, [pc, #276]	; (80028d8 <HAL_TIM_Base_MspInit+0x128>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4a44      	ldr	r2, [pc, #272]	; (80028d8 <HAL_TIM_Base_MspInit+0x128>)
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	6413      	str	r3, [r2, #64]	; 0x40
 80027ce:	4b42      	ldr	r3, [pc, #264]	; (80028d8 <HAL_TIM_Base_MspInit+0x128>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80027da:	4b40      	ldr	r3, [pc, #256]	; (80028dc <HAL_TIM_Base_MspInit+0x12c>)
 80027dc:	4a40      	ldr	r2, [pc, #256]	; (80028e0 <HAL_TIM_Base_MspInit+0x130>)
 80027de:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80027e0:	4b3e      	ldr	r3, [pc, #248]	; (80028dc <HAL_TIM_Base_MspInit+0x12c>)
 80027e2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80027e6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027e8:	4b3c      	ldr	r3, [pc, #240]	; (80028dc <HAL_TIM_Base_MspInit+0x12c>)
 80027ea:	2240      	movs	r2, #64	; 0x40
 80027ec:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ee:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <HAL_TIM_Base_MspInit+0x12c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80027f4:	4b39      	ldr	r3, [pc, #228]	; (80028dc <HAL_TIM_Base_MspInit+0x12c>)
 80027f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027fa:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027fc:	4b37      	ldr	r3, [pc, #220]	; (80028dc <HAL_TIM_Base_MspInit+0x12c>)
 80027fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002802:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002804:	4b35      	ldr	r3, [pc, #212]	; (80028dc <HAL_TIM_Base_MspInit+0x12c>)
 8002806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800280a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800280c:	4b33      	ldr	r3, [pc, #204]	; (80028dc <HAL_TIM_Base_MspInit+0x12c>)
 800280e:	2200      	movs	r2, #0
 8002810:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002812:	4b32      	ldr	r3, [pc, #200]	; (80028dc <HAL_TIM_Base_MspInit+0x12c>)
 8002814:	2200      	movs	r2, #0
 8002816:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002818:	4b30      	ldr	r3, [pc, #192]	; (80028dc <HAL_TIM_Base_MspInit+0x12c>)
 800281a:	2200      	movs	r2, #0
 800281c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800281e:	482f      	ldr	r0, [pc, #188]	; (80028dc <HAL_TIM_Base_MspInit+0x12c>)
 8002820:	f008 fdf4 	bl	800b40c <HAL_DMA_Init>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 800282a:	f7ff fc45 	bl	80020b8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a2a      	ldr	r2, [pc, #168]	; (80028dc <HAL_TIM_Base_MspInit+0x12c>)
 8002832:	625a      	str	r2, [r3, #36]	; 0x24
 8002834:	4a29      	ldr	r2, [pc, #164]	; (80028dc <HAL_TIM_Base_MspInit+0x12c>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a27      	ldr	r2, [pc, #156]	; (80028dc <HAL_TIM_Base_MspInit+0x12c>)
 800283e:	639a      	str	r2, [r3, #56]	; 0x38
 8002840:	4a26      	ldr	r2, [pc, #152]	; (80028dc <HAL_TIM_Base_MspInit+0x12c>)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002846:	e040      	b.n	80028ca <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM4)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a25      	ldr	r2, [pc, #148]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d13b      	bne.n	80028ca <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002852:	4b21      	ldr	r3, [pc, #132]	; (80028d8 <HAL_TIM_Base_MspInit+0x128>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	4a20      	ldr	r2, [pc, #128]	; (80028d8 <HAL_TIM_Base_MspInit+0x128>)
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
 800285e:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <HAL_TIM_Base_MspInit+0x128>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800286a:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <HAL_TIM_Base_MspInit+0x138>)
 800286c:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <HAL_TIM_Base_MspInit+0x13c>)
 800286e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_TIM_Base_MspInit+0x138>)
 8002872:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002876:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002878:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_TIM_Base_MspInit+0x138>)
 800287a:	2240      	movs	r2, #64	; 0x40
 800287c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800287e:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <HAL_TIM_Base_MspInit+0x138>)
 8002880:	2200      	movs	r2, #0
 8002882:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002884:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <HAL_TIM_Base_MspInit+0x138>)
 8002886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800288a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800288c:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <HAL_TIM_Base_MspInit+0x138>)
 800288e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002892:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002894:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <HAL_TIM_Base_MspInit+0x138>)
 8002896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800289a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 800289c:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_TIM_Base_MspInit+0x138>)
 800289e:	2200      	movs	r2, #0
 80028a0:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80028a2:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_TIM_Base_MspInit+0x138>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <HAL_TIM_Base_MspInit+0x138>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80028ae:	480e      	ldr	r0, [pc, #56]	; (80028e8 <HAL_TIM_Base_MspInit+0x138>)
 80028b0:	f008 fdac 	bl	800b40c <HAL_DMA_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 80028ba:	f7ff fbfd 	bl	80020b8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a09      	ldr	r2, [pc, #36]	; (80028e8 <HAL_TIM_Base_MspInit+0x138>)
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24
 80028c4:	4a08      	ldr	r2, [pc, #32]	; (80028e8 <HAL_TIM_Base_MspInit+0x138>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40023800 	.word	0x40023800
 80028dc:	20056cbc 	.word	0x20056cbc
 80028e0:	40026070 	.word	0x40026070
 80028e4:	40000800 	.word	0x40000800
 80028e8:	20056d1c 	.word	0x20056d1c
 80028ec:	40026010 	.word	0x40026010

080028f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	; 0x28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a22      	ldr	r2, [pc, #136]	; (8002998 <HAL_TIM_MspPostInit+0xa8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d11c      	bne.n	800294c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002912:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_TIM_MspPostInit+0xac>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a21      	ldr	r2, [pc, #132]	; (800299c <HAL_TIM_MspPostInit+0xac>)
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b1f      	ldr	r3, [pc, #124]	; (800299c <HAL_TIM_MspPostInit+0xac>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800292a:	2310      	movs	r3, #16
 800292c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002936:	2300      	movs	r3, #0
 8002938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800293a:	2302      	movs	r3, #2
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	4816      	ldr	r0, [pc, #88]	; (80029a0 <HAL_TIM_MspPostInit+0xb0>)
 8002946:	f009 fa75 	bl	800be34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800294a:	e021      	b.n	8002990 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a14      	ldr	r2, [pc, #80]	; (80029a4 <HAL_TIM_MspPostInit+0xb4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d11c      	bne.n	8002990 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002956:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_TIM_MspPostInit+0xac>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	4a10      	ldr	r2, [pc, #64]	; (800299c <HAL_TIM_MspPostInit+0xac>)
 800295c:	f043 0308 	orr.w	r3, r3, #8
 8002960:	6313      	str	r3, [r2, #48]	; 0x30
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <HAL_TIM_MspPostInit+0xac>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800296e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297c:	2300      	movs	r3, #0
 800297e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002980:	2302      	movs	r3, #2
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4619      	mov	r1, r3
 800298a:	4807      	ldr	r0, [pc, #28]	; (80029a8 <HAL_TIM_MspPostInit+0xb8>)
 800298c:	f009 fa52 	bl	800be34 <HAL_GPIO_Init>
}
 8002990:	bf00      	nop
 8002992:	3728      	adds	r7, #40	; 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40000400 	.word	0x40000400
 800299c:	40023800 	.word	0x40023800
 80029a0:	40020400 	.word	0x40020400
 80029a4:	40000800 	.word	0x40000800
 80029a8:	40020c00 	.word	0x40020c00

080029ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029b0:	480d      	ldr	r0, [pc, #52]	; (80029e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029b2:	490e      	ldr	r1, [pc, #56]	; (80029ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029b4:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029b8:	e002      	b.n	80029c0 <LoopCopyDataInit>

080029ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029be:	3304      	adds	r3, #4

080029c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029c4:	d3f9      	bcc.n	80029ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029c6:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029c8:	4c0b      	ldr	r4, [pc, #44]	; (80029f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029cc:	e001      	b.n	80029d2 <LoopFillZerobss>

080029ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d0:	3204      	adds	r2, #4

080029d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029d4:	d3fb      	bcc.n	80029ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029d6:	f007 f935 	bl	8009c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029da:	f022 fa5d 	bl	8024e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029de:	f7ff fabb 	bl	8001f58 <main>
  bx  lr    
 80029e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80029e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029ec:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 80029f0:	080d324c 	.word	0x080d324c
  ldr r2, =_sbss
 80029f4:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 80029f8:	20056dd0 	.word	0x20056dd0

080029fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029fc:	e7fe      	b.n	80029fc <ADC_IRQHandler>

080029fe <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8002a02:	f001 fbdf 	bl	80041c4 <touchgfx_init>
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8002a0e:	f001 fc03 	bl	8004218 <touchgfx_taskEntry>
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
    {
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	601a      	str	r2, [r3, #0]
    }
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	0802a2e0 	.word	0x0802a2e0

08002a38 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
    }
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ffe9 	bl	8002a18 <_ZN8touchgfx15TouchControllerD1Ev>
 8002a46:	2104      	movs	r1, #4
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f022 f964 	bl	8024d16 <_ZdlPvj>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	4a05      	ldr	r2, [pc, #20]	; (8002aa8 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ffbd 	bl	8002a18 <_ZN8touchgfx15TouchControllerD1Ev>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	0802a2c8 	.word	0x0802a2c8

08002aac <_ZN20STM32TouchControllerD0Ev>:
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ffe7 	bl	8002a88 <_ZN20STM32TouchControllerD1Ev>
 8002aba:	2104      	movs	r1, #4
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f022 f92a 	bl	8024d16 <_ZdlPvj>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]

}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	71fb      	strb	r3, [r7, #7]

}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]

}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <_ZN8touchgfx3HALD1Ev>:
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
    {
 8002b18:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <_ZN8touchgfx3HALD1Ev+0x1c>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	601a      	str	r2, [r3, #0]
    }
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	0802b1e8 	.word	0x0802b1e8

08002b30 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    }
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff ffe9 	bl	8002b10 <_ZN8touchgfx3HALD1Ev>
 8002b3e:	217c      	movs	r1, #124	; 0x7c
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f022 f8e8 	bl	8024d16 <_ZdlPvj>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4610      	mov	r0, r2
 8002b98:	4798      	blx	r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	e000      	b.n	8002ba0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 8002b9e:	2300      	movs	r3, #0
        }
    }
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f012 f9c7 	bl	8014f44 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	33a0      	adds	r3, #160	; 0xa0
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	4798      	blx	r3
    }
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
    {
        return false;
 8002bd4:	2300      	movs	r3, #0
    }
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d106      	bne.n	8002c06 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8002bfa:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8002bfc:	f44f 7125 	mov.w	r1, #660	; 0x294
 8002c00:	4811      	ldr	r0, [pc, #68]	; (8002c48 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8002c02:	f022 f8ff 	bl	8024e04 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bf14      	ite	ne
 8002c1e:	2301      	movne	r3, #1
 8002c20:	2300      	moveq	r3, #0
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8002c26:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf14      	ite	ne
 8002c2e:	2301      	movne	r3, #1
 8002c30:	2300      	moveq	r3, #0
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8002c36:	701a      	strb	r2, [r3, #0]
    }
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	08029648 	.word	0x08029648
 8002c44:	08029680 	.word	0x08029680
 8002c48:	080296d0 	.word	0x080296d0
 8002c4c:	200566de 	.word	0x200566de
 8002c50:	200566df 	.word	0x200566df

08002c54 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8002c5c:	2300      	movs	r3, #0
    }
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c82:	887a      	ldrh	r2, [r7, #2]
 8002c84:	4610      	mov	r0, r2
 8002c86:	4798      	blx	r3
        }
    }
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3318      	adds	r3, #24
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4798      	blx	r3
 8002caa:	4603      	mov	r3, r0
    }
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d017      	beq.n	8002cfc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8002ccc:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d12a      	bne.n	8002d2a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8002cd6:	881a      	ldrh	r2, [r3, #0]
 8002cd8:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8002cda:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8002cdc:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8002cde:	881a      	ldrh	r2, [r3, #0]
 8002ce0:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8002ce2:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8002ce6:	881a      	ldrh	r2, [r3, #0]
 8002ce8:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8002cea:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8002cee:	881a      	ldrh	r2, [r3, #0]
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8002cf2:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8002cf4:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8002cfa:	e016      	b.n	8002d2a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d012      	beq.n	8002d2a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8002d04:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8002d06:	881a      	ldrh	r2, [r3, #0]
 8002d08:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8002d0a:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8002d0e:	881a      	ldrh	r2, [r3, #0]
 8002d10:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8002d12:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8002d16:	881a      	ldrh	r2, [r3, #0]
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8002d1a:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8002d1e:	881a      	ldrh	r2, [r3, #0]
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8002d22:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8002d24:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
    }
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	200566d8 	.word	0x200566d8
 8002d3c:	200566d4 	.word	0x200566d4
 8002d40:	200566da 	.word	0x200566da
 8002d44:	200566d6 	.word	0x200566d6
 8002d48:	200566dc 	.word	0x200566dc

08002d4c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f011 fac5 	bl	80142e6 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	4a05      	ldr	r2, [pc, #20]	; (8002d84 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fecb 	bl	8002b10 <_ZN8touchgfx3HALD1Ev>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	0802a644 	.word	0x0802a644

08002d88 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ffe7 	bl	8002d64 <_ZN20TouchGFXGeneratedHALD1Ev>
 8002d96:	217c      	movs	r1, #124	; 0x7c
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f021 ffbc 	bl	8024d16 <_ZdlPvj>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ffca 	bl	8002d4c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <_ZN11TouchGFXHAL10initializeEv>:
{
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXHAL::initialize() {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.
	// Please note, HAL::initialize() must be called to initialize the framework.

	TouchGFXGeneratedHAL::initialize();
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f001 fee0 	bl	8004b90 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
/**
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of getTFTFrameBuffer().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f001 ff7a 	bl	8004cdc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8002de8:	4603      	mov	r3, r0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
/**
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t *address) {
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	6039      	str	r1, [r7, #0]
	// Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6839      	ldr	r1, [r7, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f001 ff79 	bl	8004cf8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 *
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect &rect) {
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
	// be called to notify the touchgfx framework that flush has been performed.
	// To calculate he start adress of rect,
	// use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
	// defined in TouchGFXGeneratedHAL.cpp

	TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f001 ff81 	bl	8004d24 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void *RESTRICT dest, const void *RESTRICT src,
		uint32_t numBytes) {
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	603b      	str	r3, [r7, #0]
	return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	f001 ff8e 	bl	8004d60 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8002e44:	4603      	mov	r3, r0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <_ZN11TouchGFXHAL19configureInterruptsEv>:

/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts() {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of configureInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::configureInterrupts();
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 feca 	bl	8004bf4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

	// custom code
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <_ZN11TouchGFXHAL19configureInterruptsEv+0x40>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <_ZN11TouchGFXHAL19configureInterruptsEv+0x44>)
 8002e72:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <_ZN11TouchGFXHAL19configureInterruptsEv+0x40>)
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <_ZN11TouchGFXHAL19configureInterruptsEv+0x48>)
 8002e86:	801a      	strh	r2, [r3, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40016800 	.word	0x40016800
 8002e94:	20000284 	.word	0x20000284
 8002e98:	20000286 	.word	0x20000286

08002e9c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts() {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableInterrupts();
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 feb4 	bl	8004c14 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts() {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of disableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::disableInterrupts();
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f001 feb6 	bl	8004c30 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:

/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt() {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableLCDControllerInterrupt().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f001 feb8 	bl	8004c4c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	4a05      	ldr	r2, [pc, #20]	; (8002f04 <_ZN11TouchGFXHALD1Ev+0x20>)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff35 	bl	8002d64 <_ZN20TouchGFXGeneratedHALD1Ev>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	0802a2f8 	.word	0x0802a2f8

08002f08 <_ZN11TouchGFXHALD0Ev>:
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff ffe7 	bl	8002ee4 <_ZN11TouchGFXHALD1Ev>
 8002f16:	217c      	movs	r1, #124	; 0x7c
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f021 fefc 	bl	8024d16 <_ZdlPvj>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2101      	movs	r1, #1
 8002f30:	2001      	movs	r0, #1
 8002f32:	f00d fbcd 	bl	80106d0 <osSemaphoreNew>
 8002f36:	4603      	mov	r3, r0
 8002f38:	4a0f      	ldr	r2, [pc, #60]	; (8002f78 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8002f3a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d105      	bne.n	8002f50 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8002f44:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8002f46:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8002f48:	2126      	movs	r1, #38	; 0x26
 8002f4a:	480e      	ldr	r0, [pc, #56]	; (8002f84 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002f4c:	f021 ff5a 	bl	8024e04 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002f50:	2200      	movs	r2, #0
 8002f52:	2104      	movs	r1, #4
 8002f54:	2001      	movs	r0, #1
 8002f56:	f00d fd15 	bl	8010984 <osMessageQueueNew>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8002f5e:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d105      	bne.n	8002f74 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8002f68:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8002f6a:	4a05      	ldr	r2, [pc, #20]	; (8002f80 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8002f6c:	212a      	movs	r1, #42	; 0x2a
 8002f6e:	4805      	ldr	r0, [pc, #20]	; (8002f84 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002f70:	f021 ff48 	bl	8024e04 <__assert_func>
}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000288 	.word	0x20000288
 8002f7c:	08029718 	.word	0x08029718
 8002f80:	08029764 	.word	0x08029764
 8002f84:	08029794 	.word	0x08029794
 8002f88:	2000028c 	.word	0x2000028c
 8002f8c:	08029810 	.word	0x08029810

08002f90 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f04f 31ff 	mov.w	r1, #4294967295
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f00d fc33 	bl	8010808 <osSemaphoreAcquire>
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000288 	.word	0x20000288

08002fac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f00d fc8d 	bl	80108d4 <osSemaphoreRelease>
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000288 	.word	0x20000288

08002fc4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f00d fc1a 	bl	8010808 <osSemaphoreAcquire>
}
 8002fd4:	bf00      	nop
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20000288 	.word	0x20000288

08002fdc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f00d fc75 	bl	80108d4 <osSemaphoreRelease>
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000288 	.word	0x20000288

08002ff4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2200      	movs	r2, #0
 8003000:	4903      	ldr	r1, [pc, #12]	; (8003010 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8003002:	f00d fd45 	bl	8010a90 <osMessageQueuePut>
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2000028c 	.word	0x2000028c
 8003010:	20000004 	.word	0x20000004

08003014 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	1d39      	adds	r1, r7, #4
 8003020:	2300      	movs	r3, #0
 8003022:	2200      	movs	r2, #0
 8003024:	f00d fda8 	bl	8010b78 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	1d39      	adds	r1, r7, #4
 800302e:	f04f 33ff 	mov.w	r3, #4294967295
 8003032:	2200      	movs	r2, #0
 8003034:	f00d fda0 	bl	8010b78 <osMessageQueueGet>
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	2000028c 	.word	0x2000028c

08003044 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	4618      	mov	r0, r3
 8003052:	f00d fb0f 	bl	8010674 <osDelay>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <_ZN8touchgfx10OSWrappers9taskYieldEv>:
 * system to change to another task of similar priority. When
 * running without an operating system, the implementation can run
 * a very short task and return.
 */
void OSWrappers::taskYield()
{
 800305e:	b580      	push	{r7, lr}
 8003060:	af00      	add	r7, sp, #0
    osThreadYield();
 8003062:	f00d fad5 	bl	8010610 <osThreadYield>
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <__NVIC_EnableIRQ>:
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	2b00      	cmp	r3, #0
 800307c:	db0b      	blt.n	8003096 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	f003 021f 	and.w	r2, r3, #31
 8003084:	4907      	ldr	r1, [pc, #28]	; (80030a4 <__NVIC_EnableIRQ+0x38>)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	2001      	movs	r0, #1
 800308e:	fa00 f202 	lsl.w	r2, r0, r2
 8003092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	e000e100 	.word	0xe000e100

080030a8 <__NVIC_DisableIRQ>:
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	db12      	blt.n	80030e0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	f003 021f 	and.w	r2, r3, #31
 80030c0:	490a      	ldr	r1, [pc, #40]	; (80030ec <__NVIC_DisableIRQ+0x44>)
 80030c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	2001      	movs	r0, #1
 80030ca:	fa00 f202 	lsl.w	r2, r0, r2
 80030ce:	3320      	adds	r3, #32
 80030d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80030d4:	f3bf 8f4f 	dsb	sy
}
 80030d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030da:	f3bf 8f6f 	isb	sy
}
 80030de:	bf00      	nop
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000e100 	.word	0xe000e100

080030f0 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
        : color(0)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
    {
    }
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
    {
        return color;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
    }
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    {
 800312c:	4a04      	ldr	r2, [pc, #16]	; (8003140 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	601a      	str	r2, [r3, #0]
    }
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	0802a414 	.word	0x0802a414

08003144 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
    }
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff ffe9 	bl	8003124 <_ZN8touchgfx9DMA_QueueD1Ev>
 8003152:	2104      	movs	r1, #4
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f021 fdde 	bl	8024d16 <_ZdlPvj>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3344      	adds	r3, #68	; 0x44
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
    }
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
    {
 8003188:	4a04      	ldr	r2, [pc, #16]	; (800319c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	601a      	str	r2, [r3, #0]
    }
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	0802b728 	.word	0x0802b728

080031a0 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
    }
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ffe9 	bl	8003180 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80031ae:	210c      	movs	r1, #12
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f021 fdb0 	bl	8024d16 <_ZdlPvj>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80031ca:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	721a      	strb	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	725a      	strb	r2, [r3, #9]
    {
    }
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	0802b728 	.word	0x0802b728

080031f4 <_ZN10STM32F7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80031fc:	2301      	movs	r3, #1
    }
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3328      	adds	r3, #40	; 0x28
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4610      	mov	r0, r2
 800321e:	4798      	blx	r3
    }
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
        return instance;
 800322c:	4b03      	ldr	r3, [pc, #12]	; (800323c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800322e:	681b      	ldr	r3, [r3, #0]
    }
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	200566e0 	.word	0x200566e0

08003240 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3314      	adds	r3, #20
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4610      	mov	r0, r2
 8003258:	4798      	blx	r3
    }
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 800326a:	f7ff ffdd 	bl	8003228 <_ZN8touchgfx3HAL11getInstanceEv>
 800326e:	4603      	mov	r3, r0
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ffe5 	bl	8003240 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	330c      	adds	r3, #12
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff ff30 	bl	80030f0 <_ZN8touchgfx9colortypeC1Ev>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <_ZN10STM32F7DMAC1Ev>:
}

STM32F7DMA::STM32F7DMA()
 800329c:	b5b0      	push	{r4, r5, r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	330c      	adds	r3, #12
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f7ff ff87 	bl	80031c0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80032b2:	4a0e      	ldr	r2, [pc, #56]	; (80032ec <_ZN10STM32F7DMAC1Ev+0x50>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f103 000c 	add.w	r0, r3, #12
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3320      	adds	r3, #32
 80032c2:	2260      	movs	r2, #96	; 0x60
 80032c4:	4619      	mov	r1, r3
 80032c6:	f011 ffa7 	bl	8015218 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3320      	adds	r3, #32
 80032ce:	245f      	movs	r4, #95	; 0x5f
 80032d0:	461d      	mov	r5, r3
 80032d2:	2c00      	cmp	r4, #0
 80032d4:	db05      	blt.n	80032e2 <_ZN10STM32F7DMAC1Ev+0x46>
 80032d6:	4628      	mov	r0, r5
 80032d8:	f7ff ffd1 	bl	800327e <_ZN8touchgfx6BlitOpC1Ev>
 80032dc:	3520      	adds	r5, #32
 80032de:	3c01      	subs	r4, #1
 80032e0:	e7f7      	b.n	80032d2 <_ZN10STM32F7DMAC1Ev+0x36>
{
}
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bdb0      	pop	{r4, r5, r7, pc}
 80032ec:	0802a3c4 	.word	0x0802a3c4

080032f0 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	4a09      	ldr	r2, [pc, #36]	; (8003320 <_ZN10STM32F7DMAD1Ev+0x30>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80032fe:	205a      	movs	r0, #90	; 0x5a
 8003300:	f7ff fed2 	bl	80030a8 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	330c      	adds	r3, #12
 8003308:	4618      	mov	r0, r3
 800330a:	f000 faad 	bl	8003868 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff35 	bl	8003180 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	0802a3c4 	.word	0x0802a3c4

08003324 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
}
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ffdf 	bl	80032f0 <_ZN10STM32F7DMAD1Ev>
 8003332:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f021 fced 	bl	8024d16 <_ZdlPvj>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003350:	4b10      	ldr	r3, [pc, #64]	; (8003394 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	4a0f      	ldr	r2, [pc, #60]	; (8003394 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003356:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800335a:	6313      	str	r3, [r2, #48]	; 0x30
 800335c:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	4a09      	ldr	r2, [pc, #36]	; (8003394 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800336e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003372:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	4a06      	ldr	r2, [pc, #24]	; (8003394 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800337a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800337e:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <_ZN10STM32F7DMA10initializeEv+0x50>)
 8003382:	4a06      	ldr	r2, [pc, #24]	; (800339c <_ZN10STM32F7DMA10initializeEv+0x54>)
 8003384:	619a      	str	r2, [r3, #24]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003386:	205a      	movs	r0, #90	; 0x5a
 8003388:	f7ff fe70 	bl	800306c <__NVIC_EnableIRQ>
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40023800 	.word	0x40023800
 8003398:	20056a38 	.word	0x20056a38
 800339c:	08003263 	.word	0x08003263

080033a0 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]

    switch (format)
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	2b0b      	cmp	r3, #11
 80033b4:	d826      	bhi.n	8003404 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80033b6:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80033b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033bc:	080033f9 	.word	0x080033f9
 80033c0:	080033f3 	.word	0x080033f3
 80033c4:	080033ed 	.word	0x080033ed
 80033c8:	08003405 	.word	0x08003405
 80033cc:	08003405 	.word	0x08003405
 80033d0:	08003405 	.word	0x08003405
 80033d4:	08003405 	.word	0x08003405
 80033d8:	080033ff 	.word	0x080033ff
 80033dc:	080033ff 	.word	0x080033ff
 80033e0:	080033ff 	.word	0x080033ff
 80033e4:	080033ff 	.word	0x080033ff
 80033e8:	080033ff 	.word	0x080033ff
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
        break;
 80033f0:	e00e      	b.n	8003410 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80033f2:	2301      	movs	r3, #1
 80033f4:	60fb      	str	r3, [r7, #12]
        break;
 80033f6:	e00b      	b.n	8003410 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80033f8:	2302      	movs	r3, #2
 80033fa:	60fb      	str	r3, [r7, #12]
        break;
 80033fc:	e008      	b.n	8003410 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80033fe:	2305      	movs	r3, #5
 8003400:	60fb      	str	r3, [r7, #12]
        break;
 8003402:	e005      	b.n	8003410 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8003406:	4a06      	ldr	r2, [pc, #24]	; (8003420 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8003408:	2164      	movs	r1, #100	; 0x64
 800340a:	4806      	ldr	r0, [pc, #24]	; (8003424 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 800340c:	f021 fcfa 	bl	8024e04 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8003410:	68fb      	ldr	r3, [r7, #12]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	08029854 	.word	0x08029854
 8003420:	08029870 	.word	0x08029870
 8003424:	080298bc 	.word	0x080298bc

08003428 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]

    switch (format)
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	2b0a      	cmp	r3, #10
 800343c:	d821      	bhi.n	8003482 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800343e:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8003440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003444:	0800347d 	.word	0x0800347d
 8003448:	08003477 	.word	0x08003477
 800344c:	08003471 	.word	0x08003471
 8003450:	08003483 	.word	0x08003483
 8003454:	08003483 	.word	0x08003483
 8003458:	08003483 	.word	0x08003483
 800345c:	08003483 	.word	0x08003483
 8003460:	08003477 	.word	0x08003477
 8003464:	08003477 	.word	0x08003477
 8003468:	08003477 	.word	0x08003477
 800346c:	08003477 	.word	0x08003477
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]
        break;
 8003474:	e00b      	b.n	800348e <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8003476:	2301      	movs	r3, #1
 8003478:	60fb      	str	r3, [r7, #12]
        break;
 800347a:	e008      	b.n	800348e <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800347c:	2302      	movs	r3, #2
 800347e:	60fb      	str	r3, [r7, #12]
        break;
 8003480:	e005      	b.n	800348e <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8003484:	4a05      	ldr	r2, [pc, #20]	; (800349c <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8003486:	2185      	movs	r1, #133	; 0x85
 8003488:	4805      	ldr	r0, [pc, #20]	; (80034a0 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800348a:	f021 fcbb 	bl	8024e04 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800348e:	68fb      	ldr	r3, [r7, #12]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	08029854 	.word	0x08029854
 800349c:	08029934 	.word	0x08029934
 80034a0:	080298bc 	.word	0x080298bc

080034a4 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80034ac:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 80034bc:	b590      	push	{r4, r7, lr}
 80034be:	b089      	sub	sp, #36	; 0x24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	7f5b      	ldrb	r3, [r3, #29]
 80034ca:	4619      	mov	r1, r3
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff67 	bl	80033a0 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80034d2:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	7f9b      	ldrb	r3, [r3, #30]
 80034d8:	4619      	mov	r1, r3
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff ff60 	bl	80033a0 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80034e0:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	7f9b      	ldrb	r3, [r3, #30]
 80034e6:	4619      	mov	r1, r3
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ff9d 	bl	8003428 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80034ee:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	8b5b      	ldrh	r3, [r3, #26]
 80034f4:	461a      	mov	r2, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	8a9b      	ldrh	r3, [r3, #20]
 80034fa:	1ad2      	subs	r2, r2, r3
 80034fc:	4b97      	ldr	r3, [pc, #604]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	8b5b      	ldrh	r3, [r3, #26]
 8003504:	461a      	mov	r2, r3
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	8a9b      	ldrh	r3, [r3, #20]
 800350a:	1ad2      	subs	r2, r2, r3
 800350c:	4b93      	ldr	r3, [pc, #588]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800350e:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	8b1b      	ldrh	r3, [r3, #24]
 8003514:	461a      	mov	r2, r3
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	8a9b      	ldrh	r3, [r3, #20]
 800351a:	1ad2      	subs	r2, r2, r3
 800351c:	4b8f      	ldr	r3, [pc, #572]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800351e:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003520:	4a8e      	ldr	r2, [pc, #568]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	8adb      	ldrh	r3, [r3, #22]
 800352a:	461a      	mov	r2, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	8a9b      	ldrh	r3, [r3, #20]
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	431a      	orrs	r2, r3
 8003534:	4b89      	ldr	r3, [pc, #548]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003536:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	4b87      	ldr	r3, [pc, #540]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800353e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	4b85      	ldr	r3, [pc, #532]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003546:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003550:	d037      	beq.n	80035c2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8003552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003556:	f200 80e4 	bhi.w	8003722 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 800355a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355e:	d015      	beq.n	800358c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8003560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003564:	f200 80dd 	bhi.w	8003722 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003568:	2b80      	cmp	r3, #128	; 0x80
 800356a:	d045      	beq.n	80035f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 800356c:	2b80      	cmp	r3, #128	; 0x80
 800356e:	f200 80d8 	bhi.w	8003722 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003572:	2b40      	cmp	r3, #64	; 0x40
 8003574:	f000 80c0 	beq.w	80036f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	f200 80d2 	bhi.w	8003722 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 800357e:	2b04      	cmp	r3, #4
 8003580:	f000 80a5 	beq.w	80036ce <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
 8003584:	2b20      	cmp	r3, #32
 8003586:	f000 80b7 	beq.w	80036f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 800358a:	e0ca      	b.n	8003722 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	7f1b      	ldrb	r3, [r3, #28]
 8003590:	061b      	lsls	r3, r3, #24
 8003592:	4619      	mov	r1, r3
 8003594:	4a71      	ldr	r2, [pc, #452]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003596:	4b72      	ldr	r3, [pc, #456]	; (8003760 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8003598:	430b      	orrs	r3, r1
 800359a:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	330c      	adds	r3, #12
 80035a0:	4c6e      	ldr	r4, [pc, #440]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fdb2 	bl	800310c <_ZNK8touchgfx9colortypecvmEv>
 80035a8:	4603      	mov	r3, r0
 80035aa:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80035ac:	4a6b      	ldr	r2, [pc, #428]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	4b69      	ldr	r3, [pc, #420]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035b8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80035ba:	4b68      	ldr	r3, [pc, #416]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035bc:	4a69      	ldr	r2, [pc, #420]	; (8003764 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80035be:	601a      	str	r2, [r3, #0]
        break;
 80035c0:	e0c8      	b.n	8003754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	7f1b      	ldrb	r3, [r3, #28]
 80035c6:	061b      	lsls	r3, r3, #24
 80035c8:	4619      	mov	r1, r3
 80035ca:	4a64      	ldr	r2, [pc, #400]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035cc:	4b66      	ldr	r3, [pc, #408]	; (8003768 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80035ce:	430b      	orrs	r3, r1
 80035d0:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	330c      	adds	r3, #12
 80035d6:	4c61      	ldr	r4, [pc, #388]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fd97 	bl	800310c <_ZNK8touchgfx9colortypecvmEv>
 80035de:	4603      	mov	r3, r0
 80035e0:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80035e2:	4a5e      	ldr	r2, [pc, #376]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	4b5b      	ldr	r3, [pc, #364]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035ee:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80035f0:	4b5a      	ldr	r3, [pc, #360]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035f2:	4a5c      	ldr	r2, [pc, #368]	; (8003764 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80035f4:	601a      	str	r2, [r3, #0]
        break;
 80035f6:	e0ad      	b.n	8003754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
  case BLIT_OP_COPY_L8:
      {
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	60fb      	str	r3, [r7, #12]
        bool blend = true;
 80035fe:	2301      	movs	r3, #1
 8003600:	77fb      	strb	r3, [r7, #31]

        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	7f1b      	ldrb	r3, [r3, #28]
 8003606:	061b      	lsls	r3, r3, #24
 8003608:	461a      	mov	r2, r3
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	4a53      	ldr	r2, [pc, #332]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003614:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003616:	4a51      	ldr	r2, [pc, #324]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	4b4e      	ldr	r3, [pc, #312]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003622:	615a      	str	r2, [r3, #20]

        /* Write foreground CLUT memory address */
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1d1a      	adds	r2, r3, #4
 8003628:	4b4c      	ldr	r3, [pc, #304]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800362a:	62da      	str	r2, [r3, #44]	; 0x2c

        switch ((Bitmap::ClutFormat)palette->format)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8003636:	2b01      	cmp	r3, #1
 8003638:	d00d      	beq.n	8003656 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 800363a:	e020      	b.n	800367e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
        {
        case Bitmap::CLUT_FORMAT_L8_ARGB8888:
            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800363c:	4b47      	ldr	r3, [pc, #284]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	4b4a      	ldr	r3, [pc, #296]	; (800376c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8003642:	4013      	ands	r3, r2
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	8852      	ldrh	r2, [r2, #2]
 8003648:	3a01      	subs	r2, #1
 800364a:	0212      	lsls	r2, r2, #8
 800364c:	4611      	mov	r1, r2
 800364e:	4a43      	ldr	r2, [pc, #268]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003650:	430b      	orrs	r3, r1
 8003652:	61d3      	str	r3, [r2, #28]
            break;
 8003654:	e019      	b.n	800368a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB888:
            if(blitOp.alpha == 255)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	7f1b      	ldrb	r3, [r3, #28]
 800365a:	2bff      	cmp	r3, #255	; 0xff
 800365c:	d101      	bne.n	8003662 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
            {
                blend = false;
 800365e:	2300      	movs	r3, #0
 8003660:	77fb      	strb	r3, [r7, #31]
            }
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003662:	4b3e      	ldr	r3, [pc, #248]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003664:	69da      	ldr	r2, [r3, #28]
 8003666:	4b41      	ldr	r3, [pc, #260]	; (800376c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8003668:	4013      	ands	r3, r2
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	8852      	ldrh	r2, [r2, #2]
 800366e:	3a01      	subs	r2, #1
 8003670:	0212      	lsls	r2, r2, #8
 8003672:	4313      	orrs	r3, r2
 8003674:	4a39      	ldr	r2, [pc, #228]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003676:	f043 0310 	orr.w	r3, r3, #16
 800367a:	61d3      	str	r3, [r2, #28]
            break;
 800367c:	e005      	b.n	800368a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB565:
        default:
            assert(0 && "Unsupported format");
 800367e:	4b3c      	ldr	r3, [pc, #240]	; (8003770 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8003680:	4a3c      	ldr	r2, [pc, #240]	; (8003774 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8003682:	21ff      	movs	r1, #255	; 0xff
 8003684:	483c      	ldr	r0, [pc, #240]	; (8003778 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8003686:	f021 fbbd 	bl	8024e04 <__assert_func>
            break;
        }

        /* Enable the CLUT loading for the foreground */
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800368a:	4b34      	ldr	r3, [pc, #208]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	4a33      	ldr	r2, [pc, #204]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003690:	f043 0320 	orr.w	r3, r3, #32
 8003694:	61d3      	str	r3, [r2, #28]

        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003696:	4b31      	ldr	r3, [pc, #196]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bf14      	ite	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	2300      	moveq	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
        {
            OSWrappers::taskYield();
 80036ac:	f7ff fcd7 	bl	800305e <_ZN8touchgfx10OSWrappers9taskYieldEv>
        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80036b0:	e7f1      	b.n	8003696 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1da>
        }
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80036b2:	4b2a      	ldr	r3, [pc, #168]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80036b4:	2210      	movs	r2, #16
 80036b6:	609a      	str	r2, [r3, #8]

        /* Set DMA2D mode */
        if(blend)
 80036b8:	7ffb      	ldrb	r3, [r7, #31]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80036be:	4b27      	ldr	r3, [pc, #156]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80036c0:	4a28      	ldr	r2, [pc, #160]	; (8003764 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80036c2:	601a      	str	r2, [r3, #0]
        else
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
      }
      break;
 80036c4:	e046      	b.n	8003754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80036c6:	4b25      	ldr	r3, [pc, #148]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80036c8:	4a2c      	ldr	r2, [pc, #176]	; (800377c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 80036ca:	601a      	str	r2, [r3, #0]
      break;
 80036cc:	e042      	b.n	8003754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	7f1b      	ldrb	r3, [r3, #28]
 80036d2:	061b      	lsls	r3, r3, #24
 80036d4:	461a      	mov	r2, r3
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	4a20      	ldr	r2, [pc, #128]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80036dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e0:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80036e2:	4a1e      	ldr	r2, [pc, #120]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80036ee:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80036f0:	4b1a      	ldr	r3, [pc, #104]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80036f2:	4a1c      	ldr	r2, [pc, #112]	; (8003764 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80036f4:	601a      	str	r2, [r3, #0]
        break;
 80036f6:	e02d      	b.n	8003754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	7f1b      	ldrb	r3, [r3, #28]
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	461a      	mov	r2, r3
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	4313      	orrs	r3, r2
 8003704:	4a15      	ldr	r2, [pc, #84]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800370c:	4a13      	ldr	r2, [pc, #76]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	4b11      	ldr	r3, [pc, #68]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003718:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800371c:	4a11      	ldr	r2, [pc, #68]	; (8003764 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800371e:	601a      	str	r2, [r3, #0]
        break;
 8003720:	e018      	b.n	8003754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	7f1b      	ldrb	r3, [r3, #28]
 8003726:	061b      	lsls	r3, r3, #24
 8003728:	461a      	mov	r2, r3
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	4313      	orrs	r3, r2
 800372e:	4a0b      	ldr	r2, [pc, #44]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003734:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	7f5a      	ldrb	r2, [r3, #29]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	7f9b      	ldrb	r3, [r3, #30]
 800373e:	429a      	cmp	r2, r3
 8003740:	d003      	beq.n	800374a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28e>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003744:	4a0d      	ldr	r2, [pc, #52]	; (800377c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8003746:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8003748:	e003      	b.n	8003752 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800374a:	4b04      	ldr	r3, [pc, #16]	; (800375c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800374c:	f240 2201 	movw	r2, #513	; 0x201
 8003750:	601a      	str	r2, [r3, #0]
        break;
 8003752:	bf00      	nop
    }
}
 8003754:	bf00      	nop
 8003756:	3724      	adds	r7, #36	; 0x24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd90      	pop	{r4, r7, pc}
 800375c:	4002b000 	.word	0x4002b000
 8003760:	0002000a 	.word	0x0002000a
 8003764:	00020201 	.word	0x00020201
 8003768:	00020009 	.word	0x00020009
 800376c:	ffff00ef 	.word	0xffff00ef
 8003770:	08029984 	.word	0x08029984
 8003774:	080299a0 	.word	0x080299a0
 8003778:	080298bc 	.word	0x080298bc
 800377c:	00010201 	.word	0x00010201

08003780 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	7f9b      	ldrb	r3, [r3, #30]
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff fe49 	bl	8003428 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003796:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003798:	4a2f      	ldr	r2, [pc, #188]	; (8003858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	8adb      	ldrh	r3, [r3, #22]
 80037a2:	461a      	mov	r2, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	8a9b      	ldrh	r3, [r3, #20]
 80037a8:	041b      	lsls	r3, r3, #16
 80037aa:	431a      	orrs	r2, r3
 80037ac:	4b2a      	ldr	r3, [pc, #168]	; (8003858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	4b28      	ldr	r3, [pc, #160]	; (8003858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80037b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	8b5b      	ldrh	r3, [r3, #26]
 80037bc:	461a      	mov	r2, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	8a9b      	ldrh	r3, [r3, #20]
 80037c2:	1ad2      	subs	r2, r2, r3
 80037c4:	4b24      	ldr	r3, [pc, #144]	; (8003858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d12e      	bne.n	800382e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	8b5b      	ldrh	r3, [r3, #26]
 80037d4:	461a      	mov	r2, r3
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	8a9b      	ldrh	r3, [r3, #20]
 80037da:	1ad2      	subs	r2, r2, r3
 80037dc:	4b1e      	ldr	r3, [pc, #120]	; (8003858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80037de:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	8b5b      	ldrh	r3, [r3, #26]
 80037e4:	461a      	mov	r2, r3
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	8a9b      	ldrh	r3, [r3, #20]
 80037ea:	1ad2      	subs	r2, r2, r3
 80037ec:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80037ee:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80037f0:	4a19      	ldr	r2, [pc, #100]	; (8003858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	7f1b      	ldrb	r3, [r3, #28]
 80037fa:	061b      	lsls	r3, r3, #24
 80037fc:	4619      	mov	r1, r3
 80037fe:	4a16      	ldr	r2, [pc, #88]	; (8003858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003800:	4b16      	ldr	r3, [pc, #88]	; (800385c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8003802:	430b      	orrs	r3, r1
 8003804:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	330c      	adds	r3, #12
 800380a:	4c13      	ldr	r4, [pc, #76]	; (8003858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fc7d 	bl	800310c <_ZNK8touchgfx9colortypecvmEv>
 8003812:	4603      	mov	r3, r0
 8003814:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800381c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003824:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003826:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003828:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 800382a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800382c:	e010      	b.n	8003850 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800382e:	4a0a      	ldr	r2, [pc, #40]	; (8003858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8003834:	4b08      	ldr	r3, [pc, #32]	; (8003858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003836:	2200      	movs	r2, #0
 8003838:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	330c      	adds	r3, #12
 800383e:	4c06      	ldr	r4, [pc, #24]	; (8003858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fc63 	bl	800310c <_ZNK8touchgfx9colortypecvmEv>
 8003846:	4603      	mov	r3, r0
 8003848:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800384a:	4b03      	ldr	r3, [pc, #12]	; (8003858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800384c:	4a05      	ldr	r2, [pc, #20]	; (8003864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 800384e:	601a      	str	r2, [r3, #0]
}
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	bd90      	pop	{r4, r7, pc}
 8003858:	4002b000 	.word	0x4002b000
 800385c:	00010009 	.word	0x00010009
 8003860:	00020201 	.word	0x00020201
 8003864:	00030201 	.word	0x00030201

08003868 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	4a05      	ldr	r2, [pc, #20]	; (8003888 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fc53 	bl	8003124 <_ZN8touchgfx9DMA_QueueD1Ev>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	0802b778 	.word	0x0802b778

0800388c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff ffe7 	bl	8003868 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800389a:	2114      	movs	r1, #20
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f021 fa3a 	bl	8024d16 <_ZdlPvj>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
        : color(col)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	601a      	str	r2, [r3, #0]
    }
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	805a      	strh	r2, [r3, #2]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	809a      	strh	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	80da      	strh	r2, [r3, #6]
    {
    }
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8003900:	4a04      	ldr	r2, [pc, #16]	; (8003914 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6013      	str	r3, [r2, #0]
    }
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	2005675c 	.word	0x2005675c

08003918 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
    {
 8003920:	4a04      	ldr	r2, [pc, #16]	; (8003934 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	601a      	str	r2, [r3, #0]
    }
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	0802a630 	.word	0x0802a630

08003938 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
    }
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ffe9 	bl	8003918 <_ZN8touchgfx12FontProviderD1Ev>
 8003946:	2104      	movs	r1, #4
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f021 f9e4 	bl	8024d16 <_ZdlPvj>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8003966:	4a0b      	ldr	r2, [pc, #44]	; (8003994 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	60da      	str	r2, [r3, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	611a      	str	r2, [r3, #16]
    {
    }
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	0802a620 	.word	0x0802a620

08003998 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
    {
 80039a0:	4a04      	ldr	r2, [pc, #16]	; (80039b4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	601a      	str	r2, [r3, #0]
    }
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4618      	mov	r0, r3
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	0802a620 	.word	0x0802a620

080039b8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
    }
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ffe9 	bl	8003998 <_ZN8touchgfx7MVPHeapD1Ev>
 80039c6:	2114      	movs	r1, #20
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f021 f9a4 	bl	8024d16 <_ZdlPvj>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
    {
    }
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
    {
    }
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
    {
    }
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	70fb      	strb	r3, [r7, #3]
    {
    }
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
    {
    }
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
    {
    }
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
	...

08003a5c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
    {
 8003a64:	4a04      	ldr	r2, [pc, #16]	; (8003a78 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	601a      	str	r2, [r3, #0]
    }
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	0802a5f8 	.word	0x0802a5f8

08003a7c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
    }
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff ffe9 	bl	8003a5c <_ZN8touchgfx15UIEventListenerD1Ev>
 8003a8a:	2104      	movs	r1, #4
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f021 f942 	bl	8024d16 <_ZdlPvj>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
    {
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	601a      	str	r2, [r3, #0]
    }
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	0802bfe4 	.word	0x0802bfe4

08003abc <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
    }
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ffe9 	bl	8003a9c <_ZN8touchgfx3LCDD1Ev>
 8003aca:	2108      	movs	r1, #8
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f021 f922 	bl	8024d16 <_ZdlPvj>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	70fb      	strb	r3, [r7, #3]
    {
    }
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003b06:	6810      	ldr	r0, [r2, #0]
 8003b08:	6851      	ldr	r1, [r2, #4]
 8003b0a:	c303      	stmia	r3!, {r0, r1}
    }
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
    {
 8003b20:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	601a      	str	r2, [r3, #0]
    }
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	0802a5e0 	.word	0x0802a5e0

08003b38 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
    }
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff ffe9 	bl	8003b18 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8003b46:	2104      	movs	r1, #4
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f021 f8e4 	bl	8024d16 <_ZdlPvj>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4618      	mov	r0, r3
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	4a05      	ldr	r2, [pc, #20]	; (8003b78 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff ff77 	bl	8003a5c <_ZN8touchgfx15UIEventListenerD1Ev>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	0802c0bc 	.word	0x0802c0bc

08003b7c <_ZN8touchgfx11ApplicationD0Ev>:
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ffe7 	bl	8003b58 <_ZN8touchgfx11ApplicationD1Ev>
 8003b8a:	f44f 719c 	mov.w	r1, #312	; 0x138
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f021 f8c1 	bl	8024d16 <_ZdlPvj>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f804 	bl	8003bb4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00f      	beq.n	8003be6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4798      	blx	r3
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8003be6:	2300      	movs	r3, #0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00e      	beq.n	8003c0a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4610      	mov	r0, r2
 8003c00:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	4a05      	ldr	r2, [pc, #20]	; (8003c34 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff ff97 	bl	8003b58 <_ZN8touchgfx11ApplicationD1Ev>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	0802a59c 	.word	0x0802a59c

08003c38 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ffe7 	bl	8003c14 <_ZN8touchgfx14MVPApplicationD1Ev>
 8003c46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f021 f863 	bl	8024d16 <_ZdlPvj>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fd07 	bl	8004684 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ffcb 	bl	8003c14 <_ZN8touchgfx14MVPApplicationD1Ev>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	0802a540 	.word	0x0802a540

08003c8c <_ZN23FrontendApplicationBaseD0Ev>:
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff ffe1 	bl	8003c5c <_ZN23FrontendApplicationBaseD1Ev>
 8003c9a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f021 f839 	bl	8024d16 <_ZdlPvj>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	4a05      	ldr	r2, [pc, #20]	; (8003cd0 <_ZN19FrontendApplicationD1Ev+0x20>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff ffcb 	bl	8003c5c <_ZN23FrontendApplicationBaseD1Ev>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	0802a4fc 	.word	0x0802a4fc

08003cd4 <_ZN19FrontendApplicationD0Ev>:
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff ffe7 	bl	8003cb0 <_ZN19FrontendApplicationD1Ev>
 8003ce2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f021 f815 	bl	8024d16 <_ZdlPvj>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003d04:	4618      	mov	r0, r3
 8003d06:	f004 fd49 	bl	800879c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f013 ff37 	bl	8017b80 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	801a      	strh	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	805a      	strh	r2, [r3, #2]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	809a      	strh	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	80da      	strh	r2, [r3, #6]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	811a      	strh	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	815a      	strh	r2, [r3, #10]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	819a      	strh	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	739a      	strb	r2, [r3, #14]
        {
        }
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff ffd5 	bl	8003d1a <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	611a      	str	r2, [r3, #16]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	829a      	strh	r2, [r3, #20]
    {
    }
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8003d96:	4a55      	ldr	r2, [pc, #340]	; (8003eec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	605a      	str	r2, [r3, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	60da      	str	r2, [r3, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	611a      	str	r2, [r3, #16]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	615a      	str	r2, [r3, #20]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	619a      	str	r2, [r3, #24]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	331c      	adds	r3, #28
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ffcb 	bl	8003d60 <_ZN8touchgfx8GesturesC1Ev>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	639a      	str	r2, [r3, #56]	; 0x38
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	63da      	str	r2, [r3, #60]	; 0x3c
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	645a      	str	r2, [r3, #68]	; 0x44
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3350      	adds	r3, #80	; 0x50
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff fd58 	bl	80038ca <_ZN8touchgfx4RectC1Ev>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	659a      	str	r2, [r3, #88]	; 0x58
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	661a      	str	r2, [r3, #96]	; 0x60
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	671a      	str	r2, [r3, #112]	; 0x70
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8003ea2:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8003ea8:	4a12      	ldr	r2, [pc, #72]	; (8003ef4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8003eaa:	8b3b      	ldrh	r3, [r7, #24]
 8003eac:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8003eae:	4a12      	ldr	r2, [pc, #72]	; (8003ef8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8003eb0:	8bbb      	ldrh	r3, [r7, #28]
 8003eb2:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8003eb4:	4b11      	ldr	r3, [pc, #68]	; (8003efc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8003ebc:	881a      	ldrh	r2, [r3, #0]
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8003ec0:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8003ec4:	881a      	ldrh	r2, [r3, #0]
 8003ec6:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8003ec8:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8003eca:	8b3a      	ldrh	r2, [r7, #24]
 8003ecc:	8bbb      	ldrh	r3, [r7, #28]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	bf34      	ite	cc
 8003ed2:	2301      	movcc	r3, #1
 8003ed4:	2300      	movcs	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	0802b1e8 	.word	0x0802b1e8
 8003ef0:	200566e0 	.word	0x200566e0
 8003ef4:	200566d4 	.word	0x200566d4
 8003ef8:	200566d6 	.word	0x200566d6
 8003efc:	200566d8 	.word	0x200566d8
 8003f00:	200566da 	.word	0x200566da
 8003f04:	200566dc 	.word	0x200566dc

08003f08 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f001 fba7 	bl	8005668 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	f7ff fd0b 	bl	8003958 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8003f42:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	601a      	str	r2, [r3, #0]
    {

    }
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	0802a4e8 	.word	0x0802a4e8

08003f58 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	4801      	ldr	r0, [pc, #4]	; (8003f64 <__tcf_0+0xc>)
 8003f5e:	f000 f965 	bl	800422c <_ZN12FrontendHeapD1Ev>
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	200002a8 	.word	0x200002a8

08003f68 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8003f6c:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	f3bf 8f5b 	dmb	ish
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bf0c      	ite	eq
 8003f7e:	2301      	moveq	r3, #1
 8003f80:	2300      	movne	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d013      	beq.n	8003fb0 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8003f88:	480b      	ldr	r0, [pc, #44]	; (8003fb8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003f8a:	f020 fec6 	bl	8024d1a <__cxa_guard_acquire>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d008      	beq.n	8003fb0 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8003f9e:	4807      	ldr	r0, [pc, #28]	; (8003fbc <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8003fa0:	f000 f868 	bl	8004074 <_ZN12FrontendHeapC1Ev>
 8003fa4:	4804      	ldr	r0, [pc, #16]	; (8003fb8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003fa6:	f020 fec4 	bl	8024d32 <__cxa_guard_release>
 8003faa:	4805      	ldr	r0, [pc, #20]	; (8003fc0 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8003fac:	f020 ff48 	bl	8024e40 <atexit>
        return instance;
 8003fb0:	4b02      	ldr	r3, [pc, #8]	; (8003fbc <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20022a88 	.word	0x20022a88
 8003fbc:	200002a8 	.word	0x200002a8
 8003fc0:	08003f59 	.word	0x08003f59

08003fc4 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	4a05      	ldr	r2, [pc, #20]	; (8003fe4 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fcdf 	bl	8003998 <_ZN8touchgfx7MVPHeapD1Ev>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	0802a4e8 	.word	0x0802a4e8

08003fe8 <_ZN16FrontendHeapBaseD0Ev>:
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff ffe7 	bl	8003fc4 <_ZN16FrontendHeapBaseD1Ev>
 8003ff6:	2114      	movs	r1, #20
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f020 fe8c 	bl	8024d16 <_ZdlPvj>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4618      	mov	r0, r3
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4618      	mov	r0, r3
 8004014:	f00f ff82 	bl	8013f1c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004018:	4a03      	ldr	r2, [pc, #12]	; (8004028 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	0802a4b4 	.word	0x0802a4b4

0800402c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4618      	mov	r0, r3
 8004038:	f00f ff70 	bl	8013f1c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800403c:	4a03      	ldr	r2, [pc, #12]	; (800404c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	0802a480 	.word	0x0802a480

08004050 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4618      	mov	r0, r3
 800405c:	f00f ff5e 	bl	8013f1c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004060:	4a03      	ldr	r2, [pc, #12]	; (8004070 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	0802a44c 	.word	0x0802a44c

08004074 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8004074:	b5b0      	push	{r4, r5, r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af02      	add	r7, sp, #8
 800407a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f103 0414 	add.w	r4, r3, #20
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a1c      	ldr	r2, [pc, #112]	; (8004100 <_ZN12FrontendHeapC1Ev+0x8c>)
 800408e:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	4b1c      	ldr	r3, [pc, #112]	; (8004104 <_ZN12FrontendHeapC1Ev+0x90>)
 8004094:	440b      	add	r3, r1
                     app(model, *this)
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	4613      	mov	r3, r2
 800409a:	462a      	mov	r2, r5
 800409c:	4621      	mov	r1, r4
 800409e:	f7ff ff41 	bl	8003f24 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80040a2:	4a19      	ldr	r2, [pc, #100]	; (8004108 <_ZN12FrontendHeapC1Ev+0x94>)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3314      	adds	r3, #20
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff ffab 	bl	8004008 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	332c      	adds	r3, #44	; 0x2c
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff ffb8 	bl	800402c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <_ZN12FrontendHeapC1Ev+0x8c>)
 80040c0:	4413      	add	r3, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff ffc4 	bl	8004050 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <_ZN12FrontendHeapC1Ev+0x98>)
 80040cc:	4413      	add	r3, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f004 fb56 	bl	8008780 <_ZN5ModelC1Ev>
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <_ZN12FrontendHeapC1Ev+0x90>)
 80040d8:	4413      	add	r3, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	490b      	ldr	r1, [pc, #44]	; (800410c <_ZN12FrontendHeapC1Ev+0x98>)
 80040de:	4411      	add	r1, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f004 fb36 	bl	8008754 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <_ZN12FrontendHeapC1Ev+0x90>)
 80040ee:	4413      	add	r3, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	f7ff ff09 	bl	8003f08 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004100:	00022670 	.word	0x00022670
 8004104:	00022688 	.word	0x00022688
 8004108:	0802a438 	.word	0x0802a438
 800410c:	00022684 	.word	0x00022684

08004110 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	8bbb      	ldrh	r3, [r7, #28]
 8004122:	9301      	str	r3, [sp, #4]
 8004124:	8b3b      	ldrh	r3, [r7, #24]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	f7ff fe2b 	bl	8003d88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8004132:	4a04      	ldr	r2, [pc, #16]	; (8004144 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	601a      	str	r2, [r3, #0]
    }
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	0802a644 	.word	0x0802a644

08004148 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	8bbb      	ldrh	r3, [r7, #28]
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	8b3b      	ldrh	r3, [r7, #24]
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	f7ff ffd3 	bl	8004110 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800416a:	4a04      	ldr	r2, [pc, #16]	; (800417c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	601a      	str	r2, [r3, #0]
    }
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	0802a2f8 	.word	0x0802a2f8

08004180 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	4a04      	ldr	r2, [pc, #16]	; (800419c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	0802a2e0 	.word	0x0802a2e0

080041a0 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff ffe8 	bl	8004180 <_ZN8touchgfx15TouchControllerC1Ev>
 80041b0:	4a03      	ldr	r2, [pc, #12]	; (80041c0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	0802a2c8 	.word	0x0802a2c8

080041c4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80041ca:	f000 ffed 	bl	80051a8 <_ZN14BitmapDatabase11getInstanceEv>
 80041ce:	4604      	mov	r4, r0
 80041d0:	f000 fff4 	bl	80051bc <_ZN14BitmapDatabase15getInstanceSizeEv>
 80041d4:	4603      	mov	r3, r0
 80041d6:	4619      	mov	r1, r3
 80041d8:	2300      	movs	r3, #0
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	2300      	movs	r3, #0
 80041de:	2200      	movs	r2, #0
 80041e0:	4620      	mov	r0, r4
 80041e2:	f016 fe8d 	bl	801af00 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80041e6:	4809      	ldr	r0, [pc, #36]	; (800420c <touchgfx_init+0x48>)
 80041e8:	f7ff fb86 	bl	80038f8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80041ec:	2000      	movs	r0, #0
 80041ee:	f003 ffe5 	bl	80081bc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80041f2:	4807      	ldr	r0, [pc, #28]	; (8004210 <touchgfx_init+0x4c>)
 80041f4:	f016 fdc6 	bl	801ad84 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80041f8:	f7ff feb6 	bl	8003f68 <_ZN12FrontendHeap11getInstanceEv>
 80041fc:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80041fe:	4805      	ldr	r0, [pc, #20]	; (8004214 <touchgfx_init+0x50>)
 8004200:	f7fe fdde 	bl	8002dc0 <_ZN11TouchGFXHAL10initializeEv>
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	bd90      	pop	{r4, r7, pc}
 800420c:	20023708 	.word	0x20023708
 8004210:	20000008 	.word	0x20000008
 8004214:	2002370c 	.word	0x2002370c

08004218 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800421c:	4802      	ldr	r0, [pc, #8]	; (8004228 <touchgfx_taskEntry+0x10>)
 800421e:	f010 f8c6 	bl	80143ae <_ZN8touchgfx3HAL9taskEntryEv>
}
 8004222:	bf00      	nop
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	2002370c 	.word	0x2002370c

0800422c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	4a10      	ldr	r2, [pc, #64]	; (8004278 <_ZN12FrontendHeapD1Ev+0x4c>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4b0f      	ldr	r3, [pc, #60]	; (800427c <_ZN12FrontendHeapD1Ev+0x50>)
 800423e:	4413      	add	r3, r2
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fd35 	bl	8003cb0 <_ZN19FrontendApplicationD1Ev>
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <_ZN12FrontendHeapD1Ev+0x54>)
 800424a:	4413      	add	r3, r2
 800424c:	4618      	mov	r0, r3
 800424e:	f000 f82b 	bl	80042a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	332c      	adds	r3, #44	; 0x2c
 8004256:	4618      	mov	r0, r3
 8004258:	f000 f848 	bl	80042ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3314      	adds	r3, #20
 8004260:	4618      	mov	r0, r3
 8004262:	f000 f867 	bl	8004334 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff feab 	bl	8003fc4 <_ZN16FrontendHeapBaseD1Ev>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	0802a438 	.word	0x0802a438
 800427c:	00022688 	.word	0x00022688
 8004280:	00022670 	.word	0x00022670

08004284 <_ZN12FrontendHeapD0Ev>:
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff ffcd 	bl	800422c <_ZN12FrontendHeapD1Ev>
 8004292:	4904      	ldr	r1, [pc, #16]	; (80042a4 <_ZN12FrontendHeapD0Ev+0x20>)
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f020 fd3e 	bl	8024d16 <_ZdlPvj>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4618      	mov	r0, r3
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	000227e0 	.word	0x000227e0

080042a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	4a05      	ldr	r2, [pc, #20]	; (80042c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f00f fe2d 	bl	8013f18 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	0802a44c 	.word	0x0802a44c

080042cc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff ffe7 	bl	80042a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80042da:	2114      	movs	r1, #20
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f020 fd1a 	bl	8024d16 <_ZdlPvj>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	4a05      	ldr	r2, [pc, #20]	; (800430c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f00f fe0b 	bl	8013f18 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	0802a480 	.word	0x0802a480

08004310 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff ffe7 	bl	80042ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800431e:	4904      	ldr	r1, [pc, #16]	; (8004330 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x20>)
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f020 fcf8 	bl	8024d16 <_ZdlPvj>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	00022644 	.word	0x00022644

08004334 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	4a05      	ldr	r2, [pc, #20]	; (8004354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4618      	mov	r0, r3
 8004346:	f00f fde7 	bl	8013f18 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	0802a4b4 	.word	0x0802a4b4

08004358 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff ffe7 	bl	8004334 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004366:	2118      	movs	r1, #24
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f020 fcd4 	bl	8024d16 <_ZdlPvj>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	4a05      	ldr	r2, [pc, #20]	; (8004398 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fb87 	bl	8003a9c <_ZN8touchgfx3LCDD1Ev>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	0802d0b4 	.word	0x0802d0b4

0800439c <_ZN8touchgfx8LCD24bppD0Ev>:
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff ffe7 	bl	8004378 <_ZN8touchgfx8LCD24bppD1Ev>
 80043aa:	2158      	movs	r1, #88	; 0x58
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f020 fcb2 	bl	8024d16 <_ZdlPvj>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <_Z41__static_initialization_and_destruction_0ii>:
 80043bc:	b580      	push	{r7, lr}
 80043be:	b094      	sub	sp, #80	; 0x50
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	f040 8129 	bne.w	8004620 <_Z41__static_initialization_and_destruction_0ii+0x264>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043d4:	4293      	cmp	r3, r2
 80043d6:	f040 8123 	bne.w	8004620 <_Z41__static_initialization_and_destruction_0ii+0x264>
 80043da:	2300      	movs	r3, #0
 80043dc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80043e0:	2300      	movs	r3, #0
 80043e2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80043e6:	2300      	movs	r3, #0
 80043e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043ec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80043f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80043f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80043f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80043fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004400:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004404:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004408:	041b      	lsls	r3, r3, #16
 800440a:	461a      	mov	r2, r3
 800440c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	431a      	orrs	r2, r3
 8004414:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004418:	4313      	orrs	r3, r2
 800441a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800441e:	f107 0320 	add.w	r3, r7, #32
 8004422:	4611      	mov	r1, r2
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fa41 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 800442a:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800442c:	bf00      	nop
 800442e:	461a      	mov	r2, r3
};

namespace colors
{
    using namespace touchgfx;
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8004430:	4b89      	ldr	r3, [pc, #548]	; (8004658 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	23ff      	movs	r3, #255	; 0xff
 8004436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800443a:	2300      	movs	r3, #0
 800443c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004440:	2300      	movs	r3, #0
 8004442:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800444a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800444e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004456:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800445a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800445e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004462:	041b      	lsls	r3, r3, #16
 8004464:	461a      	mov	r2, r3
 8004466:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	431a      	orrs	r2, r3
 800446e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004472:	4313      	orrs	r3, r2
 8004474:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004478:	f107 031c 	add.w	r3, r7, #28
 800447c:	4611      	mov	r1, r2
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fa14 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8004484:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8004486:	bf00      	nop
 8004488:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800448a:	4b74      	ldr	r3, [pc, #464]	; (800465c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	2300      	movs	r3, #0
 8004490:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004494:	23ff      	movs	r3, #255	; 0xff
 8004496:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800449a:	2300      	movs	r3, #0
 800449c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044a0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80044a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80044a8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80044ac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80044b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80044b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80044bc:	041b      	lsls	r3, r3, #16
 80044be:	461a      	mov	r2, r3
 80044c0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	431a      	orrs	r2, r3
 80044c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80044d2:	f107 0318 	add.w	r3, r7, #24
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff f9e7 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80044de:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 80044e0:	bf00      	nop
 80044e2:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 80044e4:	4b5e      	ldr	r3, [pc, #376]	; (8004660 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	2300      	movs	r3, #0
 80044ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044ee:	2300      	movs	r3, #0
 80044f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80044f4:	23ff      	movs	r3, #255	; 0xff
 80044f6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80044fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80044fe:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8004502:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004506:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800450a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800450e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004512:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004516:	041b      	lsls	r3, r3, #16
 8004518:	461a      	mov	r2, r3
 800451a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	431a      	orrs	r2, r3
 8004522:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004526:	4313      	orrs	r3, r2
 8004528:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800452c:	f107 0314 	add.w	r3, r7, #20
 8004530:	4611      	mov	r1, r2
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff f9ba 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8004538:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800453a:	bf00      	nop
 800453c:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800453e:	4b49      	ldr	r3, [pc, #292]	; (8004664 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	23f7      	movs	r3, #247	; 0xf7
 8004544:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8004548:	234c      	movs	r3, #76	; 0x4c
 800454a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800454e:	2302      	movs	r3, #2
 8004550:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004554:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004558:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800455c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004560:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004564:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004568:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800456c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004570:	041b      	lsls	r3, r3, #16
 8004572:	461a      	mov	r2, r3
 8004574:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004578:	021b      	lsls	r3, r3, #8
 800457a:	431a      	orrs	r2, r3
 800457c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004580:	4313      	orrs	r3, r2
 8004582:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004586:	f107 0310 	add.w	r3, r7, #16
 800458a:	4611      	mov	r1, r2
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff f98d 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8004592:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8004594:	bf00      	nop
 8004596:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8004598:	4b33      	ldr	r3, [pc, #204]	; (8004668 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	23f7      	movs	r3, #247	; 0xf7
 800459e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80045a2:	23d2      	movs	r3, #210	; 0xd2
 80045a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80045a8:	2302      	movs	r3, #2
 80045aa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80045ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045b2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80045b6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80045ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045be:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80045c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80045c6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80045ca:	041b      	lsls	r3, r3, #16
 80045cc:	461a      	mov	r2, r3
 80045ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	431a      	orrs	r2, r3
 80045d6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80045da:	4313      	orrs	r3, r2
 80045dc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80045e0:	f107 030c 	add.w	r3, r7, #12
 80045e4:	4611      	mov	r1, r2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff f960 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80045ec:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 80045ee:	bf00      	nop
 80045f0:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 80045f2:	4b1e      	ldr	r3, [pc, #120]	; (800466c <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80045f4:	601a      	str	r2, [r3, #0]
static STM32TouchController tc;
 80045f6:	481e      	ldr	r0, [pc, #120]	; (8004670 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80045f8:	f7ff fdd2 	bl	80041a0 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 80045fc:	481d      	ldr	r0, [pc, #116]	; (8004674 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 80045fe:	f7fe fe4d 	bl	800329c <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8004602:	481d      	ldr	r0, [pc, #116]	; (8004678 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8004604:	f018 fede 	bl	801d3c4 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8004608:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800460c:	9301      	str	r3, [sp, #4]
 800460e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	4b16      	ldr	r3, [pc, #88]	; (8004670 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8004616:	4a18      	ldr	r2, [pc, #96]	; (8004678 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8004618:	4916      	ldr	r1, [pc, #88]	; (8004674 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800461a:	4818      	ldr	r0, [pc, #96]	; (800467c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800461c:	f7ff fd94 	bl	8004148 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d113      	bne.n	800464e <_Z41__static_initialization_and_destruction_0ii+0x292>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800462c:	4293      	cmp	r3, r2
 800462e:	d10e      	bne.n	800464e <_Z41__static_initialization_and_destruction_0ii+0x292>
 8004630:	4812      	ldr	r0, [pc, #72]	; (800467c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8004632:	f7fe fc57 	bl	8002ee4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8004636:	4812      	ldr	r0, [pc, #72]	; (8004680 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8004638:	f000 f846 	bl	80046c8 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 800463c:	480e      	ldr	r0, [pc, #56]	; (8004678 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800463e:	f7ff fe9b 	bl	8004378 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8004642:	480c      	ldr	r0, [pc, #48]	; (8004674 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8004644:	f7fe fe54 	bl	80032f0 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8004648:	4809      	ldr	r0, [pc, #36]	; (8004670 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800464a:	f7fe fa1d 	bl	8002a88 <_ZN20STM32TouchControllerD1Ev>
}
 800464e:	bf00      	nop
 8004650:	3748      	adds	r7, #72	; 0x48
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000290 	.word	0x20000290
 800465c:	20000294 	.word	0x20000294
 8004660:	20000298 	.word	0x20000298
 8004664:	2000029c 	.word	0x2000029c
 8004668:	200002a0 	.word	0x200002a0
 800466c:	200002a4 	.word	0x200002a4
 8004670:	20022a8c 	.word	0x20022a8c
 8004674:	20022a90 	.word	0x20022a90
 8004678:	200236b0 	.word	0x200236b0
 800467c:	2002370c 	.word	0x2002370c
 8004680:	20000008 	.word	0x20000008

08004684 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	4a05      	ldr	r2, [pc, #20]	; (80046a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fa3f 	bl	8003b18 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	0802a584 	.word	0x0802a584

080046a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff ffe7 	bl	8004684 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80046b6:	2110      	movs	r1, #16
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f020 fb2c 	bl	8024d16 <_ZdlPvj>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_03 = 5; // swisop3_60_4bpp
    static const touchgfx::FontId TYPOGRAPHY_04 = 6; // swisop3_50_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	4a05      	ldr	r2, [pc, #20]	; (80046e8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff f91d 	bl	8003918 <_ZN8touchgfx12FontProviderD1Ev>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	0802a710 	.word	0x0802a710

080046ec <_ZN23ApplicationFontProviderD0Ev>:
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff ffe7 	bl	80046c8 <_ZN23ApplicationFontProviderD1Ev>
 80046fa:	2104      	movs	r1, #4
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f020 fb0a 	bl	8024d16 <_ZdlPvj>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8004714:	2301      	movs	r3, #1
    }
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800472a:	230c      	movs	r3, #12
    }
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8004744:	887a      	ldrh	r2, [r7, #2]
 8004746:	4613      	mov	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	3308      	adds	r3, #8
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	4413      	add	r3, r2
    }
 8004754:	4618      	mov	r0, r3
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800476c:	887a      	ldrh	r2, [r7, #2]
 800476e:	4613      	mov	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	3308      	adds	r3, #8
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	4413      	add	r3, r2
    }
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8004790:	2301      	movs	r3, #1
    }
 8004792:	4618      	mov	r0, r3
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80047a8:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv+0x18>)
    }
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	0002263c 	.word	0x0002263c

080047bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80047c8:	887b      	ldrh	r3, [r7, #2]
 80047ca:	4a06      	ldr	r2, [pc, #24]	; (80047e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 80047cc:	fb02 f303 	mul.w	r3, r2, r3
 80047d0:	3308      	adds	r3, #8
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	4413      	add	r3, r2
    }
 80047d6:	4618      	mov	r0, r3
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	0002263c 	.word	0x0002263c

080047e8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80047f4:	887b      	ldrh	r3, [r7, #2]
 80047f6:	4a06      	ldr	r2, [pc, #24]	; (8004810 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 80047f8:	fb02 f303 	mul.w	r3, r2, r3
 80047fc:	3308      	adds	r3, #8
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	4413      	add	r3, r2
    }
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	0002263c 	.word	0x0002263c

08004814 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800481c:	2301      	movs	r3, #1
    }
 800481e:	4618      	mov	r0, r3
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8004832:	2310      	movs	r3, #16
    }
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800484c:	887b      	ldrh	r3, [r7, #2]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	3308      	adds	r3, #8
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4413      	add	r3, r2
    }
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	460b      	mov	r3, r1
 800486c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800486e:	887b      	ldrh	r3, [r7, #2]
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	3308      	adds	r3, #8
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	4413      	add	r3, r2
    }
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	68d2      	ldr	r2, [r2, #12]
 8004894:	1052      	asrs	r2, r2, #1
 8004896:	1899      	adds	r1, r3, r2
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	e00a      	b.n	80048c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	68d2      	ldr	r2, [r2, #12]
 80048b2:	1052      	asrs	r2, r2, #1
 80048b4:	4413      	add	r3, r2
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6892      	ldr	r2, [r2, #8]
 80048bc:	4413      	add	r3, r2
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4608      	mov	r0, r1
 80048c2:	4798      	blx	r3
    }
 80048c4:	bf00      	nop
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d010      	beq.n	80048fe <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d107      	bne.n	80048f4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80048f4:	2300      	movs	r3, #0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d001      	beq.n	80048fe <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80048fe:	2300      	movs	r3, #0
    }
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <_GLOBAL__sub_I_touchgfx_init>:
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
 8004910:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004914:	2001      	movs	r0, #1
 8004916:	f7ff fd51 	bl	80043bc <_Z41__static_initialization_and_destruction_0ii>
 800491a:	bd80      	pop	{r7, pc}

0800491c <_GLOBAL__sub_D_touchgfx_init>:
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
 8004920:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004924:	2000      	movs	r0, #0
 8004926:	f7ff fd49 	bl	80043bc <_Z41__static_initialization_and_destruction_0ii>
 800492a:	bd80      	pop	{r7, pc}

0800492c <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	331c      	adds	r3, #28
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	4798      	blx	r3
    }
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	78fa      	ldrb	r2, [r7, #3]
 8004958:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8004976:	3301      	adds	r3, #1
 8004978:	b2da      	uxtb	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d105      	bne.n	80049b0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	78fa      	ldrb	r2, [r7, #3]
 80049a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e027      	b.n	8004a00 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d123      	bne.n	80049fe <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d014      	beq.n	80049e8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3390      	adds	r3, #144	; 0x90
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	4798      	blx	r3
 80049ca:	4603      	mov	r3, r0
 80049cc:	461a      	mov	r2, r3
 80049ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d008      	beq.n	80049e8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	f083 0301 	eor.w	r3, r3, #1
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 80049e8:	2300      	movs	r3, #0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d005      	beq.n	80049fa <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	78fa      	ldrb	r2, [r7, #3]
 80049f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e002      	b.n	8004a00 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e000      	b.n	8004a00 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 80049fe:	2300      	movs	r3, #0
    }
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	200566de 	.word	0x200566de

08004a0c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <__NVIC_EnableIRQ>:
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	db0b      	blt.n	8004a52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	f003 021f 	and.w	r2, r3, #31
 8004a40:	4907      	ldr	r1, [pc, #28]	; (8004a60 <__NVIC_EnableIRQ+0x38>)
 8004a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	2001      	movs	r0, #1
 8004a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	e000e100 	.word	0xe000e100

08004a64 <__NVIC_DisableIRQ>:
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	db12      	blt.n	8004a9c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	f003 021f 	and.w	r2, r3, #31
 8004a7c:	490a      	ldr	r1, [pc, #40]	; (8004aa8 <__NVIC_DisableIRQ+0x44>)
 8004a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	2001      	movs	r0, #1
 8004a86:	fa00 f202 	lsl.w	r2, r0, r2
 8004a8a:	3320      	adds	r3, #32
 8004a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a90:	f3bf 8f4f 	dsb	sy
}
 8004a94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a96:	f3bf 8f6f 	isb	sy
}
 8004a9a:	bf00      	nop
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	e000e100 	.word	0xe000e100

08004aac <__NVIC_SetPriority>:
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	6039      	str	r1, [r7, #0]
 8004ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	db0a      	blt.n	8004ad6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	490c      	ldr	r1, [pc, #48]	; (8004af8 <__NVIC_SetPriority+0x4c>)
 8004ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aca:	0112      	lsls	r2, r2, #4
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	440b      	add	r3, r1
 8004ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ad4:	e00a      	b.n	8004aec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	4908      	ldr	r1, [pc, #32]	; (8004afc <__NVIC_SetPriority+0x50>)
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	3b04      	subs	r3, #4
 8004ae4:	0112      	lsls	r2, r2, #4
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	440b      	add	r3, r1
 8004aea:	761a      	strb	r2, [r3, #24]
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	e000e100 	.word	0xe000e100
 8004afc:	e000ed00 	.word	0xe000ed00

08004b00 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004b06:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <SCB_CleanInvalidateDCache+0x8c>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004b0e:	f3bf 8f4f 	dsb	sy
}
 8004b12:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8004b14:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <SCB_CleanInvalidateDCache+0x8c>)
 8004b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1a:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	0b5b      	lsrs	r3, r3, #13
 8004b20:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004b24:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	08db      	lsrs	r3, r3, #3
 8004b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b2e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004b38:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004b3e:	4913      	ldr	r1, [pc, #76]	; (8004b8c <SCB_CleanInvalidateDCache+0x8c>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	1e5a      	subs	r2, r3, #1
 8004b4a:	60ba      	str	r2, [r7, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	bf14      	ite	ne
 8004b50:	2301      	movne	r3, #1
 8004b52:	2300      	moveq	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d000      	beq.n	8004b5c <SCB_CleanInvalidateDCache+0x5c>
      do {
 8004b5a:	e7e9      	b.n	8004b30 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1e5a      	subs	r2, r3, #1
 8004b60:	60fa      	str	r2, [r7, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bf14      	ite	ne
 8004b66:	2301      	movne	r3, #1
 8004b68:	2300      	moveq	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d000      	beq.n	8004b72 <SCB_CleanInvalidateDCache+0x72>
    do {
 8004b70:	e7d9      	b.n	8004b26 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8004b72:	f3bf 8f4f 	dsb	sy
}
 8004b76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b78:	f3bf 8f6f 	isb	sy
}
 8004b7c:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8004b7e:	bf00      	nop
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	e000ed00 	.word	0xe000ed00

08004b90 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8004b90:	b5b0      	push	{r4, r5, r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f00f fbf5 	bl	801438a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8004ba0:	687d      	ldr	r5, [r7, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	335c      	adds	r3, #92	; 0x5c
 8004ba8:	681c      	ldr	r4, [r3, #0]
 8004baa:	f013 f8e5 	bl	8017d78 <_ZN8touchgfx11Application11getInstanceEv>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	490d      	ldr	r1, [pc, #52]	; (8004bf0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff ff26 	bl	8004a0c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff fee1 	bl	800498c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3380      	adds	r3, #128	; 0x80
 8004bd2:	681c      	ldr	r4, [r3, #0]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8004bdc:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2101      	movs	r1, #1
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff feb0 	bl	8004948 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8004be8:	bf00      	nop
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bdb0      	pop	{r4, r5, r7, pc}
 8004bf0:	08003045 	.word	0x08003045

08004bf4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8004bfc:	2109      	movs	r1, #9
 8004bfe:	205a      	movs	r0, #90	; 0x5a
 8004c00:	f7ff ff54 	bl	8004aac <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8004c04:	2109      	movs	r1, #9
 8004c06:	2058      	movs	r0, #88	; 0x58
 8004c08:	f7ff ff50 	bl	8004aac <__NVIC_SetPriority>
}
 8004c0c:	bf00      	nop
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8004c1c:	205a      	movs	r0, #90	; 0x5a
 8004c1e:	f7ff ff03 	bl	8004a28 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8004c22:	2058      	movs	r0, #88	; 0x58
 8004c24:	f7ff ff00 	bl	8004a28 <__NVIC_EnableIRQ>
}
 8004c28:	bf00      	nop
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8004c38:	205a      	movs	r0, #90	; 0x5a
 8004c3a:	f7ff ff13 	bl	8004a64 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8004c3e:	2058      	movs	r0, #88	; 0x58
 8004c40:	f7ff ff10 	bl	8004a64 <__NVIC_DisableIRQ>
}
 8004c44:	bf00      	nop
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8004c54:	4b11      	ldr	r3, [pc, #68]	; (8004c9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8004c66:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8004c68:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8004c7a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8004c7c:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8004c7e:	881a      	ldrh	r2, [r3, #0]
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004c82:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	4a04      	ldr	r2, [pc, #16]	; (8004c9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	40016800 	.word	0x40016800
 8004ca0:	200237a0 	.word	0x200237a0
 8004ca4:	200237a2 	.word	0x200237a2

08004ca8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f00f fb50 	bl	8014358 <_ZN8touchgfx3HAL10beginFrameEv>
 8004cb8:	4603      	mov	r3, r0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f00f fb4f 	bl	8014370 <_ZN8touchgfx3HAL8endFrameEv>
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8004ce4:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	40016884 	.word	0x40016884

08004cf8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8004d02:	4a06      	ldr	r2, [pc, #24]	; (8004d1c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40016884 	.word	0x40016884
 8004d20:	40016800 	.word	0x40016800

08004d24 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6839      	ldr	r1, [r7, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f00f fadd 	bl	80142f2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004d38:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bf14      	ite	ne
 8004d44:	2301      	movne	r3, #1
 8004d46:	2300      	moveq	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 8004d4e:	f7ff fed7 	bl	8004b00 <SCB_CleanInvalidateDCache>
    }
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	e000ed00 	.word	0xe000ed00

08004d60 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	f00f fc24 	bl	80145c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8004d7a:	4603      	mov	r3, r0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8004d8c:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8004d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d90:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8004d92:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3301      	adds	r3, #1
 8004da0:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8004da2:	89fa      	ldrh	r2, [r7, #14]
 8004da4:	89bb      	ldrh	r3, [r7, #12]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d304      	bcc.n	8004db4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8004daa:	89fa      	ldrh	r2, [r7, #14]
 8004dac:	89bb      	ldrh	r3, [r7, #12]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	e000      	b.n	8004db6 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40016800 	.word	0x40016800

08004dc8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004dd0:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	bf14      	ite	ne
 8004ddc:	2301      	movne	r3, #1
 8004dde:	2300      	moveq	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8004de6:	f7ff fe8b 	bl	8004b00 <SCB_CleanInvalidateDCache>
    }
}
 8004dea:	bf00      	nop
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	e000ed00 	.word	0xe000ed00

08004df8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004e00:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf14      	ite	ne
 8004e0c:	2301      	movne	r3, #1
 8004e0e:	2300      	moveq	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8004e16:	f7ff fe73 	bl	8004b00 <SCB_CleanInvalidateDCache>
    }
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	e000ed00 	.word	0xe000ed00

08004e28 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8004e30:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <HAL_LTDC_LineEventCallback+0x74>)
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	4a1a      	ldr	r2, [pc, #104]	; (8004ea0 <HAL_LTDC_LineEventCallback+0x78>)
 8004e36:	8812      	ldrh	r2, [r2, #0]
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2301      	moveq	r3, #1
 8004e3e:	2300      	movne	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d017      	beq.n	8004e76 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8004e46:	4b17      	ldr	r3, [pc, #92]	; (8004ea4 <HAL_LTDC_LineEventCallback+0x7c>)
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f007 fca3 	bl	800c798 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8004e52:	f7fe f9e9 	bl	8003228 <_ZN8touchgfx3HAL11getInstanceEv>
 8004e56:	4603      	mov	r3, r0
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff fd85 	bl	8004968 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8004e5e:	f7fe f8c9 	bl	8002ff4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8004e62:	f7fe f9e1 	bl	8003228 <_ZN8touchgfx3HAL11getInstanceEv>
 8004e66:	4603      	mov	r3, r0
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f010 f86b 	bl	8014f44 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8004e6e:	2000      	movs	r0, #0
 8004e70:	f7fd fe2c 	bl	8002acc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8004e74:	e00e      	b.n	8004e94 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8004e76:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <HAL_LTDC_LineEventCallback+0x78>)
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f007 fc8b 	bl	800c798 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8004e82:	2000      	movs	r0, #0
 8004e84:	f7fd fe2d 	bl	8002ae2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8004e88:	f7fe f9ce 	bl	8003228 <_ZN8touchgfx3HAL11getInstanceEv>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fd4c 	bl	800492c <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40016800 	.word	0x40016800
 8004ea0:	200237a0 	.word	0x200237a0
 8004ea4:	200237a2 	.word	0x200237a2

08004ea8 <_Z41__static_initialization_and_destruction_0ii>:
}
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b092      	sub	sp, #72	; 0x48
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	f040 8114 	bne.w	80050e2 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	f040 810e 	bne.w	80050e2 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ed8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004edc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004ee0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ee4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004ef0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ef4:	041b      	lsls	r3, r3, #16
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	431a      	orrs	r2, r3
 8004f00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004f0a:	f107 0320 	add.w	r3, r7, #32
 8004f0e:	4611      	mov	r1, r2
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fe fccb 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8004f16:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8004f18:	bf00      	nop
 8004f1a:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8004f1c:	4b73      	ldr	r3, [pc, #460]	; (80050ec <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	23ff      	movs	r3, #255	; 0xff
 8004f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004f26:	2300      	movs	r3, #0
 8004f28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004f32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f36:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004f3a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004f4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f4e:	041b      	lsls	r3, r3, #16
 8004f50:	461a      	mov	r2, r3
 8004f52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004f64:	f107 031c 	add.w	r3, r7, #28
 8004f68:	4611      	mov	r1, r2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fe fc9e 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8004f70:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8004f72:	bf00      	nop
 8004f74:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8004f76:	4b5e      	ldr	r3, [pc, #376]	; (80050f0 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004f80:	23ff      	movs	r3, #255	; 0xff
 8004f82:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8004f86:	2300      	movs	r3, #0
 8004f88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f8c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004f90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004f94:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004f98:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8004f9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fa0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004fa4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004fa8:	041b      	lsls	r3, r3, #16
 8004faa:	461a      	mov	r2, r3
 8004fac:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004fbe:	f107 0318 	add.w	r3, r7, #24
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fe fc71 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8004fca:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8004fcc:	bf00      	nop
 8004fce:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8004fd0:	4b48      	ldr	r3, [pc, #288]	; (80050f4 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8004fe0:	23ff      	movs	r3, #255	; 0xff
 8004fe2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8004fe6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004fea:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8004fee:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004ff2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004ff6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004ffa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004ffe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	461a      	mov	r2, r3
 8005006:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	431a      	orrs	r2, r3
 800500e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005012:	4313      	orrs	r3, r2
 8005014:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005018:	f107 0314 	add.w	r3, r7, #20
 800501c:	4611      	mov	r1, r2
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fc44 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8005024:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8005026:	bf00      	nop
 8005028:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800502a:	4b33      	ldr	r3, [pc, #204]	; (80050f8 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	23f7      	movs	r3, #247	; 0xf7
 8005030:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8005034:	234c      	movs	r3, #76	; 0x4c
 8005036:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800503a:	2302      	movs	r3, #2
 800503c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005040:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005044:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005048:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800504c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8005050:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005054:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005058:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800505c:	041b      	lsls	r3, r3, #16
 800505e:	461a      	mov	r2, r3
 8005060:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005064:	021b      	lsls	r3, r3, #8
 8005066:	431a      	orrs	r2, r3
 8005068:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800506c:	4313      	orrs	r3, r2
 800506e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005072:	f107 0310 	add.w	r3, r7, #16
 8005076:	4611      	mov	r1, r2
 8005078:	4618      	mov	r0, r3
 800507a:	f7fe fc17 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 800507e:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8005080:	bf00      	nop
 8005082:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8005084:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	23f7      	movs	r3, #247	; 0xf7
 800508a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800508e:	23d2      	movs	r3, #210	; 0xd2
 8005090:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005094:	2302      	movs	r3, #2
 8005096:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800509a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800509e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80050a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050aa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80050ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80050b2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80050b6:	041b      	lsls	r3, r3, #16
 80050b8:	461a      	mov	r2, r3
 80050ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	431a      	orrs	r2, r3
 80050c2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80050cc:	f107 030c 	add.w	r3, r7, #12
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe fbea 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80050d8:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 80050da:	bf00      	nop
 80050dc:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 80050de:	4b08      	ldr	r3, [pc, #32]	; (8005100 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	bf00      	nop
 80050e4:	3748      	adds	r7, #72	; 0x48
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20023788 	.word	0x20023788
 80050f0:	2002378c 	.word	0x2002378c
 80050f4:	20023790 	.word	0x20023790
 80050f8:	20023794 	.word	0x20023794
 80050fc:	20023798 	.word	0x20023798
 8005100:	2002379c 	.word	0x2002379c

08005104 <_GLOBAL__sub_I__ZN20TouchGFXGeneratedHAL10initializeEv>:
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
 8005108:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800510c:	2001      	movs	r0, #1
 800510e:	f7ff fecb 	bl	8004ea8 <_Z41__static_initialization_and_destruction_0ii>
 8005112:	bd80      	pop	{r7, pc}

08005114 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8005120:	887b      	ldrh	r3, [r7, #2]
 8005122:	2b07      	cmp	r3, #7
 8005124:	d83a      	bhi.n	800519c <_ZN23ApplicationFontProvider7getFontEt+0x88>
 8005126:	a201      	add	r2, pc, #4	; (adr r2, 800512c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8005128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512c:	0800514d 	.word	0x0800514d
 8005130:	08005157 	.word	0x08005157
 8005134:	08005161 	.word	0x08005161
 8005138:	0800516b 	.word	0x0800516b
 800513c:	08005175 	.word	0x08005175
 8005140:	0800517f 	.word	0x0800517f
 8005144:	08005189 	.word	0x08005189
 8005148:	08005193 	.word	0x08005193
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800514c:	f003 f8ae 	bl	80082ac <_ZN17TypedTextDatabase8getFontsEv>
 8005150:	4603      	mov	r3, r0
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	e023      	b.n	800519e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8005156:	f003 f8a9 	bl	80082ac <_ZN17TypedTextDatabase8getFontsEv>
 800515a:	4603      	mov	r3, r0
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	e01e      	b.n	800519e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8005160:	f003 f8a4 	bl	80082ac <_ZN17TypedTextDatabase8getFontsEv>
 8005164:	4603      	mov	r3, r0
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	e019      	b.n	800519e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::TYPOGRAPHY_00:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800516a:	f003 f89f 	bl	80082ac <_ZN17TypedTextDatabase8getFontsEv>
 800516e:	4603      	mov	r3, r0
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	e014      	b.n	800519e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::TYPOGRAPHY_01:
        // swisop3_300_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8005174:	f003 f89a 	bl	80082ac <_ZN17TypedTextDatabase8getFontsEv>
 8005178:	4603      	mov	r3, r0
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	e00f      	b.n	800519e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::TYPOGRAPHY_02:
        // swisop3_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800517e:	f003 f895 	bl	80082ac <_ZN17TypedTextDatabase8getFontsEv>
 8005182:	4603      	mov	r3, r0
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	e00a      	b.n	800519e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::TYPOGRAPHY_03:
        // swisop3_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 8005188:	f003 f890 	bl	80082ac <_ZN17TypedTextDatabase8getFontsEv>
 800518c:	4603      	mov	r3, r0
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	e005      	b.n	800519e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::TYPOGRAPHY_04:
        // swisop3_50_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 8005192:	f003 f88b 	bl	80082ac <_ZN17TypedTextDatabase8getFontsEv>
 8005196:	4603      	mov	r3, r0
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	e000      	b.n	800519e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800519c:	2300      	movs	r3, #0
    }
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop

080051a8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
    return bitmap_database;
 80051ac:	4b02      	ldr	r3, [pc, #8]	; (80051b8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	0802a71c 	.word	0x0802a71c

080051bc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80051c0:	2301      	movs	r3, #1
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
    {
 80051d4:	4a04      	ldr	r2, [pc, #16]	; (80051e8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	601a      	str	r2, [r3, #0]
    }
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4618      	mov	r0, r3
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	0802a8e4 	.word	0x0802a8e4

080051ec <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
    }
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff ffe9 	bl	80051cc <_ZN8touchgfx4FontD1Ev>
 80051fa:	2110      	movs	r1, #16
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f01f fd8a 	bl	8024d16 <_ZdlPvj>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800520c:	b590      	push	{r4, r7, lr}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8005218:	887b      	ldrh	r3, [r7, #2]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800521e:	2300      	movs	r3, #0
 8005220:	e010      	b.n	8005244 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8005222:	2300      	movs	r3, #0
 8005224:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3308      	adds	r3, #8
 8005230:	681c      	ldr	r4, [r3, #0]
 8005232:	f107 030f 	add.w	r3, r7, #15
 8005236:	f107 0210 	add.w	r2, r7, #16
 800523a:	8879      	ldrh	r1, [r7, #2]
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	47a0      	blx	r4
 8005240:	6178      	str	r0, [r7, #20]
        return glyph;
 8005242:	697b      	ldr	r3, [r7, #20]
    }
 8005244:	4618      	mov	r0, r3
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	bd90      	pop	{r4, r7, pc}

0800524c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	895b      	ldrh	r3, [r3, #10]
    }
 8005258:	4618      	mov	r0, r3
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	899b      	ldrh	r3, [r3, #12]
    }
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	889b      	ldrh	r3, [r3, #4]
    }
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	889a      	ldrh	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	799b      	ldrb	r3, [r3, #6]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	4413      	add	r3, r2
 80052a8:	b29b      	uxth	r3, r3
    }
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	79db      	ldrb	r3, [r3, #7]
 80052c2:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80052c6:	b2db      	uxtb	r3, r3
    }
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	79db      	ldrb	r3, [r3, #7]
 80052e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80052e4:	b2db      	uxtb	r3, r3
    }
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	4a05      	ldr	r2, [pc, #20]	; (8005314 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff ff61 	bl	80051cc <_ZN8touchgfx4FontD1Ev>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	0802c210 	.word	0x0802c210

08005318 <_ZN8touchgfx9ConstFontD0Ev>:
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff ffe7 	bl	80052f4 <_ZN8touchgfx9ConstFontD1Ev>
 8005326:	2118      	movs	r1, #24
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f01f fcf4 	bl	8024d16 <_ZdlPvj>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4618      	mov	r0, r3
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	4a05      	ldr	r2, [pc, #20]	; (8005358 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff ffd3 	bl	80052f4 <_ZN8touchgfx9ConstFontD1Ev>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4618      	mov	r0, r3
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	0802a790 	.word	0x0802a790

0800535c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff ffe7 	bl	8005338 <_ZN8touchgfx13GeneratedFontD1Ev>
 800536a:	2128      	movs	r1, #40	; 0x28
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f01f fcd2 	bl	8024d16 <_ZdlPvj>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
    {
 8005384:	4a04      	ldr	r2, [pc, #16]	; (8005398 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	601a      	str	r2, [r3, #0]
    }
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	0802a738 	.word	0x0802a738

0800539c <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
    }
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff ffe9 	bl	800537c <_ZN8touchgfx9TypedTextD1Ev>
 80053aa:	2108      	movs	r1, #8
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f01f fcb2 	bl	8024d16 <_ZdlPvj>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4618      	mov	r0, r3
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <_ZN8touchgfx9TypedTextC1ERKS0_>:
class TypedText
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
 80053c6:	4a07      	ldr	r2, [pc, #28]	; (80053e4 <_ZN8touchgfx9TypedTextC1ERKS0_+0x28>)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	889a      	ldrh	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	809a      	strh	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4618      	mov	r0, r3
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	0802a738 	.word	0x0802a738

080053e8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	4618      	mov	r0, r3
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8005408:	4a07      	ldr	r2, [pc, #28]	; (8005428 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	605a      	str	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	721a      	strb	r2, [r3, #8]
    {
    }
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4618      	mov	r0, r3
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	0802a76c 	.word	0x0802a76c

0800542c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
    {
 8005434:	4a04      	ldr	r2, [pc, #16]	; (8005448 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	601a      	str	r2, [r3, #0]
    }
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4618      	mov	r0, r3
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	0802a76c 	.word	0x0802a76c

0800544c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
    }
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff ffe9 	bl	800542c <_ZN8touchgfx10TransitionD1Ev>
 800545a:	210c      	movs	r1, #12
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f01f fc5a 	bl	8024d16 <_ZdlPvj>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
    {
    }
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    {
    }
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
    {
    }
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 80054b0:	f012 fc62 	bl	8017d78 <_ZN8touchgfx11Application11getInstanceEv>
 80054b4:	4603      	mov	r3, r0
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	3230      	adds	r2, #48	; 0x30
 80054ba:	6812      	ldr	r2, [r2, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	4790      	blx	r2
    }
 80054c0:	bf00      	nop
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	605a      	str	r2, [r3, #4]
    }
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f012 fc64 	bl	8017dbc <_ZN8touchgfx11ApplicationC1Ev>
 80054f4:	4a09      	ldr	r2, [pc, #36]	; (800551c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a04      	ldr	r2, [pc, #16]	; (8005520 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800550e:	6013      	str	r3, [r2, #0]
    }
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4618      	mov	r0, r3
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	0802a59c 	.word	0x0802a59c
 8005520:	2005674c 	.word	0x2005674c

08005524 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	601a      	str	r2, [r3, #0]
    }
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	721a      	strb	r2, [r3, #8]
    }
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	605a      	str	r2, [r3, #4]
    }
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
	...

08005578 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8005578:	b480      	push	{r7}
 800557a:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800557c:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8005584:	2b00      	cmp	r3, #0
 8005586:	d008      	beq.n	800559a <_ZN8touchgfx3HAL3lcdEv+0x22>
 8005588:	4b08      	ldr	r3, [pc, #32]	; (80055ac <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8005592:	4b06      	ldr	r3, [pc, #24]	; (80055ac <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005598:	e002      	b.n	80055a0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 800559a:	4b04      	ldr	r3, [pc, #16]	; (80055ac <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
    }
 80055a0:	4618      	mov	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	200566e0 	.word	0x200566e0

080055b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7ff ff90 	bl	80054e4 <_ZN8touchgfx14MVPApplicationC1Ev>
 80055c4:	4a13      	ldr	r2, [pc, #76]	; (8005614 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 f89f 	bl	8005714 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80055e6:	f7fd fe1f 	bl	8003228 <_ZN8touchgfx3HAL11getInstanceEv>
 80055ea:	4603      	mov	r3, r0
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	3208      	adds	r2, #8
 80055f0:	6812      	ldr	r2, [r2, #0]
 80055f2:	2100      	movs	r1, #0
 80055f4:	4618      	mov	r0, r3
 80055f6:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 80055f8:	2000      	movs	r0, #0
 80055fa:	f002 fddf 	bl	80081bc <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80055fe:	f7ff ffbb 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 8005602:	4603      	mov	r3, r0
 8005604:	4618      	mov	r0, r3
 8005606:	f018 ffbe 	bl	801e586 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	0802a540 	.word	0x0802a540

08005618 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	4611      	mov	r1, r2
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff ffe9 	bl	8005618 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	605a      	str	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	3308      	adds	r3, #8
 8005654:	3208      	adds	r2, #8
 8005656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800565a:	e883 0003 	stmia.w	r3, {r0, r1}
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8005668:	b590      	push	{r4, r7, lr}
 800566a:	b089      	sub	sp, #36	; 0x24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8005676:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
 800567e:	f107 0008 	add.w	r0, r7, #8
 8005682:	f107 0318 	add.w	r3, r7, #24
 8005686:	cb0c      	ldmia	r3, {r2, r3}
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	f000 f85f 	bl	800574c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800568e:	f107 0308 	add.w	r3, r7, #8
 8005692:	4619      	mov	r1, r3
 8005694:	4620      	mov	r0, r4
 8005696:	f7ff ffcb 	bl	8005630 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800569a:	f107 0308 	add.w	r3, r7, #8
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fe fff0 	bl	8004684 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80056b0:	bf00      	nop
 80056b2:	3724      	adds	r7, #36	; 0x24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd90      	pop	{r4, r7, pc}
 80056b8:	080056bd 	.word	0x080056bd

080056bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80056d0:	461a      	mov	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	4b04      	ldr	r3, [pc, #16]	; (80056ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 80056dc:	4804      	ldr	r0, [pc, #16]	; (80056f0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 80056de:	f000 f867 	bl	80057b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20056740 	.word	0x20056740
 80056f0:	2005673c 	.word	0x2005673c

080056f4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	4a04      	ldr	r2, [pc, #16]	; (8005710 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	0802a5e0 	.word	0x0802a5e0

08005714 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff ffe8 	bl	80056f4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8005724:	4a08      	ldr	r2, [pc, #32]	; (8005748 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	605a      	str	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	609a      	str	r2, [r3, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	60da      	str	r2, [r3, #12]
    }
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	0802a584 	.word	0x0802a584

0800574c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	4639      	mov	r1, r7
 8005758:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff ffc8 	bl	80056f4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8005764:	4a08      	ldr	r2, [pc, #32]	; (8005788 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	605a      	str	r2, [r3, #4]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3308      	adds	r3, #8
 8005774:	463a      	mov	r2, r7
 8005776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800577a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	0802a584 	.word	0x0802a584

0800578c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff fe32 	bl	8005400 <_ZN8touchgfx10TransitionC1Ev>
 800579c:	4a03      	ldr	r2, [pc, #12]	; (80057ac <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	0802a748 	.word	0x0802a748

080057b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80057b0:	b590      	push	{r4, r7, lr}
 80057b2:	b08f      	sub	sp, #60	; 0x3c
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3320      	adds	r3, #32
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4610      	mov	r0, r2
 80057ce:	4798      	blx	r3
 80057d0:	4603      	mov	r3, r0
 80057d2:	4a80      	ldr	r2, [pc, #512]	; (80059d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d805      	bhi.n	80057e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80057d8:	4b7f      	ldr	r3, [pc, #508]	; (80059d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80057da:	4a80      	ldr	r2, [pc, #512]	; (80059dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80057dc:	21a3      	movs	r1, #163	; 0xa3
 80057de:	4880      	ldr	r0, [pc, #512]	; (80059e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80057e0:	f01f fb10 	bl	8024e04 <__assert_func>
 80057e4:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3320      	adds	r3, #32
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4610      	mov	r0, r2
 80057f6:	4798      	blx	r3
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b0f      	cmp	r3, #15
 80057fc:	d805      	bhi.n	800580a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80057fe:	4b79      	ldr	r3, [pc, #484]	; (80059e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8005800:	4a76      	ldr	r2, [pc, #472]	; (80059dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005802:	21a4      	movs	r1, #164	; 0xa4
 8005804:	4876      	ldr	r0, [pc, #472]	; (80059e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8005806:	f01f fafd 	bl	8024e04 <__assert_func>
 800580a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3320      	adds	r3, #32
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4610      	mov	r0, r2
 800581c:	4798      	blx	r3
 800581e:	4603      	mov	r3, r0
 8005820:	2b0b      	cmp	r3, #11
 8005822:	d805      	bhi.n	8005830 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8005824:	4b70      	ldr	r3, [pc, #448]	; (80059e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8005826:	4a6d      	ldr	r2, [pc, #436]	; (80059dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005828:	21a5      	movs	r1, #165	; 0xa5
 800582a:	486d      	ldr	r0, [pc, #436]	; (80059e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800582c:	f01f faea 	bl	8024e04 <__assert_func>
 8005830:	bf00      	nop
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	62bb      	str	r3, [r7, #40]	; 0x28
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800583e:	f012 fa9b 	bl	8017d78 <_ZN8touchgfx11Application11getInstanceEv>
 8005842:	4603      	mov	r3, r0
 8005844:	4618      	mov	r0, r3
 8005846:	f012 fa9d 	bl	8017d84 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d008      	beq.n	8005864 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	330c      	adds	r3, #12
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4610      	mov	r0, r2
 8005862:	4798      	blx	r3
    if (*currentTrans)
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4610      	mov	r0, r2
 800587a:	4798      	blx	r3
    if (*currentScreen)
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4610      	mov	r0, r2
 8005894:	4798      	blx	r3
    if (*currentPresenter)
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d008      	beq.n	80058b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3304      	adds	r3, #4
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4610      	mov	r0, r2
 80058ae:	4798      	blx	r3
    if (*currentScreen)
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d007      	beq.n	80058c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4610      	mov	r0, r2
 80058c6:	4798      	blx	r3
    if (*currentPresenter)
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3308      	adds	r3, #8
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4610      	mov	r0, r2
 80058e0:	4798      	blx	r3
}
 80058e2:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	2100      	movs	r1, #0
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 f880 	bl	80059f0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80058f0:	4603      	mov	r3, r0
 80058f2:	4619      	mov	r1, r3
 80058f4:	200c      	movs	r0, #12
 80058f6:	f7ff fd77 	bl	80053e8 <_ZnwjPv>
 80058fa:	4604      	mov	r4, r0
 80058fc:	4620      	mov	r0, r4
 80058fe:	f7ff ff45 	bl	800578c <_ZN8touchgfx12NoTransitionC1Ev>
 8005902:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2100      	movs	r1, #0
 800590a:	4618      	mov	r0, r3
 800590c:	f000 f883 	bl	8005a16 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8005910:	4603      	mov	r3, r0
 8005912:	4619      	mov	r1, r3
 8005914:	4835      	ldr	r0, [pc, #212]	; (80059ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x23c>)
 8005916:	f7ff fd67 	bl	80053e8 <_ZnwjPv>
 800591a:	4604      	mov	r4, r0
 800591c:	4620      	mov	r0, r4
 800591e:	f003 f981 	bl	8008c24 <_ZN11Screen1ViewC1Ev>
 8005922:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2100      	movs	r1, #0
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f886 	bl	8005a3c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8005930:	4603      	mov	r3, r0
 8005932:	4619      	mov	r1, r3
 8005934:	2010      	movs	r0, #16
 8005936:	f7ff fd57 	bl	80053e8 <_ZnwjPv>
 800593a:	4604      	mov	r4, r0
 800593c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800593e:	4620      	mov	r0, r4
 8005940:	f002 ffe2 	bl	8008908 <_ZN16Screen1PresenterC1ER11Screen1View>
 8005944:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800594a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005950:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005956:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005960:	3304      	adds	r3, #4
 8005962:	e000      	b.n	8005966 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8005964:	2300      	movs	r3, #0
 8005966:	4619      	mov	r1, r3
 8005968:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800596a:	f7ff fddb 	bl	8005524 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005970:	3304      	adds	r3, #4
 8005972:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff fdf0 	bl	800555a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800597e:	4618      	mov	r0, r3
 8005980:	f000 f86f 	bl	8005a62 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	61fb      	str	r3, [r7, #28]
 8005988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598a:	61bb      	str	r3, [r7, #24]
 800598c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	330c      	adds	r3, #12
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	69f8      	ldr	r0, [r7, #28]
 800599a:	4798      	blx	r3
    newPresenter->activate();
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69b8      	ldr	r0, [r7, #24]
 80059a4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80059a6:	6979      	ldr	r1, [r7, #20]
 80059a8:	69f8      	ldr	r0, [r7, #28]
 80059aa:	f013 fec2 	bl	8019732 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3310      	adds	r3, #16
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6978      	ldr	r0, [r7, #20]
 80059b8:	4798      	blx	r3
    newTransition->invalidate();
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3314      	adds	r3, #20
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6978      	ldr	r0, [r7, #20]
 80059c4:	4798      	blx	r3
}
 80059c6:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	373c      	adds	r7, #60	; 0x3c
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd90      	pop	{r4, r7, pc}
 80059d2:	bf00      	nop
 80059d4:	0002263b 	.word	0x0002263b
 80059d8:	080299e0 	.word	0x080299e0
 80059dc:	08029a70 	.word	0x08029a70
 80059e0:	08029b74 	.word	0x08029b74
 80059e4:	08029bbc 	.word	0x08029bbc
 80059e8:	08029c60 	.word	0x08029c60
 80059ec:	0002263c 	.word	0x0002263c

080059f0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3324      	adds	r3, #36	; 0x24
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	887a      	ldrh	r2, [r7, #2]
 8005a06:	4611      	mov	r1, r2
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	4798      	blx	r3
 8005a0c:	4603      	mov	r3, r0
    }
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b082      	sub	sp, #8
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	460b      	mov	r3, r1
 8005a20:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3324      	adds	r3, #36	; 0x24
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	887a      	ldrh	r2, [r7, #2]
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	4798      	blx	r3
 8005a32:	4603      	mov	r3, r0
    }
 8005a34:	4618      	mov	r0, r3
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3324      	adds	r3, #36	; 0x24
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	887a      	ldrh	r2, [r7, #2]
 8005a52:	4611      	mov	r1, r2
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	4798      	blx	r3
 8005a58:	4603      	mov	r3, r0
    }
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <_ZN8touchgfx12NoTransitionD1Ev>:
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	4a05      	ldr	r2, [pc, #20]	; (8005aa0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fccb 	bl	800542c <_ZN8touchgfx10TransitionD1Ev>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	0802a748 	.word	0x0802a748

08005aa4 <_ZN8touchgfx12NoTransitionD0Ev>:
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff ffe7 	bl	8005a80 <_ZN8touchgfx12NoTransitionD1Ev>
 8005ab2:	210c      	movs	r1, #12
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f01f f92e 	bl	8024d16 <_ZdlPvj>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <_Z41__static_initialization_and_destruction_0ii>:
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b092      	sub	sp, #72	; 0x48
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	f040 8114 	bne.w	8005cfe <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005adc:	4293      	cmp	r3, r2
 8005ade:	f040 810e 	bne.w	8005cfe <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8005aee:	2300      	movs	r3, #0
 8005af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005af4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005af8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005afc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005b0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b10:	041b      	lsls	r3, r3, #16
 8005b12:	461a      	mov	r2, r3
 8005b14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005b18:	021b      	lsls	r3, r3, #8
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005b26:	f107 0320 	add.w	r3, r7, #32
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fd febd 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8005b32:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8005b34:	bf00      	nop
 8005b36:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8005b38:	4b73      	ldr	r3, [pc, #460]	; (8005d08 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	23ff      	movs	r3, #255	; 0xff
 8005b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005b42:	2300      	movs	r3, #0
 8005b44:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8005b4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b52:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8005b56:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005b62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005b66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b6a:	041b      	lsls	r3, r3, #16
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	431a      	orrs	r2, r3
 8005b76:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005b80:	f107 031c 	add.w	r3, r7, #28
 8005b84:	4611      	mov	r1, r2
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fd fe90 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8005b8c:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8005b8e:	bf00      	nop
 8005b90:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8005b92:	4b5e      	ldr	r3, [pc, #376]	; (8005d0c <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	2300      	movs	r3, #0
 8005b98:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8005b9c:	23ff      	movs	r3, #255	; 0xff
 8005b9e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ba8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005bac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005bb0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005bb4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8005bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005bbc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005bc0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005bc4:	041b      	lsls	r3, r3, #16
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005bcc:	021b      	lsls	r3, r3, #8
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005bda:	f107 0318 	add.w	r3, r7, #24
 8005bde:	4611      	mov	r1, r2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fd fe63 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8005be6:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8005be8:	bf00      	nop
 8005bea:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8005bec:	4b48      	ldr	r3, [pc, #288]	; (8005d10 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005bfc:	23ff      	movs	r3, #255	; 0xff
 8005bfe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8005c02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c06:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8005c0a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005c0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005c12:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005c16:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005c1a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005c1e:	041b      	lsls	r3, r3, #16
 8005c20:	461a      	mov	r2, r3
 8005c22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005c34:	f107 0314 	add.w	r3, r7, #20
 8005c38:	4611      	mov	r1, r2
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fd fe36 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8005c40:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8005c42:	bf00      	nop
 8005c44:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8005c46:	4b33      	ldr	r3, [pc, #204]	; (8005d14 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	23f7      	movs	r3, #247	; 0xf7
 8005c4c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8005c50:	234c      	movs	r3, #76	; 0x4c
 8005c52:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8005c56:	2302      	movs	r3, #2
 8005c58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005c5c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005c60:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005c64:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005c68:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8005c6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c70:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005c74:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005c78:	041b      	lsls	r3, r3, #16
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	431a      	orrs	r2, r3
 8005c84:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005c8e:	f107 0310 	add.w	r3, r7, #16
 8005c92:	4611      	mov	r1, r2
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fd fe09 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8005c9a:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8005c9c:	bf00      	nop
 8005c9e:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8005ca0:	4b1d      	ldr	r3, [pc, #116]	; (8005d18 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	23f7      	movs	r3, #247	; 0xf7
 8005ca6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005caa:	23d2      	movs	r3, #210	; 0xd2
 8005cac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8005cb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005cba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8005cbe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cc6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005cca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005cce:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005cd2:	041b      	lsls	r3, r3, #16
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005ce8:	f107 030c 	add.w	r3, r7, #12
 8005cec:	4611      	mov	r1, r2
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fd fddc 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8005cf6:	bf00      	nop
 8005cf8:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8005cfa:	4b08      	ldr	r3, [pc, #32]	; (8005d1c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	bf00      	nop
 8005d00:	3748      	adds	r7, #72	; 0x48
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	200237a4 	.word	0x200237a4
 8005d0c:	200237a8 	.word	0x200237a8
 8005d10:	200237ac 	.word	0x200237ac
 8005d14:	200237b0 	.word	0x200237b0
 8005d18:	200237b4 	.word	0x200237b4
 8005d1c:	200237b8 	.word	0x200237b8

08005d20 <_GLOBAL__sub_I__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005d28:	2001      	movs	r0, #1
 8005d2a:	f7ff fecb 	bl	8005ac4 <_Z41__static_initialization_and_destruction_0ii>
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
    }
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08c      	sub	sp, #48	; 0x30
 8005d64:	af08      	add	r7, sp, #32
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	460b      	mov	r3, r1
 8005d70:	80fb      	strh	r3, [r7, #6]
 8005d72:	4613      	mov	r3, r2
 8005d74:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	88b9      	ldrh	r1, [r7, #4]
 8005d7a:	88fa      	ldrh	r2, [r7, #6]
 8005d7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d7e:	9306      	str	r3, [sp, #24]
 8005d80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d82:	9305      	str	r3, [sp, #20]
 8005d84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d88:	9304      	str	r3, [sp, #16]
 8005d8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d8e:	9303      	str	r3, [sp, #12]
 8005d90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d94:	9302      	str	r3, [sp, #8]
 8005d96:	7f3b      	ldrb	r3, [r7, #28]
 8005d98:	9301      	str	r3, [sp, #4]
 8005d9a:	7e3b      	ldrb	r3, [r7, #24]
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	f013 f81f 	bl	8018de4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8005da6:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005db0:	619a      	str	r2, [r3, #24]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db6:	61da      	str	r2, [r3, #28]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dbc:	621a      	str	r2, [r3, #32]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dc2:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	0802a790 	.word	0x0802a790

08005dd4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	889b      	ldrh	r3, [r3, #4]
 8005de8:	0adb      	lsrs	r3, r3, #11
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4413      	add	r3, r2
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8005e06:	b480      	push	{r7}
 8005e08:	b089      	sub	sp, #36	; 0x24
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	7b1b      	ldrb	r3, [r3, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e030      	b.n	8005e88 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	69da      	ldr	r2, [r3, #28]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	7b5b      	ldrb	r3, [r3, #13]
 8005e32:	021b      	lsls	r3, r3, #8
 8005e34:	b21b      	sxth	r3, r3
 8005e36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e3a:	b219      	sxth	r1, r3
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	7adb      	ldrb	r3, [r3, #11]
 8005e40:	b21b      	sxth	r3, r3
 8005e42:	430b      	orrs	r3, r1
 8005e44:	b21b      	sxth	r3, r3
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	7b1b      	ldrb	r3, [r3, #12]
 8005e52:	837b      	strh	r3, [r7, #26]
 8005e54:	8b7b      	ldrh	r3, [r7, #26]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d015      	beq.n	8005e86 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	897a      	ldrh	r2, [r7, #10]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d103      	bne.n	8005e6c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005e6a:	e00d      	b.n	8005e88 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	897a      	ldrh	r2, [r7, #10]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d306      	bcc.n	8005e84 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005e76:	8b7b      	ldrh	r3, [r7, #26]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	837b      	strh	r3, [r7, #26]
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	3304      	adds	r3, #4
 8005e80:	61fb      	str	r3, [r7, #28]
 8005e82:	e7e7      	b.n	8005e54 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8005e84:	bf00      	nop
        }
    }
    return 0;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3724      	adds	r7, #36	; 0x24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8005e9c:	4a14      	ldr	r2, [pc, #80]	; (8005ef0 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fd fd0f 	bl	80038ca <_ZN8touchgfx4RectC1Ev>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fd fd0a 	bl	80038ca <_ZN8touchgfx4RectC1Ev>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	615a      	str	r2, [r3, #20]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	619a      	str	r2, [r3, #24]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	61da      	str	r2, [r3, #28]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	841a      	strh	r2, [r3, #32]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	845a      	strh	r2, [r3, #34]	; 0x22
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	0802c1ac 	.word	0x0802c1ac

08005ef4 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
    {
 8005efc:	4a04      	ldr	r2, [pc, #16]	; (8005f10 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	601a      	str	r2, [r3, #0]
    }
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	0802c1ac 	.word	0x0802c1ac

08005f14 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
    }
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff ffe9 	bl	8005ef4 <_ZN8touchgfx8DrawableD1Ev>
 8005f22:	2128      	movs	r1, #40	; 0x28
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f01e fef6 	bl	8024d16 <_ZdlPvj>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	887a      	ldrh	r2, [r7, #2]
 8005f44:	809a      	strh	r2, [r3, #4]
    }
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	887a      	ldrh	r2, [r7, #2]
 8005f62:	80da      	strh	r2, [r3, #6]
    }
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	887a      	ldrh	r2, [r7, #2]
 8005f80:	811a      	strh	r2, [r3, #8]
    }
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	887a      	ldrh	r2, [r7, #2]
 8005f9e:	815a      	strh	r2, [r3, #10]
    }
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
    {
    }
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
    {
    }
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6039      	str	r1, [r7, #0]
    {
    }
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
    {
    }
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
    {
    }
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	460b      	mov	r3, r1
 8006020:	807b      	strh	r3, [r7, #2]
 8006022:	4613      	mov	r3, r2
 8006024:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3350      	adds	r3, #80	; 0x50
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	8879      	ldrh	r1, [r7, #2]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8006036:	b292      	uxth	r2, r2
 8006038:	1a8a      	subs	r2, r1, r2
 800603a:	b292      	uxth	r2, r2
 800603c:	b210      	sxth	r0, r2
 800603e:	8839      	ldrh	r1, [r7, #0]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8006046:	b292      	uxth	r2, r2
 8006048:	1a8a      	subs	r2, r1, r2
 800604a:	b292      	uxth	r2, r2
 800604c:	b212      	sxth	r2, r2
 800604e:	4601      	mov	r1, r0
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	4798      	blx	r3
    }
 8006054:	bf00      	nop
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff ff14 	bl	8005e94 <_ZN8touchgfx8DrawableC1Ev>
 800606c:	4a05      	ldr	r2, [pc, #20]	; (8006084 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	0802aec4 	.word	0x0802aec4

08006088 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8006094:	4618      	mov	r0, r3
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	4a05      	ldr	r2, [pc, #20]	; (80060c0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff ff1f 	bl	8005ef4 <_ZN8touchgfx8DrawableD1Ev>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	0802aec4 	.word	0x0802aec4

080060c4 <_ZN8touchgfx9ContainerD0Ev>:
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff ffe7 	bl	80060a0 <_ZN8touchgfx9ContainerD1Ev>
 80060d2:	212c      	movs	r1, #44	; 0x2c
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f01e fe1e 	bl	8024d16 <_ZdlPvj>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4618      	mov	r0, r3
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <_ZN8touchgfx8Drawable13getFirstChildEv>:
    virtual Drawable* getFirstChild()
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
        return 0;
 80060ec:	2300      	movs	r3, #0
    }
 80060ee:	4618      	mov	r0, r3
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	4608      	mov	r0, r1
 8006104:	4611      	mov	r1, r2
 8006106:	461a      	mov	r2, r3
 8006108:	4603      	mov	r3, r0
 800610a:	817b      	strh	r3, [r7, #10]
 800610c:	460b      	mov	r3, r1
 800610e:	813b      	strh	r3, [r7, #8]
 8006110:	4613      	mov	r3, r2
 8006112:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 8006114:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006118:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800611c:	4619      	mov	r1, r3
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 f80c 	bl	800613c <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8006124:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800612c:	4619      	mov	r1, r3
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 f822 	bl	8006178 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8006134:	bf00      	nop
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	807b      	strh	r3, [r7, #2]
 8006148:	4613      	mov	r3, r2
 800614a:	803b      	strh	r3, [r7, #0]
        setX(x);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	332c      	adds	r3, #44	; 0x2c
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006158:	4611      	mov	r1, r2
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	4798      	blx	r3
        setY(y);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3330      	adds	r3, #48	; 0x30
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f9b7 2000 	ldrsh.w	r2, [r7]
 800616a:	4611      	mov	r1, r2
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	4798      	blx	r3
    }
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	807b      	strh	r3, [r7, #2]
 8006184:	4613      	mov	r3, r2
 8006186:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3334      	adds	r3, #52	; 0x34
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006194:	4611      	mov	r1, r2
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	4798      	blx	r3
        setHeight(height);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3338      	adds	r3, #56	; 0x38
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80061a6:	4611      	mov	r1, r2
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	4798      	blx	r3
    }
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <_ZNK8touchgfx8Drawable9isVisibleEv>:
    bool isVisible() const
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
        return visible;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80061c2:	4618      	mov	r0, r3
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <_ZNK8touchgfx8Drawable11isTouchableEv>:
    bool isTouchable() const
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
        return touchable;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061f6:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061fe:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006206:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff ffe1 	bl	80061e8 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	601a      	str	r2, [r3, #0]
    }
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
    {
 8006244:	4a06      	ldr	r2, [pc, #24]	; (8006260 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3304      	adds	r3, #4
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff ff26 	bl	80060a0 <_ZN8touchgfx9ContainerD1Ev>
    }
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	0802c2a4 	.word	0x0802c2a4

08006264 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
    }
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff ffe5 	bl	800623c <_ZN8touchgfx6ScreenD1Ev>
 8006272:	213c      	movs	r1, #60	; 0x3c
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f01e fd4e 	bl	8024d16 <_ZdlPvj>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
    {
    }
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
    {
    }
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
    {
    }
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
    {
    }
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	70fb      	strb	r3, [r7, #3]
    {
    }
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	3304      	adds	r3, #4
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f00d fead 	bl	801405c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8006302:	bf00      	nop
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800630a:	b580      	push	{r7, lr}
 800630c:	b084      	sub	sp, #16
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	607b      	str	r3, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	817b      	strh	r3, [r7, #10]
 8006318:	4613      	mov	r3, r2
 800631a:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4618      	mov	r0, r3
 8006320:	f7ff ff48 	bl	80061b4 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d008      	beq.n	800633c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff ff4e 	bl	80061ce <_ZNK8touchgfx8Drawable11isTouchableEv>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8006338:	2301      	movs	r3, #1
 800633a:	e000      	b.n	800633e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800633c:	2300      	movs	r3, #0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	601a      	str	r2, [r3, #0]
        }
    }
 8006348:	bf00      	nop
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff fd9a 	bl	8005e94 <_ZN8touchgfx8DrawableC1Ev>
 8006360:	4a03      	ldr	r2, [pc, #12]	; (8006370 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	0802a864 	.word	0x0802a864

08006374 <_ZN8touchgfx6WidgetD1Ev>:
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	4a05      	ldr	r2, [pc, #20]	; (8006394 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff fdb5 	bl	8005ef4 <_ZN8touchgfx8DrawableD1Ev>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	0802a864 	.word	0x0802a864

08006398 <_ZN8touchgfx6WidgetD0Ev>:
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff ffe7 	bl	8006374 <_ZN8touchgfx6WidgetD1Ev>
 80063a6:	2128      	movs	r1, #40	; 0x28
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f01e fcb4 	bl	8024d16 <_ZdlPvj>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4618      	mov	r0, r3
 80063c4:	2326      	movs	r3, #38	; 0x26
 80063c6:	461a      	mov	r2, r3
 80063c8:	2100      	movs	r1, #0
 80063ca:	f01e fda7 	bl	8024f1c <memset>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff ffbd 	bl	8006350 <_ZN8touchgfx6WidgetC1Ev>
 80063d6:	4a09      	ldr	r2, [pc, #36]	; (80063fc <_ZN8touchgfx3BoxC1Ev+0x44>)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	22ff      	movs	r2, #255	; 0xff
 80063e0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3328      	adds	r3, #40	; 0x28
 80063e8:	2100      	movs	r1, #0
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fd fa5e 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	0802bd60 	.word	0x0802bd60

08006400 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8006428:	4a06      	ldr	r2, [pc, #24]	; (8006444 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	887a      	ldrh	r2, [r7, #2]
 8006432:	809a      	strh	r2, [r3, #4]
    }
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	0802a738 	.word	0x0802a738

08006448 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4618      	mov	r0, r3
 8006454:	2326      	movs	r3, #38	; 0x26
 8006456:	461a      	mov	r2, r3
 8006458:	2100      	movs	r1, #0
 800645a:	f01e fd5f 	bl	8024f1c <memset>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff ff75 	bl	8006350 <_ZN8touchgfx6WidgetC1Ev>
 8006466:	4a14      	ldr	r2, [pc, #80]	; (80064b8 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3328      	adds	r3, #40	; 0x28
 8006470:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff ffd1 	bl	800641c <_ZN8touchgfx9TypedTextC1Et>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3330      	adds	r3, #48	; 0x30
 800647e:	2100      	movs	r1, #0
 8006480:	4618      	mov	r0, r3
 8006482:	f7fd fa13 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	869a      	strh	r2, [r3, #52]	; 0x34
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	22ff      	movs	r2, #255	; 0xff
 8006490:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	0802bcb8 	.word	0x0802bcb8

080064bc <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	4a08      	ldr	r2, [pc, #32]	; (80064e8 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	3328      	adds	r3, #40	; 0x28
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe ff54 	bl	800537c <_ZN8touchgfx9TypedTextD1Ev>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff ff4c 	bl	8006374 <_ZN8touchgfx6WidgetD1Ev>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	0802bcb8 	.word	0x0802bcb8

080064ec <_ZN8touchgfx8TextAreaD0Ev>:
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff ffe1 	bl	80064bc <_ZN8touchgfx8TextAreaD1Ev>
 80064fa:	213c      	movs	r1, #60	; 0x3c
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f01e fc0a 	bl	8024d16 <_ZdlPvj>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4618      	mov	r0, r3
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff ff96 	bl	8006448 <_ZN8touchgfx8TextAreaC1Ev>
 800651c:	4a05      	ldr	r2, [pc, #20]	; (8006534 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	0802bdc4 	.word	0x0802bdc4

08006538 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255)
 8006574:	4a09      	ldr	r2, [pc, #36]	; (800659c <_ZN8touchgfx15AbstractPainterC1Ev+0x30>)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	809a      	strh	r2, [r3, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	80da      	strh	r2, [r3, #6]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	22ff      	movs	r2, #255	; 0xff
 800658a:	721a      	strb	r2, [r3, #8]
    {
    }
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4618      	mov	r0, r3
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	0802a850 	.word	0x0802a850

080065a0 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
    {
 80065a8:	4a04      	ldr	r2, [pc, #16]	; (80065bc <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	601a      	str	r2, [r3, #0]
    }
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	0802a850 	.word	0x0802a850

080065c0 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
    }
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff ffe9 	bl	80065a0 <_ZN8touchgfx15AbstractPainterD1Ev>
 80065ce:	210c      	movs	r1, #12
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f01e fba0 	bl	8024d16 <_ZdlPvj>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4618      	mov	r0, r3
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
            : v(i)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	601a      	str	r2, [r3, #0]
        {
        }
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4618      	mov	r0, r3
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
        {
            return v;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
        }
 800660a:	4618      	mov	r0, r3
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8006616:	b590      	push	{r4, r7, lr}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3340      	adds	r3, #64	; 0x40
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff ffea 	bl	80065fe <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800662a:	4604      	mov	r4, r0
 800662c:	463b      	mov	r3, r7
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff ffe5 	bl	80065fe <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8006634:	4603      	mov	r3, r0
 8006636:	429c      	cmp	r4, r3
 8006638:	bf0c      	ite	eq
 800663a:	2301      	moveq	r3, #1
 800663c:	2300      	movne	r3, #0
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d106      	bne.n	8006652 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f00f f91a 	bl	8015884 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8006650:	e000      	b.n	8006654 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8006652:	bf00      	nop
    }
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	bd90      	pop	{r4, r7, pc}
	...

0800665c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff ff80 	bl	800656c <_ZN8touchgfx15AbstractPainterC1Ev>
 800666c:	4a29      	ldr	r2, [pc, #164]	; (8006714 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	60da      	str	r2, [r3, #12]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	611a      	str	r2, [r3, #16]
 800667e:	2301      	movs	r3, #1
 8006680:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8006682:	f7fe ff79 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 8006686:	4603      	mov	r3, r0
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	3224      	adds	r2, #36	; 0x24
 800668c:	6812      	ldr	r2, [r2, #0]
 800668e:	4618      	mov	r0, r3
 8006690:	4790      	blx	r2
 8006692:	4603      	mov	r3, r0
 8006694:	461a      	mov	r2, r3
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	4293      	cmp	r3, r2
 800669a:	bf0c      	ite	eq
 800669c:	2301      	moveq	r3, #1
 800669e:	2300      	movne	r3, #0
 80066a0:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 80066a2:	f7fc fdc1 	bl	8003228 <_ZN8touchgfx3HAL11getInstanceEv>
 80066a6:	4603      	mov	r3, r0
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff ff53 	bl	8006554 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	bf14      	ite	ne
 80066b4:	2301      	movne	r3, #1
 80066b6:	2300      	moveq	r3, #0
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d01b      	beq.n	80066f6 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x9a>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80066be:	f7fc fdb3 	bl	8003228 <_ZN8touchgfx3HAL11getInstanceEv>
 80066c2:	4603      	mov	r3, r0
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7ff ff45 	bl	8006554 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80066ca:	4603      	mov	r3, r0
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	3224      	adds	r2, #36	; 0x24
 80066d0:	6812      	ldr	r2, [r2, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	4790      	blx	r2
 80066d6:	4603      	mov	r3, r0
 80066d8:	461a      	mov	r2, r3
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	4293      	cmp	r3, r2
 80066de:	bf0c      	ite	eq
 80066e0:	2301      	moveq	r3, #1
 80066e2:	2300      	movne	r3, #0
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	bf14      	ite	ne
 80066f0:	2301      	movne	r3, #1
 80066f2:	2300      	moveq	r3, #0
 80066f4:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 80066f6:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d105      	bne.n	8006708 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xac>
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 80066fe:	4a07      	ldr	r2, [pc, #28]	; (800671c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc0>)
 8006700:	2128      	movs	r1, #40	; 0x28
 8006702:	4807      	ldr	r0, [pc, #28]	; (8006720 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc4>)
 8006704:	f01e fb7e 	bl	8024e04 <__assert_func>
 8006708:	bf00      	nop
    }
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	0802b84c 	.word	0x0802b84c
 8006718:	08029d04 	.word	0x08029d04
 800671c:	08029d64 	.word	0x08029d64
 8006720:	08029da0 	.word	0x08029da0

08006724 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	4a05      	ldr	r2, [pc, #20]	; (8006744 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff ff33 	bl	80065a0 <_ZN8touchgfx15AbstractPainterD1Ev>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	0802b84c 	.word	0x0802b84c

08006748 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7ff ffe7 	bl	8006724 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8006756:	2114      	movs	r1, #20
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f01e fadc 	bl	8024d16 <_ZdlPvj>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4618      	mov	r0, r3
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB888(), painterRed(0), painterGreen(0), painterBlue(0)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff ff71 	bl	800665c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 800677a:	4a0a      	ldr	r2, [pc, #40]	; (80067a4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x3c>)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	751a      	strb	r2, [r3, #20]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	755a      	strb	r2, [r3, #21]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	759a      	strb	r2, [r3, #22]
    {
        setColor(color);
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f807 	bl	80067a8 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    }
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	0802b86c 	.word	0x0802b86c

080067a8 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 80067b6:	f107 0314 	add.w	r3, r7, #20
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fc fca6 	bl	800310c <_ZNK8touchgfx9colortypecvmEv>
 80067c0:	4603      	mov	r3, r0
 80067c2:	0c1b      	lsrs	r3, r3, #16
 80067c4:	b2da      	uxtb	r2, r3
    {
        painterRed = Color::getRed(color);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	751a      	strb	r2, [r3, #20]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 80067ce:	f107 0310 	add.w	r3, r7, #16
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fc fc9a 	bl	800310c <_ZNK8touchgfx9colortypecvmEv>
 80067d8:	4603      	mov	r3, r0
 80067da:	0a1b      	lsrs	r3, r3, #8
 80067dc:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	755a      	strb	r2, [r3, #21]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 80067e6:	f107 030c 	add.w	r3, r7, #12
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fc fc8e 	bl	800310c <_ZNK8touchgfx9colortypecvmEv>
 80067f0:	4603      	mov	r3, r0
 80067f2:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	759a      	strb	r2, [r3, #22]
    }
 80067f8:	bf00      	nop
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <_ZN11tempBoxBaseD1Ev>:

class tempBoxBase : public touchgfx::Container
{
public:
    tempBoxBase();
    virtual ~tempBoxBase() {}
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	4a0d      	ldr	r2, [pc, #52]	; (8006840 <_ZN11tempBoxBaseD1Ev+0x40>)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	33b8      	adds	r3, #184	; 0xb8
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff fe52 	bl	80064bc <_ZN8touchgfx8TextAreaD1Ev>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	33a0      	adds	r3, #160	; 0xa0
 800681c:	4618      	mov	r0, r3
 800681e:	f001 f8c7 	bl	80079b0 <_ZN8touchgfx13PainterRGB888D1Ev>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	332c      	adds	r3, #44	; 0x2c
 8006826:	4618      	mov	r0, r3
 8006828:	f001 f8a0 	bl	800796c <_ZN8touchgfx4LineD1Ev>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff fc36 	bl	80060a0 <_ZN8touchgfx9ContainerD1Ev>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	0802a9c4 	.word	0x0802a9c4

08006844 <_ZN11tempBoxBaseD0Ev>:
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff ffd7 	bl	8006800 <_ZN11tempBoxBaseD1Ev>
 8006852:	21f4      	movs	r1, #244	; 0xf4
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f01e fa5e 	bl	8024d16 <_ZdlPvj>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4618      	mov	r0, r3
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <_ZN7tempBoxD1Ev>:

class tempBox : public tempBoxBase
{
public:
    tempBox();
    virtual ~tempBox() {}
 8006864:	b590      	push	{r4, r7, lr}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	4a1c      	ldr	r2, [pc, #112]	; (80068e0 <_ZN7tempBoxD1Ev+0x7c>)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	f646 031c 	movw	r3, #26652	; 0x681c
 8006878:	4413      	add	r3, r2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d011      	beq.n	80068a2 <_ZN7tempBoxD1Ev+0x3e>
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	f646 031c 	movw	r3, #26652	; 0x681c
 8006884:	4413      	add	r3, r2
 8006886:	f503 54a5 	add.w	r4, r3, #5280	; 0x14a0
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	f646 031c 	movw	r3, #26652	; 0x681c
 8006890:	4413      	add	r3, r2
 8006892:	429c      	cmp	r4, r3
 8006894:	d005      	beq.n	80068a2 <_ZN7tempBoxD1Ev+0x3e>
 8006896:	3c18      	subs	r4, #24
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4620      	mov	r0, r4
 800689e:	4798      	blx	r3
 80068a0:	e7f3      	b.n	800688a <_ZN7tempBoxD1Ev+0x26>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d010      	beq.n	80068ce <_ZN7tempBoxD1Ev+0x6a>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80068b2:	f246 34b0 	movw	r4, #25520	; 0x63b0
 80068b6:	441c      	add	r4, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80068be:	429c      	cmp	r4, r3
 80068c0:	d005      	beq.n	80068ce <_ZN7tempBoxD1Ev+0x6a>
 80068c2:	3c74      	subs	r4, #116	; 0x74
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4620      	mov	r0, r4
 80068ca:	4798      	blx	r3
 80068cc:	e7f4      	b.n	80068b8 <_ZN7tempBoxD1Ev+0x54>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7ff ff95 	bl	8006800 <_ZN11tempBoxBaseD1Ev>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd90      	pop	{r4, r7, pc}
 80068e0:	0802ab60 	.word	0x0802ab60

080068e4 <_ZN7tempBoxD0Ev>:
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff ffb9 	bl	8006864 <_ZN7tempBoxD1Ev>
 80068f2:	f647 41bc 	movw	r1, #31932	; 0x7cbc
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f01e fa0d 	bl	8024d16 <_ZdlPvj>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	4a05      	ldr	r2, [pc, #20]	; (8006928 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff fd2b 	bl	8006374 <_ZN8touchgfx6WidgetD1Ev>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4618      	mov	r0, r3
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	0802bd60 	.word	0x0802bd60

0800692c <_ZN8touchgfx3BoxD0Ev>:
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff ffe7 	bl	8006908 <_ZN8touchgfx3BoxD1Ev>
 800693a:	212c      	movs	r1, #44	; 0x2c
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f01e f9ea 	bl	8024d16 <_ZdlPvj>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <_ZN12alertBarBaseD1Ev>:

class alertBarBase : public touchgfx::Container
{
public:
    alertBarBase();
    virtual ~alertBarBase() {}
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	4a0a      	ldr	r2, [pc, #40]	; (8006980 <_ZN12alertBarBaseD1Ev+0x34>)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3360      	adds	r3, #96	; 0x60
 800695e:	4618      	mov	r0, r3
 8006960:	f001 f86a 	bl	8007a38 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	332c      	adds	r3, #44	; 0x2c
 8006968:	4618      	mov	r0, r3
 800696a:	f001 f843 	bl	80079f4 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff fb95 	bl	80060a0 <_ZN8touchgfx9ContainerD1Ev>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4618      	mov	r0, r3
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	0802a938 	.word	0x0802a938

08006984 <_ZN12alertBarBaseD0Ev>:
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff ffdd 	bl	800694c <_ZN12alertBarBaseD1Ev>
 8006992:	21a0      	movs	r1, #160	; 0xa0
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f01e f9be 	bl	8024d16 <_ZdlPvj>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <_ZN8alertBarD1Ev>:

class alertBar : public alertBarBase
{
public:
    alertBar();
    virtual ~alertBar() {}
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	4a05      	ldr	r2, [pc, #20]	; (80069c4 <_ZN8alertBarD1Ev+0x20>)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff ffc9 	bl	800694c <_ZN12alertBarBaseD1Ev>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	0802aad4 	.word	0x0802aad4

080069c8 <_ZN8alertBarD0Ev>:
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff ffe7 	bl	80069a4 <_ZN8alertBarD1Ev>
 80069d6:	21d8      	movs	r1, #216	; 0xd8
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f01e f99c 	bl	8024d16 <_ZdlPvj>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	4a05      	ldr	r2, [pc, #20]	; (8006a08 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7ff fc1f 	bl	800623c <_ZN8touchgfx6ScreenD1Ev>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4618      	mov	r0, r3
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	0802a81c 	.word	0x0802a81c

08006a0c <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7ff ffe7 	bl	80069e8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8006a1a:	2140      	movs	r1, #64	; 0x40
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f01e f97a 	bl	8024d16 <_ZdlPvj>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4618      	mov	r0, r3
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	4a31      	ldr	r2, [pc, #196]	; (8006afc <_ZN15Screen1ViewBaseD1Ev+0xd0>)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	4b30      	ldr	r3, [pc, #192]	; (8006b00 <_ZN15Screen1ViewBaseD1Ev+0xd4>)
 8006a3e:	4413      	add	r3, r2
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 fff9 	bl	8007a38 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	4b2e      	ldr	r3, [pc, #184]	; (8006b04 <_ZN15Screen1ViewBaseD1Ev+0xd8>)
 8006a4a:	4413      	add	r3, r2
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7ff ffa9 	bl	80069a4 <_ZN8alertBarD1Ev>
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	4b2c      	ldr	r3, [pc, #176]	; (8006b08 <_ZN15Screen1ViewBaseD1Ev+0xdc>)
 8006a56:	4413      	add	r3, r2
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff ffa3 	bl	80069a4 <_ZN8alertBarD1Ev>
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	4b2a      	ldr	r3, [pc, #168]	; (8006b0c <_ZN15Screen1ViewBaseD1Ev+0xe0>)
 8006a62:	4413      	add	r3, r2
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff fefd 	bl	8006864 <_ZN7tempBoxD1Ev>
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8006a70:	4413      	add	r3, r2
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff fef6 	bl	8006864 <_ZN7tempBoxD1Ev>
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8006a7e:	4413      	add	r3, r2
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7ff feef 	bl	8006864 <_ZN7tempBoxD1Ev>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff fee9 	bl	8006864 <_ZN7tempBoxD1Ev>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 ffcd 	bl	8007a38 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 ffc7 	bl	8007a38 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 ffc1 	bl	8007a38 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 ff77 	bl	80079b0 <_ZN8touchgfx13PainterRGB888D1Ev>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	33d8      	adds	r3, #216	; 0xd8
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 ff50 	bl	800796c <_ZN8touchgfx4LineD1Ev>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3398      	adds	r3, #152	; 0x98
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 ffb1 	bl	8007a38 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	336c      	adds	r3, #108	; 0x6c
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7ff ff14 	bl	8006908 <_ZN8touchgfx3BoxD1Ev>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3340      	adds	r3, #64	; 0x40
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff ff0f 	bl	8006908 <_ZN8touchgfx3BoxD1Ev>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff ff7b 	bl	80069e8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	0802a7e8 	.word	0x0802a7e8
 8006b00:	0001f6c4 	.word	0x0001f6c4
 8006b04:	0001f5ec 	.word	0x0001f5ec
 8006b08:	0001f514 	.word	0x0001f514
 8006b0c:	00017858 	.word	0x00017858

08006b10 <_ZN15Screen1ViewBaseD0Ev>:
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff ff87 	bl	8006a2c <_ZN15Screen1ViewBaseD1Ev>
 8006b1e:	4904      	ldr	r1, [pc, #16]	; (8006b30 <_ZN15Screen1ViewBaseD0Ev+0x20>)
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f01e f8f8 	bl	8024d16 <_ZdlPvj>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	00022638 	.word	0x00022638

08006b34 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 8006b34:	b590      	push	{r4, r7, lr}
 8006b36:	b0c3      	sub	sp, #268	; 0x10c
 8006b38:	af02      	add	r7, sp, #8
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 fd4a 	bl	80075d8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8006b44:	4a96      	ldr	r2, [pc, #600]	; (8006da0 <_ZN15Screen1ViewBaseC1Ev+0x26c>)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3340      	adds	r3, #64	; 0x40
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7ff fc32 	bl	80063b8 <_ZN8touchgfx3BoxC1Ev>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	336c      	adds	r3, #108	; 0x6c
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7ff fc2d 	bl	80063b8 <_ZN8touchgfx3BoxC1Ev>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3398      	adds	r3, #152	; 0x98
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff fcd2 	bl	800650c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	33d8      	adds	r3, #216	; 0xd8
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f00e fe69 	bl	8015844 <_ZN8touchgfx4LineC1Ev>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8006b78:	f107 031c 	add.w	r3, r7, #28
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fc fe94 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8006b84:	69f9      	ldr	r1, [r7, #28]
 8006b86:	4620      	mov	r0, r4
 8006b88:	f7ff fdee 	bl	8006768 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff fcba 	bl	800650c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff fcb4 	bl	800650c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7ff fcae 	bl	800650c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f002 fdf2 	bl	80097a0 <_ZN7tempBoxC1Ev>
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8006bc2:	4413      	add	r3, r2
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f002 fdeb 	bl	80097a0 <_ZN7tempBoxC1Ev>
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8006bd0:	4413      	add	r3, r2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f002 fde4 	bl	80097a0 <_ZN7tempBoxC1Ev>
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	4b72      	ldr	r3, [pc, #456]	; (8006da4 <_ZN15Screen1ViewBaseC1Ev+0x270>)
 8006bdc:	4413      	add	r3, r2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f002 fdde 	bl	80097a0 <_ZN7tempBoxC1Ev>
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	4b70      	ldr	r3, [pc, #448]	; (8006da8 <_ZN15Screen1ViewBaseC1Ev+0x274>)
 8006be8:	4413      	add	r3, r2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f002 fc1c 	bl	8009428 <_ZN8alertBarC1Ev>
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	4b6e      	ldr	r3, [pc, #440]	; (8006dac <_ZN15Screen1ViewBaseC1Ev+0x278>)
 8006bf4:	4413      	add	r3, r2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f002 fc16 	bl	8009428 <_ZN8alertBarC1Ev>
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	4b6c      	ldr	r3, [pc, #432]	; (8006db0 <_ZN15Screen1ViewBaseC1Ev+0x27c>)
 8006c00:	4413      	add	r3, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff fc82 	bl	800650c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	4b6a      	ldr	r3, [pc, #424]	; (8006db4 <_ZN15Screen1ViewBaseC1Ev+0x280>)
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8006c12:	4618      	mov	r0, r3
 8006c14:	f00f fb9c 	bl	8016350 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 800, 480);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8006c1e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	f7ff fa65 	bl	80060fa <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8006c36:	2300      	movs	r3, #0
 8006c38:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8006c42:	2300      	movs	r3, #0
 8006c44:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006c48:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8006c4c:	041b      	lsls	r3, r3, #16
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8006c54:	021b      	lsls	r3, r3, #8
 8006c56:	431a      	orrs	r2, r3
 8006c58:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006c62:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006c66:	4611      	mov	r1, r2
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7fc fe1f 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8006c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c72:	4619      	mov	r1, r3
 8006c74:	4620      	mov	r0, r4
 8006c76:	f7ff fbc3 	bl	8006400 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 805, 480);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8006c80:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	f240 3325 	movw	r3, #805	; 0x325
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	f7ff fa34 	bl	80060fa <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8006caa:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8006cae:	041b      	lsls	r3, r3, #16
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006cb6:	021b      	lsls	r3, r3, #8
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006cc4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006cc8:	4611      	mov	r1, r2
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fc fdee 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8006cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f7ff fb92 	bl	8006400 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    gearArea.setXY(331, 60);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3398      	adds	r3, #152	; 0x98
 8006ce0:	223c      	movs	r2, #60	; 0x3c
 8006ce2:	f240 114b 	movw	r1, #331	; 0x14b
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7ff fa28 	bl	800613c <_ZN8touchgfx8Drawable5setXYEss>
    gearArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8006cf2:	23ff      	movs	r3, #255	; 0xff
 8006cf4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8006cf8:	23ff      	movs	r3, #255	; 0xff
 8006cfa:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8006cfe:	23ff      	movs	r3, #255	; 0xff
 8006d00:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8006d04:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8006d08:	041b      	lsls	r3, r3, #16
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8006d10:	021b      	lsls	r3, r3, #8
 8006d12:	431a      	orrs	r2, r3
 8006d14:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006d1e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006d22:	4611      	mov	r1, r2
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fc fdc1 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8006d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d2e:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
 8006d32:	61bb      	str	r3, [r7, #24]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8006d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006d3c:	bf00      	nop
    gearArea.setLinespacing(0);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3398      	adds	r3, #152	; 0x98
 8006d42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d46:	2300      	movs	r3, #0
 8006d48:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8006d4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d50:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8006d54:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8006d56:	bf00      	nop
    Unicode::snprintf(gearAreaBuffer, GEARAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID14).getText());
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4c17      	ldr	r4, [pc, #92]	; (8006db8 <_ZN15Screen1ViewBaseC1Ev+0x284>)
 8006d5c:	441c      	add	r4, r3
 8006d5e:	f107 0320 	add.w	r3, r7, #32
 8006d62:	210c      	movs	r1, #12
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff fb59 	bl	800641c <_ZN8touchgfx9TypedTextC1Et>
 8006d6a:	f107 0320 	add.w	r3, r7, #32
 8006d6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8006d72:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <_ZN15Screen1ViewBaseC1Ev+0x288>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d105      	bne.n	8006d86 <_ZN15Screen1ViewBaseC1Ev+0x252>
 8006d7a:	4b11      	ldr	r3, [pc, #68]	; (8006dc0 <_ZN15Screen1ViewBaseC1Ev+0x28c>)
 8006d7c:	4a11      	ldr	r2, [pc, #68]	; (8006dc4 <_ZN15Screen1ViewBaseC1Ev+0x290>)
 8006d7e:	21ae      	movs	r1, #174	; 0xae
 8006d80:	4811      	ldr	r0, [pc, #68]	; (8006dc8 <_ZN15Screen1ViewBaseC1Ev+0x294>)
 8006d82:	f01e f83f 	bl	8024e04 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8006d86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d8a:	889a      	ldrh	r2, [r3, #4]
 8006d8c:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <_ZN15Screen1ViewBaseC1Ev+0x298>)
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d31f      	bcc.n	8006dd4 <_ZN15Screen1ViewBaseC1Ev+0x2a0>
 8006d94:	4b0e      	ldr	r3, [pc, #56]	; (8006dd0 <_ZN15Screen1ViewBaseC1Ev+0x29c>)
 8006d96:	4a0b      	ldr	r2, [pc, #44]	; (8006dc4 <_ZN15Screen1ViewBaseC1Ev+0x290>)
 8006d98:	21af      	movs	r1, #175	; 0xaf
 8006d9a:	480b      	ldr	r0, [pc, #44]	; (8006dc8 <_ZN15Screen1ViewBaseC1Ev+0x294>)
 8006d9c:	f01e f832 	bl	8024e04 <__assert_func>
 8006da0:	0802a7e8 	.word	0x0802a7e8
 8006da4:	00017858 	.word	0x00017858
 8006da8:	0001f514 	.word	0x0001f514
 8006dac:	0001f5ec 	.word	0x0001f5ec
 8006db0:	0001f6c4 	.word	0x0001f6c4
 8006db4:	0001f758 	.word	0x0001f758
 8006db8:	0001f704 	.word	0x0001f704
 8006dbc:	20056750 	.word	0x20056750
 8006dc0:	08029e04 	.word	0x08029e04
 8006dc4:	08029e48 	.word	0x08029e48
 8006dc8:	08029e78 	.word	0x08029e78
 8006dcc:	20056754 	.word	0x20056754
 8006dd0:	08029ec0 	.word	0x08029ec0
    }
 8006dd4:	bf00      	nop
        return texts->getText(typedTextId);
 8006dd6:	4bc2      	ldr	r3, [pc, #776]	; (80070e0 <_ZN15Screen1ViewBaseC1Ev+0x5ac>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ddc:	4611      	mov	r1, r2
 8006dde:	4618      	mov	r0, r3
 8006de0:	f001 fa42 	bl	8008268 <_ZNK8touchgfx5Texts7getTextEt>
 8006de4:	4603      	mov	r3, r0
 8006de6:	bf00      	nop
 8006de8:	4abe      	ldr	r2, [pc, #760]	; (80070e4 <_ZN15Screen1ViewBaseC1Ev+0x5b0>)
 8006dea:	2102      	movs	r1, #2
 8006dec:	4620      	mov	r0, r4
 8006dee:	f013 ffbb 	bl	801ad68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8006df2:	f107 0320 	add.w	r3, r7, #32
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fe fac0 	bl	800537c <_ZN8touchgfx9TypedTextD1Ev>
    gearArea.setWildcard(gearAreaBuffer);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	4bb8      	ldr	r3, [pc, #736]	; (80070e8 <_ZN15Screen1ViewBaseC1Ev+0x5b4>)
 8006e06:	4413      	add	r3, r2
 8006e08:	4619      	mov	r1, r3
 8006e0a:	f7ff fb95 	bl	8006538 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    gearArea.resizeToCurrentText();
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3398      	adds	r3, #152	; 0x98
 8006e12:	4618      	mov	r0, r3
 8006e14:	f00f f8c4 	bl	8015fa0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    gearArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8006e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e22:	2100      	movs	r1, #0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff faf9 	bl	800641c <_ZN8touchgfx9TypedTextC1Et>
 8006e2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4620      	mov	r0, r4
 8006e32:	f00f f8d2 	bl	8015fda <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe fa9e 	bl	800537c <_ZN8touchgfx9TypedTextD1Ev>

    line1.setPosition(329, 140, 152, 20);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8006e46:	2314      	movs	r3, #20
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	2398      	movs	r3, #152	; 0x98
 8006e4c:	228c      	movs	r2, #140	; 0x8c
 8006e4e:	f240 1149 	movw	r1, #329	; 0x149
 8006e52:	f7ff f952 	bl	80060fa <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8006e5c:	23ff      	movs	r3, #255	; 0xff
 8006e5e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 8006e62:	23ff      	movs	r3, #255	; 0xff
 8006e64:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8006e68:	23ff      	movs	r3, #255	; 0xff
 8006e6a:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8006e6e:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8006e72:	041b      	lsls	r3, r3, #16
 8006e74:	461a      	mov	r2, r3
 8006e76:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006e88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fc fd0c 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8006e94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f7ff fc84 	bl	80067a8 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8006eac:	4619      	mov	r1, r3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	f00e faec 	bl	801548c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line1.setStart(0, 0);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	33d8      	adds	r3, #216	; 0xd8
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2100      	movs	r1, #0
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 fba1 	bl	8007604 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(150, 0);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	33d8      	adds	r3, #216	; 0xd8
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2196      	movs	r1, #150	; 0x96
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fbc0 	bl	8007650 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(4);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	33d8      	adds	r3, #216	; 0xd8
 8006ed4:	2104      	movs	r1, #4
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 fbe0 	bl	800769c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	33d8      	adds	r3, #216	; 0xd8
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f00e fdf4 	bl	8015ad0 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    rpmArea.setPosition(298, 71, 212, 69);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8006eee:	2345      	movs	r3, #69	; 0x45
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	23d4      	movs	r3, #212	; 0xd4
 8006ef4:	2247      	movs	r2, #71	; 0x47
 8006ef6:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8006efa:	f7ff f8fe 	bl	80060fa <_ZN8touchgfx8Drawable11setPositionEssss>
    rpmArea.setColor(touchgfx::Color::getColorFromRGB(0, 102, 255));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8006f04:	2300      	movs	r3, #0
 8006f06:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8006f0a:	2366      	movs	r3, #102	; 0x66
 8006f0c:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 8006f10:	23ff      	movs	r3, #255	; 0xff
 8006f12:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8006f16:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8006f1a:	041b      	lsls	r3, r3, #16
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	431a      	orrs	r2, r3
 8006f26:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006f30:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f34:	4611      	mov	r1, r2
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fc fcb8 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8006f3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f3e:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
 8006f42:	617b      	str	r3, [r7, #20]
        this->color = color;
 8006f44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006f4c:	bf00      	nop
    rpmArea.setLinespacing(0);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        linespace = space;
 8006f5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f62:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8006f66:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8006f68:	bf00      	nop
    Unicode::snprintf(rpmAreaBuffer, RPMAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID13).getText());
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4c5f      	ldr	r4, [pc, #380]	; (80070ec <_ZN15Screen1ViewBaseC1Ev+0x5b8>)
 8006f6e:	441c      	add	r4, r3
 8006f70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f74:	210b      	movs	r1, #11
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7ff fa50 	bl	800641c <_ZN8touchgfx9TypedTextC1Et>
 8006f7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8006f84:	4b5a      	ldr	r3, [pc, #360]	; (80070f0 <_ZN15Screen1ViewBaseC1Ev+0x5bc>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d105      	bne.n	8006f98 <_ZN15Screen1ViewBaseC1Ev+0x464>
 8006f8c:	4b59      	ldr	r3, [pc, #356]	; (80070f4 <_ZN15Screen1ViewBaseC1Ev+0x5c0>)
 8006f8e:	4a5a      	ldr	r2, [pc, #360]	; (80070f8 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 8006f90:	21ae      	movs	r1, #174	; 0xae
 8006f92:	485a      	ldr	r0, [pc, #360]	; (80070fc <_ZN15Screen1ViewBaseC1Ev+0x5c8>)
 8006f94:	f01d ff36 	bl	8024e04 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8006f98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f9c:	889a      	ldrh	r2, [r3, #4]
 8006f9e:	4b58      	ldr	r3, [pc, #352]	; (8007100 <_ZN15Screen1ViewBaseC1Ev+0x5cc>)
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d305      	bcc.n	8006fb2 <_ZN15Screen1ViewBaseC1Ev+0x47e>
 8006fa6:	4b57      	ldr	r3, [pc, #348]	; (8007104 <_ZN15Screen1ViewBaseC1Ev+0x5d0>)
 8006fa8:	4a53      	ldr	r2, [pc, #332]	; (80070f8 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 8006faa:	21af      	movs	r1, #175	; 0xaf
 8006fac:	4853      	ldr	r0, [pc, #332]	; (80070fc <_ZN15Screen1ViewBaseC1Ev+0x5c8>)
 8006fae:	f01d ff29 	bl	8024e04 <__assert_func>
    }
 8006fb2:	bf00      	nop
        return texts->getText(typedTextId);
 8006fb4:	4b4a      	ldr	r3, [pc, #296]	; (80070e0 <_ZN15Screen1ViewBaseC1Ev+0x5ac>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006fba:	4611      	mov	r1, r2
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f001 f953 	bl	8008268 <_ZNK8touchgfx5Texts7getTextEt>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	bf00      	nop
 8006fc6:	4a47      	ldr	r2, [pc, #284]	; (80070e4 <_ZN15Screen1ViewBaseC1Ev+0x5b0>)
 8006fc8:	210a      	movs	r1, #10
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f013 fecc 	bl	801ad68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8006fd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fe f9d1 	bl	800537c <_ZN8touchgfx9TypedTextD1Ev>
    rpmArea.setWildcard(rpmAreaBuffer);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	4b42      	ldr	r3, [pc, #264]	; (80070ec <_ZN15Screen1ViewBaseC1Ev+0x5b8>)
 8006fe4:	4413      	add	r3, r2
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	f7ff faa6 	bl	8006538 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpmArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8006ff2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7ff fa0f 	bl	800641c <_ZN8touchgfx9TypedTextC1Et>
 8006ffe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007002:	4619      	mov	r1, r3
 8007004:	4620      	mov	r0, r4
 8007006:	f00e ffe8 	bl	8015fda <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800700a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800700e:	4618      	mov	r0, r3
 8007010:	f7fe f9b4 	bl	800537c <_ZN8touchgfx9TypedTextD1Ev>

    battArea.setPosition(14, 82, 259, 49);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 800701a:	2331      	movs	r3, #49	; 0x31
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	f240 1303 	movw	r3, #259	; 0x103
 8007022:	2252      	movs	r2, #82	; 0x52
 8007024:	210e      	movs	r1, #14
 8007026:	f7ff f868 	bl	80060fa <_ZN8touchgfx8Drawable11setPositionEssss>
    battArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8007030:	23ff      	movs	r3, #255	; 0xff
 8007032:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8007036:	23ff      	movs	r3, #255	; 0xff
 8007038:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 800703c:	23ff      	movs	r3, #255	; 0xff
 800703e:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 8007042:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8007046:	041b      	lsls	r3, r3, #16
 8007048:	461a      	mov	r2, r3
 800704a:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 800704e:	021b      	lsls	r3, r3, #8
 8007050:	431a      	orrs	r2, r3
 8007052:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8007056:	4313      	orrs	r3, r2
 8007058:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800705c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007060:	4611      	mov	r1, r2
 8007062:	4618      	mov	r0, r3
 8007064:	f7fc fc22 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8007068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800706a:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800706e:	613b      	str	r3, [r7, #16]
        this->color = color;
 8007070:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007078:	bf00      	nop
    battArea.setLinespacing(0);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8007080:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007084:	2300      	movs	r3, #0
 8007086:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
        linespace = space;
 800708a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800708e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8007092:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007094:	bf00      	nop
    Unicode::snprintf(battAreaBuffer, BATTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID9).getText());
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4c1b      	ldr	r4, [pc, #108]	; (8007108 <_ZN15Screen1ViewBaseC1Ev+0x5d4>)
 800709a:	441c      	add	r4, r3
 800709c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80070a0:	2108      	movs	r1, #8
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7ff f9ba 	bl	800641c <_ZN8touchgfx9TypedTextC1Et>
 80070a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80070ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80070b0:	4b0f      	ldr	r3, [pc, #60]	; (80070f0 <_ZN15Screen1ViewBaseC1Ev+0x5bc>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d105      	bne.n	80070c4 <_ZN15Screen1ViewBaseC1Ev+0x590>
 80070b8:	4b0e      	ldr	r3, [pc, #56]	; (80070f4 <_ZN15Screen1ViewBaseC1Ev+0x5c0>)
 80070ba:	4a0f      	ldr	r2, [pc, #60]	; (80070f8 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 80070bc:	21ae      	movs	r1, #174	; 0xae
 80070be:	480f      	ldr	r0, [pc, #60]	; (80070fc <_ZN15Screen1ViewBaseC1Ev+0x5c8>)
 80070c0:	f01d fea0 	bl	8024e04 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80070c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070c8:	889a      	ldrh	r2, [r3, #4]
 80070ca:	4b0d      	ldr	r3, [pc, #52]	; (8007100 <_ZN15Screen1ViewBaseC1Ev+0x5cc>)
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d31c      	bcc.n	800710c <_ZN15Screen1ViewBaseC1Ev+0x5d8>
 80070d2:	4b0c      	ldr	r3, [pc, #48]	; (8007104 <_ZN15Screen1ViewBaseC1Ev+0x5d0>)
 80070d4:	4a08      	ldr	r2, [pc, #32]	; (80070f8 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 80070d6:	21af      	movs	r1, #175	; 0xaf
 80070d8:	4808      	ldr	r0, [pc, #32]	; (80070fc <_ZN15Screen1ViewBaseC1Ev+0x5c8>)
 80070da:	f01d fe93 	bl	8024e04 <__assert_func>
 80070de:	bf00      	nop
 80070e0:	2005675c 	.word	0x2005675c
 80070e4:	08029f14 	.word	0x08029f14
 80070e8:	0001f704 	.word	0x0001f704
 80070ec:	0001f708 	.word	0x0001f708
 80070f0:	20056750 	.word	0x20056750
 80070f4:	08029e04 	.word	0x08029e04
 80070f8:	08029e48 	.word	0x08029e48
 80070fc:	08029e78 	.word	0x08029e78
 8007100:	20056754 	.word	0x20056754
 8007104:	08029ec0 	.word	0x08029ec0
 8007108:	0001f71c 	.word	0x0001f71c
    }
 800710c:	bf00      	nop
        return texts->getText(typedTextId);
 800710e:	4bb1      	ldr	r3, [pc, #708]	; (80073d4 <_ZN15Screen1ViewBaseC1Ev+0x8a0>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8007116:	4611      	mov	r1, r2
 8007118:	4618      	mov	r0, r3
 800711a:	f001 f8a5 	bl	8008268 <_ZNK8touchgfx5Texts7getTextEt>
 800711e:	4603      	mov	r3, r0
 8007120:	bf00      	nop
 8007122:	4aad      	ldr	r2, [pc, #692]	; (80073d8 <_ZN15Screen1ViewBaseC1Ev+0x8a4>)
 8007124:	210a      	movs	r1, #10
 8007126:	4620      	mov	r0, r4
 8007128:	f013 fe1e 	bl	801ad68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800712c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007130:	4618      	mov	r0, r3
 8007132:	f7fe f923 	bl	800537c <_ZN8touchgfx9TypedTextD1Ev>
    battArea.setWildcard(battAreaBuffer);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	4ba7      	ldr	r3, [pc, #668]	; (80073dc <_ZN15Screen1ViewBaseC1Ev+0x8a8>)
 8007140:	4413      	add	r3, r2
 8007142:	4619      	mov	r1, r3
 8007144:	f7ff f9f8 	bl	8006538 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    battArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 800714e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007152:	2102      	movs	r1, #2
 8007154:	4618      	mov	r0, r3
 8007156:	f7ff f961 	bl	800641c <_ZN8touchgfx9TypedTextC1Et>
 800715a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800715e:	4619      	mov	r1, r3
 8007160:	4620      	mov	r0, r4
 8007162:	f00e ff3a 	bl	8015fda <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007166:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe f906 	bl	800537c <_ZN8touchgfx9TypedTextD1Ev>

    tcsArea.setPosition(652, 82, 138, 49);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 8007176:	2331      	movs	r3, #49	; 0x31
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	238a      	movs	r3, #138	; 0x8a
 800717c:	2252      	movs	r2, #82	; 0x52
 800717e:	f44f 7123 	mov.w	r1, #652	; 0x28c
 8007182:	f7fe ffba 	bl	80060fa <_ZN8touchgfx8Drawable11setPositionEssss>
    tcsArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 800718c:	23ff      	movs	r3, #255	; 0xff
 800718e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8007192:	23ff      	movs	r3, #255	; 0xff
 8007194:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8007198:	23ff      	movs	r3, #255	; 0xff
 800719a:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 800719e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80071a2:	041b      	lsls	r3, r3, #16
 80071a4:	461a      	mov	r2, r3
 80071a6:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80071aa:	021b      	lsls	r3, r3, #8
 80071ac:	431a      	orrs	r2, r3
 80071ae:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80071b2:	4313      	orrs	r3, r2
 80071b4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80071b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80071bc:	4611      	mov	r1, r2
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fc fb74 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80071c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071c6:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 80071ca:	60fb      	str	r3, [r7, #12]
        this->color = color;
 80071cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80071d4:	bf00      	nop
    tcsArea.setLinespacing(0);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80071dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071e0:	2300      	movs	r3, #0
 80071e2:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
        linespace = space;
 80071e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ea:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	; 0xe2
 80071ee:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80071f0:	bf00      	nop
    Unicode::snprintf(tcsAreaBuffer, TCSAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID12).getText());
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4c7a      	ldr	r4, [pc, #488]	; (80073e0 <_ZN15Screen1ViewBaseC1Ev+0x8ac>)
 80071f6:	441c      	add	r4, r3
 80071f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071fc:	210a      	movs	r1, #10
 80071fe:	4618      	mov	r0, r3
 8007200:	f7ff f90c 	bl	800641c <_ZN8touchgfx9TypedTextC1Et>
 8007204:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007208:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800720c:	4b75      	ldr	r3, [pc, #468]	; (80073e4 <_ZN15Screen1ViewBaseC1Ev+0x8b0>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d105      	bne.n	8007220 <_ZN15Screen1ViewBaseC1Ev+0x6ec>
 8007214:	4b74      	ldr	r3, [pc, #464]	; (80073e8 <_ZN15Screen1ViewBaseC1Ev+0x8b4>)
 8007216:	4a75      	ldr	r2, [pc, #468]	; (80073ec <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 8007218:	21ae      	movs	r1, #174	; 0xae
 800721a:	4875      	ldr	r0, [pc, #468]	; (80073f0 <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 800721c:	f01d fdf2 	bl	8024e04 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007220:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007224:	889a      	ldrh	r2, [r3, #4]
 8007226:	4b73      	ldr	r3, [pc, #460]	; (80073f4 <_ZN15Screen1ViewBaseC1Ev+0x8c0>)
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d305      	bcc.n	800723a <_ZN15Screen1ViewBaseC1Ev+0x706>
 800722e:	4b72      	ldr	r3, [pc, #456]	; (80073f8 <_ZN15Screen1ViewBaseC1Ev+0x8c4>)
 8007230:	4a6e      	ldr	r2, [pc, #440]	; (80073ec <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 8007232:	21af      	movs	r1, #175	; 0xaf
 8007234:	486e      	ldr	r0, [pc, #440]	; (80073f0 <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 8007236:	f01d fde5 	bl	8024e04 <__assert_func>
    }
 800723a:	bf00      	nop
        return texts->getText(typedTextId);
 800723c:	4b65      	ldr	r3, [pc, #404]	; (80073d4 <_ZN15Screen1ViewBaseC1Ev+0x8a0>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007244:	4611      	mov	r1, r2
 8007246:	4618      	mov	r0, r3
 8007248:	f001 f80e 	bl	8008268 <_ZNK8touchgfx5Texts7getTextEt>
 800724c:	4603      	mov	r3, r0
 800724e:	bf00      	nop
 8007250:	4a61      	ldr	r2, [pc, #388]	; (80073d8 <_ZN15Screen1ViewBaseC1Ev+0x8a4>)
 8007252:	210a      	movs	r1, #10
 8007254:	4620      	mov	r0, r4
 8007256:	f013 fd87 	bl	801ad68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800725a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800725e:	4618      	mov	r0, r3
 8007260:	f7fe f88c 	bl	800537c <_ZN8touchgfx9TypedTextD1Ev>
    tcsArea.setWildcard(tcsAreaBuffer);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	4b5c      	ldr	r3, [pc, #368]	; (80073e0 <_ZN15Screen1ViewBaseC1Ev+0x8ac>)
 800726e:	4413      	add	r3, r2
 8007270:	4619      	mov	r1, r3
 8007272:	f7ff f961 	bl	8006538 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tcsArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 800727c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007280:	2103      	movs	r1, #3
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff f8ca 	bl	800641c <_ZN8touchgfx9TypedTextC1Et>
 8007288:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800728c:	4619      	mov	r1, r3
 800728e:	4620      	mov	r0, r4
 8007290:	f00e fea3 	bl	8015fda <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007294:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe f86f 	bl	800537c <_ZN8touchgfx9TypedTextD1Ev>

    tempBox1.setXY(11, 248);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80072a4:	22f8      	movs	r2, #248	; 0xf8
 80072a6:	210b      	movs	r1, #11
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fe ff47 	bl	800613c <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_1.setXY(11, 329);
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 80072b4:	4413      	add	r3, r2
 80072b6:	f240 1249 	movw	r2, #329	; 0x149
 80072ba:	210b      	movs	r1, #11
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fe ff3d 	bl	800613c <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_2.setXY(570, 248);
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 80072c8:	4413      	add	r3, r2
 80072ca:	22f8      	movs	r2, #248	; 0xf8
 80072cc:	f240 213a 	movw	r1, #570	; 0x23a
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe ff33 	bl	800613c <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_3.setXY(570, 329);
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	4b48      	ldr	r3, [pc, #288]	; (80073fc <_ZN15Screen1ViewBaseC1Ev+0x8c8>)
 80072da:	4413      	add	r3, r2
 80072dc:	f240 1249 	movw	r2, #329	; 0x149
 80072e0:	f240 213a 	movw	r1, #570	; 0x23a
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fe ff29 	bl	800613c <_ZN8touchgfx8Drawable5setXYEss>

    alertBar1.setXY(0, 0);
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	4b44      	ldr	r3, [pc, #272]	; (8007400 <_ZN15Screen1ViewBaseC1Ev+0x8cc>)
 80072ee:	4413      	add	r3, r2
 80072f0:	2200      	movs	r2, #0
 80072f2:	2100      	movs	r1, #0
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fe ff21 	bl	800613c <_ZN8touchgfx8Drawable5setXYEss>

    alertBar2.setXY(0, 420);
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	4b41      	ldr	r3, [pc, #260]	; (8007404 <_ZN15Screen1ViewBaseC1Ev+0x8d0>)
 80072fe:	4413      	add	r3, r2
 8007300:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007304:	2100      	movs	r1, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe ff18 	bl	800613c <_ZN8touchgfx8Drawable5setXYEss>

    cltArea.setPosition(14, 150, 238, 49);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	483e      	ldr	r0, [pc, #248]	; (8007408 <_ZN15Screen1ViewBaseC1Ev+0x8d4>)
 8007310:	4418      	add	r0, r3
 8007312:	2331      	movs	r3, #49	; 0x31
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	23ee      	movs	r3, #238	; 0xee
 8007318:	2296      	movs	r2, #150	; 0x96
 800731a:	210e      	movs	r1, #14
 800731c:	f7fe feed 	bl	80060fa <_ZN8touchgfx8Drawable11setPositionEssss>
    cltArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4c39      	ldr	r4, [pc, #228]	; (8007408 <_ZN15Screen1ViewBaseC1Ev+0x8d4>)
 8007324:	441c      	add	r4, r3
 8007326:	23ff      	movs	r3, #255	; 0xff
 8007328:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800732c:	23ff      	movs	r3, #255	; 0xff
 800732e:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 8007332:	23ff      	movs	r3, #255	; 0xff
 8007334:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
 8007338:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800733c:	041b      	lsls	r3, r3, #16
 800733e:	461a      	mov	r2, r3
 8007340:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8007344:	021b      	lsls	r3, r3, #8
 8007346:	431a      	orrs	r2, r3
 8007348:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800734c:	4313      	orrs	r3, r2
 800734e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007352:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007356:	4611      	mov	r1, r2
 8007358:	4618      	mov	r0, r3
 800735a:	f7fc faa7 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 800735e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007360:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8007364:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8007366:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800736e:	bf00      	nop
    cltArea.setLinespacing(0);
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	4b25      	ldr	r3, [pc, #148]	; (8007408 <_ZN15Screen1ViewBaseC1Ev+0x8d4>)
 8007374:	4413      	add	r3, r2
 8007376:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800737a:	2300      	movs	r3, #0
 800737c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
        linespace = space;
 8007380:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007384:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 8007388:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800738a:	bf00      	nop
    Unicode::snprintf(cltAreaBuffer, CLTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID11).getText());
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4c1f      	ldr	r4, [pc, #124]	; (800740c <_ZN15Screen1ViewBaseC1Ev+0x8d8>)
 8007390:	441c      	add	r4, r3
 8007392:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007396:	2109      	movs	r1, #9
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff f83f 	bl	800641c <_ZN8touchgfx9TypedTextC1Et>
 800739e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80073a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80073a6:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <_ZN15Screen1ViewBaseC1Ev+0x8b0>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d105      	bne.n	80073ba <_ZN15Screen1ViewBaseC1Ev+0x886>
 80073ae:	4b0e      	ldr	r3, [pc, #56]	; (80073e8 <_ZN15Screen1ViewBaseC1Ev+0x8b4>)
 80073b0:	4a0e      	ldr	r2, [pc, #56]	; (80073ec <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 80073b2:	21ae      	movs	r1, #174	; 0xae
 80073b4:	480e      	ldr	r0, [pc, #56]	; (80073f0 <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 80073b6:	f01d fd25 	bl	8024e04 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80073ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073be:	889a      	ldrh	r2, [r3, #4]
 80073c0:	4b0c      	ldr	r3, [pc, #48]	; (80073f4 <_ZN15Screen1ViewBaseC1Ev+0x8c0>)
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d323      	bcc.n	8007410 <_ZN15Screen1ViewBaseC1Ev+0x8dc>
 80073c8:	4b0b      	ldr	r3, [pc, #44]	; (80073f8 <_ZN15Screen1ViewBaseC1Ev+0x8c4>)
 80073ca:	4a08      	ldr	r2, [pc, #32]	; (80073ec <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 80073cc:	21af      	movs	r1, #175	; 0xaf
 80073ce:	4808      	ldr	r0, [pc, #32]	; (80073f0 <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 80073d0:	f01d fd18 	bl	8024e04 <__assert_func>
 80073d4:	2005675c 	.word	0x2005675c
 80073d8:	08029f14 	.word	0x08029f14
 80073dc:	0001f71c 	.word	0x0001f71c
 80073e0:	0001f730 	.word	0x0001f730
 80073e4:	20056750 	.word	0x20056750
 80073e8:	08029e04 	.word	0x08029e04
 80073ec:	08029e48 	.word	0x08029e48
 80073f0:	08029e78 	.word	0x08029e78
 80073f4:	20056754 	.word	0x20056754
 80073f8:	08029ec0 	.word	0x08029ec0
 80073fc:	00017858 	.word	0x00017858
 8007400:	0001f514 	.word	0x0001f514
 8007404:	0001f5ec 	.word	0x0001f5ec
 8007408:	0001f6c4 	.word	0x0001f6c4
 800740c:	0001f744 	.word	0x0001f744
    }
 8007410:	bf00      	nop
        return texts->getText(typedTextId);
 8007412:	4b50      	ldr	r3, [pc, #320]	; (8007554 <_ZN15Screen1ViewBaseC1Ev+0xa20>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800741a:	4611      	mov	r1, r2
 800741c:	4618      	mov	r0, r3
 800741e:	f000 ff23 	bl	8008268 <_ZNK8touchgfx5Texts7getTextEt>
 8007422:	4603      	mov	r3, r0
 8007424:	bf00      	nop
 8007426:	4a4c      	ldr	r2, [pc, #304]	; (8007558 <_ZN15Screen1ViewBaseC1Ev+0xa24>)
 8007428:	210a      	movs	r1, #10
 800742a:	4620      	mov	r0, r4
 800742c:	f013 fc9c 	bl	801ad68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8007430:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007434:	4618      	mov	r0, r3
 8007436:	f7fd ffa1 	bl	800537c <_ZN8touchgfx9TypedTextD1Ev>
    cltArea.setWildcard(cltAreaBuffer);
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	4b47      	ldr	r3, [pc, #284]	; (800755c <_ZN15Screen1ViewBaseC1Ev+0xa28>)
 800743e:	4413      	add	r3, r2
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	4a47      	ldr	r2, [pc, #284]	; (8007560 <_ZN15Screen1ViewBaseC1Ev+0xa2c>)
 8007444:	440a      	add	r2, r1
 8007446:	4611      	mov	r1, r2
 8007448:	4618      	mov	r0, r3
 800744a:	f7ff f875 	bl	8006538 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cltArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4c42      	ldr	r4, [pc, #264]	; (800755c <_ZN15Screen1ViewBaseC1Ev+0xa28>)
 8007452:	441c      	add	r4, r3
 8007454:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007458:	2107      	movs	r1, #7
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe ffde 	bl	800641c <_ZN8touchgfx9TypedTextC1Et>
 8007460:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007464:	4619      	mov	r1, r3
 8007466:	4620      	mov	r0, r4
 8007468:	f00e fdb7 	bl	8015fda <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800746c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007470:	4618      	mov	r0, r3
 8007472:	f7fd ff83 	bl	800537c <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3340      	adds	r3, #64	; 0x40
 800747c:	4619      	mov	r1, r3
 800747e:	4610      	mov	r0, r2
 8007480:	f7fe ff34 	bl	80062ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	336c      	adds	r3, #108	; 0x6c
 800748a:	4619      	mov	r1, r3
 800748c:	4610      	mov	r0, r2
 800748e:	f7fe ff2d 	bl	80062ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gearArea);
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3398      	adds	r3, #152	; 0x98
 8007498:	4619      	mov	r1, r3
 800749a:	4610      	mov	r0, r2
 800749c:	f7fe ff26 	bl	80062ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1);
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	33d8      	adds	r3, #216	; 0xd8
 80074a6:	4619      	mov	r1, r3
 80074a8:	4610      	mov	r0, r2
 80074aa:	f7fe ff1f 	bl	80062ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpmArea);
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074b6:	4619      	mov	r1, r3
 80074b8:	4610      	mov	r0, r2
 80074ba:	f7fe ff17 	bl	80062ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(battArea);
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80074c6:	4619      	mov	r1, r3
 80074c8:	4610      	mov	r0, r2
 80074ca:	f7fe ff0f 	bl	80062ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tcsArea);
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80074d6:	4619      	mov	r1, r3
 80074d8:	4610      	mov	r0, r2
 80074da:	f7fe ff07 	bl	80062ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1);
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80074e6:	4619      	mov	r1, r3
 80074e8:	4610      	mov	r0, r2
 80074ea:	f7fe feff 	bl	80062ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_1);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 80074f6:	4413      	add	r3, r2
 80074f8:	4619      	mov	r1, r3
 80074fa:	f7fe fef7 	bl	80062ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_2);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007506:	4413      	add	r3, r2
 8007508:	4619      	mov	r1, r3
 800750a:	f7fe feef 	bl	80062ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_3);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	4b14      	ldr	r3, [pc, #80]	; (8007564 <_ZN15Screen1ViewBaseC1Ev+0xa30>)
 8007514:	4413      	add	r3, r2
 8007516:	4619      	mov	r1, r3
 8007518:	f7fe fee8 	bl	80062ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar1);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	4b11      	ldr	r3, [pc, #68]	; (8007568 <_ZN15Screen1ViewBaseC1Ev+0xa34>)
 8007522:	4413      	add	r3, r2
 8007524:	4619      	mov	r1, r3
 8007526:	f7fe fee1 	bl	80062ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar2);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	4b0f      	ldr	r3, [pc, #60]	; (800756c <_ZN15Screen1ViewBaseC1Ev+0xa38>)
 8007530:	4413      	add	r3, r2
 8007532:	4619      	mov	r1, r3
 8007534:	f7fe feda 	bl	80062ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cltArea);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	4b07      	ldr	r3, [pc, #28]	; (800755c <_ZN15Screen1ViewBaseC1Ev+0xa28>)
 800753e:	4413      	add	r3, r2
 8007540:	4619      	mov	r1, r3
 8007542:	f7fe fed3 	bl	80062ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4618      	mov	r0, r3
 800754a:	f507 7782 	add.w	r7, r7, #260	; 0x104
 800754e:	46bd      	mov	sp, r7
 8007550:	bd90      	pop	{r4, r7, pc}
 8007552:	bf00      	nop
 8007554:	2005675c 	.word	0x2005675c
 8007558:	08029f14 	.word	0x08029f14
 800755c:	0001f6c4 	.word	0x0001f6c4
 8007560:	0001f744 	.word	0x0001f744
 8007564:	00017858 	.word	0x00017858
 8007568:	0001f514 	.word	0x0001f514
 800756c:	0001f5ec 	.word	0x0001f5ec

08007570 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
    tempBox1.initialize();
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800757e:	4618      	mov	r0, r3
 8007580:	f002 fa02 	bl	8009988 <_ZN7tempBox10initializeEv>
    tempBox1_1.initialize();
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 800758a:	4413      	add	r3, r2
 800758c:	4618      	mov	r0, r3
 800758e:	f002 f9fb 	bl	8009988 <_ZN7tempBox10initializeEv>
    tempBox1_2.initialize();
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007598:	4413      	add	r3, r2
 800759a:	4618      	mov	r0, r3
 800759c:	f002 f9f4 	bl	8009988 <_ZN7tempBox10initializeEv>
    tempBox1_3.initialize();
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <_ZN15Screen1ViewBase11setupScreenEv+0x5c>)
 80075a4:	4413      	add	r3, r2
 80075a6:	4618      	mov	r0, r3
 80075a8:	f002 f9ee 	bl	8009988 <_ZN7tempBox10initializeEv>
    alertBar1.initialize();
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	4b08      	ldr	r3, [pc, #32]	; (80075d0 <_ZN15Screen1ViewBase11setupScreenEv+0x60>)
 80075b0:	4413      	add	r3, r2
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 ff66 	bl	8009484 <_ZN8alertBar10initializeEv>
    alertBar2.initialize();
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	4b06      	ldr	r3, [pc, #24]	; (80075d4 <_ZN15Screen1ViewBase11setupScreenEv+0x64>)
 80075bc:	4413      	add	r3, r2
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 ff60 	bl	8009484 <_ZN8alertBar10initializeEv>
}
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	00017858 	.word	0x00017858
 80075d0:	0001f514 	.word	0x0001f514
 80075d4:	0001f5ec 	.word	0x0001f5ec

080075d8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f011 ff28 	bl	8019438 <_ZN8touchgfx6ScreenC1Ev>
 80075e8:	4a05      	ldr	r2, [pc, #20]	; (8007600 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	0802a81c 	.word	0x0802a81c

08007604 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8007604:	b590      	push	{r4, r7, lr}
 8007606:	b089      	sub	sp, #36	; 0x24
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	f107 0314 	add.w	r3, r7, #20
 800761c:	4611      	mov	r1, r2
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe ffde 	bl	80065e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	461c      	mov	r4, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	61fb      	str	r3, [r7, #28]
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	f107 0310 	add.w	r3, r7, #16
 8007634:	4611      	mov	r1, r2
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe ffd2 	bl	80065e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800763c:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800763e:	461a      	mov	r2, r3
 8007640:	4621      	mov	r1, r4
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f00e fa2e 	bl	8015aa4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8007648:	bf00      	nop
 800764a:	3724      	adds	r7, #36	; 0x24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd90      	pop	{r4, r7, pc}

08007650 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8007650:	b590      	push	{r4, r7, lr}
 8007652:	b089      	sub	sp, #36	; 0x24
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	61bb      	str	r3, [r7, #24]
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	f107 0314 	add.w	r3, r7, #20
 8007668:	4611      	mov	r1, r2
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe ffb8 	bl	80065e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	461c      	mov	r4, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	61fb      	str	r3, [r7, #28]
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	f107 0310 	add.w	r3, r7, #16
 8007680:	4611      	mov	r1, r2
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe ffac 	bl	80065e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007688:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800768a:	461a      	mov	r2, r3
 800768c:	4621      	mov	r1, r4
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f00e fa13 	bl	8015aba <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8007694:	bf00      	nop
 8007696:	3724      	adds	r7, #36	; 0x24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd90      	pop	{r4, r7, pc}

0800769c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	f107 0308 	add.w	r3, r7, #8
 80076b2:	4611      	mov	r1, r2
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fe ff93 	bl	80065e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80076ba:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7fe ffa9 	bl	8006616 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 80076c4:	bf00      	nop
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <_Z41__static_initialization_and_destruction_0ii>:
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b092      	sub	sp, #72	; 0x48
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	f040 8114 	bne.w	8007906 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076e4:	4293      	cmp	r3, r2
 80076e6:	f040 810e 	bne.w	8007906 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80076ea:	2300      	movs	r3, #0
 80076ec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80076f0:	2300      	movs	r3, #0
 80076f2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80076f6:	2300      	movs	r3, #0
 80076f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80076fc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007700:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007704:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007708:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800770c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007710:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8007714:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007718:	041b      	lsls	r3, r3, #16
 800771a:	461a      	mov	r2, r3
 800771c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007720:	021b      	lsls	r3, r3, #8
 8007722:	431a      	orrs	r2, r3
 8007724:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007728:	4313      	orrs	r3, r2
 800772a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800772e:	f107 0320 	add.w	r3, r7, #32
 8007732:	4611      	mov	r1, r2
 8007734:	4618      	mov	r0, r3
 8007736:	f7fc f8b9 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 800773a:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800773c:	bf00      	nop
 800773e:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8007740:	4b73      	ldr	r3, [pc, #460]	; (8007910 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	23ff      	movs	r3, #255	; 0xff
 8007746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800774a:	2300      	movs	r3, #0
 800774c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007750:	2300      	movs	r3, #0
 8007752:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8007756:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800775a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800775e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007766:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800776a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800776e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007772:	041b      	lsls	r3, r3, #16
 8007774:	461a      	mov	r2, r3
 8007776:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800777a:	021b      	lsls	r3, r3, #8
 800777c:	431a      	orrs	r2, r3
 800777e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007782:	4313      	orrs	r3, r2
 8007784:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007788:	f107 031c 	add.w	r3, r7, #28
 800778c:	4611      	mov	r1, r2
 800778e:	4618      	mov	r0, r3
 8007790:	f7fc f88c 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8007794:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8007796:	bf00      	nop
 8007798:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800779a:	4b5e      	ldr	r3, [pc, #376]	; (8007914 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	2300      	movs	r3, #0
 80077a0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80077a4:	23ff      	movs	r3, #255	; 0xff
 80077a6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80077aa:	2300      	movs	r3, #0
 80077ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80077b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80077b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80077bc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80077c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077c4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80077c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80077cc:	041b      	lsls	r3, r3, #16
 80077ce:	461a      	mov	r2, r3
 80077d0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80077d4:	021b      	lsls	r3, r3, #8
 80077d6:	431a      	orrs	r2, r3
 80077d8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80077dc:	4313      	orrs	r3, r2
 80077de:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80077e2:	f107 0318 	add.w	r3, r7, #24
 80077e6:	4611      	mov	r1, r2
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fc f85f 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80077ee:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 80077f0:	bf00      	nop
 80077f2:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 80077f4:	4b48      	ldr	r3, [pc, #288]	; (8007918 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	2300      	movs	r3, #0
 80077fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80077fe:	2300      	movs	r3, #0
 8007800:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8007804:	23ff      	movs	r3, #255	; 0xff
 8007806:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800780a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800780e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8007812:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007816:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800781a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800781e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007822:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007826:	041b      	lsls	r3, r3, #16
 8007828:	461a      	mov	r2, r3
 800782a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800782e:	021b      	lsls	r3, r3, #8
 8007830:	431a      	orrs	r2, r3
 8007832:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007836:	4313      	orrs	r3, r2
 8007838:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800783c:	f107 0314 	add.w	r3, r7, #20
 8007840:	4611      	mov	r1, r2
 8007842:	4618      	mov	r0, r3
 8007844:	f7fc f832 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8007848:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800784a:	bf00      	nop
 800784c:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800784e:	4b33      	ldr	r3, [pc, #204]	; (800791c <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	23f7      	movs	r3, #247	; 0xf7
 8007854:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8007858:	234c      	movs	r3, #76	; 0x4c
 800785a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800785e:	2302      	movs	r3, #2
 8007860:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007864:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8007868:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800786c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007870:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8007874:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007878:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800787c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007880:	041b      	lsls	r3, r3, #16
 8007882:	461a      	mov	r2, r3
 8007884:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	431a      	orrs	r2, r3
 800788c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007890:	4313      	orrs	r3, r2
 8007892:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007896:	f107 0310 	add.w	r3, r7, #16
 800789a:	4611      	mov	r1, r2
 800789c:	4618      	mov	r0, r3
 800789e:	f7fc f805 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80078a2:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 80078a4:	bf00      	nop
 80078a6:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 80078a8:	4b1d      	ldr	r3, [pc, #116]	; (8007920 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	23f7      	movs	r3, #247	; 0xf7
 80078ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80078b2:	23d2      	movs	r3, #210	; 0xd2
 80078b4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80078b8:	2302      	movs	r3, #2
 80078ba:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80078be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80078c2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80078c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ce:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80078d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80078d6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80078da:	041b      	lsls	r3, r3, #16
 80078dc:	461a      	mov	r2, r3
 80078de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80078e2:	021b      	lsls	r3, r3, #8
 80078e4:	431a      	orrs	r2, r3
 80078e6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80078ea:	4313      	orrs	r3, r2
 80078ec:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80078f0:	f107 030c 	add.w	r3, r7, #12
 80078f4:	4611      	mov	r1, r2
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fb ffd8 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80078fc:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 80078fe:	bf00      	nop
 8007900:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8007902:	4b08      	ldr	r3, [pc, #32]	; (8007924 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	bf00      	nop
 8007908:	3748      	adds	r7, #72	; 0x48
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	200237bc 	.word	0x200237bc
 8007914:	200237c0 	.word	0x200237c0
 8007918:	200237c4 	.word	0x200237c4
 800791c:	200237c8 	.word	0x200237c8
 8007920:	200237cc 	.word	0x200237cc
 8007924:	200237d0 	.word	0x200237d0

08007928 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 * Class for drawing complex polygons on the display using CanvasWidgetRenderer. The
 * CanvasWidget is used by passing it to a Canvas object, drawing the outline of the
 * object and then having CanvasWidget render the outline on the display using the
 * assigned painter.
 */
class CanvasWidget : public Widget
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	4a05      	ldr	r2, [pc, #20]	; (8007948 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4618      	mov	r0, r3
 800793a:	f7fe fd1b 	bl	8006374 <_ZN8touchgfx6WidgetD1Ev>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	0802b8f0 	.word	0x0802b8f0

0800794c <_ZN8touchgfx12CanvasWidgetD0Ev>:
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff ffe7 	bl	8007928 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800795a:	2130      	movs	r1, #48	; 0x30
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f01d f9da 	bl	8024d16 <_ZdlPvj>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	4a05      	ldr	r2, [pc, #20]	; (800798c <_ZN8touchgfx4LineD1Ev+0x20>)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	601a      	str	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4618      	mov	r0, r3
 800797e:	f7ff ffd3 	bl	8007928 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4618      	mov	r0, r3
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	0802bb14 	.word	0x0802bb14

08007990 <_ZN8touchgfx4LineD0Ev>:
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7ff ffe7 	bl	800796c <_ZN8touchgfx4LineD1Ev>
 800799e:	2174      	movs	r1, #116	; 0x74
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f01d f9b8 	bl	8024d16 <_ZdlPvj>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	4a05      	ldr	r2, [pc, #20]	; (80079d0 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe feaf 	bl	8006724 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	0802b86c 	.word	0x0802b86c

080079d4 <_ZN8touchgfx13PainterRGB888D0Ev>:
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff ffe7 	bl	80079b0 <_ZN8touchgfx13PainterRGB888D1Ev>
 80079e2:	2118      	movs	r1, #24
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f01d f996 	bl	8024d16 <_ZdlPvj>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <_ZN8touchgfx13BoxWithBorderD1Ev>:
/**
 * The BoxWithBorder class is used to create objects that can draw a box with a border on the
 * display. The width of the border can be specified. If the border width is 0 the
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	4a05      	ldr	r2, [pc, #20]	; (8007a14 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fe ff7f 	bl	8006908 <_ZN8touchgfx3BoxD1Ev>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	0802be6c 	.word	0x0802be6c

08007a18 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff ffe7 	bl	80079f4 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8007a26:	2134      	movs	r1, #52	; 0x34
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f01d f974 	bl	8024d16 <_ZdlPvj>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	4a05      	ldr	r2, [pc, #20]	; (8007a58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fe fd37 	bl	80064bc <_ZN8touchgfx8TextAreaD1Ev>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4618      	mov	r0, r3
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	0802bdc4 	.word	0x0802bdc4

08007a5c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff ffe7 	bl	8007a38 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007a6a:	2140      	movs	r1, #64	; 0x40
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f01d f952 	bl	8024d16 <_ZdlPvj>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <_GLOBAL__sub_I__ZN15Screen1ViewBaseC2Ev>:
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007a84:	2001      	movs	r0, #1
 8007a86:	f7ff fe21 	bl	80076cc <_Z41__static_initialization_and_destruction_0ii>
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp()
{
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	4801      	ldr	r0, [pc, #4]	; (8007a98 <__tcf_0+0xc>)
 8007a92:	f7fd fc51 	bl	8005338 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	200237d4 	.word	0x200237d4

08007a9c <_Z24getFont_swisop3_300_4bppv>:
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b08c      	sub	sp, #48	; 0x30
 8007aa0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 8007aa2:	4b20      	ldr	r3, [pc, #128]	; (8007b24 <_Z24getFont_swisop3_300_4bppv+0x88>)
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	f3bf 8f5b 	dmb	ish
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	bf0c      	ite	eq
 8007ab4:	2301      	moveq	r3, #1
 8007ab6:	2300      	movne	r3, #0
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d02d      	beq.n	8007b1a <_Z24getFont_swisop3_300_4bppv+0x7e>
 8007abe:	4819      	ldr	r0, [pc, #100]	; (8007b24 <_Z24getFont_swisop3_300_4bppv+0x88>)
 8007ac0:	f01d f92b 	bl	8024d1a <__cxa_guard_acquire>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	bf14      	ite	ne
 8007aca:	2301      	movne	r3, #1
 8007acc:	2300      	moveq	r3, #0
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d022      	beq.n	8007b1a <_Z24getFont_swisop3_300_4bppv+0x7e>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ad8:	2300      	movs	r3, #0
 8007ada:	9309      	str	r3, [sp, #36]	; 0x24
 8007adc:	2300      	movs	r3, #0
 8007ade:	9308      	str	r3, [sp, #32]
 8007ae0:	233f      	movs	r3, #63	; 0x3f
 8007ae2:	9307      	str	r3, [sp, #28]
 8007ae4:	4b10      	ldr	r3, [pc, #64]	; (8007b28 <_Z24getFont_swisop3_300_4bppv+0x8c>)
 8007ae6:	9306      	str	r3, [sp, #24]
 8007ae8:	4b10      	ldr	r3, [pc, #64]	; (8007b2c <_Z24getFont_swisop3_300_4bppv+0x90>)
 8007aea:	9305      	str	r3, [sp, #20]
 8007aec:	2300      	movs	r3, #0
 8007aee:	9304      	str	r3, [sp, #16]
 8007af0:	2300      	movs	r3, #0
 8007af2:	9303      	str	r3, [sp, #12]
 8007af4:	2301      	movs	r3, #1
 8007af6:	9302      	str	r3, [sp, #8]
 8007af8:	2304      	movs	r3, #4
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	233b      	movs	r3, #59	; 0x3b
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007b04:	223f      	movs	r2, #63	; 0x3f
 8007b06:	490a      	ldr	r1, [pc, #40]	; (8007b30 <_Z24getFont_swisop3_300_4bppv+0x94>)
 8007b08:	480a      	ldr	r0, [pc, #40]	; (8007b34 <_Z24getFont_swisop3_300_4bppv+0x98>)
 8007b0a:	f7fe f929 	bl	8005d60 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007b0e:	4805      	ldr	r0, [pc, #20]	; (8007b24 <_Z24getFont_swisop3_300_4bppv+0x88>)
 8007b10:	f01d f90f 	bl	8024d32 <__cxa_guard_release>
 8007b14:	4808      	ldr	r0, [pc, #32]	; (8007b38 <_Z24getFont_swisop3_300_4bppv+0x9c>)
 8007b16:	f01d f993 	bl	8024e40 <atexit>
    return swisop3_300_4bpp;
 8007b1a:	4b06      	ldr	r3, [pc, #24]	; (8007b34 <_Z24getFont_swisop3_300_4bppv+0x98>)
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	200237fc 	.word	0x200237fc
 8007b28:	080d3048 	.word	0x080d3048
 8007b2c:	0802a8c0 	.word	0x0802a8c0
 8007b30:	080d1ea0 	.word	0x080d1ea0
 8007b34:	200237d4 	.word	0x200237d4
 8007b38:	08007a8d 	.word	0x08007a8d

08007b3c <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_40_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_40_4bpp()
{
    static touchgfx::GeneratedFont swisop3_40_4bpp(glyphs_swisop3_40_4bpp, 66, 40, 8, 4, 1, 0, 0, unicodes_swisop3_40_4bpp, kerning_swisop3_40_4bpp, 63, 0, 0, 0);
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	4801      	ldr	r0, [pc, #4]	; (8007b48 <__tcf_0+0xc>)
 8007b42:	f7fd fbf9 	bl	8005338 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	20023800 	.word	0x20023800

08007b4c <_Z23getFont_swisop3_40_4bppv>:
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b08c      	sub	sp, #48	; 0x30
 8007b50:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_40_4bpp(glyphs_swisop3_40_4bpp, 66, 40, 8, 4, 1, 0, 0, unicodes_swisop3_40_4bpp, kerning_swisop3_40_4bpp, 63, 0, 0, 0);
 8007b52:	4b1f      	ldr	r3, [pc, #124]	; (8007bd0 <_Z23getFont_swisop3_40_4bppv+0x84>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	f3bf 8f5b 	dmb	ish
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bf0c      	ite	eq
 8007b64:	2301      	moveq	r3, #1
 8007b66:	2300      	movne	r3, #0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d02c      	beq.n	8007bc8 <_Z23getFont_swisop3_40_4bppv+0x7c>
 8007b6e:	4818      	ldr	r0, [pc, #96]	; (8007bd0 <_Z23getFont_swisop3_40_4bppv+0x84>)
 8007b70:	f01d f8d3 	bl	8024d1a <__cxa_guard_acquire>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bf14      	ite	ne
 8007b7a:	2301      	movne	r3, #1
 8007b7c:	2300      	moveq	r3, #0
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d021      	beq.n	8007bc8 <_Z23getFont_swisop3_40_4bppv+0x7c>
 8007b84:	2300      	movs	r3, #0
 8007b86:	930a      	str	r3, [sp, #40]	; 0x28
 8007b88:	2300      	movs	r3, #0
 8007b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9308      	str	r3, [sp, #32]
 8007b90:	233f      	movs	r3, #63	; 0x3f
 8007b92:	9307      	str	r3, [sp, #28]
 8007b94:	4b0f      	ldr	r3, [pc, #60]	; (8007bd4 <_Z23getFont_swisop3_40_4bppv+0x88>)
 8007b96:	9306      	str	r3, [sp, #24]
 8007b98:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <_Z23getFont_swisop3_40_4bppv+0x8c>)
 8007b9a:	9305      	str	r3, [sp, #20]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	9304      	str	r3, [sp, #16]
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	9303      	str	r3, [sp, #12]
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	9302      	str	r3, [sp, #8]
 8007ba8:	2304      	movs	r3, #4
 8007baa:	9301      	str	r3, [sp, #4]
 8007bac:	2308      	movs	r3, #8
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	2328      	movs	r3, #40	; 0x28
 8007bb2:	2242      	movs	r2, #66	; 0x42
 8007bb4:	4909      	ldr	r1, [pc, #36]	; (8007bdc <_Z23getFont_swisop3_40_4bppv+0x90>)
 8007bb6:	480a      	ldr	r0, [pc, #40]	; (8007be0 <_Z23getFont_swisop3_40_4bppv+0x94>)
 8007bb8:	f7fe f8d2 	bl	8005d60 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007bbc:	4804      	ldr	r0, [pc, #16]	; (8007bd0 <_Z23getFont_swisop3_40_4bppv+0x84>)
 8007bbe:	f01d f8b8 	bl	8024d32 <__cxa_guard_release>
 8007bc2:	4808      	ldr	r0, [pc, #32]	; (8007be4 <_Z23getFont_swisop3_40_4bppv+0x98>)
 8007bc4:	f01d f93c 	bl	8024e40 <atexit>
    return swisop3_40_4bpp;
 8007bc8:	4b05      	ldr	r3, [pc, #20]	; (8007be0 <_Z23getFont_swisop3_40_4bppv+0x94>)
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20023828 	.word	0x20023828
 8007bd4:	080d304c 	.word	0x080d304c
 8007bd8:	0802a8c4 	.word	0x0802a8c4
 8007bdc:	080d2214 	.word	0x080d2214
 8007be0:	20023800 	.word	0x20023800
 8007be4:	08007b3d 	.word	0x08007b3d

08007be8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp()
{
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 8007be8:	b580      	push	{r7, lr}
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	4801      	ldr	r0, [pc, #4]	; (8007bf4 <__tcf_0+0xc>)
 8007bee:	f7fd fba3 	bl	8005338 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	2002382c 	.word	0x2002382c

08007bf8 <_Z23getFont_swisop3_50_4bppv>:
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08c      	sub	sp, #48	; 0x30
 8007bfc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 8007bfe:	4b1f      	ldr	r3, [pc, #124]	; (8007c7c <_Z23getFont_swisop3_50_4bppv+0x84>)
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	f3bf 8f5b 	dmb	ish
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	bf0c      	ite	eq
 8007c10:	2301      	moveq	r3, #1
 8007c12:	2300      	movne	r3, #0
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d02c      	beq.n	8007c74 <_Z23getFont_swisop3_50_4bppv+0x7c>
 8007c1a:	4818      	ldr	r0, [pc, #96]	; (8007c7c <_Z23getFont_swisop3_50_4bppv+0x84>)
 8007c1c:	f01d f87d 	bl	8024d1a <__cxa_guard_acquire>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bf14      	ite	ne
 8007c26:	2301      	movne	r3, #1
 8007c28:	2300      	moveq	r3, #0
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d021      	beq.n	8007c74 <_Z23getFont_swisop3_50_4bppv+0x7c>
 8007c30:	2300      	movs	r3, #0
 8007c32:	930a      	str	r3, [sp, #40]	; 0x28
 8007c34:	2300      	movs	r3, #0
 8007c36:	9309      	str	r3, [sp, #36]	; 0x24
 8007c38:	2300      	movs	r3, #0
 8007c3a:	9308      	str	r3, [sp, #32]
 8007c3c:	233f      	movs	r3, #63	; 0x3f
 8007c3e:	9307      	str	r3, [sp, #28]
 8007c40:	4b0f      	ldr	r3, [pc, #60]	; (8007c80 <_Z23getFont_swisop3_50_4bppv+0x88>)
 8007c42:	9306      	str	r3, [sp, #24]
 8007c44:	4b0f      	ldr	r3, [pc, #60]	; (8007c84 <_Z23getFont_swisop3_50_4bppv+0x8c>)
 8007c46:	9305      	str	r3, [sp, #20]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	9304      	str	r3, [sp, #16]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	9303      	str	r3, [sp, #12]
 8007c50:	2301      	movs	r3, #1
 8007c52:	9302      	str	r3, [sp, #8]
 8007c54:	2304      	movs	r3, #4
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	230a      	movs	r3, #10
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	2332      	movs	r3, #50	; 0x32
 8007c5e:	2241      	movs	r2, #65	; 0x41
 8007c60:	4909      	ldr	r1, [pc, #36]	; (8007c88 <_Z23getFont_swisop3_50_4bppv+0x90>)
 8007c62:	480a      	ldr	r0, [pc, #40]	; (8007c8c <_Z23getFont_swisop3_50_4bppv+0x94>)
 8007c64:	f7fe f87c 	bl	8005d60 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007c68:	4804      	ldr	r0, [pc, #16]	; (8007c7c <_Z23getFont_swisop3_50_4bppv+0x84>)
 8007c6a:	f01d f862 	bl	8024d32 <__cxa_guard_release>
 8007c6e:	4808      	ldr	r0, [pc, #32]	; (8007c90 <_Z23getFont_swisop3_50_4bppv+0x98>)
 8007c70:	f01d f8e6 	bl	8024e40 <atexit>
    return swisop3_50_4bpp;
 8007c74:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <_Z23getFont_swisop3_50_4bppv+0x94>)
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20023854 	.word	0x20023854
 8007c80:	080d3050 	.word	0x080d3050
 8007c84:	0802a8c8 	.word	0x0802a8c8
 8007c88:	080d25b0 	.word	0x080d25b0
 8007c8c:	2002382c 	.word	0x2002382c
 8007c90:	08007be9 	.word	0x08007be9

08007c94 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_60_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_60_4bpp()
{
    static touchgfx::GeneratedFont swisop3_60_4bpp(glyphs_swisop3_60_4bpp, 63, 60, 12, 4, 1, 0, 0, unicodes_swisop3_60_4bpp, kerning_swisop3_60_4bpp, 63, 0, 0, 0);
 8007c94:	b580      	push	{r7, lr}
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	4801      	ldr	r0, [pc, #4]	; (8007ca0 <__tcf_0+0xc>)
 8007c9a:	f7fd fb4d 	bl	8005338 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20023858 	.word	0x20023858

08007ca4 <_Z23getFont_swisop3_60_4bppv>:
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08c      	sub	sp, #48	; 0x30
 8007ca8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_60_4bpp(glyphs_swisop3_60_4bpp, 63, 60, 12, 4, 1, 0, 0, unicodes_swisop3_60_4bpp, kerning_swisop3_60_4bpp, 63, 0, 0, 0);
 8007caa:	4b1f      	ldr	r3, [pc, #124]	; (8007d28 <_Z23getFont_swisop3_60_4bppv+0x84>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	f3bf 8f5b 	dmb	ish
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	bf0c      	ite	eq
 8007cbc:	2301      	moveq	r3, #1
 8007cbe:	2300      	movne	r3, #0
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d02c      	beq.n	8007d20 <_Z23getFont_swisop3_60_4bppv+0x7c>
 8007cc6:	4818      	ldr	r0, [pc, #96]	; (8007d28 <_Z23getFont_swisop3_60_4bppv+0x84>)
 8007cc8:	f01d f827 	bl	8024d1a <__cxa_guard_acquire>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	bf14      	ite	ne
 8007cd2:	2301      	movne	r3, #1
 8007cd4:	2300      	moveq	r3, #0
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d021      	beq.n	8007d20 <_Z23getFont_swisop3_60_4bppv+0x7c>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	930a      	str	r3, [sp, #40]	; 0x28
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9308      	str	r3, [sp, #32]
 8007ce8:	233f      	movs	r3, #63	; 0x3f
 8007cea:	9307      	str	r3, [sp, #28]
 8007cec:	4b0f      	ldr	r3, [pc, #60]	; (8007d2c <_Z23getFont_swisop3_60_4bppv+0x88>)
 8007cee:	9306      	str	r3, [sp, #24]
 8007cf0:	4b0f      	ldr	r3, [pc, #60]	; (8007d30 <_Z23getFont_swisop3_60_4bppv+0x8c>)
 8007cf2:	9305      	str	r3, [sp, #20]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9304      	str	r3, [sp, #16]
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9303      	str	r3, [sp, #12]
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	9302      	str	r3, [sp, #8]
 8007d00:	2304      	movs	r3, #4
 8007d02:	9301      	str	r3, [sp, #4]
 8007d04:	230c      	movs	r3, #12
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	233c      	movs	r3, #60	; 0x3c
 8007d0a:	223f      	movs	r2, #63	; 0x3f
 8007d0c:	4909      	ldr	r1, [pc, #36]	; (8007d34 <_Z23getFont_swisop3_60_4bppv+0x90>)
 8007d0e:	480a      	ldr	r0, [pc, #40]	; (8007d38 <_Z23getFont_swisop3_60_4bppv+0x94>)
 8007d10:	f7fe f826 	bl	8005d60 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007d14:	4804      	ldr	r0, [pc, #16]	; (8007d28 <_Z23getFont_swisop3_60_4bppv+0x84>)
 8007d16:	f01d f80c 	bl	8024d32 <__cxa_guard_release>
 8007d1a:	4808      	ldr	r0, [pc, #32]	; (8007d3c <_Z23getFont_swisop3_60_4bppv+0x98>)
 8007d1c:	f01d f890 	bl	8024e40 <atexit>
    return swisop3_60_4bpp;
 8007d20:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <_Z23getFont_swisop3_60_4bppv+0x94>)
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20023880 	.word	0x20023880
 8007d2c:	080d3054 	.word	0x080d3054
 8007d30:	0802a8cc 	.word	0x0802a8cc
 8007d34:	080d2940 	.word	0x080d2940
 8007d38:	20023858 	.word	0x20023858
 8007d3c:	08007c95 	.word	0x08007c95

08007d40 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	4801      	ldr	r0, [pc, #4]	; (8007d4c <__tcf_0+0xc>)
 8007d46:	f7fd faf7 	bl	8005338 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	20023884 	.word	0x20023884

08007d50 <_Z23getFont_verdana_10_4bppv>:
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08c      	sub	sp, #48	; 0x30
 8007d54:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007d56:	4b1f      	ldr	r3, [pc, #124]	; (8007dd4 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	f3bf 8f5b 	dmb	ish
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	bf0c      	ite	eq
 8007d68:	2301      	moveq	r3, #1
 8007d6a:	2300      	movne	r3, #0
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d02c      	beq.n	8007dcc <_Z23getFont_verdana_10_4bppv+0x7c>
 8007d72:	4818      	ldr	r0, [pc, #96]	; (8007dd4 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007d74:	f01c ffd1 	bl	8024d1a <__cxa_guard_acquire>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	bf14      	ite	ne
 8007d7e:	2301      	movne	r3, #1
 8007d80:	2300      	moveq	r3, #0
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d021      	beq.n	8007dcc <_Z23getFont_verdana_10_4bppv+0x7c>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d90:	2300      	movs	r3, #0
 8007d92:	9308      	str	r3, [sp, #32]
 8007d94:	233f      	movs	r3, #63	; 0x3f
 8007d96:	9307      	str	r3, [sp, #28]
 8007d98:	4b0f      	ldr	r3, [pc, #60]	; (8007dd8 <_Z23getFont_verdana_10_4bppv+0x88>)
 8007d9a:	9306      	str	r3, [sp, #24]
 8007d9c:	4b0f      	ldr	r3, [pc, #60]	; (8007ddc <_Z23getFont_verdana_10_4bppv+0x8c>)
 8007d9e:	9305      	str	r3, [sp, #20]
 8007da0:	2300      	movs	r3, #0
 8007da2:	9304      	str	r3, [sp, #16]
 8007da4:	2300      	movs	r3, #0
 8007da6:	9303      	str	r3, [sp, #12]
 8007da8:	2301      	movs	r3, #1
 8007daa:	9302      	str	r3, [sp, #8]
 8007dac:	2304      	movs	r3, #4
 8007dae:	9301      	str	r3, [sp, #4]
 8007db0:	2300      	movs	r3, #0
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	230a      	movs	r3, #10
 8007db6:	2201      	movs	r2, #1
 8007db8:	4909      	ldr	r1, [pc, #36]	; (8007de0 <_Z23getFont_verdana_10_4bppv+0x90>)
 8007dba:	480a      	ldr	r0, [pc, #40]	; (8007de4 <_Z23getFont_verdana_10_4bppv+0x94>)
 8007dbc:	f7fd ffd0 	bl	8005d60 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007dc0:	4804      	ldr	r0, [pc, #16]	; (8007dd4 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007dc2:	f01c ffb6 	bl	8024d32 <__cxa_guard_release>
 8007dc6:	4808      	ldr	r0, [pc, #32]	; (8007de8 <_Z23getFont_verdana_10_4bppv+0x98>)
 8007dc8:	f01d f83a 	bl	8024e40 <atexit>
    return verdana_10_4bpp;
 8007dcc:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	200238ac 	.word	0x200238ac
 8007dd8:	080d3058 	.word	0x080d3058
 8007ddc:	0802a8d0 	.word	0x0802a8d0
 8007de0:	080d2cb4 	.word	0x080d2cb4
 8007de4:	20023884 	.word	0x20023884
 8007de8:	08007d41 	.word	0x08007d41

08007dec <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	4801      	ldr	r0, [pc, #4]	; (8007df8 <__tcf_0+0xc>)
 8007df2:	f7fd faa1 	bl	8005338 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	200238b0 	.word	0x200238b0

08007dfc <_Z23getFont_verdana_20_4bppv>:
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08c      	sub	sp, #48	; 0x30
 8007e00:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007e02:	4b1f      	ldr	r3, [pc, #124]	; (8007e80 <_Z23getFont_verdana_20_4bppv+0x84>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	f3bf 8f5b 	dmb	ish
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	bf0c      	ite	eq
 8007e14:	2301      	moveq	r3, #1
 8007e16:	2300      	movne	r3, #0
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d02c      	beq.n	8007e78 <_Z23getFont_verdana_20_4bppv+0x7c>
 8007e1e:	4818      	ldr	r0, [pc, #96]	; (8007e80 <_Z23getFont_verdana_20_4bppv+0x84>)
 8007e20:	f01c ff7b 	bl	8024d1a <__cxa_guard_acquire>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	bf14      	ite	ne
 8007e2a:	2301      	movne	r3, #1
 8007e2c:	2300      	moveq	r3, #0
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d021      	beq.n	8007e78 <_Z23getFont_verdana_20_4bppv+0x7c>
 8007e34:	2300      	movs	r3, #0
 8007e36:	930a      	str	r3, [sp, #40]	; 0x28
 8007e38:	2300      	movs	r3, #0
 8007e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9308      	str	r3, [sp, #32]
 8007e40:	233f      	movs	r3, #63	; 0x3f
 8007e42:	9307      	str	r3, [sp, #28]
 8007e44:	4b0f      	ldr	r3, [pc, #60]	; (8007e84 <_Z23getFont_verdana_20_4bppv+0x88>)
 8007e46:	9306      	str	r3, [sp, #24]
 8007e48:	4b0f      	ldr	r3, [pc, #60]	; (8007e88 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8007e4a:	9305      	str	r3, [sp, #20]
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	9304      	str	r3, [sp, #16]
 8007e50:	2301      	movs	r3, #1
 8007e52:	9303      	str	r3, [sp, #12]
 8007e54:	2301      	movs	r3, #1
 8007e56:	9302      	str	r3, [sp, #8]
 8007e58:	2304      	movs	r3, #4
 8007e5a:	9301      	str	r3, [sp, #4]
 8007e5c:	2304      	movs	r3, #4
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	2314      	movs	r3, #20
 8007e62:	223f      	movs	r2, #63	; 0x3f
 8007e64:	4909      	ldr	r1, [pc, #36]	; (8007e8c <_Z23getFont_verdana_20_4bppv+0x90>)
 8007e66:	480a      	ldr	r0, [pc, #40]	; (8007e90 <_Z23getFont_verdana_20_4bppv+0x94>)
 8007e68:	f7fd ff7a 	bl	8005d60 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007e6c:	4804      	ldr	r0, [pc, #16]	; (8007e80 <_Z23getFont_verdana_20_4bppv+0x84>)
 8007e6e:	f01c ff60 	bl	8024d32 <__cxa_guard_release>
 8007e72:	4808      	ldr	r0, [pc, #32]	; (8007e94 <_Z23getFont_verdana_20_4bppv+0x98>)
 8007e74:	f01c ffe4 	bl	8024e40 <atexit>
    return verdana_20_4bpp;
 8007e78:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	200238d8 	.word	0x200238d8
 8007e84:	080d305c 	.word	0x080d305c
 8007e88:	0802a8d4 	.word	0x0802a8d4
 8007e8c:	080d2cc4 	.word	0x080d2cc4
 8007e90:	200238b0 	.word	0x200238b0
 8007e94:	08007ded 	.word	0x08007ded

08007e98 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	4801      	ldr	r0, [pc, #4]	; (8007ea4 <__tcf_0+0xc>)
 8007e9e:	f7fd fa4b 	bl	8005338 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	200238dc 	.word	0x200238dc

08007ea8 <_Z23getFont_verdana_40_4bppv>:
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08c      	sub	sp, #48	; 0x30
 8007eac:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8007eae:	4b1f      	ldr	r3, [pc, #124]	; (8007f2c <_Z23getFont_verdana_40_4bppv+0x84>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	f3bf 8f5b 	dmb	ish
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	bf0c      	ite	eq
 8007ec0:	2301      	moveq	r3, #1
 8007ec2:	2300      	movne	r3, #0
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d02c      	beq.n	8007f24 <_Z23getFont_verdana_40_4bppv+0x7c>
 8007eca:	4818      	ldr	r0, [pc, #96]	; (8007f2c <_Z23getFont_verdana_40_4bppv+0x84>)
 8007ecc:	f01c ff25 	bl	8024d1a <__cxa_guard_acquire>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	bf14      	ite	ne
 8007ed6:	2301      	movne	r3, #1
 8007ed8:	2300      	moveq	r3, #0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d021      	beq.n	8007f24 <_Z23getFont_verdana_40_4bppv+0x7c>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ee8:	2300      	movs	r3, #0
 8007eea:	9308      	str	r3, [sp, #32]
 8007eec:	233f      	movs	r3, #63	; 0x3f
 8007eee:	9307      	str	r3, [sp, #28]
 8007ef0:	4b0f      	ldr	r3, [pc, #60]	; (8007f30 <_Z23getFont_verdana_40_4bppv+0x88>)
 8007ef2:	9306      	str	r3, [sp, #24]
 8007ef4:	4b0f      	ldr	r3, [pc, #60]	; (8007f34 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8007ef6:	9305      	str	r3, [sp, #20]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	9304      	str	r3, [sp, #16]
 8007efc:	2300      	movs	r3, #0
 8007efe:	9303      	str	r3, [sp, #12]
 8007f00:	2301      	movs	r3, #1
 8007f02:	9302      	str	r3, [sp, #8]
 8007f04:	2304      	movs	r3, #4
 8007f06:	9301      	str	r3, [sp, #4]
 8007f08:	2300      	movs	r3, #0
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	2328      	movs	r3, #40	; 0x28
 8007f0e:	2201      	movs	r2, #1
 8007f10:	4909      	ldr	r1, [pc, #36]	; (8007f38 <_Z23getFont_verdana_40_4bppv+0x90>)
 8007f12:	480a      	ldr	r0, [pc, #40]	; (8007f3c <_Z23getFont_verdana_40_4bppv+0x94>)
 8007f14:	f7fd ff24 	bl	8005d60 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007f18:	4804      	ldr	r0, [pc, #16]	; (8007f2c <_Z23getFont_verdana_40_4bppv+0x84>)
 8007f1a:	f01c ff0a 	bl	8024d32 <__cxa_guard_release>
 8007f1e:	4808      	ldr	r0, [pc, #32]	; (8007f40 <_Z23getFont_verdana_40_4bppv+0x98>)
 8007f20:	f01c ff8e 	bl	8024e40 <atexit>
    return verdana_40_4bpp;
 8007f24:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20023904 	.word	0x20023904
 8007f30:	080d313c 	.word	0x080d313c
 8007f34:	0802a8d8 	.word	0x0802a8d8
 8007f38:	080d3038 	.word	0x080d3038
 8007f3c:	200238dc 	.word	0x200238dc
 8007f40:	08007e99 	.word	0x08007e99

08007f44 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	607a      	str	r2, [r7, #4]
 8007f50:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8007f52:	2300      	movs	r3, #0
    }
 8007f54:	4618      	mov	r0, r3
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8007f68:	2300      	movs	r3, #0
    }
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8007f76:	b480      	push	{r7}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8007f7e:	2300      	movs	r3, #0
    }
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	4613      	mov	r3, r2
 8007f98:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8007f9a:	4a07      	ldr	r2, [pc, #28]	; (8007fb8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8007fa0:	4a06      	ldr	r2, [pc, #24]	; (8007fbc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8007fa6:	4a06      	ldr	r2, [pc, #24]	; (8007fc0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8007fa8:	88fb      	ldrh	r3, [r7, #6]
 8007faa:	8013      	strh	r3, [r2, #0]
    }
 8007fac:	bf00      	nop
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	20056750 	.word	0x20056750
 8007fbc:	20056758 	.word	0x20056758
 8007fc0:	20056754 	.word	0x20056754

08007fc4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8007fc4:	b40e      	push	{r1, r2, r3}
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8007fce:	f107 0320 	add.w	r3, r7, #32
 8007fd2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	69fa      	ldr	r2, [r7, #28]
 8007fd8:	2100      	movs	r1, #0
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f010 fd20 	bl	8018a20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8007fe4:	89fb      	ldrh	r3, [r7, #14]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ff0:	b003      	add	sp, #12
 8007ff2:	4770      	bx	lr

08007ff4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8007ff4:	b40c      	push	{r2, r3}
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	460b      	mov	r3, r1
 8008000:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8008002:	f107 031c 	add.w	r3, r7, #28
 8008006:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8008008:	78f9      	ldrb	r1, [r7, #3]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	69ba      	ldr	r2, [r7, #24]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f010 fd06 	bl	8018a20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008014:	4603      	mov	r3, r0
 8008016:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008018:	89fb      	ldrh	r3, [r7, #14]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008024:	b002      	add	sp, #8
 8008026:	4770      	bx	lr

08008028 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08a      	sub	sp, #40	; 0x28
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008038:	2b00      	cmp	r3, #0
 800803a:	d016      	beq.n	800806a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	331a      	adds	r3, #26
 8008040:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	8adb      	ldrh	r3, [r3, #22]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d105      	bne.n	8008056 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800804a:	4b43      	ldr	r3, [pc, #268]	; (8008158 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800804c:	4a43      	ldr	r2, [pc, #268]	; (800815c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800804e:	21bf      	movs	r1, #191	; 0xbf
 8008050:	4843      	ldr	r0, [pc, #268]	; (8008160 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008052:	f01c fed7 	bl	8024e04 <__assert_func>
            return buffer[pos];
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	8a9b      	ldrh	r3, [r3, #20]
 800805a:	461a      	mov	r2, r3
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008066:	2301      	movs	r3, #1
 8008068:	e000      	b.n	800806c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800806a:	2300      	movs	r3, #0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d06a      	beq.n	8008146 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f012 f8c1 	bl	801a1f8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	331a      	adds	r3, #26
 800807a:	623b      	str	r3, [r7, #32]
 800807c:	2301      	movs	r3, #1
 800807e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	8adb      	ldrh	r3, [r3, #22]
 8008084:	8bfa      	ldrh	r2, [r7, #30]
 8008086:	429a      	cmp	r2, r3
 8008088:	d305      	bcc.n	8008096 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800808a:	4b36      	ldr	r3, [pc, #216]	; (8008164 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800808c:	4a36      	ldr	r2, [pc, #216]	; (8008168 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800808e:	21c4      	movs	r1, #196	; 0xc4
 8008090:	4833      	ldr	r0, [pc, #204]	; (8008160 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008092:	f01c feb7 	bl	8024e04 <__assert_func>
            const uint16_t index = pos + offset;
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	8a9a      	ldrh	r2, [r3, #20]
 800809a:	8bfb      	ldrh	r3, [r7, #30]
 800809c:	4413      	add	r3, r2
 800809e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80080a0:	8bbb      	ldrh	r3, [r7, #28]
 80080a2:	2b09      	cmp	r3, #9
 80080a4:	d801      	bhi.n	80080aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80080a6:	8bbb      	ldrh	r3, [r7, #28]
 80080a8:	e001      	b.n	80080ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80080aa:	8bbb      	ldrh	r3, [r7, #28]
 80080ac:	3b0a      	subs	r3, #10
 80080ae:	6a3a      	ldr	r2, [r7, #32]
 80080b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080b4:	f640 123f 	movw	r2, #2367	; 0x93f
 80080b8:	4293      	cmp	r3, r2
 80080ba:	bf0c      	ite	eq
 80080bc:	2301      	moveq	r3, #1
 80080be:	2300      	movne	r3, #0
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d03f      	beq.n	8008146 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	331a      	adds	r3, #26
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	321a      	adds	r2, #26
 80080ce:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	8ad2      	ldrh	r2, [r2, #22]
 80080d4:	2a00      	cmp	r2, #0
 80080d6:	d105      	bne.n	80080e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80080d8:	4b1f      	ldr	r3, [pc, #124]	; (8008158 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80080da:	4a20      	ldr	r2, [pc, #128]	; (800815c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80080dc:	21bf      	movs	r1, #191	; 0xbf
 80080de:	4820      	ldr	r0, [pc, #128]	; (8008160 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80080e0:	f01c fe90 	bl	8024e04 <__assert_func>
            return buffer[pos];
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	8a92      	ldrh	r2, [r2, #20]
 80080e8:	4611      	mov	r1, r2
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80080f0:	613b      	str	r3, [r7, #16]
 80080f2:	4613      	mov	r3, r2
 80080f4:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	8adb      	ldrh	r3, [r3, #22]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d806      	bhi.n	800810c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80080fe:	4b1b      	ldr	r3, [pc, #108]	; (800816c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8008100:	4a1b      	ldr	r2, [pc, #108]	; (8008170 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8008102:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8008106:	4816      	ldr	r0, [pc, #88]	; (8008160 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008108:	f01c fe7c 	bl	8024e04 <__assert_func>
            const uint16_t index = pos + 1;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	8a9b      	ldrh	r3, [r3, #20]
 8008110:	3301      	adds	r3, #1
 8008112:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8008114:	89bb      	ldrh	r3, [r7, #12]
 8008116:	2b09      	cmp	r3, #9
 8008118:	d801      	bhi.n	800811e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800811a:	89bb      	ldrh	r3, [r7, #12]
 800811c:	e000      	b.n	8008120 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800811e:	2300      	movs	r3, #0
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	89f9      	ldrh	r1, [r7, #14]
 8008124:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8008128:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	331a      	adds	r3, #26
 800812e:	61bb      	str	r3, [r7, #24]
 8008130:	f640 133f 	movw	r3, #2367	; 0x93f
 8008134:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	8a9b      	ldrh	r3, [r3, #20]
 800813a:	4619      	mov	r1, r3
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	8afa      	ldrh	r2, [r7, #22]
 8008140:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8008144:	bf00      	nop
        }
    }
    return getNextChar();
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f011 ff3a 	bl	8019fc0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800814c:	4603      	mov	r3, r0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3728      	adds	r7, #40	; 0x28
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	08029f18 	.word	0x08029f18
 800815c:	08029f24 	.word	0x08029f24
 8008160:	08029fd0 	.word	0x08029fd0
 8008164:	0802a01c 	.word	0x0802a01c
 8008168:	0802a02c 	.word	0x0802a02c
 800816c:	0802a100 	.word	0x0802a100
 8008170:	0802a10c 	.word	0x0802a10c

08008174 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f011 fed9 	bl	8019f34 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8008182:	bf00      	nop
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b088      	sub	sp, #32
 800818e:	af02      	add	r7, sp, #8
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	1d38      	adds	r0, r7, #4
 8008194:	e880 0006 	stmia.w	r0, {r1, r2}
 8008198:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800819a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800819e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80081a0:	1d39      	adds	r1, r7, #4
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f00f f992 	bl	80174d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80081b4:	bf00      	nop
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80081bc:	b590      	push	{r4, r7, lr}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80081ca:	88fb      	ldrh	r3, [r7, #6]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d127      	bne.n	8008220 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80081d0:	88fb      	ldrh	r3, [r7, #6]
 80081d2:	4a1e      	ldr	r2, [pc, #120]	; (800824c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80081d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d016      	beq.n	800820a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80081dc:	88fb      	ldrh	r3, [r7, #6]
 80081de:	4a1b      	ldr	r2, [pc, #108]	; (800824c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80081e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081e4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	4413      	add	r3, r2
 80081ee:	4a18      	ldr	r2, [pc, #96]	; (8008250 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80081f0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	4413      	add	r3, r2
 80081fa:	4a16      	ldr	r2, [pc, #88]	; (8008254 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80081fc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	4413      	add	r3, r2
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	e00a      	b.n	8008220 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800820a:	4b11      	ldr	r3, [pc, #68]	; (8008250 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800820c:	4a12      	ldr	r2, [pc, #72]	; (8008258 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800820e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8008210:	4a12      	ldr	r2, [pc, #72]	; (800825c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8008212:	4b10      	ldr	r3, [pc, #64]	; (8008254 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008214:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8008216:	88fb      	ldrh	r3, [r7, #6]
 8008218:	4a11      	ldr	r2, [pc, #68]	; (8008260 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800821a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800821e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00d      	beq.n	8008242 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8008226:	4a0f      	ldr	r2, [pc, #60]	; (8008264 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8008228:	88fb      	ldrh	r3, [r7, #6]
 800822a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800822c:	f000 f83e 	bl	80082ac <_ZN17TypedTextDatabase8getFontsEv>
 8008230:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8008232:	f000 f833 	bl	800829c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8008236:	4603      	mov	r3, r0
 8008238:	461a      	mov	r2, r3
 800823a:	4621      	mov	r1, r4
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7ff fea5 	bl	8007f8c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8008242:	bf00      	nop
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	bd90      	pop	{r4, r7, pc}
 800824a:	bf00      	nop
 800824c:	20023908 	.word	0x20023908
 8008250:	20023910 	.word	0x20023910
 8008254:	20023914 	.word	0x20023914
 8008258:	080d3174 	.word	0x080d3174
 800825c:	080d3140 	.word	0x080d3140
 8008260:	080d3208 	.word	0x080d3208
 8008264:	2002390c 	.word	0x2002390c

08008268 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8008274:	4b07      	ldr	r3, [pc, #28]	; (8008294 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	4b07      	ldr	r3, [pc, #28]	; (8008298 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800827a:	6819      	ldr	r1, [r3, #0]
 800827c:	887b      	ldrh	r3, [r7, #2]
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	440b      	add	r3, r1
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	4413      	add	r3, r2
}
 8008288:	4618      	mov	r0, r3
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	20023910 	.word	0x20023910
 8008298:	20023914 	.word	0x20023914

0800829c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80082a0:	230d      	movs	r3, #13
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80082b0:	4b02      	ldr	r3, [pc, #8]	; (80082bc <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	20023918 	.word	0x20023918

080082c0 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        touchgfx_fonts[6] = &(getFont_swisop3_50_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d127      	bne.n	8008320 <_Z41__static_initialization_and_destruction_0ii+0x60>
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d122      	bne.n	8008320 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_verdana_20_4bpp()),
 80082da:	f7ff fd8f 	bl	8007dfc <_Z23getFont_verdana_20_4bppv>
 80082de:	4603      	mov	r3, r0
};
 80082e0:	4a11      	ldr	r2, [pc, #68]	; (8008328 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80082e2:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80082e4:	f7ff fde0 	bl	8007ea8 <_Z23getFont_verdana_40_4bppv>
 80082e8:	4603      	mov	r3, r0
};
 80082ea:	4a0f      	ldr	r2, [pc, #60]	; (8008328 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80082ec:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 80082ee:	f7ff fd2f 	bl	8007d50 <_Z23getFont_verdana_10_4bppv>
 80082f2:	4603      	mov	r3, r0
};
 80082f4:	4a0c      	ldr	r2, [pc, #48]	; (8008328 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80082f6:	6093      	str	r3, [r2, #8]
    &(getFont_swisop3_300_4bpp()),
 80082f8:	f7ff fbd0 	bl	8007a9c <_Z24getFont_swisop3_300_4bppv>
 80082fc:	4603      	mov	r3, r0
};
 80082fe:	4a0a      	ldr	r2, [pc, #40]	; (8008328 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008300:	60d3      	str	r3, [r2, #12]
    &(getFont_swisop3_40_4bpp()),
 8008302:	f7ff fc23 	bl	8007b4c <_Z23getFont_swisop3_40_4bppv>
 8008306:	4603      	mov	r3, r0
};
 8008308:	4a07      	ldr	r2, [pc, #28]	; (8008328 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800830a:	6113      	str	r3, [r2, #16]
    &(getFont_swisop3_60_4bpp()),
 800830c:	f7ff fcca 	bl	8007ca4 <_Z23getFont_swisop3_60_4bppv>
 8008310:	4603      	mov	r3, r0
};
 8008312:	4a05      	ldr	r2, [pc, #20]	; (8008328 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008314:	6153      	str	r3, [r2, #20]
    &(getFont_swisop3_50_4bpp())
 8008316:	f7ff fc6f 	bl	8007bf8 <_Z23getFont_swisop3_50_4bppv>
 800831a:	4603      	mov	r3, r0
};
 800831c:	4a02      	ldr	r2, [pc, #8]	; (8008328 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800831e:	6193      	str	r3, [r2, #24]
} // namespace TypedTextDatabase
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	20023918 	.word	0x20023918

0800832c <_GLOBAL__sub_I_touchgfx_fonts>:
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
 8008330:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008334:	2001      	movs	r0, #1
 8008336:	f7ff ffc3 	bl	80082c0 <_Z41__static_initialization_and_destruction_0ii>
 800833a:	bd80      	pop	{r7, pc}

0800833c <_ZN8touchgfx13BoxWithBorderC1Ev>:
{
public:
    BoxWithBorder()
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe f836 	bl	80063b8 <_ZN8touchgfx3BoxC1Ev>
 800834c:	4a08      	ldr	r2, [pc, #32]	; (8008370 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	332c      	adds	r3, #44	; 0x2c
 8008356:	2100      	movs	r1, #0
 8008358:	4618      	mov	r0, r3
 800835a:	f7fb faa7 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4618      	mov	r0, r3
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	0802be6c 	.word	0x0802be6c

08008374 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	887a      	ldrh	r2, [r7, #2]
 80083a0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 80083a2:	bf00      	nop
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
	...

080083b0 <_ZN12alertBarBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/alertBarBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

alertBarBase::alertBarBase()
 80083b0:	b590      	push	{r4, r7, lr}
 80083b2:	b091      	sub	sp, #68	; 0x44
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fd fe4e 	bl	800605c <_ZN8touchgfx9ContainerC1Ev>
 80083c0:	4a69      	ldr	r2, [pc, #420]	; (8008568 <_ZN12alertBarBaseC1Ev+0x1b8>)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	601a      	str	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	332c      	adds	r3, #44	; 0x2c
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7ff ffb6 	bl	800833c <_ZN8touchgfx13BoxWithBorderC1Ev>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	3360      	adds	r3, #96	; 0x60
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7fe f899 	bl	800650c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(800);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f44f 7148 	mov.w	r1, #800	; 0x320
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fd fdc5 	bl	8005f70 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	213c      	movs	r1, #60	; 0x3c
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fd fdcf 	bl	8005f8e <_ZN8touchgfx8Drawable9setHeightEs>
    bgBox.setPosition(0, 0, 800, 60);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80083f6:	233c      	movs	r3, #60	; 0x3c
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80083fe:	2200      	movs	r2, #0
 8008400:	2100      	movs	r1, #0
 8008402:	f7fd fe7a 	bl	80060fa <_ZN8touchgfx8Drawable11setPositionEssss>
    bgBox.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800840c:	23ff      	movs	r3, #255	; 0xff
 800840e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008412:	2300      	movs	r3, #0
 8008414:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8008418:	2300      	movs	r3, #0
 800841a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800841e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008422:	041b      	lsls	r3, r3, #16
 8008424:	461a      	mov	r2, r3
 8008426:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800842a:	021b      	lsls	r3, r3, #8
 800842c:	431a      	orrs	r2, r3
 800842e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008432:	4313      	orrs	r3, r2
 8008434:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008438:	f107 031c 	add.w	r3, r7, #28
 800843c:	4611      	mov	r1, r2
 800843e:	4618      	mov	r0, r3
 8008440:	f7fb fa34 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	4619      	mov	r1, r3
 8008448:	4620      	mov	r0, r4
 800844a:	f7fd ffd9 	bl	8006400 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    bgBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008454:	2300      	movs	r3, #0
 8008456:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800845a:	2300      	movs	r3, #0
 800845c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008460:	2300      	movs	r3, #0
 8008462:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008466:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800846a:	041b      	lsls	r3, r3, #16
 800846c:	461a      	mov	r2, r3
 800846e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008472:	021b      	lsls	r3, r3, #8
 8008474:	431a      	orrs	r2, r3
 8008476:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800847a:	4313      	orrs	r3, r2
 800847c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008480:	f107 0318 	add.w	r3, r7, #24
 8008484:	4611      	mov	r1, r2
 8008486:	4618      	mov	r0, r3
 8008488:	f7fb fa10 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	4619      	mov	r1, r3
 8008490:	4620      	mov	r0, r4
 8008492:	f7ff ff6f 	bl	8008374 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    bgBox.setBorderSize(5);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	332c      	adds	r3, #44	; 0x2c
 800849a:	2105      	movs	r1, #5
 800849c:	4618      	mov	r0, r3
 800849e:	f7ff ff77 	bl	8008390 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>

    frontText.setPosition(263, 0, 302, 60);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f103 0060 	add.w	r0, r3, #96	; 0x60
 80084a8:	233c      	movs	r3, #60	; 0x3c
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	f44f 7397 	mov.w	r3, #302	; 0x12e
 80084b0:	2200      	movs	r2, #0
 80084b2:	f240 1107 	movw	r1, #263	; 0x107
 80084b6:	f7fd fe20 	bl	80060fa <_ZN8touchgfx8Drawable11setPositionEssss>
    frontText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80084c0:	23ff      	movs	r3, #255	; 0xff
 80084c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c6:	23ff      	movs	r3, #255	; 0xff
 80084c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084cc:	23ff      	movs	r3, #255	; 0xff
 80084ce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80084d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084d6:	041b      	lsls	r3, r3, #16
 80084d8:	461a      	mov	r2, r3
 80084da:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80084de:	021b      	lsls	r3, r3, #8
 80084e0:	431a      	orrs	r2, r3
 80084e2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80084e6:	4313      	orrs	r3, r2
 80084e8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80084ec:	f107 0314 	add.w	r3, r7, #20
 80084f0:	4611      	mov	r1, r2
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fb f9da 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	62fc      	str	r4, [r7, #44]	; 0x2c
 80084fc:	60bb      	str	r3, [r7, #8]
        this->color = color;
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008504:	bf00      	nop
    frontText.setLinespacing(0);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3360      	adds	r3, #96	; 0x60
 800850a:	637b      	str	r3, [r7, #52]	; 0x34
 800850c:	2300      	movs	r3, #0
 800850e:	867b      	strh	r3, [r7, #50]	; 0x32
        linespace = space;
 8008510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008512:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008514:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008516:	bf00      	nop
    frontText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800851e:	f107 030c 	add.w	r3, r7, #12
 8008522:	2105      	movs	r1, #5
 8008524:	4618      	mov	r0, r3
 8008526:	f7fd ff79 	bl	800641c <_ZN8touchgfx9TypedTextC1Et>
 800852a:	f107 030c 	add.w	r3, r7, #12
 800852e:	4619      	mov	r1, r3
 8008530:	4620      	mov	r0, r4
 8008532:	f00d fd52 	bl	8015fda <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008536:	f107 030c 	add.w	r3, r7, #12
 800853a:	4618      	mov	r0, r3
 800853c:	f7fc ff1e 	bl	800537c <_ZN8touchgfx9TypedTextD1Ev>

    add(bgBox);
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	332c      	adds	r3, #44	; 0x2c
 8008546:	4619      	mov	r1, r3
 8008548:	4610      	mov	r0, r2
 800854a:	f00b fd87 	bl	801405c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(frontText);
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3360      	adds	r3, #96	; 0x60
 8008554:	4619      	mov	r1, r3
 8008556:	4610      	mov	r0, r2
 8008558:	f00b fd80 	bl	801405c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4618      	mov	r0, r3
 8008560:	373c      	adds	r7, #60	; 0x3c
 8008562:	46bd      	mov	sp, r7
 8008564:	bd90      	pop	{r4, r7, pc}
 8008566:	bf00      	nop
 8008568:	0802a938 	.word	0x0802a938

0800856c <_ZN12alertBarBase10initializeEv>:

void alertBarBase::initialize()
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]

}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <_ZN11tempBoxBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/tempBoxBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

tempBoxBase::tempBoxBase()
 8008580:	b590      	push	{r4, r7, lr}
 8008582:	b091      	sub	sp, #68	; 0x44
 8008584:	af02      	add	r7, sp, #8
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4618      	mov	r0, r3
 800858c:	f7fd fd66 	bl	800605c <_ZN8touchgfx9ContainerC1Ev>
 8008590:	4a6a      	ldr	r2, [pc, #424]	; (800873c <_ZN11tempBoxBaseC1Ev+0x1bc>)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	332c      	adds	r3, #44	; 0x2c
 800859a:	4618      	mov	r0, r3
 800859c:	f00d f952 	bl	8015844 <_ZN8touchgfx4LineC1Ev>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80085a6:	f107 0310 	add.w	r3, r7, #16
 80085aa:	2100      	movs	r1, #0
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fb f97d 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80085b2:	6939      	ldr	r1, [r7, #16]
 80085b4:	4620      	mov	r0, r4
 80085b6:	f7fe f8d7 	bl	8006768 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	33b8      	adds	r3, #184	; 0xb8
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fd ff42 	bl	8006448 <_ZN8touchgfx8TextAreaC1Ev>
{
    setWidth(220);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	21dc      	movs	r1, #220	; 0xdc
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fd fcd1 	bl	8005f70 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	213c      	movs	r1, #60	; 0x3c
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fd fcdb 	bl	8005f8e <_ZN8touchgfx8Drawable9setHeightEs>
    line1.setPosition(0, 0, 100, 60);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80085de:	233c      	movs	r3, #60	; 0x3c
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	2364      	movs	r3, #100	; 0x64
 80085e4:	2200      	movs	r2, #0
 80085e6:	2100      	movs	r1, #0
 80085e8:	f7fd fd87 	bl	80060fa <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80085f2:	23ff      	movs	r3, #255	; 0xff
 80085f4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80085f8:	23ff      	movs	r3, #255	; 0xff
 80085fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80085fe:	23ff      	movs	r3, #255	; 0xff
 8008600:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008604:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008608:	041b      	lsls	r3, r3, #16
 800860a:	461a      	mov	r2, r3
 800860c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008610:	021b      	lsls	r3, r3, #8
 8008612:	431a      	orrs	r2, r3
 8008614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008618:	4313      	orrs	r3, r2
 800861a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800861e:	f107 0320 	add.w	r3, r7, #32
 8008622:	4611      	mov	r1, r2
 8008624:	4618      	mov	r0, r3
 8008626:	f7fb f941 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	4619      	mov	r1, r3
 800862e:	4620      	mov	r0, r4
 8008630:	f7fe f8ba 	bl	80067a8 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	33a0      	adds	r3, #160	; 0xa0
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f00c ff23 	bl	801548c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line1.setStart(0, 0);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	332c      	adds	r3, #44	; 0x2c
 800864a:	2200      	movs	r2, #0
 800864c:	2100      	movs	r1, #0
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe ffd8 	bl	8007604 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(0, 220);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	332c      	adds	r3, #44	; 0x2c
 8008658:	22dc      	movs	r2, #220	; 0xdc
 800865a:	2100      	movs	r1, #0
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe fff7 	bl	8007650 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(1);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	332c      	adds	r3, #44	; 0x2c
 8008666:	2101      	movs	r1, #1
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff f817 	bl	800769c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	332c      	adds	r3, #44	; 0x2c
 8008672:	2101      	movs	r1, #1
 8008674:	4618      	mov	r0, r3
 8008676:	f00d fa2b 	bl	8015ad0 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    textArea1.setPosition(0, 0, 220, 60);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 8008680:	233c      	movs	r3, #60	; 0x3c
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	23dc      	movs	r3, #220	; 0xdc
 8008686:	2200      	movs	r2, #0
 8008688:	2100      	movs	r1, #0
 800868a:	f7fd fd36 	bl	80060fa <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8008694:	23ff      	movs	r3, #255	; 0xff
 8008696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800869a:	23ff      	movs	r3, #255	; 0xff
 800869c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086a0:	23ff      	movs	r3, #255	; 0xff
 80086a2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80086a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086aa:	041b      	lsls	r3, r3, #16
 80086ac:	461a      	mov	r2, r3
 80086ae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80086b2:	021b      	lsls	r3, r3, #8
 80086b4:	431a      	orrs	r2, r3
 80086b6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80086ba:	4313      	orrs	r3, r2
 80086bc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80086c0:	f107 031c 	add.w	r3, r7, #28
 80086c4:	4611      	mov	r1, r2
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fb f8f0 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	62fc      	str	r4, [r7, #44]	; 0x2c
 80086d0:	60fb      	str	r3, [r7, #12]
        this->color = color;
 80086d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80086d8:	bf00      	nop
    textArea1.setLinespacing(2);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	33b8      	adds	r3, #184	; 0xb8
 80086de:	637b      	str	r3, [r7, #52]	; 0x34
 80086e0:	2302      	movs	r3, #2
 80086e2:	867b      	strh	r3, [r7, #50]	; 0x32
        linespace = space;
 80086e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80086e8:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80086ea:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80086f2:	f107 0314 	add.w	r3, r7, #20
 80086f6:	2104      	movs	r1, #4
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fd fe8f 	bl	800641c <_ZN8touchgfx9TypedTextC1Et>
 80086fe:	f107 0314 	add.w	r3, r7, #20
 8008702:	4619      	mov	r1, r3
 8008704:	4620      	mov	r0, r4
 8008706:	f00d fc68 	bl	8015fda <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800870a:	f107 0314 	add.w	r3, r7, #20
 800870e:	4618      	mov	r0, r3
 8008710:	f7fc fe34 	bl	800537c <_ZN8touchgfx9TypedTextD1Ev>

    add(line1);
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	332c      	adds	r3, #44	; 0x2c
 800871a:	4619      	mov	r1, r3
 800871c:	4610      	mov	r0, r2
 800871e:	f00b fc9d 	bl	801405c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textArea1);
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	33b8      	adds	r3, #184	; 0xb8
 8008728:	4619      	mov	r1, r3
 800872a:	4610      	mov	r0, r2
 800872c:	f00b fc96 	bl	801405c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4618      	mov	r0, r3
 8008734:	373c      	adds	r7, #60	; 0x3c
 8008736:	46bd      	mov	sp, r7
 8008738:	bd90      	pop	{r4, r7, pc}
 800873a:	bf00      	nop
 800873c:	0802a9c4 	.word	0x0802a9c4

08008740 <_ZN11tempBoxBase10initializeEv>:

void tempBoxBase::initialize()
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]

}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	68b9      	ldr	r1, [r7, #8]
 8008766:	4618      	mov	r0, r3
 8008768:	f7fc ff22 	bl	80055b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800876c:	4a03      	ldr	r2, [pc, #12]	; (800877c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	601a      	str	r2, [r3, #0]
{

}
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	0802a4fc 	.word	0x0802a4fc

08008780 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	601a      	str	r2, [r3, #0]
{

}
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4618      	mov	r0, r3
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <_ZN5Model4tickEv>:

void Model::tick()
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]

}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
    {
    }
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
    {
    }
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
    {
 80087e0:	4a04      	ldr	r2, [pc, #16]	; (80087f4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	601a      	str	r2, [r3, #0]
    }
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4618      	mov	r0, r3
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	0802aa88 	.word	0x0802aa88

080087f8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
    }
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7ff ffe9 	bl	80087d8 <_ZN8touchgfx9PresenterD1Ev>
 8008806:	2104      	movs	r1, #4
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f01c fa84 	bl	8024d16 <_ZdlPvj>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4618      	mov	r0, r3
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
    {
 8008820:	4a04      	ldr	r2, [pc, #16]	; (8008834 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	601a      	str	r2, [r3, #0]
    }
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4618      	mov	r0, r3
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	0802aa88 	.word	0x0802aa88

08008838 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	4a06      	ldr	r2, [pc, #24]	; (800885c <_ZN13ModelListenerC1Ev+0x24>)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	601a      	str	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	605a      	str	r2, [r3, #4]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4618      	mov	r0, r3
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	0802aa78 	.word	0x0802aa78

08008860 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	4a04      	ldr	r2, [pc, #16]	; (800887c <_ZN13ModelListenerD1Ev+0x1c>)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4618      	mov	r0, r3
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	0802aa78 	.word	0x0802aa78

08008880 <_ZN13ModelListenerD0Ev>:
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff ffe9 	bl	8008860 <_ZN13ModelListenerD1Ev>
 800888e:	2108      	movs	r1, #8
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f01c fa40 	bl	8024d16 <_ZdlPvj>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	4a09      	ldr	r2, [pc, #36]	; (80088d0 <_ZN16Screen1PresenterD1Ev+0x30>)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	4a09      	ldr	r2, [pc, #36]	; (80088d4 <_ZN16Screen1PresenterD1Ev+0x34>)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	605a      	str	r2, [r3, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	3304      	adds	r3, #4
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7ff ffd1 	bl	8008860 <_ZN13ModelListenerD1Ev>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7ff ff89 	bl	80087d8 <_ZN8touchgfx9PresenterD1Ev>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4618      	mov	r0, r3
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	0802aa50 	.word	0x0802aa50
 80088d4:	0802aa68 	.word	0x0802aa68

080088d8 <_ZThn4_N16Screen1PresenterD1Ev>:
 80088d8:	f1a0 0004 	sub.w	r0, r0, #4
 80088dc:	e7e0      	b.n	80088a0 <_ZN16Screen1PresenterD1Ev>
 80088de:	bf00      	nop

080088e0 <_ZN16Screen1PresenterD0Ev>:
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7ff ffd9 	bl	80088a0 <_ZN16Screen1PresenterD1Ev>
 80088ee:	2110      	movs	r1, #16
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f01c fa10 	bl	8024d16 <_ZdlPvj>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4618      	mov	r0, r3
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <_ZThn4_N16Screen1PresenterD0Ev>:
 8008900:	f1a0 0004 	sub.w	r0, r0, #4
 8008904:	e7ec      	b.n	80088e0 <_ZN16Screen1PresenterD0Ev>
	...

08008908 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
    : view(v)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff ff7f 	bl	8008818 <_ZN8touchgfx9PresenterC1Ev>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3304      	adds	r3, #4
 800891e:	4618      	mov	r0, r3
 8008920:	f7ff ff8a 	bl	8008838 <_ZN13ModelListenerC1Ev>
 8008924:	4a06      	ldr	r2, [pc, #24]	; (8008940 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	4a06      	ldr	r2, [pc, #24]	; (8008944 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	605a      	str	r2, [r3, #4]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	60da      	str	r2, [r3, #12]
{

}
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4618      	mov	r0, r3
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	0802aa50 	.word	0x0802aa50
 8008944:	0802aa68 	.word	0x0802aa68

08008948 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]

}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]

}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <_Z41__static_initialization_and_destruction_0ii>:
 8008970:	b580      	push	{r7, lr}
 8008972:	b092      	sub	sp, #72	; 0x48
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2b01      	cmp	r3, #1
 800897e:	f040 8114 	bne.w	8008baa <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008988:	4293      	cmp	r3, r2
 800898a:	f040 810e 	bne.w	8008baa <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800898e:	2300      	movs	r3, #0
 8008990:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8008994:	2300      	movs	r3, #0
 8008996:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800899a:	2300      	movs	r3, #0
 800899c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80089a0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80089a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80089a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80089b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80089b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80089bc:	041b      	lsls	r3, r3, #16
 80089be:	461a      	mov	r2, r3
 80089c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80089c4:	021b      	lsls	r3, r3, #8
 80089c6:	431a      	orrs	r2, r3
 80089c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80089cc:	4313      	orrs	r3, r2
 80089ce:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80089d2:	f107 0320 	add.w	r3, r7, #32
 80089d6:	4611      	mov	r1, r2
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fa ff67 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80089de:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 80089e0:	bf00      	nop
 80089e2:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 80089e4:	4b73      	ldr	r3, [pc, #460]	; (8008bb4 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	23ff      	movs	r3, #255	; 0xff
 80089ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80089ee:	2300      	movs	r3, #0
 80089f0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80089f4:	2300      	movs	r3, #0
 80089f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80089fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8008a02:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008a0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008a12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a16:	041b      	lsls	r3, r3, #16
 8008a18:	461a      	mov	r2, r3
 8008a1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a1e:	021b      	lsls	r3, r3, #8
 8008a20:	431a      	orrs	r2, r3
 8008a22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008a26:	4313      	orrs	r3, r2
 8008a28:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008a2c:	f107 031c 	add.w	r3, r7, #28
 8008a30:	4611      	mov	r1, r2
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fa ff3a 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8008a38:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8008a3a:	bf00      	nop
 8008a3c:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8008a3e:	4b5e      	ldr	r3, [pc, #376]	; (8008bb8 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	2300      	movs	r3, #0
 8008a44:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8008a48:	23ff      	movs	r3, #255	; 0xff
 8008a4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a54:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008a58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008a5c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008a60:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8008a64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a68:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008a6c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008a70:	041b      	lsls	r3, r3, #16
 8008a72:	461a      	mov	r2, r3
 8008a74:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008a78:	021b      	lsls	r3, r3, #8
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008a80:	4313      	orrs	r3, r2
 8008a82:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008a86:	f107 0318 	add.w	r3, r7, #24
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fa ff0d 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8008a92:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8008a94:	bf00      	nop
 8008a96:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8008a98:	4b48      	ldr	r3, [pc, #288]	; (8008bbc <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8008aa8:	23ff      	movs	r3, #255	; 0xff
 8008aaa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8008aae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008ab2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8008ab6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008aba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008abe:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8008ac2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008ac6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008aca:	041b      	lsls	r3, r3, #16
 8008acc:	461a      	mov	r2, r3
 8008ace:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ad2:	021b      	lsls	r3, r3, #8
 8008ad4:	431a      	orrs	r2, r3
 8008ad6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008ada:	4313      	orrs	r3, r2
 8008adc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008ae0:	f107 0314 	add.w	r3, r7, #20
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fa fee0 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8008aec:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8008aee:	bf00      	nop
 8008af0:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8008af2:	4b33      	ldr	r3, [pc, #204]	; (8008bc0 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8008af4:	601a      	str	r2, [r3, #0]
 8008af6:	23f7      	movs	r3, #247	; 0xf7
 8008af8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008afc:	234c      	movs	r3, #76	; 0x4c
 8008afe:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8008b02:	2302      	movs	r3, #2
 8008b04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008b08:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8008b0c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008b10:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008b14:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8008b18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b1c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008b20:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008b24:	041b      	lsls	r3, r3, #16
 8008b26:	461a      	mov	r2, r3
 8008b28:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008b2c:	021b      	lsls	r3, r3, #8
 8008b2e:	431a      	orrs	r2, r3
 8008b30:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008b34:	4313      	orrs	r3, r2
 8008b36:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008b3a:	f107 0310 	add.w	r3, r7, #16
 8008b3e:	4611      	mov	r1, r2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fa feb3 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8008b46:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8008b48:	bf00      	nop
 8008b4a:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8008b4c:	4b1d      	ldr	r3, [pc, #116]	; (8008bc4 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	23f7      	movs	r3, #247	; 0xf7
 8008b52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008b56:	23d2      	movs	r3, #210	; 0xd2
 8008b58:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8008b62:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008b66:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8008b6a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b72:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008b76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008b7a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008b7e:	041b      	lsls	r3, r3, #16
 8008b80:	461a      	mov	r2, r3
 8008b82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b86:	021b      	lsls	r3, r3, #8
 8008b88:	431a      	orrs	r2, r3
 8008b8a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008b94:	f107 030c 	add.w	r3, r7, #12
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fa fe86 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8008ba2:	bf00      	nop
 8008ba4:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8008ba6:	4b08      	ldr	r3, [pc, #32]	; (8008bc8 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	bf00      	nop
 8008bac:	3748      	adds	r7, #72	; 0x48
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20023934 	.word	0x20023934
 8008bb8:	20023938 	.word	0x20023938
 8008bbc:	2002393c 	.word	0x2002393c
 8008bc0:	20023940 	.word	0x20023940
 8008bc4:	20023944 	.word	0x20023944
 8008bc8:	20023948 	.word	0x20023948

08008bcc <_GLOBAL__sub_I__ZN16Screen1PresenterC2ER11Screen1View>:
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008bd4:	2001      	movs	r0, #1
 8008bd6:	f7ff fecb 	bl	8008970 <_Z41__static_initialization_and_destruction_0ii>
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	4a05      	ldr	r2, [pc, #20]	; (8008bfc <_ZN11Screen1ViewD1Ev+0x20>)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fd ff1d 	bl	8006a2c <_ZN15Screen1ViewBaseD1Ev>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	0802aaa0 	.word	0x0802aaa0

08008c00 <_ZN11Screen1ViewD0Ev>:
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff ffe7 	bl	8008bdc <_ZN11Screen1ViewD1Ev>
 8008c0e:	4904      	ldr	r1, [pc, #16]	; (8008c20 <_ZN11Screen1ViewD0Ev+0x20>)
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f01c f880 	bl	8024d16 <_ZdlPvj>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	0002263c 	.word	0x0002263c

08008c24 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <stdio.h>
#include <cstring>
#include <ecumaster.h>

Screen1View::Screen1View()
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fd ff80 	bl	8006b34 <_ZN15Screen1ViewBaseC1Ev>
 8008c34:	4a26      	ldr	r2, [pc, #152]	; (8008cd0 <_ZN11Screen1ViewC1Ev+0xac>)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	4b25      	ldr	r3, [pc, #148]	; (8008cd4 <_ZN11Screen1ViewC1Ev+0xb0>)
 8008c3e:	4413      	add	r3, r2
 8008c40:	2200      	movs	r2, #0
 8008c42:	601a      	str	r2, [r3, #0]
{
    rpmArea.setWildcard(rpmAreaBuffer);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	4b22      	ldr	r3, [pc, #136]	; (8008cd8 <_ZN11Screen1ViewC1Ev+0xb4>)
 8008c4e:	4413      	add	r3, r2
 8008c50:	4619      	mov	r1, r3
 8008c52:	f7fd fc71 	bl	8006538 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    gearArea.setWildcard(gearAreaBuffer);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	4b1f      	ldr	r3, [pc, #124]	; (8008cdc <_ZN11Screen1ViewC1Ev+0xb8>)
 8008c60:	4413      	add	r3, r2
 8008c62:	4619      	mov	r1, r3
 8008c64:	f7fd fc68 	bl	8006538 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cltArea.setWildcard(cltAreaBuffer);
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ce0 <_ZN11Screen1ViewC1Ev+0xbc>)
 8008c6c:	4413      	add	r3, r2
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	4a1c      	ldr	r2, [pc, #112]	; (8008ce4 <_ZN11Screen1ViewC1Ev+0xc0>)
 8008c72:	440a      	add	r2, r1
 8008c74:	4611      	mov	r1, r2
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fd fc5e 	bl	8006538 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    battArea.setWildcard(battAreaBuffer);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	4b18      	ldr	r3, [pc, #96]	; (8008ce8 <_ZN11Screen1ViewC1Ev+0xc4>)
 8008c86:	4413      	add	r3, r2
 8008c88:	4619      	mov	r1, r3
 8008c8a:	f7fd fc55 	bl	8006538 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

    setRPM(EcuData.rpm);
 8008c8e:	4b17      	ldr	r3, [pc, #92]	; (8008cec <_ZN11Screen1ViewC1Ev+0xc8>)
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f9d7 	bl	8009048 <_ZN11Screen1View6setRPMEi>
    setGear(2);
 8008c9a:	2102      	movs	r1, #2
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fa61 	bl	8009164 <_ZN11Screen1View7setGearEi>
    setClt(EcuData.clt);
 8008ca2:	4b12      	ldr	r3, [pc, #72]	; (8008cec <_ZN11Screen1ViewC1Ev+0xc8>)
 8008ca4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fa2a 	bl	8009104 <_ZN11Screen1View6setCltEs>
    setBatt(EcuData.batt);
 8008cb0:	4b0e      	ldr	r3, [pc, #56]	; (8008cec <_ZN11Screen1ViewC1Ev+0xc8>)
 8008cb2:	8b5b      	ldrh	r3, [r3, #26]
 8008cb4:	ee07 3a90 	vmov	s15, r3
 8008cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f9ed 	bl	80090a0 <_ZN11Screen1View7setBattEf>
}
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	0802aaa0 	.word	0x0802aaa0
 8008cd4:	00022638 	.word	0x00022638
 8008cd8:	0001f708 	.word	0x0001f708
 8008cdc:	0001f704 	.word	0x0001f704
 8008ce0:	0001f6c4 	.word	0x0001f6c4
 8008ce4:	0001f744 	.word	0x0001f744
 8008ce8:	0001f71c 	.word	0x0001f71c
 8008cec:	20023964 	.word	0x20023964

08008cf0 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fe fc38 	bl	8007570 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fd faca 	bl	80062ac <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8008d18:	bf00      	nop
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
   //// Screen1View::tempBox1_1.redraw();
    //tempBox1_1.invalidate();
    static int a = 0;
    if(tickCounter % 255 == 0)
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	4b52      	ldr	r3, [pc, #328]	; (8008e74 <_ZN11Screen1View15handleTickEventEv+0x154>)
 8008d2c:	4413      	add	r3, r2
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	4b51      	ldr	r3, [pc, #324]	; (8008e78 <_ZN11Screen1View15handleTickEventEv+0x158>)
 8008d32:	fb83 1302 	smull	r1, r3, r3, r2
 8008d36:	4413      	add	r3, r2
 8008d38:	11d9      	asrs	r1, r3, #7
 8008d3a:	17d3      	asrs	r3, r2, #31
 8008d3c:	1ac9      	subs	r1, r1, r3
 8008d3e:	460b      	mov	r3, r1
 8008d40:	021b      	lsls	r3, r3, #8
 8008d42:	1a5b      	subs	r3, r3, r1
 8008d44:	1ad1      	subs	r1, r2, r3
 8008d46:	2900      	cmp	r1, #0
 8008d48:	d124      	bne.n	8008d94 <_ZN11Screen1View15handleTickEventEv+0x74>
    {
        a++; 
 8008d4a:	4b4c      	ldr	r3, [pc, #304]	; (8008e7c <_ZN11Screen1View15handleTickEventEv+0x15c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	4a4a      	ldr	r2, [pc, #296]	; (8008e7c <_ZN11Screen1View15handleTickEventEv+0x15c>)
 8008d52:	6013      	str	r3, [r2, #0]
        a = a % 3;
 8008d54:	4b49      	ldr	r3, [pc, #292]	; (8008e7c <_ZN11Screen1View15handleTickEventEv+0x15c>)
 8008d56:	6819      	ldr	r1, [r3, #0]
 8008d58:	4b49      	ldr	r3, [pc, #292]	; (8008e80 <_ZN11Screen1View15handleTickEventEv+0x160>)
 8008d5a:	fb83 3201 	smull	r3, r2, r3, r1
 8008d5e:	17cb      	asrs	r3, r1, #31
 8008d60:	1ad2      	subs	r2, r2, r3
 8008d62:	4613      	mov	r3, r2
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	4413      	add	r3, r2
 8008d68:	1aca      	subs	r2, r1, r3
 8008d6a:	4b44      	ldr	r3, [pc, #272]	; (8008e7c <_ZN11Screen1View15handleTickEventEv+0x15c>)
 8008d6c:	601a      	str	r2, [r3, #0]
        if(a == 0)
 8008d6e:	4b43      	ldr	r3, [pc, #268]	; (8008e7c <_ZN11Screen1View15handleTickEventEv+0x15c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d107      	bne.n	8008d86 <_ZN11Screen1View15handleTickEventEv+0x66>
        {
            alertBar1.setState(EBarState::Info);
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	4b42      	ldr	r3, [pc, #264]	; (8008e84 <_ZN11Screen1View15handleTickEventEv+0x164>)
 8008d7a:	4413      	add	r3, r2
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 fb96 	bl	80094b0 <_ZN8alertBar8setStateE9EBarState>
 8008d84:	e006      	b.n	8008d94 <_ZN11Screen1View15handleTickEventEv+0x74>
        }
        else
        {
            alertBar1.setState(EBarState::Warning);
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	4b3e      	ldr	r3, [pc, #248]	; (8008e84 <_ZN11Screen1View15handleTickEventEv+0x164>)
 8008d8a:	4413      	add	r3, r2
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 fb8e 	bl	80094b0 <_ZN8alertBar8setStateE9EBarState>
        }
        
    }
    static uint16_t lastRPM=0;
    if(EcuData.rpm != lastRPM)
 8008d94:	4b3c      	ldr	r3, [pc, #240]	; (8008e88 <_ZN11Screen1View15handleTickEventEv+0x168>)
 8008d96:	881a      	ldrh	r2, [r3, #0]
 8008d98:	4b3c      	ldr	r3, [pc, #240]	; (8008e8c <_ZN11Screen1View15handleTickEventEv+0x16c>)
 8008d9a:	881b      	ldrh	r3, [r3, #0]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d00e      	beq.n	8008dbe <_ZN11Screen1View15handleTickEventEv+0x9e>
    {
    setRPM(EcuData.rpm);
 8008da0:	4b39      	ldr	r3, [pc, #228]	; (8008e88 <_ZN11Screen1View15handleTickEventEv+0x168>)
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	4619      	mov	r1, r3
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f94e 	bl	8009048 <_ZN11Screen1View6setRPMEi>
    lastRPM=EcuData.rpm;
 8008dac:	4b36      	ldr	r3, [pc, #216]	; (8008e88 <_ZN11Screen1View15handleTickEventEv+0x168>)
 8008dae:	881a      	ldrh	r2, [r3, #0]
 8008db0:	4b36      	ldr	r3, [pc, #216]	; (8008e8c <_ZN11Screen1View15handleTickEventEv+0x16c>)
 8008db2:	801a      	strh	r2, [r3, #0]
   // if(EcuData.rpm <12000)
    	gearArea.invalidate();
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3398      	adds	r3, #152	; 0x98
 8008db8:	4618      	mov	r0, r3
 8008dba:	f00f ff53 	bl	8018c64 <_ZNK8touchgfx8Drawable10invalidateEv>
    //setGear(2);
    }
    static uint8_t lastGear=0;
    if(2!=lastGear)
 8008dbe:	4b34      	ldr	r3, [pc, #208]	; (8008e90 <_ZN11Screen1View15handleTickEventEv+0x170>)
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d006      	beq.n	8008dd4 <_ZN11Screen1View15handleTickEventEv+0xb4>
    {
    	setGear(2);
 8008dc6:	2102      	movs	r1, #2
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f9cb 	bl	8009164 <_ZN11Screen1View7setGearEi>
    	lastGear=2;
 8008dce:	4b30      	ldr	r3, [pc, #192]	; (8008e90 <_ZN11Screen1View15handleTickEventEv+0x170>)
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	701a      	strb	r2, [r3, #0]
    }
    static float lastBatt=0.0f;
    if (lastBatt != EcuData.batt*0.027f)
 8008dd4:	4b2c      	ldr	r3, [pc, #176]	; (8008e88 <_ZN11Screen1View15handleTickEventEv+0x168>)
 8008dd6:	8b5b      	ldrh	r3, [r3, #26]
 8008dd8:	ee07 3a90 	vmov	s15, r3
 8008ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008de0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8008e94 <_ZN11Screen1View15handleTickEventEv+0x174>
 8008de4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008de8:	4b2b      	ldr	r3, [pc, #172]	; (8008e98 <_ZN11Screen1View15handleTickEventEv+0x178>)
 8008dea:	edd3 7a00 	vldr	s15, [r3]
 8008dee:	eeb4 7a67 	vcmp.f32	s14, s15
 8008df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008df6:	d01b      	beq.n	8008e30 <_ZN11Screen1View15handleTickEventEv+0x110>
    {
    	setBatt(EcuData.batt*0.027f);
 8008df8:	4b23      	ldr	r3, [pc, #140]	; (8008e88 <_ZN11Screen1View15handleTickEventEv+0x168>)
 8008dfa:	8b5b      	ldrh	r3, [r3, #26]
 8008dfc:	ee07 3a90 	vmov	s15, r3
 8008e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e04:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8008e94 <_ZN11Screen1View15handleTickEventEv+0x174>
 8008e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f945 	bl	80090a0 <_ZN11Screen1View7setBattEf>
    	lastBatt = EcuData.batt*0.027f;
 8008e16:	4b1c      	ldr	r3, [pc, #112]	; (8008e88 <_ZN11Screen1View15handleTickEventEv+0x168>)
 8008e18:	8b5b      	ldrh	r3, [r3, #26]
 8008e1a:	ee07 3a90 	vmov	s15, r3
 8008e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e22:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008e94 <_ZN11Screen1View15handleTickEventEv+0x174>
 8008e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e2a:	4b1b      	ldr	r3, [pc, #108]	; (8008e98 <_ZN11Screen1View15handleTickEventEv+0x178>)
 8008e2c:	edc3 7a00 	vstr	s15, [r3]
    }
    static int16_t lastClt=0;
       if (lastClt != EcuData.clt)
 8008e30:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <_ZN11Screen1View15handleTickEventEv+0x168>)
 8008e32:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8008e36:	4b19      	ldr	r3, [pc, #100]	; (8008e9c <_ZN11Screen1View15handleTickEventEv+0x17c>)
 8008e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d00b      	beq.n	8008e58 <_ZN11Screen1View15handleTickEventEv+0x138>
       {
       	setClt(EcuData.clt);
 8008e40:	4b11      	ldr	r3, [pc, #68]	; (8008e88 <_ZN11Screen1View15handleTickEventEv+0x168>)
 8008e42:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f95b 	bl	8009104 <_ZN11Screen1View6setCltEs>
       	lastClt = EcuData.clt;
 8008e4e:	4b0e      	ldr	r3, [pc, #56]	; (8008e88 <_ZN11Screen1View15handleTickEventEv+0x168>)
 8008e50:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8008e54:	4b11      	ldr	r3, [pc, #68]	; (8008e9c <_ZN11Screen1View15handleTickEventEv+0x17c>)
 8008e56:	801a      	strh	r2, [r3, #0]
       }
    //setClt(EcuData.clt);
	//setBatt(EcuData.batt);
    //alertBar1.invalidate();
    //alertBar1.setText("12345678912345\n");
    tickCounter++;
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	4b06      	ldr	r3, [pc, #24]	; (8008e74 <_ZN11Screen1View15handleTickEventEv+0x154>)
 8008e5c:	4413      	add	r3, r2
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	6879      	ldr	r1, [r7, #4]
 8008e64:	4b03      	ldr	r3, [pc, #12]	; (8008e74 <_ZN11Screen1View15handleTickEventEv+0x154>)
 8008e66:	440b      	add	r3, r1
 8008e68:	601a      	str	r2, [r3, #0]
}
 8008e6a:	bf00      	nop
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	00022638 	.word	0x00022638
 8008e78:	80808081 	.word	0x80808081
 8008e7c:	2002398c 	.word	0x2002398c
 8008e80:	55555556 	.word	0x55555556
 8008e84:	0001f514 	.word	0x0001f514
 8008e88:	20023964 	.word	0x20023964
 8008e8c:	20023990 	.word	0x20023990
 8008e90:	20023992 	.word	0x20023992
 8008e94:	3cdd2f1b 	.word	0x3cdd2f1b
 8008e98:	20023994 	.word	0x20023994
 8008e9c:	20023998 	.word	0x20023998

08008ea0 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>:

void Screen1View::setText(touchgfx::TextAreaWithOneWildcard textArea, touchgfx::Unicode::UnicodeChar* buffer, const char inText[])
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	603b      	str	r3, [r7, #0]
    Unicode::snprintf(buffer, strlen(inText) + 1, inText);
 8008eae:	6838      	ldr	r0, [r7, #0]
 8008eb0:	f7f7 f9c6 	bl	8000240 <strlen>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	3301      	adds	r3, #1
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f011 ff51 	bl	801ad68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea.resizeToCurrentText();
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f00d f869 	bl	8015fa0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea.invalidate();
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f00f fec7 	bl	8018c64 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8008ed6:	bf00      	nop
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
	...

08008ee0 <_ZN8touchgfx8DrawableC1ERKS0_>:
class Drawable
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
 8008eea:	4a1e      	ldr	r2, [pc, #120]	; (8008f64 <_ZN8touchgfx8DrawableC1ERKS0_+0x84>)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	3204      	adds	r2, #4
 8008ef8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008efc:	e883 0003 	stmia.w	r3, {r0, r1}
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	330c      	adds	r3, #12
 8008f06:	320c      	adds	r2, #12
 8008f08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008f0c:	e883 0003 	stmia.w	r3, {r0, r1}
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	695a      	ldr	r2, [r3, #20]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	615a      	str	r2, [r3, #20]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	699a      	ldr	r2, [r3, #24]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	619a      	str	r2, [r3, #24]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	69da      	ldr	r2, [r3, #28]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	61da      	str	r2, [r3, #28]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	841a      	strh	r2, [r3, #32]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	845a      	strh	r2, [r3, #34]	; 0x22
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4618      	mov	r0, r3
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	0802c1ac 	.word	0x0802c1ac

08008f68 <_ZN8touchgfx6WidgetC1ERKS0_>:
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	4611      	mov	r1, r2
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7ff ffb1 	bl	8008ee0 <_ZN8touchgfx8DrawableC1ERKS0_>
 8008f7e:	4a04      	ldr	r2, [pc, #16]	; (8008f90 <_ZN8touchgfx6WidgetC1ERKS0_+0x28>)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4618      	mov	r0, r3
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	0802a864 	.word	0x0802a864

08008f94 <_ZN8touchgfx8TextAreaC1ERKS0_>:
class TextArea : public Widget
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7ff ffdf 	bl	8008f68 <_ZN8touchgfx6WidgetC1ERKS0_>
 8008faa:	4a19      	ldr	r2, [pc, #100]	; (8009010 <_ZN8touchgfx8TextAreaC1ERKS0_+0x7c>)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	3328      	adds	r3, #40	; 0x28
 8008fba:	4619      	mov	r1, r3
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	f7fc f9fd 	bl	80053bc <_ZN8touchgfx9TypedTextC1ERKS0_>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	869a      	strh	r2, [r3, #52]	; 0x34
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4618      	mov	r0, r3
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	0802bcb8 	.word	0x0802bcb8

08009014 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>:
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	4611      	mov	r1, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f7ff ffb5 	bl	8008f94 <_ZN8touchgfx8TextAreaC1ERKS0_>
 800902a:	4a06      	ldr	r2, [pc, #24]	; (8009044 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_+0x30>)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	601a      	str	r2, [r3, #0]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	63da      	str	r2, [r3, #60]	; 0x3c
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	0802bdc4 	.word	0x0802bdc4

08009048 <_ZN11Screen1View6setRPMEi>:

void Screen1View::setRPM(int inRPM)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b096      	sub	sp, #88	; 0x58
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
    char textBuffer[10]; 
    sprintf(textBuffer,"%d", inRPM);
 8009052:	f107 030c 	add.w	r3, r7, #12
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	490f      	ldr	r1, [pc, #60]	; (8009098 <_ZN11Screen1View6setRPMEi+0x50>)
 800905a:	4618      	mov	r0, r3
 800905c:	f01d f80c 	bl	8026078 <siprintf>
    setText(rpmArea, rpmAreaBuffer, textBuffer); 
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f503 72b2 	add.w	r2, r3, #356	; 0x164
 8009066:	f107 0318 	add.w	r3, r7, #24
 800906a:	4611      	mov	r1, r2
 800906c:	4618      	mov	r0, r3
 800906e:	f7ff ffd1 	bl	8009014 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a09      	ldr	r2, [pc, #36]	; (800909c <_ZN11Screen1View6setRPMEi+0x54>)
 8009076:	441a      	add	r2, r3
 8009078:	f107 030c 	add.w	r3, r7, #12
 800907c:	f107 0118 	add.w	r1, r7, #24
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f7ff ff0d 	bl	8008ea0 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8009086:	f107 0318 	add.w	r3, r7, #24
 800908a:	4618      	mov	r0, r3
 800908c:	f7fe fcd4 	bl	8007a38 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8009090:	bf00      	nop
 8009092:	3758      	adds	r7, #88	; 0x58
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	0802a1c0 	.word	0x0802a1c0
 800909c:	0001f708 	.word	0x0001f708

080090a0 <_ZN11Screen1View7setBattEf>:

void Screen1View::setBatt(float inBatt)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b096      	sub	sp, #88	; 0x58
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	ed87 0a00 	vstr	s0, [r7]
    char textBuffer[10];
    sprintf(textBuffer, "%.2f", inBatt);
 80090ac:	edd7 7a00 	vldr	s15, [r7]
 80090b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80090b4:	f107 000c 	add.w	r0, r7, #12
 80090b8:	ec53 2b17 	vmov	r2, r3, d7
 80090bc:	490f      	ldr	r1, [pc, #60]	; (80090fc <_ZN11Screen1View7setBattEf+0x5c>)
 80090be:	f01c ffdb 	bl	8026078 <siprintf>
    setText(battArea, battAreaBuffer, textBuffer);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f503 72d2 	add.w	r2, r3, #420	; 0x1a4
 80090c8:	f107 0318 	add.w	r3, r7, #24
 80090cc:	4611      	mov	r1, r2
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7ff ffa0 	bl	8009014 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a0a      	ldr	r2, [pc, #40]	; (8009100 <_ZN11Screen1View7setBattEf+0x60>)
 80090d8:	441a      	add	r2, r3
 80090da:	f107 030c 	add.w	r3, r7, #12
 80090de:	f107 0118 	add.w	r1, r7, #24
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7ff fedc 	bl	8008ea0 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 80090e8:	f107 0318 	add.w	r3, r7, #24
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fe fca3 	bl	8007a38 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 80090f2:	bf00      	nop
 80090f4:	3758      	adds	r7, #88	; 0x58
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	0802a1c4 	.word	0x0802a1c4
 8009100:	0001f71c 	.word	0x0001f71c

08009104 <_ZN11Screen1View6setCltEs>:

void Screen1View::setClt(int16_t inClt)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b096      	sub	sp, #88	; 0x58
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	807b      	strh	r3, [r7, #2]
    char textBuffer[10];
    sprintf(textBuffer, "%i", inClt);
 8009110:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009114:	f107 030c 	add.w	r3, r7, #12
 8009118:	490f      	ldr	r1, [pc, #60]	; (8009158 <_ZN11Screen1View6setCltEs+0x54>)
 800911a:	4618      	mov	r0, r3
 800911c:	f01c ffac 	bl	8026078 <siprintf>
    setText(cltArea, cltAreaBuffer, textBuffer);
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	4b0e      	ldr	r3, [pc, #56]	; (800915c <_ZN11Screen1View6setCltEs+0x58>)
 8009124:	4413      	add	r3, r2
 8009126:	f107 0218 	add.w	r2, r7, #24
 800912a:	4619      	mov	r1, r3
 800912c:	4610      	mov	r0, r2
 800912e:	f7ff ff71 	bl	8009014 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a0a      	ldr	r2, [pc, #40]	; (8009160 <_ZN11Screen1View6setCltEs+0x5c>)
 8009136:	441a      	add	r2, r3
 8009138:	f107 030c 	add.w	r3, r7, #12
 800913c:	f107 0118 	add.w	r1, r7, #24
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff fead 	bl	8008ea0 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8009146:	f107 0318 	add.w	r3, r7, #24
 800914a:	4618      	mov	r0, r3
 800914c:	f7fe fc74 	bl	8007a38 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8009150:	bf00      	nop
 8009152:	3758      	adds	r7, #88	; 0x58
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	0802a1cc 	.word	0x0802a1cc
 800915c:	0001f6c4 	.word	0x0001f6c4
 8009160:	0001f744 	.word	0x0001f744

08009164 <_ZN11Screen1View7setGearEi>:

void Screen1View::setGear(int inGear)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b096      	sub	sp, #88	; 0x58
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
    char textBuffer[10]; 
    sprintf(textBuffer,"%d", inGear);
 800916e:	f107 030c 	add.w	r3, r7, #12
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	490f      	ldr	r1, [pc, #60]	; (80091b4 <_ZN11Screen1View7setGearEi+0x50>)
 8009176:	4618      	mov	r0, r3
 8009178:	f01c ff7e 	bl	8026078 <siprintf>
    setText(gearArea, gearAreaBuffer, textBuffer); 
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8009182:	f107 0318 	add.w	r3, r7, #24
 8009186:	4611      	mov	r1, r2
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff ff43 	bl	8009014 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a09      	ldr	r2, [pc, #36]	; (80091b8 <_ZN11Screen1View7setGearEi+0x54>)
 8009192:	441a      	add	r2, r3
 8009194:	f107 030c 	add.w	r3, r7, #12
 8009198:	f107 0118 	add.w	r1, r7, #24
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff fe7f 	bl	8008ea0 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 80091a2:	f107 0318 	add.w	r3, r7, #24
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe fc46 	bl	8007a38 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 80091ac:	bf00      	nop
 80091ae:	3758      	adds	r7, #88	; 0x58
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	0802a1c0 	.word	0x0802a1c0
 80091b8:	0001f704 	.word	0x0001f704

080091bc <_Z41__static_initialization_and_destruction_0ii>:
 80091bc:	b580      	push	{r7, lr}
 80091be:	b092      	sub	sp, #72	; 0x48
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	f040 8114 	bne.w	80093f6 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091d4:	4293      	cmp	r3, r2
 80091d6:	f040 810e 	bne.w	80093f6 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80091da:	2300      	movs	r3, #0
 80091dc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80091e0:	2300      	movs	r3, #0
 80091e2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80091e6:	2300      	movs	r3, #0
 80091e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80091ec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80091f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80091f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80091fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009200:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009204:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009208:	041b      	lsls	r3, r3, #16
 800920a:	461a      	mov	r2, r3
 800920c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009210:	021b      	lsls	r3, r3, #8
 8009212:	431a      	orrs	r2, r3
 8009214:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009218:	4313      	orrs	r3, r2
 800921a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800921e:	f107 0320 	add.w	r3, r7, #32
 8009222:	4611      	mov	r1, r2
 8009224:	4618      	mov	r0, r3
 8009226:	f7fa fb41 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 800922a:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800922c:	bf00      	nop
 800922e:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8009230:	4b73      	ldr	r3, [pc, #460]	; (8009400 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	23ff      	movs	r3, #255	; 0xff
 8009236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800923a:	2300      	movs	r3, #0
 800923c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009240:	2300      	movs	r3, #0
 8009242:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8009246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800924a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800924e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009256:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800925a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800925e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009262:	041b      	lsls	r3, r3, #16
 8009264:	461a      	mov	r2, r3
 8009266:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800926a:	021b      	lsls	r3, r3, #8
 800926c:	431a      	orrs	r2, r3
 800926e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009272:	4313      	orrs	r3, r2
 8009274:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009278:	f107 031c 	add.w	r3, r7, #28
 800927c:	4611      	mov	r1, r2
 800927e:	4618      	mov	r0, r3
 8009280:	f7fa fb14 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8009284:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8009286:	bf00      	nop
 8009288:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800928a:	4b5e      	ldr	r3, [pc, #376]	; (8009404 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800928c:	601a      	str	r2, [r3, #0]
 800928e:	2300      	movs	r3, #0
 8009290:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009294:	23ff      	movs	r3, #255	; 0xff
 8009296:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800929a:	2300      	movs	r3, #0
 800929c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092a0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80092a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80092a8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80092ac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80092b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80092b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80092bc:	041b      	lsls	r3, r3, #16
 80092be:	461a      	mov	r2, r3
 80092c0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80092c4:	021b      	lsls	r3, r3, #8
 80092c6:	431a      	orrs	r2, r3
 80092c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80092cc:	4313      	orrs	r3, r2
 80092ce:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80092d2:	f107 0318 	add.w	r3, r7, #24
 80092d6:	4611      	mov	r1, r2
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fa fae7 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80092de:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 80092e0:	bf00      	nop
 80092e2:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 80092e4:	4b48      	ldr	r3, [pc, #288]	; (8009408 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80092e6:	601a      	str	r2, [r3, #0]
 80092e8:	2300      	movs	r3, #0
 80092ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092ee:	2300      	movs	r3, #0
 80092f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80092f4:	23ff      	movs	r3, #255	; 0xff
 80092f6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80092fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80092fe:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8009302:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009306:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800930a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800930e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009312:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009316:	041b      	lsls	r3, r3, #16
 8009318:	461a      	mov	r2, r3
 800931a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800931e:	021b      	lsls	r3, r3, #8
 8009320:	431a      	orrs	r2, r3
 8009322:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009326:	4313      	orrs	r3, r2
 8009328:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800932c:	f107 0314 	add.w	r3, r7, #20
 8009330:	4611      	mov	r1, r2
 8009332:	4618      	mov	r0, r3
 8009334:	f7fa faba 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8009338:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800933a:	bf00      	nop
 800933c:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800933e:	4b33      	ldr	r3, [pc, #204]	; (800940c <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	23f7      	movs	r3, #247	; 0xf7
 8009344:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8009348:	234c      	movs	r3, #76	; 0x4c
 800934a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800934e:	2302      	movs	r3, #2
 8009350:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009354:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009358:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800935c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009360:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8009364:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009368:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800936c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009370:	041b      	lsls	r3, r3, #16
 8009372:	461a      	mov	r2, r3
 8009374:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009378:	021b      	lsls	r3, r3, #8
 800937a:	431a      	orrs	r2, r3
 800937c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009380:	4313      	orrs	r3, r2
 8009382:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009386:	f107 0310 	add.w	r3, r7, #16
 800938a:	4611      	mov	r1, r2
 800938c:	4618      	mov	r0, r3
 800938e:	f7fa fa8d 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8009392:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8009394:	bf00      	nop
 8009396:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8009398:	4b1d      	ldr	r3, [pc, #116]	; (8009410 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800939a:	601a      	str	r2, [r3, #0]
 800939c:	23f7      	movs	r3, #247	; 0xf7
 800939e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80093a2:	23d2      	movs	r3, #210	; 0xd2
 80093a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80093a8:	2302      	movs	r3, #2
 80093aa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80093ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80093b2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80093b6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80093ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093be:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80093c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80093c6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80093ca:	041b      	lsls	r3, r3, #16
 80093cc:	461a      	mov	r2, r3
 80093ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80093d2:	021b      	lsls	r3, r3, #8
 80093d4:	431a      	orrs	r2, r3
 80093d6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80093da:	4313      	orrs	r3, r2
 80093dc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80093e0:	f107 030c 	add.w	r3, r7, #12
 80093e4:	4611      	mov	r1, r2
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fa fa60 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80093ec:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 80093ee:	bf00      	nop
 80093f0:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 80093f2:	4b08      	ldr	r3, [pc, #32]	; (8009414 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80093f4:	601a      	str	r2, [r3, #0]
 80093f6:	bf00      	nop
 80093f8:	3748      	adds	r7, #72	; 0x48
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	2002394c 	.word	0x2002394c
 8009404:	20023950 	.word	0x20023950
 8009408:	20023954 	.word	0x20023954
 800940c:	20023958 	.word	0x20023958
 8009410:	2002395c 	.word	0x2002395c
 8009414:	20023960 	.word	0x20023960

08009418 <_GLOBAL__sub_I_EcuData>:
 8009418:	b580      	push	{r7, lr}
 800941a:	af00      	add	r7, sp, #0
 800941c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009420:	2001      	movs	r0, #1
 8009422:	f7ff fecb 	bl	80091bc <_Z41__static_initialization_and_destruction_0ii>
 8009426:	bd80      	pop	{r7, pc}

08009428 <_ZN8alertBarC1Ev>:
#include <gui/containers/alertBar.hpp>
#include <string.h>

alertBar::alertBar()
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4618      	mov	r0, r3
 8009434:	f7fe ffbc 	bl	80083b0 <_ZN12alertBarBaseC1Ev>
 8009438:	4a0d      	ldr	r2, [pc, #52]	; (8009470 <_ZN8alertBarC1Ev+0x48>)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	601a      	str	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a0c      	ldr	r2, [pc, #48]	; (8009474 <_ZN8alertBarC1Ev+0x4c>)
 8009442:	6812      	ldr	r2, [r2, #0]
 8009444:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a0b      	ldr	r2, [pc, #44]	; (8009478 <_ZN8alertBarC1Ev+0x50>)
 800944c:	6812      	ldr	r2, [r2, #0]
 800944e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a09      	ldr	r2, [pc, #36]	; (800947c <_ZN8alertBarC1Ev+0x54>)
 8009456:	6812      	ldr	r2, [r2, #0]
 8009458:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a08      	ldr	r2, [pc, #32]	; (8009480 <_ZN8alertBarC1Ev+0x58>)
 8009460:	6812      	ldr	r2, [r2, #0]
 8009462:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
{
}
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4618      	mov	r0, r3
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	0802aad4 	.word	0x0802aad4
 8009474:	200239a8 	.word	0x200239a8
 8009478:	200239ac 	.word	0x200239ac
 800947c:	200239a0 	.word	0x200239a0
 8009480:	200239b0 	.word	0x200239b0

08009484 <_ZN8alertBar10initializeEv>:

void alertBar::initialize()
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
    alertBarBase::initialize();
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4618      	mov	r0, r3
 8009490:	f7ff f86c 	bl	800856c <_ZN12alertBarBase10initializeEv>
    frontText.setWildcard(frontTextBuffer);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	33b0      	adds	r3, #176	; 0xb0
 800949e:	4619      	mov	r1, r3
 80094a0:	4610      	mov	r0, r2
 80094a2:	f7fd f849 	bl	8006538 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
}
 80094a6:	bf00      	nop
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
	...

080094b0 <_ZN8alertBar8setStateE9EBarState>:

void alertBar::setState(EBarState inState)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	2b03      	cmp	r3, #3
 80094be:	d833      	bhi.n	8009528 <_ZN8alertBar8setStateE9EBarState+0x78>
 80094c0:	a201      	add	r2, pc, #4	; (adr r2, 80094c8 <_ZN8alertBar8setStateE9EBarState+0x18>)
 80094c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c6:	bf00      	nop
 80094c8:	080094d9 	.word	0x080094d9
 80094cc:	080094ed 	.word	0x080094ed
 80094d0:	08009501 	.word	0x08009501
 80094d4:	08009515 	.word	0x08009515
    switch (inState)
    {
    case EBarState::Info:
        bgBox.setColor(dataColors[0]);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80094e4:	4610      	mov	r0, r2
 80094e6:	f7fc ff8b 	bl	8006400 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 80094ea:	e01e      	b.n	800952a <_ZN8alertBar8setStateE9EBarState+0x7a>
    case EBarState::Warning:
        bgBox.setColor(dataColors[1]);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80094f8:	4610      	mov	r0, r2
 80094fa:	f7fc ff81 	bl	8006400 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 80094fe:	e014      	b.n	800952a <_ZN8alertBar8setStateE9EBarState+0x7a>
    case EBarState::Fault:
        bgBox.setColor(dataColors[2]);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800950c:	4610      	mov	r0, r2
 800950e:	f7fc ff77 	bl	8006400 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 8009512:	e00a      	b.n	800952a <_ZN8alertBar8setStateE9EBarState+0x7a>
    case EBarState::News:
        bgBox.setColor(dataColors[3]);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8009520:	4610      	mov	r0, r2
 8009522:	f7fc ff6d 	bl	8006400 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 8009526:	e000      	b.n	800952a <_ZN8alertBar8setStateE9EBarState+0x7a>

    default:
        break;
 8009528:	bf00      	nop
    }
}
 800952a:	bf00      	nop
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop

08009534 <_Z41__static_initialization_and_destruction_0ii>:
void alertBar::setText(const char inText[])
{
    Unicode::snprintf(frontTextBuffer, strlen(inText) + 1, inText);
    frontText.resizeToCurrentText();
    frontText.invalidate();
 8009534:	b580      	push	{r7, lr}
 8009536:	b092      	sub	sp, #72	; 0x48
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b01      	cmp	r3, #1
 8009542:	f040 8114 	bne.w	800976e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800954c:	4293      	cmp	r3, r2
 800954e:	f040 810e 	bne.w	800976e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009552:	2300      	movs	r3, #0
 8009554:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8009558:	2300      	movs	r3, #0
 800955a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800955e:	2300      	movs	r3, #0
 8009560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009564:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009568:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800956c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009570:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009578:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800957c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009580:	041b      	lsls	r3, r3, #16
 8009582:	461a      	mov	r2, r3
 8009584:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009588:	021b      	lsls	r3, r3, #8
 800958a:	431a      	orrs	r2, r3
 800958c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009590:	4313      	orrs	r3, r2
 8009592:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009596:	f107 0320 	add.w	r3, r7, #32
 800959a:	4611      	mov	r1, r2
 800959c:	4618      	mov	r0, r3
 800959e:	f7fa f985 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80095a2:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 80095a4:	bf00      	nop
 80095a6:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 80095a8:	4b73      	ldr	r3, [pc, #460]	; (8009778 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	23ff      	movs	r3, #255	; 0xff
 80095ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80095b2:	2300      	movs	r3, #0
 80095b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80095b8:	2300      	movs	r3, #0
 80095ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80095be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80095c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80095c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80095ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80095d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80095d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80095da:	041b      	lsls	r3, r3, #16
 80095dc:	461a      	mov	r2, r3
 80095de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095e2:	021b      	lsls	r3, r3, #8
 80095e4:	431a      	orrs	r2, r3
 80095e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80095ea:	4313      	orrs	r3, r2
 80095ec:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80095f0:	f107 031c 	add.w	r3, r7, #28
 80095f4:	4611      	mov	r1, r2
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fa f958 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80095fc:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 80095fe:	bf00      	nop
 8009600:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8009602:	4b5e      	ldr	r3, [pc, #376]	; (800977c <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	2300      	movs	r3, #0
 8009608:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800960c:	23ff      	movs	r3, #255	; 0xff
 800960e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8009612:	2300      	movs	r3, #0
 8009614:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009618:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800961c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009620:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009624:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8009628:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800962c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009630:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009634:	041b      	lsls	r3, r3, #16
 8009636:	461a      	mov	r2, r3
 8009638:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800963c:	021b      	lsls	r3, r3, #8
 800963e:	431a      	orrs	r2, r3
 8009640:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009644:	4313      	orrs	r3, r2
 8009646:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800964a:	f107 0318 	add.w	r3, r7, #24
 800964e:	4611      	mov	r1, r2
 8009650:	4618      	mov	r0, r3
 8009652:	f7fa f92b 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8009656:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8009658:	bf00      	nop
 800965a:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 800965c:	4b48      	ldr	r3, [pc, #288]	; (8009780 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800965e:	601a      	str	r2, [r3, #0]
 8009660:	2300      	movs	r3, #0
 8009662:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009666:	2300      	movs	r3, #0
 8009668:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800966c:	23ff      	movs	r3, #255	; 0xff
 800966e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8009672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009676:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800967a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800967e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009682:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009686:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800968a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800968e:	041b      	lsls	r3, r3, #16
 8009690:	461a      	mov	r2, r3
 8009692:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009696:	021b      	lsls	r3, r3, #8
 8009698:	431a      	orrs	r2, r3
 800969a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800969e:	4313      	orrs	r3, r2
 80096a0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80096a4:	f107 0314 	add.w	r3, r7, #20
 80096a8:	4611      	mov	r1, r2
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fa f8fe 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80096b0:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 80096b2:	bf00      	nop
 80096b4:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 80096b6:	4b33      	ldr	r3, [pc, #204]	; (8009784 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	23f7      	movs	r3, #247	; 0xf7
 80096bc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80096c0:	234c      	movs	r3, #76	; 0x4c
 80096c2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80096c6:	2302      	movs	r3, #2
 80096c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80096cc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80096d0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80096d4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80096d8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80096dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80096e0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80096e4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80096e8:	041b      	lsls	r3, r3, #16
 80096ea:	461a      	mov	r2, r3
 80096ec:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80096f0:	021b      	lsls	r3, r3, #8
 80096f2:	431a      	orrs	r2, r3
 80096f4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80096f8:	4313      	orrs	r3, r2
 80096fa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80096fe:	f107 0310 	add.w	r3, r7, #16
 8009702:	4611      	mov	r1, r2
 8009704:	4618      	mov	r0, r3
 8009706:	f7fa f8d1 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 800970a:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 800970c:	bf00      	nop
 800970e:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8009710:	4b1d      	ldr	r3, [pc, #116]	; (8009788 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	23f7      	movs	r3, #247	; 0xf7
 8009716:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800971a:	23d2      	movs	r3, #210	; 0xd2
 800971c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009720:	2302      	movs	r3, #2
 8009722:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009726:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800972a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800972e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009736:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800973a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800973e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009742:	041b      	lsls	r3, r3, #16
 8009744:	461a      	mov	r2, r3
 8009746:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800974a:	021b      	lsls	r3, r3, #8
 800974c:	431a      	orrs	r2, r3
 800974e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009752:	4313      	orrs	r3, r2
 8009754:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009758:	f107 030c 	add.w	r3, r7, #12
 800975c:	4611      	mov	r1, r2
 800975e:	4618      	mov	r0, r3
 8009760:	f7fa f8a4 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8009764:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8009766:	bf00      	nop
 8009768:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800976a:	4b08      	ldr	r3, [pc, #32]	; (800978c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	bf00      	nop
 8009770:	3748      	adds	r7, #72	; 0x48
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	2002399c 	.word	0x2002399c
 800977c:	200239a0 	.word	0x200239a0
 8009780:	200239a4 	.word	0x200239a4
 8009784:	200239a8 	.word	0x200239a8
 8009788:	200239ac 	.word	0x200239ac
 800978c:	200239b0 	.word	0x200239b0

08009790 <_GLOBAL__sub_I__ZN8alertBarC2Ev>:
 8009790:	b580      	push	{r7, lr}
 8009792:	af00      	add	r7, sp, #0
 8009794:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009798:	2001      	movs	r0, #1
 800979a:	f7ff fecb 	bl	8009534 <_Z41__static_initialization_and_destruction_0ii>
 800979e:	bd80      	pop	{r7, pc}

080097a0 <_ZN7tempBoxC1Ev>:
#include <gui/containers/tempBox.hpp>
#include <cmath>

tempBox::tempBox()
 80097a0:	b5b0      	push	{r4, r5, r7, lr}
 80097a2:	b088      	sub	sp, #32
 80097a4:	af02      	add	r7, sp, #8
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fe fee8 	bl	8008580 <_ZN11tempBoxBaseC1Ev>
 80097b0:	4a73      	ldr	r2, [pc, #460]	; (8009980 <_ZN7tempBoxC1Ev+0x1e0>)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	22dc      	movs	r2, #220	; 0xdc
 80097c2:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80097cc:	24db      	movs	r4, #219	; 0xdb
 80097ce:	461d      	mov	r5, r3
 80097d0:	2c00      	cmp	r4, #0
 80097d2:	db05      	blt.n	80097e0 <_ZN7tempBoxC1Ev+0x40>
 80097d4:	4628      	mov	r0, r5
 80097d6:	f00c f835 	bl	8015844 <_ZN8touchgfx4LineC1Ev>
 80097da:	3574      	adds	r5, #116	; 0x74
 80097dc:	3c01      	subs	r4, #1
 80097de:	e7f7      	b.n	80097d0 <_ZN7tempBoxC1Ev+0x30>
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	f646 031c 	movw	r3, #26652	; 0x681c
 80097e6:	4413      	add	r3, r2
 80097e8:	24db      	movs	r4, #219	; 0xdb
 80097ea:	461d      	mov	r5, r3
 80097ec:	2c00      	cmp	r4, #0
 80097ee:	db0c      	blt.n	800980a <_ZN7tempBoxC1Ev+0x6a>
 80097f0:	f107 0308 	add.w	r3, r7, #8
 80097f4:	2100      	movs	r1, #0
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fa f858 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 80097fc:	68b9      	ldr	r1, [r7, #8]
 80097fe:	4628      	mov	r0, r5
 8009800:	f7fc ffb2 	bl	8006768 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8009804:	3518      	adds	r5, #24
 8009806:	3c01      	subs	r4, #1
 8009808:	e7f0      	b.n	80097ec <_ZN7tempBoxC1Ev+0x4c>
{
    for(int i=0; i < 220; i++)
 800980a:	2300      	movs	r3, #0
 800980c:	617b      	str	r3, [r7, #20]
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	2bdb      	cmp	r3, #219	; 0xdb
 8009812:	f300 80b0 	bgt.w	8009976 <_ZN7tempBoxC1Ev+0x1d6>
    {
        lines[i].setPosition(0,0,220,60);
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	2274      	movs	r2, #116	; 0x74
 800981a:	fb02 f303 	mul.w	r3, r2, r3
 800981e:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	4413      	add	r3, r2
 8009826:	1d18      	adds	r0, r3, #4
 8009828:	233c      	movs	r3, #60	; 0x3c
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	23dc      	movs	r3, #220	; 0xdc
 800982e:	2200      	movs	r2, #0
 8009830:	2100      	movs	r1, #0
 8009832:	f7fc fc62 	bl	80060fa <_ZN8touchgfx8Drawable11setPositionEssss>
        linesPainter[i].setColor(touchgfx::Color::getColorFromRGB(255 - i , i, i % 40));
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	4613      	mov	r3, r2
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	4413      	add	r3, r2
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	f646 0218 	movw	r2, #26648	; 0x6818
 8009844:	441a      	add	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4413      	add	r3, r2
 800984a:	1d1c      	adds	r4, r3, #4
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	b2db      	uxtb	r3, r3
 8009850:	43db      	mvns	r3, r3
 8009852:	b2dd      	uxtb	r5, r3
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	b2d8      	uxtb	r0, r3
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	4b4a      	ldr	r3, [pc, #296]	; (8009984 <_ZN7tempBoxC1Ev+0x1e4>)
 800985c:	fb83 1302 	smull	r1, r3, r3, r2
 8009860:	1119      	asrs	r1, r3, #4
 8009862:	17d3      	asrs	r3, r2, #31
 8009864:	1ac9      	subs	r1, r1, r3
 8009866:	460b      	mov	r3, r1
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	440b      	add	r3, r1
 800986c:	00db      	lsls	r3, r3, #3
 800986e:	1ad1      	subs	r1, r2, r3
 8009870:	b2cb      	uxtb	r3, r1
 8009872:	462a      	mov	r2, r5
 8009874:	74fa      	strb	r2, [r7, #19]
 8009876:	4602      	mov	r2, r0
 8009878:	74ba      	strb	r2, [r7, #18]
 800987a:	747b      	strb	r3, [r7, #17]
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800987c:	7cfb      	ldrb	r3, [r7, #19]
 800987e:	041b      	lsls	r3, r3, #16
 8009880:	461a      	mov	r2, r3
 8009882:	7cbb      	ldrb	r3, [r7, #18]
 8009884:	021b      	lsls	r3, r3, #8
 8009886:	431a      	orrs	r2, r3
 8009888:	7c7b      	ldrb	r3, [r7, #17]
 800988a:	4313      	orrs	r3, r2
 800988c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009890:	f107 030c 	add.w	r3, r7, #12
 8009894:	4611      	mov	r1, r2
 8009896:	4618      	mov	r0, r3
 8009898:	f7fa f808 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	4619      	mov	r1, r3
 80098a0:	4620      	mov	r0, r4
 80098a2:	f7fc ff81 	bl	80067a8 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
        lines[i].setPainter(linesPainter[i]);
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2274      	movs	r2, #116	; 0x74
 80098aa:	fb02 f303 	mul.w	r3, r2, r3
 80098ae:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	4413      	add	r3, r2
 80098b6:	1d18      	adds	r0, r3, #4
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2174      	movs	r1, #116	; 0x74
 80098be:	fb01 f303 	mul.w	r3, r1, r3
 80098c2:	4413      	add	r3, r2
 80098c4:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	335c      	adds	r3, #92	; 0x5c
 80098cc:	681c      	ldr	r4, [r3, #0]
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	4613      	mov	r3, r2
 80098d2:	005b      	lsls	r3, r3, #1
 80098d4:	4413      	add	r3, r2
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	f646 0218 	movw	r2, #26648	; 0x6818
 80098dc:	441a      	add	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4413      	add	r3, r2
 80098e2:	3304      	adds	r3, #4
 80098e4:	4619      	mov	r1, r3
 80098e6:	47a0      	blx	r4
        lines[i].setStart(i,0);
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	2274      	movs	r2, #116	; 0x74
 80098ec:	fb02 f303 	mul.w	r3, r2, r3
 80098f0:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	4413      	add	r3, r2
 80098f8:	3304      	adds	r3, #4
 80098fa:	2200      	movs	r2, #0
 80098fc:	6979      	ldr	r1, [r7, #20]
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fd fe80 	bl	8007604 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
        lines[i].setEnd(i,60);
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	2274      	movs	r2, #116	; 0x74
 8009908:	fb02 f303 	mul.w	r3, r2, r3
 800990c:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	4413      	add	r3, r2
 8009914:	3304      	adds	r3, #4
 8009916:	223c      	movs	r2, #60	; 0x3c
 8009918:	6979      	ldr	r1, [r7, #20]
 800991a:	4618      	mov	r0, r3
 800991c:	f7fd fe98 	bl	8007650 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
        lines[i].setLineWidth(1);
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	2274      	movs	r2, #116	; 0x74
 8009924:	fb02 f303 	mul.w	r3, r2, r3
 8009928:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	4413      	add	r3, r2
 8009930:	3304      	adds	r3, #4
 8009932:	2101      	movs	r1, #1
 8009934:	4618      	mov	r0, r3
 8009936:	f7fd feb1 	bl	800769c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
        lines[i].setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	2274      	movs	r2, #116	; 0x74
 800993e:	fb02 f303 	mul.w	r3, r2, r3
 8009942:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	4413      	add	r3, r2
 800994a:	3304      	adds	r3, #4
 800994c:	2101      	movs	r1, #1
 800994e:	4618      	mov	r0, r3
 8009950:	f00c f8be 	bl	8015ad0 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
        add(lines[i]);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	2274      	movs	r2, #116	; 0x74
 800995a:	fb02 f303 	mul.w	r3, r2, r3
 800995e:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	4413      	add	r3, r2
 8009966:	3304      	adds	r3, #4
 8009968:	4619      	mov	r1, r3
 800996a:	f00a fb77 	bl	801405c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for(int i=0; i < 220; i++)
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	3301      	adds	r3, #1
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	e74b      	b.n	800980e <_ZN7tempBoxC1Ev+0x6e>
    }

}
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4618      	mov	r0, r3
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bdb0      	pop	{r4, r5, r7, pc}
 8009980:	0802ab60 	.word	0x0802ab60
 8009984:	66666667 	.word	0x66666667

08009988 <_ZN7tempBox10initializeEv>:

void tempBox::initialize()
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
    tempBoxBase::initialize();
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4618      	mov	r0, r3
 8009994:	f7fe fed4 	bl	8008740 <_ZN11tempBoxBase10initializeEv>
    tempValues[0] = 14;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	220e      	movs	r2, #14
 800999c:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    tempValues[1] = 20;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2214      	movs	r2, #20
 80099a4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    tempValues[2] = 120;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2278      	movs	r2, #120	; 0x78
 80099ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    tempValues[3] = 30;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	221e      	movs	r2, #30
 80099b4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    tempValues[4] = 180;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	22b4      	movs	r2, #180	; 0xb4
 80099bc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    tempValues[5]= 11;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	220b      	movs	r2, #11
 80099c4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    numberOfValues = 5;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2205      	movs	r2, #5
 80099cc:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <_Z41__static_initialization_and_destruction_0ii>:
        float endValue = lerp(tempValues[kFloor], tempValues[kCeil], alpha);
        
        const colortype tempColor = mapTemp(endValue);
        linesPainter[i].setColor(tempColor);
    }
 80099d8:	b580      	push	{r7, lr}
 80099da:	b092      	sub	sp, #72	; 0x48
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	f040 8114 	bne.w	8009c12 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099f0:	4293      	cmp	r3, r2
 80099f2:	f040 810e 	bne.w	8009c12 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80099f6:	2300      	movs	r3, #0
 80099f8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80099fc:	2300      	movs	r3, #0
 80099fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8009a02:	2300      	movs	r3, #0
 8009a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a08:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009a0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009a10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a1c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8009a20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a24:	041b      	lsls	r3, r3, #16
 8009a26:	461a      	mov	r2, r3
 8009a28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009a2c:	021b      	lsls	r3, r3, #8
 8009a2e:	431a      	orrs	r2, r3
 8009a30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a34:	4313      	orrs	r3, r2
 8009a36:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009a3a:	f107 0320 	add.w	r3, r7, #32
 8009a3e:	4611      	mov	r1, r2
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7f9 ff33 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8009a46:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8009a48:	bf00      	nop
 8009a4a:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8009a4c:	4b73      	ldr	r3, [pc, #460]	; (8009c1c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8009a4e:	601a      	str	r2, [r3, #0]
 8009a50:	23ff      	movs	r3, #255	; 0xff
 8009a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009a56:	2300      	movs	r3, #0
 8009a58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8009a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a66:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8009a6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009a76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009a7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a7e:	041b      	lsls	r3, r3, #16
 8009a80:	461a      	mov	r2, r3
 8009a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a86:	021b      	lsls	r3, r3, #8
 8009a88:	431a      	orrs	r2, r3
 8009a8a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009a94:	f107 031c 	add.w	r3, r7, #28
 8009a98:	4611      	mov	r1, r2
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7f9 ff06 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8009aa0:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8009aa2:	bf00      	nop
 8009aa4:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8009aa6:	4b5e      	ldr	r3, [pc, #376]	; (8009c20 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	2300      	movs	r3, #0
 8009aac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009ab0:	23ff      	movs	r3, #255	; 0xff
 8009ab2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009abc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009ac0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ac4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009ac8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8009acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ad0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009ad4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ad8:	041b      	lsls	r3, r3, #16
 8009ada:	461a      	mov	r2, r3
 8009adc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009ae0:	021b      	lsls	r3, r3, #8
 8009ae2:	431a      	orrs	r2, r3
 8009ae4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009aee:	f107 0318 	add.w	r3, r7, #24
 8009af2:	4611      	mov	r1, r2
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7f9 fed9 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8009afa:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8009afc:	bf00      	nop
 8009afe:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8009b00:	4b48      	ldr	r3, [pc, #288]	; (8009c24 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	2300      	movs	r3, #0
 8009b06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8009b10:	23ff      	movs	r3, #255	; 0xff
 8009b12:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8009b16:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009b1a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8009b1e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009b22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009b26:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009b2a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009b2e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009b32:	041b      	lsls	r3, r3, #16
 8009b34:	461a      	mov	r2, r3
 8009b36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b3a:	021b      	lsls	r3, r3, #8
 8009b3c:	431a      	orrs	r2, r3
 8009b3e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009b42:	4313      	orrs	r3, r2
 8009b44:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009b48:	f107 0314 	add.w	r3, r7, #20
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7f9 feac 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8009b54:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8009b56:	bf00      	nop
 8009b58:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8009b5a:	4b33      	ldr	r3, [pc, #204]	; (8009c28 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	23f7      	movs	r3, #247	; 0xf7
 8009b60:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8009b64:	234c      	movs	r3, #76	; 0x4c
 8009b66:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009b70:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009b74:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009b78:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009b7c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8009b80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b84:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009b88:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009b8c:	041b      	lsls	r3, r3, #16
 8009b8e:	461a      	mov	r2, r3
 8009b90:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009b94:	021b      	lsls	r3, r3, #8
 8009b96:	431a      	orrs	r2, r3
 8009b98:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009ba2:	f107 0310 	add.w	r3, r7, #16
 8009ba6:	4611      	mov	r1, r2
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7f9 fe7f 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8009bae:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8009bb0:	bf00      	nop
 8009bb2:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8009bb4:	4b1d      	ldr	r3, [pc, #116]	; (8009c2c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	23f7      	movs	r3, #247	; 0xf7
 8009bba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009bbe:	23d2      	movs	r3, #210	; 0xd2
 8009bc0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009bca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009bce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8009bd2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bda:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009bde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009be2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009be6:	041b      	lsls	r3, r3, #16
 8009be8:	461a      	mov	r2, r3
 8009bea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009bee:	021b      	lsls	r3, r3, #8
 8009bf0:	431a      	orrs	r2, r3
 8009bf2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009bfc:	f107 030c 	add.w	r3, r7, #12
 8009c00:	4611      	mov	r1, r2
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7f9 fe52 	bl	80038ac <_ZN8touchgfx9colortypeC1Em>
 8009c08:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8009c0a:	bf00      	nop
 8009c0c:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8009c0e:	4b08      	ldr	r3, [pc, #32]	; (8009c30 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	bf00      	nop
 8009c14:	3748      	adds	r7, #72	; 0x48
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	200239b4 	.word	0x200239b4
 8009c20:	200239b8 	.word	0x200239b8
 8009c24:	200239bc 	.word	0x200239bc
 8009c28:	200239c0 	.word	0x200239c0
 8009c2c:	200239c4 	.word	0x200239c4
 8009c30:	200239c8 	.word	0x200239c8

08009c34 <_GLOBAL__sub_I__ZN7tempBoxC2Ev>:
 8009c34:	b580      	push	{r7, lr}
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009c3c:	2001      	movs	r0, #1
 8009c3e:	f7ff fecb 	bl	80099d8 <_Z41__static_initialization_and_destruction_0ii>
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009c44:	b480      	push	{r7}
 8009c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009c48:	4b06      	ldr	r3, [pc, #24]	; (8009c64 <SystemInit+0x20>)
 8009c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c4e:	4a05      	ldr	r2, [pc, #20]	; (8009c64 <SystemInit+0x20>)
 8009c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009c58:	bf00      	nop
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	e000ed00 	.word	0xe000ed00

08009c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c6c:	2003      	movs	r0, #3
 8009c6e:	f001 faa0 	bl	800b1b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009c72:	200f      	movs	r0, #15
 8009c74:	f7f8 fb2c 	bl	80022d0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8009c78:	f7f8 fb02 	bl	8002280 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	bd80      	pop	{r7, pc}
	...

08009c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009c84:	b480      	push	{r7}
 8009c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009c88:	4b06      	ldr	r3, [pc, #24]	; (8009ca4 <HAL_IncTick+0x20>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	4b06      	ldr	r3, [pc, #24]	; (8009ca8 <HAL_IncTick+0x24>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4413      	add	r3, r2
 8009c94:	4a04      	ldr	r2, [pc, #16]	; (8009ca8 <HAL_IncTick+0x24>)
 8009c96:	6013      	str	r3, [r2, #0]
}
 8009c98:	bf00      	nop
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	20000014 	.word	0x20000014
 8009ca8:	20056d7c 	.word	0x20056d7c

08009cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009cac:	b480      	push	{r7}
 8009cae:	af00      	add	r7, sp, #0
  return uwTick;
 8009cb0:	4b03      	ldr	r3, [pc, #12]	; (8009cc0 <HAL_GetTick+0x14>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	20056d7c 	.word	0x20056d7c

08009cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009ccc:	f7ff ffee 	bl	8009cac <HAL_GetTick>
 8009cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cdc:	d005      	beq.n	8009cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009cde:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <HAL_Delay+0x44>)
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009cea:	bf00      	nop
 8009cec:	f7ff ffde 	bl	8009cac <HAL_GetTick>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d8f7      	bhi.n	8009cec <HAL_Delay+0x28>
  {
  }
}
 8009cfc:	bf00      	nop
 8009cfe:	bf00      	nop
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20000014 	.word	0x20000014

08009d0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d101      	bne.n	8009d22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e031      	b.n	8009d86 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d109      	bne.n	8009d3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f7f6 feae 	bl	8000a8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d42:	f003 0310 	and.w	r3, r3, #16
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d116      	bne.n	8009d78 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d4e:	4b10      	ldr	r3, [pc, #64]	; (8009d90 <HAL_ADC_Init+0x84>)
 8009d50:	4013      	ands	r3, r2
 8009d52:	f043 0202 	orr.w	r2, r3, #2
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 faca 	bl	800a2f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6a:	f023 0303 	bic.w	r3, r3, #3
 8009d6e:	f043 0201 	orr.w	r2, r3, #1
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	641a      	str	r2, [r3, #64]	; 0x40
 8009d76:	e001      	b.n	8009d7c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	ffffeefd 	.word	0xffffeefd

08009d94 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d101      	bne.n	8009dae <HAL_ADC_Start+0x1a>
 8009daa:	2302      	movs	r3, #2
 8009dac:	e0ad      	b.n	8009f0a <HAL_ADC_Start+0x176>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	f003 0301 	and.w	r3, r3, #1
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d018      	beq.n	8009df6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	689a      	ldr	r2, [r3, #8]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f042 0201 	orr.w	r2, r2, #1
 8009dd2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8009dd4:	4b50      	ldr	r3, [pc, #320]	; (8009f18 <HAL_ADC_Start+0x184>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a50      	ldr	r2, [pc, #320]	; (8009f1c <HAL_ADC_Start+0x188>)
 8009dda:	fba2 2303 	umull	r2, r3, r2, r3
 8009dde:	0c9a      	lsrs	r2, r3, #18
 8009de0:	4613      	mov	r3, r2
 8009de2:	005b      	lsls	r3, r3, #1
 8009de4:	4413      	add	r3, r2
 8009de6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8009de8:	e002      	b.n	8009df0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1f9      	bne.n	8009dea <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d175      	bne.n	8009ef0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e08:	4b45      	ldr	r3, [pc, #276]	; (8009f20 <HAL_ADC_Start+0x18c>)
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d007      	beq.n	8009e32 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009e2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e3e:	d106      	bne.n	8009e4e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e44:	f023 0206 	bic.w	r2, r3, #6
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	645a      	str	r2, [r3, #68]	; 0x44
 8009e4c:	e002      	b.n	8009e54 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009e64:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8009e66:	4b2f      	ldr	r3, [pc, #188]	; (8009f24 <HAL_ADC_Start+0x190>)
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	f003 031f 	and.w	r3, r3, #31
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10f      	bne.n	8009e92 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d143      	bne.n	8009f08 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689a      	ldr	r2, [r3, #8]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009e8e:	609a      	str	r2, [r3, #8]
 8009e90:	e03a      	b.n	8009f08 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a24      	ldr	r2, [pc, #144]	; (8009f28 <HAL_ADC_Start+0x194>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d10e      	bne.n	8009eba <HAL_ADC_Start+0x126>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d107      	bne.n	8009eba <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	689a      	ldr	r2, [r3, #8]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009eb8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009eba:	4b1a      	ldr	r3, [pc, #104]	; (8009f24 <HAL_ADC_Start+0x190>)
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	f003 0310 	and.w	r3, r3, #16
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d120      	bne.n	8009f08 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a18      	ldr	r2, [pc, #96]	; (8009f2c <HAL_ADC_Start+0x198>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d11b      	bne.n	8009f08 <HAL_ADC_Start+0x174>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d114      	bne.n	8009f08 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	689a      	ldr	r2, [r3, #8]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009eec:	609a      	str	r2, [r3, #8]
 8009eee:	e00b      	b.n	8009f08 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef4:	f043 0210 	orr.w	r2, r3, #16
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f00:	f043 0201 	orr.w	r2, r3, #1
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	2000000c 	.word	0x2000000c
 8009f1c:	431bde83 	.word	0x431bde83
 8009f20:	fffff8fe 	.word	0xfffff8fe
 8009f24:	40012300 	.word	0x40012300
 8009f28:	40012000 	.word	0x40012000
 8009f2c:	40012200 	.word	0x40012200

08009f30 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f4c:	d113      	bne.n	8009f76 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8009f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f5c:	d10b      	bne.n	8009f76 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f62:	f043 0220 	orr.w	r2, r3, #32
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e063      	b.n	800a03e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009f76:	f7ff fe99 	bl	8009cac <HAL_GetTick>
 8009f7a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8009f7c:	e021      	b.n	8009fc2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f84:	d01d      	beq.n	8009fc2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d007      	beq.n	8009f9c <HAL_ADC_PollForConversion+0x6c>
 8009f8c:	f7ff fe8e 	bl	8009cac <HAL_GetTick>
 8009f90:	4602      	mov	r2, r0
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d212      	bcs.n	8009fc2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 0302 	and.w	r3, r3, #2
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d00b      	beq.n	8009fc2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fae:	f043 0204 	orr.w	r2, r3, #4
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e03d      	b.n	800a03e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 0302 	and.w	r3, r3, #2
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d1d6      	bne.n	8009f7e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f06f 0212 	mvn.w	r2, #18
 8009fd8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d123      	bne.n	800a03c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d11f      	bne.n	800a03c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a002:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a006:	2b00      	cmp	r3, #0
 800a008:	d006      	beq.n	800a018 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a014:	2b00      	cmp	r3, #0
 800a016:	d111      	bne.n	800a03c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d105      	bne.n	800a03c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a034:	f043 0201 	orr.w	r2, r3, #1
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800a046:	b480      	push	{r7}
 800a048:	b083      	sub	sp, #12
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800a054:	4618      	mov	r0, r3
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a074:	2b01      	cmp	r3, #1
 800a076:	d101      	bne.n	800a07c <HAL_ADC_ConfigChannel+0x1c>
 800a078:	2302      	movs	r3, #2
 800a07a:	e12a      	b.n	800a2d2 <HAL_ADC_ConfigChannel+0x272>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b09      	cmp	r3, #9
 800a08a:	d93a      	bls.n	800a102 <HAL_ADC_ConfigChannel+0xa2>
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a094:	d035      	beq.n	800a102 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68d9      	ldr	r1, [r3, #12]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	4413      	add	r3, r2
 800a0aa:	3b1e      	subs	r3, #30
 800a0ac:	2207      	movs	r2, #7
 800a0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b2:	43da      	mvns	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	400a      	ands	r2, r1
 800a0ba:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a87      	ldr	r2, [pc, #540]	; (800a2e0 <HAL_ADC_ConfigChannel+0x280>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d10a      	bne.n	800a0dc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68d9      	ldr	r1, [r3, #12]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	061a      	lsls	r2, r3, #24
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	430a      	orrs	r2, r1
 800a0d8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a0da:	e035      	b.n	800a148 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68d9      	ldr	r1, [r3, #12]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	689a      	ldr	r2, [r3, #8]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	005b      	lsls	r3, r3, #1
 800a0f2:	4403      	add	r3, r0
 800a0f4:	3b1e      	subs	r3, #30
 800a0f6:	409a      	lsls	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	430a      	orrs	r2, r1
 800a0fe:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a100:	e022      	b.n	800a148 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6919      	ldr	r1, [r3, #16]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	461a      	mov	r2, r3
 800a110:	4613      	mov	r3, r2
 800a112:	005b      	lsls	r3, r3, #1
 800a114:	4413      	add	r3, r2
 800a116:	2207      	movs	r2, #7
 800a118:	fa02 f303 	lsl.w	r3, r2, r3
 800a11c:	43da      	mvns	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	400a      	ands	r2, r1
 800a124:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	6919      	ldr	r1, [r3, #16]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	689a      	ldr	r2, [r3, #8]
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	b29b      	uxth	r3, r3
 800a136:	4618      	mov	r0, r3
 800a138:	4603      	mov	r3, r0
 800a13a:	005b      	lsls	r3, r3, #1
 800a13c:	4403      	add	r3, r0
 800a13e:	409a      	lsls	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	430a      	orrs	r2, r1
 800a146:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	2b06      	cmp	r3, #6
 800a14e:	d824      	bhi.n	800a19a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	685a      	ldr	r2, [r3, #4]
 800a15a:	4613      	mov	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	3b05      	subs	r3, #5
 800a162:	221f      	movs	r2, #31
 800a164:	fa02 f303 	lsl.w	r3, r2, r3
 800a168:	43da      	mvns	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	400a      	ands	r2, r1
 800a170:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	4618      	mov	r0, r3
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	4613      	mov	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4413      	add	r3, r2
 800a18a:	3b05      	subs	r3, #5
 800a18c:	fa00 f203 	lsl.w	r2, r0, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	430a      	orrs	r2, r1
 800a196:	635a      	str	r2, [r3, #52]	; 0x34
 800a198:	e04c      	b.n	800a234 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	2b0c      	cmp	r3, #12
 800a1a0:	d824      	bhi.n	800a1ec <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4413      	add	r3, r2
 800a1b2:	3b23      	subs	r3, #35	; 0x23
 800a1b4:	221f      	movs	r2, #31
 800a1b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ba:	43da      	mvns	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	400a      	ands	r2, r1
 800a1c2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	685a      	ldr	r2, [r3, #4]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4413      	add	r3, r2
 800a1dc:	3b23      	subs	r3, #35	; 0x23
 800a1de:	fa00 f203 	lsl.w	r2, r0, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	631a      	str	r2, [r3, #48]	; 0x30
 800a1ea:	e023      	b.n	800a234 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	3b41      	subs	r3, #65	; 0x41
 800a1fe:	221f      	movs	r2, #31
 800a200:	fa02 f303 	lsl.w	r3, r2, r3
 800a204:	43da      	mvns	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	400a      	ands	r2, r1
 800a20c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	b29b      	uxth	r3, r3
 800a21a:	4618      	mov	r0, r3
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	4613      	mov	r3, r2
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	4413      	add	r3, r2
 800a226:	3b41      	subs	r3, #65	; 0x41
 800a228:	fa00 f203 	lsl.w	r2, r0, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	430a      	orrs	r2, r1
 800a232:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a2a      	ldr	r2, [pc, #168]	; (800a2e4 <HAL_ADC_ConfigChannel+0x284>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d10a      	bne.n	800a254 <HAL_ADC_ConfigChannel+0x1f4>
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a246:	d105      	bne.n	800a254 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800a248:	4b27      	ldr	r3, [pc, #156]	; (800a2e8 <HAL_ADC_ConfigChannel+0x288>)
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	4a26      	ldr	r2, [pc, #152]	; (800a2e8 <HAL_ADC_ConfigChannel+0x288>)
 800a24e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a252:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a22      	ldr	r2, [pc, #136]	; (800a2e4 <HAL_ADC_ConfigChannel+0x284>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d109      	bne.n	800a272 <HAL_ADC_ConfigChannel+0x212>
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b12      	cmp	r3, #18
 800a264:	d105      	bne.n	800a272 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800a266:	4b20      	ldr	r3, [pc, #128]	; (800a2e8 <HAL_ADC_ConfigChannel+0x288>)
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	4a1f      	ldr	r2, [pc, #124]	; (800a2e8 <HAL_ADC_ConfigChannel+0x288>)
 800a26c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a270:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a1b      	ldr	r2, [pc, #108]	; (800a2e4 <HAL_ADC_ConfigChannel+0x284>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d125      	bne.n	800a2c8 <HAL_ADC_ConfigChannel+0x268>
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a17      	ldr	r2, [pc, #92]	; (800a2e0 <HAL_ADC_ConfigChannel+0x280>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d003      	beq.n	800a28e <HAL_ADC_ConfigChannel+0x22e>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b11      	cmp	r3, #17
 800a28c:	d11c      	bne.n	800a2c8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800a28e:	4b16      	ldr	r3, [pc, #88]	; (800a2e8 <HAL_ADC_ConfigChannel+0x288>)
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	4a15      	ldr	r2, [pc, #84]	; (800a2e8 <HAL_ADC_ConfigChannel+0x288>)
 800a294:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a298:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a10      	ldr	r2, [pc, #64]	; (800a2e0 <HAL_ADC_ConfigChannel+0x280>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d111      	bne.n	800a2c8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800a2a4:	4b11      	ldr	r3, [pc, #68]	; (800a2ec <HAL_ADC_ConfigChannel+0x28c>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a11      	ldr	r2, [pc, #68]	; (800a2f0 <HAL_ADC_ConfigChannel+0x290>)
 800a2aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ae:	0c9a      	lsrs	r2, r3, #18
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4413      	add	r3, r2
 800a2b6:	005b      	lsls	r3, r3, #1
 800a2b8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800a2ba:	e002      	b.n	800a2c2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1f9      	bne.n	800a2bc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3714      	adds	r7, #20
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	10000012 	.word	0x10000012
 800a2e4:	40012000 	.word	0x40012000
 800a2e8:	40012300 	.word	0x40012300
 800a2ec:	2000000c 	.word	0x2000000c
 800a2f0:	431bde83 	.word	0x431bde83

0800a2f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800a2fc:	4b78      	ldr	r3, [pc, #480]	; (800a4e0 <ADC_Init+0x1ec>)
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	4a77      	ldr	r2, [pc, #476]	; (800a4e0 <ADC_Init+0x1ec>)
 800a302:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800a306:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800a308:	4b75      	ldr	r3, [pc, #468]	; (800a4e0 <ADC_Init+0x1ec>)
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	4973      	ldr	r1, [pc, #460]	; (800a4e0 <ADC_Init+0x1ec>)
 800a312:	4313      	orrs	r3, r2
 800a314:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	685a      	ldr	r2, [r3, #4]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a324:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	6859      	ldr	r1, [r3, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	021a      	lsls	r2, r3, #8
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	430a      	orrs	r2, r1
 800a338:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a348:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	6859      	ldr	r1, [r3, #4]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	689a      	ldr	r2, [r3, #8]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	430a      	orrs	r2, r1
 800a35a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	689a      	ldr	r2, [r3, #8]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a36a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6899      	ldr	r1, [r3, #8]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68da      	ldr	r2, [r3, #12]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	430a      	orrs	r2, r1
 800a37c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a382:	4a58      	ldr	r2, [pc, #352]	; (800a4e4 <ADC_Init+0x1f0>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d022      	beq.n	800a3ce <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689a      	ldr	r2, [r3, #8]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a396:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	6899      	ldr	r1, [r3, #8]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	689a      	ldr	r2, [r3, #8]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a3b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6899      	ldr	r1, [r3, #8]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	609a      	str	r2, [r3, #8]
 800a3cc:	e00f      	b.n	800a3ee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	689a      	ldr	r2, [r3, #8]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a3dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	689a      	ldr	r2, [r3, #8]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a3ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	689a      	ldr	r2, [r3, #8]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f022 0202 	bic.w	r2, r2, #2
 800a3fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	6899      	ldr	r1, [r3, #8]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	005a      	lsls	r2, r3, #1
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	430a      	orrs	r2, r1
 800a410:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d01b      	beq.n	800a454 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a42a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a43a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6859      	ldr	r1, [r3, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a446:	3b01      	subs	r3, #1
 800a448:	035a      	lsls	r2, r3, #13
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	430a      	orrs	r2, r1
 800a450:	605a      	str	r2, [r3, #4]
 800a452:	e007      	b.n	800a464 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	685a      	ldr	r2, [r3, #4]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a462:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a472:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	69db      	ldr	r3, [r3, #28]
 800a47e:	3b01      	subs	r3, #1
 800a480:	051a      	lsls	r2, r3, #20
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	430a      	orrs	r2, r1
 800a488:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	689a      	ldr	r2, [r3, #8]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a498:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	6899      	ldr	r1, [r3, #8]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a4a6:	025a      	lsls	r2, r3, #9
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	430a      	orrs	r2, r1
 800a4ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	689a      	ldr	r2, [r3, #8]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6899      	ldr	r1, [r3, #8]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	695b      	ldr	r3, [r3, #20]
 800a4ca:	029a      	lsls	r2, r3, #10
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	430a      	orrs	r2, r1
 800a4d2:	609a      	str	r2, [r3, #8]
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	40012300 	.word	0x40012300
 800a4e4:	0f000001 	.word	0x0f000001

0800a4e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e0ed      	b.n	800a6d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d102      	bne.n	800a50c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7f6 fd56 	bl	8000fb8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f022 0202 	bic.w	r2, r2, #2
 800a51a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a51c:	f7ff fbc6 	bl	8009cac <HAL_GetTick>
 800a520:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a522:	e012      	b.n	800a54a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a524:	f7ff fbc2 	bl	8009cac <HAL_GetTick>
 800a528:	4602      	mov	r2, r0
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	2b0a      	cmp	r3, #10
 800a530:	d90b      	bls.n	800a54a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a536:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2205      	movs	r2, #5
 800a542:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e0c5      	b.n	800a6d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	f003 0302 	and.w	r3, r3, #2
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1e5      	bne.n	800a524 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f042 0201 	orr.w	r2, r2, #1
 800a566:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a568:	f7ff fba0 	bl	8009cac <HAL_GetTick>
 800a56c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a56e:	e012      	b.n	800a596 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a570:	f7ff fb9c 	bl	8009cac <HAL_GetTick>
 800a574:	4602      	mov	r2, r0
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	2b0a      	cmp	r3, #10
 800a57c:	d90b      	bls.n	800a596 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a582:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2205      	movs	r2, #5
 800a58e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	e09f      	b.n	800a6d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	f003 0301 	and.w	r3, r3, #1
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d0e5      	beq.n	800a570 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	7e1b      	ldrb	r3, [r3, #24]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d108      	bne.n	800a5be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	e007      	b.n	800a5ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	7e5b      	ldrb	r3, [r3, #25]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d108      	bne.n	800a5e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	e007      	b.n	800a5f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	7e9b      	ldrb	r3, [r3, #26]
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d108      	bne.n	800a612 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f042 0220 	orr.w	r2, r2, #32
 800a60e:	601a      	str	r2, [r3, #0]
 800a610:	e007      	b.n	800a622 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f022 0220 	bic.w	r2, r2, #32
 800a620:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	7edb      	ldrb	r3, [r3, #27]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d108      	bne.n	800a63c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f022 0210 	bic.w	r2, r2, #16
 800a638:	601a      	str	r2, [r3, #0]
 800a63a:	e007      	b.n	800a64c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f042 0210 	orr.w	r2, r2, #16
 800a64a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	7f1b      	ldrb	r3, [r3, #28]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d108      	bne.n	800a666 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f042 0208 	orr.w	r2, r2, #8
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	e007      	b.n	800a676 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f022 0208 	bic.w	r2, r2, #8
 800a674:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	7f5b      	ldrb	r3, [r3, #29]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d108      	bne.n	800a690 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f042 0204 	orr.w	r2, r2, #4
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	e007      	b.n	800a6a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f022 0204 	bic.w	r2, r2, #4
 800a69e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689a      	ldr	r2, [r3, #8]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	431a      	orrs	r2, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	431a      	orrs	r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	ea42 0103 	orr.w	r1, r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	1e5a      	subs	r2, r3, #1
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
	...

0800a6e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a6f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800a6f8:	7cfb      	ldrb	r3, [r7, #19]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d003      	beq.n	800a706 <HAL_CAN_ConfigFilter+0x26>
 800a6fe:	7cfb      	ldrb	r3, [r7, #19]
 800a700:	2b02      	cmp	r3, #2
 800a702:	f040 80c7 	bne.w	800a894 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a69      	ldr	r2, [pc, #420]	; (800a8b0 <HAL_CAN_ConfigFilter+0x1d0>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d001      	beq.n	800a714 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800a710:	4b68      	ldr	r3, [pc, #416]	; (800a8b4 <HAL_CAN_ConfigFilter+0x1d4>)
 800a712:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a71a:	f043 0201 	orr.w	r2, r3, #1
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	4a63      	ldr	r2, [pc, #396]	; (800a8b4 <HAL_CAN_ConfigFilter+0x1d4>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d111      	bne.n	800a750 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a732:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a746:	021b      	lsls	r3, r3, #8
 800a748:	431a      	orrs	r2, r3
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	695b      	ldr	r3, [r3, #20]
 800a754:	f003 031f 	and.w	r3, r3, #31
 800a758:	2201      	movs	r2, #1
 800a75a:	fa02 f303 	lsl.w	r3, r2, r3
 800a75e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	43db      	mvns	r3, r3
 800a76a:	401a      	ands	r2, r3
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	69db      	ldr	r3, [r3, #28]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d123      	bne.n	800a7c2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	43db      	mvns	r3, r3
 800a784:	401a      	ands	r2, r3
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a79c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	3248      	adds	r2, #72	; 0x48
 800a7a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a7b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a7b8:	6979      	ldr	r1, [r7, #20]
 800a7ba:	3348      	adds	r3, #72	; 0x48
 800a7bc:	00db      	lsls	r3, r3, #3
 800a7be:	440b      	add	r3, r1
 800a7c0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d122      	bne.n	800a810 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	431a      	orrs	r2, r3
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a7ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	3248      	adds	r2, #72	; 0x48
 800a7f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a804:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a806:	6979      	ldr	r1, [r7, #20]
 800a808:	3348      	adds	r3, #72	; 0x48
 800a80a:	00db      	lsls	r3, r3, #3
 800a80c:	440b      	add	r3, r1
 800a80e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d109      	bne.n	800a82c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	43db      	mvns	r3, r3
 800a822:	401a      	ands	r2, r3
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800a82a:	e007      	b.n	800a83c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	431a      	orrs	r2, r3
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d109      	bne.n	800a858 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	43db      	mvns	r3, r3
 800a84e:	401a      	ands	r2, r3
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800a856:	e007      	b.n	800a868 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	431a      	orrs	r2, r3
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	6a1b      	ldr	r3, [r3, #32]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d107      	bne.n	800a880 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	431a      	orrs	r2, r3
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a886:	f023 0201 	bic.w	r2, r3, #1
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800a890:	2300      	movs	r3, #0
 800a892:	e006      	b.n	800a8a2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a898:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
  }
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	371c      	adds	r7, #28
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	40003400 	.word	0x40003400
 800a8b4:	40006400 	.word	0x40006400

0800a8b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d12e      	bne.n	800a92a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2202      	movs	r2, #2
 800a8d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f022 0201 	bic.w	r2, r2, #1
 800a8e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a8e4:	f7ff f9e2 	bl	8009cac <HAL_GetTick>
 800a8e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a8ea:	e012      	b.n	800a912 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a8ec:	f7ff f9de 	bl	8009cac <HAL_GetTick>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	1ad3      	subs	r3, r2, r3
 800a8f6:	2b0a      	cmp	r3, #10
 800a8f8:	d90b      	bls.n	800a912 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2205      	movs	r2, #5
 800a90a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	e012      	b.n	800a938 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1e5      	bne.n	800a8ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800a926:	2300      	movs	r3, #0
 800a928:	e006      	b.n	800a938 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a936:	2301      	movs	r3, #1
  }
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800a940:	b480      	push	{r7}
 800a942:	b087      	sub	sp, #28
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	607a      	str	r2, [r7, #4]
 800a94c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a954:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800a956:	7dfb      	ldrb	r3, [r7, #23]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d003      	beq.n	800a964 <HAL_CAN_GetRxMessage+0x24>
 800a95c:	7dfb      	ldrb	r3, [r7, #23]
 800a95e:	2b02      	cmp	r3, #2
 800a960:	f040 80f3 	bne.w	800ab4a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d10e      	bne.n	800a988 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	f003 0303 	and.w	r3, r3, #3
 800a974:	2b00      	cmp	r3, #0
 800a976:	d116      	bne.n	800a9a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	e0e7      	b.n	800ab58 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	f003 0303 	and.w	r3, r3, #3
 800a992:	2b00      	cmp	r3, #0
 800a994:	d107      	bne.n	800a9a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e0d8      	b.n	800ab58 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	331b      	adds	r3, #27
 800a9ae:	011b      	lsls	r3, r3, #4
 800a9b0:	4413      	add	r3, r2
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 0204 	and.w	r2, r3, #4
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10c      	bne.n	800a9de <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	331b      	adds	r3, #27
 800a9cc:	011b      	lsls	r3, r3, #4
 800a9ce:	4413      	add	r3, r2
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	0d5b      	lsrs	r3, r3, #21
 800a9d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	601a      	str	r2, [r3, #0]
 800a9dc:	e00b      	b.n	800a9f6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	331b      	adds	r3, #27
 800a9e6:	011b      	lsls	r3, r3, #4
 800a9e8:	4413      	add	r3, r2
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	08db      	lsrs	r3, r3, #3
 800a9ee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	331b      	adds	r3, #27
 800a9fe:	011b      	lsls	r3, r3, #4
 800aa00:	4413      	add	r3, r2
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f003 0202 	and.w	r2, r3, #2
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	331b      	adds	r3, #27
 800aa14:	011b      	lsls	r3, r3, #4
 800aa16:	4413      	add	r3, r2
 800aa18:	3304      	adds	r3, #4
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f003 020f 	and.w	r2, r3, #15
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	331b      	adds	r3, #27
 800aa2c:	011b      	lsls	r3, r3, #4
 800aa2e:	4413      	add	r3, r2
 800aa30:	3304      	adds	r3, #4
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	0a1b      	lsrs	r3, r3, #8
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	331b      	adds	r3, #27
 800aa44:	011b      	lsls	r3, r3, #4
 800aa46:	4413      	add	r3, r2
 800aa48:	3304      	adds	r3, #4
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	0c1b      	lsrs	r3, r3, #16
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	011b      	lsls	r3, r3, #4
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	b2da      	uxtb	r2, r3
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	011b      	lsls	r3, r3, #4
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	0a1a      	lsrs	r2, r3, #8
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	b2d2      	uxtb	r2, r2
 800aa82:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	011b      	lsls	r3, r3, #4
 800aa8c:	4413      	add	r3, r2
 800aa8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	0c1a      	lsrs	r2, r3, #16
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	3302      	adds	r3, #2
 800aa9a:	b2d2      	uxtb	r2, r2
 800aa9c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	011b      	lsls	r3, r3, #4
 800aaa6:	4413      	add	r3, r2
 800aaa8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	0e1a      	lsrs	r2, r3, #24
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	3303      	adds	r3, #3
 800aab4:	b2d2      	uxtb	r2, r2
 800aab6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	011b      	lsls	r3, r3, #4
 800aac0:	4413      	add	r3, r2
 800aac2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	3304      	adds	r3, #4
 800aacc:	b2d2      	uxtb	r2, r2
 800aace:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	011b      	lsls	r3, r3, #4
 800aad8:	4413      	add	r3, r2
 800aada:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	0a1a      	lsrs	r2, r3, #8
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	3305      	adds	r3, #5
 800aae6:	b2d2      	uxtb	r2, r2
 800aae8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	011b      	lsls	r3, r3, #4
 800aaf2:	4413      	add	r3, r2
 800aaf4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	0c1a      	lsrs	r2, r3, #16
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	3306      	adds	r3, #6
 800ab00:	b2d2      	uxtb	r2, r2
 800ab02:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	011b      	lsls	r3, r3, #4
 800ab0c:	4413      	add	r3, r2
 800ab0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	0e1a      	lsrs	r2, r3, #24
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	3307      	adds	r3, #7
 800ab1a:	b2d2      	uxtb	r2, r2
 800ab1c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d108      	bne.n	800ab36 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68da      	ldr	r2, [r3, #12]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f042 0220 	orr.w	r2, r2, #32
 800ab32:	60da      	str	r2, [r3, #12]
 800ab34:	e007      	b.n	800ab46 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	691a      	ldr	r2, [r3, #16]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f042 0220 	orr.w	r2, r2, #32
 800ab44:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	e006      	b.n	800ab58 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
  }
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	371c      	adds	r7, #28
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ab74:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d002      	beq.n	800ab82 <HAL_CAN_ActivateNotification+0x1e>
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d109      	bne.n	800ab96 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	6959      	ldr	r1, [r3, #20]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	430a      	orrs	r2, r1
 800ab90:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800ab92:	2300      	movs	r3, #0
 800ab94:	e006      	b.n	800aba4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
  }
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3714      	adds	r7, #20
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b08a      	sub	sp, #40	; 0x28
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800abb8:	2300      	movs	r3, #0
 800abba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	695b      	ldr	r3, [r3, #20]
 800abc2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800abec:	6a3b      	ldr	r3, [r7, #32]
 800abee:	f003 0301 	and.w	r3, r3, #1
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d07c      	beq.n	800acf0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	f003 0301 	and.w	r3, r3, #1
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d023      	beq.n	800ac48 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2201      	movs	r2, #1
 800ac06:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	f003 0302 	and.w	r3, r3, #2
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d003      	beq.n	800ac1a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f983 	bl	800af1e <HAL_CAN_TxMailbox0CompleteCallback>
 800ac18:	e016      	b.n	800ac48 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	f003 0304 	and.w	r3, r3, #4
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d004      	beq.n	800ac2e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800ac24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ac2a:	627b      	str	r3, [r7, #36]	; 0x24
 800ac2c:	e00c      	b.n	800ac48 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	f003 0308 	and.w	r3, r3, #8
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d004      	beq.n	800ac42 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800ac38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac3e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac40:	e002      	b.n	800ac48 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f989 	bl	800af5a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d024      	beq.n	800ac9c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac5a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d003      	beq.n	800ac6e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 f963 	bl	800af32 <HAL_CAN_TxMailbox1CompleteCallback>
 800ac6c:	e016      	b.n	800ac9c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d004      	beq.n	800ac82 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ac7e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac80:	e00c      	b.n	800ac9c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d004      	beq.n	800ac96 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac92:	627b      	str	r3, [r7, #36]	; 0x24
 800ac94:	e002      	b.n	800ac9c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f969 	bl	800af6e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d024      	beq.n	800acf0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800acae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d003      	beq.n	800acc2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 f943 	bl	800af46 <HAL_CAN_TxMailbox2CompleteCallback>
 800acc0:	e016      	b.n	800acf0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d004      	beq.n	800acd6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800accc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acd2:	627b      	str	r3, [r7, #36]	; 0x24
 800acd4:	e00c      	b.n	800acf0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d004      	beq.n	800acea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800ace0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ace6:	627b      	str	r3, [r7, #36]	; 0x24
 800ace8:	e002      	b.n	800acf0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f949 	bl	800af82 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	f003 0308 	and.w	r3, r3, #8
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00c      	beq.n	800ad14 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	f003 0310 	and.w	r3, r3, #16
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d007      	beq.n	800ad14 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800ad04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad0a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2210      	movs	r2, #16
 800ad12:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800ad14:	6a3b      	ldr	r3, [r7, #32]
 800ad16:	f003 0304 	and.w	r3, r3, #4
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00b      	beq.n	800ad36 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	f003 0308 	and.w	r3, r3, #8
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d006      	beq.n	800ad36 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2208      	movs	r2, #8
 800ad2e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f930 	bl	800af96 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800ad36:	6a3b      	ldr	r3, [r7, #32]
 800ad38:	f003 0302 	and.w	r3, r3, #2
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d009      	beq.n	800ad54 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	f003 0303 	and.w	r3, r3, #3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d002      	beq.n	800ad54 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7f6 f9e6 	bl	8001120 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800ad54:	6a3b      	ldr	r3, [r7, #32]
 800ad56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00c      	beq.n	800ad78 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	f003 0310 	and.w	r3, r3, #16
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d007      	beq.n	800ad78 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ad6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2210      	movs	r2, #16
 800ad76:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	f003 0320 	and.w	r3, r3, #32
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00b      	beq.n	800ad9a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	f003 0308 	and.w	r3, r3, #8
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d006      	beq.n	800ad9a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2208      	movs	r2, #8
 800ad92:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 f912 	bl	800afbe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	f003 0310 	and.w	r3, r3, #16
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d009      	beq.n	800adb8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	f003 0303 	and.w	r3, r3, #3
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d002      	beq.n	800adb8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f8f9 	bl	800afaa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800adb8:	6a3b      	ldr	r3, [r7, #32]
 800adba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00b      	beq.n	800adda <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	f003 0310 	and.w	r3, r3, #16
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d006      	beq.n	800adda <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2210      	movs	r2, #16
 800add2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 f8fc 	bl	800afd2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800adda:	6a3b      	ldr	r3, [r7, #32]
 800addc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d00b      	beq.n	800adfc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	f003 0308 	and.w	r3, r3, #8
 800adea:	2b00      	cmp	r3, #0
 800adec:	d006      	beq.n	800adfc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2208      	movs	r2, #8
 800adf4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 f8f5 	bl	800afe6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800adfc:	6a3b      	ldr	r3, [r7, #32]
 800adfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d07b      	beq.n	800aefe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	f003 0304 	and.w	r3, r3, #4
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d072      	beq.n	800aef6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800ae10:	6a3b      	ldr	r3, [r7, #32]
 800ae12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d008      	beq.n	800ae2c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d003      	beq.n	800ae2c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800ae24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae26:	f043 0301 	orr.w	r3, r3, #1
 800ae2a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
 800ae2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d008      	beq.n	800ae48 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d003      	beq.n	800ae48 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	f043 0302 	orr.w	r3, r3, #2
 800ae46:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d008      	beq.n	800ae64 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d003      	beq.n	800ae64 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5e:	f043 0304 	orr.w	r3, r3, #4
 800ae62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d043      	beq.n	800aef6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d03e      	beq.n	800aef6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae7e:	2b60      	cmp	r3, #96	; 0x60
 800ae80:	d02b      	beq.n	800aeda <HAL_CAN_IRQHandler+0x32a>
 800ae82:	2b60      	cmp	r3, #96	; 0x60
 800ae84:	d82e      	bhi.n	800aee4 <HAL_CAN_IRQHandler+0x334>
 800ae86:	2b50      	cmp	r3, #80	; 0x50
 800ae88:	d022      	beq.n	800aed0 <HAL_CAN_IRQHandler+0x320>
 800ae8a:	2b50      	cmp	r3, #80	; 0x50
 800ae8c:	d82a      	bhi.n	800aee4 <HAL_CAN_IRQHandler+0x334>
 800ae8e:	2b40      	cmp	r3, #64	; 0x40
 800ae90:	d019      	beq.n	800aec6 <HAL_CAN_IRQHandler+0x316>
 800ae92:	2b40      	cmp	r3, #64	; 0x40
 800ae94:	d826      	bhi.n	800aee4 <HAL_CAN_IRQHandler+0x334>
 800ae96:	2b30      	cmp	r3, #48	; 0x30
 800ae98:	d010      	beq.n	800aebc <HAL_CAN_IRQHandler+0x30c>
 800ae9a:	2b30      	cmp	r3, #48	; 0x30
 800ae9c:	d822      	bhi.n	800aee4 <HAL_CAN_IRQHandler+0x334>
 800ae9e:	2b10      	cmp	r3, #16
 800aea0:	d002      	beq.n	800aea8 <HAL_CAN_IRQHandler+0x2f8>
 800aea2:	2b20      	cmp	r3, #32
 800aea4:	d005      	beq.n	800aeb2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800aea6:	e01d      	b.n	800aee4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800aea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeaa:	f043 0308 	orr.w	r3, r3, #8
 800aeae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800aeb0:	e019      	b.n	800aee6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800aeb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb4:	f043 0310 	orr.w	r3, r3, #16
 800aeb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800aeba:	e014      	b.n	800aee6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800aebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebe:	f043 0320 	orr.w	r3, r3, #32
 800aec2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800aec4:	e00f      	b.n	800aee6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800aec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aecc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800aece:	e00a      	b.n	800aee6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800aed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aed6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800aed8:	e005      	b.n	800aee6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800aeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aedc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aee0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800aee2:	e000      	b.n	800aee6 <HAL_CAN_IRQHandler+0x336>
            break;
 800aee4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	699a      	ldr	r2, [r3, #24]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800aef4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2204      	movs	r2, #4
 800aefc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	2b00      	cmp	r3, #0
 800af02:	d008      	beq.n	800af16 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0a:	431a      	orrs	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f872 	bl	800affa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800af16:	bf00      	nop
 800af18:	3728      	adds	r7, #40	; 0x28
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800af1e:	b480      	push	{r7}
 800af20:	b083      	sub	sp, #12
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800af26:	bf00      	nop
 800af28:	370c      	adds	r7, #12
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800af32:	b480      	push	{r7}
 800af34:	b083      	sub	sp, #12
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800af3a:	bf00      	nop
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800af46:	b480      	push	{r7}
 800af48:	b083      	sub	sp, #12
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800af4e:	bf00      	nop
 800af50:	370c      	adds	r7, #12
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800af5a:	b480      	push	{r7}
 800af5c:	b083      	sub	sp, #12
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800af62:	bf00      	nop
 800af64:	370c      	adds	r7, #12
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr

0800af6e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800af6e:	b480      	push	{r7}
 800af70:	b083      	sub	sp, #12
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800af76:	bf00      	nop
 800af78:	370c      	adds	r7, #12
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800af82:	b480      	push	{r7}
 800af84:	b083      	sub	sp, #12
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800af8a:	bf00      	nop
 800af8c:	370c      	adds	r7, #12
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800af96:	b480      	push	{r7}
 800af98:	b083      	sub	sp, #12
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800af9e:	bf00      	nop
 800afa0:	370c      	adds	r7, #12
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr

0800afaa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800afaa:	b480      	push	{r7}
 800afac:	b083      	sub	sp, #12
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800afb2:	bf00      	nop
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800afbe:	b480      	push	{r7}
 800afc0:	b083      	sub	sp, #12
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800afc6:	bf00      	nop
 800afc8:	370c      	adds	r7, #12
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr

0800afd2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800afd2:	b480      	push	{r7}
 800afd4:	b083      	sub	sp, #12
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800afda:	bf00      	nop
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800afe6:	b480      	push	{r7}
 800afe8:	b083      	sub	sp, #12
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800afee:	bf00      	nop
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800affa:	b480      	push	{r7}
 800affc:	b083      	sub	sp, #12
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800b002:	bf00      	nop
 800b004:	370c      	adds	r7, #12
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
	...

0800b010 <__NVIC_SetPriorityGrouping>:
{
 800b010:	b480      	push	{r7}
 800b012:	b085      	sub	sp, #20
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f003 0307 	and.w	r3, r3, #7
 800b01e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b020:	4b0b      	ldr	r3, [pc, #44]	; (800b050 <__NVIC_SetPriorityGrouping+0x40>)
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b02c:	4013      	ands	r3, r2
 800b02e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b038:	4b06      	ldr	r3, [pc, #24]	; (800b054 <__NVIC_SetPriorityGrouping+0x44>)
 800b03a:	4313      	orrs	r3, r2
 800b03c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b03e:	4a04      	ldr	r2, [pc, #16]	; (800b050 <__NVIC_SetPriorityGrouping+0x40>)
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	60d3      	str	r3, [r2, #12]
}
 800b044:	bf00      	nop
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr
 800b050:	e000ed00 	.word	0xe000ed00
 800b054:	05fa0000 	.word	0x05fa0000

0800b058 <__NVIC_GetPriorityGrouping>:
{
 800b058:	b480      	push	{r7}
 800b05a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b05c:	4b04      	ldr	r3, [pc, #16]	; (800b070 <__NVIC_GetPriorityGrouping+0x18>)
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	0a1b      	lsrs	r3, r3, #8
 800b062:	f003 0307 	and.w	r3, r3, #7
}
 800b066:	4618      	mov	r0, r3
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr
 800b070:	e000ed00 	.word	0xe000ed00

0800b074 <__NVIC_EnableIRQ>:
{
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
 800b07a:	4603      	mov	r3, r0
 800b07c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b07e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b082:	2b00      	cmp	r3, #0
 800b084:	db0b      	blt.n	800b09e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b086:	79fb      	ldrb	r3, [r7, #7]
 800b088:	f003 021f 	and.w	r2, r3, #31
 800b08c:	4907      	ldr	r1, [pc, #28]	; (800b0ac <__NVIC_EnableIRQ+0x38>)
 800b08e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b092:	095b      	lsrs	r3, r3, #5
 800b094:	2001      	movs	r0, #1
 800b096:	fa00 f202 	lsl.w	r2, r0, r2
 800b09a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b09e:	bf00      	nop
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	e000e100 	.word	0xe000e100

0800b0b0 <__NVIC_DisableIRQ>:
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b0ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	db12      	blt.n	800b0e8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0c2:	79fb      	ldrb	r3, [r7, #7]
 800b0c4:	f003 021f 	and.w	r2, r3, #31
 800b0c8:	490a      	ldr	r1, [pc, #40]	; (800b0f4 <__NVIC_DisableIRQ+0x44>)
 800b0ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0ce:	095b      	lsrs	r3, r3, #5
 800b0d0:	2001      	movs	r0, #1
 800b0d2:	fa00 f202 	lsl.w	r2, r0, r2
 800b0d6:	3320      	adds	r3, #32
 800b0d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b0dc:	f3bf 8f4f 	dsb	sy
}
 800b0e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b0e2:	f3bf 8f6f 	isb	sy
}
 800b0e6:	bf00      	nop
}
 800b0e8:	bf00      	nop
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr
 800b0f4:	e000e100 	.word	0xe000e100

0800b0f8 <__NVIC_SetPriority>:
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	4603      	mov	r3, r0
 800b100:	6039      	str	r1, [r7, #0]
 800b102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	db0a      	blt.n	800b122 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	b2da      	uxtb	r2, r3
 800b110:	490c      	ldr	r1, [pc, #48]	; (800b144 <__NVIC_SetPriority+0x4c>)
 800b112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b116:	0112      	lsls	r2, r2, #4
 800b118:	b2d2      	uxtb	r2, r2
 800b11a:	440b      	add	r3, r1
 800b11c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b120:	e00a      	b.n	800b138 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	b2da      	uxtb	r2, r3
 800b126:	4908      	ldr	r1, [pc, #32]	; (800b148 <__NVIC_SetPriority+0x50>)
 800b128:	79fb      	ldrb	r3, [r7, #7]
 800b12a:	f003 030f 	and.w	r3, r3, #15
 800b12e:	3b04      	subs	r3, #4
 800b130:	0112      	lsls	r2, r2, #4
 800b132:	b2d2      	uxtb	r2, r2
 800b134:	440b      	add	r3, r1
 800b136:	761a      	strb	r2, [r3, #24]
}
 800b138:	bf00      	nop
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr
 800b144:	e000e100 	.word	0xe000e100
 800b148:	e000ed00 	.word	0xe000ed00

0800b14c <NVIC_EncodePriority>:
{
 800b14c:	b480      	push	{r7}
 800b14e:	b089      	sub	sp, #36	; 0x24
 800b150:	af00      	add	r7, sp, #0
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f003 0307 	and.w	r3, r3, #7
 800b15e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	f1c3 0307 	rsb	r3, r3, #7
 800b166:	2b04      	cmp	r3, #4
 800b168:	bf28      	it	cs
 800b16a:	2304      	movcs	r3, #4
 800b16c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	3304      	adds	r3, #4
 800b172:	2b06      	cmp	r3, #6
 800b174:	d902      	bls.n	800b17c <NVIC_EncodePriority+0x30>
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	3b03      	subs	r3, #3
 800b17a:	e000      	b.n	800b17e <NVIC_EncodePriority+0x32>
 800b17c:	2300      	movs	r3, #0
 800b17e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b180:	f04f 32ff 	mov.w	r2, #4294967295
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	fa02 f303 	lsl.w	r3, r2, r3
 800b18a:	43da      	mvns	r2, r3
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	401a      	ands	r2, r3
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b194:	f04f 31ff 	mov.w	r1, #4294967295
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	fa01 f303 	lsl.w	r3, r1, r3
 800b19e:	43d9      	mvns	r1, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b1a4:	4313      	orrs	r3, r2
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3724      	adds	r7, #36	; 0x24
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr

0800b1b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b082      	sub	sp, #8
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7ff ff28 	bl	800b010 <__NVIC_SetPriorityGrouping>
}
 800b1c0:	bf00      	nop
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
 800b1d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b1da:	f7ff ff3d 	bl	800b058 <__NVIC_GetPriorityGrouping>
 800b1de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	68b9      	ldr	r1, [r7, #8]
 800b1e4:	6978      	ldr	r0, [r7, #20]
 800b1e6:	f7ff ffb1 	bl	800b14c <NVIC_EncodePriority>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1f0:	4611      	mov	r1, r2
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7ff ff80 	bl	800b0f8 <__NVIC_SetPriority>
}
 800b1f8:	bf00      	nop
 800b1fa:	3718      	adds	r7, #24
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	4603      	mov	r3, r0
 800b208:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b20a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b20e:	4618      	mov	r0, r3
 800b210:	f7ff ff30 	bl	800b074 <__NVIC_EnableIRQ>
}
 800b214:	bf00      	nop
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	4603      	mov	r3, r0
 800b224:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7ff ff40 	bl	800b0b0 <__NVIC_DisableIRQ>
}
 800b230:	bf00      	nop
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d101      	bne.n	800b24a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800b246:	2301      	movs	r3, #1
 800b248:	e054      	b.n	800b2f4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	7f5b      	ldrb	r3, [r3, #29]
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	2b00      	cmp	r3, #0
 800b252:	d105      	bne.n	800b260 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7f6 f8aa 	bl	80013b4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2202      	movs	r2, #2
 800b264:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	791b      	ldrb	r3, [r3, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10c      	bne.n	800b288 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a22      	ldr	r2, [pc, #136]	; (800b2fc <HAL_CRC_Init+0xc4>)
 800b274:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	689a      	ldr	r2, [r3, #8]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f022 0218 	bic.w	r2, r2, #24
 800b284:	609a      	str	r2, [r3, #8]
 800b286:	e00c      	b.n	800b2a2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6899      	ldr	r1, [r3, #8]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	461a      	mov	r2, r3
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f834 	bl	800b300 <HAL_CRCEx_Polynomial_Set>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d001      	beq.n	800b2a2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e028      	b.n	800b2f4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	795b      	ldrb	r3, [r3, #5]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d105      	bne.n	800b2b6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b2b2:	611a      	str	r2, [r3, #16]
 800b2b4:	e004      	b.n	800b2c0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	6912      	ldr	r2, [r2, #16]
 800b2be:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	695a      	ldr	r2, [r3, #20]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	430a      	orrs	r2, r1
 800b2d4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	699a      	ldr	r2, [r3, #24]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	430a      	orrs	r2, r1
 800b2ea:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	04c11db7 	.word	0x04c11db7

0800b300 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b30c:	2300      	movs	r3, #0
 800b30e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800b310:	231f      	movs	r3, #31
 800b312:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800b314:	bf00      	nop
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	1e5a      	subs	r2, r3, #1
 800b31a:	613a      	str	r2, [r7, #16]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d009      	beq.n	800b334 <HAL_CRCEx_Polynomial_Set+0x34>
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	f003 031f 	and.w	r3, r3, #31
 800b326:	68ba      	ldr	r2, [r7, #8]
 800b328:	fa22 f303 	lsr.w	r3, r2, r3
 800b32c:	f003 0301 	and.w	r3, r3, #1
 800b330:	2b00      	cmp	r3, #0
 800b332:	d0f0      	beq.n	800b316 <HAL_CRCEx_Polynomial_Set+0x16>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2b18      	cmp	r3, #24
 800b338:	d846      	bhi.n	800b3c8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800b33a:	a201      	add	r2, pc, #4	; (adr r2, 800b340 <HAL_CRCEx_Polynomial_Set+0x40>)
 800b33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b340:	0800b3cf 	.word	0x0800b3cf
 800b344:	0800b3c9 	.word	0x0800b3c9
 800b348:	0800b3c9 	.word	0x0800b3c9
 800b34c:	0800b3c9 	.word	0x0800b3c9
 800b350:	0800b3c9 	.word	0x0800b3c9
 800b354:	0800b3c9 	.word	0x0800b3c9
 800b358:	0800b3c9 	.word	0x0800b3c9
 800b35c:	0800b3c9 	.word	0x0800b3c9
 800b360:	0800b3bd 	.word	0x0800b3bd
 800b364:	0800b3c9 	.word	0x0800b3c9
 800b368:	0800b3c9 	.word	0x0800b3c9
 800b36c:	0800b3c9 	.word	0x0800b3c9
 800b370:	0800b3c9 	.word	0x0800b3c9
 800b374:	0800b3c9 	.word	0x0800b3c9
 800b378:	0800b3c9 	.word	0x0800b3c9
 800b37c:	0800b3c9 	.word	0x0800b3c9
 800b380:	0800b3b1 	.word	0x0800b3b1
 800b384:	0800b3c9 	.word	0x0800b3c9
 800b388:	0800b3c9 	.word	0x0800b3c9
 800b38c:	0800b3c9 	.word	0x0800b3c9
 800b390:	0800b3c9 	.word	0x0800b3c9
 800b394:	0800b3c9 	.word	0x0800b3c9
 800b398:	0800b3c9 	.word	0x0800b3c9
 800b39c:	0800b3c9 	.word	0x0800b3c9
 800b3a0:	0800b3a5 	.word	0x0800b3a5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	2b06      	cmp	r3, #6
 800b3a8:	d913      	bls.n	800b3d2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b3ae:	e010      	b.n	800b3d2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	2b07      	cmp	r3, #7
 800b3b4:	d90f      	bls.n	800b3d6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b3ba:	e00c      	b.n	800b3d6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	2b0f      	cmp	r3, #15
 800b3c0:	d90b      	bls.n	800b3da <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b3c6:	e008      	b.n	800b3da <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b3cc:	e006      	b.n	800b3dc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b3ce:	bf00      	nop
 800b3d0:	e004      	b.n	800b3dc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b3d2:	bf00      	nop
 800b3d4:	e002      	b.n	800b3dc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b3d6:	bf00      	nop
 800b3d8:	e000      	b.n	800b3dc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b3da:	bf00      	nop
  }
  if (status == HAL_OK)
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d10d      	bne.n	800b3fe <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	f023 0118 	bic.w	r1, r3, #24
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	430a      	orrs	r2, r1
 800b3fc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b400:	4618      	mov	r0, r3
 800b402:	371c      	adds	r7, #28
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b414:	2300      	movs	r3, #0
 800b416:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b418:	f7fe fc48 	bl	8009cac <HAL_GetTick>
 800b41c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d101      	bne.n	800b428 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b424:	2301      	movs	r3, #1
 800b426:	e099      	b.n	800b55c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2202      	movs	r2, #2
 800b434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f022 0201 	bic.w	r2, r2, #1
 800b446:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b448:	e00f      	b.n	800b46a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b44a:	f7fe fc2f 	bl	8009cac <HAL_GetTick>
 800b44e:	4602      	mov	r2, r0
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	2b05      	cmp	r3, #5
 800b456:	d908      	bls.n	800b46a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2220      	movs	r2, #32
 800b45c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2203      	movs	r2, #3
 800b462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b466:	2303      	movs	r3, #3
 800b468:	e078      	b.n	800b55c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 0301 	and.w	r3, r3, #1
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1e8      	bne.n	800b44a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b480:	697a      	ldr	r2, [r7, #20]
 800b482:	4b38      	ldr	r3, [pc, #224]	; (800b564 <HAL_DMA_Init+0x158>)
 800b484:	4013      	ands	r3, r2
 800b486:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	685a      	ldr	r2, [r3, #4]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b496:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	691b      	ldr	r3, [r3, #16]
 800b49c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b4a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	699b      	ldr	r3, [r3, #24]
 800b4a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b4ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6a1b      	ldr	r3, [r3, #32]
 800b4b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b4b6:	697a      	ldr	r2, [r7, #20]
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c0:	2b04      	cmp	r3, #4
 800b4c2:	d107      	bne.n	800b4d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	697a      	ldr	r2, [r7, #20]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	697a      	ldr	r2, [r7, #20]
 800b4da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	695b      	ldr	r3, [r3, #20]
 800b4e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	f023 0307 	bic.w	r3, r3, #7
 800b4ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fa:	2b04      	cmp	r3, #4
 800b4fc:	d117      	bne.n	800b52e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b502:	697a      	ldr	r2, [r7, #20]
 800b504:	4313      	orrs	r3, r2
 800b506:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00e      	beq.n	800b52e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 fa0b 	bl	800b92c <DMA_CheckFifoParam>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d008      	beq.n	800b52e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2240      	movs	r2, #64	; 0x40
 800b520:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2201      	movs	r2, #1
 800b526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b52a:	2301      	movs	r3, #1
 800b52c:	e016      	b.n	800b55c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f9c2 	bl	800b8c0 <DMA_CalcBaseAndBitshift>
 800b53c:	4603      	mov	r3, r0
 800b53e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b544:	223f      	movs	r2, #63	; 0x3f
 800b546:	409a      	lsls	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2201      	movs	r2, #1
 800b556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	e010803f 	.word	0xe010803f

0800b568 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b02      	cmp	r3, #2
 800b57a:	d004      	beq.n	800b586 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2280      	movs	r2, #128	; 0x80
 800b580:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	e00c      	b.n	800b5a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2205      	movs	r2, #5
 800b58a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f022 0201 	bic.w	r2, r2, #1
 800b59c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b086      	sub	sp, #24
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800b5b8:	4b92      	ldr	r3, [pc, #584]	; (800b804 <HAL_DMA_IRQHandler+0x258>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a92      	ldr	r2, [pc, #584]	; (800b808 <HAL_DMA_IRQHandler+0x25c>)
 800b5be:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c2:	0a9b      	lsrs	r3, r3, #10
 800b5c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5d6:	2208      	movs	r2, #8
 800b5d8:	409a      	lsls	r2, r3
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	4013      	ands	r3, r2
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d01a      	beq.n	800b618 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f003 0304 	and.w	r3, r3, #4
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d013      	beq.n	800b618 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f022 0204 	bic.w	r2, r2, #4
 800b5fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b604:	2208      	movs	r2, #8
 800b606:	409a      	lsls	r2, r3
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b610:	f043 0201 	orr.w	r2, r3, #1
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b61c:	2201      	movs	r2, #1
 800b61e:	409a      	lsls	r2, r3
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	4013      	ands	r3, r2
 800b624:	2b00      	cmp	r3, #0
 800b626:	d012      	beq.n	800b64e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	695b      	ldr	r3, [r3, #20]
 800b62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00b      	beq.n	800b64e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b63a:	2201      	movs	r2, #1
 800b63c:	409a      	lsls	r2, r3
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b646:	f043 0202 	orr.w	r2, r3, #2
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b652:	2204      	movs	r2, #4
 800b654:	409a      	lsls	r2, r3
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	4013      	ands	r3, r2
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d012      	beq.n	800b684 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f003 0302 	and.w	r3, r3, #2
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00b      	beq.n	800b684 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b670:	2204      	movs	r2, #4
 800b672:	409a      	lsls	r2, r3
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b67c:	f043 0204 	orr.w	r2, r3, #4
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b688:	2210      	movs	r2, #16
 800b68a:	409a      	lsls	r2, r3
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	4013      	ands	r3, r2
 800b690:	2b00      	cmp	r3, #0
 800b692:	d043      	beq.n	800b71c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f003 0308 	and.w	r3, r3, #8
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d03c      	beq.n	800b71c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6a6:	2210      	movs	r2, #16
 800b6a8:	409a      	lsls	r2, r3
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d018      	beq.n	800b6ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d108      	bne.n	800b6dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d024      	beq.n	800b71c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	4798      	blx	r3
 800b6da:	e01f      	b.n	800b71c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d01b      	beq.n	800b71c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	4798      	blx	r3
 800b6ec:	e016      	b.n	800b71c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d107      	bne.n	800b70c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f022 0208 	bic.w	r2, r2, #8
 800b70a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b710:	2b00      	cmp	r3, #0
 800b712:	d003      	beq.n	800b71c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b720:	2220      	movs	r2, #32
 800b722:	409a      	lsls	r2, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	4013      	ands	r3, r2
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f000 808e 	beq.w	800b84a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f003 0310 	and.w	r3, r3, #16
 800b738:	2b00      	cmp	r3, #0
 800b73a:	f000 8086 	beq.w	800b84a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b742:	2220      	movs	r2, #32
 800b744:	409a      	lsls	r2, r3
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b05      	cmp	r3, #5
 800b754:	d136      	bne.n	800b7c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f022 0216 	bic.w	r2, r2, #22
 800b764:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	695a      	ldr	r2, [r3, #20]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b774:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d103      	bne.n	800b786 <HAL_DMA_IRQHandler+0x1da>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b782:	2b00      	cmp	r3, #0
 800b784:	d007      	beq.n	800b796 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f022 0208 	bic.w	r2, r2, #8
 800b794:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b79a:	223f      	movs	r2, #63	; 0x3f
 800b79c:	409a      	lsls	r2, r3
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d07d      	beq.n	800b8b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	4798      	blx	r3
        }
        return;
 800b7c2:	e078      	b.n	800b8b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d01c      	beq.n	800b80c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d108      	bne.n	800b7f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d030      	beq.n	800b84a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	4798      	blx	r3
 800b7f0:	e02b      	b.n	800b84a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d027      	beq.n	800b84a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	4798      	blx	r3
 800b802:	e022      	b.n	800b84a <HAL_DMA_IRQHandler+0x29e>
 800b804:	2000000c 	.word	0x2000000c
 800b808:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b816:	2b00      	cmp	r3, #0
 800b818:	d10f      	bne.n	800b83a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f022 0210 	bic.w	r2, r2, #16
 800b828:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d003      	beq.n	800b84a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d032      	beq.n	800b8b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b856:	f003 0301 	and.w	r3, r3, #1
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d022      	beq.n	800b8a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2205      	movs	r2, #5
 800b862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f022 0201 	bic.w	r2, r2, #1
 800b874:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	3301      	adds	r3, #1
 800b87a:	60bb      	str	r3, [r7, #8]
 800b87c:	697a      	ldr	r2, [r7, #20]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d307      	bcc.n	800b892 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d1f2      	bne.n	800b876 <HAL_DMA_IRQHandler+0x2ca>
 800b890:	e000      	b.n	800b894 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800b892:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d005      	beq.n	800b8b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	4798      	blx	r3
 800b8b4:	e000      	b.n	800b8b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 800b8b6:	bf00      	nop
    }
  }
}
 800b8b8:	3718      	adds	r7, #24
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop

0800b8c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	3b10      	subs	r3, #16
 800b8d0:	4a13      	ldr	r2, [pc, #76]	; (800b920 <DMA_CalcBaseAndBitshift+0x60>)
 800b8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8d6:	091b      	lsrs	r3, r3, #4
 800b8d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b8da:	4a12      	ldr	r2, [pc, #72]	; (800b924 <DMA_CalcBaseAndBitshift+0x64>)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	4413      	add	r3, r2
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d908      	bls.n	800b900 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	4b0c      	ldr	r3, [pc, #48]	; (800b928 <DMA_CalcBaseAndBitshift+0x68>)
 800b8f6:	4013      	ands	r3, r2
 800b8f8:	1d1a      	adds	r2, r3, #4
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	659a      	str	r2, [r3, #88]	; 0x58
 800b8fe:	e006      	b.n	800b90e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	461a      	mov	r2, r3
 800b906:	4b08      	ldr	r3, [pc, #32]	; (800b928 <DMA_CalcBaseAndBitshift+0x68>)
 800b908:	4013      	ands	r3, r2
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b912:	4618      	mov	r0, r3
 800b914:	3714      	adds	r7, #20
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	aaaaaaab 	.word	0xaaaaaaab
 800b924:	0802abfc 	.word	0x0802abfc
 800b928:	fffffc00 	.word	0xfffffc00

0800b92c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d11f      	bne.n	800b986 <DMA_CheckFifoParam+0x5a>
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	2b03      	cmp	r3, #3
 800b94a:	d856      	bhi.n	800b9fa <DMA_CheckFifoParam+0xce>
 800b94c:	a201      	add	r2, pc, #4	; (adr r2, 800b954 <DMA_CheckFifoParam+0x28>)
 800b94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b952:	bf00      	nop
 800b954:	0800b965 	.word	0x0800b965
 800b958:	0800b977 	.word	0x0800b977
 800b95c:	0800b965 	.word	0x0800b965
 800b960:	0800b9fb 	.word	0x0800b9fb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d046      	beq.n	800b9fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b970:	2301      	movs	r3, #1
 800b972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b974:	e043      	b.n	800b9fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b97e:	d140      	bne.n	800ba02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b984:	e03d      	b.n	800ba02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	699b      	ldr	r3, [r3, #24]
 800b98a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b98e:	d121      	bne.n	800b9d4 <DMA_CheckFifoParam+0xa8>
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	2b03      	cmp	r3, #3
 800b994:	d837      	bhi.n	800ba06 <DMA_CheckFifoParam+0xda>
 800b996:	a201      	add	r2, pc, #4	; (adr r2, 800b99c <DMA_CheckFifoParam+0x70>)
 800b998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b99c:	0800b9ad 	.word	0x0800b9ad
 800b9a0:	0800b9b3 	.word	0x0800b9b3
 800b9a4:	0800b9ad 	.word	0x0800b9ad
 800b9a8:	0800b9c5 	.word	0x0800b9c5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b9b0:	e030      	b.n	800ba14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d025      	beq.n	800ba0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b9c2:	e022      	b.n	800ba0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b9cc:	d11f      	bne.n	800ba0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b9d2:	e01c      	b.n	800ba0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	2b02      	cmp	r3, #2
 800b9d8:	d903      	bls.n	800b9e2 <DMA_CheckFifoParam+0xb6>
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	2b03      	cmp	r3, #3
 800b9de:	d003      	beq.n	800b9e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b9e0:	e018      	b.n	800ba14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b9e6:	e015      	b.n	800ba14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00e      	beq.n	800ba12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b9f8:	e00b      	b.n	800ba12 <DMA_CheckFifoParam+0xe6>
      break;
 800b9fa:	bf00      	nop
 800b9fc:	e00a      	b.n	800ba14 <DMA_CheckFifoParam+0xe8>
      break;
 800b9fe:	bf00      	nop
 800ba00:	e008      	b.n	800ba14 <DMA_CheckFifoParam+0xe8>
      break;
 800ba02:	bf00      	nop
 800ba04:	e006      	b.n	800ba14 <DMA_CheckFifoParam+0xe8>
      break;
 800ba06:	bf00      	nop
 800ba08:	e004      	b.n	800ba14 <DMA_CheckFifoParam+0xe8>
      break;
 800ba0a:	bf00      	nop
 800ba0c:	e002      	b.n	800ba14 <DMA_CheckFifoParam+0xe8>
      break;   
 800ba0e:	bf00      	nop
 800ba10:	e000      	b.n	800ba14 <DMA_CheckFifoParam+0xe8>
      break;
 800ba12:	bf00      	nop
    }
  } 
  
  return status; 
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3714      	adds	r7, #20
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop

0800ba24 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d101      	bne.n	800ba36 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e049      	b.n	800baca <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d106      	bne.n	800ba50 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7f5 fd30 	bl	80014b0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2202      	movs	r2, #2
 800ba54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	430a      	orrs	r2, r1
 800ba6c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba74:	f023 0107 	bic.w	r1, r3, #7
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	689a      	ldr	r2, [r3, #8]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	430a      	orrs	r2, r1
 800ba82:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba8a:	4b12      	ldr	r3, [pc, #72]	; (800bad4 <HAL_DMA2D_Init+0xb0>)
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	68d1      	ldr	r1, [r2, #12]
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	6812      	ldr	r2, [r2, #0]
 800ba96:	430b      	orrs	r3, r1
 800ba98:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	691b      	ldr	r3, [r3, #16]
 800baa8:	051a      	lsls	r2, r3, #20
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	055b      	lsls	r3, r3, #21
 800bab0:	431a      	orrs	r2, r3
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	430a      	orrs	r2, r1
 800bab8:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2200      	movs	r2, #0
 800babe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3708      	adds	r7, #8
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	ffffc000 	.word	0xffffc000

0800bad8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f003 0301 	and.w	r3, r3, #1
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d026      	beq.n	800bb48 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d021      	beq.n	800bb48 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb12:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb18:	f043 0201 	orr.w	r2, r3, #1
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2201      	movs	r2, #1
 800bb26:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2204      	movs	r2, #4
 800bb2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	69db      	ldr	r3, [r3, #28]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d003      	beq.n	800bb48 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	69db      	ldr	r3, [r3, #28]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f003 0320 	and.w	r3, r3, #32
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d026      	beq.n	800bba0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d021      	beq.n	800bba0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb6a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2220      	movs	r2, #32
 800bb72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb78:	f043 0202 	orr.w	r2, r3, #2
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2204      	movs	r2, #4
 800bb84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	69db      	ldr	r3, [r3, #28]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d003      	beq.n	800bba0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	69db      	ldr	r3, [r3, #28]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f003 0308 	and.w	r3, r3, #8
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d026      	beq.n	800bbf8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d021      	beq.n	800bbf8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bbc2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2208      	movs	r2, #8
 800bbca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbd0:	f043 0204 	orr.w	r2, r3, #4
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2204      	movs	r2, #4
 800bbdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	69db      	ldr	r3, [r3, #28]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d003      	beq.n	800bbf8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	69db      	ldr	r3, [r3, #28]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f003 0304 	and.w	r3, r3, #4
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d013      	beq.n	800bc2a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00e      	beq.n	800bc2a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc1a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2204      	movs	r2, #4
 800bc22:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f853 	bl	800bcd0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f003 0302 	and.w	r3, r3, #2
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d024      	beq.n	800bc7e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d01f      	beq.n	800bc7e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bc4c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2202      	movs	r2, #2
 800bc54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	699b      	ldr	r3, [r3, #24]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d003      	beq.n	800bc7e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	699b      	ldr	r3, [r3, #24]
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f003 0310 	and.w	r3, r3, #16
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d01f      	beq.n	800bcc8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d01a      	beq.n	800bcc8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bca0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2210      	movs	r2, #16
 800bca8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f80e 	bl	800bce4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800bcc8:	bf00      	nop
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800bcd8:	bf00      	nop
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800bcec:	bf00      	nop
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b087      	sub	sp, #28
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d101      	bne.n	800bd18 <HAL_DMA2D_ConfigLayer+0x20>
 800bd14:	2302      	movs	r3, #2
 800bd16:	e084      	b.n	800be22 <HAL_DMA2D_ConfigLayer+0x12a>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2202      	movs	r2, #2
 800bd24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800bd28:	683a      	ldr	r2, [r7, #0]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	005b      	lsls	r3, r3, #1
 800bd2e:	4413      	add	r3, r2
 800bd30:	00db      	lsls	r3, r3, #3
 800bd32:	3320      	adds	r3, #32
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	4413      	add	r3, r2
 800bd38:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	685a      	ldr	r2, [r3, #4]
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	041b      	lsls	r3, r3, #16
 800bd44:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800bd4c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	695b      	ldr	r3, [r3, #20]
 800bd52:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800bd54:	4313      	orrs	r3, r2
 800bd56:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800bd58:	4b35      	ldr	r3, [pc, #212]	; (800be30 <HAL_DMA2D_ConfigLayer+0x138>)
 800bd5a:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	2b0a      	cmp	r3, #10
 800bd62:	d003      	beq.n	800bd6c <HAL_DMA2D_ConfigLayer+0x74>
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	2b09      	cmp	r3, #9
 800bd6a:	d107      	bne.n	800bd7c <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bd74:	697a      	ldr	r2, [r7, #20]
 800bd76:	4313      	orrs	r3, r2
 800bd78:	617b      	str	r3, [r7, #20]
 800bd7a:	e005      	b.n	800bd88 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	061b      	lsls	r3, r3, #24
 800bd82:	697a      	ldr	r2, [r7, #20]
 800bd84:	4313      	orrs	r3, r2
 800bd86:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d120      	bne.n	800bdd0 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	43db      	mvns	r3, r3
 800bd98:	ea02 0103 	and.w	r1, r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	697a      	ldr	r2, [r7, #20]
 800bda2:	430a      	orrs	r2, r1
 800bda4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	693a      	ldr	r2, [r7, #16]
 800bdac:	6812      	ldr	r2, [r2, #0]
 800bdae:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	2b0a      	cmp	r3, #10
 800bdb6:	d003      	beq.n	800bdc0 <HAL_DMA2D_ConfigLayer+0xc8>
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	2b09      	cmp	r3, #9
 800bdbe:	d127      	bne.n	800be10 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	68da      	ldr	r2, [r3, #12]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800bdcc:	629a      	str	r2, [r3, #40]	; 0x28
 800bdce:	e01f      	b.n	800be10 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	69da      	ldr	r2, [r3, #28]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	43db      	mvns	r3, r3
 800bdda:	ea02 0103 	and.w	r1, r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	697a      	ldr	r2, [r7, #20]
 800bde4:	430a      	orrs	r2, r1
 800bde6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	693a      	ldr	r2, [r7, #16]
 800bdee:	6812      	ldr	r2, [r2, #0]
 800bdf0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	2b0a      	cmp	r3, #10
 800bdf8:	d003      	beq.n	800be02 <HAL_DMA2D_ConfigLayer+0x10a>
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	2b09      	cmp	r3, #9
 800be00:	d106      	bne.n	800be10 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	68da      	ldr	r2, [r3, #12]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800be0e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	371c      	adds	r7, #28
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	ff33000f 	.word	0xff33000f

0800be34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800be34:	b480      	push	{r7}
 800be36:	b089      	sub	sp, #36	; 0x24
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800be3e:	2300      	movs	r3, #0
 800be40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800be42:	2300      	movs	r3, #0
 800be44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800be46:	2300      	movs	r3, #0
 800be48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800be4a:	2300      	movs	r3, #0
 800be4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800be4e:	2300      	movs	r3, #0
 800be50:	61fb      	str	r3, [r7, #28]
 800be52:	e175      	b.n	800c140 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800be54:	2201      	movs	r2, #1
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	fa02 f303 	lsl.w	r3, r2, r3
 800be5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	697a      	ldr	r2, [r7, #20]
 800be64:	4013      	ands	r3, r2
 800be66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	f040 8164 	bne.w	800c13a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	2b01      	cmp	r3, #1
 800be78:	d00b      	beq.n	800be92 <HAL_GPIO_Init+0x5e>
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d007      	beq.n	800be92 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800be86:	2b11      	cmp	r3, #17
 800be88:	d003      	beq.n	800be92 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	2b12      	cmp	r3, #18
 800be90:	d130      	bne.n	800bef4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	005b      	lsls	r3, r3, #1
 800be9c:	2203      	movs	r2, #3
 800be9e:	fa02 f303 	lsl.w	r3, r2, r3
 800bea2:	43db      	mvns	r3, r3
 800bea4:	69ba      	ldr	r2, [r7, #24]
 800bea6:	4013      	ands	r3, r2
 800bea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	68da      	ldr	r2, [r3, #12]
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	005b      	lsls	r3, r3, #1
 800beb2:	fa02 f303 	lsl.w	r3, r2, r3
 800beb6:	69ba      	ldr	r2, [r7, #24]
 800beb8:	4313      	orrs	r3, r2
 800beba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	69ba      	ldr	r2, [r7, #24]
 800bec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bec8:	2201      	movs	r2, #1
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	fa02 f303 	lsl.w	r3, r2, r3
 800bed0:	43db      	mvns	r3, r3
 800bed2:	69ba      	ldr	r2, [r7, #24]
 800bed4:	4013      	ands	r3, r2
 800bed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	091b      	lsrs	r3, r3, #4
 800bede:	f003 0201 	and.w	r2, r3, #1
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	fa02 f303 	lsl.w	r3, r2, r3
 800bee8:	69ba      	ldr	r2, [r7, #24]
 800beea:	4313      	orrs	r3, r2
 800beec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	69ba      	ldr	r2, [r7, #24]
 800bef2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	005b      	lsls	r3, r3, #1
 800befe:	2203      	movs	r2, #3
 800bf00:	fa02 f303 	lsl.w	r3, r2, r3
 800bf04:	43db      	mvns	r3, r3
 800bf06:	69ba      	ldr	r2, [r7, #24]
 800bf08:	4013      	ands	r3, r2
 800bf0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	689a      	ldr	r2, [r3, #8]
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	fa02 f303 	lsl.w	r3, r2, r3
 800bf18:	69ba      	ldr	r2, [r7, #24]
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	69ba      	ldr	r2, [r7, #24]
 800bf22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	2b02      	cmp	r3, #2
 800bf2a:	d003      	beq.n	800bf34 <HAL_GPIO_Init+0x100>
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	2b12      	cmp	r3, #18
 800bf32:	d123      	bne.n	800bf7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	08da      	lsrs	r2, r3, #3
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	3208      	adds	r2, #8
 800bf3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	f003 0307 	and.w	r3, r3, #7
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	220f      	movs	r2, #15
 800bf4c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf50:	43db      	mvns	r3, r3
 800bf52:	69ba      	ldr	r2, [r7, #24]
 800bf54:	4013      	ands	r3, r2
 800bf56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	691a      	ldr	r2, [r3, #16]
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	f003 0307 	and.w	r3, r3, #7
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	fa02 f303 	lsl.w	r3, r2, r3
 800bf68:	69ba      	ldr	r2, [r7, #24]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	08da      	lsrs	r2, r3, #3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	3208      	adds	r2, #8
 800bf76:	69b9      	ldr	r1, [r7, #24]
 800bf78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	2203      	movs	r2, #3
 800bf88:	fa02 f303 	lsl.w	r3, r2, r3
 800bf8c:	43db      	mvns	r3, r3
 800bf8e:	69ba      	ldr	r2, [r7, #24]
 800bf90:	4013      	ands	r3, r2
 800bf92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	f003 0203 	and.w	r2, r3, #3
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	005b      	lsls	r3, r3, #1
 800bfa0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfa4:	69ba      	ldr	r2, [r7, #24]
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	69ba      	ldr	r2, [r7, #24]
 800bfae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 80be 	beq.w	800c13a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bfbe:	4b66      	ldr	r3, [pc, #408]	; (800c158 <HAL_GPIO_Init+0x324>)
 800bfc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfc2:	4a65      	ldr	r2, [pc, #404]	; (800c158 <HAL_GPIO_Init+0x324>)
 800bfc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bfc8:	6453      	str	r3, [r2, #68]	; 0x44
 800bfca:	4b63      	ldr	r3, [pc, #396]	; (800c158 <HAL_GPIO_Init+0x324>)
 800bfcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfd2:	60fb      	str	r3, [r7, #12]
 800bfd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800bfd6:	4a61      	ldr	r2, [pc, #388]	; (800c15c <HAL_GPIO_Init+0x328>)
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	089b      	lsrs	r3, r3, #2
 800bfdc:	3302      	adds	r3, #2
 800bfde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	f003 0303 	and.w	r3, r3, #3
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	220f      	movs	r2, #15
 800bfee:	fa02 f303 	lsl.w	r3, r2, r3
 800bff2:	43db      	mvns	r3, r3
 800bff4:	69ba      	ldr	r2, [r7, #24]
 800bff6:	4013      	ands	r3, r2
 800bff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4a58      	ldr	r2, [pc, #352]	; (800c160 <HAL_GPIO_Init+0x32c>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d037      	beq.n	800c072 <HAL_GPIO_Init+0x23e>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	4a57      	ldr	r2, [pc, #348]	; (800c164 <HAL_GPIO_Init+0x330>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d031      	beq.n	800c06e <HAL_GPIO_Init+0x23a>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4a56      	ldr	r2, [pc, #344]	; (800c168 <HAL_GPIO_Init+0x334>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d02b      	beq.n	800c06a <HAL_GPIO_Init+0x236>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	4a55      	ldr	r2, [pc, #340]	; (800c16c <HAL_GPIO_Init+0x338>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d025      	beq.n	800c066 <HAL_GPIO_Init+0x232>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4a54      	ldr	r2, [pc, #336]	; (800c170 <HAL_GPIO_Init+0x33c>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d01f      	beq.n	800c062 <HAL_GPIO_Init+0x22e>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4a53      	ldr	r2, [pc, #332]	; (800c174 <HAL_GPIO_Init+0x340>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d019      	beq.n	800c05e <HAL_GPIO_Init+0x22a>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4a52      	ldr	r2, [pc, #328]	; (800c178 <HAL_GPIO_Init+0x344>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d013      	beq.n	800c05a <HAL_GPIO_Init+0x226>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4a51      	ldr	r2, [pc, #324]	; (800c17c <HAL_GPIO_Init+0x348>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d00d      	beq.n	800c056 <HAL_GPIO_Init+0x222>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4a50      	ldr	r2, [pc, #320]	; (800c180 <HAL_GPIO_Init+0x34c>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d007      	beq.n	800c052 <HAL_GPIO_Init+0x21e>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	4a4f      	ldr	r2, [pc, #316]	; (800c184 <HAL_GPIO_Init+0x350>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d101      	bne.n	800c04e <HAL_GPIO_Init+0x21a>
 800c04a:	2309      	movs	r3, #9
 800c04c:	e012      	b.n	800c074 <HAL_GPIO_Init+0x240>
 800c04e:	230a      	movs	r3, #10
 800c050:	e010      	b.n	800c074 <HAL_GPIO_Init+0x240>
 800c052:	2308      	movs	r3, #8
 800c054:	e00e      	b.n	800c074 <HAL_GPIO_Init+0x240>
 800c056:	2307      	movs	r3, #7
 800c058:	e00c      	b.n	800c074 <HAL_GPIO_Init+0x240>
 800c05a:	2306      	movs	r3, #6
 800c05c:	e00a      	b.n	800c074 <HAL_GPIO_Init+0x240>
 800c05e:	2305      	movs	r3, #5
 800c060:	e008      	b.n	800c074 <HAL_GPIO_Init+0x240>
 800c062:	2304      	movs	r3, #4
 800c064:	e006      	b.n	800c074 <HAL_GPIO_Init+0x240>
 800c066:	2303      	movs	r3, #3
 800c068:	e004      	b.n	800c074 <HAL_GPIO_Init+0x240>
 800c06a:	2302      	movs	r3, #2
 800c06c:	e002      	b.n	800c074 <HAL_GPIO_Init+0x240>
 800c06e:	2301      	movs	r3, #1
 800c070:	e000      	b.n	800c074 <HAL_GPIO_Init+0x240>
 800c072:	2300      	movs	r3, #0
 800c074:	69fa      	ldr	r2, [r7, #28]
 800c076:	f002 0203 	and.w	r2, r2, #3
 800c07a:	0092      	lsls	r2, r2, #2
 800c07c:	4093      	lsls	r3, r2
 800c07e:	69ba      	ldr	r2, [r7, #24]
 800c080:	4313      	orrs	r3, r2
 800c082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c084:	4935      	ldr	r1, [pc, #212]	; (800c15c <HAL_GPIO_Init+0x328>)
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	089b      	lsrs	r3, r3, #2
 800c08a:	3302      	adds	r3, #2
 800c08c:	69ba      	ldr	r2, [r7, #24]
 800c08e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c092:	4b3d      	ldr	r3, [pc, #244]	; (800c188 <HAL_GPIO_Init+0x354>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	43db      	mvns	r3, r3
 800c09c:	69ba      	ldr	r2, [r7, #24]
 800c09e:	4013      	ands	r3, r2
 800c0a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d003      	beq.n	800c0b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c0ae:	69ba      	ldr	r2, [r7, #24]
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c0b6:	4a34      	ldr	r2, [pc, #208]	; (800c188 <HAL_GPIO_Init+0x354>)
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c0bc:	4b32      	ldr	r3, [pc, #200]	; (800c188 <HAL_GPIO_Init+0x354>)
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	43db      	mvns	r3, r3
 800c0c6:	69ba      	ldr	r2, [r7, #24]
 800c0c8:	4013      	ands	r3, r2
 800c0ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d003      	beq.n	800c0e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c0d8:	69ba      	ldr	r2, [r7, #24]
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c0e0:	4a29      	ldr	r2, [pc, #164]	; (800c188 <HAL_GPIO_Init+0x354>)
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c0e6:	4b28      	ldr	r3, [pc, #160]	; (800c188 <HAL_GPIO_Init+0x354>)
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	43db      	mvns	r3, r3
 800c0f0:	69ba      	ldr	r2, [r7, #24]
 800c0f2:	4013      	ands	r3, r2
 800c0f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d003      	beq.n	800c10a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c102:	69ba      	ldr	r2, [r7, #24]
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	4313      	orrs	r3, r2
 800c108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c10a:	4a1f      	ldr	r2, [pc, #124]	; (800c188 <HAL_GPIO_Init+0x354>)
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c110:	4b1d      	ldr	r3, [pc, #116]	; (800c188 <HAL_GPIO_Init+0x354>)
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	43db      	mvns	r3, r3
 800c11a:	69ba      	ldr	r2, [r7, #24]
 800c11c:	4013      	ands	r3, r2
 800c11e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d003      	beq.n	800c134 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c12c:	69ba      	ldr	r2, [r7, #24]
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	4313      	orrs	r3, r2
 800c132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c134:	4a14      	ldr	r2, [pc, #80]	; (800c188 <HAL_GPIO_Init+0x354>)
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	3301      	adds	r3, #1
 800c13e:	61fb      	str	r3, [r7, #28]
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	2b0f      	cmp	r3, #15
 800c144:	f67f ae86 	bls.w	800be54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800c148:	bf00      	nop
 800c14a:	bf00      	nop
 800c14c:	3724      	adds	r7, #36	; 0x24
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	40023800 	.word	0x40023800
 800c15c:	40013800 	.word	0x40013800
 800c160:	40020000 	.word	0x40020000
 800c164:	40020400 	.word	0x40020400
 800c168:	40020800 	.word	0x40020800
 800c16c:	40020c00 	.word	0x40020c00
 800c170:	40021000 	.word	0x40021000
 800c174:	40021400 	.word	0x40021400
 800c178:	40021800 	.word	0x40021800
 800c17c:	40021c00 	.word	0x40021c00
 800c180:	40022000 	.word	0x40022000
 800c184:	40022400 	.word	0x40022400
 800c188:	40013c00 	.word	0x40013c00

0800c18c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b087      	sub	sp, #28
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800c196:	2300      	movs	r3, #0
 800c198:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800c19a:	2300      	movs	r3, #0
 800c19c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	617b      	str	r3, [r7, #20]
 800c1a6:	e0d9      	b.n	800c35c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c1b0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c1b2:	683a      	ldr	r2, [r7, #0]
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	4013      	ands	r3, r2
 800c1b8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	f040 80c9 	bne.w	800c356 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800c1c4:	4a6b      	ldr	r2, [pc, #428]	; (800c374 <HAL_GPIO_DeInit+0x1e8>)
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	089b      	lsrs	r3, r3, #2
 800c1ca:	3302      	adds	r3, #2
 800c1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1d0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	f003 0303 	and.w	r3, r3, #3
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	220f      	movs	r2, #15
 800c1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e0:	68ba      	ldr	r2, [r7, #8]
 800c1e2:	4013      	ands	r3, r2
 800c1e4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a63      	ldr	r2, [pc, #396]	; (800c378 <HAL_GPIO_DeInit+0x1ec>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d037      	beq.n	800c25e <HAL_GPIO_DeInit+0xd2>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a62      	ldr	r2, [pc, #392]	; (800c37c <HAL_GPIO_DeInit+0x1f0>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d031      	beq.n	800c25a <HAL_GPIO_DeInit+0xce>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a61      	ldr	r2, [pc, #388]	; (800c380 <HAL_GPIO_DeInit+0x1f4>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d02b      	beq.n	800c256 <HAL_GPIO_DeInit+0xca>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4a60      	ldr	r2, [pc, #384]	; (800c384 <HAL_GPIO_DeInit+0x1f8>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d025      	beq.n	800c252 <HAL_GPIO_DeInit+0xc6>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a5f      	ldr	r2, [pc, #380]	; (800c388 <HAL_GPIO_DeInit+0x1fc>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d01f      	beq.n	800c24e <HAL_GPIO_DeInit+0xc2>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a5e      	ldr	r2, [pc, #376]	; (800c38c <HAL_GPIO_DeInit+0x200>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d019      	beq.n	800c24a <HAL_GPIO_DeInit+0xbe>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4a5d      	ldr	r2, [pc, #372]	; (800c390 <HAL_GPIO_DeInit+0x204>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d013      	beq.n	800c246 <HAL_GPIO_DeInit+0xba>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4a5c      	ldr	r2, [pc, #368]	; (800c394 <HAL_GPIO_DeInit+0x208>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d00d      	beq.n	800c242 <HAL_GPIO_DeInit+0xb6>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4a5b      	ldr	r2, [pc, #364]	; (800c398 <HAL_GPIO_DeInit+0x20c>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d007      	beq.n	800c23e <HAL_GPIO_DeInit+0xb2>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	4a5a      	ldr	r2, [pc, #360]	; (800c39c <HAL_GPIO_DeInit+0x210>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d101      	bne.n	800c23a <HAL_GPIO_DeInit+0xae>
 800c236:	2309      	movs	r3, #9
 800c238:	e012      	b.n	800c260 <HAL_GPIO_DeInit+0xd4>
 800c23a:	230a      	movs	r3, #10
 800c23c:	e010      	b.n	800c260 <HAL_GPIO_DeInit+0xd4>
 800c23e:	2308      	movs	r3, #8
 800c240:	e00e      	b.n	800c260 <HAL_GPIO_DeInit+0xd4>
 800c242:	2307      	movs	r3, #7
 800c244:	e00c      	b.n	800c260 <HAL_GPIO_DeInit+0xd4>
 800c246:	2306      	movs	r3, #6
 800c248:	e00a      	b.n	800c260 <HAL_GPIO_DeInit+0xd4>
 800c24a:	2305      	movs	r3, #5
 800c24c:	e008      	b.n	800c260 <HAL_GPIO_DeInit+0xd4>
 800c24e:	2304      	movs	r3, #4
 800c250:	e006      	b.n	800c260 <HAL_GPIO_DeInit+0xd4>
 800c252:	2303      	movs	r3, #3
 800c254:	e004      	b.n	800c260 <HAL_GPIO_DeInit+0xd4>
 800c256:	2302      	movs	r3, #2
 800c258:	e002      	b.n	800c260 <HAL_GPIO_DeInit+0xd4>
 800c25a:	2301      	movs	r3, #1
 800c25c:	e000      	b.n	800c260 <HAL_GPIO_DeInit+0xd4>
 800c25e:	2300      	movs	r3, #0
 800c260:	697a      	ldr	r2, [r7, #20]
 800c262:	f002 0203 	and.w	r2, r2, #3
 800c266:	0092      	lsls	r2, r2, #2
 800c268:	4093      	lsls	r3, r2
 800c26a:	68ba      	ldr	r2, [r7, #8]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d132      	bne.n	800c2d6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c270:	4b4b      	ldr	r3, [pc, #300]	; (800c3a0 <HAL_GPIO_DeInit+0x214>)
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	43db      	mvns	r3, r3
 800c278:	4949      	ldr	r1, [pc, #292]	; (800c3a0 <HAL_GPIO_DeInit+0x214>)
 800c27a:	4013      	ands	r3, r2
 800c27c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c27e:	4b48      	ldr	r3, [pc, #288]	; (800c3a0 <HAL_GPIO_DeInit+0x214>)
 800c280:	685a      	ldr	r2, [r3, #4]
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	43db      	mvns	r3, r3
 800c286:	4946      	ldr	r1, [pc, #280]	; (800c3a0 <HAL_GPIO_DeInit+0x214>)
 800c288:	4013      	ands	r3, r2
 800c28a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c28c:	4b44      	ldr	r3, [pc, #272]	; (800c3a0 <HAL_GPIO_DeInit+0x214>)
 800c28e:	689a      	ldr	r2, [r3, #8]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	43db      	mvns	r3, r3
 800c294:	4942      	ldr	r1, [pc, #264]	; (800c3a0 <HAL_GPIO_DeInit+0x214>)
 800c296:	4013      	ands	r3, r2
 800c298:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c29a:	4b41      	ldr	r3, [pc, #260]	; (800c3a0 <HAL_GPIO_DeInit+0x214>)
 800c29c:	68da      	ldr	r2, [r3, #12]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	43db      	mvns	r3, r3
 800c2a2:	493f      	ldr	r1, [pc, #252]	; (800c3a0 <HAL_GPIO_DeInit+0x214>)
 800c2a4:	4013      	ands	r3, r2
 800c2a6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	f003 0303 	and.w	r3, r3, #3
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	220f      	movs	r2, #15
 800c2b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c2b6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800c2b8:	4a2e      	ldr	r2, [pc, #184]	; (800c374 <HAL_GPIO_DeInit+0x1e8>)
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	089b      	lsrs	r3, r3, #2
 800c2be:	3302      	adds	r3, #2
 800c2c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	43da      	mvns	r2, r3
 800c2c8:	482a      	ldr	r0, [pc, #168]	; (800c374 <HAL_GPIO_DeInit+0x1e8>)
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	089b      	lsrs	r3, r3, #2
 800c2ce:	400a      	ands	r2, r1
 800c2d0:	3302      	adds	r3, #2
 800c2d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	005b      	lsls	r3, r3, #1
 800c2de:	2103      	movs	r1, #3
 800c2e0:	fa01 f303 	lsl.w	r3, r1, r3
 800c2e4:	43db      	mvns	r3, r3
 800c2e6:	401a      	ands	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	08da      	lsrs	r2, r3, #3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	3208      	adds	r2, #8
 800c2f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	f003 0307 	and.w	r3, r3, #7
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	220f      	movs	r2, #15
 800c302:	fa02 f303 	lsl.w	r3, r2, r3
 800c306:	43db      	mvns	r3, r3
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	08d2      	lsrs	r2, r2, #3
 800c30c:	4019      	ands	r1, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	3208      	adds	r2, #8
 800c312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	68da      	ldr	r2, [r3, #12]
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	005b      	lsls	r3, r3, #1
 800c31e:	2103      	movs	r1, #3
 800c320:	fa01 f303 	lsl.w	r3, r1, r3
 800c324:	43db      	mvns	r3, r3
 800c326:	401a      	ands	r2, r3
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	685a      	ldr	r2, [r3, #4]
 800c330:	2101      	movs	r1, #1
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	fa01 f303 	lsl.w	r3, r1, r3
 800c338:	43db      	mvns	r3, r3
 800c33a:	401a      	ands	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	689a      	ldr	r2, [r3, #8]
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	005b      	lsls	r3, r3, #1
 800c348:	2103      	movs	r1, #3
 800c34a:	fa01 f303 	lsl.w	r3, r1, r3
 800c34e:	43db      	mvns	r3, r3
 800c350:	401a      	ands	r2, r3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	3301      	adds	r3, #1
 800c35a:	617b      	str	r3, [r7, #20]
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	2b0f      	cmp	r3, #15
 800c360:	f67f af22 	bls.w	800c1a8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c364:	bf00      	nop
 800c366:	bf00      	nop
 800c368:	371c      	adds	r7, #28
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	40013800 	.word	0x40013800
 800c378:	40020000 	.word	0x40020000
 800c37c:	40020400 	.word	0x40020400
 800c380:	40020800 	.word	0x40020800
 800c384:	40020c00 	.word	0x40020c00
 800c388:	40021000 	.word	0x40021000
 800c38c:	40021400 	.word	0x40021400
 800c390:	40021800 	.word	0x40021800
 800c394:	40021c00 	.word	0x40021c00
 800c398:	40022000 	.word	0x40022000
 800c39c:	40022400 	.word	0x40022400
 800c3a0:	40013c00 	.word	0x40013c00

0800c3a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	807b      	strh	r3, [r7, #2]
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c3b4:	787b      	ldrb	r3, [r7, #1]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d003      	beq.n	800c3c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c3ba:	887a      	ldrh	r2, [r7, #2]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c3c0:	e003      	b.n	800c3ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c3c2:	887b      	ldrh	r3, [r7, #2]
 800c3c4:	041a      	lsls	r2, r3, #16
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	619a      	str	r2, [r3, #24]
}
 800c3ca:	bf00      	nop
 800c3cc:	370c      	adds	r7, #12
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr

0800c3d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c3d6:	b480      	push	{r7}
 800c3d8:	b085      	sub	sp, #20
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
 800c3de:	460b      	mov	r3, r1
 800c3e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	695b      	ldr	r3, [r3, #20]
 800c3e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c3e8:	887a      	ldrh	r2, [r7, #2]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	041a      	lsls	r2, r3, #16
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	43d9      	mvns	r1, r3
 800c3f4:	887b      	ldrh	r3, [r7, #2]
 800c3f6:	400b      	ands	r3, r1
 800c3f8:	431a      	orrs	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	619a      	str	r2, [r3, #24]
}
 800c3fe:	bf00      	nop
 800c400:	3714      	adds	r7, #20
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
	...

0800c40c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d101      	bne.n	800c41e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800c41a:	2301      	movs	r3, #1
 800c41c:	e0bf      	b.n	800c59e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800c424:	b2db      	uxtb	r3, r3
 800c426:	2b00      	cmp	r3, #0
 800c428:	d106      	bne.n	800c438 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2200      	movs	r2, #0
 800c42e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7f5 fbb2 	bl	8001b9c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2202      	movs	r2, #2
 800c43c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	699a      	ldr	r2, [r3, #24]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800c44e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6999      	ldr	r1, [r3, #24]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	685a      	ldr	r2, [r3, #4]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	689b      	ldr	r3, [r3, #8]
 800c45e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c464:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	430a      	orrs	r2, r1
 800c472:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	6899      	ldr	r1, [r3, #8]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	4b4a      	ldr	r3, [pc, #296]	; (800c5a8 <HAL_LTDC_Init+0x19c>)
 800c480:	400b      	ands	r3, r1
 800c482:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	695b      	ldr	r3, [r3, #20]
 800c488:	041b      	lsls	r3, r3, #16
 800c48a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	6899      	ldr	r1, [r3, #8]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	699a      	ldr	r2, [r3, #24]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	431a      	orrs	r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	430a      	orrs	r2, r1
 800c4a0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	68d9      	ldr	r1, [r3, #12]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	4b3e      	ldr	r3, [pc, #248]	; (800c5a8 <HAL_LTDC_Init+0x19c>)
 800c4ae:	400b      	ands	r3, r1
 800c4b0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	69db      	ldr	r3, [r3, #28]
 800c4b6:	041b      	lsls	r3, r3, #16
 800c4b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68d9      	ldr	r1, [r3, #12]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6a1a      	ldr	r2, [r3, #32]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	431a      	orrs	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	430a      	orrs	r2, r1
 800c4ce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	6919      	ldr	r1, [r3, #16]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	4b33      	ldr	r3, [pc, #204]	; (800c5a8 <HAL_LTDC_Init+0x19c>)
 800c4dc:	400b      	ands	r3, r1
 800c4de:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e4:	041b      	lsls	r3, r3, #16
 800c4e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	6919      	ldr	r1, [r3, #16]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	431a      	orrs	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	430a      	orrs	r2, r1
 800c4fc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	6959      	ldr	r1, [r3, #20]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	4b27      	ldr	r3, [pc, #156]	; (800c5a8 <HAL_LTDC_Init+0x19c>)
 800c50a:	400b      	ands	r3, r1
 800c50c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c512:	041b      	lsls	r3, r3, #16
 800c514:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	6959      	ldr	r1, [r3, #20]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	431a      	orrs	r2, r3
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	430a      	orrs	r2, r1
 800c52a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c532:	021b      	lsls	r3, r3, #8
 800c534:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c53c:	041b      	lsls	r3, r3, #16
 800c53e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800c54e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c556:	68ba      	ldr	r2, [r7, #8]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	4313      	orrs	r3, r2
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800c562:	431a      	orrs	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	430a      	orrs	r2, r1
 800c56a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f042 0206 	orr.w	r2, r2, #6
 800c57a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	699a      	ldr	r2, [r3, #24]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f042 0201 	orr.w	r2, r2, #1
 800c58a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2201      	movs	r2, #1
 800c598:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	f000f800 	.word	0xf000f800

0800c5ac <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5c2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f003 0304 	and.w	r3, r3, #4
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d023      	beq.n	800c616 <HAL_LTDC_IRQHandler+0x6a>
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	f003 0304 	and.w	r3, r3, #4
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d01e      	beq.n	800c616 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f022 0204 	bic.w	r2, r2, #4
 800c5e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2204      	movs	r2, #4
 800c5ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c5f6:	f043 0201 	orr.w	r2, r3, #1
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2204      	movs	r2, #4
 800c604:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 f86f 	bl	800c6f4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f003 0302 	and.w	r3, r3, #2
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d023      	beq.n	800c668 <HAL_LTDC_IRQHandler+0xbc>
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	f003 0302 	and.w	r3, r3, #2
 800c626:	2b00      	cmp	r3, #0
 800c628:	d01e      	beq.n	800c668 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f022 0202 	bic.w	r2, r2, #2
 800c638:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2202      	movs	r2, #2
 800c640:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c648:	f043 0202 	orr.w	r2, r3, #2
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2204      	movs	r2, #4
 800c656:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2200      	movs	r2, #0
 800c65e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 f846 	bl	800c6f4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f003 0301 	and.w	r3, r3, #1
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d01b      	beq.n	800c6aa <HAL_LTDC_IRQHandler+0xfe>
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	f003 0301 	and.w	r3, r3, #1
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d016      	beq.n	800c6aa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f022 0201 	bic.w	r2, r2, #1
 800c68a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2201      	movs	r2, #1
 800c692:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2201      	movs	r2, #1
 800c698:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f7f8 fbbf 	bl	8004e28 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f003 0308 	and.w	r3, r3, #8
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d01b      	beq.n	800c6ec <HAL_LTDC_IRQHandler+0x140>
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	f003 0308 	and.w	r3, r3, #8
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d016      	beq.n	800c6ec <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f022 0208 	bic.w	r2, r2, #8
 800c6cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2208      	movs	r2, #8
 800c6d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f80e 	bl	800c708 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800c6ec:	bf00      	nop
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800c6fc:	bf00      	nop
 800c6fe:	370c      	adds	r7, #12
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800c710:	bf00      	nop
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c71c:	b5b0      	push	{r4, r5, r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d101      	bne.n	800c736 <HAL_LTDC_ConfigLayer+0x1a>
 800c732:	2302      	movs	r3, #2
 800c734:	e02c      	b.n	800c790 <HAL_LTDC_ConfigLayer+0x74>
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2201      	movs	r2, #1
 800c73a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2202      	movs	r2, #2
 800c742:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2134      	movs	r1, #52	; 0x34
 800c74c:	fb01 f303 	mul.w	r3, r1, r3
 800c750:	4413      	add	r3, r2
 800c752:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	4614      	mov	r4, r2
 800c75a:	461d      	mov	r5, r3
 800c75c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c75e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c768:	682b      	ldr	r3, [r5, #0]
 800c76a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	68b9      	ldr	r1, [r7, #8]
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f000 f849 	bl	800c808 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2201      	movs	r2, #1
 800c77c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2200      	movs	r2, #0
 800c78a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c78e:	2300      	movs	r3, #0
}
 800c790:	4618      	mov	r0, r3
 800c792:	3710      	adds	r7, #16
 800c794:	46bd      	mov	sp, r7
 800c796:	bdb0      	pop	{r4, r5, r7, pc}

0800c798 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d101      	bne.n	800c7b0 <HAL_LTDC_ProgramLineEvent+0x18>
 800c7ac:	2302      	movs	r3, #2
 800c7ae:	e023      	b.n	800c7f8 <HAL_LTDC_ProgramLineEvent+0x60>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2202      	movs	r2, #2
 800c7bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f022 0201 	bic.w	r2, r2, #1
 800c7ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800c7d0:	4a0c      	ldr	r2, [pc, #48]	; (800c804 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f042 0201 	orr.w	r2, r2, #1
 800c7e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c7f6:	2300      	movs	r3, #0
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr
 800c804:	40016800 	.word	0x40016800

0800c808 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c808:	b480      	push	{r7}
 800c80a:	b089      	sub	sp, #36	; 0x24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	685a      	ldr	r2, [r3, #4]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	0c1b      	lsrs	r3, r3, #16
 800c820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c824:	4413      	add	r3, r2
 800c826:	041b      	lsls	r3, r3, #16
 800c828:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	461a      	mov	r2, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	01db      	lsls	r3, r3, #7
 800c834:	4413      	add	r3, r2
 800c836:	3384      	adds	r3, #132	; 0x84
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	6812      	ldr	r2, [r2, #0]
 800c83e:	4611      	mov	r1, r2
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	01d2      	lsls	r2, r2, #7
 800c844:	440a      	add	r2, r1
 800c846:	3284      	adds	r2, #132	; 0x84
 800c848:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c84c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	0c1b      	lsrs	r3, r3, #16
 800c85a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c85e:	4413      	add	r3, r2
 800c860:	1c5a      	adds	r2, r3, #1
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4619      	mov	r1, r3
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	01db      	lsls	r3, r3, #7
 800c86c:	440b      	add	r3, r1
 800c86e:	3384      	adds	r3, #132	; 0x84
 800c870:	4619      	mov	r1, r3
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	4313      	orrs	r3, r2
 800c876:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	68da      	ldr	r2, [r3, #12]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c886:	4413      	add	r3, r2
 800c888:	041b      	lsls	r3, r3, #16
 800c88a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	461a      	mov	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	01db      	lsls	r3, r3, #7
 800c896:	4413      	add	r3, r2
 800c898:	3384      	adds	r3, #132	; 0x84
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	68fa      	ldr	r2, [r7, #12]
 800c89e:	6812      	ldr	r2, [r2, #0]
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	01d2      	lsls	r2, r2, #7
 800c8a6:	440a      	add	r2, r1
 800c8a8:	3284      	adds	r2, #132	; 0x84
 800c8aa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c8ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	689a      	ldr	r2, [r3, #8]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	68db      	ldr	r3, [r3, #12]
 800c8ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c8be:	4413      	add	r3, r2
 800c8c0:	1c5a      	adds	r2, r3, #1
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	01db      	lsls	r3, r3, #7
 800c8cc:	440b      	add	r3, r1
 800c8ce:	3384      	adds	r3, #132	; 0x84
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	461a      	mov	r2, r3
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	01db      	lsls	r3, r3, #7
 800c8e2:	4413      	add	r3, r2
 800c8e4:	3384      	adds	r3, #132	; 0x84
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	6812      	ldr	r2, [r2, #0]
 800c8ec:	4611      	mov	r1, r2
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	01d2      	lsls	r2, r2, #7
 800c8f2:	440a      	add	r2, r1
 800c8f4:	3284      	adds	r2, #132	; 0x84
 800c8f6:	f023 0307 	bic.w	r3, r3, #7
 800c8fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	461a      	mov	r2, r3
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	01db      	lsls	r3, r3, #7
 800c906:	4413      	add	r3, r2
 800c908:	3384      	adds	r3, #132	; 0x84
 800c90a:	461a      	mov	r2, r3
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	691b      	ldr	r3, [r3, #16]
 800c910:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c918:	021b      	lsls	r3, r3, #8
 800c91a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c922:	041b      	lsls	r3, r3, #16
 800c924:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	699b      	ldr	r3, [r3, #24]
 800c92a:	061b      	lsls	r3, r3, #24
 800c92c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	461a      	mov	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	01db      	lsls	r3, r3, #7
 800c938:	4413      	add	r3, r2
 800c93a:	3384      	adds	r3, #132	; 0x84
 800c93c:	699b      	ldr	r3, [r3, #24]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	461a      	mov	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	01db      	lsls	r3, r3, #7
 800c948:	4413      	add	r3, r2
 800c94a:	3384      	adds	r3, #132	; 0x84
 800c94c:	461a      	mov	r2, r3
 800c94e:	2300      	movs	r3, #0
 800c950:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c958:	461a      	mov	r2, r3
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	431a      	orrs	r2, r3
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	431a      	orrs	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4619      	mov	r1, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	01db      	lsls	r3, r3, #7
 800c96c:	440b      	add	r3, r1
 800c96e:	3384      	adds	r3, #132	; 0x84
 800c970:	4619      	mov	r1, r3
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	4313      	orrs	r3, r2
 800c976:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	461a      	mov	r2, r3
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	01db      	lsls	r3, r3, #7
 800c982:	4413      	add	r3, r2
 800c984:	3384      	adds	r3, #132	; 0x84
 800c986:	695b      	ldr	r3, [r3, #20]
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	6812      	ldr	r2, [r2, #0]
 800c98c:	4611      	mov	r1, r2
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	01d2      	lsls	r2, r2, #7
 800c992:	440a      	add	r2, r1
 800c994:	3284      	adds	r2, #132	; 0x84
 800c996:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c99a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	01db      	lsls	r3, r3, #7
 800c9a6:	4413      	add	r3, r2
 800c9a8:	3384      	adds	r3, #132	; 0x84
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	695b      	ldr	r3, [r3, #20]
 800c9b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	01db      	lsls	r3, r3, #7
 800c9bc:	4413      	add	r3, r2
 800c9be:	3384      	adds	r3, #132	; 0x84
 800c9c0:	69da      	ldr	r2, [r3, #28]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	01db      	lsls	r3, r3, #7
 800c9cc:	440b      	add	r3, r1
 800c9ce:	3384      	adds	r3, #132	; 0x84
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	4b58      	ldr	r3, [pc, #352]	; (800cb34 <LTDC_SetConfig+0x32c>)
 800c9d4:	4013      	ands	r3, r2
 800c9d6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	69da      	ldr	r2, [r3, #28]
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	6a1b      	ldr	r3, [r3, #32]
 800c9e0:	68f9      	ldr	r1, [r7, #12]
 800c9e2:	6809      	ldr	r1, [r1, #0]
 800c9e4:	4608      	mov	r0, r1
 800c9e6:	6879      	ldr	r1, [r7, #4]
 800c9e8:	01c9      	lsls	r1, r1, #7
 800c9ea:	4401      	add	r1, r0
 800c9ec:	3184      	adds	r1, #132	; 0x84
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	01db      	lsls	r3, r3, #7
 800c9fc:	4413      	add	r3, r2
 800c9fe:	3384      	adds	r3, #132	; 0x84
 800ca00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	461a      	mov	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	01db      	lsls	r3, r3, #7
 800ca0c:	4413      	add	r3, r2
 800ca0e:	3384      	adds	r3, #132	; 0x84
 800ca10:	461a      	mov	r2, r3
 800ca12:	2300      	movs	r3, #0
 800ca14:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	01db      	lsls	r3, r3, #7
 800ca20:	4413      	add	r3, r2
 800ca22:	3384      	adds	r3, #132	; 0x84
 800ca24:	461a      	mov	r2, r3
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca2a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	691b      	ldr	r3, [r3, #16]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d102      	bne.n	800ca3a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800ca34:	2304      	movs	r3, #4
 800ca36:	61fb      	str	r3, [r7, #28]
 800ca38:	e01b      	b.n	800ca72 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	691b      	ldr	r3, [r3, #16]
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d102      	bne.n	800ca48 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800ca42:	2303      	movs	r3, #3
 800ca44:	61fb      	str	r3, [r7, #28]
 800ca46:	e014      	b.n	800ca72 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	691b      	ldr	r3, [r3, #16]
 800ca4c:	2b04      	cmp	r3, #4
 800ca4e:	d00b      	beq.n	800ca68 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	d007      	beq.n	800ca68 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ca5c:	2b03      	cmp	r3, #3
 800ca5e:	d003      	beq.n	800ca68 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ca64:	2b07      	cmp	r3, #7
 800ca66:	d102      	bne.n	800ca6e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800ca68:	2302      	movs	r3, #2
 800ca6a:	61fb      	str	r3, [r7, #28]
 800ca6c:	e001      	b.n	800ca72 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	461a      	mov	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	01db      	lsls	r3, r3, #7
 800ca7c:	4413      	add	r3, r2
 800ca7e:	3384      	adds	r3, #132	; 0x84
 800ca80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca82:	68fa      	ldr	r2, [r7, #12]
 800ca84:	6812      	ldr	r2, [r2, #0]
 800ca86:	4611      	mov	r1, r2
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	01d2      	lsls	r2, r2, #7
 800ca8c:	440a      	add	r2, r1
 800ca8e:	3284      	adds	r2, #132	; 0x84
 800ca90:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800ca94:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca9a:	69fa      	ldr	r2, [r7, #28]
 800ca9c:	fb02 f303 	mul.w	r3, r2, r3
 800caa0:	041a      	lsls	r2, r3, #16
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	6859      	ldr	r1, [r3, #4]
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	1acb      	subs	r3, r1, r3
 800caac:	69f9      	ldr	r1, [r7, #28]
 800caae:	fb01 f303 	mul.w	r3, r1, r3
 800cab2:	3303      	adds	r3, #3
 800cab4:	68f9      	ldr	r1, [r7, #12]
 800cab6:	6809      	ldr	r1, [r1, #0]
 800cab8:	4608      	mov	r0, r1
 800caba:	6879      	ldr	r1, [r7, #4]
 800cabc:	01c9      	lsls	r1, r1, #7
 800cabe:	4401      	add	r1, r0
 800cac0:	3184      	adds	r1, #132	; 0x84
 800cac2:	4313      	orrs	r3, r2
 800cac4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	461a      	mov	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	01db      	lsls	r3, r3, #7
 800cad0:	4413      	add	r3, r2
 800cad2:	3384      	adds	r3, #132	; 0x84
 800cad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4619      	mov	r1, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	01db      	lsls	r3, r3, #7
 800cae0:	440b      	add	r3, r1
 800cae2:	3384      	adds	r3, #132	; 0x84
 800cae4:	4619      	mov	r1, r3
 800cae6:	4b14      	ldr	r3, [pc, #80]	; (800cb38 <LTDC_SetConfig+0x330>)
 800cae8:	4013      	ands	r3, r2
 800caea:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	461a      	mov	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	01db      	lsls	r3, r3, #7
 800caf6:	4413      	add	r3, r2
 800caf8:	3384      	adds	r3, #132	; 0x84
 800cafa:	461a      	mov	r2, r3
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb00:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	461a      	mov	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	01db      	lsls	r3, r3, #7
 800cb0c:	4413      	add	r3, r2
 800cb0e:	3384      	adds	r3, #132	; 0x84
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	6812      	ldr	r2, [r2, #0]
 800cb16:	4611      	mov	r1, r2
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	01d2      	lsls	r2, r2, #7
 800cb1c:	440a      	add	r2, r1
 800cb1e:	3284      	adds	r2, #132	; 0x84
 800cb20:	f043 0301 	orr.w	r3, r3, #1
 800cb24:	6013      	str	r3, [r2, #0]
}
 800cb26:	bf00      	nop
 800cb28:	3724      	adds	r7, #36	; 0x24
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	fffff8f8 	.word	0xfffff8f8
 800cb38:	fffff800 	.word	0xfffff800

0800cb3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800cb42:	2300      	movs	r3, #0
 800cb44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800cb46:	4b23      	ldr	r3, [pc, #140]	; (800cbd4 <HAL_PWREx_EnableOverDrive+0x98>)
 800cb48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb4a:	4a22      	ldr	r2, [pc, #136]	; (800cbd4 <HAL_PWREx_EnableOverDrive+0x98>)
 800cb4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb50:	6413      	str	r3, [r2, #64]	; 0x40
 800cb52:	4b20      	ldr	r3, [pc, #128]	; (800cbd4 <HAL_PWREx_EnableOverDrive+0x98>)
 800cb54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb5a:	603b      	str	r3, [r7, #0]
 800cb5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800cb5e:	4b1e      	ldr	r3, [pc, #120]	; (800cbd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a1d      	ldr	r2, [pc, #116]	; (800cbd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800cb64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cb6a:	f7fd f89f 	bl	8009cac <HAL_GetTick>
 800cb6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800cb70:	e009      	b.n	800cb86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800cb72:	f7fd f89b 	bl	8009cac <HAL_GetTick>
 800cb76:	4602      	mov	r2, r0
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	1ad3      	subs	r3, r2, r3
 800cb7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb80:	d901      	bls.n	800cb86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800cb82:	2303      	movs	r3, #3
 800cb84:	e022      	b.n	800cbcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800cb86:	4b14      	ldr	r3, [pc, #80]	; (800cbd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb92:	d1ee      	bne.n	800cb72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800cb94:	4b10      	ldr	r3, [pc, #64]	; (800cbd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a0f      	ldr	r2, [pc, #60]	; (800cbd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800cb9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cba0:	f7fd f884 	bl	8009cac <HAL_GetTick>
 800cba4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800cba6:	e009      	b.n	800cbbc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800cba8:	f7fd f880 	bl	8009cac <HAL_GetTick>
 800cbac:	4602      	mov	r2, r0
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	1ad3      	subs	r3, r2, r3
 800cbb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbb6:	d901      	bls.n	800cbbc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800cbb8:	2303      	movs	r3, #3
 800cbba:	e007      	b.n	800cbcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800cbbc:	4b06      	ldr	r3, [pc, #24]	; (800cbd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbc8:	d1ee      	bne.n	800cba8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3708      	adds	r7, #8
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	40023800 	.word	0x40023800
 800cbd8:	40007000 	.word	0x40007000

0800cbdc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b086      	sub	sp, #24
 800cbe0:	af02      	add	r7, sp, #8
 800cbe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800cbe4:	f7fd f862 	bl	8009cac <HAL_GetTick>
 800cbe8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d101      	bne.n	800cbf4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e067      	b.n	800ccc4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d10b      	bne.n	800cc18 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7f5 fa87 	bl	800211c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800cc0e:	f241 3188 	movw	r1, #5000	; 0x1388
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f000 fcf2 	bl	800d5fc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	3b01      	subs	r3, #1
 800cc28:	021a      	lsls	r2, r3, #8
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	430a      	orrs	r2, r1
 800cc30:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	2120      	movs	r1, #32
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 fd1d 	bl	800d67e <QSPI_WaitFlagStateUntilTimeout>
 800cc44:	4603      	mov	r3, r0
 800cc46:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800cc48:	7afb      	ldrb	r3, [r7, #11]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d135      	bne.n	800ccba <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	4b1d      	ldr	r3, [pc, #116]	; (800cccc <HAL_QSPI_Init+0xf0>)
 800cc56:	4013      	ands	r3, r2
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	6852      	ldr	r2, [r2, #4]
 800cc5c:	0611      	lsls	r1, r2, #24
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	68d2      	ldr	r2, [r2, #12]
 800cc62:	4311      	orrs	r1, r2
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	69d2      	ldr	r2, [r2, #28]
 800cc68:	4311      	orrs	r1, r2
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	6a12      	ldr	r2, [r2, #32]
 800cc6e:	4311      	orrs	r1, r2
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	6812      	ldr	r2, [r2, #0]
 800cc74:	430b      	orrs	r3, r1
 800cc76:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	685a      	ldr	r2, [r3, #4]
 800cc7e:	4b14      	ldr	r3, [pc, #80]	; (800ccd0 <HAL_QSPI_Init+0xf4>)
 800cc80:	4013      	ands	r3, r2
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	6912      	ldr	r2, [r2, #16]
 800cc86:	0411      	lsls	r1, r2, #16
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	6952      	ldr	r2, [r2, #20]
 800cc8c:	4311      	orrs	r1, r2
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	6992      	ldr	r2, [r2, #24]
 800cc92:	4311      	orrs	r1, r2
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	6812      	ldr	r2, [r2, #0]
 800cc98:	430b      	orrs	r3, r1
 800cc9a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f042 0201 	orr.w	r2, r2, #1
 800ccaa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ccc2:	7afb      	ldrb	r3, [r7, #11]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	00ffff2f 	.word	0x00ffff2f
 800ccd0:	ffe0f8fe 	.word	0xffe0f8fe

0800ccd4 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d101      	bne.n	800cce6 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800cce2:	2301      	movs	r3, #1
 800cce4:	e016      	b.n	800cd14 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f022 0201 	bic.w	r2, r2, #1
 800ccf4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f7f5 fa9a 	bl	8002230 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cd12:	2300      	movs	r3, #0
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b086      	sub	sp, #24
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	f003 0304 	and.w	r3, r3, #4
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d064      	beq.n	800ce08 <HAL_QSPI_IRQHandler+0xec>
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d05f      	beq.n	800ce08 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	3320      	adds	r3, #32
 800cd4e:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	2b12      	cmp	r3, #18
 800cd5a:	d125      	bne.n	800cda8 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800cd5c:	e01c      	b.n	800cd98 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00f      	beq.n	800cd86 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd6a:	781a      	ldrb	r2, [r3, #0]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd74:	1c5a      	adds	r2, r3, #1
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7e:	1e5a      	subs	r2, r3, #1
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	62da      	str	r2, [r3, #44]	; 0x2c
 800cd84:	e008      	b.n	800cd98 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cd94:	601a      	str	r2, [r3, #0]
          break;
 800cd96:	e033      	b.n	800ce00 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	689b      	ldr	r3, [r3, #8]
 800cd9e:	f003 0304 	and.w	r3, r3, #4
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d1db      	bne.n	800cd5e <HAL_QSPI_IRQHandler+0x42>
 800cda6:	e02b      	b.n	800ce00 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	2b22      	cmp	r3, #34	; 0x22
 800cdb2:	d125      	bne.n	800ce00 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800cdb4:	e01d      	b.n	800cdf2 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d010      	beq.n	800cde0 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	7812      	ldrb	r2, [r2, #0]
 800cdc6:	b2d2      	uxtb	r2, r2
 800cdc8:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdce:	1c5a      	adds	r2, r3, #1
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd8:	1e5a      	subs	r2, r3, #1
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	639a      	str	r2, [r3, #56]	; 0x38
 800cdde:	e008      	b.n	800cdf2 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	681a      	ldr	r2, [r3, #0]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cdee:	601a      	str	r2, [r3, #0]
          break;
 800cdf0:	e006      	b.n	800ce00 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	f003 0304 	and.w	r3, r3, #4
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d1da      	bne.n	800cdb6 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 fbdd 	bl	800d5c0 <HAL_QSPI_FifoThresholdCallback>
 800ce06:	e13c      	b.n	800d082 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	f003 0302 	and.w	r3, r3, #2
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	f000 80b0 	beq.w	800cf74 <HAL_QSPI_IRQHandler+0x258>
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	f000 80aa 	beq.w	800cf74 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2202      	movs	r2, #2
 800ce26:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800ce36:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce3e:	b2db      	uxtb	r3, r3
 800ce40:	2b12      	cmp	r3, #18
 800ce42:	d120      	bne.n	800ce86 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f003 0304 	and.w	r3, r3, #4
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d011      	beq.n	800ce76 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f022 0204 	bic.w	r2, r2, #4
 800ce60:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f022 0201 	bic.w	r2, r2, #1
 800ce74:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2201      	movs	r2, #1
 800ce7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 fb94 	bl	800d5ac <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ce84:	e0fa      	b.n	800d07c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	2b22      	cmp	r3, #34	; 0x22
 800ce90:	d143      	bne.n	800cf1a <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f003 0304 	and.w	r3, r3, #4
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d012      	beq.n	800cec6 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f022 0204 	bic.w	r2, r2, #4
 800ceae:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f022 0201 	bic.w	r2, r2, #1
 800cec2:	601a      	str	r2, [r3, #0]
 800cec4:	e021      	b.n	800cf0a <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	3320      	adds	r3, #32
 800cecc:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800cece:	e013      	b.n	800cef8 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d017      	beq.n	800cf08 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	7812      	ldrb	r2, [r2, #0]
 800cee0:	b2d2      	uxtb	r2, r2
 800cee2:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cee8:	1c5a      	adds	r2, r3, #1
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef2:	1e5a      	subs	r2, r3, #1
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	689b      	ldr	r3, [r3, #8]
 800cefe:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d1e4      	bne.n	800ced0 <HAL_QSPI_IRQHandler+0x1b4>
 800cf06:	e000      	b.n	800cf0a <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800cf08:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 fb40 	bl	800d598 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cf18:	e0b0      	b.n	800d07c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	d107      	bne.n	800cf36 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 fb28 	bl	800d584 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cf34:	e0a2      	b.n	800d07c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	2b08      	cmp	r3, #8
 800cf40:	f040 809c 	bne.w	800d07c <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	695a      	ldr	r2, [r3, #20]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800cf52:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2201      	movs	r2, #1
 800cf58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d103      	bne.n	800cf6c <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 fb03 	bl	800d570 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cf6a:	e087      	b.n	800d07c <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 faf5 	bl	800d55c <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cf72:	e083      	b.n	800d07c <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	f003 0308 	and.w	r3, r3, #8
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d01f      	beq.n	800cfbe <HAL_QSPI_IRQHandler+0x2a2>
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d01a      	beq.n	800cfbe <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2208      	movs	r2, #8
 800cf8e:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00b      	beq.n	800cfb6 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	681a      	ldr	r2, [r3, #0]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800cfac:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 fb0c 	bl	800d5d4 <HAL_QSPI_StatusMatchCallback>
 800cfbc:	e061      	b.n	800d082 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	f003 0301 	and.w	r3, r3, #1
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d047      	beq.n	800d058 <HAL_QSPI_IRQHandler+0x33c>
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d042      	beq.n	800d058 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800cfe8:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfee:	f043 0202 	orr.w	r2, r3, #2
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f003 0304 	and.w	r3, r3, #4
 800d000:	2b00      	cmp	r3, #0
 800d002:	d021      	beq.n	800d048 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f022 0204 	bic.w	r2, r2, #4
 800d012:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d018:	4a1c      	ldr	r2, [pc, #112]	; (800d08c <HAL_QSPI_IRQHandler+0x370>)
 800d01a:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d020:	4618      	mov	r0, r3
 800d022:	f7fe faa1 	bl	800b568 <HAL_DMA_Abort_IT>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d029      	beq.n	800d080 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d030:	f043 0204 	orr.w	r2, r3, #4
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2201      	movs	r2, #1
 800d03c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 fa8b 	bl	800d55c <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800d046:	e01b      	b.n	800d080 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2201      	movs	r2, #1
 800d04c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 fa83 	bl	800d55c <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800d056:	e013      	b.n	800d080 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	f003 0310 	and.w	r3, r3, #16
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d00f      	beq.n	800d082 <HAL_QSPI_IRQHandler+0x366>
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00a      	beq.n	800d082 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2210      	movs	r2, #16
 800d072:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 fab7 	bl	800d5e8 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800d07a:	e002      	b.n	800d082 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800d07c:	bf00      	nop
 800d07e:	e000      	b.n	800d082 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800d080:	bf00      	nop
}
 800d082:	bf00      	nop
 800d084:	3718      	adds	r7, #24
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	0800d619 	.word	0x0800d619

0800d090 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b088      	sub	sp, #32
 800d094:	af02      	add	r7, sp, #8
 800d096:	60f8      	str	r0, [r7, #12]
 800d098:	60b9      	str	r1, [r7, #8]
 800d09a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d09c:	f7fc fe06 	bl	8009cac <HAL_GetTick>
 800d0a0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d101      	bne.n	800d0b2 <HAL_QSPI_Command+0x22>
 800d0ae:	2302      	movs	r3, #2
 800d0b0:	e048      	b.n	800d144 <HAL_QSPI_Command+0xb4>
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d137      	bne.n	800d136 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	9300      	str	r3, [sp, #0]
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	2120      	movs	r1, #32
 800d0de:	68f8      	ldr	r0, [r7, #12]
 800d0e0:	f000 facd 	bl	800d67e <QSPI_WaitFlagStateUntilTimeout>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800d0e8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d125      	bne.n	800d13a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	68b9      	ldr	r1, [r7, #8]
 800d0f2:	68f8      	ldr	r0, [r7, #12]
 800d0f4:	f000 fafa 	bl	800d6ec <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d115      	bne.n	800d12c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	9300      	str	r3, [sp, #0]
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	2201      	movs	r2, #1
 800d108:	2102      	movs	r1, #2
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f000 fab7 	bl	800d67e <QSPI_WaitFlagStateUntilTimeout>
 800d110:	4603      	mov	r3, r0
 800d112:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800d114:	7dfb      	ldrb	r3, [r7, #23]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d10f      	bne.n	800d13a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2202      	movs	r2, #2
 800d120:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2201      	movs	r2, #1
 800d126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d12a:	e006      	b.n	800d13a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2201      	movs	r2, #1
 800d130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d134:	e001      	b.n	800d13a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800d136:	2302      	movs	r3, #2
 800d138:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2200      	movs	r2, #0
 800d13e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800d142:	7dfb      	ldrb	r3, [r7, #23]
}
 800d144:	4618      	mov	r0, r3
 800d146:	3718      	adds	r7, #24
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b08a      	sub	sp, #40	; 0x28
 800d150:	af02      	add	r7, sp, #8
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d158:	2300      	movs	r3, #0
 800d15a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800d15c:	f7fc fda6 	bl	8009cac <HAL_GetTick>
 800d160:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	3320      	adds	r3, #32
 800d168:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d170:	b2db      	uxtb	r3, r3
 800d172:	2b01      	cmp	r3, #1
 800d174:	d101      	bne.n	800d17a <HAL_QSPI_Transmit+0x2e>
 800d176:	2302      	movs	r3, #2
 800d178:	e076      	b.n	800d268 <HAL_QSPI_Transmit+0x11c>
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2201      	movs	r2, #1
 800d17e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d165      	bne.n	800d25a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2200      	movs	r2, #0
 800d192:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d056      	beq.n	800d248 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2212      	movs	r2, #18
 800d19e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	1c5a      	adds	r2, r3, #1
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	691b      	ldr	r3, [r3, #16]
 800d1b4:	1c5a      	adds	r2, r3, #1
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	68ba      	ldr	r2, [r7, #8]
 800d1be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	695a      	ldr	r2, [r3, #20]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800d1ce:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800d1d0:	e01b      	b.n	800d20a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	9300      	str	r3, [sp, #0]
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	2104      	movs	r1, #4
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	f000 fa4e 	bl	800d67e <QSPI_WaitFlagStateUntilTimeout>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800d1e6:	7ffb      	ldrb	r3, [r7, #31]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d113      	bne.n	800d214 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f0:	781a      	ldrb	r2, [r3, #0]
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fa:	1c5a      	adds	r2, r3, #1
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d204:	1e5a      	subs	r2, r3, #1
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1df      	bne.n	800d1d2 <HAL_QSPI_Transmit+0x86>
 800d212:	e000      	b.n	800d216 <HAL_QSPI_Transmit+0xca>
          break;
 800d214:	bf00      	nop
      }

      if (status == HAL_OK)
 800d216:	7ffb      	ldrb	r3, [r7, #31]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d110      	bne.n	800d23e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	9300      	str	r3, [sp, #0]
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	2201      	movs	r2, #1
 800d224:	2102      	movs	r1, #2
 800d226:	68f8      	ldr	r0, [r7, #12]
 800d228:	f000 fa29 	bl	800d67e <QSPI_WaitFlagStateUntilTimeout>
 800d22c:	4603      	mov	r3, r0
 800d22e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800d230:	7ffb      	ldrb	r3, [r7, #31]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d103      	bne.n	800d23e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2202      	movs	r2, #2
 800d23c:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2201      	movs	r2, #1
 800d242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d246:	e00a      	b.n	800d25e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d24c:	f043 0208 	orr.w	r2, r3, #8
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800d254:	2301      	movs	r3, #1
 800d256:	77fb      	strb	r3, [r7, #31]
 800d258:	e001      	b.n	800d25e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800d25a:	2302      	movs	r3, #2
 800d25c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	2200      	movs	r2, #0
 800d262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800d266:	7ffb      	ldrb	r3, [r7, #31]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3720      	adds	r7, #32
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b08a      	sub	sp, #40	; 0x28
 800d274:	af02      	add	r7, sp, #8
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d27c:	2300      	movs	r3, #0
 800d27e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800d280:	f7fc fd14 	bl	8009cac <HAL_GetTick>
 800d284:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	699b      	ldr	r3, [r3, #24]
 800d28c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	3320      	adds	r3, #32
 800d294:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d101      	bne.n	800d2a6 <HAL_QSPI_Receive+0x36>
 800d2a2:	2302      	movs	r3, #2
 800d2a4:	e07d      	b.n	800d3a2 <HAL_QSPI_Receive+0x132>
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2b4:	b2db      	uxtb	r3, r3
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d16c      	bne.n	800d394 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d05d      	beq.n	800d382 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2222      	movs	r2, #34	; 0x22
 800d2ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	691b      	ldr	r3, [r3, #16]
 800d2d4:	1c5a      	adds	r2, r3, #1
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	691b      	ldr	r3, [r3, #16]
 800d2e0:	1c5a      	adds	r2, r3, #1
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	695b      	ldr	r3, [r3, #20]
 800d2f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800d2fe:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	697a      	ldr	r2, [r7, #20]
 800d306:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800d308:	e01c      	b.n	800d344 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	9300      	str	r3, [sp, #0]
 800d30e:	69bb      	ldr	r3, [r7, #24]
 800d310:	2201      	movs	r2, #1
 800d312:	2106      	movs	r1, #6
 800d314:	68f8      	ldr	r0, [r7, #12]
 800d316:	f000 f9b2 	bl	800d67e <QSPI_WaitFlagStateUntilTimeout>
 800d31a:	4603      	mov	r3, r0
 800d31c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800d31e:	7ffb      	ldrb	r3, [r7, #31]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d114      	bne.n	800d34e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d328:	693a      	ldr	r2, [r7, #16]
 800d32a:	7812      	ldrb	r2, [r2, #0]
 800d32c:	b2d2      	uxtb	r2, r2
 800d32e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d334:	1c5a      	adds	r2, r3, #1
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d33e:	1e5a      	subs	r2, r3, #1
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d1de      	bne.n	800d30a <HAL_QSPI_Receive+0x9a>
 800d34c:	e000      	b.n	800d350 <HAL_QSPI_Receive+0xe0>
          break;
 800d34e:	bf00      	nop
      }

      if (status == HAL_OK)
 800d350:	7ffb      	ldrb	r3, [r7, #31]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d110      	bne.n	800d378 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	9300      	str	r3, [sp, #0]
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	2201      	movs	r2, #1
 800d35e:	2102      	movs	r1, #2
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f000 f98c 	bl	800d67e <QSPI_WaitFlagStateUntilTimeout>
 800d366:	4603      	mov	r3, r0
 800d368:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800d36a:	7ffb      	ldrb	r3, [r7, #31]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d103      	bne.n	800d378 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2202      	movs	r2, #2
 800d376:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2201      	movs	r2, #1
 800d37c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d380:	e00a      	b.n	800d398 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d386:	f043 0208 	orr.w	r2, r3, #8
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800d38e:	2301      	movs	r3, #1
 800d390:	77fb      	strb	r3, [r7, #31]
 800d392:	e001      	b.n	800d398 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800d394:	2302      	movs	r3, #2
 800d396:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800d3a0:	7ffb      	ldrb	r3, [r7, #31]
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3720      	adds	r7, #32
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}

0800d3aa <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800d3aa:	b580      	push	{r7, lr}
 800d3ac:	b088      	sub	sp, #32
 800d3ae:	af02      	add	r7, sp, #8
 800d3b0:	60f8      	str	r0, [r7, #12]
 800d3b2:	60b9      	str	r1, [r7, #8]
 800d3b4:	607a      	str	r2, [r7, #4]
 800d3b6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d3b8:	f7fc fc78 	bl	8009cac <HAL_GetTick>
 800d3bc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d101      	bne.n	800d3ce <HAL_QSPI_AutoPolling+0x24>
 800d3ca:	2302      	movs	r3, #2
 800d3cc:	e060      	b.n	800d490 <HAL_QSPI_AutoPolling+0xe6>
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d14f      	bne.n	800d482 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2242      	movs	r2, #66	; 0x42
 800d3ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	9300      	str	r3, [sp, #0]
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	2120      	movs	r1, #32
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f000 f93f 	bl	800d67e <QSPI_WaitFlagStateUntilTimeout>
 800d400:	4603      	mov	r3, r0
 800d402:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800d404:	7dfb      	ldrb	r3, [r7, #23]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d13d      	bne.n	800d486 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	6812      	ldr	r2, [r2, #0]
 800d412:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	6852      	ldr	r2, [r2, #4]
 800d41c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	6892      	ldr	r2, [r2, #8]
 800d426:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	691b      	ldr	r3, [r3, #16]
 800d436:	431a      	orrs	r2, r3
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800d440:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	68da      	ldr	r2, [r3, #12]
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d44a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d44e:	68b9      	ldr	r1, [r7, #8]
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f000 f94b 	bl	800d6ec <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	9300      	str	r3, [sp, #0]
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	2201      	movs	r2, #1
 800d45e:	2108      	movs	r1, #8
 800d460:	68f8      	ldr	r0, [r7, #12]
 800d462:	f000 f90c 	bl	800d67e <QSPI_WaitFlagStateUntilTimeout>
 800d466:	4603      	mov	r3, r0
 800d468:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800d46a:	7dfb      	ldrb	r3, [r7, #23]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10a      	bne.n	800d486 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2208      	movs	r2, #8
 800d476:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2201      	movs	r2, #1
 800d47c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d480:	e001      	b.n	800d486 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800d482:	2302      	movs	r3, #2
 800d484:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2200      	movs	r2, #0
 800d48a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800d48e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d490:	4618      	mov	r0, r3
 800d492:	3718      	adds	r7, #24
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b088      	sub	sp, #32
 800d49c:	af02      	add	r7, sp, #8
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	60b9      	str	r1, [r7, #8]
 800d4a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d4a4:	f7fc fc02 	bl	8009cac <HAL_GetTick>
 800d4a8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d101      	bne.n	800d4ba <HAL_QSPI_MemoryMapped+0x22>
 800d4b6:	2302      	movs	r3, #2
 800d4b8:	e04c      	b.n	800d554 <HAL_QSPI_MemoryMapped+0xbc>
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2201      	movs	r2, #1
 800d4be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d13b      	bne.n	800d546 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2282      	movs	r2, #130	; 0x82
 800d4d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	2120      	movs	r1, #32
 800d4e8:	68f8      	ldr	r0, [r7, #12]
 800d4ea:	f000 f8c8 	bl	800d67e <QSPI_WaitFlagStateUntilTimeout>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800d4f2:	7dfb      	ldrb	r3, [r7, #23]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d128      	bne.n	800d54a <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f023 0108 	bic.w	r1, r3, #8
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	685a      	ldr	r2, [r3, #4]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	430a      	orrs	r2, r1
 800d50c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	2b08      	cmp	r3, #8
 800d514:	d110      	bne.n	800d538 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	6812      	ldr	r2, [r2, #0]
 800d51e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2210      	movs	r2, #16
 800d526:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d536:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800d538:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800d53c:	68b9      	ldr	r1, [r7, #8]
 800d53e:	68f8      	ldr	r0, [r7, #12]
 800d540:	f000 f8d4 	bl	800d6ec <QSPI_Config>
 800d544:	e001      	b.n	800d54a <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800d546:	2302      	movs	r3, #2
 800d548:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2200      	movs	r2, #0
 800d54e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800d552:	7dfb      	ldrb	r3, [r7, #23]
}
 800d554:	4618      	mov	r0, r3
 800d556:	3718      	adds	r7, #24
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800d564:	bf00      	nop
 800d566:	370c      	adds	r7, #12
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800d570:	b480      	push	{r7}
 800d572:	b083      	sub	sp, #12
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800d578:	bf00      	nop
 800d57a:	370c      	adds	r7, #12
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800d58c:	bf00      	nop
 800d58e:	370c      	adds	r7, #12
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr

0800d598 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800d5a0:	bf00      	nop
 800d5a2:	370c      	adds	r7, #12
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr

0800d5ac <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800d5b4:	bf00      	nop
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b083      	sub	sp, #12
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800d5c8:	bf00      	nop
 800d5ca:	370c      	adds	r7, #12
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr

0800d5d4 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800d5dc:	bf00      	nop
 800d5de:	370c      	adds	r7, #12
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b083      	sub	sp, #12
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800d5f0:	bf00      	nop
 800d5f2:	370c      	adds	r7, #12
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	683a      	ldr	r2, [r7, #0]
 800d60a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800d60c:	bf00      	nop
 800d60e:	370c      	adds	r7, #12
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d624:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2200      	movs	r2, #0
 800d62a:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2200      	movs	r2, #0
 800d630:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	2b08      	cmp	r3, #8
 800d63c:	d114      	bne.n	800d668 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2202      	movs	r2, #2
 800d644:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d654:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f042 0202 	orr.w	r2, r2, #2
 800d664:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800d666:	e006      	b.n	800d676 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2201      	movs	r2, #1
 800d66c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	f7ff ff73 	bl	800d55c <HAL_QSPI_ErrorCallback>
}
 800d676:	bf00      	nop
 800d678:	3710      	adds	r7, #16
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b084      	sub	sp, #16
 800d682:	af00      	add	r7, sp, #0
 800d684:	60f8      	str	r0, [r7, #12]
 800d686:	60b9      	str	r1, [r7, #8]
 800d688:	603b      	str	r3, [r7, #0]
 800d68a:	4613      	mov	r3, r2
 800d68c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800d68e:	e01a      	b.n	800d6c6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d690:	69bb      	ldr	r3, [r7, #24]
 800d692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d696:	d016      	beq.n	800d6c6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d698:	f7fc fb08 	bl	8009cac <HAL_GetTick>
 800d69c:	4602      	mov	r2, r0
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	1ad3      	subs	r3, r2, r3
 800d6a2:	69ba      	ldr	r2, [r7, #24]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d302      	bcc.n	800d6ae <QSPI_WaitFlagStateUntilTimeout+0x30>
 800d6a8:	69bb      	ldr	r3, [r7, #24]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d10b      	bne.n	800d6c6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2204      	movs	r2, #4
 800d6b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6ba:	f043 0201 	orr.w	r2, r3, #1
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e00e      	b.n	800d6e4 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	689a      	ldr	r2, [r3, #8]
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	4013      	ands	r3, r2
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	bf14      	ite	ne
 800d6d4:	2301      	movne	r3, #1
 800d6d6:	2300      	moveq	r3, #0
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	461a      	mov	r2, r3
 800d6dc:	79fb      	ldrb	r3, [r7, #7]
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d1d6      	bne.n	800d690 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d6e2:	2300      	movs	r3, #0
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3710      	adds	r7, #16
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d009      	beq.n	800d714 <QSPI_Config+0x28>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d706:	d005      	beq.n	800d714 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	3a01      	subs	r2, #1
 800d712:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	699b      	ldr	r3, [r3, #24]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	f000 80b9 	beq.w	800d890 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	6a1b      	ldr	r3, [r3, #32]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d05f      	beq.n	800d7e6 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	68ba      	ldr	r2, [r7, #8]
 800d72c:	6892      	ldr	r2, [r2, #8]
 800d72e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	69db      	ldr	r3, [r3, #28]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d031      	beq.n	800d79c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d740:	431a      	orrs	r2, r3
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d746:	431a      	orrs	r2, r3
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74c:	431a      	orrs	r2, r3
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	695b      	ldr	r3, [r3, #20]
 800d752:	049b      	lsls	r3, r3, #18
 800d754:	431a      	orrs	r2, r3
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	691b      	ldr	r3, [r3, #16]
 800d75a:	431a      	orrs	r2, r3
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	6a1b      	ldr	r3, [r3, #32]
 800d760:	431a      	orrs	r2, r3
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	431a      	orrs	r2, r3
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	69db      	ldr	r3, [r3, #28]
 800d76c:	431a      	orrs	r2, r3
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	699b      	ldr	r3, [r3, #24]
 800d772:	431a      	orrs	r2, r3
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	ea42 0103 	orr.w	r1, r2, r3
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	687a      	ldr	r2, [r7, #4]
 800d782:	430a      	orrs	r2, r1
 800d784:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d78c:	f000 812e 	beq.w	800d9ec <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	68ba      	ldr	r2, [r7, #8]
 800d796:	6852      	ldr	r2, [r2, #4]
 800d798:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800d79a:	e127      	b.n	800d9ec <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a4:	431a      	orrs	r2, r3
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7aa:	431a      	orrs	r2, r3
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b0:	431a      	orrs	r2, r3
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	695b      	ldr	r3, [r3, #20]
 800d7b6:	049b      	lsls	r3, r3, #18
 800d7b8:	431a      	orrs	r2, r3
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	691b      	ldr	r3, [r3, #16]
 800d7be:	431a      	orrs	r2, r3
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	6a1b      	ldr	r3, [r3, #32]
 800d7c4:	431a      	orrs	r2, r3
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	69db      	ldr	r3, [r3, #28]
 800d7ca:	431a      	orrs	r2, r3
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	699b      	ldr	r3, [r3, #24]
 800d7d0:	431a      	orrs	r2, r3
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	ea42 0103 	orr.w	r1, r2, r3
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	430a      	orrs	r2, r1
 800d7e2:	615a      	str	r2, [r3, #20]
}
 800d7e4:	e102      	b.n	800d9ec <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	69db      	ldr	r3, [r3, #28]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d02e      	beq.n	800d84c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7f6:	431a      	orrs	r2, r3
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7fc:	431a      	orrs	r2, r3
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d802:	431a      	orrs	r2, r3
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	695b      	ldr	r3, [r3, #20]
 800d808:	049b      	lsls	r3, r3, #18
 800d80a:	431a      	orrs	r2, r3
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	6a1b      	ldr	r3, [r3, #32]
 800d810:	431a      	orrs	r2, r3
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	431a      	orrs	r2, r3
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	69db      	ldr	r3, [r3, #28]
 800d81c:	431a      	orrs	r2, r3
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	699b      	ldr	r3, [r3, #24]
 800d822:	431a      	orrs	r2, r3
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	ea42 0103 	orr.w	r1, r2, r3
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	430a      	orrs	r2, r1
 800d834:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d83c:	f000 80d6 	beq.w	800d9ec <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	68ba      	ldr	r2, [r7, #8]
 800d846:	6852      	ldr	r2, [r2, #4]
 800d848:	619a      	str	r2, [r3, #24]
}
 800d84a:	e0cf      	b.n	800d9ec <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d854:	431a      	orrs	r2, r3
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d85a:	431a      	orrs	r2, r3
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d860:	431a      	orrs	r2, r3
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	695b      	ldr	r3, [r3, #20]
 800d866:	049b      	lsls	r3, r3, #18
 800d868:	431a      	orrs	r2, r3
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	6a1b      	ldr	r3, [r3, #32]
 800d86e:	431a      	orrs	r2, r3
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	69db      	ldr	r3, [r3, #28]
 800d874:	431a      	orrs	r2, r3
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	699b      	ldr	r3, [r3, #24]
 800d87a:	431a      	orrs	r2, r3
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	ea42 0103 	orr.w	r1, r2, r3
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	687a      	ldr	r2, [r7, #4]
 800d88a:	430a      	orrs	r2, r1
 800d88c:	615a      	str	r2, [r3, #20]
}
 800d88e:	e0ad      	b.n	800d9ec <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	6a1b      	ldr	r3, [r3, #32]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d058      	beq.n	800d94a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	68ba      	ldr	r2, [r7, #8]
 800d89e:	6892      	ldr	r2, [r2, #8]
 800d8a0:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	69db      	ldr	r3, [r3, #28]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d02d      	beq.n	800d906 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8b2:	431a      	orrs	r2, r3
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8b8:	431a      	orrs	r2, r3
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8be:	431a      	orrs	r2, r3
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	695b      	ldr	r3, [r3, #20]
 800d8c4:	049b      	lsls	r3, r3, #18
 800d8c6:	431a      	orrs	r2, r3
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	691b      	ldr	r3, [r3, #16]
 800d8cc:	431a      	orrs	r2, r3
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	6a1b      	ldr	r3, [r3, #32]
 800d8d2:	431a      	orrs	r2, r3
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	431a      	orrs	r2, r3
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	69db      	ldr	r3, [r3, #28]
 800d8de:	431a      	orrs	r2, r3
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	699b      	ldr	r3, [r3, #24]
 800d8e4:	ea42 0103 	orr.w	r1, r2, r3
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	430a      	orrs	r2, r1
 800d8f0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d8f8:	d078      	beq.n	800d9ec <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	68ba      	ldr	r2, [r7, #8]
 800d900:	6852      	ldr	r2, [r2, #4]
 800d902:	619a      	str	r2, [r3, #24]
}
 800d904:	e072      	b.n	800d9ec <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d90e:	431a      	orrs	r2, r3
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d914:	431a      	orrs	r2, r3
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d91a:	431a      	orrs	r2, r3
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	695b      	ldr	r3, [r3, #20]
 800d920:	049b      	lsls	r3, r3, #18
 800d922:	431a      	orrs	r2, r3
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	691b      	ldr	r3, [r3, #16]
 800d928:	431a      	orrs	r2, r3
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	6a1b      	ldr	r3, [r3, #32]
 800d92e:	431a      	orrs	r2, r3
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	69db      	ldr	r3, [r3, #28]
 800d934:	431a      	orrs	r2, r3
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	699b      	ldr	r3, [r3, #24]
 800d93a:	ea42 0103 	orr.w	r1, r2, r3
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	430a      	orrs	r2, r1
 800d946:	615a      	str	r2, [r3, #20]
}
 800d948:	e050      	b.n	800d9ec <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	69db      	ldr	r3, [r3, #28]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d02a      	beq.n	800d9a8 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d95a:	431a      	orrs	r2, r3
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d960:	431a      	orrs	r2, r3
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d966:	431a      	orrs	r2, r3
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	695b      	ldr	r3, [r3, #20]
 800d96c:	049b      	lsls	r3, r3, #18
 800d96e:	431a      	orrs	r2, r3
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	6a1b      	ldr	r3, [r3, #32]
 800d974:	431a      	orrs	r2, r3
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	431a      	orrs	r2, r3
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	69db      	ldr	r3, [r3, #28]
 800d980:	431a      	orrs	r2, r3
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	699b      	ldr	r3, [r3, #24]
 800d986:	ea42 0103 	orr.w	r1, r2, r3
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	430a      	orrs	r2, r1
 800d992:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d99a:	d027      	beq.n	800d9ec <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	6852      	ldr	r2, [r2, #4]
 800d9a4:	619a      	str	r2, [r3, #24]
}
 800d9a6:	e021      	b.n	800d9ec <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d01d      	beq.n	800d9ec <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9b8:	431a      	orrs	r2, r3
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9be:	431a      	orrs	r2, r3
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c4:	431a      	orrs	r2, r3
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	695b      	ldr	r3, [r3, #20]
 800d9ca:	049b      	lsls	r3, r3, #18
 800d9cc:	431a      	orrs	r2, r3
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	6a1b      	ldr	r3, [r3, #32]
 800d9d2:	431a      	orrs	r2, r3
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	69db      	ldr	r3, [r3, #28]
 800d9d8:	431a      	orrs	r2, r3
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	699b      	ldr	r3, [r3, #24]
 800d9de:	ea42 0103 	orr.w	r1, r2, r3
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	430a      	orrs	r2, r1
 800d9ea:	615a      	str	r2, [r3, #20]
}
 800d9ec:	bf00      	nop
 800d9ee:	3714      	adds	r7, #20
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b086      	sub	sp, #24
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800da00:	2300      	movs	r3, #0
 800da02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d101      	bne.n	800da0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800da0a:	2301      	movs	r3, #1
 800da0c:	e29b      	b.n	800df46 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f003 0301 	and.w	r3, r3, #1
 800da16:	2b00      	cmp	r3, #0
 800da18:	f000 8087 	beq.w	800db2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800da1c:	4b96      	ldr	r3, [pc, #600]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	f003 030c 	and.w	r3, r3, #12
 800da24:	2b04      	cmp	r3, #4
 800da26:	d00c      	beq.n	800da42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800da28:	4b93      	ldr	r3, [pc, #588]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800da2a:	689b      	ldr	r3, [r3, #8]
 800da2c:	f003 030c 	and.w	r3, r3, #12
 800da30:	2b08      	cmp	r3, #8
 800da32:	d112      	bne.n	800da5a <HAL_RCC_OscConfig+0x62>
 800da34:	4b90      	ldr	r3, [pc, #576]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da40:	d10b      	bne.n	800da5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800da42:	4b8d      	ldr	r3, [pc, #564]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d06c      	beq.n	800db28 <HAL_RCC_OscConfig+0x130>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d168      	bne.n	800db28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800da56:	2301      	movs	r3, #1
 800da58:	e275      	b.n	800df46 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da62:	d106      	bne.n	800da72 <HAL_RCC_OscConfig+0x7a>
 800da64:	4b84      	ldr	r3, [pc, #528]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4a83      	ldr	r2, [pc, #524]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800da6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da6e:	6013      	str	r3, [r2, #0]
 800da70:	e02e      	b.n	800dad0 <HAL_RCC_OscConfig+0xd8>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d10c      	bne.n	800da94 <HAL_RCC_OscConfig+0x9c>
 800da7a:	4b7f      	ldr	r3, [pc, #508]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	4a7e      	ldr	r2, [pc, #504]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800da80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da84:	6013      	str	r3, [r2, #0]
 800da86:	4b7c      	ldr	r3, [pc, #496]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a7b      	ldr	r2, [pc, #492]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800da8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800da90:	6013      	str	r3, [r2, #0]
 800da92:	e01d      	b.n	800dad0 <HAL_RCC_OscConfig+0xd8>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	685b      	ldr	r3, [r3, #4]
 800da98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800da9c:	d10c      	bne.n	800dab8 <HAL_RCC_OscConfig+0xc0>
 800da9e:	4b76      	ldr	r3, [pc, #472]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a75      	ldr	r2, [pc, #468]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800daa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800daa8:	6013      	str	r3, [r2, #0]
 800daaa:	4b73      	ldr	r3, [pc, #460]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	4a72      	ldr	r2, [pc, #456]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800dab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dab4:	6013      	str	r3, [r2, #0]
 800dab6:	e00b      	b.n	800dad0 <HAL_RCC_OscConfig+0xd8>
 800dab8:	4b6f      	ldr	r3, [pc, #444]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a6e      	ldr	r2, [pc, #440]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800dabe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dac2:	6013      	str	r3, [r2, #0]
 800dac4:	4b6c      	ldr	r3, [pc, #432]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a6b      	ldr	r2, [pc, #428]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800daca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d013      	beq.n	800db00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dad8:	f7fc f8e8 	bl	8009cac <HAL_GetTick>
 800dadc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dade:	e008      	b.n	800daf2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dae0:	f7fc f8e4 	bl	8009cac <HAL_GetTick>
 800dae4:	4602      	mov	r2, r0
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	2b64      	cmp	r3, #100	; 0x64
 800daec:	d901      	bls.n	800daf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800daee:	2303      	movs	r3, #3
 800daf0:	e229      	b.n	800df46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800daf2:	4b61      	ldr	r3, [pc, #388]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d0f0      	beq.n	800dae0 <HAL_RCC_OscConfig+0xe8>
 800dafe:	e014      	b.n	800db2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db00:	f7fc f8d4 	bl	8009cac <HAL_GetTick>
 800db04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800db06:	e008      	b.n	800db1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800db08:	f7fc f8d0 	bl	8009cac <HAL_GetTick>
 800db0c:	4602      	mov	r2, r0
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	2b64      	cmp	r3, #100	; 0x64
 800db14:	d901      	bls.n	800db1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800db16:	2303      	movs	r3, #3
 800db18:	e215      	b.n	800df46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800db1a:	4b57      	ldr	r3, [pc, #348]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db22:	2b00      	cmp	r3, #0
 800db24:	d1f0      	bne.n	800db08 <HAL_RCC_OscConfig+0x110>
 800db26:	e000      	b.n	800db2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800db28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f003 0302 	and.w	r3, r3, #2
 800db32:	2b00      	cmp	r3, #0
 800db34:	d069      	beq.n	800dc0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800db36:	4b50      	ldr	r3, [pc, #320]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	f003 030c 	and.w	r3, r3, #12
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d00b      	beq.n	800db5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800db42:	4b4d      	ldr	r3, [pc, #308]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800db44:	689b      	ldr	r3, [r3, #8]
 800db46:	f003 030c 	and.w	r3, r3, #12
 800db4a:	2b08      	cmp	r3, #8
 800db4c:	d11c      	bne.n	800db88 <HAL_RCC_OscConfig+0x190>
 800db4e:	4b4a      	ldr	r3, [pc, #296]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db56:	2b00      	cmp	r3, #0
 800db58:	d116      	bne.n	800db88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800db5a:	4b47      	ldr	r3, [pc, #284]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f003 0302 	and.w	r3, r3, #2
 800db62:	2b00      	cmp	r3, #0
 800db64:	d005      	beq.n	800db72 <HAL_RCC_OscConfig+0x17a>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	68db      	ldr	r3, [r3, #12]
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d001      	beq.n	800db72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800db6e:	2301      	movs	r3, #1
 800db70:	e1e9      	b.n	800df46 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db72:	4b41      	ldr	r3, [pc, #260]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	00db      	lsls	r3, r3, #3
 800db80:	493d      	ldr	r1, [pc, #244]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800db82:	4313      	orrs	r3, r2
 800db84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800db86:	e040      	b.n	800dc0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d023      	beq.n	800dbd8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800db90:	4b39      	ldr	r3, [pc, #228]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a38      	ldr	r2, [pc, #224]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800db96:	f043 0301 	orr.w	r3, r3, #1
 800db9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db9c:	f7fc f886 	bl	8009cac <HAL_GetTick>
 800dba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dba2:	e008      	b.n	800dbb6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dba4:	f7fc f882 	bl	8009cac <HAL_GetTick>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	2b02      	cmp	r3, #2
 800dbb0:	d901      	bls.n	800dbb6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800dbb2:	2303      	movs	r3, #3
 800dbb4:	e1c7      	b.n	800df46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dbb6:	4b30      	ldr	r3, [pc, #192]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f003 0302 	and.w	r3, r3, #2
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d0f0      	beq.n	800dba4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dbc2:	4b2d      	ldr	r3, [pc, #180]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	691b      	ldr	r3, [r3, #16]
 800dbce:	00db      	lsls	r3, r3, #3
 800dbd0:	4929      	ldr	r1, [pc, #164]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	600b      	str	r3, [r1, #0]
 800dbd6:	e018      	b.n	800dc0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dbd8:	4b27      	ldr	r3, [pc, #156]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a26      	ldr	r2, [pc, #152]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800dbde:	f023 0301 	bic.w	r3, r3, #1
 800dbe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbe4:	f7fc f862 	bl	8009cac <HAL_GetTick>
 800dbe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dbea:	e008      	b.n	800dbfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dbec:	f7fc f85e 	bl	8009cac <HAL_GetTick>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	1ad3      	subs	r3, r2, r3
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	d901      	bls.n	800dbfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800dbfa:	2303      	movs	r3, #3
 800dbfc:	e1a3      	b.n	800df46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dbfe:	4b1e      	ldr	r3, [pc, #120]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f003 0302 	and.w	r3, r3, #2
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1f0      	bne.n	800dbec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f003 0308 	and.w	r3, r3, #8
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d038      	beq.n	800dc88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	695b      	ldr	r3, [r3, #20]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d019      	beq.n	800dc52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dc1e:	4b16      	ldr	r3, [pc, #88]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800dc20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc22:	4a15      	ldr	r2, [pc, #84]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800dc24:	f043 0301 	orr.w	r3, r3, #1
 800dc28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc2a:	f7fc f83f 	bl	8009cac <HAL_GetTick>
 800dc2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dc30:	e008      	b.n	800dc44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dc32:	f7fc f83b 	bl	8009cac <HAL_GetTick>
 800dc36:	4602      	mov	r2, r0
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	1ad3      	subs	r3, r2, r3
 800dc3c:	2b02      	cmp	r3, #2
 800dc3e:	d901      	bls.n	800dc44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800dc40:	2303      	movs	r3, #3
 800dc42:	e180      	b.n	800df46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dc44:	4b0c      	ldr	r3, [pc, #48]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800dc46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc48:	f003 0302 	and.w	r3, r3, #2
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d0f0      	beq.n	800dc32 <HAL_RCC_OscConfig+0x23a>
 800dc50:	e01a      	b.n	800dc88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dc52:	4b09      	ldr	r3, [pc, #36]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800dc54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc56:	4a08      	ldr	r2, [pc, #32]	; (800dc78 <HAL_RCC_OscConfig+0x280>)
 800dc58:	f023 0301 	bic.w	r3, r3, #1
 800dc5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc5e:	f7fc f825 	bl	8009cac <HAL_GetTick>
 800dc62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dc64:	e00a      	b.n	800dc7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dc66:	f7fc f821 	bl	8009cac <HAL_GetTick>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	1ad3      	subs	r3, r2, r3
 800dc70:	2b02      	cmp	r3, #2
 800dc72:	d903      	bls.n	800dc7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800dc74:	2303      	movs	r3, #3
 800dc76:	e166      	b.n	800df46 <HAL_RCC_OscConfig+0x54e>
 800dc78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dc7c:	4b92      	ldr	r3, [pc, #584]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dc7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc80:	f003 0302 	and.w	r3, r3, #2
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d1ee      	bne.n	800dc66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f003 0304 	and.w	r3, r3, #4
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f000 80a4 	beq.w	800ddde <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dc96:	4b8c      	ldr	r3, [pc, #560]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dc98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d10d      	bne.n	800dcbe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800dca2:	4b89      	ldr	r3, [pc, #548]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca6:	4a88      	ldr	r2, [pc, #544]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dcac:	6413      	str	r3, [r2, #64]	; 0x40
 800dcae:	4b86      	ldr	r3, [pc, #536]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dcb6:	60bb      	str	r3, [r7, #8]
 800dcb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dcba:	2301      	movs	r3, #1
 800dcbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dcbe:	4b83      	ldr	r3, [pc, #524]	; (800decc <HAL_RCC_OscConfig+0x4d4>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d118      	bne.n	800dcfc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800dcca:	4b80      	ldr	r3, [pc, #512]	; (800decc <HAL_RCC_OscConfig+0x4d4>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4a7f      	ldr	r2, [pc, #508]	; (800decc <HAL_RCC_OscConfig+0x4d4>)
 800dcd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dcd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dcd6:	f7fb ffe9 	bl	8009cac <HAL_GetTick>
 800dcda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dcdc:	e008      	b.n	800dcf0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dcde:	f7fb ffe5 	bl	8009cac <HAL_GetTick>
 800dce2:	4602      	mov	r2, r0
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	1ad3      	subs	r3, r2, r3
 800dce8:	2b64      	cmp	r3, #100	; 0x64
 800dcea:	d901      	bls.n	800dcf0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800dcec:	2303      	movs	r3, #3
 800dcee:	e12a      	b.n	800df46 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dcf0:	4b76      	ldr	r3, [pc, #472]	; (800decc <HAL_RCC_OscConfig+0x4d4>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d0f0      	beq.n	800dcde <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	d106      	bne.n	800dd12 <HAL_RCC_OscConfig+0x31a>
 800dd04:	4b70      	ldr	r3, [pc, #448]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dd06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd08:	4a6f      	ldr	r2, [pc, #444]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dd0a:	f043 0301 	orr.w	r3, r3, #1
 800dd0e:	6713      	str	r3, [r2, #112]	; 0x70
 800dd10:	e02d      	b.n	800dd6e <HAL_RCC_OscConfig+0x376>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	689b      	ldr	r3, [r3, #8]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d10c      	bne.n	800dd34 <HAL_RCC_OscConfig+0x33c>
 800dd1a:	4b6b      	ldr	r3, [pc, #428]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dd1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd1e:	4a6a      	ldr	r2, [pc, #424]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dd20:	f023 0301 	bic.w	r3, r3, #1
 800dd24:	6713      	str	r3, [r2, #112]	; 0x70
 800dd26:	4b68      	ldr	r3, [pc, #416]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dd28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd2a:	4a67      	ldr	r2, [pc, #412]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dd2c:	f023 0304 	bic.w	r3, r3, #4
 800dd30:	6713      	str	r3, [r2, #112]	; 0x70
 800dd32:	e01c      	b.n	800dd6e <HAL_RCC_OscConfig+0x376>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	2b05      	cmp	r3, #5
 800dd3a:	d10c      	bne.n	800dd56 <HAL_RCC_OscConfig+0x35e>
 800dd3c:	4b62      	ldr	r3, [pc, #392]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dd3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd40:	4a61      	ldr	r2, [pc, #388]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dd42:	f043 0304 	orr.w	r3, r3, #4
 800dd46:	6713      	str	r3, [r2, #112]	; 0x70
 800dd48:	4b5f      	ldr	r3, [pc, #380]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dd4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd4c:	4a5e      	ldr	r2, [pc, #376]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dd4e:	f043 0301 	orr.w	r3, r3, #1
 800dd52:	6713      	str	r3, [r2, #112]	; 0x70
 800dd54:	e00b      	b.n	800dd6e <HAL_RCC_OscConfig+0x376>
 800dd56:	4b5c      	ldr	r3, [pc, #368]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dd58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd5a:	4a5b      	ldr	r2, [pc, #364]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dd5c:	f023 0301 	bic.w	r3, r3, #1
 800dd60:	6713      	str	r3, [r2, #112]	; 0x70
 800dd62:	4b59      	ldr	r3, [pc, #356]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dd64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd66:	4a58      	ldr	r2, [pc, #352]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dd68:	f023 0304 	bic.w	r3, r3, #4
 800dd6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d015      	beq.n	800dda2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd76:	f7fb ff99 	bl	8009cac <HAL_GetTick>
 800dd7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dd7c:	e00a      	b.n	800dd94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dd7e:	f7fb ff95 	bl	8009cac <HAL_GetTick>
 800dd82:	4602      	mov	r2, r0
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	1ad3      	subs	r3, r2, r3
 800dd88:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d901      	bls.n	800dd94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800dd90:	2303      	movs	r3, #3
 800dd92:	e0d8      	b.n	800df46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dd94:	4b4c      	ldr	r3, [pc, #304]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800dd96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd98:	f003 0302 	and.w	r3, r3, #2
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d0ee      	beq.n	800dd7e <HAL_RCC_OscConfig+0x386>
 800dda0:	e014      	b.n	800ddcc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dda2:	f7fb ff83 	bl	8009cac <HAL_GetTick>
 800dda6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dda8:	e00a      	b.n	800ddc0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ddaa:	f7fb ff7f 	bl	8009cac <HAL_GetTick>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	1ad3      	subs	r3, r2, r3
 800ddb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d901      	bls.n	800ddc0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800ddbc:	2303      	movs	r3, #3
 800ddbe:	e0c2      	b.n	800df46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ddc0:	4b41      	ldr	r3, [pc, #260]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800ddc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddc4:	f003 0302 	and.w	r3, r3, #2
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d1ee      	bne.n	800ddaa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ddcc:	7dfb      	ldrb	r3, [r7, #23]
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d105      	bne.n	800ddde <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ddd2:	4b3d      	ldr	r3, [pc, #244]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800ddd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddd6:	4a3c      	ldr	r2, [pc, #240]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800ddd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dddc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	699b      	ldr	r3, [r3, #24]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	f000 80ae 	beq.w	800df44 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dde8:	4b37      	ldr	r3, [pc, #220]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	f003 030c 	and.w	r3, r3, #12
 800ddf0:	2b08      	cmp	r3, #8
 800ddf2:	d06d      	beq.n	800ded0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	699b      	ldr	r3, [r3, #24]
 800ddf8:	2b02      	cmp	r3, #2
 800ddfa:	d14b      	bne.n	800de94 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ddfc:	4b32      	ldr	r3, [pc, #200]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4a31      	ldr	r2, [pc, #196]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800de02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800de06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de08:	f7fb ff50 	bl	8009cac <HAL_GetTick>
 800de0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800de0e:	e008      	b.n	800de22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de10:	f7fb ff4c 	bl	8009cac <HAL_GetTick>
 800de14:	4602      	mov	r2, r0
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	1ad3      	subs	r3, r2, r3
 800de1a:	2b02      	cmp	r3, #2
 800de1c:	d901      	bls.n	800de22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800de1e:	2303      	movs	r3, #3
 800de20:	e091      	b.n	800df46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800de22:	4b29      	ldr	r3, [pc, #164]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d1f0      	bne.n	800de10 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	69da      	ldr	r2, [r3, #28]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6a1b      	ldr	r3, [r3, #32]
 800de36:	431a      	orrs	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de3c:	019b      	lsls	r3, r3, #6
 800de3e:	431a      	orrs	r2, r3
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de44:	085b      	lsrs	r3, r3, #1
 800de46:	3b01      	subs	r3, #1
 800de48:	041b      	lsls	r3, r3, #16
 800de4a:	431a      	orrs	r2, r3
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de50:	061b      	lsls	r3, r3, #24
 800de52:	431a      	orrs	r2, r3
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de58:	071b      	lsls	r3, r3, #28
 800de5a:	491b      	ldr	r1, [pc, #108]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800de5c:	4313      	orrs	r3, r2
 800de5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800de60:	4b19      	ldr	r3, [pc, #100]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4a18      	ldr	r2, [pc, #96]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800de66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800de6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de6c:	f7fb ff1e 	bl	8009cac <HAL_GetTick>
 800de70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800de72:	e008      	b.n	800de86 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de74:	f7fb ff1a 	bl	8009cac <HAL_GetTick>
 800de78:	4602      	mov	r2, r0
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	1ad3      	subs	r3, r2, r3
 800de7e:	2b02      	cmp	r3, #2
 800de80:	d901      	bls.n	800de86 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800de82:	2303      	movs	r3, #3
 800de84:	e05f      	b.n	800df46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800de86:	4b10      	ldr	r3, [pc, #64]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d0f0      	beq.n	800de74 <HAL_RCC_OscConfig+0x47c>
 800de92:	e057      	b.n	800df44 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800de94:	4b0c      	ldr	r3, [pc, #48]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	4a0b      	ldr	r2, [pc, #44]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800de9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800de9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dea0:	f7fb ff04 	bl	8009cac <HAL_GetTick>
 800dea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dea6:	e008      	b.n	800deba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dea8:	f7fb ff00 	bl	8009cac <HAL_GetTick>
 800deac:	4602      	mov	r2, r0
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	1ad3      	subs	r3, r2, r3
 800deb2:	2b02      	cmp	r3, #2
 800deb4:	d901      	bls.n	800deba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800deb6:	2303      	movs	r3, #3
 800deb8:	e045      	b.n	800df46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800deba:	4b03      	ldr	r3, [pc, #12]	; (800dec8 <HAL_RCC_OscConfig+0x4d0>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d1f0      	bne.n	800dea8 <HAL_RCC_OscConfig+0x4b0>
 800dec6:	e03d      	b.n	800df44 <HAL_RCC_OscConfig+0x54c>
 800dec8:	40023800 	.word	0x40023800
 800decc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800ded0:	4b1f      	ldr	r3, [pc, #124]	; (800df50 <HAL_RCC_OscConfig+0x558>)
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	699b      	ldr	r3, [r3, #24]
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d030      	beq.n	800df40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dee8:	429a      	cmp	r2, r3
 800deea:	d129      	bne.n	800df40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800def6:	429a      	cmp	r2, r3
 800def8:	d122      	bne.n	800df40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800defa:	68fa      	ldr	r2, [r7, #12]
 800defc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800df00:	4013      	ands	r3, r2
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800df06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800df08:	4293      	cmp	r3, r2
 800df0a:	d119      	bne.n	800df40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df16:	085b      	lsrs	r3, r3, #1
 800df18:	3b01      	subs	r3, #1
 800df1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d10f      	bne.n	800df40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d107      	bne.n	800df40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df3a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d001      	beq.n	800df44 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800df40:	2301      	movs	r3, #1
 800df42:	e000      	b.n	800df46 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3718      	adds	r7, #24
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	40023800 	.word	0x40023800

0800df54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b084      	sub	sp, #16
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800df5e:	2300      	movs	r3, #0
 800df60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d101      	bne.n	800df6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800df68:	2301      	movs	r3, #1
 800df6a:	e0d0      	b.n	800e10e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800df6c:	4b6a      	ldr	r3, [pc, #424]	; (800e118 <HAL_RCC_ClockConfig+0x1c4>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f003 030f 	and.w	r3, r3, #15
 800df74:	683a      	ldr	r2, [r7, #0]
 800df76:	429a      	cmp	r2, r3
 800df78:	d910      	bls.n	800df9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df7a:	4b67      	ldr	r3, [pc, #412]	; (800e118 <HAL_RCC_ClockConfig+0x1c4>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f023 020f 	bic.w	r2, r3, #15
 800df82:	4965      	ldr	r1, [pc, #404]	; (800e118 <HAL_RCC_ClockConfig+0x1c4>)
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	4313      	orrs	r3, r2
 800df88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800df8a:	4b63      	ldr	r3, [pc, #396]	; (800e118 <HAL_RCC_ClockConfig+0x1c4>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f003 030f 	and.w	r3, r3, #15
 800df92:	683a      	ldr	r2, [r7, #0]
 800df94:	429a      	cmp	r2, r3
 800df96:	d001      	beq.n	800df9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800df98:	2301      	movs	r3, #1
 800df9a:	e0b8      	b.n	800e10e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	f003 0302 	and.w	r3, r3, #2
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d020      	beq.n	800dfea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f003 0304 	and.w	r3, r3, #4
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d005      	beq.n	800dfc0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dfb4:	4b59      	ldr	r3, [pc, #356]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800dfb6:	689b      	ldr	r3, [r3, #8]
 800dfb8:	4a58      	ldr	r2, [pc, #352]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800dfba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dfbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f003 0308 	and.w	r3, r3, #8
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d005      	beq.n	800dfd8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dfcc:	4b53      	ldr	r3, [pc, #332]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	4a52      	ldr	r2, [pc, #328]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800dfd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dfd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dfd8:	4b50      	ldr	r3, [pc, #320]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	689b      	ldr	r3, [r3, #8]
 800dfe4:	494d      	ldr	r1, [pc, #308]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800dfe6:	4313      	orrs	r3, r2
 800dfe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f003 0301 	and.w	r3, r3, #1
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d040      	beq.n	800e078 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	d107      	bne.n	800e00e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dffe:	4b47      	ldr	r3, [pc, #284]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e006:	2b00      	cmp	r3, #0
 800e008:	d115      	bne.n	800e036 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e00a:	2301      	movs	r3, #1
 800e00c:	e07f      	b.n	800e10e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	2b02      	cmp	r3, #2
 800e014:	d107      	bne.n	800e026 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e016:	4b41      	ldr	r3, [pc, #260]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d109      	bne.n	800e036 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e022:	2301      	movs	r3, #1
 800e024:	e073      	b.n	800e10e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e026:	4b3d      	ldr	r3, [pc, #244]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f003 0302 	and.w	r3, r3, #2
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d101      	bne.n	800e036 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e032:	2301      	movs	r3, #1
 800e034:	e06b      	b.n	800e10e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e036:	4b39      	ldr	r3, [pc, #228]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800e038:	689b      	ldr	r3, [r3, #8]
 800e03a:	f023 0203 	bic.w	r2, r3, #3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	4936      	ldr	r1, [pc, #216]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800e044:	4313      	orrs	r3, r2
 800e046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e048:	f7fb fe30 	bl	8009cac <HAL_GetTick>
 800e04c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e04e:	e00a      	b.n	800e066 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e050:	f7fb fe2c 	bl	8009cac <HAL_GetTick>
 800e054:	4602      	mov	r2, r0
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	1ad3      	subs	r3, r2, r3
 800e05a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e05e:	4293      	cmp	r3, r2
 800e060:	d901      	bls.n	800e066 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800e062:	2303      	movs	r3, #3
 800e064:	e053      	b.n	800e10e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e066:	4b2d      	ldr	r3, [pc, #180]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800e068:	689b      	ldr	r3, [r3, #8]
 800e06a:	f003 020c 	and.w	r2, r3, #12
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	429a      	cmp	r2, r3
 800e076:	d1eb      	bne.n	800e050 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e078:	4b27      	ldr	r3, [pc, #156]	; (800e118 <HAL_RCC_ClockConfig+0x1c4>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f003 030f 	and.w	r3, r3, #15
 800e080:	683a      	ldr	r2, [r7, #0]
 800e082:	429a      	cmp	r2, r3
 800e084:	d210      	bcs.n	800e0a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e086:	4b24      	ldr	r3, [pc, #144]	; (800e118 <HAL_RCC_ClockConfig+0x1c4>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f023 020f 	bic.w	r2, r3, #15
 800e08e:	4922      	ldr	r1, [pc, #136]	; (800e118 <HAL_RCC_ClockConfig+0x1c4>)
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	4313      	orrs	r3, r2
 800e094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e096:	4b20      	ldr	r3, [pc, #128]	; (800e118 <HAL_RCC_ClockConfig+0x1c4>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f003 030f 	and.w	r3, r3, #15
 800e09e:	683a      	ldr	r2, [r7, #0]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d001      	beq.n	800e0a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	e032      	b.n	800e10e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f003 0304 	and.w	r3, r3, #4
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d008      	beq.n	800e0c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e0b4:	4b19      	ldr	r3, [pc, #100]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800e0b6:	689b      	ldr	r3, [r3, #8]
 800e0b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	4916      	ldr	r1, [pc, #88]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f003 0308 	and.w	r3, r3, #8
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d009      	beq.n	800e0e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800e0d2:	4b12      	ldr	r3, [pc, #72]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	691b      	ldr	r3, [r3, #16]
 800e0de:	00db      	lsls	r3, r3, #3
 800e0e0:	490e      	ldr	r1, [pc, #56]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e0e6:	f000 f821 	bl	800e12c <HAL_RCC_GetSysClockFreq>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	4b0b      	ldr	r3, [pc, #44]	; (800e11c <HAL_RCC_ClockConfig+0x1c8>)
 800e0ee:	689b      	ldr	r3, [r3, #8]
 800e0f0:	091b      	lsrs	r3, r3, #4
 800e0f2:	f003 030f 	and.w	r3, r3, #15
 800e0f6:	490a      	ldr	r1, [pc, #40]	; (800e120 <HAL_RCC_ClockConfig+0x1cc>)
 800e0f8:	5ccb      	ldrb	r3, [r1, r3]
 800e0fa:	fa22 f303 	lsr.w	r3, r2, r3
 800e0fe:	4a09      	ldr	r2, [pc, #36]	; (800e124 <HAL_RCC_ClockConfig+0x1d0>)
 800e100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800e102:	4b09      	ldr	r3, [pc, #36]	; (800e128 <HAL_RCC_ClockConfig+0x1d4>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	4618      	mov	r0, r3
 800e108:	f7f4 f8e2 	bl	80022d0 <HAL_InitTick>

  return HAL_OK;
 800e10c:	2300      	movs	r3, #0
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3710      	adds	r7, #16
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	40023c00 	.word	0x40023c00
 800e11c:	40023800 	.word	0x40023800
 800e120:	0802abe4 	.word	0x0802abe4
 800e124:	2000000c 	.word	0x2000000c
 800e128:	20000010 	.word	0x20000010

0800e12c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e12c:	b5b0      	push	{r4, r5, r7, lr}
 800e12e:	b084      	sub	sp, #16
 800e130:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800e132:	2100      	movs	r1, #0
 800e134:	6079      	str	r1, [r7, #4]
 800e136:	2100      	movs	r1, #0
 800e138:	60f9      	str	r1, [r7, #12]
 800e13a:	2100      	movs	r1, #0
 800e13c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800e13e:	2100      	movs	r1, #0
 800e140:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e142:	4952      	ldr	r1, [pc, #328]	; (800e28c <HAL_RCC_GetSysClockFreq+0x160>)
 800e144:	6889      	ldr	r1, [r1, #8]
 800e146:	f001 010c 	and.w	r1, r1, #12
 800e14a:	2908      	cmp	r1, #8
 800e14c:	d00d      	beq.n	800e16a <HAL_RCC_GetSysClockFreq+0x3e>
 800e14e:	2908      	cmp	r1, #8
 800e150:	f200 8094 	bhi.w	800e27c <HAL_RCC_GetSysClockFreq+0x150>
 800e154:	2900      	cmp	r1, #0
 800e156:	d002      	beq.n	800e15e <HAL_RCC_GetSysClockFreq+0x32>
 800e158:	2904      	cmp	r1, #4
 800e15a:	d003      	beq.n	800e164 <HAL_RCC_GetSysClockFreq+0x38>
 800e15c:	e08e      	b.n	800e27c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e15e:	4b4c      	ldr	r3, [pc, #304]	; (800e290 <HAL_RCC_GetSysClockFreq+0x164>)
 800e160:	60bb      	str	r3, [r7, #8]
      break;
 800e162:	e08e      	b.n	800e282 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e164:	4b4b      	ldr	r3, [pc, #300]	; (800e294 <HAL_RCC_GetSysClockFreq+0x168>)
 800e166:	60bb      	str	r3, [r7, #8]
      break;
 800e168:	e08b      	b.n	800e282 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e16a:	4948      	ldr	r1, [pc, #288]	; (800e28c <HAL_RCC_GetSysClockFreq+0x160>)
 800e16c:	6849      	ldr	r1, [r1, #4]
 800e16e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800e172:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800e174:	4945      	ldr	r1, [pc, #276]	; (800e28c <HAL_RCC_GetSysClockFreq+0x160>)
 800e176:	6849      	ldr	r1, [r1, #4]
 800e178:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800e17c:	2900      	cmp	r1, #0
 800e17e:	d024      	beq.n	800e1ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e180:	4942      	ldr	r1, [pc, #264]	; (800e28c <HAL_RCC_GetSysClockFreq+0x160>)
 800e182:	6849      	ldr	r1, [r1, #4]
 800e184:	0989      	lsrs	r1, r1, #6
 800e186:	4608      	mov	r0, r1
 800e188:	f04f 0100 	mov.w	r1, #0
 800e18c:	f240 14ff 	movw	r4, #511	; 0x1ff
 800e190:	f04f 0500 	mov.w	r5, #0
 800e194:	ea00 0204 	and.w	r2, r0, r4
 800e198:	ea01 0305 	and.w	r3, r1, r5
 800e19c:	493d      	ldr	r1, [pc, #244]	; (800e294 <HAL_RCC_GetSysClockFreq+0x168>)
 800e19e:	fb01 f003 	mul.w	r0, r1, r3
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	fb01 f102 	mul.w	r1, r1, r2
 800e1a8:	1844      	adds	r4, r0, r1
 800e1aa:	493a      	ldr	r1, [pc, #232]	; (800e294 <HAL_RCC_GetSysClockFreq+0x168>)
 800e1ac:	fba2 0101 	umull	r0, r1, r2, r1
 800e1b0:	1863      	adds	r3, r4, r1
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	f04f 0300 	mov.w	r3, #0
 800e1bc:	f7f2 fa54 	bl	8000668 <__aeabi_uldivmod>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	4613      	mov	r3, r2
 800e1c6:	60fb      	str	r3, [r7, #12]
 800e1c8:	e04a      	b.n	800e260 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e1ca:	4b30      	ldr	r3, [pc, #192]	; (800e28c <HAL_RCC_GetSysClockFreq+0x160>)
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	099b      	lsrs	r3, r3, #6
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	f04f 0300 	mov.w	r3, #0
 800e1d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e1da:	f04f 0100 	mov.w	r1, #0
 800e1de:	ea02 0400 	and.w	r4, r2, r0
 800e1e2:	ea03 0501 	and.w	r5, r3, r1
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	4629      	mov	r1, r5
 800e1ea:	f04f 0200 	mov.w	r2, #0
 800e1ee:	f04f 0300 	mov.w	r3, #0
 800e1f2:	014b      	lsls	r3, r1, #5
 800e1f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e1f8:	0142      	lsls	r2, r0, #5
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	1b00      	subs	r0, r0, r4
 800e200:	eb61 0105 	sbc.w	r1, r1, r5
 800e204:	f04f 0200 	mov.w	r2, #0
 800e208:	f04f 0300 	mov.w	r3, #0
 800e20c:	018b      	lsls	r3, r1, #6
 800e20e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e212:	0182      	lsls	r2, r0, #6
 800e214:	1a12      	subs	r2, r2, r0
 800e216:	eb63 0301 	sbc.w	r3, r3, r1
 800e21a:	f04f 0000 	mov.w	r0, #0
 800e21e:	f04f 0100 	mov.w	r1, #0
 800e222:	00d9      	lsls	r1, r3, #3
 800e224:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e228:	00d0      	lsls	r0, r2, #3
 800e22a:	4602      	mov	r2, r0
 800e22c:	460b      	mov	r3, r1
 800e22e:	1912      	adds	r2, r2, r4
 800e230:	eb45 0303 	adc.w	r3, r5, r3
 800e234:	f04f 0000 	mov.w	r0, #0
 800e238:	f04f 0100 	mov.w	r1, #0
 800e23c:	0299      	lsls	r1, r3, #10
 800e23e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e242:	0290      	lsls	r0, r2, #10
 800e244:	4602      	mov	r2, r0
 800e246:	460b      	mov	r3, r1
 800e248:	4610      	mov	r0, r2
 800e24a:	4619      	mov	r1, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	461a      	mov	r2, r3
 800e250:	f04f 0300 	mov.w	r3, #0
 800e254:	f7f2 fa08 	bl	8000668 <__aeabi_uldivmod>
 800e258:	4602      	mov	r2, r0
 800e25a:	460b      	mov	r3, r1
 800e25c:	4613      	mov	r3, r2
 800e25e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800e260:	4b0a      	ldr	r3, [pc, #40]	; (800e28c <HAL_RCC_GetSysClockFreq+0x160>)
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	0c1b      	lsrs	r3, r3, #16
 800e266:	f003 0303 	and.w	r3, r3, #3
 800e26a:	3301      	adds	r3, #1
 800e26c:	005b      	lsls	r3, r3, #1
 800e26e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	fbb2 f3f3 	udiv	r3, r2, r3
 800e278:	60bb      	str	r3, [r7, #8]
      break;
 800e27a:	e002      	b.n	800e282 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e27c:	4b04      	ldr	r3, [pc, #16]	; (800e290 <HAL_RCC_GetSysClockFreq+0x164>)
 800e27e:	60bb      	str	r3, [r7, #8]
      break;
 800e280:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e282:	68bb      	ldr	r3, [r7, #8]
}
 800e284:	4618      	mov	r0, r3
 800e286:	3710      	adds	r7, #16
 800e288:	46bd      	mov	sp, r7
 800e28a:	bdb0      	pop	{r4, r5, r7, pc}
 800e28c:	40023800 	.word	0x40023800
 800e290:	00f42400 	.word	0x00f42400
 800e294:	017d7840 	.word	0x017d7840

0800e298 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e298:	b480      	push	{r7}
 800e29a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e29c:	4b03      	ldr	r3, [pc, #12]	; (800e2ac <HAL_RCC_GetHCLKFreq+0x14>)
 800e29e:	681b      	ldr	r3, [r3, #0]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop
 800e2ac:	2000000c 	.word	0x2000000c

0800e2b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e2b4:	f7ff fff0 	bl	800e298 <HAL_RCC_GetHCLKFreq>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	4b05      	ldr	r3, [pc, #20]	; (800e2d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	0a9b      	lsrs	r3, r3, #10
 800e2c0:	f003 0307 	and.w	r3, r3, #7
 800e2c4:	4903      	ldr	r1, [pc, #12]	; (800e2d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e2c6:	5ccb      	ldrb	r3, [r1, r3]
 800e2c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	40023800 	.word	0x40023800
 800e2d4:	0802abf4 	.word	0x0802abf4

0800e2d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b083      	sub	sp, #12
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	220f      	movs	r2, #15
 800e2e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e2e8:	4b12      	ldr	r3, [pc, #72]	; (800e334 <HAL_RCC_GetClockConfig+0x5c>)
 800e2ea:	689b      	ldr	r3, [r3, #8]
 800e2ec:	f003 0203 	and.w	r2, r3, #3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e2f4:	4b0f      	ldr	r3, [pc, #60]	; (800e334 <HAL_RCC_GetClockConfig+0x5c>)
 800e2f6:	689b      	ldr	r3, [r3, #8]
 800e2f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e300:	4b0c      	ldr	r3, [pc, #48]	; (800e334 <HAL_RCC_GetClockConfig+0x5c>)
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800e30c:	4b09      	ldr	r3, [pc, #36]	; (800e334 <HAL_RCC_GetClockConfig+0x5c>)
 800e30e:	689b      	ldr	r3, [r3, #8]
 800e310:	08db      	lsrs	r3, r3, #3
 800e312:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e31a:	4b07      	ldr	r3, [pc, #28]	; (800e338 <HAL_RCC_GetClockConfig+0x60>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f003 020f 	and.w	r2, r3, #15
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	601a      	str	r2, [r3, #0]
}
 800e326:	bf00      	nop
 800e328:	370c      	adds	r7, #12
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr
 800e332:	bf00      	nop
 800e334:	40023800 	.word	0x40023800
 800e338:	40023c00 	.word	0x40023c00

0800e33c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b088      	sub	sp, #32
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e344:	2300      	movs	r3, #0
 800e346:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800e348:	2300      	movs	r3, #0
 800e34a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800e34c:	2300      	movs	r3, #0
 800e34e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800e350:	2300      	movs	r3, #0
 800e352:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800e354:	2300      	movs	r3, #0
 800e356:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f003 0301 	and.w	r3, r3, #1
 800e360:	2b00      	cmp	r3, #0
 800e362:	d012      	beq.n	800e38a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e364:	4b69      	ldr	r3, [pc, #420]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e366:	689b      	ldr	r3, [r3, #8]
 800e368:	4a68      	ldr	r2, [pc, #416]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e36a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e36e:	6093      	str	r3, [r2, #8]
 800e370:	4b66      	ldr	r3, [pc, #408]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e372:	689a      	ldr	r2, [r3, #8]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e378:	4964      	ldr	r1, [pc, #400]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e37a:	4313      	orrs	r3, r2
 800e37c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e382:	2b00      	cmp	r3, #0
 800e384:	d101      	bne.n	800e38a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800e386:	2301      	movs	r3, #1
 800e388:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e392:	2b00      	cmp	r3, #0
 800e394:	d017      	beq.n	800e3c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e396:	4b5d      	ldr	r3, [pc, #372]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e39c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3a4:	4959      	ldr	r1, [pc, #356]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3b4:	d101      	bne.n	800e3ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d101      	bne.n	800e3c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d017      	beq.n	800e402 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e3d2:	4b4e      	ldr	r3, [pc, #312]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e3d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3e0:	494a      	ldr	r1, [pc, #296]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e3e2:	4313      	orrs	r3, r2
 800e3e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e3f0:	d101      	bne.n	800e3f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d101      	bne.n	800e402 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800e3fe:	2301      	movs	r3, #1
 800e400:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d001      	beq.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800e40e:	2301      	movs	r3, #1
 800e410:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f003 0320 	and.w	r3, r3, #32
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	f000 808b 	beq.w	800e536 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e420:	4b3a      	ldr	r3, [pc, #232]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e424:	4a39      	ldr	r2, [pc, #228]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e42a:	6413      	str	r3, [r2, #64]	; 0x40
 800e42c:	4b37      	ldr	r3, [pc, #220]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e434:	60bb      	str	r3, [r7, #8]
 800e436:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e438:	4b35      	ldr	r3, [pc, #212]	; (800e510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a34      	ldr	r2, [pc, #208]	; (800e510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e43e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e444:	f7fb fc32 	bl	8009cac <HAL_GetTick>
 800e448:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e44a:	e008      	b.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e44c:	f7fb fc2e 	bl	8009cac <HAL_GetTick>
 800e450:	4602      	mov	r2, r0
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	1ad3      	subs	r3, r2, r3
 800e456:	2b64      	cmp	r3, #100	; 0x64
 800e458:	d901      	bls.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800e45a:	2303      	movs	r3, #3
 800e45c:	e38f      	b.n	800eb7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e45e:	4b2c      	ldr	r3, [pc, #176]	; (800e510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e466:	2b00      	cmp	r3, #0
 800e468:	d0f0      	beq.n	800e44c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e46a:	4b28      	ldr	r3, [pc, #160]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e46c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e46e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e472:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d035      	beq.n	800e4e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e47e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e482:	693a      	ldr	r2, [r7, #16]
 800e484:	429a      	cmp	r2, r3
 800e486:	d02e      	beq.n	800e4e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e488:	4b20      	ldr	r3, [pc, #128]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e48c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e490:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e492:	4b1e      	ldr	r3, [pc, #120]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e496:	4a1d      	ldr	r2, [pc, #116]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e49c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e49e:	4b1b      	ldr	r3, [pc, #108]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4a2:	4a1a      	ldr	r2, [pc, #104]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e4a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e4a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800e4aa:	4a18      	ldr	r2, [pc, #96]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e4b0:	4b16      	ldr	r3, [pc, #88]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e4b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4b4:	f003 0301 	and.w	r3, r3, #1
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d114      	bne.n	800e4e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e4bc:	f7fb fbf6 	bl	8009cac <HAL_GetTick>
 800e4c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e4c2:	e00a      	b.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e4c4:	f7fb fbf2 	bl	8009cac <HAL_GetTick>
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	1ad3      	subs	r3, r2, r3
 800e4ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d901      	bls.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800e4d6:	2303      	movs	r3, #3
 800e4d8:	e351      	b.n	800eb7e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e4da:	4b0c      	ldr	r3, [pc, #48]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4de:	f003 0302 	and.w	r3, r3, #2
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d0ee      	beq.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e4f2:	d111      	bne.n	800e518 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800e4f4:	4b05      	ldr	r3, [pc, #20]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e4f6:	689b      	ldr	r3, [r3, #8]
 800e4f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e500:	4b04      	ldr	r3, [pc, #16]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800e502:	400b      	ands	r3, r1
 800e504:	4901      	ldr	r1, [pc, #4]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e506:	4313      	orrs	r3, r2
 800e508:	608b      	str	r3, [r1, #8]
 800e50a:	e00b      	b.n	800e524 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e50c:	40023800 	.word	0x40023800
 800e510:	40007000 	.word	0x40007000
 800e514:	0ffffcff 	.word	0x0ffffcff
 800e518:	4bb3      	ldr	r3, [pc, #716]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e51a:	689b      	ldr	r3, [r3, #8]
 800e51c:	4ab2      	ldr	r2, [pc, #712]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e51e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e522:	6093      	str	r3, [r2, #8]
 800e524:	4bb0      	ldr	r3, [pc, #704]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e526:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e52c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e530:	49ad      	ldr	r1, [pc, #692]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e532:	4313      	orrs	r3, r2
 800e534:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f003 0310 	and.w	r3, r3, #16
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d010      	beq.n	800e564 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e542:	4ba9      	ldr	r3, [pc, #676]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e548:	4aa7      	ldr	r2, [pc, #668]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e54a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e54e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800e552:	4ba5      	ldr	r3, [pc, #660]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e554:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e55c:	49a2      	ldr	r1, [pc, #648]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e55e:	4313      	orrs	r3, r2
 800e560:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d00a      	beq.n	800e586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e570:	4b9d      	ldr	r3, [pc, #628]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e576:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e57e:	499a      	ldr	r1, [pc, #616]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e580:	4313      	orrs	r3, r2
 800e582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d00a      	beq.n	800e5a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e592:	4b95      	ldr	r3, [pc, #596]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e598:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5a0:	4991      	ldr	r1, [pc, #580]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d00a      	beq.n	800e5ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e5b4:	4b8c      	ldr	r3, [pc, #560]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5c2:	4989      	ldr	r1, [pc, #548]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5c4:	4313      	orrs	r3, r2
 800e5c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d00a      	beq.n	800e5ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e5d6:	4b84      	ldr	r3, [pc, #528]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5e4:	4980      	ldr	r1, [pc, #512]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d00a      	beq.n	800e60e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e5f8:	4b7b      	ldr	r3, [pc, #492]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5fe:	f023 0203 	bic.w	r2, r3, #3
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e606:	4978      	ldr	r1, [pc, #480]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e608:	4313      	orrs	r3, r2
 800e60a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e616:	2b00      	cmp	r3, #0
 800e618:	d00a      	beq.n	800e630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e61a:	4b73      	ldr	r3, [pc, #460]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e61c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e620:	f023 020c 	bic.w	r2, r3, #12
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e628:	496f      	ldr	r1, [pc, #444]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e62a:	4313      	orrs	r3, r2
 800e62c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d00a      	beq.n	800e652 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e63c:	4b6a      	ldr	r3, [pc, #424]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e63e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e642:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e64a:	4967      	ldr	r1, [pc, #412]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e64c:	4313      	orrs	r3, r2
 800e64e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00a      	beq.n	800e674 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e65e:	4b62      	ldr	r3, [pc, #392]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e664:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e66c:	495e      	ldr	r1, [pc, #376]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e66e:	4313      	orrs	r3, r2
 800e670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d00a      	beq.n	800e696 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e680:	4b59      	ldr	r3, [pc, #356]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e686:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e68e:	4956      	ldr	r1, [pc, #344]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e690:	4313      	orrs	r3, r2
 800e692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d00a      	beq.n	800e6b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e6a2:	4b51      	ldr	r3, [pc, #324]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e6a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6b0:	494d      	ldr	r1, [pc, #308]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e6b2:	4313      	orrs	r3, r2
 800e6b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d00a      	beq.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e6c4:	4b48      	ldr	r3, [pc, #288]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e6c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6d2:	4945      	ldr	r1, [pc, #276]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d00a      	beq.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e6e6:	4b40      	ldr	r3, [pc, #256]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e6e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6f4:	493c      	ldr	r1, [pc, #240]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00a      	beq.n	800e71e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e708:	4b37      	ldr	r3, [pc, #220]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e70a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e70e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e716:	4934      	ldr	r1, [pc, #208]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e718:	4313      	orrs	r3, r2
 800e71a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e726:	2b00      	cmp	r3, #0
 800e728:	d011      	beq.n	800e74e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e72a:	4b2f      	ldr	r3, [pc, #188]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e72c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e730:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e738:	492b      	ldr	r1, [pc, #172]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e73a:	4313      	orrs	r3, r2
 800e73c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e748:	d101      	bne.n	800e74e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e74a:	2301      	movs	r3, #1
 800e74c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f003 0308 	and.w	r3, r3, #8
 800e756:	2b00      	cmp	r3, #0
 800e758:	d001      	beq.n	800e75e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e75a:	2301      	movs	r3, #1
 800e75c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e766:	2b00      	cmp	r3, #0
 800e768:	d00a      	beq.n	800e780 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e76a:	4b1f      	ldr	r3, [pc, #124]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e76c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e770:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e778:	491b      	ldr	r1, [pc, #108]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e77a:	4313      	orrs	r3, r2
 800e77c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d00b      	beq.n	800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e78c:	4b16      	ldr	r3, [pc, #88]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e78e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e792:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e79c:	4912      	ldr	r1, [pc, #72]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d00b      	beq.n	800e7c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800e7b0:	4b0d      	ldr	r3, [pc, #52]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e7b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7c0:	4909      	ldr	r1, [pc, #36]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d00f      	beq.n	800e7f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e7d4:	4b04      	ldr	r3, [pc, #16]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e7d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7e4:	e002      	b.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800e7e6:	bf00      	nop
 800e7e8:	40023800 	.word	0x40023800
 800e7ec:	4986      	ldr	r1, [pc, #536]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d00b      	beq.n	800e818 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e800:	4b81      	ldr	r3, [pc, #516]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e806:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e810:	497d      	ldr	r1, [pc, #500]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e812:	4313      	orrs	r3, r2
 800e814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	2b01      	cmp	r3, #1
 800e81c:	d006      	beq.n	800e82c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e826:	2b00      	cmp	r3, #0
 800e828:	f000 80d6 	beq.w	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e82c:	4b76      	ldr	r3, [pc, #472]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a75      	ldr	r2, [pc, #468]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e832:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e838:	f7fb fa38 	bl	8009cac <HAL_GetTick>
 800e83c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e83e:	e008      	b.n	800e852 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e840:	f7fb fa34 	bl	8009cac <HAL_GetTick>
 800e844:	4602      	mov	r2, r0
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	1ad3      	subs	r3, r2, r3
 800e84a:	2b64      	cmp	r3, #100	; 0x64
 800e84c:	d901      	bls.n	800e852 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e84e:	2303      	movs	r3, #3
 800e850:	e195      	b.n	800eb7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e852:	4b6d      	ldr	r3, [pc, #436]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d1f0      	bne.n	800e840 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f003 0301 	and.w	r3, r3, #1
 800e866:	2b00      	cmp	r3, #0
 800e868:	d021      	beq.n	800e8ae <HAL_RCCEx_PeriphCLKConfig+0x572>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d11d      	bne.n	800e8ae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e872:	4b65      	ldr	r3, [pc, #404]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e878:	0c1b      	lsrs	r3, r3, #16
 800e87a:	f003 0303 	and.w	r3, r3, #3
 800e87e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e880:	4b61      	ldr	r3, [pc, #388]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e886:	0e1b      	lsrs	r3, r3, #24
 800e888:	f003 030f 	and.w	r3, r3, #15
 800e88c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	019a      	lsls	r2, r3, #6
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	041b      	lsls	r3, r3, #16
 800e898:	431a      	orrs	r2, r3
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	061b      	lsls	r3, r3, #24
 800e89e:	431a      	orrs	r2, r3
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	071b      	lsls	r3, r3, #28
 800e8a6:	4958      	ldr	r1, [pc, #352]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e8a8:	4313      	orrs	r3, r2
 800e8aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d004      	beq.n	800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8c2:	d00a      	beq.n	800e8da <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d02e      	beq.n	800e92e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e8d8:	d129      	bne.n	800e92e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e8da:	4b4b      	ldr	r3, [pc, #300]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e8dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8e0:	0c1b      	lsrs	r3, r3, #16
 800e8e2:	f003 0303 	and.w	r3, r3, #3
 800e8e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e8e8:	4b47      	ldr	r3, [pc, #284]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e8ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8ee:	0f1b      	lsrs	r3, r3, #28
 800e8f0:	f003 0307 	and.w	r3, r3, #7
 800e8f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	019a      	lsls	r2, r3, #6
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	041b      	lsls	r3, r3, #16
 800e900:	431a      	orrs	r2, r3
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	68db      	ldr	r3, [r3, #12]
 800e906:	061b      	lsls	r3, r3, #24
 800e908:	431a      	orrs	r2, r3
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	071b      	lsls	r3, r3, #28
 800e90e:	493e      	ldr	r1, [pc, #248]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e910:	4313      	orrs	r3, r2
 800e912:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e916:	4b3c      	ldr	r3, [pc, #240]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e91c:	f023 021f 	bic.w	r2, r3, #31
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e924:	3b01      	subs	r3, #1
 800e926:	4938      	ldr	r1, [pc, #224]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e928:	4313      	orrs	r3, r2
 800e92a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e936:	2b00      	cmp	r3, #0
 800e938:	d01d      	beq.n	800e976 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e93a:	4b33      	ldr	r3, [pc, #204]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e93c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e940:	0e1b      	lsrs	r3, r3, #24
 800e942:	f003 030f 	and.w	r3, r3, #15
 800e946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e948:	4b2f      	ldr	r3, [pc, #188]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e94a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e94e:	0f1b      	lsrs	r3, r3, #28
 800e950:	f003 0307 	and.w	r3, r3, #7
 800e954:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	019a      	lsls	r2, r3, #6
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	691b      	ldr	r3, [r3, #16]
 800e960:	041b      	lsls	r3, r3, #16
 800e962:	431a      	orrs	r2, r3
 800e964:	693b      	ldr	r3, [r7, #16]
 800e966:	061b      	lsls	r3, r3, #24
 800e968:	431a      	orrs	r2, r3
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	071b      	lsls	r3, r3, #28
 800e96e:	4926      	ldr	r1, [pc, #152]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e970:	4313      	orrs	r3, r2
 800e972:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d011      	beq.n	800e9a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	019a      	lsls	r2, r3, #6
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	691b      	ldr	r3, [r3, #16]
 800e98c:	041b      	lsls	r3, r3, #16
 800e98e:	431a      	orrs	r2, r3
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	68db      	ldr	r3, [r3, #12]
 800e994:	061b      	lsls	r3, r3, #24
 800e996:	431a      	orrs	r2, r3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	689b      	ldr	r3, [r3, #8]
 800e99c:	071b      	lsls	r3, r3, #28
 800e99e:	491a      	ldr	r1, [pc, #104]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e9a0:	4313      	orrs	r3, r2
 800e9a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e9a6:	4b18      	ldr	r3, [pc, #96]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	4a17      	ldr	r2, [pc, #92]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e9ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e9b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e9b2:	f7fb f97b 	bl	8009cac <HAL_GetTick>
 800e9b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e9b8:	e008      	b.n	800e9cc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e9ba:	f7fb f977 	bl	8009cac <HAL_GetTick>
 800e9be:	4602      	mov	r2, r0
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	1ad3      	subs	r3, r2, r3
 800e9c4:	2b64      	cmp	r3, #100	; 0x64
 800e9c6:	d901      	bls.n	800e9cc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e9c8:	2303      	movs	r3, #3
 800e9ca:	e0d8      	b.n	800eb7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e9cc:	4b0e      	ldr	r3, [pc, #56]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d0f0      	beq.n	800e9ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	f040 80ce 	bne.w	800eb7c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e9e0:	4b09      	ldr	r3, [pc, #36]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4a08      	ldr	r2, [pc, #32]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e9e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e9ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e9ec:	f7fb f95e 	bl	8009cac <HAL_GetTick>
 800e9f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e9f2:	e00b      	b.n	800ea0c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e9f4:	f7fb f95a 	bl	8009cac <HAL_GetTick>
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	1ad3      	subs	r3, r2, r3
 800e9fe:	2b64      	cmp	r3, #100	; 0x64
 800ea00:	d904      	bls.n	800ea0c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ea02:	2303      	movs	r3, #3
 800ea04:	e0bb      	b.n	800eb7e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800ea06:	bf00      	nop
 800ea08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ea0c:	4b5e      	ldr	r3, [pc, #376]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ea14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea18:	d0ec      	beq.n	800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d003      	beq.n	800ea2e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d009      	beq.n	800ea42 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d02e      	beq.n	800ea98 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d12a      	bne.n	800ea98 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ea42:	4b51      	ldr	r3, [pc, #324]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ea44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea48:	0c1b      	lsrs	r3, r3, #16
 800ea4a:	f003 0303 	and.w	r3, r3, #3
 800ea4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ea50:	4b4d      	ldr	r3, [pc, #308]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ea52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea56:	0f1b      	lsrs	r3, r3, #28
 800ea58:	f003 0307 	and.w	r3, r3, #7
 800ea5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	695b      	ldr	r3, [r3, #20]
 800ea62:	019a      	lsls	r2, r3, #6
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	041b      	lsls	r3, r3, #16
 800ea68:	431a      	orrs	r2, r3
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	699b      	ldr	r3, [r3, #24]
 800ea6e:	061b      	lsls	r3, r3, #24
 800ea70:	431a      	orrs	r2, r3
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	071b      	lsls	r3, r3, #28
 800ea76:	4944      	ldr	r1, [pc, #272]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ea7e:	4b42      	ldr	r3, [pc, #264]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ea80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	021b      	lsls	r3, r3, #8
 800ea90:	493d      	ldr	r1, [pc, #244]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ea92:	4313      	orrs	r3, r2
 800ea94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d022      	beq.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eaa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eaac:	d11d      	bne.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800eaae:	4b36      	ldr	r3, [pc, #216]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800eab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eab4:	0e1b      	lsrs	r3, r3, #24
 800eab6:	f003 030f 	and.w	r3, r3, #15
 800eaba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800eabc:	4b32      	ldr	r3, [pc, #200]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800eabe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eac2:	0f1b      	lsrs	r3, r3, #28
 800eac4:	f003 0307 	and.w	r3, r3, #7
 800eac8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	695b      	ldr	r3, [r3, #20]
 800eace:	019a      	lsls	r2, r3, #6
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6a1b      	ldr	r3, [r3, #32]
 800ead4:	041b      	lsls	r3, r3, #16
 800ead6:	431a      	orrs	r2, r3
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	061b      	lsls	r3, r3, #24
 800eadc:	431a      	orrs	r2, r3
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	071b      	lsls	r3, r3, #28
 800eae2:	4929      	ldr	r1, [pc, #164]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800eae4:	4313      	orrs	r3, r2
 800eae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f003 0308 	and.w	r3, r3, #8
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d028      	beq.n	800eb48 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800eaf6:	4b24      	ldr	r3, [pc, #144]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800eaf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eafc:	0e1b      	lsrs	r3, r3, #24
 800eafe:	f003 030f 	and.w	r3, r3, #15
 800eb02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800eb04:	4b20      	ldr	r3, [pc, #128]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800eb06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb0a:	0c1b      	lsrs	r3, r3, #16
 800eb0c:	f003 0303 	and.w	r3, r3, #3
 800eb10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	695b      	ldr	r3, [r3, #20]
 800eb16:	019a      	lsls	r2, r3, #6
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	041b      	lsls	r3, r3, #16
 800eb1c:	431a      	orrs	r2, r3
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	061b      	lsls	r3, r3, #24
 800eb22:	431a      	orrs	r2, r3
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	69db      	ldr	r3, [r3, #28]
 800eb28:	071b      	lsls	r3, r3, #28
 800eb2a:	4917      	ldr	r1, [pc, #92]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800eb2c:	4313      	orrs	r3, r2
 800eb2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800eb32:	4b15      	ldr	r3, [pc, #84]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800eb34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb40:	4911      	ldr	r1, [pc, #68]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800eb42:	4313      	orrs	r3, r2
 800eb44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800eb48:	4b0f      	ldr	r3, [pc, #60]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4a0e      	ldr	r2, [pc, #56]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800eb4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eb54:	f7fb f8aa 	bl	8009cac <HAL_GetTick>
 800eb58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800eb5a:	e008      	b.n	800eb6e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800eb5c:	f7fb f8a6 	bl	8009cac <HAL_GetTick>
 800eb60:	4602      	mov	r2, r0
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	1ad3      	subs	r3, r2, r3
 800eb66:	2b64      	cmp	r3, #100	; 0x64
 800eb68:	d901      	bls.n	800eb6e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800eb6a:	2303      	movs	r3, #3
 800eb6c:	e007      	b.n	800eb7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800eb6e:	4b06      	ldr	r3, [pc, #24]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb7a:	d1ef      	bne.n	800eb5c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3720      	adds	r7, #32
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	40023800 	.word	0x40023800

0800eb8c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d101      	bne.n	800eba0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	e025      	b.n	800ebec <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d106      	bne.n	800ebba <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f7f2 fdd9 	bl	800176c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2202      	movs	r2, #2
 800ebbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681a      	ldr	r2, [r3, #0]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	3304      	adds	r3, #4
 800ebca:	4619      	mov	r1, r3
 800ebcc:	4610      	mov	r0, r2
 800ebce:	f001 fadf 	bl	8010190 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6818      	ldr	r0, [r3, #0]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	461a      	mov	r2, r3
 800ebdc:	6839      	ldr	r1, [r7, #0]
 800ebde:	f001 fb49 	bl	8010274 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800ebea:	2300      	movs	r3, #0
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3708      	adds	r7, #8
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ec06:	b2db      	uxtb	r3, r3
 800ec08:	2b02      	cmp	r3, #2
 800ec0a:	d101      	bne.n	800ec10 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800ec0c:	2302      	movs	r3, #2
 800ec0e:	e018      	b.n	800ec42 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2202      	movs	r2, #2
 800ec14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	687a      	ldr	r2, [r7, #4]
 800ec1e:	68b9      	ldr	r1, [r7, #8]
 800ec20:	4618      	mov	r0, r3
 800ec22:	f001 fba7 	bl	8010374 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2b02      	cmp	r3, #2
 800ec2c:	d104      	bne.n	800ec38 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2205      	movs	r2, #5
 800ec32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800ec36:	e003      	b.n	800ec40 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800ec40:	2300      	movs	r3, #0
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}

0800ec4a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ec4a:	b580      	push	{r7, lr}
 800ec4c:	b082      	sub	sp, #8
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	6078      	str	r0, [r7, #4]
 800ec52:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d101      	bne.n	800ec64 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800ec60:	2302      	movs	r3, #2
 800ec62:	e00e      	b.n	800ec82 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2202      	movs	r2, #2
 800ec68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	6839      	ldr	r1, [r7, #0]
 800ec72:	4618      	mov	r0, r3
 800ec74:	f001 fba2 	bl	80103bc <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800ec80:	2300      	movs	r3, #0
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3708      	adds	r7, #8
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	b082      	sub	sp, #8
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d101      	bne.n	800ec9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ec98:	2301      	movs	r3, #1
 800ec9a:	e049      	b.n	800ed30 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eca2:	b2db      	uxtb	r3, r3
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d106      	bne.n	800ecb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f7f3 fd7d 	bl	80027b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2202      	movs	r2, #2
 800ecba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	3304      	adds	r3, #4
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	4610      	mov	r0, r2
 800ecca:	f000 fdf7 	bl	800f8bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2201      	movs	r2, #1
 800ecda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2201      	movs	r2, #1
 800ece2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2201      	movs	r2, #1
 800ecea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2201      	movs	r2, #1
 800ed02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2201      	movs	r2, #1
 800ed0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2201      	movs	r2, #1
 800ed12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2201      	movs	r2, #1
 800ed1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2201      	movs	r2, #1
 800ed22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2201      	movs	r2, #1
 800ed2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ed2e:	2300      	movs	r3, #0
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3708      	adds	r7, #8
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}

0800ed38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b085      	sub	sp, #20
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d001      	beq.n	800ed50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	e054      	b.n	800edfa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2202      	movs	r2, #2
 800ed54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	68da      	ldr	r2, [r3, #12]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f042 0201 	orr.w	r2, r2, #1
 800ed66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a26      	ldr	r2, [pc, #152]	; (800ee08 <HAL_TIM_Base_Start_IT+0xd0>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d022      	beq.n	800edb8 <HAL_TIM_Base_Start_IT+0x80>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed7a:	d01d      	beq.n	800edb8 <HAL_TIM_Base_Start_IT+0x80>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a22      	ldr	r2, [pc, #136]	; (800ee0c <HAL_TIM_Base_Start_IT+0xd4>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d018      	beq.n	800edb8 <HAL_TIM_Base_Start_IT+0x80>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4a21      	ldr	r2, [pc, #132]	; (800ee10 <HAL_TIM_Base_Start_IT+0xd8>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d013      	beq.n	800edb8 <HAL_TIM_Base_Start_IT+0x80>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4a1f      	ldr	r2, [pc, #124]	; (800ee14 <HAL_TIM_Base_Start_IT+0xdc>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d00e      	beq.n	800edb8 <HAL_TIM_Base_Start_IT+0x80>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	4a1e      	ldr	r2, [pc, #120]	; (800ee18 <HAL_TIM_Base_Start_IT+0xe0>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d009      	beq.n	800edb8 <HAL_TIM_Base_Start_IT+0x80>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4a1c      	ldr	r2, [pc, #112]	; (800ee1c <HAL_TIM_Base_Start_IT+0xe4>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d004      	beq.n	800edb8 <HAL_TIM_Base_Start_IT+0x80>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	4a1b      	ldr	r2, [pc, #108]	; (800ee20 <HAL_TIM_Base_Start_IT+0xe8>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d115      	bne.n	800ede4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	689a      	ldr	r2, [r3, #8]
 800edbe:	4b19      	ldr	r3, [pc, #100]	; (800ee24 <HAL_TIM_Base_Start_IT+0xec>)
 800edc0:	4013      	ands	r3, r2
 800edc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2b06      	cmp	r3, #6
 800edc8:	d015      	beq.n	800edf6 <HAL_TIM_Base_Start_IT+0xbe>
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edd0:	d011      	beq.n	800edf6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f042 0201 	orr.w	r2, r2, #1
 800ede0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ede2:	e008      	b.n	800edf6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	f042 0201 	orr.w	r2, r2, #1
 800edf2:	601a      	str	r2, [r3, #0]
 800edf4:	e000      	b.n	800edf8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800edf8:	2300      	movs	r3, #0
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3714      	adds	r7, #20
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr
 800ee06:	bf00      	nop
 800ee08:	40010000 	.word	0x40010000
 800ee0c:	40000400 	.word	0x40000400
 800ee10:	40000800 	.word	0x40000800
 800ee14:	40000c00 	.word	0x40000c00
 800ee18:	40010400 	.word	0x40010400
 800ee1c:	40014000 	.word	0x40014000
 800ee20:	40001800 	.word	0x40001800
 800ee24:	00010007 	.word	0x00010007

0800ee28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d101      	bne.n	800ee3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ee36:	2301      	movs	r3, #1
 800ee38:	e049      	b.n	800eece <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d106      	bne.n	800ee54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f000 f841 	bl	800eed6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2202      	movs	r2, #2
 800ee58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681a      	ldr	r2, [r3, #0]
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	3304      	adds	r3, #4
 800ee64:	4619      	mov	r1, r3
 800ee66:	4610      	mov	r0, r2
 800ee68:	f000 fd28 	bl	800f8bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2201      	movs	r2, #1
 800ee70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2201      	movs	r2, #1
 800ee78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2201      	movs	r2, #1
 800ee80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2201      	movs	r2, #1
 800ee88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2201      	movs	r2, #1
 800ee90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2201      	movs	r2, #1
 800ee98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2201      	movs	r2, #1
 800eea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2201      	movs	r2, #1
 800eea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2201      	movs	r2, #1
 800eeb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2201      	movs	r2, #1
 800eec0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2201      	movs	r2, #1
 800eec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eecc:	2300      	movs	r3, #0
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3708      	adds	r7, #8
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800eed6:	b480      	push	{r7}
 800eed8:	b083      	sub	sp, #12
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800eede:	bf00      	nop
 800eee0:	370c      	adds	r7, #12
 800eee2:	46bd      	mov	sp, r7
 800eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee8:	4770      	bx	lr
	...

0800eeec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d109      	bne.n	800ef10 <HAL_TIM_PWM_Start+0x24>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	bf14      	ite	ne
 800ef08:	2301      	movne	r3, #1
 800ef0a:	2300      	moveq	r3, #0
 800ef0c:	b2db      	uxtb	r3, r3
 800ef0e:	e03c      	b.n	800ef8a <HAL_TIM_PWM_Start+0x9e>
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	2b04      	cmp	r3, #4
 800ef14:	d109      	bne.n	800ef2a <HAL_TIM_PWM_Start+0x3e>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	bf14      	ite	ne
 800ef22:	2301      	movne	r3, #1
 800ef24:	2300      	moveq	r3, #0
 800ef26:	b2db      	uxtb	r3, r3
 800ef28:	e02f      	b.n	800ef8a <HAL_TIM_PWM_Start+0x9e>
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	2b08      	cmp	r3, #8
 800ef2e:	d109      	bne.n	800ef44 <HAL_TIM_PWM_Start+0x58>
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	2b01      	cmp	r3, #1
 800ef3a:	bf14      	ite	ne
 800ef3c:	2301      	movne	r3, #1
 800ef3e:	2300      	moveq	r3, #0
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	e022      	b.n	800ef8a <HAL_TIM_PWM_Start+0x9e>
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	2b0c      	cmp	r3, #12
 800ef48:	d109      	bne.n	800ef5e <HAL_TIM_PWM_Start+0x72>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ef50:	b2db      	uxtb	r3, r3
 800ef52:	2b01      	cmp	r3, #1
 800ef54:	bf14      	ite	ne
 800ef56:	2301      	movne	r3, #1
 800ef58:	2300      	moveq	r3, #0
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	e015      	b.n	800ef8a <HAL_TIM_PWM_Start+0x9e>
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	2b10      	cmp	r3, #16
 800ef62:	d109      	bne.n	800ef78 <HAL_TIM_PWM_Start+0x8c>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	bf14      	ite	ne
 800ef70:	2301      	movne	r3, #1
 800ef72:	2300      	moveq	r3, #0
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	e008      	b.n	800ef8a <HAL_TIM_PWM_Start+0x9e>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef7e:	b2db      	uxtb	r3, r3
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	bf14      	ite	ne
 800ef84:	2301      	movne	r3, #1
 800ef86:	2300      	moveq	r3, #0
 800ef88:	b2db      	uxtb	r3, r3
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d001      	beq.n	800ef92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ef8e:	2301      	movs	r3, #1
 800ef90:	e092      	b.n	800f0b8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d104      	bne.n	800efa2 <HAL_TIM_PWM_Start+0xb6>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2202      	movs	r2, #2
 800ef9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800efa0:	e023      	b.n	800efea <HAL_TIM_PWM_Start+0xfe>
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	2b04      	cmp	r3, #4
 800efa6:	d104      	bne.n	800efb2 <HAL_TIM_PWM_Start+0xc6>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2202      	movs	r2, #2
 800efac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800efb0:	e01b      	b.n	800efea <HAL_TIM_PWM_Start+0xfe>
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	2b08      	cmp	r3, #8
 800efb6:	d104      	bne.n	800efc2 <HAL_TIM_PWM_Start+0xd6>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2202      	movs	r2, #2
 800efbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800efc0:	e013      	b.n	800efea <HAL_TIM_PWM_Start+0xfe>
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	2b0c      	cmp	r3, #12
 800efc6:	d104      	bne.n	800efd2 <HAL_TIM_PWM_Start+0xe6>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2202      	movs	r2, #2
 800efcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800efd0:	e00b      	b.n	800efea <HAL_TIM_PWM_Start+0xfe>
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	2b10      	cmp	r3, #16
 800efd6:	d104      	bne.n	800efe2 <HAL_TIM_PWM_Start+0xf6>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2202      	movs	r2, #2
 800efdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800efe0:	e003      	b.n	800efea <HAL_TIM_PWM_Start+0xfe>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2202      	movs	r2, #2
 800efe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	2201      	movs	r2, #1
 800eff0:	6839      	ldr	r1, [r7, #0]
 800eff2:	4618      	mov	r0, r3
 800eff4:	f000 fffa 	bl	800ffec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	4a30      	ldr	r2, [pc, #192]	; (800f0c0 <HAL_TIM_PWM_Start+0x1d4>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d004      	beq.n	800f00c <HAL_TIM_PWM_Start+0x120>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	4a2f      	ldr	r2, [pc, #188]	; (800f0c4 <HAL_TIM_PWM_Start+0x1d8>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d101      	bne.n	800f010 <HAL_TIM_PWM_Start+0x124>
 800f00c:	2301      	movs	r3, #1
 800f00e:	e000      	b.n	800f012 <HAL_TIM_PWM_Start+0x126>
 800f010:	2300      	movs	r3, #0
 800f012:	2b00      	cmp	r3, #0
 800f014:	d007      	beq.n	800f026 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f024:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4a25      	ldr	r2, [pc, #148]	; (800f0c0 <HAL_TIM_PWM_Start+0x1d4>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d022      	beq.n	800f076 <HAL_TIM_PWM_Start+0x18a>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f038:	d01d      	beq.n	800f076 <HAL_TIM_PWM_Start+0x18a>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	4a22      	ldr	r2, [pc, #136]	; (800f0c8 <HAL_TIM_PWM_Start+0x1dc>)
 800f040:	4293      	cmp	r3, r2
 800f042:	d018      	beq.n	800f076 <HAL_TIM_PWM_Start+0x18a>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4a20      	ldr	r2, [pc, #128]	; (800f0cc <HAL_TIM_PWM_Start+0x1e0>)
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d013      	beq.n	800f076 <HAL_TIM_PWM_Start+0x18a>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	4a1f      	ldr	r2, [pc, #124]	; (800f0d0 <HAL_TIM_PWM_Start+0x1e4>)
 800f054:	4293      	cmp	r3, r2
 800f056:	d00e      	beq.n	800f076 <HAL_TIM_PWM_Start+0x18a>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4a19      	ldr	r2, [pc, #100]	; (800f0c4 <HAL_TIM_PWM_Start+0x1d8>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d009      	beq.n	800f076 <HAL_TIM_PWM_Start+0x18a>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	4a1b      	ldr	r2, [pc, #108]	; (800f0d4 <HAL_TIM_PWM_Start+0x1e8>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d004      	beq.n	800f076 <HAL_TIM_PWM_Start+0x18a>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	4a19      	ldr	r2, [pc, #100]	; (800f0d8 <HAL_TIM_PWM_Start+0x1ec>)
 800f072:	4293      	cmp	r3, r2
 800f074:	d115      	bne.n	800f0a2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	689a      	ldr	r2, [r3, #8]
 800f07c:	4b17      	ldr	r3, [pc, #92]	; (800f0dc <HAL_TIM_PWM_Start+0x1f0>)
 800f07e:	4013      	ands	r3, r2
 800f080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2b06      	cmp	r3, #6
 800f086:	d015      	beq.n	800f0b4 <HAL_TIM_PWM_Start+0x1c8>
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f08e:	d011      	beq.n	800f0b4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f042 0201 	orr.w	r2, r2, #1
 800f09e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0a0:	e008      	b.n	800f0b4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	681a      	ldr	r2, [r3, #0]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f042 0201 	orr.w	r2, r2, #1
 800f0b0:	601a      	str	r2, [r3, #0]
 800f0b2:	e000      	b.n	800f0b6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f0b6:	2300      	movs	r3, #0
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3710      	adds	r7, #16
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	40010000 	.word	0x40010000
 800f0c4:	40010400 	.word	0x40010400
 800f0c8:	40000400 	.word	0x40000400
 800f0cc:	40000800 	.word	0x40000800
 800f0d0:	40000c00 	.word	0x40000c00
 800f0d4:	40014000 	.word	0x40014000
 800f0d8:	40001800 	.word	0x40001800
 800f0dc:	00010007 	.word	0x00010007

0800f0e0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b082      	sub	sp, #8
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	2b0c      	cmp	r3, #12
 800f0ee:	d855      	bhi.n	800f19c <HAL_TIM_PWM_Stop_DMA+0xbc>
 800f0f0:	a201      	add	r2, pc, #4	; (adr r2, 800f0f8 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800f0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f6:	bf00      	nop
 800f0f8:	0800f12d 	.word	0x0800f12d
 800f0fc:	0800f19d 	.word	0x0800f19d
 800f100:	0800f19d 	.word	0x0800f19d
 800f104:	0800f19d 	.word	0x0800f19d
 800f108:	0800f149 	.word	0x0800f149
 800f10c:	0800f19d 	.word	0x0800f19d
 800f110:	0800f19d 	.word	0x0800f19d
 800f114:	0800f19d 	.word	0x0800f19d
 800f118:	0800f165 	.word	0x0800f165
 800f11c:	0800f19d 	.word	0x0800f19d
 800f120:	0800f19d 	.word	0x0800f19d
 800f124:	0800f19d 	.word	0x0800f19d
 800f128:	0800f181 	.word	0x0800f181
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	68da      	ldr	r2, [r3, #12]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f13a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f140:	4618      	mov	r0, r3
 800f142:	f7fc fa11 	bl	800b568 <HAL_DMA_Abort_IT>
      break;
 800f146:	e02a      	b.n	800f19e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	68da      	ldr	r2, [r3, #12]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f156:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7fc fa03 	bl	800b568 <HAL_DMA_Abort_IT>
      break;
 800f162:	e01c      	b.n	800f19e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	68da      	ldr	r2, [r3, #12]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f172:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f178:	4618      	mov	r0, r3
 800f17a:	f7fc f9f5 	bl	800b568 <HAL_DMA_Abort_IT>
      break;
 800f17e:	e00e      	b.n	800f19e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	68da      	ldr	r2, [r3, #12]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f18e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f194:	4618      	mov	r0, r3
 800f196:	f7fc f9e7 	bl	800b568 <HAL_DMA_Abort_IT>
      break;
 800f19a:	e000      	b.n	800f19e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 800f19c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	6839      	ldr	r1, [r7, #0]
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f000 ff20 	bl	800ffec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4a36      	ldr	r2, [pc, #216]	; (800f28c <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d004      	beq.n	800f1c0 <HAL_TIM_PWM_Stop_DMA+0xe0>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	4a35      	ldr	r2, [pc, #212]	; (800f290 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d101      	bne.n	800f1c4 <HAL_TIM_PWM_Stop_DMA+0xe4>
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	e000      	b.n	800f1c6 <HAL_TIM_PWM_Stop_DMA+0xe6>
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d017      	beq.n	800f1fa <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	6a1a      	ldr	r2, [r3, #32]
 800f1d0:	f241 1311 	movw	r3, #4369	; 0x1111
 800f1d4:	4013      	ands	r3, r2
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d10f      	bne.n	800f1fa <HAL_TIM_PWM_Stop_DMA+0x11a>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	6a1a      	ldr	r2, [r3, #32]
 800f1e0:	f240 4344 	movw	r3, #1092	; 0x444
 800f1e4:	4013      	ands	r3, r2
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d107      	bne.n	800f1fa <HAL_TIM_PWM_Stop_DMA+0x11a>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f1f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	6a1a      	ldr	r2, [r3, #32]
 800f200:	f241 1311 	movw	r3, #4369	; 0x1111
 800f204:	4013      	ands	r3, r2
 800f206:	2b00      	cmp	r3, #0
 800f208:	d10f      	bne.n	800f22a <HAL_TIM_PWM_Stop_DMA+0x14a>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	6a1a      	ldr	r2, [r3, #32]
 800f210:	f240 4344 	movw	r3, #1092	; 0x444
 800f214:	4013      	ands	r3, r2
 800f216:	2b00      	cmp	r3, #0
 800f218:	d107      	bne.n	800f22a <HAL_TIM_PWM_Stop_DMA+0x14a>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	f022 0201 	bic.w	r2, r2, #1
 800f228:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d104      	bne.n	800f23a <HAL_TIM_PWM_Stop_DMA+0x15a>
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2201      	movs	r2, #1
 800f234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f238:	e023      	b.n	800f282 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	2b04      	cmp	r3, #4
 800f23e:	d104      	bne.n	800f24a <HAL_TIM_PWM_Stop_DMA+0x16a>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2201      	movs	r2, #1
 800f244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f248:	e01b      	b.n	800f282 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	2b08      	cmp	r3, #8
 800f24e:	d104      	bne.n	800f25a <HAL_TIM_PWM_Stop_DMA+0x17a>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2201      	movs	r2, #1
 800f254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f258:	e013      	b.n	800f282 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	2b0c      	cmp	r3, #12
 800f25e:	d104      	bne.n	800f26a <HAL_TIM_PWM_Stop_DMA+0x18a>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2201      	movs	r2, #1
 800f264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f268:	e00b      	b.n	800f282 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	2b10      	cmp	r3, #16
 800f26e:	d104      	bne.n	800f27a <HAL_TIM_PWM_Stop_DMA+0x19a>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2201      	movs	r2, #1
 800f274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f278:	e003      	b.n	800f282 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2201      	movs	r2, #1
 800f27e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800f282:	2300      	movs	r3, #0
}
 800f284:	4618      	mov	r0, r3
 800f286:	3708      	adds	r7, #8
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	40010000 	.word	0x40010000
 800f290:	40010400 	.word	0x40010400

0800f294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	691b      	ldr	r3, [r3, #16]
 800f2a2:	f003 0302 	and.w	r3, r3, #2
 800f2a6:	2b02      	cmp	r3, #2
 800f2a8:	d122      	bne.n	800f2f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	68db      	ldr	r3, [r3, #12]
 800f2b0:	f003 0302 	and.w	r3, r3, #2
 800f2b4:	2b02      	cmp	r3, #2
 800f2b6:	d11b      	bne.n	800f2f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f06f 0202 	mvn.w	r2, #2
 800f2c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2201      	movs	r2, #1
 800f2c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	699b      	ldr	r3, [r3, #24]
 800f2ce:	f003 0303 	and.w	r3, r3, #3
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d003      	beq.n	800f2de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f000 fadc 	bl	800f894 <HAL_TIM_IC_CaptureCallback>
 800f2dc:	e005      	b.n	800f2ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f000 face 	bl	800f880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7f1 fb73 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	691b      	ldr	r3, [r3, #16]
 800f2f6:	f003 0304 	and.w	r3, r3, #4
 800f2fa:	2b04      	cmp	r3, #4
 800f2fc:	d122      	bne.n	800f344 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	68db      	ldr	r3, [r3, #12]
 800f304:	f003 0304 	and.w	r3, r3, #4
 800f308:	2b04      	cmp	r3, #4
 800f30a:	d11b      	bne.n	800f344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	f06f 0204 	mvn.w	r2, #4
 800f314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2202      	movs	r2, #2
 800f31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	699b      	ldr	r3, [r3, #24]
 800f322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f326:	2b00      	cmp	r3, #0
 800f328:	d003      	beq.n	800f332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f000 fab2 	bl	800f894 <HAL_TIM_IC_CaptureCallback>
 800f330:	e005      	b.n	800f33e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f000 faa4 	bl	800f880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f7f1 fb49 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2200      	movs	r2, #0
 800f342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	691b      	ldr	r3, [r3, #16]
 800f34a:	f003 0308 	and.w	r3, r3, #8
 800f34e:	2b08      	cmp	r3, #8
 800f350:	d122      	bne.n	800f398 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	68db      	ldr	r3, [r3, #12]
 800f358:	f003 0308 	and.w	r3, r3, #8
 800f35c:	2b08      	cmp	r3, #8
 800f35e:	d11b      	bne.n	800f398 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f06f 0208 	mvn.w	r2, #8
 800f368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2204      	movs	r2, #4
 800f36e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	69db      	ldr	r3, [r3, #28]
 800f376:	f003 0303 	and.w	r3, r3, #3
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d003      	beq.n	800f386 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f000 fa88 	bl	800f894 <HAL_TIM_IC_CaptureCallback>
 800f384:	e005      	b.n	800f392 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f000 fa7a 	bl	800f880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f7f1 fb1f 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2200      	movs	r2, #0
 800f396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	691b      	ldr	r3, [r3, #16]
 800f39e:	f003 0310 	and.w	r3, r3, #16
 800f3a2:	2b10      	cmp	r3, #16
 800f3a4:	d122      	bne.n	800f3ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	68db      	ldr	r3, [r3, #12]
 800f3ac:	f003 0310 	and.w	r3, r3, #16
 800f3b0:	2b10      	cmp	r3, #16
 800f3b2:	d11b      	bne.n	800f3ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f06f 0210 	mvn.w	r2, #16
 800f3bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2208      	movs	r2, #8
 800f3c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	69db      	ldr	r3, [r3, #28]
 800f3ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d003      	beq.n	800f3da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f000 fa5e 	bl	800f894 <HAL_TIM_IC_CaptureCallback>
 800f3d8:	e005      	b.n	800f3e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f000 fa50 	bl	800f880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f7f1 faf5 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	691b      	ldr	r3, [r3, #16]
 800f3f2:	f003 0301 	and.w	r3, r3, #1
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d10e      	bne.n	800f418 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	68db      	ldr	r3, [r3, #12]
 800f400:	f003 0301 	and.w	r3, r3, #1
 800f404:	2b01      	cmp	r3, #1
 800f406:	d107      	bne.n	800f418 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f06f 0201 	mvn.w	r2, #1
 800f410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f7f2 fe3e 	bl	8002094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	691b      	ldr	r3, [r3, #16]
 800f41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f422:	2b80      	cmp	r3, #128	; 0x80
 800f424:	d10e      	bne.n	800f444 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	68db      	ldr	r3, [r3, #12]
 800f42c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f430:	2b80      	cmp	r3, #128	; 0x80
 800f432:	d107      	bne.n	800f444 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f43c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f000 fe92 	bl	8010168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	691b      	ldr	r3, [r3, #16]
 800f44a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f44e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f452:	d10e      	bne.n	800f472 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	68db      	ldr	r3, [r3, #12]
 800f45a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f45e:	2b80      	cmp	r3, #128	; 0x80
 800f460:	d107      	bne.n	800f472 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f46a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f000 fe85 	bl	801017c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	691b      	ldr	r3, [r3, #16]
 800f478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f47c:	2b40      	cmp	r3, #64	; 0x40
 800f47e:	d10e      	bne.n	800f49e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f48a:	2b40      	cmp	r3, #64	; 0x40
 800f48c:	d107      	bne.n	800f49e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 fa05 	bl	800f8a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	691b      	ldr	r3, [r3, #16]
 800f4a4:	f003 0320 	and.w	r3, r3, #32
 800f4a8:	2b20      	cmp	r3, #32
 800f4aa:	d10e      	bne.n	800f4ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	68db      	ldr	r3, [r3, #12]
 800f4b2:	f003 0320 	and.w	r3, r3, #32
 800f4b6:	2b20      	cmp	r3, #32
 800f4b8:	d107      	bne.n	800f4ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f06f 0220 	mvn.w	r2, #32
 800f4c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 fe45 	bl	8010154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f4ca:	bf00      	nop
 800f4cc:	3708      	adds	r7, #8
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
	...

0800f4d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	60f8      	str	r0, [r7, #12]
 800f4dc:	60b9      	str	r1, [r7, #8]
 800f4de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	d101      	bne.n	800f4ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f4ea:	2302      	movs	r3, #2
 800f4ec:	e0fd      	b.n	800f6ea <HAL_TIM_PWM_ConfigChannel+0x216>
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2201      	movs	r2, #1
 800f4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2b14      	cmp	r3, #20
 800f4fa:	f200 80f0 	bhi.w	800f6de <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f4fe:	a201      	add	r2, pc, #4	; (adr r2, 800f504 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f504:	0800f559 	.word	0x0800f559
 800f508:	0800f6df 	.word	0x0800f6df
 800f50c:	0800f6df 	.word	0x0800f6df
 800f510:	0800f6df 	.word	0x0800f6df
 800f514:	0800f599 	.word	0x0800f599
 800f518:	0800f6df 	.word	0x0800f6df
 800f51c:	0800f6df 	.word	0x0800f6df
 800f520:	0800f6df 	.word	0x0800f6df
 800f524:	0800f5db 	.word	0x0800f5db
 800f528:	0800f6df 	.word	0x0800f6df
 800f52c:	0800f6df 	.word	0x0800f6df
 800f530:	0800f6df 	.word	0x0800f6df
 800f534:	0800f61b 	.word	0x0800f61b
 800f538:	0800f6df 	.word	0x0800f6df
 800f53c:	0800f6df 	.word	0x0800f6df
 800f540:	0800f6df 	.word	0x0800f6df
 800f544:	0800f65d 	.word	0x0800f65d
 800f548:	0800f6df 	.word	0x0800f6df
 800f54c:	0800f6df 	.word	0x0800f6df
 800f550:	0800f6df 	.word	0x0800f6df
 800f554:	0800f69d 	.word	0x0800f69d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	68b9      	ldr	r1, [r7, #8]
 800f55e:	4618      	mov	r0, r3
 800f560:	f000 fa4c 	bl	800f9fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	699a      	ldr	r2, [r3, #24]
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f042 0208 	orr.w	r2, r2, #8
 800f572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	699a      	ldr	r2, [r3, #24]
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f022 0204 	bic.w	r2, r2, #4
 800f582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	6999      	ldr	r1, [r3, #24]
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	691a      	ldr	r2, [r3, #16]
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	430a      	orrs	r2, r1
 800f594:	619a      	str	r2, [r3, #24]
      break;
 800f596:	e0a3      	b.n	800f6e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	68b9      	ldr	r1, [r7, #8]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f000 fa9e 	bl	800fae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	699a      	ldr	r2, [r3, #24]
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f5b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	699a      	ldr	r2, [r3, #24]
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f5c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	6999      	ldr	r1, [r3, #24]
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	691b      	ldr	r3, [r3, #16]
 800f5ce:	021a      	lsls	r2, r3, #8
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	430a      	orrs	r2, r1
 800f5d6:	619a      	str	r2, [r3, #24]
      break;
 800f5d8:	e082      	b.n	800f6e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	68b9      	ldr	r1, [r7, #8]
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f000 faf5 	bl	800fbd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	69da      	ldr	r2, [r3, #28]
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	f042 0208 	orr.w	r2, r2, #8
 800f5f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	69da      	ldr	r2, [r3, #28]
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	f022 0204 	bic.w	r2, r2, #4
 800f604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	69d9      	ldr	r1, [r3, #28]
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	691a      	ldr	r2, [r3, #16]
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	430a      	orrs	r2, r1
 800f616:	61da      	str	r2, [r3, #28]
      break;
 800f618:	e062      	b.n	800f6e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	68b9      	ldr	r1, [r7, #8]
 800f620:	4618      	mov	r0, r3
 800f622:	f000 fb4b 	bl	800fcbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	69da      	ldr	r2, [r3, #28]
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	69da      	ldr	r2, [r3, #28]
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	69d9      	ldr	r1, [r3, #28]
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	691b      	ldr	r3, [r3, #16]
 800f650:	021a      	lsls	r2, r3, #8
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	430a      	orrs	r2, r1
 800f658:	61da      	str	r2, [r3, #28]
      break;
 800f65a:	e041      	b.n	800f6e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	68b9      	ldr	r1, [r7, #8]
 800f662:	4618      	mov	r0, r3
 800f664:	f000 fb82 	bl	800fd6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f042 0208 	orr.w	r2, r2, #8
 800f676:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f022 0204 	bic.w	r2, r2, #4
 800f686:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	691a      	ldr	r2, [r3, #16]
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	430a      	orrs	r2, r1
 800f698:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f69a:	e021      	b.n	800f6e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	68b9      	ldr	r1, [r7, #8]
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f000 fbb4 	bl	800fe10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f6b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f6c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	691b      	ldr	r3, [r3, #16]
 800f6d2:	021a      	lsls	r2, r3, #8
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	430a      	orrs	r2, r1
 800f6da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f6dc:	e000      	b.n	800f6e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800f6de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f6e8:	2300      	movs	r3, #0
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3710      	adds	r7, #16
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop

0800f6f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b084      	sub	sp, #16
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f704:	2b01      	cmp	r3, #1
 800f706:	d101      	bne.n	800f70c <HAL_TIM_ConfigClockSource+0x18>
 800f708:	2302      	movs	r3, #2
 800f70a:	e0b3      	b.n	800f874 <HAL_TIM_ConfigClockSource+0x180>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2201      	movs	r2, #1
 800f710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2202      	movs	r2, #2
 800f718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f724:	68fa      	ldr	r2, [r7, #12]
 800f726:	4b55      	ldr	r3, [pc, #340]	; (800f87c <HAL_TIM_ConfigClockSource+0x188>)
 800f728:	4013      	ands	r3, r2
 800f72a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f732:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	68fa      	ldr	r2, [r7, #12]
 800f73a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f744:	d03e      	beq.n	800f7c4 <HAL_TIM_ConfigClockSource+0xd0>
 800f746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f74a:	f200 8087 	bhi.w	800f85c <HAL_TIM_ConfigClockSource+0x168>
 800f74e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f752:	f000 8085 	beq.w	800f860 <HAL_TIM_ConfigClockSource+0x16c>
 800f756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f75a:	d87f      	bhi.n	800f85c <HAL_TIM_ConfigClockSource+0x168>
 800f75c:	2b70      	cmp	r3, #112	; 0x70
 800f75e:	d01a      	beq.n	800f796 <HAL_TIM_ConfigClockSource+0xa2>
 800f760:	2b70      	cmp	r3, #112	; 0x70
 800f762:	d87b      	bhi.n	800f85c <HAL_TIM_ConfigClockSource+0x168>
 800f764:	2b60      	cmp	r3, #96	; 0x60
 800f766:	d050      	beq.n	800f80a <HAL_TIM_ConfigClockSource+0x116>
 800f768:	2b60      	cmp	r3, #96	; 0x60
 800f76a:	d877      	bhi.n	800f85c <HAL_TIM_ConfigClockSource+0x168>
 800f76c:	2b50      	cmp	r3, #80	; 0x50
 800f76e:	d03c      	beq.n	800f7ea <HAL_TIM_ConfigClockSource+0xf6>
 800f770:	2b50      	cmp	r3, #80	; 0x50
 800f772:	d873      	bhi.n	800f85c <HAL_TIM_ConfigClockSource+0x168>
 800f774:	2b40      	cmp	r3, #64	; 0x40
 800f776:	d058      	beq.n	800f82a <HAL_TIM_ConfigClockSource+0x136>
 800f778:	2b40      	cmp	r3, #64	; 0x40
 800f77a:	d86f      	bhi.n	800f85c <HAL_TIM_ConfigClockSource+0x168>
 800f77c:	2b30      	cmp	r3, #48	; 0x30
 800f77e:	d064      	beq.n	800f84a <HAL_TIM_ConfigClockSource+0x156>
 800f780:	2b30      	cmp	r3, #48	; 0x30
 800f782:	d86b      	bhi.n	800f85c <HAL_TIM_ConfigClockSource+0x168>
 800f784:	2b20      	cmp	r3, #32
 800f786:	d060      	beq.n	800f84a <HAL_TIM_ConfigClockSource+0x156>
 800f788:	2b20      	cmp	r3, #32
 800f78a:	d867      	bhi.n	800f85c <HAL_TIM_ConfigClockSource+0x168>
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d05c      	beq.n	800f84a <HAL_TIM_ConfigClockSource+0x156>
 800f790:	2b10      	cmp	r3, #16
 800f792:	d05a      	beq.n	800f84a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800f794:	e062      	b.n	800f85c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6818      	ldr	r0, [r3, #0]
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	6899      	ldr	r1, [r3, #8]
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	685a      	ldr	r2, [r3, #4]
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	f000 fc01 	bl	800ffac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	689b      	ldr	r3, [r3, #8]
 800f7b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f7b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	68fa      	ldr	r2, [r7, #12]
 800f7c0:	609a      	str	r2, [r3, #8]
      break;
 800f7c2:	e04e      	b.n	800f862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6818      	ldr	r0, [r3, #0]
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	6899      	ldr	r1, [r3, #8]
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	685a      	ldr	r2, [r3, #4]
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	68db      	ldr	r3, [r3, #12]
 800f7d4:	f000 fbea 	bl	800ffac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	689a      	ldr	r2, [r3, #8]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f7e6:	609a      	str	r2, [r3, #8]
      break;
 800f7e8:	e03b      	b.n	800f862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6818      	ldr	r0, [r3, #0]
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	6859      	ldr	r1, [r3, #4]
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	68db      	ldr	r3, [r3, #12]
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	f000 fb5e 	bl	800feb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2150      	movs	r1, #80	; 0x50
 800f802:	4618      	mov	r0, r3
 800f804:	f000 fbb7 	bl	800ff76 <TIM_ITRx_SetConfig>
      break;
 800f808:	e02b      	b.n	800f862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6818      	ldr	r0, [r3, #0]
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	6859      	ldr	r1, [r3, #4]
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	461a      	mov	r2, r3
 800f818:	f000 fb7d 	bl	800ff16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	2160      	movs	r1, #96	; 0x60
 800f822:	4618      	mov	r0, r3
 800f824:	f000 fba7 	bl	800ff76 <TIM_ITRx_SetConfig>
      break;
 800f828:	e01b      	b.n	800f862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6818      	ldr	r0, [r3, #0]
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	6859      	ldr	r1, [r3, #4]
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	68db      	ldr	r3, [r3, #12]
 800f836:	461a      	mov	r2, r3
 800f838:	f000 fb3e 	bl	800feb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2140      	movs	r1, #64	; 0x40
 800f842:	4618      	mov	r0, r3
 800f844:	f000 fb97 	bl	800ff76 <TIM_ITRx_SetConfig>
      break;
 800f848:	e00b      	b.n	800f862 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	4619      	mov	r1, r3
 800f854:	4610      	mov	r0, r2
 800f856:	f000 fb8e 	bl	800ff76 <TIM_ITRx_SetConfig>
        break;
 800f85a:	e002      	b.n	800f862 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800f85c:	bf00      	nop
 800f85e:	e000      	b.n	800f862 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800f860:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2201      	movs	r2, #1
 800f866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2200      	movs	r2, #0
 800f86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f872:	2300      	movs	r3, #0
}
 800f874:	4618      	mov	r0, r3
 800f876:	3710      	adds	r7, #16
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}
 800f87c:	fffeff88 	.word	0xfffeff88

0800f880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f880:	b480      	push	{r7}
 800f882:	b083      	sub	sp, #12
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f888:	bf00      	nop
 800f88a:	370c      	adds	r7, #12
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr

0800f894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f894:	b480      	push	{r7}
 800f896:	b083      	sub	sp, #12
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f89c:	bf00      	nop
 800f89e:	370c      	adds	r7, #12
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a6:	4770      	bx	lr

0800f8a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f8a8:	b480      	push	{r7}
 800f8aa:	b083      	sub	sp, #12
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f8b0:	bf00      	nop
 800f8b2:	370c      	adds	r7, #12
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr

0800f8bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f8bc:	b480      	push	{r7}
 800f8be:	b085      	sub	sp, #20
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
 800f8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	4a40      	ldr	r2, [pc, #256]	; (800f9d0 <TIM_Base_SetConfig+0x114>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d013      	beq.n	800f8fc <TIM_Base_SetConfig+0x40>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8da:	d00f      	beq.n	800f8fc <TIM_Base_SetConfig+0x40>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	4a3d      	ldr	r2, [pc, #244]	; (800f9d4 <TIM_Base_SetConfig+0x118>)
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d00b      	beq.n	800f8fc <TIM_Base_SetConfig+0x40>
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	4a3c      	ldr	r2, [pc, #240]	; (800f9d8 <TIM_Base_SetConfig+0x11c>)
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d007      	beq.n	800f8fc <TIM_Base_SetConfig+0x40>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	4a3b      	ldr	r2, [pc, #236]	; (800f9dc <TIM_Base_SetConfig+0x120>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d003      	beq.n	800f8fc <TIM_Base_SetConfig+0x40>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	4a3a      	ldr	r2, [pc, #232]	; (800f9e0 <TIM_Base_SetConfig+0x124>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d108      	bne.n	800f90e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	68fa      	ldr	r2, [r7, #12]
 800f90a:	4313      	orrs	r3, r2
 800f90c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4a2f      	ldr	r2, [pc, #188]	; (800f9d0 <TIM_Base_SetConfig+0x114>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d02b      	beq.n	800f96e <TIM_Base_SetConfig+0xb2>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f91c:	d027      	beq.n	800f96e <TIM_Base_SetConfig+0xb2>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4a2c      	ldr	r2, [pc, #176]	; (800f9d4 <TIM_Base_SetConfig+0x118>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d023      	beq.n	800f96e <TIM_Base_SetConfig+0xb2>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4a2b      	ldr	r2, [pc, #172]	; (800f9d8 <TIM_Base_SetConfig+0x11c>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d01f      	beq.n	800f96e <TIM_Base_SetConfig+0xb2>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4a2a      	ldr	r2, [pc, #168]	; (800f9dc <TIM_Base_SetConfig+0x120>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d01b      	beq.n	800f96e <TIM_Base_SetConfig+0xb2>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4a29      	ldr	r2, [pc, #164]	; (800f9e0 <TIM_Base_SetConfig+0x124>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d017      	beq.n	800f96e <TIM_Base_SetConfig+0xb2>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4a28      	ldr	r2, [pc, #160]	; (800f9e4 <TIM_Base_SetConfig+0x128>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d013      	beq.n	800f96e <TIM_Base_SetConfig+0xb2>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	4a27      	ldr	r2, [pc, #156]	; (800f9e8 <TIM_Base_SetConfig+0x12c>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d00f      	beq.n	800f96e <TIM_Base_SetConfig+0xb2>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	4a26      	ldr	r2, [pc, #152]	; (800f9ec <TIM_Base_SetConfig+0x130>)
 800f952:	4293      	cmp	r3, r2
 800f954:	d00b      	beq.n	800f96e <TIM_Base_SetConfig+0xb2>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	4a25      	ldr	r2, [pc, #148]	; (800f9f0 <TIM_Base_SetConfig+0x134>)
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d007      	beq.n	800f96e <TIM_Base_SetConfig+0xb2>
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	4a24      	ldr	r2, [pc, #144]	; (800f9f4 <TIM_Base_SetConfig+0x138>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d003      	beq.n	800f96e <TIM_Base_SetConfig+0xb2>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	4a23      	ldr	r2, [pc, #140]	; (800f9f8 <TIM_Base_SetConfig+0x13c>)
 800f96a:	4293      	cmp	r3, r2
 800f96c:	d108      	bne.n	800f980 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	68db      	ldr	r3, [r3, #12]
 800f97a:	68fa      	ldr	r2, [r7, #12]
 800f97c:	4313      	orrs	r3, r2
 800f97e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	695b      	ldr	r3, [r3, #20]
 800f98a:	4313      	orrs	r3, r2
 800f98c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	68fa      	ldr	r2, [r7, #12]
 800f992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	689a      	ldr	r2, [r3, #8]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	681a      	ldr	r2, [r3, #0]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	4a0a      	ldr	r2, [pc, #40]	; (800f9d0 <TIM_Base_SetConfig+0x114>)
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d003      	beq.n	800f9b4 <TIM_Base_SetConfig+0xf8>
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	4a0c      	ldr	r2, [pc, #48]	; (800f9e0 <TIM_Base_SetConfig+0x124>)
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d103      	bne.n	800f9bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	691a      	ldr	r2, [r3, #16]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2201      	movs	r2, #1
 800f9c0:	615a      	str	r2, [r3, #20]
}
 800f9c2:	bf00      	nop
 800f9c4:	3714      	adds	r7, #20
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9cc:	4770      	bx	lr
 800f9ce:	bf00      	nop
 800f9d0:	40010000 	.word	0x40010000
 800f9d4:	40000400 	.word	0x40000400
 800f9d8:	40000800 	.word	0x40000800
 800f9dc:	40000c00 	.word	0x40000c00
 800f9e0:	40010400 	.word	0x40010400
 800f9e4:	40014000 	.word	0x40014000
 800f9e8:	40014400 	.word	0x40014400
 800f9ec:	40014800 	.word	0x40014800
 800f9f0:	40001800 	.word	0x40001800
 800f9f4:	40001c00 	.word	0x40001c00
 800f9f8:	40002000 	.word	0x40002000

0800f9fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b087      	sub	sp, #28
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6a1b      	ldr	r3, [r3, #32]
 800fa0a:	f023 0201 	bic.w	r2, r3, #1
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6a1b      	ldr	r3, [r3, #32]
 800fa16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	699b      	ldr	r3, [r3, #24]
 800fa22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fa24:	68fa      	ldr	r2, [r7, #12]
 800fa26:	4b2b      	ldr	r3, [pc, #172]	; (800fad4 <TIM_OC1_SetConfig+0xd8>)
 800fa28:	4013      	ands	r3, r2
 800fa2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	f023 0303 	bic.w	r3, r3, #3
 800fa32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	68fa      	ldr	r2, [r7, #12]
 800fa3a:	4313      	orrs	r3, r2
 800fa3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	f023 0302 	bic.w	r3, r3, #2
 800fa44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	689b      	ldr	r3, [r3, #8]
 800fa4a:	697a      	ldr	r2, [r7, #20]
 800fa4c:	4313      	orrs	r3, r2
 800fa4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	4a21      	ldr	r2, [pc, #132]	; (800fad8 <TIM_OC1_SetConfig+0xdc>)
 800fa54:	4293      	cmp	r3, r2
 800fa56:	d003      	beq.n	800fa60 <TIM_OC1_SetConfig+0x64>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	4a20      	ldr	r2, [pc, #128]	; (800fadc <TIM_OC1_SetConfig+0xe0>)
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d10c      	bne.n	800fa7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	f023 0308 	bic.w	r3, r3, #8
 800fa66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	697a      	ldr	r2, [r7, #20]
 800fa6e:	4313      	orrs	r3, r2
 800fa70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	f023 0304 	bic.w	r3, r3, #4
 800fa78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	4a16      	ldr	r2, [pc, #88]	; (800fad8 <TIM_OC1_SetConfig+0xdc>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d003      	beq.n	800fa8a <TIM_OC1_SetConfig+0x8e>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	4a15      	ldr	r2, [pc, #84]	; (800fadc <TIM_OC1_SetConfig+0xe0>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d111      	bne.n	800faae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fa8a:	693b      	ldr	r3, [r7, #16]
 800fa8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	695b      	ldr	r3, [r3, #20]
 800fa9e:	693a      	ldr	r2, [r7, #16]
 800faa0:	4313      	orrs	r3, r2
 800faa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	699b      	ldr	r3, [r3, #24]
 800faa8:	693a      	ldr	r2, [r7, #16]
 800faaa:	4313      	orrs	r3, r2
 800faac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	693a      	ldr	r2, [r7, #16]
 800fab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	68fa      	ldr	r2, [r7, #12]
 800fab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	685a      	ldr	r2, [r3, #4]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	697a      	ldr	r2, [r7, #20]
 800fac6:	621a      	str	r2, [r3, #32]
}
 800fac8:	bf00      	nop
 800faca:	371c      	adds	r7, #28
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr
 800fad4:	fffeff8f 	.word	0xfffeff8f
 800fad8:	40010000 	.word	0x40010000
 800fadc:	40010400 	.word	0x40010400

0800fae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b087      	sub	sp, #28
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6a1b      	ldr	r3, [r3, #32]
 800faee:	f023 0210 	bic.w	r2, r3, #16
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	6a1b      	ldr	r3, [r3, #32]
 800fafa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	699b      	ldr	r3, [r3, #24]
 800fb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fb08:	68fa      	ldr	r2, [r7, #12]
 800fb0a:	4b2e      	ldr	r3, [pc, #184]	; (800fbc4 <TIM_OC2_SetConfig+0xe4>)
 800fb0c:	4013      	ands	r3, r2
 800fb0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	021b      	lsls	r3, r3, #8
 800fb1e:	68fa      	ldr	r2, [r7, #12]
 800fb20:	4313      	orrs	r3, r2
 800fb22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	f023 0320 	bic.w	r3, r3, #32
 800fb2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	689b      	ldr	r3, [r3, #8]
 800fb30:	011b      	lsls	r3, r3, #4
 800fb32:	697a      	ldr	r2, [r7, #20]
 800fb34:	4313      	orrs	r3, r2
 800fb36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a23      	ldr	r2, [pc, #140]	; (800fbc8 <TIM_OC2_SetConfig+0xe8>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d003      	beq.n	800fb48 <TIM_OC2_SetConfig+0x68>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4a22      	ldr	r2, [pc, #136]	; (800fbcc <TIM_OC2_SetConfig+0xec>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d10d      	bne.n	800fb64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	68db      	ldr	r3, [r3, #12]
 800fb54:	011b      	lsls	r3, r3, #4
 800fb56:	697a      	ldr	r2, [r7, #20]
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	4a18      	ldr	r2, [pc, #96]	; (800fbc8 <TIM_OC2_SetConfig+0xe8>)
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d003      	beq.n	800fb74 <TIM_OC2_SetConfig+0x94>
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	4a17      	ldr	r2, [pc, #92]	; (800fbcc <TIM_OC2_SetConfig+0xec>)
 800fb70:	4293      	cmp	r3, r2
 800fb72:	d113      	bne.n	800fb9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	695b      	ldr	r3, [r3, #20]
 800fb88:	009b      	lsls	r3, r3, #2
 800fb8a:	693a      	ldr	r2, [r7, #16]
 800fb8c:	4313      	orrs	r3, r2
 800fb8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	699b      	ldr	r3, [r3, #24]
 800fb94:	009b      	lsls	r3, r3, #2
 800fb96:	693a      	ldr	r2, [r7, #16]
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	693a      	ldr	r2, [r7, #16]
 800fba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	68fa      	ldr	r2, [r7, #12]
 800fba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	685a      	ldr	r2, [r3, #4]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	697a      	ldr	r2, [r7, #20]
 800fbb4:	621a      	str	r2, [r3, #32]
}
 800fbb6:	bf00      	nop
 800fbb8:	371c      	adds	r7, #28
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc0:	4770      	bx	lr
 800fbc2:	bf00      	nop
 800fbc4:	feff8fff 	.word	0xfeff8fff
 800fbc8:	40010000 	.word	0x40010000
 800fbcc:	40010400 	.word	0x40010400

0800fbd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b087      	sub	sp, #28
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6a1b      	ldr	r3, [r3, #32]
 800fbde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6a1b      	ldr	r3, [r3, #32]
 800fbea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	69db      	ldr	r3, [r3, #28]
 800fbf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fbf8:	68fa      	ldr	r2, [r7, #12]
 800fbfa:	4b2d      	ldr	r3, [pc, #180]	; (800fcb0 <TIM_OC3_SetConfig+0xe0>)
 800fbfc:	4013      	ands	r3, r2
 800fbfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f023 0303 	bic.w	r3, r3, #3
 800fc06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	68fa      	ldr	r2, [r7, #12]
 800fc0e:	4313      	orrs	r3, r2
 800fc10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fc18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	689b      	ldr	r3, [r3, #8]
 800fc1e:	021b      	lsls	r3, r3, #8
 800fc20:	697a      	ldr	r2, [r7, #20]
 800fc22:	4313      	orrs	r3, r2
 800fc24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	4a22      	ldr	r2, [pc, #136]	; (800fcb4 <TIM_OC3_SetConfig+0xe4>)
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	d003      	beq.n	800fc36 <TIM_OC3_SetConfig+0x66>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	4a21      	ldr	r2, [pc, #132]	; (800fcb8 <TIM_OC3_SetConfig+0xe8>)
 800fc32:	4293      	cmp	r3, r2
 800fc34:	d10d      	bne.n	800fc52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	68db      	ldr	r3, [r3, #12]
 800fc42:	021b      	lsls	r3, r3, #8
 800fc44:	697a      	ldr	r2, [r7, #20]
 800fc46:	4313      	orrs	r3, r2
 800fc48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	4a17      	ldr	r2, [pc, #92]	; (800fcb4 <TIM_OC3_SetConfig+0xe4>)
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d003      	beq.n	800fc62 <TIM_OC3_SetConfig+0x92>
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	4a16      	ldr	r2, [pc, #88]	; (800fcb8 <TIM_OC3_SetConfig+0xe8>)
 800fc5e:	4293      	cmp	r3, r2
 800fc60:	d113      	bne.n	800fc8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	695b      	ldr	r3, [r3, #20]
 800fc76:	011b      	lsls	r3, r3, #4
 800fc78:	693a      	ldr	r2, [r7, #16]
 800fc7a:	4313      	orrs	r3, r2
 800fc7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	699b      	ldr	r3, [r3, #24]
 800fc82:	011b      	lsls	r3, r3, #4
 800fc84:	693a      	ldr	r2, [r7, #16]
 800fc86:	4313      	orrs	r3, r2
 800fc88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	693a      	ldr	r2, [r7, #16]
 800fc8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	68fa      	ldr	r2, [r7, #12]
 800fc94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	685a      	ldr	r2, [r3, #4]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	697a      	ldr	r2, [r7, #20]
 800fca2:	621a      	str	r2, [r3, #32]
}
 800fca4:	bf00      	nop
 800fca6:	371c      	adds	r7, #28
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr
 800fcb0:	fffeff8f 	.word	0xfffeff8f
 800fcb4:	40010000 	.word	0x40010000
 800fcb8:	40010400 	.word	0x40010400

0800fcbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b087      	sub	sp, #28
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6a1b      	ldr	r3, [r3, #32]
 800fcca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6a1b      	ldr	r3, [r3, #32]
 800fcd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	69db      	ldr	r3, [r3, #28]
 800fce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fce4:	68fa      	ldr	r2, [r7, #12]
 800fce6:	4b1e      	ldr	r3, [pc, #120]	; (800fd60 <TIM_OC4_SetConfig+0xa4>)
 800fce8:	4013      	ands	r3, r2
 800fcea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fcf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	021b      	lsls	r3, r3, #8
 800fcfa:	68fa      	ldr	r2, [r7, #12]
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	689b      	ldr	r3, [r3, #8]
 800fd0c:	031b      	lsls	r3, r3, #12
 800fd0e:	693a      	ldr	r2, [r7, #16]
 800fd10:	4313      	orrs	r3, r2
 800fd12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	4a13      	ldr	r2, [pc, #76]	; (800fd64 <TIM_OC4_SetConfig+0xa8>)
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	d003      	beq.n	800fd24 <TIM_OC4_SetConfig+0x68>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	4a12      	ldr	r2, [pc, #72]	; (800fd68 <TIM_OC4_SetConfig+0xac>)
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d109      	bne.n	800fd38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fd2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	695b      	ldr	r3, [r3, #20]
 800fd30:	019b      	lsls	r3, r3, #6
 800fd32:	697a      	ldr	r2, [r7, #20]
 800fd34:	4313      	orrs	r3, r2
 800fd36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	697a      	ldr	r2, [r7, #20]
 800fd3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	68fa      	ldr	r2, [r7, #12]
 800fd42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	685a      	ldr	r2, [r3, #4]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	693a      	ldr	r2, [r7, #16]
 800fd50:	621a      	str	r2, [r3, #32]
}
 800fd52:	bf00      	nop
 800fd54:	371c      	adds	r7, #28
 800fd56:	46bd      	mov	sp, r7
 800fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5c:	4770      	bx	lr
 800fd5e:	bf00      	nop
 800fd60:	feff8fff 	.word	0xfeff8fff
 800fd64:	40010000 	.word	0x40010000
 800fd68:	40010400 	.word	0x40010400

0800fd6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b087      	sub	sp, #28
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6a1b      	ldr	r3, [r3, #32]
 800fd7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6a1b      	ldr	r3, [r3, #32]
 800fd86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	685b      	ldr	r3, [r3, #4]
 800fd8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fd94:	68fa      	ldr	r2, [r7, #12]
 800fd96:	4b1b      	ldr	r3, [pc, #108]	; (800fe04 <TIM_OC5_SetConfig+0x98>)
 800fd98:	4013      	ands	r3, r2
 800fd9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	68fa      	ldr	r2, [r7, #12]
 800fda2:	4313      	orrs	r3, r2
 800fda4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fdac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	689b      	ldr	r3, [r3, #8]
 800fdb2:	041b      	lsls	r3, r3, #16
 800fdb4:	693a      	ldr	r2, [r7, #16]
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	4a12      	ldr	r2, [pc, #72]	; (800fe08 <TIM_OC5_SetConfig+0x9c>)
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	d003      	beq.n	800fdca <TIM_OC5_SetConfig+0x5e>
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	4a11      	ldr	r2, [pc, #68]	; (800fe0c <TIM_OC5_SetConfig+0xa0>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d109      	bne.n	800fdde <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fdd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	695b      	ldr	r3, [r3, #20]
 800fdd6:	021b      	lsls	r3, r3, #8
 800fdd8:	697a      	ldr	r2, [r7, #20]
 800fdda:	4313      	orrs	r3, r2
 800fddc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	697a      	ldr	r2, [r7, #20]
 800fde2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	68fa      	ldr	r2, [r7, #12]
 800fde8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	685a      	ldr	r2, [r3, #4]
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	693a      	ldr	r2, [r7, #16]
 800fdf6:	621a      	str	r2, [r3, #32]
}
 800fdf8:	bf00      	nop
 800fdfa:	371c      	adds	r7, #28
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr
 800fe04:	fffeff8f 	.word	0xfffeff8f
 800fe08:	40010000 	.word	0x40010000
 800fe0c:	40010400 	.word	0x40010400

0800fe10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b087      	sub	sp, #28
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	6a1b      	ldr	r3, [r3, #32]
 800fe1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6a1b      	ldr	r3, [r3, #32]
 800fe2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fe38:	68fa      	ldr	r2, [r7, #12]
 800fe3a:	4b1c      	ldr	r3, [pc, #112]	; (800feac <TIM_OC6_SetConfig+0x9c>)
 800fe3c:	4013      	ands	r3, r2
 800fe3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	021b      	lsls	r3, r3, #8
 800fe46:	68fa      	ldr	r2, [r7, #12]
 800fe48:	4313      	orrs	r3, r2
 800fe4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fe52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	689b      	ldr	r3, [r3, #8]
 800fe58:	051b      	lsls	r3, r3, #20
 800fe5a:	693a      	ldr	r2, [r7, #16]
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	4a13      	ldr	r2, [pc, #76]	; (800feb0 <TIM_OC6_SetConfig+0xa0>)
 800fe64:	4293      	cmp	r3, r2
 800fe66:	d003      	beq.n	800fe70 <TIM_OC6_SetConfig+0x60>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4a12      	ldr	r2, [pc, #72]	; (800feb4 <TIM_OC6_SetConfig+0xa4>)
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	d109      	bne.n	800fe84 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fe70:	697b      	ldr	r3, [r7, #20]
 800fe72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fe76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	695b      	ldr	r3, [r3, #20]
 800fe7c:	029b      	lsls	r3, r3, #10
 800fe7e:	697a      	ldr	r2, [r7, #20]
 800fe80:	4313      	orrs	r3, r2
 800fe82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	697a      	ldr	r2, [r7, #20]
 800fe88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	68fa      	ldr	r2, [r7, #12]
 800fe8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	685a      	ldr	r2, [r3, #4]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	693a      	ldr	r2, [r7, #16]
 800fe9c:	621a      	str	r2, [r3, #32]
}
 800fe9e:	bf00      	nop
 800fea0:	371c      	adds	r7, #28
 800fea2:	46bd      	mov	sp, r7
 800fea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea8:	4770      	bx	lr
 800feaa:	bf00      	nop
 800feac:	feff8fff 	.word	0xfeff8fff
 800feb0:	40010000 	.word	0x40010000
 800feb4:	40010400 	.word	0x40010400

0800feb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800feb8:	b480      	push	{r7}
 800feba:	b087      	sub	sp, #28
 800febc:	af00      	add	r7, sp, #0
 800febe:	60f8      	str	r0, [r7, #12]
 800fec0:	60b9      	str	r1, [r7, #8]
 800fec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	6a1b      	ldr	r3, [r3, #32]
 800fec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	6a1b      	ldr	r3, [r3, #32]
 800fece:	f023 0201 	bic.w	r2, r3, #1
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	699b      	ldr	r3, [r3, #24]
 800feda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fedc:	693b      	ldr	r3, [r7, #16]
 800fede:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	011b      	lsls	r3, r3, #4
 800fee8:	693a      	ldr	r2, [r7, #16]
 800feea:	4313      	orrs	r3, r2
 800feec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	f023 030a 	bic.w	r3, r3, #10
 800fef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fef6:	697a      	ldr	r2, [r7, #20]
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	4313      	orrs	r3, r2
 800fefc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	693a      	ldr	r2, [r7, #16]
 800ff02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	697a      	ldr	r2, [r7, #20]
 800ff08:	621a      	str	r2, [r3, #32]
}
 800ff0a:	bf00      	nop
 800ff0c:	371c      	adds	r7, #28
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr

0800ff16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ff16:	b480      	push	{r7}
 800ff18:	b087      	sub	sp, #28
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	60f8      	str	r0, [r7, #12]
 800ff1e:	60b9      	str	r1, [r7, #8]
 800ff20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	6a1b      	ldr	r3, [r3, #32]
 800ff26:	f023 0210 	bic.w	r2, r3, #16
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	699b      	ldr	r3, [r3, #24]
 800ff32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6a1b      	ldr	r3, [r3, #32]
 800ff38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ff40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	031b      	lsls	r3, r3, #12
 800ff46:	697a      	ldr	r2, [r7, #20]
 800ff48:	4313      	orrs	r3, r2
 800ff4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ff52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	011b      	lsls	r3, r3, #4
 800ff58:	693a      	ldr	r2, [r7, #16]
 800ff5a:	4313      	orrs	r3, r2
 800ff5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	697a      	ldr	r2, [r7, #20]
 800ff62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	693a      	ldr	r2, [r7, #16]
 800ff68:	621a      	str	r2, [r3, #32]
}
 800ff6a:	bf00      	nop
 800ff6c:	371c      	adds	r7, #28
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr

0800ff76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ff76:	b480      	push	{r7}
 800ff78:	b085      	sub	sp, #20
 800ff7a:	af00      	add	r7, sp, #0
 800ff7c:	6078      	str	r0, [r7, #4]
 800ff7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	689b      	ldr	r3, [r3, #8]
 800ff84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ff8e:	683a      	ldr	r2, [r7, #0]
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	4313      	orrs	r3, r2
 800ff94:	f043 0307 	orr.w	r3, r3, #7
 800ff98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	68fa      	ldr	r2, [r7, #12]
 800ff9e:	609a      	str	r2, [r3, #8]
}
 800ffa0:	bf00      	nop
 800ffa2:	3714      	adds	r7, #20
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr

0800ffac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ffac:	b480      	push	{r7}
 800ffae:	b087      	sub	sp, #28
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	60f8      	str	r0, [r7, #12]
 800ffb4:	60b9      	str	r1, [r7, #8]
 800ffb6:	607a      	str	r2, [r7, #4]
 800ffb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	689b      	ldr	r3, [r3, #8]
 800ffbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ffc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	021a      	lsls	r2, r3, #8
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	431a      	orrs	r2, r3
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	4313      	orrs	r3, r2
 800ffd4:	697a      	ldr	r2, [r7, #20]
 800ffd6:	4313      	orrs	r3, r2
 800ffd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	697a      	ldr	r2, [r7, #20]
 800ffde:	609a      	str	r2, [r3, #8]
}
 800ffe0:	bf00      	nop
 800ffe2:	371c      	adds	r7, #28
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr

0800ffec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b087      	sub	sp, #28
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	60f8      	str	r0, [r7, #12]
 800fff4:	60b9      	str	r1, [r7, #8]
 800fff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	f003 031f 	and.w	r3, r3, #31
 800fffe:	2201      	movs	r2, #1
 8010000:	fa02 f303 	lsl.w	r3, r2, r3
 8010004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	6a1a      	ldr	r2, [r3, #32]
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	43db      	mvns	r3, r3
 801000e:	401a      	ands	r2, r3
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	6a1a      	ldr	r2, [r3, #32]
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	f003 031f 	and.w	r3, r3, #31
 801001e:	6879      	ldr	r1, [r7, #4]
 8010020:	fa01 f303 	lsl.w	r3, r1, r3
 8010024:	431a      	orrs	r2, r3
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	621a      	str	r2, [r3, #32]
}
 801002a:	bf00      	nop
 801002c:	371c      	adds	r7, #28
 801002e:	46bd      	mov	sp, r7
 8010030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010034:	4770      	bx	lr
	...

08010038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010038:	b480      	push	{r7}
 801003a:	b085      	sub	sp, #20
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010048:	2b01      	cmp	r3, #1
 801004a:	d101      	bne.n	8010050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801004c:	2302      	movs	r3, #2
 801004e:	e06d      	b.n	801012c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2201      	movs	r2, #1
 8010054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2202      	movs	r2, #2
 801005c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	685b      	ldr	r3, [r3, #4]
 8010066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	689b      	ldr	r3, [r3, #8]
 801006e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	4a30      	ldr	r2, [pc, #192]	; (8010138 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010076:	4293      	cmp	r3, r2
 8010078:	d004      	beq.n	8010084 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	4a2f      	ldr	r2, [pc, #188]	; (801013c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010080:	4293      	cmp	r3, r2
 8010082:	d108      	bne.n	8010096 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801008a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	68fa      	ldr	r2, [r7, #12]
 8010092:	4313      	orrs	r3, r2
 8010094:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801009c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	68fa      	ldr	r2, [r7, #12]
 80100a4:	4313      	orrs	r3, r2
 80100a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	68fa      	ldr	r2, [r7, #12]
 80100ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	4a20      	ldr	r2, [pc, #128]	; (8010138 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d022      	beq.n	8010100 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100c2:	d01d      	beq.n	8010100 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4a1d      	ldr	r2, [pc, #116]	; (8010140 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d018      	beq.n	8010100 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	4a1c      	ldr	r2, [pc, #112]	; (8010144 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80100d4:	4293      	cmp	r3, r2
 80100d6:	d013      	beq.n	8010100 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4a1a      	ldr	r2, [pc, #104]	; (8010148 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d00e      	beq.n	8010100 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	4a15      	ldr	r2, [pc, #84]	; (801013c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d009      	beq.n	8010100 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	4a16      	ldr	r2, [pc, #88]	; (801014c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d004      	beq.n	8010100 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	4a15      	ldr	r2, [pc, #84]	; (8010150 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d10c      	bne.n	801011a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010106:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	689b      	ldr	r3, [r3, #8]
 801010c:	68ba      	ldr	r2, [r7, #8]
 801010e:	4313      	orrs	r3, r2
 8010110:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	68ba      	ldr	r2, [r7, #8]
 8010118:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2201      	movs	r2, #1
 801011e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2200      	movs	r2, #0
 8010126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801012a:	2300      	movs	r3, #0
}
 801012c:	4618      	mov	r0, r3
 801012e:	3714      	adds	r7, #20
 8010130:	46bd      	mov	sp, r7
 8010132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010136:	4770      	bx	lr
 8010138:	40010000 	.word	0x40010000
 801013c:	40010400 	.word	0x40010400
 8010140:	40000400 	.word	0x40000400
 8010144:	40000800 	.word	0x40000800
 8010148:	40000c00 	.word	0x40000c00
 801014c:	40014000 	.word	0x40014000
 8010150:	40001800 	.word	0x40001800

08010154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010154:	b480      	push	{r7}
 8010156:	b083      	sub	sp, #12
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801015c:	bf00      	nop
 801015e:	370c      	adds	r7, #12
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr

08010168 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010168:	b480      	push	{r7}
 801016a:	b083      	sub	sp, #12
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010170:	bf00      	nop
 8010172:	370c      	adds	r7, #12
 8010174:	46bd      	mov	sp, r7
 8010176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017a:	4770      	bx	lr

0801017c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801017c:	b480      	push	{r7}
 801017e:	b083      	sub	sp, #12
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010184:	bf00      	nop
 8010186:	370c      	adds	r7, #12
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr

08010190 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010190:	b480      	push	{r7}
 8010192:	b085      	sub	sp, #20
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 801019a:	2300      	movs	r3, #0
 801019c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 801019e:	2300      	movs	r3, #0
 80101a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	2b01      	cmp	r3, #1
 80101a8:	d027      	beq.n	80101fa <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80101b0:	68fa      	ldr	r2, [r7, #12]
 80101b2:	4b2f      	ldr	r3, [pc, #188]	; (8010270 <FMC_SDRAM_Init+0xe0>)
 80101b4:	4013      	ands	r3, r2
 80101b6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80101c0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80101c6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80101cc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80101d2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80101d8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80101de:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80101e4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80101ea:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80101ec:	68fa      	ldr	r2, [r7, #12]
 80101ee:	4313      	orrs	r3, r2
 80101f0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	68fa      	ldr	r2, [r7, #12]
 80101f6:	601a      	str	r2, [r3, #0]
 80101f8:	e032      	b.n	8010260 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010206:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010210:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8010216:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	4313      	orrs	r3, r2
 801021c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8010224:	68ba      	ldr	r2, [r7, #8]
 8010226:	4b12      	ldr	r3, [pc, #72]	; (8010270 <FMC_SDRAM_Init+0xe0>)
 8010228:	4013      	ands	r3, r2
 801022a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010234:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 801023a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8010240:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8010246:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 801024c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801024e:	68ba      	ldr	r2, [r7, #8]
 8010250:	4313      	orrs	r3, r2
 8010252:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	68fa      	ldr	r2, [r7, #12]
 8010258:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	68ba      	ldr	r2, [r7, #8]
 801025e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8010260:	2300      	movs	r3, #0
}
 8010262:	4618      	mov	r0, r3
 8010264:	3714      	adds	r7, #20
 8010266:	46bd      	mov	sp, r7
 8010268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026c:	4770      	bx	lr
 801026e:	bf00      	nop
 8010270:	ffff8000 	.word	0xffff8000

08010274 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010274:	b480      	push	{r7}
 8010276:	b087      	sub	sp, #28
 8010278:	af00      	add	r7, sp, #0
 801027a:	60f8      	str	r0, [r7, #12]
 801027c:	60b9      	str	r1, [r7, #8]
 801027e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8010280:	2300      	movs	r3, #0
 8010282:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8010284:	2300      	movs	r3, #0
 8010286:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2b01      	cmp	r3, #1
 801028c:	d02e      	beq.n	80102ec <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	689b      	ldr	r3, [r3, #8]
 8010292:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801029a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	3b01      	subs	r3, #1
 80102a8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80102aa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	689b      	ldr	r3, [r3, #8]
 80102b0:	3b01      	subs	r3, #1
 80102b2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80102b4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	68db      	ldr	r3, [r3, #12]
 80102ba:	3b01      	subs	r3, #1
 80102bc:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80102be:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	691b      	ldr	r3, [r3, #16]
 80102c4:	3b01      	subs	r3, #1
 80102c6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80102c8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	695b      	ldr	r3, [r3, #20]
 80102ce:	3b01      	subs	r3, #1
 80102d0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80102d2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	699b      	ldr	r3, [r3, #24]
 80102d8:	3b01      	subs	r3, #1
 80102da:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80102dc:	4313      	orrs	r3, r2
 80102de:	697a      	ldr	r2, [r7, #20]
 80102e0:	4313      	orrs	r3, r2
 80102e2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	697a      	ldr	r2, [r7, #20]
 80102e8:	609a      	str	r2, [r3, #8]
 80102ea:	e039      	b.n	8010360 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	689b      	ldr	r3, [r3, #8]
 80102f0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80102f2:	697a      	ldr	r2, [r7, #20]
 80102f4:	4b1e      	ldr	r3, [pc, #120]	; (8010370 <FMC_SDRAM_Timing_Init+0xfc>)
 80102f6:	4013      	ands	r3, r2
 80102f8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	68db      	ldr	r3, [r3, #12]
 80102fe:	3b01      	subs	r3, #1
 8010300:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	695b      	ldr	r3, [r3, #20]
 8010306:	3b01      	subs	r3, #1
 8010308:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 801030a:	4313      	orrs	r3, r2
 801030c:	697a      	ldr	r2, [r7, #20]
 801030e:	4313      	orrs	r3, r2
 8010310:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	68db      	ldr	r3, [r3, #12]
 8010316:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801031e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	685b      	ldr	r3, [r3, #4]
 801032a:	3b01      	subs	r3, #1
 801032c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801032e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	689b      	ldr	r3, [r3, #8]
 8010334:	3b01      	subs	r3, #1
 8010336:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8010338:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	691b      	ldr	r3, [r3, #16]
 801033e:	3b01      	subs	r3, #1
 8010340:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8010342:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	699b      	ldr	r3, [r3, #24]
 8010348:	3b01      	subs	r3, #1
 801034a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801034c:	4313      	orrs	r3, r2
 801034e:	693a      	ldr	r2, [r7, #16]
 8010350:	4313      	orrs	r3, r2
 8010352:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	697a      	ldr	r2, [r7, #20]
 8010358:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	693a      	ldr	r2, [r7, #16]
 801035e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8010360:	2300      	movs	r3, #0
}
 8010362:	4618      	mov	r0, r3
 8010364:	371c      	adds	r7, #28
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr
 801036e:	bf00      	nop
 8010370:	ff0f0fff 	.word	0xff0f0fff

08010374 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8010374:	b480      	push	{r7}
 8010376:	b085      	sub	sp, #20
 8010378:	af00      	add	r7, sp, #0
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	60b9      	str	r1, [r7, #8]
 801037e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	691a      	ldr	r2, [r3, #16]
 8010384:	4b0c      	ldr	r3, [pc, #48]	; (80103b8 <FMC_SDRAM_SendCommand+0x44>)
 8010386:	4013      	ands	r3, r2
 8010388:	68ba      	ldr	r2, [r7, #8]
 801038a:	6811      	ldr	r1, [r2, #0]
 801038c:	68ba      	ldr	r2, [r7, #8]
 801038e:	6852      	ldr	r2, [r2, #4]
 8010390:	4311      	orrs	r1, r2
 8010392:	68ba      	ldr	r2, [r7, #8]
 8010394:	6892      	ldr	r2, [r2, #8]
 8010396:	3a01      	subs	r2, #1
 8010398:	0152      	lsls	r2, r2, #5
 801039a:	4311      	orrs	r1, r2
 801039c:	68ba      	ldr	r2, [r7, #8]
 801039e:	68d2      	ldr	r2, [r2, #12]
 80103a0:	0252      	lsls	r2, r2, #9
 80103a2:	430a      	orrs	r2, r1
 80103a4:	431a      	orrs	r2, r3
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 80103aa:	2300      	movs	r3, #0
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3714      	adds	r7, #20
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr
 80103b8:	ffc00000 	.word	0xffc00000

080103bc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80103bc:	b480      	push	{r7}
 80103be:	b083      	sub	sp, #12
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	695a      	ldr	r2, [r3, #20]
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	005b      	lsls	r3, r3, #1
 80103ce:	431a      	orrs	r2, r3
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80103d4:	2300      	movs	r3, #0
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	370c      	adds	r7, #12
 80103da:	46bd      	mov	sp, r7
 80103dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e0:	4770      	bx	lr

080103e2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80103e2:	b480      	push	{r7}
 80103e4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80103e6:	bf00      	nop
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr

080103f0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80103f0:	b480      	push	{r7}
 80103f2:	b085      	sub	sp, #20
 80103f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103f6:	f3ef 8305 	mrs	r3, IPSR
 80103fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80103fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d10f      	bne.n	8010422 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010402:	f3ef 8310 	mrs	r3, PRIMASK
 8010406:	607b      	str	r3, [r7, #4]
  return(result);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d105      	bne.n	801041a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801040e:	f3ef 8311 	mrs	r3, BASEPRI
 8010412:	603b      	str	r3, [r7, #0]
  return(result);
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d007      	beq.n	801042a <osKernelInitialize+0x3a>
 801041a:	4b0e      	ldr	r3, [pc, #56]	; (8010454 <osKernelInitialize+0x64>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	2b02      	cmp	r3, #2
 8010420:	d103      	bne.n	801042a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8010422:	f06f 0305 	mvn.w	r3, #5
 8010426:	60fb      	str	r3, [r7, #12]
 8010428:	e00c      	b.n	8010444 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 801042a:	4b0a      	ldr	r3, [pc, #40]	; (8010454 <osKernelInitialize+0x64>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d105      	bne.n	801043e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010432:	4b08      	ldr	r3, [pc, #32]	; (8010454 <osKernelInitialize+0x64>)
 8010434:	2201      	movs	r2, #1
 8010436:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010438:	2300      	movs	r3, #0
 801043a:	60fb      	str	r3, [r7, #12]
 801043c:	e002      	b.n	8010444 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801043e:	f04f 33ff 	mov.w	r3, #4294967295
 8010442:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010444:	68fb      	ldr	r3, [r7, #12]
}
 8010446:	4618      	mov	r0, r3
 8010448:	3714      	adds	r7, #20
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr
 8010452:	bf00      	nop
 8010454:	200239cc 	.word	0x200239cc

08010458 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010458:	b580      	push	{r7, lr}
 801045a:	b084      	sub	sp, #16
 801045c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801045e:	f3ef 8305 	mrs	r3, IPSR
 8010462:	60bb      	str	r3, [r7, #8]
  return(result);
 8010464:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010466:	2b00      	cmp	r3, #0
 8010468:	d10f      	bne.n	801048a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801046a:	f3ef 8310 	mrs	r3, PRIMASK
 801046e:	607b      	str	r3, [r7, #4]
  return(result);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d105      	bne.n	8010482 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010476:	f3ef 8311 	mrs	r3, BASEPRI
 801047a:	603b      	str	r3, [r7, #0]
  return(result);
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d007      	beq.n	8010492 <osKernelStart+0x3a>
 8010482:	4b0f      	ldr	r3, [pc, #60]	; (80104c0 <osKernelStart+0x68>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	2b02      	cmp	r3, #2
 8010488:	d103      	bne.n	8010492 <osKernelStart+0x3a>
    stat = osErrorISR;
 801048a:	f06f 0305 	mvn.w	r3, #5
 801048e:	60fb      	str	r3, [r7, #12]
 8010490:	e010      	b.n	80104b4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010492:	4b0b      	ldr	r3, [pc, #44]	; (80104c0 <osKernelStart+0x68>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	2b01      	cmp	r3, #1
 8010498:	d109      	bne.n	80104ae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801049a:	f7ff ffa2 	bl	80103e2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801049e:	4b08      	ldr	r3, [pc, #32]	; (80104c0 <osKernelStart+0x68>)
 80104a0:	2202      	movs	r2, #2
 80104a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80104a4:	f002 fb14 	bl	8012ad0 <vTaskStartScheduler>
      stat = osOK;
 80104a8:	2300      	movs	r3, #0
 80104aa:	60fb      	str	r3, [r7, #12]
 80104ac:	e002      	b.n	80104b4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80104ae:	f04f 33ff 	mov.w	r3, #4294967295
 80104b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80104b4:	68fb      	ldr	r3, [r7, #12]
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	3710      	adds	r7, #16
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
 80104be:	bf00      	nop
 80104c0:	200239cc 	.word	0x200239cc

080104c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b090      	sub	sp, #64	; 0x40
 80104c8:	af04      	add	r7, sp, #16
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80104d0:	2300      	movs	r3, #0
 80104d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104d4:	f3ef 8305 	mrs	r3, IPSR
 80104d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80104da:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80104dc:	2b00      	cmp	r3, #0
 80104de:	f040 808f 	bne.w	8010600 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104e2:	f3ef 8310 	mrs	r3, PRIMASK
 80104e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80104e8:	69bb      	ldr	r3, [r7, #24]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d105      	bne.n	80104fa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80104ee:	f3ef 8311 	mrs	r3, BASEPRI
 80104f2:	617b      	str	r3, [r7, #20]
  return(result);
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d003      	beq.n	8010502 <osThreadNew+0x3e>
 80104fa:	4b44      	ldr	r3, [pc, #272]	; (801060c <osThreadNew+0x148>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	2b02      	cmp	r3, #2
 8010500:	d07e      	beq.n	8010600 <osThreadNew+0x13c>
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d07b      	beq.n	8010600 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010508:	2380      	movs	r3, #128	; 0x80
 801050a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 801050c:	2318      	movs	r3, #24
 801050e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8010510:	2300      	movs	r3, #0
 8010512:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8010514:	f04f 33ff 	mov.w	r3, #4294967295
 8010518:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d045      	beq.n	80105ac <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d002      	beq.n	801052e <osThreadNew+0x6a>
        name = attr->name;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	699b      	ldr	r3, [r3, #24]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d002      	beq.n	801053c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	699b      	ldr	r3, [r3, #24]
 801053a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801053c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801053e:	2b00      	cmp	r3, #0
 8010540:	d008      	beq.n	8010554 <osThreadNew+0x90>
 8010542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010544:	2b38      	cmp	r3, #56	; 0x38
 8010546:	d805      	bhi.n	8010554 <osThreadNew+0x90>
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	685b      	ldr	r3, [r3, #4]
 801054c:	f003 0301 	and.w	r3, r3, #1
 8010550:	2b00      	cmp	r3, #0
 8010552:	d001      	beq.n	8010558 <osThreadNew+0x94>
        return (NULL);
 8010554:	2300      	movs	r3, #0
 8010556:	e054      	b.n	8010602 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	695b      	ldr	r3, [r3, #20]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d003      	beq.n	8010568 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	695b      	ldr	r3, [r3, #20]
 8010564:	089b      	lsrs	r3, r3, #2
 8010566:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	689b      	ldr	r3, [r3, #8]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d00e      	beq.n	801058e <osThreadNew+0xca>
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	68db      	ldr	r3, [r3, #12]
 8010574:	2b5b      	cmp	r3, #91	; 0x5b
 8010576:	d90a      	bls.n	801058e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801057c:	2b00      	cmp	r3, #0
 801057e:	d006      	beq.n	801058e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	695b      	ldr	r3, [r3, #20]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d002      	beq.n	801058e <osThreadNew+0xca>
        mem = 1;
 8010588:	2301      	movs	r3, #1
 801058a:	623b      	str	r3, [r7, #32]
 801058c:	e010      	b.n	80105b0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	689b      	ldr	r3, [r3, #8]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d10c      	bne.n	80105b0 <osThreadNew+0xec>
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	68db      	ldr	r3, [r3, #12]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d108      	bne.n	80105b0 <osThreadNew+0xec>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	691b      	ldr	r3, [r3, #16]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d104      	bne.n	80105b0 <osThreadNew+0xec>
          mem = 0;
 80105a6:	2300      	movs	r3, #0
 80105a8:	623b      	str	r3, [r7, #32]
 80105aa:	e001      	b.n	80105b0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80105ac:	2300      	movs	r3, #0
 80105ae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80105b0:	6a3b      	ldr	r3, [r7, #32]
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	d110      	bne.n	80105d8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80105ba:	687a      	ldr	r2, [r7, #4]
 80105bc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80105be:	9202      	str	r2, [sp, #8]
 80105c0:	9301      	str	r3, [sp, #4]
 80105c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c4:	9300      	str	r3, [sp, #0]
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105cc:	68f8      	ldr	r0, [r7, #12]
 80105ce:	f002 f89f 	bl	8012710 <xTaskCreateStatic>
 80105d2:	4603      	mov	r3, r0
 80105d4:	613b      	str	r3, [r7, #16]
 80105d6:	e013      	b.n	8010600 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80105d8:	6a3b      	ldr	r3, [r7, #32]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d110      	bne.n	8010600 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80105de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e0:	b29a      	uxth	r2, r3
 80105e2:	f107 0310 	add.w	r3, r7, #16
 80105e6:	9301      	str	r3, [sp, #4]
 80105e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ea:	9300      	str	r3, [sp, #0]
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	f002 f8f0 	bl	80127d6 <xTaskCreate>
 80105f6:	4603      	mov	r3, r0
 80105f8:	2b01      	cmp	r3, #1
 80105fa:	d001      	beq.n	8010600 <osThreadNew+0x13c>
          hTask = NULL;
 80105fc:	2300      	movs	r3, #0
 80105fe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010600:	693b      	ldr	r3, [r7, #16]
}
 8010602:	4618      	mov	r0, r3
 8010604:	3730      	adds	r7, #48	; 0x30
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop
 801060c:	200239cc 	.word	0x200239cc

08010610 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8010610:	b480      	push	{r7}
 8010612:	b085      	sub	sp, #20
 8010614:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010616:	f3ef 8305 	mrs	r3, IPSR
 801061a:	60bb      	str	r3, [r7, #8]
  return(result);
 801061c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801061e:	2b00      	cmp	r3, #0
 8010620:	d10f      	bne.n	8010642 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010622:	f3ef 8310 	mrs	r3, PRIMASK
 8010626:	607b      	str	r3, [r7, #4]
  return(result);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d105      	bne.n	801063a <osThreadYield+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801062e:	f3ef 8311 	mrs	r3, BASEPRI
 8010632:	603b      	str	r3, [r7, #0]
  return(result);
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d007      	beq.n	801064a <osThreadYield+0x3a>
 801063a:	4b0c      	ldr	r3, [pc, #48]	; (801066c <osThreadYield+0x5c>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	2b02      	cmp	r3, #2
 8010640:	d103      	bne.n	801064a <osThreadYield+0x3a>
    stat = osErrorISR;
 8010642:	f06f 0305 	mvn.w	r3, #5
 8010646:	60fb      	str	r3, [r7, #12]
 8010648:	e009      	b.n	801065e <osThreadYield+0x4e>
  } else {
    stat = osOK;
 801064a:	2300      	movs	r3, #0
 801064c:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 801064e:	4b08      	ldr	r3, [pc, #32]	; (8010670 <osThreadYield+0x60>)
 8010650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010654:	601a      	str	r2, [r3, #0]
 8010656:	f3bf 8f4f 	dsb	sy
 801065a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801065e:	68fb      	ldr	r3, [r7, #12]
}
 8010660:	4618      	mov	r0, r3
 8010662:	3714      	adds	r7, #20
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr
 801066c:	200239cc 	.word	0x200239cc
 8010670:	e000ed04 	.word	0xe000ed04

08010674 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8010674:	b580      	push	{r7, lr}
 8010676:	b086      	sub	sp, #24
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801067c:	f3ef 8305 	mrs	r3, IPSR
 8010680:	613b      	str	r3, [r7, #16]
  return(result);
 8010682:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010684:	2b00      	cmp	r3, #0
 8010686:	d10f      	bne.n	80106a8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010688:	f3ef 8310 	mrs	r3, PRIMASK
 801068c:	60fb      	str	r3, [r7, #12]
  return(result);
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d105      	bne.n	80106a0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010694:	f3ef 8311 	mrs	r3, BASEPRI
 8010698:	60bb      	str	r3, [r7, #8]
  return(result);
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d007      	beq.n	80106b0 <osDelay+0x3c>
 80106a0:	4b0a      	ldr	r3, [pc, #40]	; (80106cc <osDelay+0x58>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	2b02      	cmp	r3, #2
 80106a6:	d103      	bne.n	80106b0 <osDelay+0x3c>
    stat = osErrorISR;
 80106a8:	f06f 0305 	mvn.w	r3, #5
 80106ac:	617b      	str	r3, [r7, #20]
 80106ae:	e007      	b.n	80106c0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80106b0:	2300      	movs	r3, #0
 80106b2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d002      	beq.n	80106c0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f002 f9d2 	bl	8012a64 <vTaskDelay>
    }
  }

  return (stat);
 80106c0:	697b      	ldr	r3, [r7, #20]
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3718      	adds	r7, #24
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	200239cc 	.word	0x200239cc

080106d0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b08c      	sub	sp, #48	; 0x30
 80106d4:	af02      	add	r7, sp, #8
 80106d6:	60f8      	str	r0, [r7, #12]
 80106d8:	60b9      	str	r1, [r7, #8]
 80106da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80106dc:	2300      	movs	r3, #0
 80106de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80106e0:	f3ef 8305 	mrs	r3, IPSR
 80106e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80106e6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	f040 8086 	bne.w	80107fa <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106ee:	f3ef 8310 	mrs	r3, PRIMASK
 80106f2:	617b      	str	r3, [r7, #20]
  return(result);
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d105      	bne.n	8010706 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80106fa:	f3ef 8311 	mrs	r3, BASEPRI
 80106fe:	613b      	str	r3, [r7, #16]
  return(result);
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d003      	beq.n	801070e <osSemaphoreNew+0x3e>
 8010706:	4b3f      	ldr	r3, [pc, #252]	; (8010804 <osSemaphoreNew+0x134>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	2b02      	cmp	r3, #2
 801070c:	d075      	beq.n	80107fa <osSemaphoreNew+0x12a>
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d072      	beq.n	80107fa <osSemaphoreNew+0x12a>
 8010714:	68ba      	ldr	r2, [r7, #8]
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	429a      	cmp	r2, r3
 801071a:	d86e      	bhi.n	80107fa <osSemaphoreNew+0x12a>
    mem = -1;
 801071c:	f04f 33ff 	mov.w	r3, #4294967295
 8010720:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d015      	beq.n	8010754 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	689b      	ldr	r3, [r3, #8]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d006      	beq.n	801073e <osSemaphoreNew+0x6e>
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	2b4f      	cmp	r3, #79	; 0x4f
 8010736:	d902      	bls.n	801073e <osSemaphoreNew+0x6e>
        mem = 1;
 8010738:	2301      	movs	r3, #1
 801073a:	623b      	str	r3, [r7, #32]
 801073c:	e00c      	b.n	8010758 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	689b      	ldr	r3, [r3, #8]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d108      	bne.n	8010758 <osSemaphoreNew+0x88>
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	68db      	ldr	r3, [r3, #12]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d104      	bne.n	8010758 <osSemaphoreNew+0x88>
          mem = 0;
 801074e:	2300      	movs	r3, #0
 8010750:	623b      	str	r3, [r7, #32]
 8010752:	e001      	b.n	8010758 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8010754:	2300      	movs	r3, #0
 8010756:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8010758:	6a3b      	ldr	r3, [r7, #32]
 801075a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801075e:	d04c      	beq.n	80107fa <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	2b01      	cmp	r3, #1
 8010764:	d128      	bne.n	80107b8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8010766:	6a3b      	ldr	r3, [r7, #32]
 8010768:	2b01      	cmp	r3, #1
 801076a:	d10a      	bne.n	8010782 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	689b      	ldr	r3, [r3, #8]
 8010770:	2203      	movs	r2, #3
 8010772:	9200      	str	r2, [sp, #0]
 8010774:	2200      	movs	r2, #0
 8010776:	2100      	movs	r1, #0
 8010778:	2001      	movs	r0, #1
 801077a:	f000 ffdd 	bl	8011738 <xQueueGenericCreateStatic>
 801077e:	6278      	str	r0, [r7, #36]	; 0x24
 8010780:	e005      	b.n	801078e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8010782:	2203      	movs	r2, #3
 8010784:	2100      	movs	r1, #0
 8010786:	2001      	movs	r0, #1
 8010788:	f001 f858 	bl	801183c <xQueueGenericCreate>
 801078c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010790:	2b00      	cmp	r3, #0
 8010792:	d022      	beq.n	80107da <osSemaphoreNew+0x10a>
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d01f      	beq.n	80107da <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801079a:	2300      	movs	r3, #0
 801079c:	2200      	movs	r2, #0
 801079e:	2100      	movs	r1, #0
 80107a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107a2:	f001 f923 	bl	80119ec <xQueueGenericSend>
 80107a6:	4603      	mov	r3, r0
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	d016      	beq.n	80107da <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80107ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107ae:	f001 fdd9 	bl	8012364 <vQueueDelete>
            hSemaphore = NULL;
 80107b2:	2300      	movs	r3, #0
 80107b4:	627b      	str	r3, [r7, #36]	; 0x24
 80107b6:	e010      	b.n	80107da <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80107b8:	6a3b      	ldr	r3, [r7, #32]
 80107ba:	2b01      	cmp	r3, #1
 80107bc:	d108      	bne.n	80107d0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	689b      	ldr	r3, [r3, #8]
 80107c2:	461a      	mov	r2, r3
 80107c4:	68b9      	ldr	r1, [r7, #8]
 80107c6:	68f8      	ldr	r0, [r7, #12]
 80107c8:	f001 f89d 	bl	8011906 <xQueueCreateCountingSemaphoreStatic>
 80107cc:	6278      	str	r0, [r7, #36]	; 0x24
 80107ce:	e004      	b.n	80107da <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80107d0:	68b9      	ldr	r1, [r7, #8]
 80107d2:	68f8      	ldr	r0, [r7, #12]
 80107d4:	f001 f8d2 	bl	801197c <xQueueCreateCountingSemaphore>
 80107d8:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80107da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d00c      	beq.n	80107fa <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d003      	beq.n	80107ee <osSemaphoreNew+0x11e>
          name = attr->name;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	61fb      	str	r3, [r7, #28]
 80107ec:	e001      	b.n	80107f2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80107ee:	2300      	movs	r3, #0
 80107f0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80107f2:	69f9      	ldr	r1, [r7, #28]
 80107f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107f6:	f001 ff03 	bl	8012600 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80107fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80107fc:	4618      	mov	r0, r3
 80107fe:	3728      	adds	r7, #40	; 0x28
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}
 8010804:	200239cc 	.word	0x200239cc

08010808 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010808:	b580      	push	{r7, lr}
 801080a:	b088      	sub	sp, #32
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010816:	2300      	movs	r3, #0
 8010818:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d103      	bne.n	8010828 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010820:	f06f 0303 	mvn.w	r3, #3
 8010824:	61fb      	str	r3, [r7, #28]
 8010826:	e04b      	b.n	80108c0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010828:	f3ef 8305 	mrs	r3, IPSR
 801082c:	617b      	str	r3, [r7, #20]
  return(result);
 801082e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010830:	2b00      	cmp	r3, #0
 8010832:	d10f      	bne.n	8010854 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010834:	f3ef 8310 	mrs	r3, PRIMASK
 8010838:	613b      	str	r3, [r7, #16]
  return(result);
 801083a:	693b      	ldr	r3, [r7, #16]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d105      	bne.n	801084c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010840:	f3ef 8311 	mrs	r3, BASEPRI
 8010844:	60fb      	str	r3, [r7, #12]
  return(result);
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d026      	beq.n	801089a <osSemaphoreAcquire+0x92>
 801084c:	4b1f      	ldr	r3, [pc, #124]	; (80108cc <osSemaphoreAcquire+0xc4>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2b02      	cmp	r3, #2
 8010852:	d122      	bne.n	801089a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d003      	beq.n	8010862 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 801085a:	f06f 0303 	mvn.w	r3, #3
 801085e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010860:	e02d      	b.n	80108be <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8010862:	2300      	movs	r3, #0
 8010864:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010866:	f107 0308 	add.w	r3, r7, #8
 801086a:	461a      	mov	r2, r3
 801086c:	2100      	movs	r1, #0
 801086e:	69b8      	ldr	r0, [r7, #24]
 8010870:	f001 fcf2 	bl	8012258 <xQueueReceiveFromISR>
 8010874:	4603      	mov	r3, r0
 8010876:	2b01      	cmp	r3, #1
 8010878:	d003      	beq.n	8010882 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 801087a:	f06f 0302 	mvn.w	r3, #2
 801087e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010880:	e01d      	b.n	80108be <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d01a      	beq.n	80108be <osSemaphoreAcquire+0xb6>
 8010888:	4b11      	ldr	r3, [pc, #68]	; (80108d0 <osSemaphoreAcquire+0xc8>)
 801088a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801088e:	601a      	str	r2, [r3, #0]
 8010890:	f3bf 8f4f 	dsb	sy
 8010894:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8010898:	e011      	b.n	80108be <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801089a:	6839      	ldr	r1, [r7, #0]
 801089c:	69b8      	ldr	r0, [r7, #24]
 801089e:	f001 fbc7 	bl	8012030 <xQueueSemaphoreTake>
 80108a2:	4603      	mov	r3, r0
 80108a4:	2b01      	cmp	r3, #1
 80108a6:	d00b      	beq.n	80108c0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d003      	beq.n	80108b6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80108ae:	f06f 0301 	mvn.w	r3, #1
 80108b2:	61fb      	str	r3, [r7, #28]
 80108b4:	e004      	b.n	80108c0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80108b6:	f06f 0302 	mvn.w	r3, #2
 80108ba:	61fb      	str	r3, [r7, #28]
 80108bc:	e000      	b.n	80108c0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80108be:	bf00      	nop
      }
    }
  }

  return (stat);
 80108c0:	69fb      	ldr	r3, [r7, #28]
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3720      	adds	r7, #32
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	200239cc 	.word	0x200239cc
 80108d0:	e000ed04 	.word	0xe000ed04

080108d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b088      	sub	sp, #32
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80108e0:	2300      	movs	r3, #0
 80108e2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80108e4:	69bb      	ldr	r3, [r7, #24]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d103      	bne.n	80108f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80108ea:	f06f 0303 	mvn.w	r3, #3
 80108ee:	61fb      	str	r3, [r7, #28]
 80108f0:	e03e      	b.n	8010970 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108f2:	f3ef 8305 	mrs	r3, IPSR
 80108f6:	617b      	str	r3, [r7, #20]
  return(result);
 80108f8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d10f      	bne.n	801091e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108fe:	f3ef 8310 	mrs	r3, PRIMASK
 8010902:	613b      	str	r3, [r7, #16]
  return(result);
 8010904:	693b      	ldr	r3, [r7, #16]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d105      	bne.n	8010916 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801090a:	f3ef 8311 	mrs	r3, BASEPRI
 801090e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d01e      	beq.n	8010954 <osSemaphoreRelease+0x80>
 8010916:	4b19      	ldr	r3, [pc, #100]	; (801097c <osSemaphoreRelease+0xa8>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	2b02      	cmp	r3, #2
 801091c:	d11a      	bne.n	8010954 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 801091e:	2300      	movs	r3, #0
 8010920:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010922:	f107 0308 	add.w	r3, r7, #8
 8010926:	4619      	mov	r1, r3
 8010928:	69b8      	ldr	r0, [r7, #24]
 801092a:	f001 fa05 	bl	8011d38 <xQueueGiveFromISR>
 801092e:	4603      	mov	r3, r0
 8010930:	2b01      	cmp	r3, #1
 8010932:	d003      	beq.n	801093c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8010934:	f06f 0302 	mvn.w	r3, #2
 8010938:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801093a:	e018      	b.n	801096e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d015      	beq.n	801096e <osSemaphoreRelease+0x9a>
 8010942:	4b0f      	ldr	r3, [pc, #60]	; (8010980 <osSemaphoreRelease+0xac>)
 8010944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010948:	601a      	str	r2, [r3, #0]
 801094a:	f3bf 8f4f 	dsb	sy
 801094e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010952:	e00c      	b.n	801096e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010954:	2300      	movs	r3, #0
 8010956:	2200      	movs	r2, #0
 8010958:	2100      	movs	r1, #0
 801095a:	69b8      	ldr	r0, [r7, #24]
 801095c:	f001 f846 	bl	80119ec <xQueueGenericSend>
 8010960:	4603      	mov	r3, r0
 8010962:	2b01      	cmp	r3, #1
 8010964:	d004      	beq.n	8010970 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8010966:	f06f 0302 	mvn.w	r3, #2
 801096a:	61fb      	str	r3, [r7, #28]
 801096c:	e000      	b.n	8010970 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801096e:	bf00      	nop
    }
  }

  return (stat);
 8010970:	69fb      	ldr	r3, [r7, #28]
}
 8010972:	4618      	mov	r0, r3
 8010974:	3720      	adds	r7, #32
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	200239cc 	.word	0x200239cc
 8010980:	e000ed04 	.word	0xe000ed04

08010984 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010984:	b580      	push	{r7, lr}
 8010986:	b08c      	sub	sp, #48	; 0x30
 8010988:	af02      	add	r7, sp, #8
 801098a:	60f8      	str	r0, [r7, #12]
 801098c:	60b9      	str	r1, [r7, #8]
 801098e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010990:	2300      	movs	r3, #0
 8010992:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010994:	f3ef 8305 	mrs	r3, IPSR
 8010998:	61bb      	str	r3, [r7, #24]
  return(result);
 801099a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801099c:	2b00      	cmp	r3, #0
 801099e:	d16f      	bne.n	8010a80 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109a0:	f3ef 8310 	mrs	r3, PRIMASK
 80109a4:	617b      	str	r3, [r7, #20]
  return(result);
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d105      	bne.n	80109b8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80109ac:	f3ef 8311 	mrs	r3, BASEPRI
 80109b0:	613b      	str	r3, [r7, #16]
  return(result);
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d003      	beq.n	80109c0 <osMessageQueueNew+0x3c>
 80109b8:	4b34      	ldr	r3, [pc, #208]	; (8010a8c <osMessageQueueNew+0x108>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	2b02      	cmp	r3, #2
 80109be:	d05f      	beq.n	8010a80 <osMessageQueueNew+0xfc>
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d05c      	beq.n	8010a80 <osMessageQueueNew+0xfc>
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d059      	beq.n	8010a80 <osMessageQueueNew+0xfc>
    mem = -1;
 80109cc:	f04f 33ff 	mov.w	r3, #4294967295
 80109d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d029      	beq.n	8010a2c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	689b      	ldr	r3, [r3, #8]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d012      	beq.n	8010a06 <osMessageQueueNew+0x82>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	68db      	ldr	r3, [r3, #12]
 80109e4:	2b4f      	cmp	r3, #79	; 0x4f
 80109e6:	d90e      	bls.n	8010a06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d00a      	beq.n	8010a06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	695a      	ldr	r2, [r3, #20]
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	68b9      	ldr	r1, [r7, #8]
 80109f8:	fb01 f303 	mul.w	r3, r1, r3
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d302      	bcc.n	8010a06 <osMessageQueueNew+0x82>
        mem = 1;
 8010a00:	2301      	movs	r3, #1
 8010a02:	623b      	str	r3, [r7, #32]
 8010a04:	e014      	b.n	8010a30 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	689b      	ldr	r3, [r3, #8]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d110      	bne.n	8010a30 <osMessageQueueNew+0xac>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	68db      	ldr	r3, [r3, #12]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d10c      	bne.n	8010a30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d108      	bne.n	8010a30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	695b      	ldr	r3, [r3, #20]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d104      	bne.n	8010a30 <osMessageQueueNew+0xac>
          mem = 0;
 8010a26:	2300      	movs	r3, #0
 8010a28:	623b      	str	r3, [r7, #32]
 8010a2a:	e001      	b.n	8010a30 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010a30:	6a3b      	ldr	r3, [r7, #32]
 8010a32:	2b01      	cmp	r3, #1
 8010a34:	d10b      	bne.n	8010a4e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	691a      	ldr	r2, [r3, #16]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	689b      	ldr	r3, [r3, #8]
 8010a3e:	2100      	movs	r1, #0
 8010a40:	9100      	str	r1, [sp, #0]
 8010a42:	68b9      	ldr	r1, [r7, #8]
 8010a44:	68f8      	ldr	r0, [r7, #12]
 8010a46:	f000 fe77 	bl	8011738 <xQueueGenericCreateStatic>
 8010a4a:	6278      	str	r0, [r7, #36]	; 0x24
 8010a4c:	e008      	b.n	8010a60 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8010a4e:	6a3b      	ldr	r3, [r7, #32]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d105      	bne.n	8010a60 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8010a54:	2200      	movs	r2, #0
 8010a56:	68b9      	ldr	r1, [r7, #8]
 8010a58:	68f8      	ldr	r0, [r7, #12]
 8010a5a:	f000 feef 	bl	801183c <xQueueGenericCreate>
 8010a5e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d00c      	beq.n	8010a80 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d003      	beq.n	8010a74 <osMessageQueueNew+0xf0>
        name = attr->name;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	61fb      	str	r3, [r7, #28]
 8010a72:	e001      	b.n	8010a78 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8010a74:	2300      	movs	r3, #0
 8010a76:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8010a78:	69f9      	ldr	r1, [r7, #28]
 8010a7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a7c:	f001 fdc0 	bl	8012600 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3728      	adds	r7, #40	; 0x28
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}
 8010a8a:	bf00      	nop
 8010a8c:	200239cc 	.word	0x200239cc

08010a90 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b08a      	sub	sp, #40	; 0x28
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	60f8      	str	r0, [r7, #12]
 8010a98:	60b9      	str	r1, [r7, #8]
 8010a9a:	603b      	str	r3, [r7, #0]
 8010a9c:	4613      	mov	r3, r2
 8010a9e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010aa8:	f3ef 8305 	mrs	r3, IPSR
 8010aac:	61fb      	str	r3, [r7, #28]
  return(result);
 8010aae:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d10f      	bne.n	8010ad4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8010ab8:	61bb      	str	r3, [r7, #24]
  return(result);
 8010aba:	69bb      	ldr	r3, [r7, #24]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d105      	bne.n	8010acc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010ac0:	f3ef 8311 	mrs	r3, BASEPRI
 8010ac4:	617b      	str	r3, [r7, #20]
  return(result);
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d02c      	beq.n	8010b26 <osMessageQueuePut+0x96>
 8010acc:	4b28      	ldr	r3, [pc, #160]	; (8010b70 <osMessageQueuePut+0xe0>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	2b02      	cmp	r3, #2
 8010ad2:	d128      	bne.n	8010b26 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010ad4:	6a3b      	ldr	r3, [r7, #32]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d005      	beq.n	8010ae6 <osMessageQueuePut+0x56>
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d002      	beq.n	8010ae6 <osMessageQueuePut+0x56>
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d003      	beq.n	8010aee <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8010ae6:	f06f 0303 	mvn.w	r3, #3
 8010aea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010aec:	e039      	b.n	8010b62 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8010aee:	2300      	movs	r3, #0
 8010af0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010af2:	f107 0210 	add.w	r2, r7, #16
 8010af6:	2300      	movs	r3, #0
 8010af8:	68b9      	ldr	r1, [r7, #8]
 8010afa:	6a38      	ldr	r0, [r7, #32]
 8010afc:	f001 f87c 	bl	8011bf8 <xQueueGenericSendFromISR>
 8010b00:	4603      	mov	r3, r0
 8010b02:	2b01      	cmp	r3, #1
 8010b04:	d003      	beq.n	8010b0e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8010b06:	f06f 0302 	mvn.w	r3, #2
 8010b0a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010b0c:	e029      	b.n	8010b62 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d026      	beq.n	8010b62 <osMessageQueuePut+0xd2>
 8010b14:	4b17      	ldr	r3, [pc, #92]	; (8010b74 <osMessageQueuePut+0xe4>)
 8010b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b1a:	601a      	str	r2, [r3, #0]
 8010b1c:	f3bf 8f4f 	dsb	sy
 8010b20:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010b24:	e01d      	b.n	8010b62 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010b26:	6a3b      	ldr	r3, [r7, #32]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d002      	beq.n	8010b32 <osMessageQueuePut+0xa2>
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d103      	bne.n	8010b3a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8010b32:	f06f 0303 	mvn.w	r3, #3
 8010b36:	627b      	str	r3, [r7, #36]	; 0x24
 8010b38:	e014      	b.n	8010b64 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	683a      	ldr	r2, [r7, #0]
 8010b3e:	68b9      	ldr	r1, [r7, #8]
 8010b40:	6a38      	ldr	r0, [r7, #32]
 8010b42:	f000 ff53 	bl	80119ec <xQueueGenericSend>
 8010b46:	4603      	mov	r3, r0
 8010b48:	2b01      	cmp	r3, #1
 8010b4a:	d00b      	beq.n	8010b64 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d003      	beq.n	8010b5a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8010b52:	f06f 0301 	mvn.w	r3, #1
 8010b56:	627b      	str	r3, [r7, #36]	; 0x24
 8010b58:	e004      	b.n	8010b64 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8010b5a:	f06f 0302 	mvn.w	r3, #2
 8010b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8010b60:	e000      	b.n	8010b64 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010b62:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3728      	adds	r7, #40	; 0x28
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	200239cc 	.word	0x200239cc
 8010b74:	e000ed04 	.word	0xe000ed04

08010b78 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b08a      	sub	sp, #40	; 0x28
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	60f8      	str	r0, [r7, #12]
 8010b80:	60b9      	str	r1, [r7, #8]
 8010b82:	607a      	str	r2, [r7, #4]
 8010b84:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b8e:	f3ef 8305 	mrs	r3, IPSR
 8010b92:	61fb      	str	r3, [r7, #28]
  return(result);
 8010b94:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d10f      	bne.n	8010bba <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8010b9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8010ba0:	69bb      	ldr	r3, [r7, #24]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d105      	bne.n	8010bb2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010ba6:	f3ef 8311 	mrs	r3, BASEPRI
 8010baa:	617b      	str	r3, [r7, #20]
  return(result);
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d02c      	beq.n	8010c0c <osMessageQueueGet+0x94>
 8010bb2:	4b28      	ldr	r3, [pc, #160]	; (8010c54 <osMessageQueueGet+0xdc>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	2b02      	cmp	r3, #2
 8010bb8:	d128      	bne.n	8010c0c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010bba:	6a3b      	ldr	r3, [r7, #32]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d005      	beq.n	8010bcc <osMessageQueueGet+0x54>
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d002      	beq.n	8010bcc <osMessageQueueGet+0x54>
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d003      	beq.n	8010bd4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8010bcc:	f06f 0303 	mvn.w	r3, #3
 8010bd0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010bd2:	e038      	b.n	8010c46 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010bd8:	f107 0310 	add.w	r3, r7, #16
 8010bdc:	461a      	mov	r2, r3
 8010bde:	68b9      	ldr	r1, [r7, #8]
 8010be0:	6a38      	ldr	r0, [r7, #32]
 8010be2:	f001 fb39 	bl	8012258 <xQueueReceiveFromISR>
 8010be6:	4603      	mov	r3, r0
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d003      	beq.n	8010bf4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8010bec:	f06f 0302 	mvn.w	r3, #2
 8010bf0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010bf2:	e028      	b.n	8010c46 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d025      	beq.n	8010c46 <osMessageQueueGet+0xce>
 8010bfa:	4b17      	ldr	r3, [pc, #92]	; (8010c58 <osMessageQueueGet+0xe0>)
 8010bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c00:	601a      	str	r2, [r3, #0]
 8010c02:	f3bf 8f4f 	dsb	sy
 8010c06:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010c0a:	e01c      	b.n	8010c46 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010c0c:	6a3b      	ldr	r3, [r7, #32]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d002      	beq.n	8010c18 <osMessageQueueGet+0xa0>
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d103      	bne.n	8010c20 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8010c18:	f06f 0303 	mvn.w	r3, #3
 8010c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8010c1e:	e013      	b.n	8010c48 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010c20:	683a      	ldr	r2, [r7, #0]
 8010c22:	68b9      	ldr	r1, [r7, #8]
 8010c24:	6a38      	ldr	r0, [r7, #32]
 8010c26:	f001 f91d 	bl	8011e64 <xQueueReceive>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b01      	cmp	r3, #1
 8010c2e:	d00b      	beq.n	8010c48 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d003      	beq.n	8010c3e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8010c36:	f06f 0301 	mvn.w	r3, #1
 8010c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8010c3c:	e004      	b.n	8010c48 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8010c3e:	f06f 0302 	mvn.w	r3, #2
 8010c42:	627b      	str	r3, [r7, #36]	; 0x24
 8010c44:	e000      	b.n	8010c48 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010c46:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3728      	adds	r7, #40	; 0x28
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}
 8010c52:	bf00      	nop
 8010c54:	200239cc 	.word	0x200239cc
 8010c58:	e000ed04 	.word	0xe000ed04

08010c5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010c5c:	b480      	push	{r7}
 8010c5e:	b085      	sub	sp, #20
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	60f8      	str	r0, [r7, #12]
 8010c64:	60b9      	str	r1, [r7, #8]
 8010c66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	4a07      	ldr	r2, [pc, #28]	; (8010c88 <vApplicationGetIdleTaskMemory+0x2c>)
 8010c6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	4a06      	ldr	r2, [pc, #24]	; (8010c8c <vApplicationGetIdleTaskMemory+0x30>)
 8010c72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2280      	movs	r2, #128	; 0x80
 8010c78:	601a      	str	r2, [r3, #0]
}
 8010c7a:	bf00      	nop
 8010c7c:	3714      	adds	r7, #20
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c84:	4770      	bx	lr
 8010c86:	bf00      	nop
 8010c88:	200239d0 	.word	0x200239d0
 8010c8c:	20023a2c 	.word	0x20023a2c

08010c90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010c90:	b480      	push	{r7}
 8010c92:	b085      	sub	sp, #20
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	60f8      	str	r0, [r7, #12]
 8010c98:	60b9      	str	r1, [r7, #8]
 8010c9a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	4a07      	ldr	r2, [pc, #28]	; (8010cbc <vApplicationGetTimerTaskMemory+0x2c>)
 8010ca0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	4a06      	ldr	r2, [pc, #24]	; (8010cc0 <vApplicationGetTimerTaskMemory+0x30>)
 8010ca6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010cae:	601a      	str	r2, [r3, #0]
}
 8010cb0:	bf00      	nop
 8010cb2:	3714      	adds	r7, #20
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cba:	4770      	bx	lr
 8010cbc:	20023c2c 	.word	0x20023c2c
 8010cc0:	20023c88 	.word	0x20023c88

08010cc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b08a      	sub	sp, #40	; 0x28
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010cd0:	f001 ff68 	bl	8012ba4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010cd4:	4b5b      	ldr	r3, [pc, #364]	; (8010e44 <pvPortMalloc+0x180>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d101      	bne.n	8010ce0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010cdc:	f000 f91a 	bl	8010f14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010ce0:	4b59      	ldr	r3, [pc, #356]	; (8010e48 <pvPortMalloc+0x184>)
 8010ce2:	681a      	ldr	r2, [r3, #0]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	4013      	ands	r3, r2
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	f040 8092 	bne.w	8010e12 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d01f      	beq.n	8010d34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010cf4:	2208      	movs	r2, #8
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	4413      	add	r3, r2
 8010cfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f003 0307 	and.w	r3, r3, #7
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d016      	beq.n	8010d34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f023 0307 	bic.w	r3, r3, #7
 8010d0c:	3308      	adds	r3, #8
 8010d0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f003 0307 	and.w	r3, r3, #7
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d00c      	beq.n	8010d34 <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010d1a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010d1e:	b672      	cpsid	i
 8010d20:	f383 8811 	msr	BASEPRI, r3
 8010d24:	f3bf 8f6f 	isb	sy
 8010d28:	f3bf 8f4f 	dsb	sy
 8010d2c:	b662      	cpsie	i
 8010d2e:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010d30:	bf00      	nop
 8010d32:	e7fe      	b.n	8010d32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d06b      	beq.n	8010e12 <pvPortMalloc+0x14e>
 8010d3a:	4b44      	ldr	r3, [pc, #272]	; (8010e4c <pvPortMalloc+0x188>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	687a      	ldr	r2, [r7, #4]
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d866      	bhi.n	8010e12 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010d44:	4b42      	ldr	r3, [pc, #264]	; (8010e50 <pvPortMalloc+0x18c>)
 8010d46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010d48:	4b41      	ldr	r3, [pc, #260]	; (8010e50 <pvPortMalloc+0x18c>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d4e:	e004      	b.n	8010d5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	687a      	ldr	r2, [r7, #4]
 8010d60:	429a      	cmp	r2, r3
 8010d62:	d903      	bls.n	8010d6c <pvPortMalloc+0xa8>
 8010d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d1f1      	bne.n	8010d50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010d6c:	4b35      	ldr	r3, [pc, #212]	; (8010e44 <pvPortMalloc+0x180>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d04d      	beq.n	8010e12 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010d76:	6a3b      	ldr	r3, [r7, #32]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	2208      	movs	r2, #8
 8010d7c:	4413      	add	r3, r2
 8010d7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d82:	681a      	ldr	r2, [r3, #0]
 8010d84:	6a3b      	ldr	r3, [r7, #32]
 8010d86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8a:	685a      	ldr	r2, [r3, #4]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	1ad2      	subs	r2, r2, r3
 8010d90:	2308      	movs	r3, #8
 8010d92:	005b      	lsls	r3, r3, #1
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d921      	bls.n	8010ddc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	4413      	add	r3, r2
 8010d9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010da0:	69bb      	ldr	r3, [r7, #24]
 8010da2:	f003 0307 	and.w	r3, r3, #7
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d00c      	beq.n	8010dc4 <pvPortMalloc+0x100>
	__asm volatile
 8010daa:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010dae:	b672      	cpsid	i
 8010db0:	f383 8811 	msr	BASEPRI, r3
 8010db4:	f3bf 8f6f 	isb	sy
 8010db8:	f3bf 8f4f 	dsb	sy
 8010dbc:	b662      	cpsie	i
 8010dbe:	613b      	str	r3, [r7, #16]
}
 8010dc0:	bf00      	nop
 8010dc2:	e7fe      	b.n	8010dc2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc6:	685a      	ldr	r2, [r3, #4]
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	1ad2      	subs	r2, r2, r3
 8010dcc:	69bb      	ldr	r3, [r7, #24]
 8010dce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd2:	687a      	ldr	r2, [r7, #4]
 8010dd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010dd6:	69b8      	ldr	r0, [r7, #24]
 8010dd8:	f000 f8fe 	bl	8010fd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010ddc:	4b1b      	ldr	r3, [pc, #108]	; (8010e4c <pvPortMalloc+0x188>)
 8010dde:	681a      	ldr	r2, [r3, #0]
 8010de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	1ad3      	subs	r3, r2, r3
 8010de6:	4a19      	ldr	r2, [pc, #100]	; (8010e4c <pvPortMalloc+0x188>)
 8010de8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010dea:	4b18      	ldr	r3, [pc, #96]	; (8010e4c <pvPortMalloc+0x188>)
 8010dec:	681a      	ldr	r2, [r3, #0]
 8010dee:	4b19      	ldr	r3, [pc, #100]	; (8010e54 <pvPortMalloc+0x190>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d203      	bcs.n	8010dfe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010df6:	4b15      	ldr	r3, [pc, #84]	; (8010e4c <pvPortMalloc+0x188>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	4a16      	ldr	r2, [pc, #88]	; (8010e54 <pvPortMalloc+0x190>)
 8010dfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e00:	685a      	ldr	r2, [r3, #4]
 8010e02:	4b11      	ldr	r3, [pc, #68]	; (8010e48 <pvPortMalloc+0x184>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	431a      	orrs	r2, r3
 8010e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0e:	2200      	movs	r2, #0
 8010e10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010e12:	f001 fed5 	bl	8012bc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e16:	69fb      	ldr	r3, [r7, #28]
 8010e18:	f003 0307 	and.w	r3, r3, #7
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d00c      	beq.n	8010e3a <pvPortMalloc+0x176>
	__asm volatile
 8010e20:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010e24:	b672      	cpsid	i
 8010e26:	f383 8811 	msr	BASEPRI, r3
 8010e2a:	f3bf 8f6f 	isb	sy
 8010e2e:	f3bf 8f4f 	dsb	sy
 8010e32:	b662      	cpsie	i
 8010e34:	60fb      	str	r3, [r7, #12]
}
 8010e36:	bf00      	nop
 8010e38:	e7fe      	b.n	8010e38 <pvPortMalloc+0x174>
	return pvReturn;
 8010e3a:	69fb      	ldr	r3, [r7, #28]
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3728      	adds	r7, #40	; 0x28
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	20056090 	.word	0x20056090
 8010e48:	2005609c 	.word	0x2005609c
 8010e4c:	20056094 	.word	0x20056094
 8010e50:	20056088 	.word	0x20056088
 8010e54:	20056098 	.word	0x20056098

08010e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b086      	sub	sp, #24
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d04c      	beq.n	8010f04 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010e6a:	2308      	movs	r3, #8
 8010e6c:	425b      	negs	r3, r3
 8010e6e:	697a      	ldr	r2, [r7, #20]
 8010e70:	4413      	add	r3, r2
 8010e72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	685a      	ldr	r2, [r3, #4]
 8010e7c:	4b23      	ldr	r3, [pc, #140]	; (8010f0c <vPortFree+0xb4>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	4013      	ands	r3, r2
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d10c      	bne.n	8010ea0 <vPortFree+0x48>
	__asm volatile
 8010e86:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010e8a:	b672      	cpsid	i
 8010e8c:	f383 8811 	msr	BASEPRI, r3
 8010e90:	f3bf 8f6f 	isb	sy
 8010e94:	f3bf 8f4f 	dsb	sy
 8010e98:	b662      	cpsie	i
 8010e9a:	60fb      	str	r3, [r7, #12]
}
 8010e9c:	bf00      	nop
 8010e9e:	e7fe      	b.n	8010e9e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d00c      	beq.n	8010ec2 <vPortFree+0x6a>
	__asm volatile
 8010ea8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010eac:	b672      	cpsid	i
 8010eae:	f383 8811 	msr	BASEPRI, r3
 8010eb2:	f3bf 8f6f 	isb	sy
 8010eb6:	f3bf 8f4f 	dsb	sy
 8010eba:	b662      	cpsie	i
 8010ebc:	60bb      	str	r3, [r7, #8]
}
 8010ebe:	bf00      	nop
 8010ec0:	e7fe      	b.n	8010ec0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	685a      	ldr	r2, [r3, #4]
 8010ec6:	4b11      	ldr	r3, [pc, #68]	; (8010f0c <vPortFree+0xb4>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	4013      	ands	r3, r2
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d019      	beq.n	8010f04 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d115      	bne.n	8010f04 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	685a      	ldr	r2, [r3, #4]
 8010edc:	4b0b      	ldr	r3, [pc, #44]	; (8010f0c <vPortFree+0xb4>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	43db      	mvns	r3, r3
 8010ee2:	401a      	ands	r2, r3
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010ee8:	f001 fe5c 	bl	8012ba4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010eec:	693b      	ldr	r3, [r7, #16]
 8010eee:	685a      	ldr	r2, [r3, #4]
 8010ef0:	4b07      	ldr	r3, [pc, #28]	; (8010f10 <vPortFree+0xb8>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	4413      	add	r3, r2
 8010ef6:	4a06      	ldr	r2, [pc, #24]	; (8010f10 <vPortFree+0xb8>)
 8010ef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010efa:	6938      	ldr	r0, [r7, #16]
 8010efc:	f000 f86c 	bl	8010fd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010f00:	f001 fe5e 	bl	8012bc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010f04:	bf00      	nop
 8010f06:	3718      	adds	r7, #24
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	2005609c 	.word	0x2005609c
 8010f10:	20056094 	.word	0x20056094

08010f14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010f14:	b480      	push	{r7}
 8010f16:	b085      	sub	sp, #20
 8010f18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010f1a:	f44f 3348 	mov.w	r3, #204800	; 0x32000
 8010f1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010f20:	4b27      	ldr	r3, [pc, #156]	; (8010fc0 <prvHeapInit+0xac>)
 8010f22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	f003 0307 	and.w	r3, r3, #7
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d00c      	beq.n	8010f48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	3307      	adds	r3, #7
 8010f32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	f023 0307 	bic.w	r3, r3, #7
 8010f3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010f3c:	68ba      	ldr	r2, [r7, #8]
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	1ad3      	subs	r3, r2, r3
 8010f42:	4a1f      	ldr	r2, [pc, #124]	; (8010fc0 <prvHeapInit+0xac>)
 8010f44:	4413      	add	r3, r2
 8010f46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010f4c:	4a1d      	ldr	r2, [pc, #116]	; (8010fc4 <prvHeapInit+0xb0>)
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010f52:	4b1c      	ldr	r3, [pc, #112]	; (8010fc4 <prvHeapInit+0xb0>)
 8010f54:	2200      	movs	r2, #0
 8010f56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	68ba      	ldr	r2, [r7, #8]
 8010f5c:	4413      	add	r3, r2
 8010f5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010f60:	2208      	movs	r2, #8
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	1a9b      	subs	r3, r3, r2
 8010f66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	f023 0307 	bic.w	r3, r3, #7
 8010f6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	4a15      	ldr	r2, [pc, #84]	; (8010fc8 <prvHeapInit+0xb4>)
 8010f74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010f76:	4b14      	ldr	r3, [pc, #80]	; (8010fc8 <prvHeapInit+0xb4>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010f7e:	4b12      	ldr	r3, [pc, #72]	; (8010fc8 <prvHeapInit+0xb4>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	2200      	movs	r2, #0
 8010f84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	68fa      	ldr	r2, [r7, #12]
 8010f8e:	1ad2      	subs	r2, r2, r3
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010f94:	4b0c      	ldr	r3, [pc, #48]	; (8010fc8 <prvHeapInit+0xb4>)
 8010f96:	681a      	ldr	r2, [r3, #0]
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	685b      	ldr	r3, [r3, #4]
 8010fa0:	4a0a      	ldr	r2, [pc, #40]	; (8010fcc <prvHeapInit+0xb8>)
 8010fa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	685b      	ldr	r3, [r3, #4]
 8010fa8:	4a09      	ldr	r2, [pc, #36]	; (8010fd0 <prvHeapInit+0xbc>)
 8010faa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010fac:	4b09      	ldr	r3, [pc, #36]	; (8010fd4 <prvHeapInit+0xc0>)
 8010fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010fb2:	601a      	str	r2, [r3, #0]
}
 8010fb4:	bf00      	nop
 8010fb6:	3714      	adds	r7, #20
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbe:	4770      	bx	lr
 8010fc0:	20024088 	.word	0x20024088
 8010fc4:	20056088 	.word	0x20056088
 8010fc8:	20056090 	.word	0x20056090
 8010fcc:	20056098 	.word	0x20056098
 8010fd0:	20056094 	.word	0x20056094
 8010fd4:	2005609c 	.word	0x2005609c

08010fd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010fd8:	b480      	push	{r7}
 8010fda:	b085      	sub	sp, #20
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010fe0:	4b28      	ldr	r3, [pc, #160]	; (8011084 <prvInsertBlockIntoFreeList+0xac>)
 8010fe2:	60fb      	str	r3, [r7, #12]
 8010fe4:	e002      	b.n	8010fec <prvInsertBlockIntoFreeList+0x14>
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	60fb      	str	r3, [r7, #12]
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	687a      	ldr	r2, [r7, #4]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d8f7      	bhi.n	8010fe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	68ba      	ldr	r2, [r7, #8]
 8011000:	4413      	add	r3, r2
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	429a      	cmp	r2, r3
 8011006:	d108      	bne.n	801101a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	685a      	ldr	r2, [r3, #4]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	685b      	ldr	r3, [r3, #4]
 8011010:	441a      	add	r2, r3
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	685b      	ldr	r3, [r3, #4]
 8011022:	68ba      	ldr	r2, [r7, #8]
 8011024:	441a      	add	r2, r3
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	429a      	cmp	r2, r3
 801102c:	d118      	bne.n	8011060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	681a      	ldr	r2, [r3, #0]
 8011032:	4b15      	ldr	r3, [pc, #84]	; (8011088 <prvInsertBlockIntoFreeList+0xb0>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	429a      	cmp	r2, r3
 8011038:	d00d      	beq.n	8011056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	685a      	ldr	r2, [r3, #4]
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	685b      	ldr	r3, [r3, #4]
 8011044:	441a      	add	r2, r3
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	681a      	ldr	r2, [r3, #0]
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	601a      	str	r2, [r3, #0]
 8011054:	e008      	b.n	8011068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011056:	4b0c      	ldr	r3, [pc, #48]	; (8011088 <prvInsertBlockIntoFreeList+0xb0>)
 8011058:	681a      	ldr	r2, [r3, #0]
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	601a      	str	r2, [r3, #0]
 801105e:	e003      	b.n	8011068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	681a      	ldr	r2, [r3, #0]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011068:	68fa      	ldr	r2, [r7, #12]
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	429a      	cmp	r2, r3
 801106e:	d002      	beq.n	8011076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011076:	bf00      	nop
 8011078:	3714      	adds	r7, #20
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr
 8011082:	bf00      	nop
 8011084:	20056088 	.word	0x20056088
 8011088:	20056090 	.word	0x20056090

0801108c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801108c:	b480      	push	{r7}
 801108e:	b083      	sub	sp, #12
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f103 0208 	add.w	r2, r3, #8
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f04f 32ff 	mov.w	r2, #4294967295
 80110a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f103 0208 	add.w	r2, r3, #8
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f103 0208 	add.w	r2, r3, #8
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2200      	movs	r2, #0
 80110be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80110c0:	bf00      	nop
 80110c2:	370c      	adds	r7, #12
 80110c4:	46bd      	mov	sp, r7
 80110c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ca:	4770      	bx	lr

080110cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80110cc:	b480      	push	{r7}
 80110ce:	b083      	sub	sp, #12
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2200      	movs	r2, #0
 80110d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80110da:	bf00      	nop
 80110dc:	370c      	adds	r7, #12
 80110de:	46bd      	mov	sp, r7
 80110e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e4:	4770      	bx	lr

080110e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80110e6:	b480      	push	{r7}
 80110e8:	b085      	sub	sp, #20
 80110ea:	af00      	add	r7, sp, #0
 80110ec:	6078      	str	r0, [r7, #4]
 80110ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	685b      	ldr	r3, [r3, #4]
 80110f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	68fa      	ldr	r2, [r7, #12]
 80110fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	689a      	ldr	r2, [r3, #8]
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	689b      	ldr	r3, [r3, #8]
 8011108:	683a      	ldr	r2, [r7, #0]
 801110a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	683a      	ldr	r2, [r7, #0]
 8011110:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	687a      	ldr	r2, [r7, #4]
 8011116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	1c5a      	adds	r2, r3, #1
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	601a      	str	r2, [r3, #0]
}
 8011122:	bf00      	nop
 8011124:	3714      	adds	r7, #20
 8011126:	46bd      	mov	sp, r7
 8011128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112c:	4770      	bx	lr

0801112e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801112e:	b480      	push	{r7}
 8011130:	b085      	sub	sp, #20
 8011132:	af00      	add	r7, sp, #0
 8011134:	6078      	str	r0, [r7, #4]
 8011136:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011144:	d103      	bne.n	801114e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	691b      	ldr	r3, [r3, #16]
 801114a:	60fb      	str	r3, [r7, #12]
 801114c:	e00c      	b.n	8011168 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	3308      	adds	r3, #8
 8011152:	60fb      	str	r3, [r7, #12]
 8011154:	e002      	b.n	801115c <vListInsert+0x2e>
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	60fb      	str	r3, [r7, #12]
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	685b      	ldr	r3, [r3, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	68ba      	ldr	r2, [r7, #8]
 8011164:	429a      	cmp	r2, r3
 8011166:	d2f6      	bcs.n	8011156 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	685a      	ldr	r2, [r3, #4]
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	685b      	ldr	r3, [r3, #4]
 8011174:	683a      	ldr	r2, [r7, #0]
 8011176:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	68fa      	ldr	r2, [r7, #12]
 801117c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	683a      	ldr	r2, [r7, #0]
 8011182:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	687a      	ldr	r2, [r7, #4]
 8011188:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	1c5a      	adds	r2, r3, #1
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	601a      	str	r2, [r3, #0]
}
 8011194:	bf00      	nop
 8011196:	3714      	adds	r7, #20
 8011198:	46bd      	mov	sp, r7
 801119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119e:	4770      	bx	lr

080111a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80111a0:	b480      	push	{r7}
 80111a2:	b085      	sub	sp, #20
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	691b      	ldr	r3, [r3, #16]
 80111ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	685b      	ldr	r3, [r3, #4]
 80111b2:	687a      	ldr	r2, [r7, #4]
 80111b4:	6892      	ldr	r2, [r2, #8]
 80111b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	689b      	ldr	r3, [r3, #8]
 80111bc:	687a      	ldr	r2, [r7, #4]
 80111be:	6852      	ldr	r2, [r2, #4]
 80111c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	687a      	ldr	r2, [r7, #4]
 80111c8:	429a      	cmp	r2, r3
 80111ca:	d103      	bne.n	80111d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	689a      	ldr	r2, [r3, #8]
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2200      	movs	r2, #0
 80111d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	1e5a      	subs	r2, r3, #1
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	681b      	ldr	r3, [r3, #0]
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3714      	adds	r7, #20
 80111ec:	46bd      	mov	sp, r7
 80111ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f2:	4770      	bx	lr

080111f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80111f4:	b480      	push	{r7}
 80111f6:	b085      	sub	sp, #20
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	60f8      	str	r0, [r7, #12]
 80111fc:	60b9      	str	r1, [r7, #8]
 80111fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	3b04      	subs	r3, #4
 8011204:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801120c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	3b04      	subs	r3, #4
 8011212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011214:	68bb      	ldr	r3, [r7, #8]
 8011216:	f023 0201 	bic.w	r2, r3, #1
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	3b04      	subs	r3, #4
 8011222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011224:	4a0c      	ldr	r2, [pc, #48]	; (8011258 <pxPortInitialiseStack+0x64>)
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	3b14      	subs	r3, #20
 801122e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011230:	687a      	ldr	r2, [r7, #4]
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	3b04      	subs	r3, #4
 801123a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	f06f 0202 	mvn.w	r2, #2
 8011242:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	3b20      	subs	r3, #32
 8011248:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801124a:	68fb      	ldr	r3, [r7, #12]
}
 801124c:	4618      	mov	r0, r3
 801124e:	3714      	adds	r7, #20
 8011250:	46bd      	mov	sp, r7
 8011252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011256:	4770      	bx	lr
 8011258:	0801125d 	.word	0x0801125d

0801125c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801125c:	b480      	push	{r7}
 801125e:	b085      	sub	sp, #20
 8011260:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011262:	2300      	movs	r3, #0
 8011264:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011266:	4b14      	ldr	r3, [pc, #80]	; (80112b8 <prvTaskExitError+0x5c>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801126e:	d00c      	beq.n	801128a <prvTaskExitError+0x2e>
	__asm volatile
 8011270:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011274:	b672      	cpsid	i
 8011276:	f383 8811 	msr	BASEPRI, r3
 801127a:	f3bf 8f6f 	isb	sy
 801127e:	f3bf 8f4f 	dsb	sy
 8011282:	b662      	cpsie	i
 8011284:	60fb      	str	r3, [r7, #12]
}
 8011286:	bf00      	nop
 8011288:	e7fe      	b.n	8011288 <prvTaskExitError+0x2c>
	__asm volatile
 801128a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801128e:	b672      	cpsid	i
 8011290:	f383 8811 	msr	BASEPRI, r3
 8011294:	f3bf 8f6f 	isb	sy
 8011298:	f3bf 8f4f 	dsb	sy
 801129c:	b662      	cpsie	i
 801129e:	60bb      	str	r3, [r7, #8]
}
 80112a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80112a2:	bf00      	nop
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d0fc      	beq.n	80112a4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80112aa:	bf00      	nop
 80112ac:	bf00      	nop
 80112ae:	3714      	adds	r7, #20
 80112b0:	46bd      	mov	sp, r7
 80112b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b6:	4770      	bx	lr
 80112b8:	20000018 	.word	0x20000018
 80112bc:	00000000 	.word	0x00000000

080112c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80112c0:	4b07      	ldr	r3, [pc, #28]	; (80112e0 <pxCurrentTCBConst2>)
 80112c2:	6819      	ldr	r1, [r3, #0]
 80112c4:	6808      	ldr	r0, [r1, #0]
 80112c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ca:	f380 8809 	msr	PSP, r0
 80112ce:	f3bf 8f6f 	isb	sy
 80112d2:	f04f 0000 	mov.w	r0, #0
 80112d6:	f380 8811 	msr	BASEPRI, r0
 80112da:	4770      	bx	lr
 80112dc:	f3af 8000 	nop.w

080112e0 <pxCurrentTCBConst2>:
 80112e0:	200560a8 	.word	0x200560a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80112e4:	bf00      	nop
 80112e6:	bf00      	nop

080112e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80112e8:	4808      	ldr	r0, [pc, #32]	; (801130c <prvPortStartFirstTask+0x24>)
 80112ea:	6800      	ldr	r0, [r0, #0]
 80112ec:	6800      	ldr	r0, [r0, #0]
 80112ee:	f380 8808 	msr	MSP, r0
 80112f2:	f04f 0000 	mov.w	r0, #0
 80112f6:	f380 8814 	msr	CONTROL, r0
 80112fa:	b662      	cpsie	i
 80112fc:	b661      	cpsie	f
 80112fe:	f3bf 8f4f 	dsb	sy
 8011302:	f3bf 8f6f 	isb	sy
 8011306:	df00      	svc	0
 8011308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801130a:	bf00      	nop
 801130c:	e000ed08 	.word	0xe000ed08

08011310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b084      	sub	sp, #16
 8011314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011316:	4b37      	ldr	r3, [pc, #220]	; (80113f4 <xPortStartScheduler+0xe4>)
 8011318:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	b2db      	uxtb	r3, r3
 8011320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	22ff      	movs	r2, #255	; 0xff
 8011326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	781b      	ldrb	r3, [r3, #0]
 801132c:	b2db      	uxtb	r3, r3
 801132e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011330:	78fb      	ldrb	r3, [r7, #3]
 8011332:	b2db      	uxtb	r3, r3
 8011334:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011338:	b2da      	uxtb	r2, r3
 801133a:	4b2f      	ldr	r3, [pc, #188]	; (80113f8 <xPortStartScheduler+0xe8>)
 801133c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801133e:	4b2f      	ldr	r3, [pc, #188]	; (80113fc <xPortStartScheduler+0xec>)
 8011340:	2207      	movs	r2, #7
 8011342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011344:	e009      	b.n	801135a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011346:	4b2d      	ldr	r3, [pc, #180]	; (80113fc <xPortStartScheduler+0xec>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	3b01      	subs	r3, #1
 801134c:	4a2b      	ldr	r2, [pc, #172]	; (80113fc <xPortStartScheduler+0xec>)
 801134e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011350:	78fb      	ldrb	r3, [r7, #3]
 8011352:	b2db      	uxtb	r3, r3
 8011354:	005b      	lsls	r3, r3, #1
 8011356:	b2db      	uxtb	r3, r3
 8011358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801135a:	78fb      	ldrb	r3, [r7, #3]
 801135c:	b2db      	uxtb	r3, r3
 801135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011362:	2b80      	cmp	r3, #128	; 0x80
 8011364:	d0ef      	beq.n	8011346 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011366:	4b25      	ldr	r3, [pc, #148]	; (80113fc <xPortStartScheduler+0xec>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	f1c3 0307 	rsb	r3, r3, #7
 801136e:	2b04      	cmp	r3, #4
 8011370:	d00c      	beq.n	801138c <xPortStartScheduler+0x7c>
	__asm volatile
 8011372:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011376:	b672      	cpsid	i
 8011378:	f383 8811 	msr	BASEPRI, r3
 801137c:	f3bf 8f6f 	isb	sy
 8011380:	f3bf 8f4f 	dsb	sy
 8011384:	b662      	cpsie	i
 8011386:	60bb      	str	r3, [r7, #8]
}
 8011388:	bf00      	nop
 801138a:	e7fe      	b.n	801138a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801138c:	4b1b      	ldr	r3, [pc, #108]	; (80113fc <xPortStartScheduler+0xec>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	021b      	lsls	r3, r3, #8
 8011392:	4a1a      	ldr	r2, [pc, #104]	; (80113fc <xPortStartScheduler+0xec>)
 8011394:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011396:	4b19      	ldr	r3, [pc, #100]	; (80113fc <xPortStartScheduler+0xec>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801139e:	4a17      	ldr	r2, [pc, #92]	; (80113fc <xPortStartScheduler+0xec>)
 80113a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	b2da      	uxtb	r2, r3
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80113aa:	4b15      	ldr	r3, [pc, #84]	; (8011400 <xPortStartScheduler+0xf0>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	4a14      	ldr	r2, [pc, #80]	; (8011400 <xPortStartScheduler+0xf0>)
 80113b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80113b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80113b6:	4b12      	ldr	r3, [pc, #72]	; (8011400 <xPortStartScheduler+0xf0>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	4a11      	ldr	r2, [pc, #68]	; (8011400 <xPortStartScheduler+0xf0>)
 80113bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80113c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80113c2:	f000 f8dd 	bl	8011580 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80113c6:	4b0f      	ldr	r3, [pc, #60]	; (8011404 <xPortStartScheduler+0xf4>)
 80113c8:	2200      	movs	r2, #0
 80113ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80113cc:	f000 f8fc 	bl	80115c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80113d0:	4b0d      	ldr	r3, [pc, #52]	; (8011408 <xPortStartScheduler+0xf8>)
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	4a0c      	ldr	r2, [pc, #48]	; (8011408 <xPortStartScheduler+0xf8>)
 80113d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80113da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80113dc:	f7ff ff84 	bl	80112e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80113e0:	f001 fd5a 	bl	8012e98 <vTaskSwitchContext>
	prvTaskExitError();
 80113e4:	f7ff ff3a 	bl	801125c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80113e8:	2300      	movs	r3, #0
}
 80113ea:	4618      	mov	r0, r3
 80113ec:	3710      	adds	r7, #16
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
 80113f2:	bf00      	nop
 80113f4:	e000e400 	.word	0xe000e400
 80113f8:	200560a0 	.word	0x200560a0
 80113fc:	200560a4 	.word	0x200560a4
 8011400:	e000ed20 	.word	0xe000ed20
 8011404:	20000018 	.word	0x20000018
 8011408:	e000ef34 	.word	0xe000ef34

0801140c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801140c:	b480      	push	{r7}
 801140e:	b083      	sub	sp, #12
 8011410:	af00      	add	r7, sp, #0
	__asm volatile
 8011412:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011416:	b672      	cpsid	i
 8011418:	f383 8811 	msr	BASEPRI, r3
 801141c:	f3bf 8f6f 	isb	sy
 8011420:	f3bf 8f4f 	dsb	sy
 8011424:	b662      	cpsie	i
 8011426:	607b      	str	r3, [r7, #4]
}
 8011428:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801142a:	4b10      	ldr	r3, [pc, #64]	; (801146c <vPortEnterCritical+0x60>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	3301      	adds	r3, #1
 8011430:	4a0e      	ldr	r2, [pc, #56]	; (801146c <vPortEnterCritical+0x60>)
 8011432:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011434:	4b0d      	ldr	r3, [pc, #52]	; (801146c <vPortEnterCritical+0x60>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	2b01      	cmp	r3, #1
 801143a:	d111      	bne.n	8011460 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801143c:	4b0c      	ldr	r3, [pc, #48]	; (8011470 <vPortEnterCritical+0x64>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	b2db      	uxtb	r3, r3
 8011442:	2b00      	cmp	r3, #0
 8011444:	d00c      	beq.n	8011460 <vPortEnterCritical+0x54>
	__asm volatile
 8011446:	f04f 0330 	mov.w	r3, #48	; 0x30
 801144a:	b672      	cpsid	i
 801144c:	f383 8811 	msr	BASEPRI, r3
 8011450:	f3bf 8f6f 	isb	sy
 8011454:	f3bf 8f4f 	dsb	sy
 8011458:	b662      	cpsie	i
 801145a:	603b      	str	r3, [r7, #0]
}
 801145c:	bf00      	nop
 801145e:	e7fe      	b.n	801145e <vPortEnterCritical+0x52>
	}
}
 8011460:	bf00      	nop
 8011462:	370c      	adds	r7, #12
 8011464:	46bd      	mov	sp, r7
 8011466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146a:	4770      	bx	lr
 801146c:	20000018 	.word	0x20000018
 8011470:	e000ed04 	.word	0xe000ed04

08011474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011474:	b480      	push	{r7}
 8011476:	b083      	sub	sp, #12
 8011478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801147a:	4b13      	ldr	r3, [pc, #76]	; (80114c8 <vPortExitCritical+0x54>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d10c      	bne.n	801149c <vPortExitCritical+0x28>
	__asm volatile
 8011482:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011486:	b672      	cpsid	i
 8011488:	f383 8811 	msr	BASEPRI, r3
 801148c:	f3bf 8f6f 	isb	sy
 8011490:	f3bf 8f4f 	dsb	sy
 8011494:	b662      	cpsie	i
 8011496:	607b      	str	r3, [r7, #4]
}
 8011498:	bf00      	nop
 801149a:	e7fe      	b.n	801149a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801149c:	4b0a      	ldr	r3, [pc, #40]	; (80114c8 <vPortExitCritical+0x54>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	3b01      	subs	r3, #1
 80114a2:	4a09      	ldr	r2, [pc, #36]	; (80114c8 <vPortExitCritical+0x54>)
 80114a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80114a6:	4b08      	ldr	r3, [pc, #32]	; (80114c8 <vPortExitCritical+0x54>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d105      	bne.n	80114ba <vPortExitCritical+0x46>
 80114ae:	2300      	movs	r3, #0
 80114b0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80114b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80114ba:	bf00      	nop
 80114bc:	370c      	adds	r7, #12
 80114be:	46bd      	mov	sp, r7
 80114c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c4:	4770      	bx	lr
 80114c6:	bf00      	nop
 80114c8:	20000018 	.word	0x20000018
 80114cc:	00000000 	.word	0x00000000

080114d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80114d0:	f3ef 8009 	mrs	r0, PSP
 80114d4:	f3bf 8f6f 	isb	sy
 80114d8:	4b15      	ldr	r3, [pc, #84]	; (8011530 <pxCurrentTCBConst>)
 80114da:	681a      	ldr	r2, [r3, #0]
 80114dc:	f01e 0f10 	tst.w	lr, #16
 80114e0:	bf08      	it	eq
 80114e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80114e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114ea:	6010      	str	r0, [r2, #0]
 80114ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80114f0:	f04f 0030 	mov.w	r0, #48	; 0x30
 80114f4:	b672      	cpsid	i
 80114f6:	f380 8811 	msr	BASEPRI, r0
 80114fa:	f3bf 8f4f 	dsb	sy
 80114fe:	f3bf 8f6f 	isb	sy
 8011502:	b662      	cpsie	i
 8011504:	f001 fcc8 	bl	8012e98 <vTaskSwitchContext>
 8011508:	f04f 0000 	mov.w	r0, #0
 801150c:	f380 8811 	msr	BASEPRI, r0
 8011510:	bc09      	pop	{r0, r3}
 8011512:	6819      	ldr	r1, [r3, #0]
 8011514:	6808      	ldr	r0, [r1, #0]
 8011516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801151a:	f01e 0f10 	tst.w	lr, #16
 801151e:	bf08      	it	eq
 8011520:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011524:	f380 8809 	msr	PSP, r0
 8011528:	f3bf 8f6f 	isb	sy
 801152c:	4770      	bx	lr
 801152e:	bf00      	nop

08011530 <pxCurrentTCBConst>:
 8011530:	200560a8 	.word	0x200560a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011534:	bf00      	nop
 8011536:	bf00      	nop

08011538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b082      	sub	sp, #8
 801153c:	af00      	add	r7, sp, #0
	__asm volatile
 801153e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011542:	b672      	cpsid	i
 8011544:	f383 8811 	msr	BASEPRI, r3
 8011548:	f3bf 8f6f 	isb	sy
 801154c:	f3bf 8f4f 	dsb	sy
 8011550:	b662      	cpsie	i
 8011552:	607b      	str	r3, [r7, #4]
}
 8011554:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011556:	f001 fbe3 	bl	8012d20 <xTaskIncrementTick>
 801155a:	4603      	mov	r3, r0
 801155c:	2b00      	cmp	r3, #0
 801155e:	d003      	beq.n	8011568 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011560:	4b06      	ldr	r3, [pc, #24]	; (801157c <SysTick_Handler+0x44>)
 8011562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011566:	601a      	str	r2, [r3, #0]
 8011568:	2300      	movs	r3, #0
 801156a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	f383 8811 	msr	BASEPRI, r3
}
 8011572:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011574:	bf00      	nop
 8011576:	3708      	adds	r7, #8
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}
 801157c:	e000ed04 	.word	0xe000ed04

08011580 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011580:	b480      	push	{r7}
 8011582:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011584:	4b0b      	ldr	r3, [pc, #44]	; (80115b4 <vPortSetupTimerInterrupt+0x34>)
 8011586:	2200      	movs	r2, #0
 8011588:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801158a:	4b0b      	ldr	r3, [pc, #44]	; (80115b8 <vPortSetupTimerInterrupt+0x38>)
 801158c:	2200      	movs	r2, #0
 801158e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011590:	4b0a      	ldr	r3, [pc, #40]	; (80115bc <vPortSetupTimerInterrupt+0x3c>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	4a0a      	ldr	r2, [pc, #40]	; (80115c0 <vPortSetupTimerInterrupt+0x40>)
 8011596:	fba2 2303 	umull	r2, r3, r2, r3
 801159a:	099b      	lsrs	r3, r3, #6
 801159c:	4a09      	ldr	r2, [pc, #36]	; (80115c4 <vPortSetupTimerInterrupt+0x44>)
 801159e:	3b01      	subs	r3, #1
 80115a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80115a2:	4b04      	ldr	r3, [pc, #16]	; (80115b4 <vPortSetupTimerInterrupt+0x34>)
 80115a4:	2207      	movs	r2, #7
 80115a6:	601a      	str	r2, [r3, #0]
}
 80115a8:	bf00      	nop
 80115aa:	46bd      	mov	sp, r7
 80115ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b0:	4770      	bx	lr
 80115b2:	bf00      	nop
 80115b4:	e000e010 	.word	0xe000e010
 80115b8:	e000e018 	.word	0xe000e018
 80115bc:	2000000c 	.word	0x2000000c
 80115c0:	10624dd3 	.word	0x10624dd3
 80115c4:	e000e014 	.word	0xe000e014

080115c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80115c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80115d8 <vPortEnableVFP+0x10>
 80115cc:	6801      	ldr	r1, [r0, #0]
 80115ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80115d2:	6001      	str	r1, [r0, #0]
 80115d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80115d6:	bf00      	nop
 80115d8:	e000ed88 	.word	0xe000ed88

080115dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80115dc:	b480      	push	{r7}
 80115de:	b085      	sub	sp, #20
 80115e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80115e2:	f3ef 8305 	mrs	r3, IPSR
 80115e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	2b0f      	cmp	r3, #15
 80115ec:	d916      	bls.n	801161c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80115ee:	4a19      	ldr	r2, [pc, #100]	; (8011654 <vPortValidateInterruptPriority+0x78>)
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	4413      	add	r3, r2
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80115f8:	4b17      	ldr	r3, [pc, #92]	; (8011658 <vPortValidateInterruptPriority+0x7c>)
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	7afa      	ldrb	r2, [r7, #11]
 80115fe:	429a      	cmp	r2, r3
 8011600:	d20c      	bcs.n	801161c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8011602:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011606:	b672      	cpsid	i
 8011608:	f383 8811 	msr	BASEPRI, r3
 801160c:	f3bf 8f6f 	isb	sy
 8011610:	f3bf 8f4f 	dsb	sy
 8011614:	b662      	cpsie	i
 8011616:	607b      	str	r3, [r7, #4]
}
 8011618:	bf00      	nop
 801161a:	e7fe      	b.n	801161a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801161c:	4b0f      	ldr	r3, [pc, #60]	; (801165c <vPortValidateInterruptPriority+0x80>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011624:	4b0e      	ldr	r3, [pc, #56]	; (8011660 <vPortValidateInterruptPriority+0x84>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	429a      	cmp	r2, r3
 801162a:	d90c      	bls.n	8011646 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801162c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011630:	b672      	cpsid	i
 8011632:	f383 8811 	msr	BASEPRI, r3
 8011636:	f3bf 8f6f 	isb	sy
 801163a:	f3bf 8f4f 	dsb	sy
 801163e:	b662      	cpsie	i
 8011640:	603b      	str	r3, [r7, #0]
}
 8011642:	bf00      	nop
 8011644:	e7fe      	b.n	8011644 <vPortValidateInterruptPriority+0x68>
	}
 8011646:	bf00      	nop
 8011648:	3714      	adds	r7, #20
 801164a:	46bd      	mov	sp, r7
 801164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011650:	4770      	bx	lr
 8011652:	bf00      	nop
 8011654:	e000e3f0 	.word	0xe000e3f0
 8011658:	200560a0 	.word	0x200560a0
 801165c:	e000ed0c 	.word	0xe000ed0c
 8011660:	200560a4 	.word	0x200560a4

08011664 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b084      	sub	sp, #16
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d10c      	bne.n	8011692 <xQueueGenericReset+0x2e>
	__asm volatile
 8011678:	f04f 0330 	mov.w	r3, #48	; 0x30
 801167c:	b672      	cpsid	i
 801167e:	f383 8811 	msr	BASEPRI, r3
 8011682:	f3bf 8f6f 	isb	sy
 8011686:	f3bf 8f4f 	dsb	sy
 801168a:	b662      	cpsie	i
 801168c:	60bb      	str	r3, [r7, #8]
}
 801168e:	bf00      	nop
 8011690:	e7fe      	b.n	8011690 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8011692:	f7ff febb 	bl	801140c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801169e:	68f9      	ldr	r1, [r7, #12]
 80116a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80116a2:	fb01 f303 	mul.w	r3, r1, r3
 80116a6:	441a      	add	r2, r3
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	2200      	movs	r2, #0
 80116b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	681a      	ldr	r2, [r3, #0]
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	681a      	ldr	r2, [r3, #0]
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116c2:	3b01      	subs	r3, #1
 80116c4:	68f9      	ldr	r1, [r7, #12]
 80116c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80116c8:	fb01 f303 	mul.w	r3, r1, r3
 80116cc:	441a      	add	r2, r3
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	22ff      	movs	r2, #255	; 0xff
 80116d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	22ff      	movs	r2, #255	; 0xff
 80116de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d114      	bne.n	8011712 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	691b      	ldr	r3, [r3, #16]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d01a      	beq.n	8011726 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	3310      	adds	r3, #16
 80116f4:	4618      	mov	r0, r3
 80116f6:	f001 fc83 	bl	8013000 <xTaskRemoveFromEventList>
 80116fa:	4603      	mov	r3, r0
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d012      	beq.n	8011726 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011700:	4b0c      	ldr	r3, [pc, #48]	; (8011734 <xQueueGenericReset+0xd0>)
 8011702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011706:	601a      	str	r2, [r3, #0]
 8011708:	f3bf 8f4f 	dsb	sy
 801170c:	f3bf 8f6f 	isb	sy
 8011710:	e009      	b.n	8011726 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	3310      	adds	r3, #16
 8011716:	4618      	mov	r0, r3
 8011718:	f7ff fcb8 	bl	801108c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	3324      	adds	r3, #36	; 0x24
 8011720:	4618      	mov	r0, r3
 8011722:	f7ff fcb3 	bl	801108c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011726:	f7ff fea5 	bl	8011474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801172a:	2301      	movs	r3, #1
}
 801172c:	4618      	mov	r0, r3
 801172e:	3710      	adds	r7, #16
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}
 8011734:	e000ed04 	.word	0xe000ed04

08011738 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011738:	b580      	push	{r7, lr}
 801173a:	b08e      	sub	sp, #56	; 0x38
 801173c:	af02      	add	r7, sp, #8
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	607a      	str	r2, [r7, #4]
 8011744:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d10c      	bne.n	8011766 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 801174c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011750:	b672      	cpsid	i
 8011752:	f383 8811 	msr	BASEPRI, r3
 8011756:	f3bf 8f6f 	isb	sy
 801175a:	f3bf 8f4f 	dsb	sy
 801175e:	b662      	cpsie	i
 8011760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011762:	bf00      	nop
 8011764:	e7fe      	b.n	8011764 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d10c      	bne.n	8011786 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 801176c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011770:	b672      	cpsid	i
 8011772:	f383 8811 	msr	BASEPRI, r3
 8011776:	f3bf 8f6f 	isb	sy
 801177a:	f3bf 8f4f 	dsb	sy
 801177e:	b662      	cpsie	i
 8011780:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011782:	bf00      	nop
 8011784:	e7fe      	b.n	8011784 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d002      	beq.n	8011792 <xQueueGenericCreateStatic+0x5a>
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d001      	beq.n	8011796 <xQueueGenericCreateStatic+0x5e>
 8011792:	2301      	movs	r3, #1
 8011794:	e000      	b.n	8011798 <xQueueGenericCreateStatic+0x60>
 8011796:	2300      	movs	r3, #0
 8011798:	2b00      	cmp	r3, #0
 801179a:	d10c      	bne.n	80117b6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 801179c:	f04f 0330 	mov.w	r3, #48	; 0x30
 80117a0:	b672      	cpsid	i
 80117a2:	f383 8811 	msr	BASEPRI, r3
 80117a6:	f3bf 8f6f 	isb	sy
 80117aa:	f3bf 8f4f 	dsb	sy
 80117ae:	b662      	cpsie	i
 80117b0:	623b      	str	r3, [r7, #32]
}
 80117b2:	bf00      	nop
 80117b4:	e7fe      	b.n	80117b4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d102      	bne.n	80117c2 <xQueueGenericCreateStatic+0x8a>
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d101      	bne.n	80117c6 <xQueueGenericCreateStatic+0x8e>
 80117c2:	2301      	movs	r3, #1
 80117c4:	e000      	b.n	80117c8 <xQueueGenericCreateStatic+0x90>
 80117c6:	2300      	movs	r3, #0
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d10c      	bne.n	80117e6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80117cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80117d0:	b672      	cpsid	i
 80117d2:	f383 8811 	msr	BASEPRI, r3
 80117d6:	f3bf 8f6f 	isb	sy
 80117da:	f3bf 8f4f 	dsb	sy
 80117de:	b662      	cpsie	i
 80117e0:	61fb      	str	r3, [r7, #28]
}
 80117e2:	bf00      	nop
 80117e4:	e7fe      	b.n	80117e4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80117e6:	2350      	movs	r3, #80	; 0x50
 80117e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	2b50      	cmp	r3, #80	; 0x50
 80117ee:	d00c      	beq.n	801180a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80117f0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80117f4:	b672      	cpsid	i
 80117f6:	f383 8811 	msr	BASEPRI, r3
 80117fa:	f3bf 8f6f 	isb	sy
 80117fe:	f3bf 8f4f 	dsb	sy
 8011802:	b662      	cpsie	i
 8011804:	61bb      	str	r3, [r7, #24]
}
 8011806:	bf00      	nop
 8011808:	e7fe      	b.n	8011808 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801180a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011812:	2b00      	cmp	r3, #0
 8011814:	d00d      	beq.n	8011832 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011818:	2201      	movs	r2, #1
 801181a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801181e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011824:	9300      	str	r3, [sp, #0]
 8011826:	4613      	mov	r3, r2
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	68b9      	ldr	r1, [r7, #8]
 801182c:	68f8      	ldr	r0, [r7, #12]
 801182e:	f000 f847 	bl	80118c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011834:	4618      	mov	r0, r3
 8011836:	3730      	adds	r7, #48	; 0x30
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}

0801183c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801183c:	b580      	push	{r7, lr}
 801183e:	b08a      	sub	sp, #40	; 0x28
 8011840:	af02      	add	r7, sp, #8
 8011842:	60f8      	str	r0, [r7, #12]
 8011844:	60b9      	str	r1, [r7, #8]
 8011846:	4613      	mov	r3, r2
 8011848:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d10c      	bne.n	801186a <xQueueGenericCreate+0x2e>
	__asm volatile
 8011850:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011854:	b672      	cpsid	i
 8011856:	f383 8811 	msr	BASEPRI, r3
 801185a:	f3bf 8f6f 	isb	sy
 801185e:	f3bf 8f4f 	dsb	sy
 8011862:	b662      	cpsie	i
 8011864:	613b      	str	r3, [r7, #16]
}
 8011866:	bf00      	nop
 8011868:	e7fe      	b.n	8011868 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d102      	bne.n	8011876 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011870:	2300      	movs	r3, #0
 8011872:	61fb      	str	r3, [r7, #28]
 8011874:	e004      	b.n	8011880 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	68ba      	ldr	r2, [r7, #8]
 801187a:	fb02 f303 	mul.w	r3, r2, r3
 801187e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011880:	69fb      	ldr	r3, [r7, #28]
 8011882:	3350      	adds	r3, #80	; 0x50
 8011884:	4618      	mov	r0, r3
 8011886:	f7ff fa1d 	bl	8010cc4 <pvPortMalloc>
 801188a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801188c:	69bb      	ldr	r3, [r7, #24]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d011      	beq.n	80118b6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011892:	69bb      	ldr	r3, [r7, #24]
 8011894:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	3350      	adds	r3, #80	; 0x50
 801189a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801189c:	69bb      	ldr	r3, [r7, #24]
 801189e:	2200      	movs	r2, #0
 80118a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80118a4:	79fa      	ldrb	r2, [r7, #7]
 80118a6:	69bb      	ldr	r3, [r7, #24]
 80118a8:	9300      	str	r3, [sp, #0]
 80118aa:	4613      	mov	r3, r2
 80118ac:	697a      	ldr	r2, [r7, #20]
 80118ae:	68b9      	ldr	r1, [r7, #8]
 80118b0:	68f8      	ldr	r0, [r7, #12]
 80118b2:	f000 f805 	bl	80118c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80118b6:	69bb      	ldr	r3, [r7, #24]
	}
 80118b8:	4618      	mov	r0, r3
 80118ba:	3720      	adds	r7, #32
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd80      	pop	{r7, pc}

080118c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b084      	sub	sp, #16
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	60f8      	str	r0, [r7, #12]
 80118c8:	60b9      	str	r1, [r7, #8]
 80118ca:	607a      	str	r2, [r7, #4]
 80118cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d103      	bne.n	80118dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80118d4:	69bb      	ldr	r3, [r7, #24]
 80118d6:	69ba      	ldr	r2, [r7, #24]
 80118d8:	601a      	str	r2, [r3, #0]
 80118da:	e002      	b.n	80118e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80118dc:	69bb      	ldr	r3, [r7, #24]
 80118de:	687a      	ldr	r2, [r7, #4]
 80118e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80118e2:	69bb      	ldr	r3, [r7, #24]
 80118e4:	68fa      	ldr	r2, [r7, #12]
 80118e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80118e8:	69bb      	ldr	r3, [r7, #24]
 80118ea:	68ba      	ldr	r2, [r7, #8]
 80118ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80118ee:	2101      	movs	r1, #1
 80118f0:	69b8      	ldr	r0, [r7, #24]
 80118f2:	f7ff feb7 	bl	8011664 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	78fa      	ldrb	r2, [r7, #3]
 80118fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80118fe:	bf00      	nop
 8011900:	3710      	adds	r7, #16
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}

08011906 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8011906:	b580      	push	{r7, lr}
 8011908:	b08a      	sub	sp, #40	; 0x28
 801190a:	af02      	add	r7, sp, #8
 801190c:	60f8      	str	r0, [r7, #12]
 801190e:	60b9      	str	r1, [r7, #8]
 8011910:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d10c      	bne.n	8011932 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8011918:	f04f 0330 	mov.w	r3, #48	; 0x30
 801191c:	b672      	cpsid	i
 801191e:	f383 8811 	msr	BASEPRI, r3
 8011922:	f3bf 8f6f 	isb	sy
 8011926:	f3bf 8f4f 	dsb	sy
 801192a:	b662      	cpsie	i
 801192c:	61bb      	str	r3, [r7, #24]
}
 801192e:	bf00      	nop
 8011930:	e7fe      	b.n	8011930 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011932:	68ba      	ldr	r2, [r7, #8]
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	429a      	cmp	r2, r3
 8011938:	d90c      	bls.n	8011954 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 801193a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801193e:	b672      	cpsid	i
 8011940:	f383 8811 	msr	BASEPRI, r3
 8011944:	f3bf 8f6f 	isb	sy
 8011948:	f3bf 8f4f 	dsb	sy
 801194c:	b662      	cpsie	i
 801194e:	617b      	str	r3, [r7, #20]
}
 8011950:	bf00      	nop
 8011952:	e7fe      	b.n	8011952 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011954:	2302      	movs	r3, #2
 8011956:	9300      	str	r3, [sp, #0]
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2200      	movs	r2, #0
 801195c:	2100      	movs	r1, #0
 801195e:	68f8      	ldr	r0, [r7, #12]
 8011960:	f7ff feea 	bl	8011738 <xQueueGenericCreateStatic>
 8011964:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8011966:	69fb      	ldr	r3, [r7, #28]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d002      	beq.n	8011972 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801196c:	69fb      	ldr	r3, [r7, #28]
 801196e:	68ba      	ldr	r2, [r7, #8]
 8011970:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011972:	69fb      	ldr	r3, [r7, #28]
	}
 8011974:	4618      	mov	r0, r3
 8011976:	3720      	adds	r7, #32
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}

0801197c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801197c:	b580      	push	{r7, lr}
 801197e:	b086      	sub	sp, #24
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d10c      	bne.n	80119a6 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 801198c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011990:	b672      	cpsid	i
 8011992:	f383 8811 	msr	BASEPRI, r3
 8011996:	f3bf 8f6f 	isb	sy
 801199a:	f3bf 8f4f 	dsb	sy
 801199e:	b662      	cpsie	i
 80119a0:	613b      	str	r3, [r7, #16]
}
 80119a2:	bf00      	nop
 80119a4:	e7fe      	b.n	80119a4 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80119a6:	683a      	ldr	r2, [r7, #0]
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d90c      	bls.n	80119c8 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80119ae:	f04f 0330 	mov.w	r3, #48	; 0x30
 80119b2:	b672      	cpsid	i
 80119b4:	f383 8811 	msr	BASEPRI, r3
 80119b8:	f3bf 8f6f 	isb	sy
 80119bc:	f3bf 8f4f 	dsb	sy
 80119c0:	b662      	cpsie	i
 80119c2:	60fb      	str	r3, [r7, #12]
}
 80119c4:	bf00      	nop
 80119c6:	e7fe      	b.n	80119c6 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80119c8:	2202      	movs	r2, #2
 80119ca:	2100      	movs	r1, #0
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	f7ff ff35 	bl	801183c <xQueueGenericCreate>
 80119d2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80119d4:	697b      	ldr	r3, [r7, #20]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d002      	beq.n	80119e0 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	683a      	ldr	r2, [r7, #0]
 80119de:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80119e0:	697b      	ldr	r3, [r7, #20]
	}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3718      	adds	r7, #24
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}
	...

080119ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b08e      	sub	sp, #56	; 0x38
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	60f8      	str	r0, [r7, #12]
 80119f4:	60b9      	str	r1, [r7, #8]
 80119f6:	607a      	str	r2, [r7, #4]
 80119f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80119fa:	2300      	movs	r3, #0
 80119fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d10c      	bne.n	8011a22 <xQueueGenericSend+0x36>
	__asm volatile
 8011a08:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011a0c:	b672      	cpsid	i
 8011a0e:	f383 8811 	msr	BASEPRI, r3
 8011a12:	f3bf 8f6f 	isb	sy
 8011a16:	f3bf 8f4f 	dsb	sy
 8011a1a:	b662      	cpsie	i
 8011a1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011a1e:	bf00      	nop
 8011a20:	e7fe      	b.n	8011a20 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d103      	bne.n	8011a30 <xQueueGenericSend+0x44>
 8011a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d101      	bne.n	8011a34 <xQueueGenericSend+0x48>
 8011a30:	2301      	movs	r3, #1
 8011a32:	e000      	b.n	8011a36 <xQueueGenericSend+0x4a>
 8011a34:	2300      	movs	r3, #0
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d10c      	bne.n	8011a54 <xQueueGenericSend+0x68>
	__asm volatile
 8011a3a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011a3e:	b672      	cpsid	i
 8011a40:	f383 8811 	msr	BASEPRI, r3
 8011a44:	f3bf 8f6f 	isb	sy
 8011a48:	f3bf 8f4f 	dsb	sy
 8011a4c:	b662      	cpsie	i
 8011a4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011a50:	bf00      	nop
 8011a52:	e7fe      	b.n	8011a52 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	2b02      	cmp	r3, #2
 8011a58:	d103      	bne.n	8011a62 <xQueueGenericSend+0x76>
 8011a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a5e:	2b01      	cmp	r3, #1
 8011a60:	d101      	bne.n	8011a66 <xQueueGenericSend+0x7a>
 8011a62:	2301      	movs	r3, #1
 8011a64:	e000      	b.n	8011a68 <xQueueGenericSend+0x7c>
 8011a66:	2300      	movs	r3, #0
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d10c      	bne.n	8011a86 <xQueueGenericSend+0x9a>
	__asm volatile
 8011a6c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011a70:	b672      	cpsid	i
 8011a72:	f383 8811 	msr	BASEPRI, r3
 8011a76:	f3bf 8f6f 	isb	sy
 8011a7a:	f3bf 8f4f 	dsb	sy
 8011a7e:	b662      	cpsie	i
 8011a80:	623b      	str	r3, [r7, #32]
}
 8011a82:	bf00      	nop
 8011a84:	e7fe      	b.n	8011a84 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a86:	f001 fc81 	bl	801338c <xTaskGetSchedulerState>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d102      	bne.n	8011a96 <xQueueGenericSend+0xaa>
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d101      	bne.n	8011a9a <xQueueGenericSend+0xae>
 8011a96:	2301      	movs	r3, #1
 8011a98:	e000      	b.n	8011a9c <xQueueGenericSend+0xb0>
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d10c      	bne.n	8011aba <xQueueGenericSend+0xce>
	__asm volatile
 8011aa0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011aa4:	b672      	cpsid	i
 8011aa6:	f383 8811 	msr	BASEPRI, r3
 8011aaa:	f3bf 8f6f 	isb	sy
 8011aae:	f3bf 8f4f 	dsb	sy
 8011ab2:	b662      	cpsie	i
 8011ab4:	61fb      	str	r3, [r7, #28]
}
 8011ab6:	bf00      	nop
 8011ab8:	e7fe      	b.n	8011ab8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011aba:	f7ff fca7 	bl	801140c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d302      	bcc.n	8011ad0 <xQueueGenericSend+0xe4>
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	2b02      	cmp	r3, #2
 8011ace:	d129      	bne.n	8011b24 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011ad0:	683a      	ldr	r2, [r7, #0]
 8011ad2:	68b9      	ldr	r1, [r7, #8]
 8011ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ad6:	f000 fc82 	bl	80123de <prvCopyDataToQueue>
 8011ada:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d010      	beq.n	8011b06 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae6:	3324      	adds	r3, #36	; 0x24
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f001 fa89 	bl	8013000 <xTaskRemoveFromEventList>
 8011aee:	4603      	mov	r3, r0
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d013      	beq.n	8011b1c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011af4:	4b3f      	ldr	r3, [pc, #252]	; (8011bf4 <xQueueGenericSend+0x208>)
 8011af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011afa:	601a      	str	r2, [r3, #0]
 8011afc:	f3bf 8f4f 	dsb	sy
 8011b00:	f3bf 8f6f 	isb	sy
 8011b04:	e00a      	b.n	8011b1c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d007      	beq.n	8011b1c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011b0c:	4b39      	ldr	r3, [pc, #228]	; (8011bf4 <xQueueGenericSend+0x208>)
 8011b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b12:	601a      	str	r2, [r3, #0]
 8011b14:	f3bf 8f4f 	dsb	sy
 8011b18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011b1c:	f7ff fcaa 	bl	8011474 <vPortExitCritical>
				return pdPASS;
 8011b20:	2301      	movs	r3, #1
 8011b22:	e063      	b.n	8011bec <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d103      	bne.n	8011b32 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011b2a:	f7ff fca3 	bl	8011474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	e05c      	b.n	8011bec <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d106      	bne.n	8011b46 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011b38:	f107 0314 	add.w	r3, r7, #20
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f001 fac5 	bl	80130cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011b42:	2301      	movs	r3, #1
 8011b44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011b46:	f7ff fc95 	bl	8011474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011b4a:	f001 f82b 	bl	8012ba4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011b4e:	f7ff fc5d 	bl	801140c <vPortEnterCritical>
 8011b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b58:	b25b      	sxtb	r3, r3
 8011b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b5e:	d103      	bne.n	8011b68 <xQueueGenericSend+0x17c>
 8011b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b62:	2200      	movs	r2, #0
 8011b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011b6e:	b25b      	sxtb	r3, r3
 8011b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b74:	d103      	bne.n	8011b7e <xQueueGenericSend+0x192>
 8011b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b78:	2200      	movs	r2, #0
 8011b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011b7e:	f7ff fc79 	bl	8011474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011b82:	1d3a      	adds	r2, r7, #4
 8011b84:	f107 0314 	add.w	r3, r7, #20
 8011b88:	4611      	mov	r1, r2
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f001 fab4 	bl	80130f8 <xTaskCheckForTimeOut>
 8011b90:	4603      	mov	r3, r0
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d124      	bne.n	8011be0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011b96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b98:	f000 fd19 	bl	80125ce <prvIsQueueFull>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d018      	beq.n	8011bd4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba4:	3310      	adds	r3, #16
 8011ba6:	687a      	ldr	r2, [r7, #4]
 8011ba8:	4611      	mov	r1, r2
 8011baa:	4618      	mov	r0, r3
 8011bac:	f001 f9d4 	bl	8012f58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011bb2:	f000 fca4 	bl	80124fe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011bb6:	f001 f803 	bl	8012bc0 <xTaskResumeAll>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	f47f af7c 	bne.w	8011aba <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8011bc2:	4b0c      	ldr	r3, [pc, #48]	; (8011bf4 <xQueueGenericSend+0x208>)
 8011bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bc8:	601a      	str	r2, [r3, #0]
 8011bca:	f3bf 8f4f 	dsb	sy
 8011bce:	f3bf 8f6f 	isb	sy
 8011bd2:	e772      	b.n	8011aba <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011bd6:	f000 fc92 	bl	80124fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011bda:	f000 fff1 	bl	8012bc0 <xTaskResumeAll>
 8011bde:	e76c      	b.n	8011aba <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011be2:	f000 fc8c 	bl	80124fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011be6:	f000 ffeb 	bl	8012bc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011bea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3738      	adds	r7, #56	; 0x38
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}
 8011bf4:	e000ed04 	.word	0xe000ed04

08011bf8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b08e      	sub	sp, #56	; 0x38
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	60f8      	str	r0, [r7, #12]
 8011c00:	60b9      	str	r1, [r7, #8]
 8011c02:	607a      	str	r2, [r7, #4]
 8011c04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d10c      	bne.n	8011c2a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8011c10:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011c14:	b672      	cpsid	i
 8011c16:	f383 8811 	msr	BASEPRI, r3
 8011c1a:	f3bf 8f6f 	isb	sy
 8011c1e:	f3bf 8f4f 	dsb	sy
 8011c22:	b662      	cpsie	i
 8011c24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011c26:	bf00      	nop
 8011c28:	e7fe      	b.n	8011c28 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d103      	bne.n	8011c38 <xQueueGenericSendFromISR+0x40>
 8011c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d101      	bne.n	8011c3c <xQueueGenericSendFromISR+0x44>
 8011c38:	2301      	movs	r3, #1
 8011c3a:	e000      	b.n	8011c3e <xQueueGenericSendFromISR+0x46>
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d10c      	bne.n	8011c5c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8011c42:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011c46:	b672      	cpsid	i
 8011c48:	f383 8811 	msr	BASEPRI, r3
 8011c4c:	f3bf 8f6f 	isb	sy
 8011c50:	f3bf 8f4f 	dsb	sy
 8011c54:	b662      	cpsie	i
 8011c56:	623b      	str	r3, [r7, #32]
}
 8011c58:	bf00      	nop
 8011c5a:	e7fe      	b.n	8011c5a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	2b02      	cmp	r3, #2
 8011c60:	d103      	bne.n	8011c6a <xQueueGenericSendFromISR+0x72>
 8011c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c66:	2b01      	cmp	r3, #1
 8011c68:	d101      	bne.n	8011c6e <xQueueGenericSendFromISR+0x76>
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	e000      	b.n	8011c70 <xQueueGenericSendFromISR+0x78>
 8011c6e:	2300      	movs	r3, #0
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d10c      	bne.n	8011c8e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8011c74:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011c78:	b672      	cpsid	i
 8011c7a:	f383 8811 	msr	BASEPRI, r3
 8011c7e:	f3bf 8f6f 	isb	sy
 8011c82:	f3bf 8f4f 	dsb	sy
 8011c86:	b662      	cpsie	i
 8011c88:	61fb      	str	r3, [r7, #28]
}
 8011c8a:	bf00      	nop
 8011c8c:	e7fe      	b.n	8011c8c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011c8e:	f7ff fca5 	bl	80115dc <vPortValidateInterruptPriority>
	__asm volatile
 8011c92:	f3ef 8211 	mrs	r2, BASEPRI
 8011c96:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011c9a:	b672      	cpsid	i
 8011c9c:	f383 8811 	msr	BASEPRI, r3
 8011ca0:	f3bf 8f6f 	isb	sy
 8011ca4:	f3bf 8f4f 	dsb	sy
 8011ca8:	b662      	cpsie	i
 8011caa:	61ba      	str	r2, [r7, #24]
 8011cac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011cae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d302      	bcc.n	8011cc4 <xQueueGenericSendFromISR+0xcc>
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	2b02      	cmp	r3, #2
 8011cc2:	d12c      	bne.n	8011d1e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011cce:	683a      	ldr	r2, [r7, #0]
 8011cd0:	68b9      	ldr	r1, [r7, #8]
 8011cd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cd4:	f000 fb83 	bl	80123de <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011cd8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ce0:	d112      	bne.n	8011d08 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d016      	beq.n	8011d18 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cec:	3324      	adds	r3, #36	; 0x24
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f001 f986 	bl	8013000 <xTaskRemoveFromEventList>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d00e      	beq.n	8011d18 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d00b      	beq.n	8011d18 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2201      	movs	r2, #1
 8011d04:	601a      	str	r2, [r3, #0]
 8011d06:	e007      	b.n	8011d18 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011d08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	b2db      	uxtb	r3, r3
 8011d10:	b25a      	sxtb	r2, r3
 8011d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011d18:	2301      	movs	r3, #1
 8011d1a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011d1c:	e001      	b.n	8011d22 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	637b      	str	r3, [r7, #52]	; 0x34
 8011d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d24:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	f383 8811 	msr	BASEPRI, r3
}
 8011d2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011d30:	4618      	mov	r0, r3
 8011d32:	3738      	adds	r7, #56	; 0x38
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b08e      	sub	sp, #56	; 0x38
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d10c      	bne.n	8011d66 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8011d4c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011d50:	b672      	cpsid	i
 8011d52:	f383 8811 	msr	BASEPRI, r3
 8011d56:	f3bf 8f6f 	isb	sy
 8011d5a:	f3bf 8f4f 	dsb	sy
 8011d5e:	b662      	cpsie	i
 8011d60:	623b      	str	r3, [r7, #32]
}
 8011d62:	bf00      	nop
 8011d64:	e7fe      	b.n	8011d64 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d00c      	beq.n	8011d88 <xQueueGiveFromISR+0x50>
	__asm volatile
 8011d6e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011d72:	b672      	cpsid	i
 8011d74:	f383 8811 	msr	BASEPRI, r3
 8011d78:	f3bf 8f6f 	isb	sy
 8011d7c:	f3bf 8f4f 	dsb	sy
 8011d80:	b662      	cpsie	i
 8011d82:	61fb      	str	r3, [r7, #28]
}
 8011d84:	bf00      	nop
 8011d86:	e7fe      	b.n	8011d86 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d103      	bne.n	8011d98 <xQueueGiveFromISR+0x60>
 8011d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d92:	689b      	ldr	r3, [r3, #8]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d101      	bne.n	8011d9c <xQueueGiveFromISR+0x64>
 8011d98:	2301      	movs	r3, #1
 8011d9a:	e000      	b.n	8011d9e <xQueueGiveFromISR+0x66>
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d10c      	bne.n	8011dbc <xQueueGiveFromISR+0x84>
	__asm volatile
 8011da2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011da6:	b672      	cpsid	i
 8011da8:	f383 8811 	msr	BASEPRI, r3
 8011dac:	f3bf 8f6f 	isb	sy
 8011db0:	f3bf 8f4f 	dsb	sy
 8011db4:	b662      	cpsie	i
 8011db6:	61bb      	str	r3, [r7, #24]
}
 8011db8:	bf00      	nop
 8011dba:	e7fe      	b.n	8011dba <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011dbc:	f7ff fc0e 	bl	80115dc <vPortValidateInterruptPriority>
	__asm volatile
 8011dc0:	f3ef 8211 	mrs	r2, BASEPRI
 8011dc4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011dc8:	b672      	cpsid	i
 8011dca:	f383 8811 	msr	BASEPRI, r3
 8011dce:	f3bf 8f6f 	isb	sy
 8011dd2:	f3bf 8f4f 	dsb	sy
 8011dd6:	b662      	cpsie	i
 8011dd8:	617a      	str	r2, [r7, #20]
 8011dda:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011ddc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011dde:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011de4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d22b      	bcs.n	8011e48 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dfc:	1c5a      	adds	r2, r3, #1
 8011dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e00:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011e02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e0a:	d112      	bne.n	8011e32 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d016      	beq.n	8011e42 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e16:	3324      	adds	r3, #36	; 0x24
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f001 f8f1 	bl	8013000 <xTaskRemoveFromEventList>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d00e      	beq.n	8011e42 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d00b      	beq.n	8011e42 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	2201      	movs	r2, #1
 8011e2e:	601a      	str	r2, [r3, #0]
 8011e30:	e007      	b.n	8011e42 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e36:	3301      	adds	r3, #1
 8011e38:	b2db      	uxtb	r3, r3
 8011e3a:	b25a      	sxtb	r2, r3
 8011e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011e42:	2301      	movs	r3, #1
 8011e44:	637b      	str	r3, [r7, #52]	; 0x34
 8011e46:	e001      	b.n	8011e4c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8011e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	f383 8811 	msr	BASEPRI, r3
}
 8011e56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	3738      	adds	r7, #56	; 0x38
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd80      	pop	{r7, pc}
	...

08011e64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b08c      	sub	sp, #48	; 0x30
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	60f8      	str	r0, [r7, #12]
 8011e6c:	60b9      	str	r1, [r7, #8]
 8011e6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011e70:	2300      	movs	r3, #0
 8011e72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d10c      	bne.n	8011e98 <xQueueReceive+0x34>
	__asm volatile
 8011e7e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011e82:	b672      	cpsid	i
 8011e84:	f383 8811 	msr	BASEPRI, r3
 8011e88:	f3bf 8f6f 	isb	sy
 8011e8c:	f3bf 8f4f 	dsb	sy
 8011e90:	b662      	cpsie	i
 8011e92:	623b      	str	r3, [r7, #32]
}
 8011e94:	bf00      	nop
 8011e96:	e7fe      	b.n	8011e96 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d103      	bne.n	8011ea6 <xQueueReceive+0x42>
 8011e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d101      	bne.n	8011eaa <xQueueReceive+0x46>
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	e000      	b.n	8011eac <xQueueReceive+0x48>
 8011eaa:	2300      	movs	r3, #0
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d10c      	bne.n	8011eca <xQueueReceive+0x66>
	__asm volatile
 8011eb0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011eb4:	b672      	cpsid	i
 8011eb6:	f383 8811 	msr	BASEPRI, r3
 8011eba:	f3bf 8f6f 	isb	sy
 8011ebe:	f3bf 8f4f 	dsb	sy
 8011ec2:	b662      	cpsie	i
 8011ec4:	61fb      	str	r3, [r7, #28]
}
 8011ec6:	bf00      	nop
 8011ec8:	e7fe      	b.n	8011ec8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011eca:	f001 fa5f 	bl	801338c <xTaskGetSchedulerState>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d102      	bne.n	8011eda <xQueueReceive+0x76>
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d101      	bne.n	8011ede <xQueueReceive+0x7a>
 8011eda:	2301      	movs	r3, #1
 8011edc:	e000      	b.n	8011ee0 <xQueueReceive+0x7c>
 8011ede:	2300      	movs	r3, #0
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d10c      	bne.n	8011efe <xQueueReceive+0x9a>
	__asm volatile
 8011ee4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011ee8:	b672      	cpsid	i
 8011eea:	f383 8811 	msr	BASEPRI, r3
 8011eee:	f3bf 8f6f 	isb	sy
 8011ef2:	f3bf 8f4f 	dsb	sy
 8011ef6:	b662      	cpsie	i
 8011ef8:	61bb      	str	r3, [r7, #24]
}
 8011efa:	bf00      	nop
 8011efc:	e7fe      	b.n	8011efc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011efe:	f7ff fa85 	bl	801140c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d01f      	beq.n	8011f4e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011f0e:	68b9      	ldr	r1, [r7, #8]
 8011f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f12:	f000 face 	bl	80124b2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f18:	1e5a      	subs	r2, r3, #1
 8011f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f20:	691b      	ldr	r3, [r3, #16]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d00f      	beq.n	8011f46 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f28:	3310      	adds	r3, #16
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f001 f868 	bl	8013000 <xTaskRemoveFromEventList>
 8011f30:	4603      	mov	r3, r0
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d007      	beq.n	8011f46 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011f36:	4b3d      	ldr	r3, [pc, #244]	; (801202c <xQueueReceive+0x1c8>)
 8011f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f3c:	601a      	str	r2, [r3, #0]
 8011f3e:	f3bf 8f4f 	dsb	sy
 8011f42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011f46:	f7ff fa95 	bl	8011474 <vPortExitCritical>
				return pdPASS;
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	e069      	b.n	8012022 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d103      	bne.n	8011f5c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011f54:	f7ff fa8e 	bl	8011474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	e062      	b.n	8012022 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d106      	bne.n	8011f70 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011f62:	f107 0310 	add.w	r3, r7, #16
 8011f66:	4618      	mov	r0, r3
 8011f68:	f001 f8b0 	bl	80130cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011f6c:	2301      	movs	r3, #1
 8011f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011f70:	f7ff fa80 	bl	8011474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011f74:	f000 fe16 	bl	8012ba4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011f78:	f7ff fa48 	bl	801140c <vPortEnterCritical>
 8011f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f82:	b25b      	sxtb	r3, r3
 8011f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f88:	d103      	bne.n	8011f92 <xQueueReceive+0x12e>
 8011f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f98:	b25b      	sxtb	r3, r3
 8011f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f9e:	d103      	bne.n	8011fa8 <xQueueReceive+0x144>
 8011fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011fa8:	f7ff fa64 	bl	8011474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011fac:	1d3a      	adds	r2, r7, #4
 8011fae:	f107 0310 	add.w	r3, r7, #16
 8011fb2:	4611      	mov	r1, r2
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f001 f89f 	bl	80130f8 <xTaskCheckForTimeOut>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d123      	bne.n	8012008 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011fc2:	f000 faee 	bl	80125a2 <prvIsQueueEmpty>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d017      	beq.n	8011ffc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fce:	3324      	adds	r3, #36	; 0x24
 8011fd0:	687a      	ldr	r2, [r7, #4]
 8011fd2:	4611      	mov	r1, r2
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f000 ffbf 	bl	8012f58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011fdc:	f000 fa8f 	bl	80124fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011fe0:	f000 fdee 	bl	8012bc0 <xTaskResumeAll>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d189      	bne.n	8011efe <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8011fea:	4b10      	ldr	r3, [pc, #64]	; (801202c <xQueueReceive+0x1c8>)
 8011fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ff0:	601a      	str	r2, [r3, #0]
 8011ff2:	f3bf 8f4f 	dsb	sy
 8011ff6:	f3bf 8f6f 	isb	sy
 8011ffa:	e780      	b.n	8011efe <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ffe:	f000 fa7e 	bl	80124fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012002:	f000 fddd 	bl	8012bc0 <xTaskResumeAll>
 8012006:	e77a      	b.n	8011efe <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801200a:	f000 fa78 	bl	80124fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801200e:	f000 fdd7 	bl	8012bc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012014:	f000 fac5 	bl	80125a2 <prvIsQueueEmpty>
 8012018:	4603      	mov	r3, r0
 801201a:	2b00      	cmp	r3, #0
 801201c:	f43f af6f 	beq.w	8011efe <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012020:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012022:	4618      	mov	r0, r3
 8012024:	3730      	adds	r7, #48	; 0x30
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
 801202a:	bf00      	nop
 801202c:	e000ed04 	.word	0xe000ed04

08012030 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b08e      	sub	sp, #56	; 0x38
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
 8012038:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801203a:	2300      	movs	r3, #0
 801203c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012042:	2300      	movs	r3, #0
 8012044:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012048:	2b00      	cmp	r3, #0
 801204a:	d10c      	bne.n	8012066 <xQueueSemaphoreTake+0x36>
	__asm volatile
 801204c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012050:	b672      	cpsid	i
 8012052:	f383 8811 	msr	BASEPRI, r3
 8012056:	f3bf 8f6f 	isb	sy
 801205a:	f3bf 8f4f 	dsb	sy
 801205e:	b662      	cpsie	i
 8012060:	623b      	str	r3, [r7, #32]
}
 8012062:	bf00      	nop
 8012064:	e7fe      	b.n	8012064 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801206a:	2b00      	cmp	r3, #0
 801206c:	d00c      	beq.n	8012088 <xQueueSemaphoreTake+0x58>
	__asm volatile
 801206e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012072:	b672      	cpsid	i
 8012074:	f383 8811 	msr	BASEPRI, r3
 8012078:	f3bf 8f6f 	isb	sy
 801207c:	f3bf 8f4f 	dsb	sy
 8012080:	b662      	cpsie	i
 8012082:	61fb      	str	r3, [r7, #28]
}
 8012084:	bf00      	nop
 8012086:	e7fe      	b.n	8012086 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012088:	f001 f980 	bl	801338c <xTaskGetSchedulerState>
 801208c:	4603      	mov	r3, r0
 801208e:	2b00      	cmp	r3, #0
 8012090:	d102      	bne.n	8012098 <xQueueSemaphoreTake+0x68>
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d101      	bne.n	801209c <xQueueSemaphoreTake+0x6c>
 8012098:	2301      	movs	r3, #1
 801209a:	e000      	b.n	801209e <xQueueSemaphoreTake+0x6e>
 801209c:	2300      	movs	r3, #0
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d10c      	bne.n	80120bc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80120a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80120a6:	b672      	cpsid	i
 80120a8:	f383 8811 	msr	BASEPRI, r3
 80120ac:	f3bf 8f6f 	isb	sy
 80120b0:	f3bf 8f4f 	dsb	sy
 80120b4:	b662      	cpsie	i
 80120b6:	61bb      	str	r3, [r7, #24]
}
 80120b8:	bf00      	nop
 80120ba:	e7fe      	b.n	80120ba <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80120bc:	f7ff f9a6 	bl	801140c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80120c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120c4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80120c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d024      	beq.n	8012116 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80120cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ce:	1e5a      	subs	r2, r3, #1
 80120d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80120d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d104      	bne.n	80120e6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80120dc:	f001 fad4 	bl	8013688 <pvTaskIncrementMutexHeldCount>
 80120e0:	4602      	mov	r2, r0
 80120e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80120e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e8:	691b      	ldr	r3, [r3, #16]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d00f      	beq.n	801210e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80120ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f0:	3310      	adds	r3, #16
 80120f2:	4618      	mov	r0, r3
 80120f4:	f000 ff84 	bl	8013000 <xTaskRemoveFromEventList>
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d007      	beq.n	801210e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80120fe:	4b55      	ldr	r3, [pc, #340]	; (8012254 <xQueueSemaphoreTake+0x224>)
 8012100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012104:	601a      	str	r2, [r3, #0]
 8012106:	f3bf 8f4f 	dsb	sy
 801210a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801210e:	f7ff f9b1 	bl	8011474 <vPortExitCritical>
				return pdPASS;
 8012112:	2301      	movs	r3, #1
 8012114:	e099      	b.n	801224a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d113      	bne.n	8012144 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801211c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801211e:	2b00      	cmp	r3, #0
 8012120:	d00c      	beq.n	801213c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8012122:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012126:	b672      	cpsid	i
 8012128:	f383 8811 	msr	BASEPRI, r3
 801212c:	f3bf 8f6f 	isb	sy
 8012130:	f3bf 8f4f 	dsb	sy
 8012134:	b662      	cpsie	i
 8012136:	617b      	str	r3, [r7, #20]
}
 8012138:	bf00      	nop
 801213a:	e7fe      	b.n	801213a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801213c:	f7ff f99a 	bl	8011474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012140:	2300      	movs	r3, #0
 8012142:	e082      	b.n	801224a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012146:	2b00      	cmp	r3, #0
 8012148:	d106      	bne.n	8012158 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801214a:	f107 030c 	add.w	r3, r7, #12
 801214e:	4618      	mov	r0, r3
 8012150:	f000 ffbc 	bl	80130cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012154:	2301      	movs	r3, #1
 8012156:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012158:	f7ff f98c 	bl	8011474 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801215c:	f000 fd22 	bl	8012ba4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012160:	f7ff f954 	bl	801140c <vPortEnterCritical>
 8012164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801216a:	b25b      	sxtb	r3, r3
 801216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012170:	d103      	bne.n	801217a <xQueueSemaphoreTake+0x14a>
 8012172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012174:	2200      	movs	r2, #0
 8012176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801217c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012180:	b25b      	sxtb	r3, r3
 8012182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012186:	d103      	bne.n	8012190 <xQueueSemaphoreTake+0x160>
 8012188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801218a:	2200      	movs	r2, #0
 801218c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012190:	f7ff f970 	bl	8011474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012194:	463a      	mov	r2, r7
 8012196:	f107 030c 	add.w	r3, r7, #12
 801219a:	4611      	mov	r1, r2
 801219c:	4618      	mov	r0, r3
 801219e:	f000 ffab 	bl	80130f8 <xTaskCheckForTimeOut>
 80121a2:	4603      	mov	r3, r0
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d132      	bne.n	801220e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80121a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121aa:	f000 f9fa 	bl	80125a2 <prvIsQueueEmpty>
 80121ae:	4603      	mov	r3, r0
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d026      	beq.n	8012202 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80121b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d109      	bne.n	80121d0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80121bc:	f7ff f926 	bl	801140c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80121c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c2:	689b      	ldr	r3, [r3, #8]
 80121c4:	4618      	mov	r0, r3
 80121c6:	f001 f8ff 	bl	80133c8 <xTaskPriorityInherit>
 80121ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80121cc:	f7ff f952 	bl	8011474 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80121d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121d2:	3324      	adds	r3, #36	; 0x24
 80121d4:	683a      	ldr	r2, [r7, #0]
 80121d6:	4611      	mov	r1, r2
 80121d8:	4618      	mov	r0, r3
 80121da:	f000 febd 	bl	8012f58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80121de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121e0:	f000 f98d 	bl	80124fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80121e4:	f000 fcec 	bl	8012bc0 <xTaskResumeAll>
 80121e8:	4603      	mov	r3, r0
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	f47f af66 	bne.w	80120bc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80121f0:	4b18      	ldr	r3, [pc, #96]	; (8012254 <xQueueSemaphoreTake+0x224>)
 80121f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121f6:	601a      	str	r2, [r3, #0]
 80121f8:	f3bf 8f4f 	dsb	sy
 80121fc:	f3bf 8f6f 	isb	sy
 8012200:	e75c      	b.n	80120bc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012204:	f000 f97b 	bl	80124fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012208:	f000 fcda 	bl	8012bc0 <xTaskResumeAll>
 801220c:	e756      	b.n	80120bc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801220e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012210:	f000 f975 	bl	80124fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012214:	f000 fcd4 	bl	8012bc0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012218:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801221a:	f000 f9c2 	bl	80125a2 <prvIsQueueEmpty>
 801221e:	4603      	mov	r3, r0
 8012220:	2b00      	cmp	r3, #0
 8012222:	f43f af4b 	beq.w	80120bc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012228:	2b00      	cmp	r3, #0
 801222a:	d00d      	beq.n	8012248 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 801222c:	f7ff f8ee 	bl	801140c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012230:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012232:	f000 f8bc 	bl	80123ae <prvGetDisinheritPriorityAfterTimeout>
 8012236:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801223a:	689b      	ldr	r3, [r3, #8]
 801223c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801223e:	4618      	mov	r0, r3
 8012240:	f001 f99c 	bl	801357c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012244:	f7ff f916 	bl	8011474 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012248:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801224a:	4618      	mov	r0, r3
 801224c:	3738      	adds	r7, #56	; 0x38
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}
 8012252:	bf00      	nop
 8012254:	e000ed04 	.word	0xe000ed04

08012258 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b08e      	sub	sp, #56	; 0x38
 801225c:	af00      	add	r7, sp, #0
 801225e:	60f8      	str	r0, [r7, #12]
 8012260:	60b9      	str	r1, [r7, #8]
 8012262:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801226a:	2b00      	cmp	r3, #0
 801226c:	d10c      	bne.n	8012288 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801226e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012272:	b672      	cpsid	i
 8012274:	f383 8811 	msr	BASEPRI, r3
 8012278:	f3bf 8f6f 	isb	sy
 801227c:	f3bf 8f4f 	dsb	sy
 8012280:	b662      	cpsie	i
 8012282:	623b      	str	r3, [r7, #32]
}
 8012284:	bf00      	nop
 8012286:	e7fe      	b.n	8012286 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012288:	68bb      	ldr	r3, [r7, #8]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d103      	bne.n	8012296 <xQueueReceiveFromISR+0x3e>
 801228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012292:	2b00      	cmp	r3, #0
 8012294:	d101      	bne.n	801229a <xQueueReceiveFromISR+0x42>
 8012296:	2301      	movs	r3, #1
 8012298:	e000      	b.n	801229c <xQueueReceiveFromISR+0x44>
 801229a:	2300      	movs	r3, #0
 801229c:	2b00      	cmp	r3, #0
 801229e:	d10c      	bne.n	80122ba <xQueueReceiveFromISR+0x62>
	__asm volatile
 80122a0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122a4:	b672      	cpsid	i
 80122a6:	f383 8811 	msr	BASEPRI, r3
 80122aa:	f3bf 8f6f 	isb	sy
 80122ae:	f3bf 8f4f 	dsb	sy
 80122b2:	b662      	cpsie	i
 80122b4:	61fb      	str	r3, [r7, #28]
}
 80122b6:	bf00      	nop
 80122b8:	e7fe      	b.n	80122b8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80122ba:	f7ff f98f 	bl	80115dc <vPortValidateInterruptPriority>
	__asm volatile
 80122be:	f3ef 8211 	mrs	r2, BASEPRI
 80122c2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122c6:	b672      	cpsid	i
 80122c8:	f383 8811 	msr	BASEPRI, r3
 80122cc:	f3bf 8f6f 	isb	sy
 80122d0:	f3bf 8f4f 	dsb	sy
 80122d4:	b662      	cpsie	i
 80122d6:	61ba      	str	r2, [r7, #24]
 80122d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80122da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80122dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80122de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80122e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d02f      	beq.n	801234a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80122ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80122f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80122f4:	68b9      	ldr	r1, [r7, #8]
 80122f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122f8:	f000 f8db 	bl	80124b2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80122fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122fe:	1e5a      	subs	r2, r3, #1
 8012300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012302:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012304:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012308:	f1b3 3fff 	cmp.w	r3, #4294967295
 801230c:	d112      	bne.n	8012334 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012310:	691b      	ldr	r3, [r3, #16]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d016      	beq.n	8012344 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012318:	3310      	adds	r3, #16
 801231a:	4618      	mov	r0, r3
 801231c:	f000 fe70 	bl	8013000 <xTaskRemoveFromEventList>
 8012320:	4603      	mov	r3, r0
 8012322:	2b00      	cmp	r3, #0
 8012324:	d00e      	beq.n	8012344 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d00b      	beq.n	8012344 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2201      	movs	r2, #1
 8012330:	601a      	str	r2, [r3, #0]
 8012332:	e007      	b.n	8012344 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012338:	3301      	adds	r3, #1
 801233a:	b2db      	uxtb	r3, r3
 801233c:	b25a      	sxtb	r2, r3
 801233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012344:	2301      	movs	r3, #1
 8012346:	637b      	str	r3, [r7, #52]	; 0x34
 8012348:	e001      	b.n	801234e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801234a:	2300      	movs	r3, #0
 801234c:	637b      	str	r3, [r7, #52]	; 0x34
 801234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012350:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	f383 8811 	msr	BASEPRI, r3
}
 8012358:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801235a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801235c:	4618      	mov	r0, r3
 801235e:	3738      	adds	r7, #56	; 0x38
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}

08012364 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b084      	sub	sp, #16
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d10c      	bne.n	8012390 <vQueueDelete+0x2c>
	__asm volatile
 8012376:	f04f 0330 	mov.w	r3, #48	; 0x30
 801237a:	b672      	cpsid	i
 801237c:	f383 8811 	msr	BASEPRI, r3
 8012380:	f3bf 8f6f 	isb	sy
 8012384:	f3bf 8f4f 	dsb	sy
 8012388:	b662      	cpsie	i
 801238a:	60bb      	str	r3, [r7, #8]
}
 801238c:	bf00      	nop
 801238e:	e7fe      	b.n	801238e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012390:	68f8      	ldr	r0, [r7, #12]
 8012392:	f000 f95f 	bl	8012654 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801239c:	2b00      	cmp	r3, #0
 801239e:	d102      	bne.n	80123a6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80123a0:	68f8      	ldr	r0, [r7, #12]
 80123a2:	f7fe fd59 	bl	8010e58 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80123a6:	bf00      	nop
 80123a8:	3710      	adds	r7, #16
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}

080123ae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80123ae:	b480      	push	{r7}
 80123b0:	b085      	sub	sp, #20
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d006      	beq.n	80123cc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80123c8:	60fb      	str	r3, [r7, #12]
 80123ca:	e001      	b.n	80123d0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80123cc:	2300      	movs	r3, #0
 80123ce:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80123d0:	68fb      	ldr	r3, [r7, #12]
	}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3714      	adds	r7, #20
 80123d6:	46bd      	mov	sp, r7
 80123d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123dc:	4770      	bx	lr

080123de <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80123de:	b580      	push	{r7, lr}
 80123e0:	b086      	sub	sp, #24
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	60f8      	str	r0, [r7, #12]
 80123e6:	60b9      	str	r1, [r7, #8]
 80123e8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80123ea:	2300      	movs	r3, #0
 80123ec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123f2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d10d      	bne.n	8012418 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d14d      	bne.n	80124a0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	689b      	ldr	r3, [r3, #8]
 8012408:	4618      	mov	r0, r3
 801240a:	f001 f845 	bl	8013498 <xTaskPriorityDisinherit>
 801240e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	2200      	movs	r2, #0
 8012414:	609a      	str	r2, [r3, #8]
 8012416:	e043      	b.n	80124a0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d119      	bne.n	8012452 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	6858      	ldr	r0, [r3, #4]
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012426:	461a      	mov	r2, r3
 8012428:	68b9      	ldr	r1, [r7, #8]
 801242a:	f012 fd69 	bl	8024f00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	685a      	ldr	r2, [r3, #4]
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012436:	441a      	add	r2, r3
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	685a      	ldr	r2, [r3, #4]
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	689b      	ldr	r3, [r3, #8]
 8012444:	429a      	cmp	r2, r3
 8012446:	d32b      	bcc.n	80124a0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	681a      	ldr	r2, [r3, #0]
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	605a      	str	r2, [r3, #4]
 8012450:	e026      	b.n	80124a0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	68d8      	ldr	r0, [r3, #12]
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801245a:	461a      	mov	r2, r3
 801245c:	68b9      	ldr	r1, [r7, #8]
 801245e:	f012 fd4f 	bl	8024f00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	68da      	ldr	r2, [r3, #12]
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801246a:	425b      	negs	r3, r3
 801246c:	441a      	add	r2, r3
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	68da      	ldr	r2, [r3, #12]
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	429a      	cmp	r2, r3
 801247c:	d207      	bcs.n	801248e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	689a      	ldr	r2, [r3, #8]
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012486:	425b      	negs	r3, r3
 8012488:	441a      	add	r2, r3
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	2b02      	cmp	r3, #2
 8012492:	d105      	bne.n	80124a0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012494:	693b      	ldr	r3, [r7, #16]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d002      	beq.n	80124a0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801249a:	693b      	ldr	r3, [r7, #16]
 801249c:	3b01      	subs	r3, #1
 801249e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80124a0:	693b      	ldr	r3, [r7, #16]
 80124a2:	1c5a      	adds	r2, r3, #1
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80124a8:	697b      	ldr	r3, [r7, #20]
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	3718      	adds	r7, #24
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}

080124b2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80124b2:	b580      	push	{r7, lr}
 80124b4:	b082      	sub	sp, #8
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	6078      	str	r0, [r7, #4]
 80124ba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d018      	beq.n	80124f6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	68da      	ldr	r2, [r3, #12]
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124cc:	441a      	add	r2, r3
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	68da      	ldr	r2, [r3, #12]
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	689b      	ldr	r3, [r3, #8]
 80124da:	429a      	cmp	r2, r3
 80124dc:	d303      	bcc.n	80124e6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681a      	ldr	r2, [r3, #0]
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	68d9      	ldr	r1, [r3, #12]
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124ee:	461a      	mov	r2, r3
 80124f0:	6838      	ldr	r0, [r7, #0]
 80124f2:	f012 fd05 	bl	8024f00 <memcpy>
	}
}
 80124f6:	bf00      	nop
 80124f8:	3708      	adds	r7, #8
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80124fe:	b580      	push	{r7, lr}
 8012500:	b084      	sub	sp, #16
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012506:	f7fe ff81 	bl	801140c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012510:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012512:	e011      	b.n	8012538 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012518:	2b00      	cmp	r3, #0
 801251a:	d012      	beq.n	8012542 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	3324      	adds	r3, #36	; 0x24
 8012520:	4618      	mov	r0, r3
 8012522:	f000 fd6d 	bl	8013000 <xTaskRemoveFromEventList>
 8012526:	4603      	mov	r3, r0
 8012528:	2b00      	cmp	r3, #0
 801252a:	d001      	beq.n	8012530 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801252c:	f000 fe4a 	bl	80131c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012530:	7bfb      	ldrb	r3, [r7, #15]
 8012532:	3b01      	subs	r3, #1
 8012534:	b2db      	uxtb	r3, r3
 8012536:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801253c:	2b00      	cmp	r3, #0
 801253e:	dce9      	bgt.n	8012514 <prvUnlockQueue+0x16>
 8012540:	e000      	b.n	8012544 <prvUnlockQueue+0x46>
					break;
 8012542:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	22ff      	movs	r2, #255	; 0xff
 8012548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801254c:	f7fe ff92 	bl	8011474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012550:	f7fe ff5c 	bl	801140c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801255a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801255c:	e011      	b.n	8012582 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	691b      	ldr	r3, [r3, #16]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d012      	beq.n	801258c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	3310      	adds	r3, #16
 801256a:	4618      	mov	r0, r3
 801256c:	f000 fd48 	bl	8013000 <xTaskRemoveFromEventList>
 8012570:	4603      	mov	r3, r0
 8012572:	2b00      	cmp	r3, #0
 8012574:	d001      	beq.n	801257a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012576:	f000 fe25 	bl	80131c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801257a:	7bbb      	ldrb	r3, [r7, #14]
 801257c:	3b01      	subs	r3, #1
 801257e:	b2db      	uxtb	r3, r3
 8012580:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012582:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012586:	2b00      	cmp	r3, #0
 8012588:	dce9      	bgt.n	801255e <prvUnlockQueue+0x60>
 801258a:	e000      	b.n	801258e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801258c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	22ff      	movs	r2, #255	; 0xff
 8012592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012596:	f7fe ff6d 	bl	8011474 <vPortExitCritical>
}
 801259a:	bf00      	nop
 801259c:	3710      	adds	r7, #16
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}

080125a2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80125a2:	b580      	push	{r7, lr}
 80125a4:	b084      	sub	sp, #16
 80125a6:	af00      	add	r7, sp, #0
 80125a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80125aa:	f7fe ff2f 	bl	801140c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d102      	bne.n	80125bc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80125b6:	2301      	movs	r3, #1
 80125b8:	60fb      	str	r3, [r7, #12]
 80125ba:	e001      	b.n	80125c0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80125bc:	2300      	movs	r3, #0
 80125be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80125c0:	f7fe ff58 	bl	8011474 <vPortExitCritical>

	return xReturn;
 80125c4:	68fb      	ldr	r3, [r7, #12]
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	3710      	adds	r7, #16
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}

080125ce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80125ce:	b580      	push	{r7, lr}
 80125d0:	b084      	sub	sp, #16
 80125d2:	af00      	add	r7, sp, #0
 80125d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80125d6:	f7fe ff19 	bl	801140c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d102      	bne.n	80125ec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80125e6:	2301      	movs	r3, #1
 80125e8:	60fb      	str	r3, [r7, #12]
 80125ea:	e001      	b.n	80125f0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80125ec:	2300      	movs	r3, #0
 80125ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80125f0:	f7fe ff40 	bl	8011474 <vPortExitCritical>

	return xReturn;
 80125f4:	68fb      	ldr	r3, [r7, #12]
}
 80125f6:	4618      	mov	r0, r3
 80125f8:	3710      	adds	r7, #16
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
	...

08012600 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012600:	b480      	push	{r7}
 8012602:	b085      	sub	sp, #20
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
 8012608:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801260a:	2300      	movs	r3, #0
 801260c:	60fb      	str	r3, [r7, #12]
 801260e:	e014      	b.n	801263a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012610:	4a0f      	ldr	r2, [pc, #60]	; (8012650 <vQueueAddToRegistry+0x50>)
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d10b      	bne.n	8012634 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801261c:	490c      	ldr	r1, [pc, #48]	; (8012650 <vQueueAddToRegistry+0x50>)
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	683a      	ldr	r2, [r7, #0]
 8012622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012626:	4a0a      	ldr	r2, [pc, #40]	; (8012650 <vQueueAddToRegistry+0x50>)
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	00db      	lsls	r3, r3, #3
 801262c:	4413      	add	r3, r2
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012632:	e006      	b.n	8012642 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	3301      	adds	r3, #1
 8012638:	60fb      	str	r3, [r7, #12]
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	2b07      	cmp	r3, #7
 801263e:	d9e7      	bls.n	8012610 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012640:	bf00      	nop
 8012642:	bf00      	nop
 8012644:	3714      	adds	r7, #20
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr
 801264e:	bf00      	nop
 8012650:	20056d80 	.word	0x20056d80

08012654 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012654:	b480      	push	{r7}
 8012656:	b085      	sub	sp, #20
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801265c:	2300      	movs	r3, #0
 801265e:	60fb      	str	r3, [r7, #12]
 8012660:	e016      	b.n	8012690 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012662:	4a10      	ldr	r2, [pc, #64]	; (80126a4 <vQueueUnregisterQueue+0x50>)
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	00db      	lsls	r3, r3, #3
 8012668:	4413      	add	r3, r2
 801266a:	685b      	ldr	r3, [r3, #4]
 801266c:	687a      	ldr	r2, [r7, #4]
 801266e:	429a      	cmp	r2, r3
 8012670:	d10b      	bne.n	801268a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012672:	4a0c      	ldr	r2, [pc, #48]	; (80126a4 <vQueueUnregisterQueue+0x50>)
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	2100      	movs	r1, #0
 8012678:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801267c:	4a09      	ldr	r2, [pc, #36]	; (80126a4 <vQueueUnregisterQueue+0x50>)
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	00db      	lsls	r3, r3, #3
 8012682:	4413      	add	r3, r2
 8012684:	2200      	movs	r2, #0
 8012686:	605a      	str	r2, [r3, #4]
				break;
 8012688:	e006      	b.n	8012698 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	3301      	adds	r3, #1
 801268e:	60fb      	str	r3, [r7, #12]
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	2b07      	cmp	r3, #7
 8012694:	d9e5      	bls.n	8012662 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012696:	bf00      	nop
 8012698:	bf00      	nop
 801269a:	3714      	adds	r7, #20
 801269c:	46bd      	mov	sp, r7
 801269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a2:	4770      	bx	lr
 80126a4:	20056d80 	.word	0x20056d80

080126a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b086      	sub	sp, #24
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	60f8      	str	r0, [r7, #12]
 80126b0:	60b9      	str	r1, [r7, #8]
 80126b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80126b8:	f7fe fea8 	bl	801140c <vPortEnterCritical>
 80126bc:	697b      	ldr	r3, [r7, #20]
 80126be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80126c2:	b25b      	sxtb	r3, r3
 80126c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126c8:	d103      	bne.n	80126d2 <vQueueWaitForMessageRestricted+0x2a>
 80126ca:	697b      	ldr	r3, [r7, #20]
 80126cc:	2200      	movs	r2, #0
 80126ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80126d8:	b25b      	sxtb	r3, r3
 80126da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126de:	d103      	bne.n	80126e8 <vQueueWaitForMessageRestricted+0x40>
 80126e0:	697b      	ldr	r3, [r7, #20]
 80126e2:	2200      	movs	r2, #0
 80126e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80126e8:	f7fe fec4 	bl	8011474 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d106      	bne.n	8012702 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	3324      	adds	r3, #36	; 0x24
 80126f8:	687a      	ldr	r2, [r7, #4]
 80126fa:	68b9      	ldr	r1, [r7, #8]
 80126fc:	4618      	mov	r0, r3
 80126fe:	f000 fc51 	bl	8012fa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012702:	6978      	ldr	r0, [r7, #20]
 8012704:	f7ff fefb 	bl	80124fe <prvUnlockQueue>
	}
 8012708:	bf00      	nop
 801270a:	3718      	adds	r7, #24
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}

08012710 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012710:	b580      	push	{r7, lr}
 8012712:	b08e      	sub	sp, #56	; 0x38
 8012714:	af04      	add	r7, sp, #16
 8012716:	60f8      	str	r0, [r7, #12]
 8012718:	60b9      	str	r1, [r7, #8]
 801271a:	607a      	str	r2, [r7, #4]
 801271c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801271e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012720:	2b00      	cmp	r3, #0
 8012722:	d10c      	bne.n	801273e <xTaskCreateStatic+0x2e>
	__asm volatile
 8012724:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012728:	b672      	cpsid	i
 801272a:	f383 8811 	msr	BASEPRI, r3
 801272e:	f3bf 8f6f 	isb	sy
 8012732:	f3bf 8f4f 	dsb	sy
 8012736:	b662      	cpsie	i
 8012738:	623b      	str	r3, [r7, #32]
}
 801273a:	bf00      	nop
 801273c:	e7fe      	b.n	801273c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012740:	2b00      	cmp	r3, #0
 8012742:	d10c      	bne.n	801275e <xTaskCreateStatic+0x4e>
	__asm volatile
 8012744:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012748:	b672      	cpsid	i
 801274a:	f383 8811 	msr	BASEPRI, r3
 801274e:	f3bf 8f6f 	isb	sy
 8012752:	f3bf 8f4f 	dsb	sy
 8012756:	b662      	cpsie	i
 8012758:	61fb      	str	r3, [r7, #28]
}
 801275a:	bf00      	nop
 801275c:	e7fe      	b.n	801275c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801275e:	235c      	movs	r3, #92	; 0x5c
 8012760:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012762:	693b      	ldr	r3, [r7, #16]
 8012764:	2b5c      	cmp	r3, #92	; 0x5c
 8012766:	d00c      	beq.n	8012782 <xTaskCreateStatic+0x72>
	__asm volatile
 8012768:	f04f 0330 	mov.w	r3, #48	; 0x30
 801276c:	b672      	cpsid	i
 801276e:	f383 8811 	msr	BASEPRI, r3
 8012772:	f3bf 8f6f 	isb	sy
 8012776:	f3bf 8f4f 	dsb	sy
 801277a:	b662      	cpsie	i
 801277c:	61bb      	str	r3, [r7, #24]
}
 801277e:	bf00      	nop
 8012780:	e7fe      	b.n	8012780 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012782:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012786:	2b00      	cmp	r3, #0
 8012788:	d01e      	beq.n	80127c8 <xTaskCreateStatic+0xb8>
 801278a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801278c:	2b00      	cmp	r3, #0
 801278e:	d01b      	beq.n	80127c8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012792:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012798:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279c:	2202      	movs	r2, #2
 801279e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80127a2:	2300      	movs	r3, #0
 80127a4:	9303      	str	r3, [sp, #12]
 80127a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a8:	9302      	str	r3, [sp, #8]
 80127aa:	f107 0314 	add.w	r3, r7, #20
 80127ae:	9301      	str	r3, [sp, #4]
 80127b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b2:	9300      	str	r3, [sp, #0]
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	687a      	ldr	r2, [r7, #4]
 80127b8:	68b9      	ldr	r1, [r7, #8]
 80127ba:	68f8      	ldr	r0, [r7, #12]
 80127bc:	f000 f850 	bl	8012860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80127c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127c2:	f000 f8df 	bl	8012984 <prvAddNewTaskToReadyList>
 80127c6:	e001      	b.n	80127cc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80127c8:	2300      	movs	r3, #0
 80127ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80127cc:	697b      	ldr	r3, [r7, #20]
	}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3728      	adds	r7, #40	; 0x28
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}

080127d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80127d6:	b580      	push	{r7, lr}
 80127d8:	b08c      	sub	sp, #48	; 0x30
 80127da:	af04      	add	r7, sp, #16
 80127dc:	60f8      	str	r0, [r7, #12]
 80127de:	60b9      	str	r1, [r7, #8]
 80127e0:	603b      	str	r3, [r7, #0]
 80127e2:	4613      	mov	r3, r2
 80127e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80127e6:	88fb      	ldrh	r3, [r7, #6]
 80127e8:	009b      	lsls	r3, r3, #2
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7fe fa6a 	bl	8010cc4 <pvPortMalloc>
 80127f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80127f2:	697b      	ldr	r3, [r7, #20]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d00e      	beq.n	8012816 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80127f8:	205c      	movs	r0, #92	; 0x5c
 80127fa:	f7fe fa63 	bl	8010cc4 <pvPortMalloc>
 80127fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012800:	69fb      	ldr	r3, [r7, #28]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d003      	beq.n	801280e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012806:	69fb      	ldr	r3, [r7, #28]
 8012808:	697a      	ldr	r2, [r7, #20]
 801280a:	631a      	str	r2, [r3, #48]	; 0x30
 801280c:	e005      	b.n	801281a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801280e:	6978      	ldr	r0, [r7, #20]
 8012810:	f7fe fb22 	bl	8010e58 <vPortFree>
 8012814:	e001      	b.n	801281a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012816:	2300      	movs	r3, #0
 8012818:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801281a:	69fb      	ldr	r3, [r7, #28]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d017      	beq.n	8012850 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012820:	69fb      	ldr	r3, [r7, #28]
 8012822:	2200      	movs	r2, #0
 8012824:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012828:	88fa      	ldrh	r2, [r7, #6]
 801282a:	2300      	movs	r3, #0
 801282c:	9303      	str	r3, [sp, #12]
 801282e:	69fb      	ldr	r3, [r7, #28]
 8012830:	9302      	str	r3, [sp, #8]
 8012832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012834:	9301      	str	r3, [sp, #4]
 8012836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012838:	9300      	str	r3, [sp, #0]
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	68b9      	ldr	r1, [r7, #8]
 801283e:	68f8      	ldr	r0, [r7, #12]
 8012840:	f000 f80e 	bl	8012860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012844:	69f8      	ldr	r0, [r7, #28]
 8012846:	f000 f89d 	bl	8012984 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801284a:	2301      	movs	r3, #1
 801284c:	61bb      	str	r3, [r7, #24]
 801284e:	e002      	b.n	8012856 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012850:	f04f 33ff 	mov.w	r3, #4294967295
 8012854:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012856:	69bb      	ldr	r3, [r7, #24]
	}
 8012858:	4618      	mov	r0, r3
 801285a:	3720      	adds	r7, #32
 801285c:	46bd      	mov	sp, r7
 801285e:	bd80      	pop	{r7, pc}

08012860 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b088      	sub	sp, #32
 8012864:	af00      	add	r7, sp, #0
 8012866:	60f8      	str	r0, [r7, #12]
 8012868:	60b9      	str	r1, [r7, #8]
 801286a:	607a      	str	r2, [r7, #4]
 801286c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801286e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012870:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	009b      	lsls	r3, r3, #2
 8012876:	461a      	mov	r2, r3
 8012878:	21a5      	movs	r1, #165	; 0xa5
 801287a:	f012 fb4f 	bl	8024f1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012882:	6879      	ldr	r1, [r7, #4]
 8012884:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012888:	440b      	add	r3, r1
 801288a:	009b      	lsls	r3, r3, #2
 801288c:	4413      	add	r3, r2
 801288e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012890:	69bb      	ldr	r3, [r7, #24]
 8012892:	f023 0307 	bic.w	r3, r3, #7
 8012896:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012898:	69bb      	ldr	r3, [r7, #24]
 801289a:	f003 0307 	and.w	r3, r3, #7
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d00c      	beq.n	80128bc <prvInitialiseNewTask+0x5c>
	__asm volatile
 80128a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80128a6:	b672      	cpsid	i
 80128a8:	f383 8811 	msr	BASEPRI, r3
 80128ac:	f3bf 8f6f 	isb	sy
 80128b0:	f3bf 8f4f 	dsb	sy
 80128b4:	b662      	cpsie	i
 80128b6:	617b      	str	r3, [r7, #20]
}
 80128b8:	bf00      	nop
 80128ba:	e7fe      	b.n	80128ba <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d01f      	beq.n	8012902 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80128c2:	2300      	movs	r3, #0
 80128c4:	61fb      	str	r3, [r7, #28]
 80128c6:	e012      	b.n	80128ee <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80128c8:	68ba      	ldr	r2, [r7, #8]
 80128ca:	69fb      	ldr	r3, [r7, #28]
 80128cc:	4413      	add	r3, r2
 80128ce:	7819      	ldrb	r1, [r3, #0]
 80128d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128d2:	69fb      	ldr	r3, [r7, #28]
 80128d4:	4413      	add	r3, r2
 80128d6:	3334      	adds	r3, #52	; 0x34
 80128d8:	460a      	mov	r2, r1
 80128da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80128dc:	68ba      	ldr	r2, [r7, #8]
 80128de:	69fb      	ldr	r3, [r7, #28]
 80128e0:	4413      	add	r3, r2
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d006      	beq.n	80128f6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80128e8:	69fb      	ldr	r3, [r7, #28]
 80128ea:	3301      	adds	r3, #1
 80128ec:	61fb      	str	r3, [r7, #28]
 80128ee:	69fb      	ldr	r3, [r7, #28]
 80128f0:	2b0f      	cmp	r3, #15
 80128f2:	d9e9      	bls.n	80128c8 <prvInitialiseNewTask+0x68>
 80128f4:	e000      	b.n	80128f8 <prvInitialiseNewTask+0x98>
			{
				break;
 80128f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80128f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128fa:	2200      	movs	r2, #0
 80128fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012900:	e003      	b.n	801290a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012904:	2200      	movs	r2, #0
 8012906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801290c:	2b37      	cmp	r3, #55	; 0x37
 801290e:	d901      	bls.n	8012914 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012910:	2337      	movs	r3, #55	; 0x37
 8012912:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012918:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801291c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801291e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012922:	2200      	movs	r2, #0
 8012924:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012928:	3304      	adds	r3, #4
 801292a:	4618      	mov	r0, r3
 801292c:	f7fe fbce 	bl	80110cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012932:	3318      	adds	r3, #24
 8012934:	4618      	mov	r0, r3
 8012936:	f7fe fbc9 	bl	80110cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801293c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801293e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012942:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012948:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801294c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801294e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012952:	2200      	movs	r2, #0
 8012954:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012958:	2200      	movs	r2, #0
 801295a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801295e:	683a      	ldr	r2, [r7, #0]
 8012960:	68f9      	ldr	r1, [r7, #12]
 8012962:	69b8      	ldr	r0, [r7, #24]
 8012964:	f7fe fc46 	bl	80111f4 <pxPortInitialiseStack>
 8012968:	4602      	mov	r2, r0
 801296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801296c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012970:	2b00      	cmp	r3, #0
 8012972:	d002      	beq.n	801297a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012978:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801297a:	bf00      	nop
 801297c:	3720      	adds	r7, #32
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}
	...

08012984 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801298c:	f7fe fd3e 	bl	801140c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012990:	4b2d      	ldr	r3, [pc, #180]	; (8012a48 <prvAddNewTaskToReadyList+0xc4>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	3301      	adds	r3, #1
 8012996:	4a2c      	ldr	r2, [pc, #176]	; (8012a48 <prvAddNewTaskToReadyList+0xc4>)
 8012998:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801299a:	4b2c      	ldr	r3, [pc, #176]	; (8012a4c <prvAddNewTaskToReadyList+0xc8>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d109      	bne.n	80129b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80129a2:	4a2a      	ldr	r2, [pc, #168]	; (8012a4c <prvAddNewTaskToReadyList+0xc8>)
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80129a8:	4b27      	ldr	r3, [pc, #156]	; (8012a48 <prvAddNewTaskToReadyList+0xc4>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	2b01      	cmp	r3, #1
 80129ae:	d110      	bne.n	80129d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80129b0:	f000 fc2c 	bl	801320c <prvInitialiseTaskLists>
 80129b4:	e00d      	b.n	80129d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80129b6:	4b26      	ldr	r3, [pc, #152]	; (8012a50 <prvAddNewTaskToReadyList+0xcc>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d109      	bne.n	80129d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80129be:	4b23      	ldr	r3, [pc, #140]	; (8012a4c <prvAddNewTaskToReadyList+0xc8>)
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d802      	bhi.n	80129d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80129cc:	4a1f      	ldr	r2, [pc, #124]	; (8012a4c <prvAddNewTaskToReadyList+0xc8>)
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80129d2:	4b20      	ldr	r3, [pc, #128]	; (8012a54 <prvAddNewTaskToReadyList+0xd0>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	3301      	adds	r3, #1
 80129d8:	4a1e      	ldr	r2, [pc, #120]	; (8012a54 <prvAddNewTaskToReadyList+0xd0>)
 80129da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80129dc:	4b1d      	ldr	r3, [pc, #116]	; (8012a54 <prvAddNewTaskToReadyList+0xd0>)
 80129de:	681a      	ldr	r2, [r3, #0]
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129e8:	4b1b      	ldr	r3, [pc, #108]	; (8012a58 <prvAddNewTaskToReadyList+0xd4>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	429a      	cmp	r2, r3
 80129ee:	d903      	bls.n	80129f8 <prvAddNewTaskToReadyList+0x74>
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129f4:	4a18      	ldr	r2, [pc, #96]	; (8012a58 <prvAddNewTaskToReadyList+0xd4>)
 80129f6:	6013      	str	r3, [r2, #0]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129fc:	4613      	mov	r3, r2
 80129fe:	009b      	lsls	r3, r3, #2
 8012a00:	4413      	add	r3, r2
 8012a02:	009b      	lsls	r3, r3, #2
 8012a04:	4a15      	ldr	r2, [pc, #84]	; (8012a5c <prvAddNewTaskToReadyList+0xd8>)
 8012a06:	441a      	add	r2, r3
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	3304      	adds	r3, #4
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	4610      	mov	r0, r2
 8012a10:	f7fe fb69 	bl	80110e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012a14:	f7fe fd2e 	bl	8011474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012a18:	4b0d      	ldr	r3, [pc, #52]	; (8012a50 <prvAddNewTaskToReadyList+0xcc>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d00e      	beq.n	8012a3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012a20:	4b0a      	ldr	r3, [pc, #40]	; (8012a4c <prvAddNewTaskToReadyList+0xc8>)
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d207      	bcs.n	8012a3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012a2e:	4b0c      	ldr	r3, [pc, #48]	; (8012a60 <prvAddNewTaskToReadyList+0xdc>)
 8012a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a34:	601a      	str	r2, [r3, #0]
 8012a36:	f3bf 8f4f 	dsb	sy
 8012a3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012a3e:	bf00      	nop
 8012a40:	3708      	adds	r7, #8
 8012a42:	46bd      	mov	sp, r7
 8012a44:	bd80      	pop	{r7, pc}
 8012a46:	bf00      	nop
 8012a48:	2005657c 	.word	0x2005657c
 8012a4c:	200560a8 	.word	0x200560a8
 8012a50:	20056588 	.word	0x20056588
 8012a54:	20056598 	.word	0x20056598
 8012a58:	20056584 	.word	0x20056584
 8012a5c:	200560ac 	.word	0x200560ac
 8012a60:	e000ed04 	.word	0xe000ed04

08012a64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b084      	sub	sp, #16
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d019      	beq.n	8012aaa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012a76:	4b14      	ldr	r3, [pc, #80]	; (8012ac8 <vTaskDelay+0x64>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d00c      	beq.n	8012a98 <vTaskDelay+0x34>
	__asm volatile
 8012a7e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012a82:	b672      	cpsid	i
 8012a84:	f383 8811 	msr	BASEPRI, r3
 8012a88:	f3bf 8f6f 	isb	sy
 8012a8c:	f3bf 8f4f 	dsb	sy
 8012a90:	b662      	cpsie	i
 8012a92:	60bb      	str	r3, [r7, #8]
}
 8012a94:	bf00      	nop
 8012a96:	e7fe      	b.n	8012a96 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8012a98:	f000 f884 	bl	8012ba4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012a9c:	2100      	movs	r1, #0
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f000 fe06 	bl	80136b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012aa4:	f000 f88c 	bl	8012bc0 <xTaskResumeAll>
 8012aa8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d107      	bne.n	8012ac0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8012ab0:	4b06      	ldr	r3, [pc, #24]	; (8012acc <vTaskDelay+0x68>)
 8012ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ab6:	601a      	str	r2, [r3, #0]
 8012ab8:	f3bf 8f4f 	dsb	sy
 8012abc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012ac0:	bf00      	nop
 8012ac2:	3710      	adds	r7, #16
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}
 8012ac8:	200565a4 	.word	0x200565a4
 8012acc:	e000ed04 	.word	0xe000ed04

08012ad0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b08a      	sub	sp, #40	; 0x28
 8012ad4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012ada:	2300      	movs	r3, #0
 8012adc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012ade:	463a      	mov	r2, r7
 8012ae0:	1d39      	adds	r1, r7, #4
 8012ae2:	f107 0308 	add.w	r3, r7, #8
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f7fe f8b8 	bl	8010c5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012aec:	6839      	ldr	r1, [r7, #0]
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	68ba      	ldr	r2, [r7, #8]
 8012af2:	9202      	str	r2, [sp, #8]
 8012af4:	9301      	str	r3, [sp, #4]
 8012af6:	2300      	movs	r3, #0
 8012af8:	9300      	str	r3, [sp, #0]
 8012afa:	2300      	movs	r3, #0
 8012afc:	460a      	mov	r2, r1
 8012afe:	4923      	ldr	r1, [pc, #140]	; (8012b8c <vTaskStartScheduler+0xbc>)
 8012b00:	4823      	ldr	r0, [pc, #140]	; (8012b90 <vTaskStartScheduler+0xc0>)
 8012b02:	f7ff fe05 	bl	8012710 <xTaskCreateStatic>
 8012b06:	4603      	mov	r3, r0
 8012b08:	4a22      	ldr	r2, [pc, #136]	; (8012b94 <vTaskStartScheduler+0xc4>)
 8012b0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012b0c:	4b21      	ldr	r3, [pc, #132]	; (8012b94 <vTaskStartScheduler+0xc4>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d002      	beq.n	8012b1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012b14:	2301      	movs	r3, #1
 8012b16:	617b      	str	r3, [r7, #20]
 8012b18:	e001      	b.n	8012b1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	2b01      	cmp	r3, #1
 8012b22:	d102      	bne.n	8012b2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012b24:	f000 fe18 	bl	8013758 <xTimerCreateTimerTask>
 8012b28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	2b01      	cmp	r3, #1
 8012b2e:	d118      	bne.n	8012b62 <vTaskStartScheduler+0x92>
	__asm volatile
 8012b30:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012b34:	b672      	cpsid	i
 8012b36:	f383 8811 	msr	BASEPRI, r3
 8012b3a:	f3bf 8f6f 	isb	sy
 8012b3e:	f3bf 8f4f 	dsb	sy
 8012b42:	b662      	cpsie	i
 8012b44:	613b      	str	r3, [r7, #16]
}
 8012b46:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012b48:	4b13      	ldr	r3, [pc, #76]	; (8012b98 <vTaskStartScheduler+0xc8>)
 8012b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012b50:	4b12      	ldr	r3, [pc, #72]	; (8012b9c <vTaskStartScheduler+0xcc>)
 8012b52:	2201      	movs	r2, #1
 8012b54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012b56:	4b12      	ldr	r3, [pc, #72]	; (8012ba0 <vTaskStartScheduler+0xd0>)
 8012b58:	2200      	movs	r2, #0
 8012b5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012b5c:	f7fe fbd8 	bl	8011310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012b60:	e010      	b.n	8012b84 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012b62:	697b      	ldr	r3, [r7, #20]
 8012b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b68:	d10c      	bne.n	8012b84 <vTaskStartScheduler+0xb4>
	__asm volatile
 8012b6a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012b6e:	b672      	cpsid	i
 8012b70:	f383 8811 	msr	BASEPRI, r3
 8012b74:	f3bf 8f6f 	isb	sy
 8012b78:	f3bf 8f4f 	dsb	sy
 8012b7c:	b662      	cpsie	i
 8012b7e:	60fb      	str	r3, [r7, #12]
}
 8012b80:	bf00      	nop
 8012b82:	e7fe      	b.n	8012b82 <vTaskStartScheduler+0xb2>
}
 8012b84:	bf00      	nop
 8012b86:	3718      	adds	r7, #24
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	0802a1d0 	.word	0x0802a1d0
 8012b90:	080131dd 	.word	0x080131dd
 8012b94:	200565a0 	.word	0x200565a0
 8012b98:	2005659c 	.word	0x2005659c
 8012b9c:	20056588 	.word	0x20056588
 8012ba0:	20056580 	.word	0x20056580

08012ba4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012ba8:	4b04      	ldr	r3, [pc, #16]	; (8012bbc <vTaskSuspendAll+0x18>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	3301      	adds	r3, #1
 8012bae:	4a03      	ldr	r2, [pc, #12]	; (8012bbc <vTaskSuspendAll+0x18>)
 8012bb0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012bb2:	bf00      	nop
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bba:	4770      	bx	lr
 8012bbc:	200565a4 	.word	0x200565a4

08012bc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b084      	sub	sp, #16
 8012bc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012bca:	2300      	movs	r3, #0
 8012bcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012bce:	4b43      	ldr	r3, [pc, #268]	; (8012cdc <xTaskResumeAll+0x11c>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d10c      	bne.n	8012bf0 <xTaskResumeAll+0x30>
	__asm volatile
 8012bd6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012bda:	b672      	cpsid	i
 8012bdc:	f383 8811 	msr	BASEPRI, r3
 8012be0:	f3bf 8f6f 	isb	sy
 8012be4:	f3bf 8f4f 	dsb	sy
 8012be8:	b662      	cpsie	i
 8012bea:	603b      	str	r3, [r7, #0]
}
 8012bec:	bf00      	nop
 8012bee:	e7fe      	b.n	8012bee <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012bf0:	f7fe fc0c 	bl	801140c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012bf4:	4b39      	ldr	r3, [pc, #228]	; (8012cdc <xTaskResumeAll+0x11c>)
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	3b01      	subs	r3, #1
 8012bfa:	4a38      	ldr	r2, [pc, #224]	; (8012cdc <xTaskResumeAll+0x11c>)
 8012bfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012bfe:	4b37      	ldr	r3, [pc, #220]	; (8012cdc <xTaskResumeAll+0x11c>)
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d162      	bne.n	8012ccc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012c06:	4b36      	ldr	r3, [pc, #216]	; (8012ce0 <xTaskResumeAll+0x120>)
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d05e      	beq.n	8012ccc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012c0e:	e02f      	b.n	8012c70 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c10:	4b34      	ldr	r3, [pc, #208]	; (8012ce4 <xTaskResumeAll+0x124>)
 8012c12:	68db      	ldr	r3, [r3, #12]
 8012c14:	68db      	ldr	r3, [r3, #12]
 8012c16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	3318      	adds	r3, #24
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f7fe fabf 	bl	80111a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	3304      	adds	r3, #4
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7fe faba 	bl	80111a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c30:	4b2d      	ldr	r3, [pc, #180]	; (8012ce8 <xTaskResumeAll+0x128>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d903      	bls.n	8012c40 <xTaskResumeAll+0x80>
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c3c:	4a2a      	ldr	r2, [pc, #168]	; (8012ce8 <xTaskResumeAll+0x128>)
 8012c3e:	6013      	str	r3, [r2, #0]
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c44:	4613      	mov	r3, r2
 8012c46:	009b      	lsls	r3, r3, #2
 8012c48:	4413      	add	r3, r2
 8012c4a:	009b      	lsls	r3, r3, #2
 8012c4c:	4a27      	ldr	r2, [pc, #156]	; (8012cec <xTaskResumeAll+0x12c>)
 8012c4e:	441a      	add	r2, r3
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	3304      	adds	r3, #4
 8012c54:	4619      	mov	r1, r3
 8012c56:	4610      	mov	r0, r2
 8012c58:	f7fe fa45 	bl	80110e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c60:	4b23      	ldr	r3, [pc, #140]	; (8012cf0 <xTaskResumeAll+0x130>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c66:	429a      	cmp	r2, r3
 8012c68:	d302      	bcc.n	8012c70 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8012c6a:	4b22      	ldr	r3, [pc, #136]	; (8012cf4 <xTaskResumeAll+0x134>)
 8012c6c:	2201      	movs	r2, #1
 8012c6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012c70:	4b1c      	ldr	r3, [pc, #112]	; (8012ce4 <xTaskResumeAll+0x124>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d1cb      	bne.n	8012c10 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d001      	beq.n	8012c82 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012c7e:	f000 fb65 	bl	801334c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012c82:	4b1d      	ldr	r3, [pc, #116]	; (8012cf8 <xTaskResumeAll+0x138>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d010      	beq.n	8012cb0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012c8e:	f000 f847 	bl	8012d20 <xTaskIncrementTick>
 8012c92:	4603      	mov	r3, r0
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d002      	beq.n	8012c9e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8012c98:	4b16      	ldr	r3, [pc, #88]	; (8012cf4 <xTaskResumeAll+0x134>)
 8012c9a:	2201      	movs	r2, #1
 8012c9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	3b01      	subs	r3, #1
 8012ca2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d1f1      	bne.n	8012c8e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8012caa:	4b13      	ldr	r3, [pc, #76]	; (8012cf8 <xTaskResumeAll+0x138>)
 8012cac:	2200      	movs	r2, #0
 8012cae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012cb0:	4b10      	ldr	r3, [pc, #64]	; (8012cf4 <xTaskResumeAll+0x134>)
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d009      	beq.n	8012ccc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012cb8:	2301      	movs	r3, #1
 8012cba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012cbc:	4b0f      	ldr	r3, [pc, #60]	; (8012cfc <xTaskResumeAll+0x13c>)
 8012cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cc2:	601a      	str	r2, [r3, #0]
 8012cc4:	f3bf 8f4f 	dsb	sy
 8012cc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012ccc:	f7fe fbd2 	bl	8011474 <vPortExitCritical>

	return xAlreadyYielded;
 8012cd0:	68bb      	ldr	r3, [r7, #8]
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3710      	adds	r7, #16
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	200565a4 	.word	0x200565a4
 8012ce0:	2005657c 	.word	0x2005657c
 8012ce4:	2005653c 	.word	0x2005653c
 8012ce8:	20056584 	.word	0x20056584
 8012cec:	200560ac 	.word	0x200560ac
 8012cf0:	200560a8 	.word	0x200560a8
 8012cf4:	20056590 	.word	0x20056590
 8012cf8:	2005658c 	.word	0x2005658c
 8012cfc:	e000ed04 	.word	0xe000ed04

08012d00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012d00:	b480      	push	{r7}
 8012d02:	b083      	sub	sp, #12
 8012d04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012d06:	4b05      	ldr	r3, [pc, #20]	; (8012d1c <xTaskGetTickCount+0x1c>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012d0c:	687b      	ldr	r3, [r7, #4]
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	370c      	adds	r7, #12
 8012d12:	46bd      	mov	sp, r7
 8012d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d18:	4770      	bx	lr
 8012d1a:	bf00      	nop
 8012d1c:	20056580 	.word	0x20056580

08012d20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b086      	sub	sp, #24
 8012d24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012d26:	2300      	movs	r3, #0
 8012d28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d2a:	4b50      	ldr	r3, [pc, #320]	; (8012e6c <xTaskIncrementTick+0x14c>)
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	f040 808b 	bne.w	8012e4a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012d34:	4b4e      	ldr	r3, [pc, #312]	; (8012e70 <xTaskIncrementTick+0x150>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	3301      	adds	r3, #1
 8012d3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012d3c:	4a4c      	ldr	r2, [pc, #304]	; (8012e70 <xTaskIncrementTick+0x150>)
 8012d3e:	693b      	ldr	r3, [r7, #16]
 8012d40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012d42:	693b      	ldr	r3, [r7, #16]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d122      	bne.n	8012d8e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8012d48:	4b4a      	ldr	r3, [pc, #296]	; (8012e74 <xTaskIncrementTick+0x154>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d00c      	beq.n	8012d6c <xTaskIncrementTick+0x4c>
	__asm volatile
 8012d52:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012d56:	b672      	cpsid	i
 8012d58:	f383 8811 	msr	BASEPRI, r3
 8012d5c:	f3bf 8f6f 	isb	sy
 8012d60:	f3bf 8f4f 	dsb	sy
 8012d64:	b662      	cpsie	i
 8012d66:	603b      	str	r3, [r7, #0]
}
 8012d68:	bf00      	nop
 8012d6a:	e7fe      	b.n	8012d6a <xTaskIncrementTick+0x4a>
 8012d6c:	4b41      	ldr	r3, [pc, #260]	; (8012e74 <xTaskIncrementTick+0x154>)
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	60fb      	str	r3, [r7, #12]
 8012d72:	4b41      	ldr	r3, [pc, #260]	; (8012e78 <xTaskIncrementTick+0x158>)
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	4a3f      	ldr	r2, [pc, #252]	; (8012e74 <xTaskIncrementTick+0x154>)
 8012d78:	6013      	str	r3, [r2, #0]
 8012d7a:	4a3f      	ldr	r2, [pc, #252]	; (8012e78 <xTaskIncrementTick+0x158>)
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	6013      	str	r3, [r2, #0]
 8012d80:	4b3e      	ldr	r3, [pc, #248]	; (8012e7c <xTaskIncrementTick+0x15c>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	3301      	adds	r3, #1
 8012d86:	4a3d      	ldr	r2, [pc, #244]	; (8012e7c <xTaskIncrementTick+0x15c>)
 8012d88:	6013      	str	r3, [r2, #0]
 8012d8a:	f000 fadf 	bl	801334c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012d8e:	4b3c      	ldr	r3, [pc, #240]	; (8012e80 <xTaskIncrementTick+0x160>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	693a      	ldr	r2, [r7, #16]
 8012d94:	429a      	cmp	r2, r3
 8012d96:	d349      	bcc.n	8012e2c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012d98:	4b36      	ldr	r3, [pc, #216]	; (8012e74 <xTaskIncrementTick+0x154>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d104      	bne.n	8012dac <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012da2:	4b37      	ldr	r3, [pc, #220]	; (8012e80 <xTaskIncrementTick+0x160>)
 8012da4:	f04f 32ff 	mov.w	r2, #4294967295
 8012da8:	601a      	str	r2, [r3, #0]
					break;
 8012daa:	e03f      	b.n	8012e2c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012dac:	4b31      	ldr	r3, [pc, #196]	; (8012e74 <xTaskIncrementTick+0x154>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	68db      	ldr	r3, [r3, #12]
 8012db2:	68db      	ldr	r3, [r3, #12]
 8012db4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012db6:	68bb      	ldr	r3, [r7, #8]
 8012db8:	685b      	ldr	r3, [r3, #4]
 8012dba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012dbc:	693a      	ldr	r2, [r7, #16]
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	429a      	cmp	r2, r3
 8012dc2:	d203      	bcs.n	8012dcc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012dc4:	4a2e      	ldr	r2, [pc, #184]	; (8012e80 <xTaskIncrementTick+0x160>)
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012dca:	e02f      	b.n	8012e2c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	3304      	adds	r3, #4
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7fe f9e5 	bl	80111a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d004      	beq.n	8012de8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012dde:	68bb      	ldr	r3, [r7, #8]
 8012de0:	3318      	adds	r3, #24
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7fe f9dc 	bl	80111a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012dec:	4b25      	ldr	r3, [pc, #148]	; (8012e84 <xTaskIncrementTick+0x164>)
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	429a      	cmp	r2, r3
 8012df2:	d903      	bls.n	8012dfc <xTaskIncrementTick+0xdc>
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012df8:	4a22      	ldr	r2, [pc, #136]	; (8012e84 <xTaskIncrementTick+0x164>)
 8012dfa:	6013      	str	r3, [r2, #0]
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e00:	4613      	mov	r3, r2
 8012e02:	009b      	lsls	r3, r3, #2
 8012e04:	4413      	add	r3, r2
 8012e06:	009b      	lsls	r3, r3, #2
 8012e08:	4a1f      	ldr	r2, [pc, #124]	; (8012e88 <xTaskIncrementTick+0x168>)
 8012e0a:	441a      	add	r2, r3
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	3304      	adds	r3, #4
 8012e10:	4619      	mov	r1, r3
 8012e12:	4610      	mov	r0, r2
 8012e14:	f7fe f967 	bl	80110e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e1c:	4b1b      	ldr	r3, [pc, #108]	; (8012e8c <xTaskIncrementTick+0x16c>)
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d3b8      	bcc.n	8012d98 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8012e26:	2301      	movs	r3, #1
 8012e28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012e2a:	e7b5      	b.n	8012d98 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012e2c:	4b17      	ldr	r3, [pc, #92]	; (8012e8c <xTaskIncrementTick+0x16c>)
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e32:	4915      	ldr	r1, [pc, #84]	; (8012e88 <xTaskIncrementTick+0x168>)
 8012e34:	4613      	mov	r3, r2
 8012e36:	009b      	lsls	r3, r3, #2
 8012e38:	4413      	add	r3, r2
 8012e3a:	009b      	lsls	r3, r3, #2
 8012e3c:	440b      	add	r3, r1
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	2b01      	cmp	r3, #1
 8012e42:	d907      	bls.n	8012e54 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8012e44:	2301      	movs	r3, #1
 8012e46:	617b      	str	r3, [r7, #20]
 8012e48:	e004      	b.n	8012e54 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012e4a:	4b11      	ldr	r3, [pc, #68]	; (8012e90 <xTaskIncrementTick+0x170>)
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	3301      	adds	r3, #1
 8012e50:	4a0f      	ldr	r2, [pc, #60]	; (8012e90 <xTaskIncrementTick+0x170>)
 8012e52:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012e54:	4b0f      	ldr	r3, [pc, #60]	; (8012e94 <xTaskIncrementTick+0x174>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d001      	beq.n	8012e60 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8012e5c:	2301      	movs	r3, #1
 8012e5e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012e60:	697b      	ldr	r3, [r7, #20]
}
 8012e62:	4618      	mov	r0, r3
 8012e64:	3718      	adds	r7, #24
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}
 8012e6a:	bf00      	nop
 8012e6c:	200565a4 	.word	0x200565a4
 8012e70:	20056580 	.word	0x20056580
 8012e74:	20056534 	.word	0x20056534
 8012e78:	20056538 	.word	0x20056538
 8012e7c:	20056594 	.word	0x20056594
 8012e80:	2005659c 	.word	0x2005659c
 8012e84:	20056584 	.word	0x20056584
 8012e88:	200560ac 	.word	0x200560ac
 8012e8c:	200560a8 	.word	0x200560a8
 8012e90:	2005658c 	.word	0x2005658c
 8012e94:	20056590 	.word	0x20056590

08012e98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012e98:	b480      	push	{r7}
 8012e9a:	b085      	sub	sp, #20
 8012e9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012e9e:	4b29      	ldr	r3, [pc, #164]	; (8012f44 <vTaskSwitchContext+0xac>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d003      	beq.n	8012eae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012ea6:	4b28      	ldr	r3, [pc, #160]	; (8012f48 <vTaskSwitchContext+0xb0>)
 8012ea8:	2201      	movs	r2, #1
 8012eaa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012eac:	e043      	b.n	8012f36 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8012eae:	4b26      	ldr	r3, [pc, #152]	; (8012f48 <vTaskSwitchContext+0xb0>)
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012eb4:	4b25      	ldr	r3, [pc, #148]	; (8012f4c <vTaskSwitchContext+0xb4>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	60fb      	str	r3, [r7, #12]
 8012eba:	e012      	b.n	8012ee2 <vTaskSwitchContext+0x4a>
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d10c      	bne.n	8012edc <vTaskSwitchContext+0x44>
	__asm volatile
 8012ec2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012ec6:	b672      	cpsid	i
 8012ec8:	f383 8811 	msr	BASEPRI, r3
 8012ecc:	f3bf 8f6f 	isb	sy
 8012ed0:	f3bf 8f4f 	dsb	sy
 8012ed4:	b662      	cpsie	i
 8012ed6:	607b      	str	r3, [r7, #4]
}
 8012ed8:	bf00      	nop
 8012eda:	e7fe      	b.n	8012eda <vTaskSwitchContext+0x42>
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	3b01      	subs	r3, #1
 8012ee0:	60fb      	str	r3, [r7, #12]
 8012ee2:	491b      	ldr	r1, [pc, #108]	; (8012f50 <vTaskSwitchContext+0xb8>)
 8012ee4:	68fa      	ldr	r2, [r7, #12]
 8012ee6:	4613      	mov	r3, r2
 8012ee8:	009b      	lsls	r3, r3, #2
 8012eea:	4413      	add	r3, r2
 8012eec:	009b      	lsls	r3, r3, #2
 8012eee:	440b      	add	r3, r1
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d0e2      	beq.n	8012ebc <vTaskSwitchContext+0x24>
 8012ef6:	68fa      	ldr	r2, [r7, #12]
 8012ef8:	4613      	mov	r3, r2
 8012efa:	009b      	lsls	r3, r3, #2
 8012efc:	4413      	add	r3, r2
 8012efe:	009b      	lsls	r3, r3, #2
 8012f00:	4a13      	ldr	r2, [pc, #76]	; (8012f50 <vTaskSwitchContext+0xb8>)
 8012f02:	4413      	add	r3, r2
 8012f04:	60bb      	str	r3, [r7, #8]
 8012f06:	68bb      	ldr	r3, [r7, #8]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	685a      	ldr	r2, [r3, #4]
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	605a      	str	r2, [r3, #4]
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	685a      	ldr	r2, [r3, #4]
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	3308      	adds	r3, #8
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d104      	bne.n	8012f26 <vTaskSwitchContext+0x8e>
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	685b      	ldr	r3, [r3, #4]
 8012f20:	685a      	ldr	r2, [r3, #4]
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	605a      	str	r2, [r3, #4]
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	685b      	ldr	r3, [r3, #4]
 8012f2a:	68db      	ldr	r3, [r3, #12]
 8012f2c:	4a09      	ldr	r2, [pc, #36]	; (8012f54 <vTaskSwitchContext+0xbc>)
 8012f2e:	6013      	str	r3, [r2, #0]
 8012f30:	4a06      	ldr	r2, [pc, #24]	; (8012f4c <vTaskSwitchContext+0xb4>)
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	6013      	str	r3, [r2, #0]
}
 8012f36:	bf00      	nop
 8012f38:	3714      	adds	r7, #20
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f40:	4770      	bx	lr
 8012f42:	bf00      	nop
 8012f44:	200565a4 	.word	0x200565a4
 8012f48:	20056590 	.word	0x20056590
 8012f4c:	20056584 	.word	0x20056584
 8012f50:	200560ac 	.word	0x200560ac
 8012f54:	200560a8 	.word	0x200560a8

08012f58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b084      	sub	sp, #16
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d10c      	bne.n	8012f82 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8012f68:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012f6c:	b672      	cpsid	i
 8012f6e:	f383 8811 	msr	BASEPRI, r3
 8012f72:	f3bf 8f6f 	isb	sy
 8012f76:	f3bf 8f4f 	dsb	sy
 8012f7a:	b662      	cpsie	i
 8012f7c:	60fb      	str	r3, [r7, #12]
}
 8012f7e:	bf00      	nop
 8012f80:	e7fe      	b.n	8012f80 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012f82:	4b07      	ldr	r3, [pc, #28]	; (8012fa0 <vTaskPlaceOnEventList+0x48>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	3318      	adds	r3, #24
 8012f88:	4619      	mov	r1, r3
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f7fe f8cf 	bl	801112e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012f90:	2101      	movs	r1, #1
 8012f92:	6838      	ldr	r0, [r7, #0]
 8012f94:	f000 fb8c 	bl	80136b0 <prvAddCurrentTaskToDelayedList>
}
 8012f98:	bf00      	nop
 8012f9a:	3710      	adds	r7, #16
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}
 8012fa0:	200560a8 	.word	0x200560a8

08012fa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b086      	sub	sp, #24
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	60f8      	str	r0, [r7, #12]
 8012fac:	60b9      	str	r1, [r7, #8]
 8012fae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d10c      	bne.n	8012fd0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8012fb6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012fba:	b672      	cpsid	i
 8012fbc:	f383 8811 	msr	BASEPRI, r3
 8012fc0:	f3bf 8f6f 	isb	sy
 8012fc4:	f3bf 8f4f 	dsb	sy
 8012fc8:	b662      	cpsie	i
 8012fca:	617b      	str	r3, [r7, #20]
}
 8012fcc:	bf00      	nop
 8012fce:	e7fe      	b.n	8012fce <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012fd0:	4b0a      	ldr	r3, [pc, #40]	; (8012ffc <vTaskPlaceOnEventListRestricted+0x58>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	3318      	adds	r3, #24
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	68f8      	ldr	r0, [r7, #12]
 8012fda:	f7fe f884 	bl	80110e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d002      	beq.n	8012fea <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8012fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8012fe8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012fea:	6879      	ldr	r1, [r7, #4]
 8012fec:	68b8      	ldr	r0, [r7, #8]
 8012fee:	f000 fb5f 	bl	80136b0 <prvAddCurrentTaskToDelayedList>
	}
 8012ff2:	bf00      	nop
 8012ff4:	3718      	adds	r7, #24
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	200560a8 	.word	0x200560a8

08013000 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b086      	sub	sp, #24
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	68db      	ldr	r3, [r3, #12]
 801300c:	68db      	ldr	r3, [r3, #12]
 801300e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013010:	693b      	ldr	r3, [r7, #16]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d10c      	bne.n	8013030 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8013016:	f04f 0330 	mov.w	r3, #48	; 0x30
 801301a:	b672      	cpsid	i
 801301c:	f383 8811 	msr	BASEPRI, r3
 8013020:	f3bf 8f6f 	isb	sy
 8013024:	f3bf 8f4f 	dsb	sy
 8013028:	b662      	cpsie	i
 801302a:	60fb      	str	r3, [r7, #12]
}
 801302c:	bf00      	nop
 801302e:	e7fe      	b.n	801302e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	3318      	adds	r3, #24
 8013034:	4618      	mov	r0, r3
 8013036:	f7fe f8b3 	bl	80111a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801303a:	4b1e      	ldr	r3, [pc, #120]	; (80130b4 <xTaskRemoveFromEventList+0xb4>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d11d      	bne.n	801307e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013042:	693b      	ldr	r3, [r7, #16]
 8013044:	3304      	adds	r3, #4
 8013046:	4618      	mov	r0, r3
 8013048:	f7fe f8aa 	bl	80111a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801304c:	693b      	ldr	r3, [r7, #16]
 801304e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013050:	4b19      	ldr	r3, [pc, #100]	; (80130b8 <xTaskRemoveFromEventList+0xb8>)
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	429a      	cmp	r2, r3
 8013056:	d903      	bls.n	8013060 <xTaskRemoveFromEventList+0x60>
 8013058:	693b      	ldr	r3, [r7, #16]
 801305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801305c:	4a16      	ldr	r2, [pc, #88]	; (80130b8 <xTaskRemoveFromEventList+0xb8>)
 801305e:	6013      	str	r3, [r2, #0]
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013064:	4613      	mov	r3, r2
 8013066:	009b      	lsls	r3, r3, #2
 8013068:	4413      	add	r3, r2
 801306a:	009b      	lsls	r3, r3, #2
 801306c:	4a13      	ldr	r2, [pc, #76]	; (80130bc <xTaskRemoveFromEventList+0xbc>)
 801306e:	441a      	add	r2, r3
 8013070:	693b      	ldr	r3, [r7, #16]
 8013072:	3304      	adds	r3, #4
 8013074:	4619      	mov	r1, r3
 8013076:	4610      	mov	r0, r2
 8013078:	f7fe f835 	bl	80110e6 <vListInsertEnd>
 801307c:	e005      	b.n	801308a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801307e:	693b      	ldr	r3, [r7, #16]
 8013080:	3318      	adds	r3, #24
 8013082:	4619      	mov	r1, r3
 8013084:	480e      	ldr	r0, [pc, #56]	; (80130c0 <xTaskRemoveFromEventList+0xc0>)
 8013086:	f7fe f82e 	bl	80110e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801308a:	693b      	ldr	r3, [r7, #16]
 801308c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801308e:	4b0d      	ldr	r3, [pc, #52]	; (80130c4 <xTaskRemoveFromEventList+0xc4>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013094:	429a      	cmp	r2, r3
 8013096:	d905      	bls.n	80130a4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013098:	2301      	movs	r3, #1
 801309a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801309c:	4b0a      	ldr	r3, [pc, #40]	; (80130c8 <xTaskRemoveFromEventList+0xc8>)
 801309e:	2201      	movs	r2, #1
 80130a0:	601a      	str	r2, [r3, #0]
 80130a2:	e001      	b.n	80130a8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80130a4:	2300      	movs	r3, #0
 80130a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80130a8:	697b      	ldr	r3, [r7, #20]
}
 80130aa:	4618      	mov	r0, r3
 80130ac:	3718      	adds	r7, #24
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}
 80130b2:	bf00      	nop
 80130b4:	200565a4 	.word	0x200565a4
 80130b8:	20056584 	.word	0x20056584
 80130bc:	200560ac 	.word	0x200560ac
 80130c0:	2005653c 	.word	0x2005653c
 80130c4:	200560a8 	.word	0x200560a8
 80130c8:	20056590 	.word	0x20056590

080130cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80130cc:	b480      	push	{r7}
 80130ce:	b083      	sub	sp, #12
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80130d4:	4b06      	ldr	r3, [pc, #24]	; (80130f0 <vTaskInternalSetTimeOutState+0x24>)
 80130d6:	681a      	ldr	r2, [r3, #0]
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80130dc:	4b05      	ldr	r3, [pc, #20]	; (80130f4 <vTaskInternalSetTimeOutState+0x28>)
 80130de:	681a      	ldr	r2, [r3, #0]
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	605a      	str	r2, [r3, #4]
}
 80130e4:	bf00      	nop
 80130e6:	370c      	adds	r7, #12
 80130e8:	46bd      	mov	sp, r7
 80130ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ee:	4770      	bx	lr
 80130f0:	20056594 	.word	0x20056594
 80130f4:	20056580 	.word	0x20056580

080130f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b088      	sub	sp, #32
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d10c      	bne.n	8013122 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8013108:	f04f 0330 	mov.w	r3, #48	; 0x30
 801310c:	b672      	cpsid	i
 801310e:	f383 8811 	msr	BASEPRI, r3
 8013112:	f3bf 8f6f 	isb	sy
 8013116:	f3bf 8f4f 	dsb	sy
 801311a:	b662      	cpsie	i
 801311c:	613b      	str	r3, [r7, #16]
}
 801311e:	bf00      	nop
 8013120:	e7fe      	b.n	8013120 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d10c      	bne.n	8013142 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8013128:	f04f 0330 	mov.w	r3, #48	; 0x30
 801312c:	b672      	cpsid	i
 801312e:	f383 8811 	msr	BASEPRI, r3
 8013132:	f3bf 8f6f 	isb	sy
 8013136:	f3bf 8f4f 	dsb	sy
 801313a:	b662      	cpsie	i
 801313c:	60fb      	str	r3, [r7, #12]
}
 801313e:	bf00      	nop
 8013140:	e7fe      	b.n	8013140 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8013142:	f7fe f963 	bl	801140c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013146:	4b1d      	ldr	r3, [pc, #116]	; (80131bc <xTaskCheckForTimeOut+0xc4>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	685b      	ldr	r3, [r3, #4]
 8013150:	69ba      	ldr	r2, [r7, #24]
 8013152:	1ad3      	subs	r3, r2, r3
 8013154:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801315e:	d102      	bne.n	8013166 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013160:	2300      	movs	r3, #0
 8013162:	61fb      	str	r3, [r7, #28]
 8013164:	e023      	b.n	80131ae <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	681a      	ldr	r2, [r3, #0]
 801316a:	4b15      	ldr	r3, [pc, #84]	; (80131c0 <xTaskCheckForTimeOut+0xc8>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	429a      	cmp	r2, r3
 8013170:	d007      	beq.n	8013182 <xTaskCheckForTimeOut+0x8a>
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	69ba      	ldr	r2, [r7, #24]
 8013178:	429a      	cmp	r2, r3
 801317a:	d302      	bcc.n	8013182 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801317c:	2301      	movs	r3, #1
 801317e:	61fb      	str	r3, [r7, #28]
 8013180:	e015      	b.n	80131ae <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	697a      	ldr	r2, [r7, #20]
 8013188:	429a      	cmp	r2, r3
 801318a:	d20b      	bcs.n	80131a4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	681a      	ldr	r2, [r3, #0]
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	1ad2      	subs	r2, r2, r3
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	f7ff ff97 	bl	80130cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801319e:	2300      	movs	r3, #0
 80131a0:	61fb      	str	r3, [r7, #28]
 80131a2:	e004      	b.n	80131ae <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	2200      	movs	r2, #0
 80131a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80131aa:	2301      	movs	r3, #1
 80131ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80131ae:	f7fe f961 	bl	8011474 <vPortExitCritical>

	return xReturn;
 80131b2:	69fb      	ldr	r3, [r7, #28]
}
 80131b4:	4618      	mov	r0, r3
 80131b6:	3720      	adds	r7, #32
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}
 80131bc:	20056580 	.word	0x20056580
 80131c0:	20056594 	.word	0x20056594

080131c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80131c4:	b480      	push	{r7}
 80131c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80131c8:	4b03      	ldr	r3, [pc, #12]	; (80131d8 <vTaskMissedYield+0x14>)
 80131ca:	2201      	movs	r2, #1
 80131cc:	601a      	str	r2, [r3, #0]
}
 80131ce:	bf00      	nop
 80131d0:	46bd      	mov	sp, r7
 80131d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d6:	4770      	bx	lr
 80131d8:	20056590 	.word	0x20056590

080131dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b082      	sub	sp, #8
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80131e4:	f000 f852 	bl	801328c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80131e8:	4b06      	ldr	r3, [pc, #24]	; (8013204 <prvIdleTask+0x28>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	d9f9      	bls.n	80131e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80131f0:	4b05      	ldr	r3, [pc, #20]	; (8013208 <prvIdleTask+0x2c>)
 80131f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131f6:	601a      	str	r2, [r3, #0]
 80131f8:	f3bf 8f4f 	dsb	sy
 80131fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013200:	e7f0      	b.n	80131e4 <prvIdleTask+0x8>
 8013202:	bf00      	nop
 8013204:	200560ac 	.word	0x200560ac
 8013208:	e000ed04 	.word	0xe000ed04

0801320c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b082      	sub	sp, #8
 8013210:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013212:	2300      	movs	r3, #0
 8013214:	607b      	str	r3, [r7, #4]
 8013216:	e00c      	b.n	8013232 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013218:	687a      	ldr	r2, [r7, #4]
 801321a:	4613      	mov	r3, r2
 801321c:	009b      	lsls	r3, r3, #2
 801321e:	4413      	add	r3, r2
 8013220:	009b      	lsls	r3, r3, #2
 8013222:	4a12      	ldr	r2, [pc, #72]	; (801326c <prvInitialiseTaskLists+0x60>)
 8013224:	4413      	add	r3, r2
 8013226:	4618      	mov	r0, r3
 8013228:	f7fd ff30 	bl	801108c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	3301      	adds	r3, #1
 8013230:	607b      	str	r3, [r7, #4]
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	2b37      	cmp	r3, #55	; 0x37
 8013236:	d9ef      	bls.n	8013218 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013238:	480d      	ldr	r0, [pc, #52]	; (8013270 <prvInitialiseTaskLists+0x64>)
 801323a:	f7fd ff27 	bl	801108c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801323e:	480d      	ldr	r0, [pc, #52]	; (8013274 <prvInitialiseTaskLists+0x68>)
 8013240:	f7fd ff24 	bl	801108c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013244:	480c      	ldr	r0, [pc, #48]	; (8013278 <prvInitialiseTaskLists+0x6c>)
 8013246:	f7fd ff21 	bl	801108c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801324a:	480c      	ldr	r0, [pc, #48]	; (801327c <prvInitialiseTaskLists+0x70>)
 801324c:	f7fd ff1e 	bl	801108c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013250:	480b      	ldr	r0, [pc, #44]	; (8013280 <prvInitialiseTaskLists+0x74>)
 8013252:	f7fd ff1b 	bl	801108c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013256:	4b0b      	ldr	r3, [pc, #44]	; (8013284 <prvInitialiseTaskLists+0x78>)
 8013258:	4a05      	ldr	r2, [pc, #20]	; (8013270 <prvInitialiseTaskLists+0x64>)
 801325a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801325c:	4b0a      	ldr	r3, [pc, #40]	; (8013288 <prvInitialiseTaskLists+0x7c>)
 801325e:	4a05      	ldr	r2, [pc, #20]	; (8013274 <prvInitialiseTaskLists+0x68>)
 8013260:	601a      	str	r2, [r3, #0]
}
 8013262:	bf00      	nop
 8013264:	3708      	adds	r7, #8
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}
 801326a:	bf00      	nop
 801326c:	200560ac 	.word	0x200560ac
 8013270:	2005650c 	.word	0x2005650c
 8013274:	20056520 	.word	0x20056520
 8013278:	2005653c 	.word	0x2005653c
 801327c:	20056550 	.word	0x20056550
 8013280:	20056568 	.word	0x20056568
 8013284:	20056534 	.word	0x20056534
 8013288:	20056538 	.word	0x20056538

0801328c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b082      	sub	sp, #8
 8013290:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013292:	e019      	b.n	80132c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013294:	f7fe f8ba 	bl	801140c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013298:	4b10      	ldr	r3, [pc, #64]	; (80132dc <prvCheckTasksWaitingTermination+0x50>)
 801329a:	68db      	ldr	r3, [r3, #12]
 801329c:	68db      	ldr	r3, [r3, #12]
 801329e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	3304      	adds	r3, #4
 80132a4:	4618      	mov	r0, r3
 80132a6:	f7fd ff7b 	bl	80111a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80132aa:	4b0d      	ldr	r3, [pc, #52]	; (80132e0 <prvCheckTasksWaitingTermination+0x54>)
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	3b01      	subs	r3, #1
 80132b0:	4a0b      	ldr	r2, [pc, #44]	; (80132e0 <prvCheckTasksWaitingTermination+0x54>)
 80132b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80132b4:	4b0b      	ldr	r3, [pc, #44]	; (80132e4 <prvCheckTasksWaitingTermination+0x58>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	3b01      	subs	r3, #1
 80132ba:	4a0a      	ldr	r2, [pc, #40]	; (80132e4 <prvCheckTasksWaitingTermination+0x58>)
 80132bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80132be:	f7fe f8d9 	bl	8011474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80132c2:	6878      	ldr	r0, [r7, #4]
 80132c4:	f000 f810 	bl	80132e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80132c8:	4b06      	ldr	r3, [pc, #24]	; (80132e4 <prvCheckTasksWaitingTermination+0x58>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d1e1      	bne.n	8013294 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80132d0:	bf00      	nop
 80132d2:	bf00      	nop
 80132d4:	3708      	adds	r7, #8
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}
 80132da:	bf00      	nop
 80132dc:	20056550 	.word	0x20056550
 80132e0:	2005657c 	.word	0x2005657c
 80132e4:	20056564 	.word	0x20056564

080132e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b084      	sub	sp, #16
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d108      	bne.n	801330c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132fe:	4618      	mov	r0, r3
 8013300:	f7fd fdaa 	bl	8010e58 <vPortFree>
				vPortFree( pxTCB );
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f7fd fda7 	bl	8010e58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801330a:	e01a      	b.n	8013342 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013312:	2b01      	cmp	r3, #1
 8013314:	d103      	bne.n	801331e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	f7fd fd9e 	bl	8010e58 <vPortFree>
	}
 801331c:	e011      	b.n	8013342 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013324:	2b02      	cmp	r3, #2
 8013326:	d00c      	beq.n	8013342 <prvDeleteTCB+0x5a>
	__asm volatile
 8013328:	f04f 0330 	mov.w	r3, #48	; 0x30
 801332c:	b672      	cpsid	i
 801332e:	f383 8811 	msr	BASEPRI, r3
 8013332:	f3bf 8f6f 	isb	sy
 8013336:	f3bf 8f4f 	dsb	sy
 801333a:	b662      	cpsie	i
 801333c:	60fb      	str	r3, [r7, #12]
}
 801333e:	bf00      	nop
 8013340:	e7fe      	b.n	8013340 <prvDeleteTCB+0x58>
	}
 8013342:	bf00      	nop
 8013344:	3710      	adds	r7, #16
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}
	...

0801334c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801334c:	b480      	push	{r7}
 801334e:	b083      	sub	sp, #12
 8013350:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013352:	4b0c      	ldr	r3, [pc, #48]	; (8013384 <prvResetNextTaskUnblockTime+0x38>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d104      	bne.n	8013366 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801335c:	4b0a      	ldr	r3, [pc, #40]	; (8013388 <prvResetNextTaskUnblockTime+0x3c>)
 801335e:	f04f 32ff 	mov.w	r2, #4294967295
 8013362:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013364:	e008      	b.n	8013378 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013366:	4b07      	ldr	r3, [pc, #28]	; (8013384 <prvResetNextTaskUnblockTime+0x38>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	68db      	ldr	r3, [r3, #12]
 801336c:	68db      	ldr	r3, [r3, #12]
 801336e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	685b      	ldr	r3, [r3, #4]
 8013374:	4a04      	ldr	r2, [pc, #16]	; (8013388 <prvResetNextTaskUnblockTime+0x3c>)
 8013376:	6013      	str	r3, [r2, #0]
}
 8013378:	bf00      	nop
 801337a:	370c      	adds	r7, #12
 801337c:	46bd      	mov	sp, r7
 801337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013382:	4770      	bx	lr
 8013384:	20056534 	.word	0x20056534
 8013388:	2005659c 	.word	0x2005659c

0801338c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801338c:	b480      	push	{r7}
 801338e:	b083      	sub	sp, #12
 8013390:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013392:	4b0b      	ldr	r3, [pc, #44]	; (80133c0 <xTaskGetSchedulerState+0x34>)
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d102      	bne.n	80133a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801339a:	2301      	movs	r3, #1
 801339c:	607b      	str	r3, [r7, #4]
 801339e:	e008      	b.n	80133b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133a0:	4b08      	ldr	r3, [pc, #32]	; (80133c4 <xTaskGetSchedulerState+0x38>)
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d102      	bne.n	80133ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80133a8:	2302      	movs	r3, #2
 80133aa:	607b      	str	r3, [r7, #4]
 80133ac:	e001      	b.n	80133b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80133ae:	2300      	movs	r3, #0
 80133b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80133b2:	687b      	ldr	r3, [r7, #4]
	}
 80133b4:	4618      	mov	r0, r3
 80133b6:	370c      	adds	r7, #12
 80133b8:	46bd      	mov	sp, r7
 80133ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133be:	4770      	bx	lr
 80133c0:	20056588 	.word	0x20056588
 80133c4:	200565a4 	.word	0x200565a4

080133c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b084      	sub	sp, #16
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80133d4:	2300      	movs	r3, #0
 80133d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d051      	beq.n	8013482 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133e2:	4b2a      	ldr	r3, [pc, #168]	; (801348c <xTaskPriorityInherit+0xc4>)
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d241      	bcs.n	8013470 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	699b      	ldr	r3, [r3, #24]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	db06      	blt.n	8013402 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80133f4:	4b25      	ldr	r3, [pc, #148]	; (801348c <xTaskPriorityInherit+0xc4>)
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80133fe:	68bb      	ldr	r3, [r7, #8]
 8013400:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013402:	68bb      	ldr	r3, [r7, #8]
 8013404:	6959      	ldr	r1, [r3, #20]
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801340a:	4613      	mov	r3, r2
 801340c:	009b      	lsls	r3, r3, #2
 801340e:	4413      	add	r3, r2
 8013410:	009b      	lsls	r3, r3, #2
 8013412:	4a1f      	ldr	r2, [pc, #124]	; (8013490 <xTaskPriorityInherit+0xc8>)
 8013414:	4413      	add	r3, r2
 8013416:	4299      	cmp	r1, r3
 8013418:	d122      	bne.n	8013460 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	3304      	adds	r3, #4
 801341e:	4618      	mov	r0, r3
 8013420:	f7fd febe 	bl	80111a0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013424:	4b19      	ldr	r3, [pc, #100]	; (801348c <xTaskPriorityInherit+0xc4>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801342a:	68bb      	ldr	r3, [r7, #8]
 801342c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801342e:	68bb      	ldr	r3, [r7, #8]
 8013430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013432:	4b18      	ldr	r3, [pc, #96]	; (8013494 <xTaskPriorityInherit+0xcc>)
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	429a      	cmp	r2, r3
 8013438:	d903      	bls.n	8013442 <xTaskPriorityInherit+0x7a>
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801343e:	4a15      	ldr	r2, [pc, #84]	; (8013494 <xTaskPriorityInherit+0xcc>)
 8013440:	6013      	str	r3, [r2, #0]
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013446:	4613      	mov	r3, r2
 8013448:	009b      	lsls	r3, r3, #2
 801344a:	4413      	add	r3, r2
 801344c:	009b      	lsls	r3, r3, #2
 801344e:	4a10      	ldr	r2, [pc, #64]	; (8013490 <xTaskPriorityInherit+0xc8>)
 8013450:	441a      	add	r2, r3
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	3304      	adds	r3, #4
 8013456:	4619      	mov	r1, r3
 8013458:	4610      	mov	r0, r2
 801345a:	f7fd fe44 	bl	80110e6 <vListInsertEnd>
 801345e:	e004      	b.n	801346a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013460:	4b0a      	ldr	r3, [pc, #40]	; (801348c <xTaskPriorityInherit+0xc4>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801346a:	2301      	movs	r3, #1
 801346c:	60fb      	str	r3, [r7, #12]
 801346e:	e008      	b.n	8013482 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013470:	68bb      	ldr	r3, [r7, #8]
 8013472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013474:	4b05      	ldr	r3, [pc, #20]	; (801348c <xTaskPriorityInherit+0xc4>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801347a:	429a      	cmp	r2, r3
 801347c:	d201      	bcs.n	8013482 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801347e:	2301      	movs	r3, #1
 8013480:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013482:	68fb      	ldr	r3, [r7, #12]
	}
 8013484:	4618      	mov	r0, r3
 8013486:	3710      	adds	r7, #16
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}
 801348c:	200560a8 	.word	0x200560a8
 8013490:	200560ac 	.word	0x200560ac
 8013494:	20056584 	.word	0x20056584

08013498 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013498:	b580      	push	{r7, lr}
 801349a:	b086      	sub	sp, #24
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80134a4:	2300      	movs	r3, #0
 80134a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d05a      	beq.n	8013564 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80134ae:	4b30      	ldr	r3, [pc, #192]	; (8013570 <xTaskPriorityDisinherit+0xd8>)
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	693a      	ldr	r2, [r7, #16]
 80134b4:	429a      	cmp	r2, r3
 80134b6:	d00c      	beq.n	80134d2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80134b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80134bc:	b672      	cpsid	i
 80134be:	f383 8811 	msr	BASEPRI, r3
 80134c2:	f3bf 8f6f 	isb	sy
 80134c6:	f3bf 8f4f 	dsb	sy
 80134ca:	b662      	cpsie	i
 80134cc:	60fb      	str	r3, [r7, #12]
}
 80134ce:	bf00      	nop
 80134d0:	e7fe      	b.n	80134d0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d10c      	bne.n	80134f4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80134da:	f04f 0330 	mov.w	r3, #48	; 0x30
 80134de:	b672      	cpsid	i
 80134e0:	f383 8811 	msr	BASEPRI, r3
 80134e4:	f3bf 8f6f 	isb	sy
 80134e8:	f3bf 8f4f 	dsb	sy
 80134ec:	b662      	cpsie	i
 80134ee:	60bb      	str	r3, [r7, #8]
}
 80134f0:	bf00      	nop
 80134f2:	e7fe      	b.n	80134f2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134f8:	1e5a      	subs	r2, r3, #1
 80134fa:	693b      	ldr	r3, [r7, #16]
 80134fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80134fe:	693b      	ldr	r3, [r7, #16]
 8013500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013502:	693b      	ldr	r3, [r7, #16]
 8013504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013506:	429a      	cmp	r2, r3
 8013508:	d02c      	beq.n	8013564 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801350a:	693b      	ldr	r3, [r7, #16]
 801350c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801350e:	2b00      	cmp	r3, #0
 8013510:	d128      	bne.n	8013564 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	3304      	adds	r3, #4
 8013516:	4618      	mov	r0, r3
 8013518:	f7fd fe42 	bl	80111a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801351c:	693b      	ldr	r3, [r7, #16]
 801351e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013520:	693b      	ldr	r3, [r7, #16]
 8013522:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013528:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013530:	693b      	ldr	r3, [r7, #16]
 8013532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013534:	4b0f      	ldr	r3, [pc, #60]	; (8013574 <xTaskPriorityDisinherit+0xdc>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	429a      	cmp	r2, r3
 801353a:	d903      	bls.n	8013544 <xTaskPriorityDisinherit+0xac>
 801353c:	693b      	ldr	r3, [r7, #16]
 801353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013540:	4a0c      	ldr	r2, [pc, #48]	; (8013574 <xTaskPriorityDisinherit+0xdc>)
 8013542:	6013      	str	r3, [r2, #0]
 8013544:	693b      	ldr	r3, [r7, #16]
 8013546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013548:	4613      	mov	r3, r2
 801354a:	009b      	lsls	r3, r3, #2
 801354c:	4413      	add	r3, r2
 801354e:	009b      	lsls	r3, r3, #2
 8013550:	4a09      	ldr	r2, [pc, #36]	; (8013578 <xTaskPriorityDisinherit+0xe0>)
 8013552:	441a      	add	r2, r3
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	3304      	adds	r3, #4
 8013558:	4619      	mov	r1, r3
 801355a:	4610      	mov	r0, r2
 801355c:	f7fd fdc3 	bl	80110e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013560:	2301      	movs	r3, #1
 8013562:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013564:	697b      	ldr	r3, [r7, #20]
	}
 8013566:	4618      	mov	r0, r3
 8013568:	3718      	adds	r7, #24
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}
 801356e:	bf00      	nop
 8013570:	200560a8 	.word	0x200560a8
 8013574:	20056584 	.word	0x20056584
 8013578:	200560ac 	.word	0x200560ac

0801357c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801357c:	b580      	push	{r7, lr}
 801357e:	b088      	sub	sp, #32
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
 8013584:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801358a:	2301      	movs	r3, #1
 801358c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d06e      	beq.n	8013672 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013594:	69bb      	ldr	r3, [r7, #24]
 8013596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013598:	2b00      	cmp	r3, #0
 801359a:	d10c      	bne.n	80135b6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 801359c:	f04f 0330 	mov.w	r3, #48	; 0x30
 80135a0:	b672      	cpsid	i
 80135a2:	f383 8811 	msr	BASEPRI, r3
 80135a6:	f3bf 8f6f 	isb	sy
 80135aa:	f3bf 8f4f 	dsb	sy
 80135ae:	b662      	cpsie	i
 80135b0:	60fb      	str	r3, [r7, #12]
}
 80135b2:	bf00      	nop
 80135b4:	e7fe      	b.n	80135b4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80135b6:	69bb      	ldr	r3, [r7, #24]
 80135b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80135ba:	683a      	ldr	r2, [r7, #0]
 80135bc:	429a      	cmp	r2, r3
 80135be:	d902      	bls.n	80135c6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	61fb      	str	r3, [r7, #28]
 80135c4:	e002      	b.n	80135cc <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80135c6:	69bb      	ldr	r3, [r7, #24]
 80135c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80135ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80135cc:	69bb      	ldr	r3, [r7, #24]
 80135ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135d0:	69fa      	ldr	r2, [r7, #28]
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d04d      	beq.n	8013672 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80135d6:	69bb      	ldr	r3, [r7, #24]
 80135d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135da:	697a      	ldr	r2, [r7, #20]
 80135dc:	429a      	cmp	r2, r3
 80135de:	d148      	bne.n	8013672 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80135e0:	4b26      	ldr	r3, [pc, #152]	; (801367c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	69ba      	ldr	r2, [r7, #24]
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d10c      	bne.n	8013604 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80135ea:	f04f 0330 	mov.w	r3, #48	; 0x30
 80135ee:	b672      	cpsid	i
 80135f0:	f383 8811 	msr	BASEPRI, r3
 80135f4:	f3bf 8f6f 	isb	sy
 80135f8:	f3bf 8f4f 	dsb	sy
 80135fc:	b662      	cpsie	i
 80135fe:	60bb      	str	r3, [r7, #8]
}
 8013600:	bf00      	nop
 8013602:	e7fe      	b.n	8013602 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013604:	69bb      	ldr	r3, [r7, #24]
 8013606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013608:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801360a:	69bb      	ldr	r3, [r7, #24]
 801360c:	69fa      	ldr	r2, [r7, #28]
 801360e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013610:	69bb      	ldr	r3, [r7, #24]
 8013612:	699b      	ldr	r3, [r3, #24]
 8013614:	2b00      	cmp	r3, #0
 8013616:	db04      	blt.n	8013622 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013618:	69fb      	ldr	r3, [r7, #28]
 801361a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801361e:	69bb      	ldr	r3, [r7, #24]
 8013620:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013622:	69bb      	ldr	r3, [r7, #24]
 8013624:	6959      	ldr	r1, [r3, #20]
 8013626:	693a      	ldr	r2, [r7, #16]
 8013628:	4613      	mov	r3, r2
 801362a:	009b      	lsls	r3, r3, #2
 801362c:	4413      	add	r3, r2
 801362e:	009b      	lsls	r3, r3, #2
 8013630:	4a13      	ldr	r2, [pc, #76]	; (8013680 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8013632:	4413      	add	r3, r2
 8013634:	4299      	cmp	r1, r3
 8013636:	d11c      	bne.n	8013672 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013638:	69bb      	ldr	r3, [r7, #24]
 801363a:	3304      	adds	r3, #4
 801363c:	4618      	mov	r0, r3
 801363e:	f7fd fdaf 	bl	80111a0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013642:	69bb      	ldr	r3, [r7, #24]
 8013644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013646:	4b0f      	ldr	r3, [pc, #60]	; (8013684 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	429a      	cmp	r2, r3
 801364c:	d903      	bls.n	8013656 <vTaskPriorityDisinheritAfterTimeout+0xda>
 801364e:	69bb      	ldr	r3, [r7, #24]
 8013650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013652:	4a0c      	ldr	r2, [pc, #48]	; (8013684 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8013654:	6013      	str	r3, [r2, #0]
 8013656:	69bb      	ldr	r3, [r7, #24]
 8013658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801365a:	4613      	mov	r3, r2
 801365c:	009b      	lsls	r3, r3, #2
 801365e:	4413      	add	r3, r2
 8013660:	009b      	lsls	r3, r3, #2
 8013662:	4a07      	ldr	r2, [pc, #28]	; (8013680 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8013664:	441a      	add	r2, r3
 8013666:	69bb      	ldr	r3, [r7, #24]
 8013668:	3304      	adds	r3, #4
 801366a:	4619      	mov	r1, r3
 801366c:	4610      	mov	r0, r2
 801366e:	f7fd fd3a 	bl	80110e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013672:	bf00      	nop
 8013674:	3720      	adds	r7, #32
 8013676:	46bd      	mov	sp, r7
 8013678:	bd80      	pop	{r7, pc}
 801367a:	bf00      	nop
 801367c:	200560a8 	.word	0x200560a8
 8013680:	200560ac 	.word	0x200560ac
 8013684:	20056584 	.word	0x20056584

08013688 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013688:	b480      	push	{r7}
 801368a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801368c:	4b07      	ldr	r3, [pc, #28]	; (80136ac <pvTaskIncrementMutexHeldCount+0x24>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d004      	beq.n	801369e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013694:	4b05      	ldr	r3, [pc, #20]	; (80136ac <pvTaskIncrementMutexHeldCount+0x24>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801369a:	3201      	adds	r2, #1
 801369c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801369e:	4b03      	ldr	r3, [pc, #12]	; (80136ac <pvTaskIncrementMutexHeldCount+0x24>)
 80136a0:	681b      	ldr	r3, [r3, #0]
	}
 80136a2:	4618      	mov	r0, r3
 80136a4:	46bd      	mov	sp, r7
 80136a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136aa:	4770      	bx	lr
 80136ac:	200560a8 	.word	0x200560a8

080136b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b084      	sub	sp, #16
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
 80136b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80136ba:	4b21      	ldr	r3, [pc, #132]	; (8013740 <prvAddCurrentTaskToDelayedList+0x90>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80136c0:	4b20      	ldr	r3, [pc, #128]	; (8013744 <prvAddCurrentTaskToDelayedList+0x94>)
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	3304      	adds	r3, #4
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7fd fd6a 	bl	80111a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136d2:	d10a      	bne.n	80136ea <prvAddCurrentTaskToDelayedList+0x3a>
 80136d4:	683b      	ldr	r3, [r7, #0]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d007      	beq.n	80136ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80136da:	4b1a      	ldr	r3, [pc, #104]	; (8013744 <prvAddCurrentTaskToDelayedList+0x94>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	3304      	adds	r3, #4
 80136e0:	4619      	mov	r1, r3
 80136e2:	4819      	ldr	r0, [pc, #100]	; (8013748 <prvAddCurrentTaskToDelayedList+0x98>)
 80136e4:	f7fd fcff 	bl	80110e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80136e8:	e026      	b.n	8013738 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80136ea:	68fa      	ldr	r2, [r7, #12]
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	4413      	add	r3, r2
 80136f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80136f2:	4b14      	ldr	r3, [pc, #80]	; (8013744 <prvAddCurrentTaskToDelayedList+0x94>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	68ba      	ldr	r2, [r7, #8]
 80136f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80136fa:	68ba      	ldr	r2, [r7, #8]
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	429a      	cmp	r2, r3
 8013700:	d209      	bcs.n	8013716 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013702:	4b12      	ldr	r3, [pc, #72]	; (801374c <prvAddCurrentTaskToDelayedList+0x9c>)
 8013704:	681a      	ldr	r2, [r3, #0]
 8013706:	4b0f      	ldr	r3, [pc, #60]	; (8013744 <prvAddCurrentTaskToDelayedList+0x94>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	3304      	adds	r3, #4
 801370c:	4619      	mov	r1, r3
 801370e:	4610      	mov	r0, r2
 8013710:	f7fd fd0d 	bl	801112e <vListInsert>
}
 8013714:	e010      	b.n	8013738 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013716:	4b0e      	ldr	r3, [pc, #56]	; (8013750 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013718:	681a      	ldr	r2, [r3, #0]
 801371a:	4b0a      	ldr	r3, [pc, #40]	; (8013744 <prvAddCurrentTaskToDelayedList+0x94>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	3304      	adds	r3, #4
 8013720:	4619      	mov	r1, r3
 8013722:	4610      	mov	r0, r2
 8013724:	f7fd fd03 	bl	801112e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013728:	4b0a      	ldr	r3, [pc, #40]	; (8013754 <prvAddCurrentTaskToDelayedList+0xa4>)
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	68ba      	ldr	r2, [r7, #8]
 801372e:	429a      	cmp	r2, r3
 8013730:	d202      	bcs.n	8013738 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013732:	4a08      	ldr	r2, [pc, #32]	; (8013754 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013734:	68bb      	ldr	r3, [r7, #8]
 8013736:	6013      	str	r3, [r2, #0]
}
 8013738:	bf00      	nop
 801373a:	3710      	adds	r7, #16
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}
 8013740:	20056580 	.word	0x20056580
 8013744:	200560a8 	.word	0x200560a8
 8013748:	20056568 	.word	0x20056568
 801374c:	20056538 	.word	0x20056538
 8013750:	20056534 	.word	0x20056534
 8013754:	2005659c 	.word	0x2005659c

08013758 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b08a      	sub	sp, #40	; 0x28
 801375c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801375e:	2300      	movs	r3, #0
 8013760:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013762:	f000 fb15 	bl	8013d90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013766:	4b1d      	ldr	r3, [pc, #116]	; (80137dc <xTimerCreateTimerTask+0x84>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d021      	beq.n	80137b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801376e:	2300      	movs	r3, #0
 8013770:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013772:	2300      	movs	r3, #0
 8013774:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013776:	1d3a      	adds	r2, r7, #4
 8013778:	f107 0108 	add.w	r1, r7, #8
 801377c:	f107 030c 	add.w	r3, r7, #12
 8013780:	4618      	mov	r0, r3
 8013782:	f7fd fa85 	bl	8010c90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013786:	6879      	ldr	r1, [r7, #4]
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	68fa      	ldr	r2, [r7, #12]
 801378c:	9202      	str	r2, [sp, #8]
 801378e:	9301      	str	r3, [sp, #4]
 8013790:	2302      	movs	r3, #2
 8013792:	9300      	str	r3, [sp, #0]
 8013794:	2300      	movs	r3, #0
 8013796:	460a      	mov	r2, r1
 8013798:	4911      	ldr	r1, [pc, #68]	; (80137e0 <xTimerCreateTimerTask+0x88>)
 801379a:	4812      	ldr	r0, [pc, #72]	; (80137e4 <xTimerCreateTimerTask+0x8c>)
 801379c:	f7fe ffb8 	bl	8012710 <xTaskCreateStatic>
 80137a0:	4603      	mov	r3, r0
 80137a2:	4a11      	ldr	r2, [pc, #68]	; (80137e8 <xTimerCreateTimerTask+0x90>)
 80137a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80137a6:	4b10      	ldr	r3, [pc, #64]	; (80137e8 <xTimerCreateTimerTask+0x90>)
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d001      	beq.n	80137b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80137ae:	2301      	movs	r3, #1
 80137b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d10c      	bne.n	80137d2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80137b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80137bc:	b672      	cpsid	i
 80137be:	f383 8811 	msr	BASEPRI, r3
 80137c2:	f3bf 8f6f 	isb	sy
 80137c6:	f3bf 8f4f 	dsb	sy
 80137ca:	b662      	cpsie	i
 80137cc:	613b      	str	r3, [r7, #16]
}
 80137ce:	bf00      	nop
 80137d0:	e7fe      	b.n	80137d0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80137d2:	697b      	ldr	r3, [r7, #20]
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	3718      	adds	r7, #24
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}
 80137dc:	200565d8 	.word	0x200565d8
 80137e0:	0802a1d8 	.word	0x0802a1d8
 80137e4:	08013929 	.word	0x08013929
 80137e8:	200565dc 	.word	0x200565dc

080137ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b08a      	sub	sp, #40	; 0x28
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	60f8      	str	r0, [r7, #12]
 80137f4:	60b9      	str	r1, [r7, #8]
 80137f6:	607a      	str	r2, [r7, #4]
 80137f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80137fa:	2300      	movs	r3, #0
 80137fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d10c      	bne.n	801381e <xTimerGenericCommand+0x32>
	__asm volatile
 8013804:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013808:	b672      	cpsid	i
 801380a:	f383 8811 	msr	BASEPRI, r3
 801380e:	f3bf 8f6f 	isb	sy
 8013812:	f3bf 8f4f 	dsb	sy
 8013816:	b662      	cpsie	i
 8013818:	623b      	str	r3, [r7, #32]
}
 801381a:	bf00      	nop
 801381c:	e7fe      	b.n	801381c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801381e:	4b1a      	ldr	r3, [pc, #104]	; (8013888 <xTimerGenericCommand+0x9c>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d02a      	beq.n	801387c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013832:	68bb      	ldr	r3, [r7, #8]
 8013834:	2b05      	cmp	r3, #5
 8013836:	dc18      	bgt.n	801386a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013838:	f7ff fda8 	bl	801338c <xTaskGetSchedulerState>
 801383c:	4603      	mov	r3, r0
 801383e:	2b02      	cmp	r3, #2
 8013840:	d109      	bne.n	8013856 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013842:	4b11      	ldr	r3, [pc, #68]	; (8013888 <xTimerGenericCommand+0x9c>)
 8013844:	6818      	ldr	r0, [r3, #0]
 8013846:	f107 0110 	add.w	r1, r7, #16
 801384a:	2300      	movs	r3, #0
 801384c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801384e:	f7fe f8cd 	bl	80119ec <xQueueGenericSend>
 8013852:	6278      	str	r0, [r7, #36]	; 0x24
 8013854:	e012      	b.n	801387c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013856:	4b0c      	ldr	r3, [pc, #48]	; (8013888 <xTimerGenericCommand+0x9c>)
 8013858:	6818      	ldr	r0, [r3, #0]
 801385a:	f107 0110 	add.w	r1, r7, #16
 801385e:	2300      	movs	r3, #0
 8013860:	2200      	movs	r2, #0
 8013862:	f7fe f8c3 	bl	80119ec <xQueueGenericSend>
 8013866:	6278      	str	r0, [r7, #36]	; 0x24
 8013868:	e008      	b.n	801387c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801386a:	4b07      	ldr	r3, [pc, #28]	; (8013888 <xTimerGenericCommand+0x9c>)
 801386c:	6818      	ldr	r0, [r3, #0]
 801386e:	f107 0110 	add.w	r1, r7, #16
 8013872:	2300      	movs	r3, #0
 8013874:	683a      	ldr	r2, [r7, #0]
 8013876:	f7fe f9bf 	bl	8011bf8 <xQueueGenericSendFromISR>
 801387a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801387e:	4618      	mov	r0, r3
 8013880:	3728      	adds	r7, #40	; 0x28
 8013882:	46bd      	mov	sp, r7
 8013884:	bd80      	pop	{r7, pc}
 8013886:	bf00      	nop
 8013888:	200565d8 	.word	0x200565d8

0801388c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b088      	sub	sp, #32
 8013890:	af02      	add	r7, sp, #8
 8013892:	6078      	str	r0, [r7, #4]
 8013894:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013896:	4b23      	ldr	r3, [pc, #140]	; (8013924 <prvProcessExpiredTimer+0x98>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	68db      	ldr	r3, [r3, #12]
 801389c:	68db      	ldr	r3, [r3, #12]
 801389e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80138a0:	697b      	ldr	r3, [r7, #20]
 80138a2:	3304      	adds	r3, #4
 80138a4:	4618      	mov	r0, r3
 80138a6:	f7fd fc7b 	bl	80111a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80138aa:	697b      	ldr	r3, [r7, #20]
 80138ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80138b0:	f003 0304 	and.w	r3, r3, #4
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d024      	beq.n	8013902 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80138b8:	697b      	ldr	r3, [r7, #20]
 80138ba:	699a      	ldr	r2, [r3, #24]
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	18d1      	adds	r1, r2, r3
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	683a      	ldr	r2, [r7, #0]
 80138c4:	6978      	ldr	r0, [r7, #20]
 80138c6:	f000 f8d3 	bl	8013a70 <prvInsertTimerInActiveList>
 80138ca:	4603      	mov	r3, r0
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d021      	beq.n	8013914 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80138d0:	2300      	movs	r3, #0
 80138d2:	9300      	str	r3, [sp, #0]
 80138d4:	2300      	movs	r3, #0
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	2100      	movs	r1, #0
 80138da:	6978      	ldr	r0, [r7, #20]
 80138dc:	f7ff ff86 	bl	80137ec <xTimerGenericCommand>
 80138e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80138e2:	693b      	ldr	r3, [r7, #16]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d115      	bne.n	8013914 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80138e8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80138ec:	b672      	cpsid	i
 80138ee:	f383 8811 	msr	BASEPRI, r3
 80138f2:	f3bf 8f6f 	isb	sy
 80138f6:	f3bf 8f4f 	dsb	sy
 80138fa:	b662      	cpsie	i
 80138fc:	60fb      	str	r3, [r7, #12]
}
 80138fe:	bf00      	nop
 8013900:	e7fe      	b.n	8013900 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013908:	f023 0301 	bic.w	r3, r3, #1
 801390c:	b2da      	uxtb	r2, r3
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013914:	697b      	ldr	r3, [r7, #20]
 8013916:	6a1b      	ldr	r3, [r3, #32]
 8013918:	6978      	ldr	r0, [r7, #20]
 801391a:	4798      	blx	r3
}
 801391c:	bf00      	nop
 801391e:	3718      	adds	r7, #24
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}
 8013924:	200565d0 	.word	0x200565d0

08013928 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b084      	sub	sp, #16
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013930:	f107 0308 	add.w	r3, r7, #8
 8013934:	4618      	mov	r0, r3
 8013936:	f000 f857 	bl	80139e8 <prvGetNextExpireTime>
 801393a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801393c:	68bb      	ldr	r3, [r7, #8]
 801393e:	4619      	mov	r1, r3
 8013940:	68f8      	ldr	r0, [r7, #12]
 8013942:	f000 f803 	bl	801394c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013946:	f000 f8d5 	bl	8013af4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801394a:	e7f1      	b.n	8013930 <prvTimerTask+0x8>

0801394c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b084      	sub	sp, #16
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
 8013954:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013956:	f7ff f925 	bl	8012ba4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801395a:	f107 0308 	add.w	r3, r7, #8
 801395e:	4618      	mov	r0, r3
 8013960:	f000 f866 	bl	8013a30 <prvSampleTimeNow>
 8013964:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d130      	bne.n	80139ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801396c:	683b      	ldr	r3, [r7, #0]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d10a      	bne.n	8013988 <prvProcessTimerOrBlockTask+0x3c>
 8013972:	687a      	ldr	r2, [r7, #4]
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	429a      	cmp	r2, r3
 8013978:	d806      	bhi.n	8013988 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801397a:	f7ff f921 	bl	8012bc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801397e:	68f9      	ldr	r1, [r7, #12]
 8013980:	6878      	ldr	r0, [r7, #4]
 8013982:	f7ff ff83 	bl	801388c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013986:	e024      	b.n	80139d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d008      	beq.n	80139a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801398e:	4b13      	ldr	r3, [pc, #76]	; (80139dc <prvProcessTimerOrBlockTask+0x90>)
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d101      	bne.n	801399c <prvProcessTimerOrBlockTask+0x50>
 8013998:	2301      	movs	r3, #1
 801399a:	e000      	b.n	801399e <prvProcessTimerOrBlockTask+0x52>
 801399c:	2300      	movs	r3, #0
 801399e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80139a0:	4b0f      	ldr	r3, [pc, #60]	; (80139e0 <prvProcessTimerOrBlockTask+0x94>)
 80139a2:	6818      	ldr	r0, [r3, #0]
 80139a4:	687a      	ldr	r2, [r7, #4]
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	1ad3      	subs	r3, r2, r3
 80139aa:	683a      	ldr	r2, [r7, #0]
 80139ac:	4619      	mov	r1, r3
 80139ae:	f7fe fe7b 	bl	80126a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80139b2:	f7ff f905 	bl	8012bc0 <xTaskResumeAll>
 80139b6:	4603      	mov	r3, r0
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d10a      	bne.n	80139d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80139bc:	4b09      	ldr	r3, [pc, #36]	; (80139e4 <prvProcessTimerOrBlockTask+0x98>)
 80139be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139c2:	601a      	str	r2, [r3, #0]
 80139c4:	f3bf 8f4f 	dsb	sy
 80139c8:	f3bf 8f6f 	isb	sy
}
 80139cc:	e001      	b.n	80139d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80139ce:	f7ff f8f7 	bl	8012bc0 <xTaskResumeAll>
}
 80139d2:	bf00      	nop
 80139d4:	3710      	adds	r7, #16
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}
 80139da:	bf00      	nop
 80139dc:	200565d4 	.word	0x200565d4
 80139e0:	200565d8 	.word	0x200565d8
 80139e4:	e000ed04 	.word	0xe000ed04

080139e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80139e8:	b480      	push	{r7}
 80139ea:	b085      	sub	sp, #20
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80139f0:	4b0e      	ldr	r3, [pc, #56]	; (8013a2c <prvGetNextExpireTime+0x44>)
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d101      	bne.n	80139fe <prvGetNextExpireTime+0x16>
 80139fa:	2201      	movs	r2, #1
 80139fc:	e000      	b.n	8013a00 <prvGetNextExpireTime+0x18>
 80139fe:	2200      	movs	r2, #0
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d105      	bne.n	8013a18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013a0c:	4b07      	ldr	r3, [pc, #28]	; (8013a2c <prvGetNextExpireTime+0x44>)
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	68db      	ldr	r3, [r3, #12]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	60fb      	str	r3, [r7, #12]
 8013a16:	e001      	b.n	8013a1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013a18:	2300      	movs	r3, #0
 8013a1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013a1c:	68fb      	ldr	r3, [r7, #12]
}
 8013a1e:	4618      	mov	r0, r3
 8013a20:	3714      	adds	r7, #20
 8013a22:	46bd      	mov	sp, r7
 8013a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a28:	4770      	bx	lr
 8013a2a:	bf00      	nop
 8013a2c:	200565d0 	.word	0x200565d0

08013a30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b084      	sub	sp, #16
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013a38:	f7ff f962 	bl	8012d00 <xTaskGetTickCount>
 8013a3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013a3e:	4b0b      	ldr	r3, [pc, #44]	; (8013a6c <prvSampleTimeNow+0x3c>)
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	68fa      	ldr	r2, [r7, #12]
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d205      	bcs.n	8013a54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013a48:	f000 f93c 	bl	8013cc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2201      	movs	r2, #1
 8013a50:	601a      	str	r2, [r3, #0]
 8013a52:	e002      	b.n	8013a5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	2200      	movs	r2, #0
 8013a58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013a5a:	4a04      	ldr	r2, [pc, #16]	; (8013a6c <prvSampleTimeNow+0x3c>)
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013a60:	68fb      	ldr	r3, [r7, #12]
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3710      	adds	r7, #16
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}
 8013a6a:	bf00      	nop
 8013a6c:	200565e0 	.word	0x200565e0

08013a70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b086      	sub	sp, #24
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	60f8      	str	r0, [r7, #12]
 8013a78:	60b9      	str	r1, [r7, #8]
 8013a7a:	607a      	str	r2, [r7, #4]
 8013a7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	68ba      	ldr	r2, [r7, #8]
 8013a86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	68fa      	ldr	r2, [r7, #12]
 8013a8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013a8e:	68ba      	ldr	r2, [r7, #8]
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	429a      	cmp	r2, r3
 8013a94:	d812      	bhi.n	8013abc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a96:	687a      	ldr	r2, [r7, #4]
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	1ad2      	subs	r2, r2, r3
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	699b      	ldr	r3, [r3, #24]
 8013aa0:	429a      	cmp	r2, r3
 8013aa2:	d302      	bcc.n	8013aaa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	617b      	str	r3, [r7, #20]
 8013aa8:	e01b      	b.n	8013ae2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013aaa:	4b10      	ldr	r3, [pc, #64]	; (8013aec <prvInsertTimerInActiveList+0x7c>)
 8013aac:	681a      	ldr	r2, [r3, #0]
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	3304      	adds	r3, #4
 8013ab2:	4619      	mov	r1, r3
 8013ab4:	4610      	mov	r0, r2
 8013ab6:	f7fd fb3a 	bl	801112e <vListInsert>
 8013aba:	e012      	b.n	8013ae2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013abc:	687a      	ldr	r2, [r7, #4]
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	429a      	cmp	r2, r3
 8013ac2:	d206      	bcs.n	8013ad2 <prvInsertTimerInActiveList+0x62>
 8013ac4:	68ba      	ldr	r2, [r7, #8]
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	429a      	cmp	r2, r3
 8013aca:	d302      	bcc.n	8013ad2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013acc:	2301      	movs	r3, #1
 8013ace:	617b      	str	r3, [r7, #20]
 8013ad0:	e007      	b.n	8013ae2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013ad2:	4b07      	ldr	r3, [pc, #28]	; (8013af0 <prvInsertTimerInActiveList+0x80>)
 8013ad4:	681a      	ldr	r2, [r3, #0]
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	3304      	adds	r3, #4
 8013ada:	4619      	mov	r1, r3
 8013adc:	4610      	mov	r0, r2
 8013ade:	f7fd fb26 	bl	801112e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013ae2:	697b      	ldr	r3, [r7, #20]
}
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	3718      	adds	r7, #24
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}
 8013aec:	200565d4 	.word	0x200565d4
 8013af0:	200565d0 	.word	0x200565d0

08013af4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b08e      	sub	sp, #56	; 0x38
 8013af8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013afa:	e0d0      	b.n	8013c9e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	da1a      	bge.n	8013b38 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013b02:	1d3b      	adds	r3, r7, #4
 8013b04:	3304      	adds	r3, #4
 8013b06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d10c      	bne.n	8013b28 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8013b0e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013b12:	b672      	cpsid	i
 8013b14:	f383 8811 	msr	BASEPRI, r3
 8013b18:	f3bf 8f6f 	isb	sy
 8013b1c:	f3bf 8f4f 	dsb	sy
 8013b20:	b662      	cpsie	i
 8013b22:	61fb      	str	r3, [r7, #28]
}
 8013b24:	bf00      	nop
 8013b26:	e7fe      	b.n	8013b26 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b2e:	6850      	ldr	r0, [r2, #4]
 8013b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b32:	6892      	ldr	r2, [r2, #8]
 8013b34:	4611      	mov	r1, r2
 8013b36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	f2c0 80ae 	blt.w	8013c9c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b46:	695b      	ldr	r3, [r3, #20]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d004      	beq.n	8013b56 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b4e:	3304      	adds	r3, #4
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7fd fb25 	bl	80111a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013b56:	463b      	mov	r3, r7
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7ff ff69 	bl	8013a30 <prvSampleTimeNow>
 8013b5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2b09      	cmp	r3, #9
 8013b64:	f200 809b 	bhi.w	8013c9e <prvProcessReceivedCommands+0x1aa>
 8013b68:	a201      	add	r2, pc, #4	; (adr r2, 8013b70 <prvProcessReceivedCommands+0x7c>)
 8013b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b6e:	bf00      	nop
 8013b70:	08013b99 	.word	0x08013b99
 8013b74:	08013b99 	.word	0x08013b99
 8013b78:	08013b99 	.word	0x08013b99
 8013b7c:	08013c11 	.word	0x08013c11
 8013b80:	08013c25 	.word	0x08013c25
 8013b84:	08013c73 	.word	0x08013c73
 8013b88:	08013b99 	.word	0x08013b99
 8013b8c:	08013b99 	.word	0x08013b99
 8013b90:	08013c11 	.word	0x08013c11
 8013b94:	08013c25 	.word	0x08013c25
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b9e:	f043 0301 	orr.w	r3, r3, #1
 8013ba2:	b2da      	uxtb	r2, r3
 8013ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013baa:	68ba      	ldr	r2, [r7, #8]
 8013bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bae:	699b      	ldr	r3, [r3, #24]
 8013bb0:	18d1      	adds	r1, r2, r3
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013bb8:	f7ff ff5a 	bl	8013a70 <prvInsertTimerInActiveList>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d06d      	beq.n	8013c9e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc4:	6a1b      	ldr	r3, [r3, #32]
 8013bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013bc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013bd0:	f003 0304 	and.w	r3, r3, #4
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d062      	beq.n	8013c9e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013bd8:	68ba      	ldr	r2, [r7, #8]
 8013bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bdc:	699b      	ldr	r3, [r3, #24]
 8013bde:	441a      	add	r2, r3
 8013be0:	2300      	movs	r3, #0
 8013be2:	9300      	str	r3, [sp, #0]
 8013be4:	2300      	movs	r3, #0
 8013be6:	2100      	movs	r1, #0
 8013be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013bea:	f7ff fdff 	bl	80137ec <xTimerGenericCommand>
 8013bee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013bf0:	6a3b      	ldr	r3, [r7, #32]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d153      	bne.n	8013c9e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8013bf6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013bfa:	b672      	cpsid	i
 8013bfc:	f383 8811 	msr	BASEPRI, r3
 8013c00:	f3bf 8f6f 	isb	sy
 8013c04:	f3bf 8f4f 	dsb	sy
 8013c08:	b662      	cpsie	i
 8013c0a:	61bb      	str	r3, [r7, #24]
}
 8013c0c:	bf00      	nop
 8013c0e:	e7fe      	b.n	8013c0e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c16:	f023 0301 	bic.w	r3, r3, #1
 8013c1a:	b2da      	uxtb	r2, r3
 8013c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013c22:	e03c      	b.n	8013c9e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c2a:	f043 0301 	orr.w	r3, r3, #1
 8013c2e:	b2da      	uxtb	r2, r3
 8013c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013c36:	68ba      	ldr	r2, [r7, #8]
 8013c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c3e:	699b      	ldr	r3, [r3, #24]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d10c      	bne.n	8013c5e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8013c44:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013c48:	b672      	cpsid	i
 8013c4a:	f383 8811 	msr	BASEPRI, r3
 8013c4e:	f3bf 8f6f 	isb	sy
 8013c52:	f3bf 8f4f 	dsb	sy
 8013c56:	b662      	cpsie	i
 8013c58:	617b      	str	r3, [r7, #20]
}
 8013c5a:	bf00      	nop
 8013c5c:	e7fe      	b.n	8013c5c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c60:	699a      	ldr	r2, [r3, #24]
 8013c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c64:	18d1      	adds	r1, r2, r3
 8013c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c6c:	f7ff ff00 	bl	8013a70 <prvInsertTimerInActiveList>
					break;
 8013c70:	e015      	b.n	8013c9e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c78:	f003 0302 	and.w	r3, r3, #2
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d103      	bne.n	8013c88 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8013c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c82:	f7fd f8e9 	bl	8010e58 <vPortFree>
 8013c86:	e00a      	b.n	8013c9e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c8e:	f023 0301 	bic.w	r3, r3, #1
 8013c92:	b2da      	uxtb	r2, r3
 8013c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013c9a:	e000      	b.n	8013c9e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013c9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013c9e:	4b08      	ldr	r3, [pc, #32]	; (8013cc0 <prvProcessReceivedCommands+0x1cc>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	1d39      	adds	r1, r7, #4
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f7fe f8dc 	bl	8011e64 <xQueueReceive>
 8013cac:	4603      	mov	r3, r0
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	f47f af24 	bne.w	8013afc <prvProcessReceivedCommands+0x8>
	}
}
 8013cb4:	bf00      	nop
 8013cb6:	bf00      	nop
 8013cb8:	3730      	adds	r7, #48	; 0x30
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}
 8013cbe:	bf00      	nop
 8013cc0:	200565d8 	.word	0x200565d8

08013cc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b088      	sub	sp, #32
 8013cc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013cca:	e04a      	b.n	8013d62 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013ccc:	4b2e      	ldr	r3, [pc, #184]	; (8013d88 <prvSwitchTimerLists+0xc4>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	68db      	ldr	r3, [r3, #12]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013cd6:	4b2c      	ldr	r3, [pc, #176]	; (8013d88 <prvSwitchTimerLists+0xc4>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	68db      	ldr	r3, [r3, #12]
 8013cdc:	68db      	ldr	r3, [r3, #12]
 8013cde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	3304      	adds	r3, #4
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7fd fa5b 	bl	80111a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	6a1b      	ldr	r3, [r3, #32]
 8013cee:	68f8      	ldr	r0, [r7, #12]
 8013cf0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013cf8:	f003 0304 	and.w	r3, r3, #4
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d030      	beq.n	8013d62 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	699b      	ldr	r3, [r3, #24]
 8013d04:	693a      	ldr	r2, [r7, #16]
 8013d06:	4413      	add	r3, r2
 8013d08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013d0a:	68ba      	ldr	r2, [r7, #8]
 8013d0c:	693b      	ldr	r3, [r7, #16]
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	d90e      	bls.n	8013d30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	68ba      	ldr	r2, [r7, #8]
 8013d16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	68fa      	ldr	r2, [r7, #12]
 8013d1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013d1e:	4b1a      	ldr	r3, [pc, #104]	; (8013d88 <prvSwitchTimerLists+0xc4>)
 8013d20:	681a      	ldr	r2, [r3, #0]
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	3304      	adds	r3, #4
 8013d26:	4619      	mov	r1, r3
 8013d28:	4610      	mov	r0, r2
 8013d2a:	f7fd fa00 	bl	801112e <vListInsert>
 8013d2e:	e018      	b.n	8013d62 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013d30:	2300      	movs	r3, #0
 8013d32:	9300      	str	r3, [sp, #0]
 8013d34:	2300      	movs	r3, #0
 8013d36:	693a      	ldr	r2, [r7, #16]
 8013d38:	2100      	movs	r1, #0
 8013d3a:	68f8      	ldr	r0, [r7, #12]
 8013d3c:	f7ff fd56 	bl	80137ec <xTimerGenericCommand>
 8013d40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d10c      	bne.n	8013d62 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8013d48:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013d4c:	b672      	cpsid	i
 8013d4e:	f383 8811 	msr	BASEPRI, r3
 8013d52:	f3bf 8f6f 	isb	sy
 8013d56:	f3bf 8f4f 	dsb	sy
 8013d5a:	b662      	cpsie	i
 8013d5c:	603b      	str	r3, [r7, #0]
}
 8013d5e:	bf00      	nop
 8013d60:	e7fe      	b.n	8013d60 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013d62:	4b09      	ldr	r3, [pc, #36]	; (8013d88 <prvSwitchTimerLists+0xc4>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d1af      	bne.n	8013ccc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013d6c:	4b06      	ldr	r3, [pc, #24]	; (8013d88 <prvSwitchTimerLists+0xc4>)
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013d72:	4b06      	ldr	r3, [pc, #24]	; (8013d8c <prvSwitchTimerLists+0xc8>)
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	4a04      	ldr	r2, [pc, #16]	; (8013d88 <prvSwitchTimerLists+0xc4>)
 8013d78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013d7a:	4a04      	ldr	r2, [pc, #16]	; (8013d8c <prvSwitchTimerLists+0xc8>)
 8013d7c:	697b      	ldr	r3, [r7, #20]
 8013d7e:	6013      	str	r3, [r2, #0]
}
 8013d80:	bf00      	nop
 8013d82:	3718      	adds	r7, #24
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}
 8013d88:	200565d0 	.word	0x200565d0
 8013d8c:	200565d4 	.word	0x200565d4

08013d90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b082      	sub	sp, #8
 8013d94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013d96:	f7fd fb39 	bl	801140c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013d9a:	4b15      	ldr	r3, [pc, #84]	; (8013df0 <prvCheckForValidListAndQueue+0x60>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d120      	bne.n	8013de4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013da2:	4814      	ldr	r0, [pc, #80]	; (8013df4 <prvCheckForValidListAndQueue+0x64>)
 8013da4:	f7fd f972 	bl	801108c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013da8:	4813      	ldr	r0, [pc, #76]	; (8013df8 <prvCheckForValidListAndQueue+0x68>)
 8013daa:	f7fd f96f 	bl	801108c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013dae:	4b13      	ldr	r3, [pc, #76]	; (8013dfc <prvCheckForValidListAndQueue+0x6c>)
 8013db0:	4a10      	ldr	r2, [pc, #64]	; (8013df4 <prvCheckForValidListAndQueue+0x64>)
 8013db2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013db4:	4b12      	ldr	r3, [pc, #72]	; (8013e00 <prvCheckForValidListAndQueue+0x70>)
 8013db6:	4a10      	ldr	r2, [pc, #64]	; (8013df8 <prvCheckForValidListAndQueue+0x68>)
 8013db8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013dba:	2300      	movs	r3, #0
 8013dbc:	9300      	str	r3, [sp, #0]
 8013dbe:	4b11      	ldr	r3, [pc, #68]	; (8013e04 <prvCheckForValidListAndQueue+0x74>)
 8013dc0:	4a11      	ldr	r2, [pc, #68]	; (8013e08 <prvCheckForValidListAndQueue+0x78>)
 8013dc2:	2110      	movs	r1, #16
 8013dc4:	200a      	movs	r0, #10
 8013dc6:	f7fd fcb7 	bl	8011738 <xQueueGenericCreateStatic>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	4a08      	ldr	r2, [pc, #32]	; (8013df0 <prvCheckForValidListAndQueue+0x60>)
 8013dce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013dd0:	4b07      	ldr	r3, [pc, #28]	; (8013df0 <prvCheckForValidListAndQueue+0x60>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d005      	beq.n	8013de4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013dd8:	4b05      	ldr	r3, [pc, #20]	; (8013df0 <prvCheckForValidListAndQueue+0x60>)
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	490b      	ldr	r1, [pc, #44]	; (8013e0c <prvCheckForValidListAndQueue+0x7c>)
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7fe fc0e 	bl	8012600 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013de4:	f7fd fb46 	bl	8011474 <vPortExitCritical>
}
 8013de8:	bf00      	nop
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}
 8013dee:	bf00      	nop
 8013df0:	200565d8 	.word	0x200565d8
 8013df4:	200565a8 	.word	0x200565a8
 8013df8:	200565bc 	.word	0x200565bc
 8013dfc:	200565d0 	.word	0x200565d0
 8013e00:	200565d4 	.word	0x200565d4
 8013e04:	20056684 	.word	0x20056684
 8013e08:	200565e4 	.word	0x200565e4
 8013e0c:	0802a1e0 	.word	0x0802a1e0

08013e10 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013e10:	8880      	ldrh	r0, [r0, #4]
 8013e12:	4770      	bx	lr

08013e14 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013e14:	2300      	movs	r3, #0
 8013e16:	8083      	strh	r3, [r0, #4]
 8013e18:	4770      	bx	lr
	...

08013e1c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e1e:	6803      	ldr	r3, [r0, #0]
 8013e20:	460e      	mov	r6, r1
 8013e22:	2100      	movs	r1, #0
 8013e24:	4605      	mov	r5, r0
 8013e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e28:	4798      	blx	r3
 8013e2a:	4604      	mov	r4, r0
 8013e2c:	682b      	ldr	r3, [r5, #0]
 8013e2e:	4628      	mov	r0, r5
 8013e30:	1b34      	subs	r4, r6, r4
 8013e32:	6a1b      	ldr	r3, [r3, #32]
 8013e34:	b2a4      	uxth	r4, r4
 8013e36:	4798      	blx	r3
 8013e38:	88ab      	ldrh	r3, [r5, #4]
 8013e3a:	fbb4 f4f0 	udiv	r4, r4, r0
 8013e3e:	42a3      	cmp	r3, r4
 8013e40:	d805      	bhi.n	8013e4e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8013e42:	4b0e      	ldr	r3, [pc, #56]	; (8013e7c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8013e44:	211e      	movs	r1, #30
 8013e46:	4a0e      	ldr	r2, [pc, #56]	; (8013e80 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8013e48:	480e      	ldr	r0, [pc, #56]	; (8013e84 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8013e4a:	f010 ffdb 	bl	8024e04 <__assert_func>
 8013e4e:	682b      	ldr	r3, [r5, #0]
 8013e50:	2100      	movs	r1, #0
 8013e52:	4628      	mov	r0, r5
 8013e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e56:	4798      	blx	r3
 8013e58:	682b      	ldr	r3, [r5, #0]
 8013e5a:	4607      	mov	r7, r0
 8013e5c:	4628      	mov	r0, r5
 8013e5e:	6a1b      	ldr	r3, [r3, #32]
 8013e60:	4798      	blx	r3
 8013e62:	1bf3      	subs	r3, r6, r7
 8013e64:	b29b      	uxth	r3, r3
 8013e66:	fbb3 f2f0 	udiv	r2, r3, r0
 8013e6a:	fb02 3010 	mls	r0, r2, r0, r3
 8013e6e:	b118      	cbz	r0, 8013e78 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8013e70:	4b05      	ldr	r3, [pc, #20]	; (8013e88 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8013e72:	211f      	movs	r1, #31
 8013e74:	4a02      	ldr	r2, [pc, #8]	; (8013e80 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8013e76:	e7e7      	b.n	8013e48 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8013e78:	4620      	mov	r0, r4
 8013e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e7c:	0802ac04 	.word	0x0802ac04
 8013e80:	0802ad72 	.word	0x0802ad72
 8013e84:	0802ac19 	.word	0x0802ac19
 8013e88:	0802ac47 	.word	0x0802ac47

08013e8c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8013e8c:	b538      	push	{r3, r4, r5, lr}
 8013e8e:	6803      	ldr	r3, [r0, #0]
 8013e90:	460d      	mov	r5, r1
 8013e92:	4604      	mov	r4, r0
 8013e94:	6a1b      	ldr	r3, [r3, #32]
 8013e96:	4798      	blx	r3
 8013e98:	4285      	cmp	r5, r0
 8013e9a:	d905      	bls.n	8013ea8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8013e9c:	4b0c      	ldr	r3, [pc, #48]	; (8013ed0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8013e9e:	2130      	movs	r1, #48	; 0x30
 8013ea0:	4a0c      	ldr	r2, [pc, #48]	; (8013ed4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8013ea2:	480d      	ldr	r0, [pc, #52]	; (8013ed8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8013ea4:	f010 ffae 	bl	8024e04 <__assert_func>
 8013ea8:	6823      	ldr	r3, [r4, #0]
 8013eaa:	4620      	mov	r0, r4
 8013eac:	88a5      	ldrh	r5, [r4, #4]
 8013eae:	69db      	ldr	r3, [r3, #28]
 8013eb0:	4798      	blx	r3
 8013eb2:	4285      	cmp	r5, r0
 8013eb4:	d303      	bcc.n	8013ebe <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8013eb6:	4b09      	ldr	r3, [pc, #36]	; (8013edc <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8013eb8:	2131      	movs	r1, #49	; 0x31
 8013eba:	4a06      	ldr	r2, [pc, #24]	; (8013ed4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8013ebc:	e7f1      	b.n	8013ea2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8013ebe:	6823      	ldr	r3, [r4, #0]
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	88a1      	ldrh	r1, [r4, #4]
 8013ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ec6:	4798      	blx	r3
 8013ec8:	88a3      	ldrh	r3, [r4, #4]
 8013eca:	3301      	adds	r3, #1
 8013ecc:	80a3      	strh	r3, [r4, #4]
 8013ece:	bd38      	pop	{r3, r4, r5, pc}
 8013ed0:	0802acc1 	.word	0x0802acc1
 8013ed4:	0802adb5 	.word	0x0802adb5
 8013ed8:	0802ac19 	.word	0x0802ac19
 8013edc:	0802acd8 	.word	0x0802acd8

08013ee0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013ee0:	b570      	push	{r4, r5, r6, lr}
 8013ee2:	6803      	ldr	r3, [r0, #0]
 8013ee4:	4616      	mov	r6, r2
 8013ee6:	4604      	mov	r4, r0
 8013ee8:	460d      	mov	r5, r1
 8013eea:	6a1b      	ldr	r3, [r3, #32]
 8013eec:	4798      	blx	r3
 8013eee:	4286      	cmp	r6, r0
 8013ef0:	d905      	bls.n	8013efe <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8013ef2:	4b06      	ldr	r3, [pc, #24]	; (8013f0c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8013ef4:	213a      	movs	r1, #58	; 0x3a
 8013ef6:	4a06      	ldr	r2, [pc, #24]	; (8013f10 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8013ef8:	4806      	ldr	r0, [pc, #24]	; (8013f14 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8013efa:	f010 ff83 	bl	8024e04 <__assert_func>
 8013efe:	6823      	ldr	r3, [r4, #0]
 8013f00:	4629      	mov	r1, r5
 8013f02:	4620      	mov	r0, r4
 8013f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f0a:	4718      	bx	r3
 8013f0c:	0802acc1 	.word	0x0802acc1
 8013f10:	0802ad28 	.word	0x0802ad28
 8013f14:	0802ac19 	.word	0x0802ac19

08013f18 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013f18:	4770      	bx	lr
	...

08013f1c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8013f1c:	4a02      	ldr	r2, [pc, #8]	; (8013f28 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8013f1e:	6002      	str	r2, [r0, #0]
 8013f20:	2200      	movs	r2, #0
 8013f22:	8082      	strh	r2, [r0, #4]
 8013f24:	4770      	bx	lr
 8013f26:	bf00      	nop
 8013f28:	0802acfc 	.word	0x0802acfc

08013f2c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8013f2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013f2e:	2000      	movs	r0, #0
 8013f30:	b12b      	cbz	r3, 8013f3e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013f32:	b920      	cbnz	r0, 8013f3e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013f34:	1a5a      	subs	r2, r3, r1
 8013f36:	699b      	ldr	r3, [r3, #24]
 8013f38:	4250      	negs	r0, r2
 8013f3a:	4150      	adcs	r0, r2
 8013f3c:	e7f8      	b.n	8013f30 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8013f3e:	4770      	bx	lr

08013f40 <_ZN8touchgfx9Container9removeAllEv>:
 8013f40:	2200      	movs	r2, #0
 8013f42:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013f44:	b123      	cbz	r3, 8013f50 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8013f46:	6999      	ldr	r1, [r3, #24]
 8013f48:	6281      	str	r1, [r0, #40]	; 0x28
 8013f4a:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8013f4e:	e7f8      	b.n	8013f42 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8013f50:	4770      	bx	lr

08013f52 <_ZN8touchgfx9Container6unlinkEv>:
 8013f52:	2300      	movs	r3, #0
 8013f54:	6283      	str	r3, [r0, #40]	; 0x28
 8013f56:	4770      	bx	lr

08013f58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8013f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f5c:	461f      	mov	r7, r3
 8013f5e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8013f62:	460d      	mov	r5, r1
 8013f64:	4616      	mov	r6, r2
 8013f66:	b103      	cbz	r3, 8013f6a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8013f68:	6038      	str	r0, [r7, #0]
 8013f6a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013f6c:	b314      	cbz	r4, 8013fb4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8013f6e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013f72:	b1eb      	cbz	r3, 8013fb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013f74:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013f78:	428d      	cmp	r5, r1
 8013f7a:	db19      	blt.n	8013fb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013f7c:	b289      	uxth	r1, r1
 8013f7e:	8923      	ldrh	r3, [r4, #8]
 8013f80:	440b      	add	r3, r1
 8013f82:	b21b      	sxth	r3, r3
 8013f84:	429d      	cmp	r5, r3
 8013f86:	da13      	bge.n	8013fb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013f88:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013f8c:	4296      	cmp	r6, r2
 8013f8e:	db0f      	blt.n	8013fb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013f90:	b292      	uxth	r2, r2
 8013f92:	8963      	ldrh	r3, [r4, #10]
 8013f94:	4413      	add	r3, r2
 8013f96:	b21b      	sxth	r3, r3
 8013f98:	429e      	cmp	r6, r3
 8013f9a:	da09      	bge.n	8013fb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013f9c:	6823      	ldr	r3, [r4, #0]
 8013f9e:	1ab2      	subs	r2, r6, r2
 8013fa0:	1a69      	subs	r1, r5, r1
 8013fa2:	4620      	mov	r0, r4
 8013fa4:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8013fa8:	b212      	sxth	r2, r2
 8013faa:	463b      	mov	r3, r7
 8013fac:	b209      	sxth	r1, r1
 8013fae:	47c0      	blx	r8
 8013fb0:	69a4      	ldr	r4, [r4, #24]
 8013fb2:	e7db      	b.n	8013f6c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013fb8 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8013fb8:	2200      	movs	r2, #0
 8013fba:	8002      	strh	r2, [r0, #0]
 8013fbc:	8042      	strh	r2, [r0, #2]
 8013fbe:	8082      	strh	r2, [r0, #4]
 8013fc0:	80c2      	strh	r2, [r0, #6]
 8013fc2:	4770      	bx	lr

08013fc4 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8013fc4:	b570      	push	{r4, r5, r6, lr}
 8013fc6:	460d      	mov	r5, r1
 8013fc8:	4616      	mov	r6, r2
 8013fca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013fcc:	b13c      	cbz	r4, 8013fde <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8013fce:	6823      	ldr	r3, [r4, #0]
 8013fd0:	4620      	mov	r0, r4
 8013fd2:	4632      	mov	r2, r6
 8013fd4:	4629      	mov	r1, r5
 8013fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fd8:	4798      	blx	r3
 8013fda:	69a4      	ldr	r4, [r4, #24]
 8013fdc:	e7f6      	b.n	8013fcc <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8013fde:	bd70      	pop	{r4, r5, r6, pc}

08013fe0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8013fe0:	b538      	push	{r3, r4, r5, lr}
 8013fe2:	460d      	mov	r5, r1
 8013fe4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013fe6:	b134      	cbz	r4, 8013ff6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013fe8:	682b      	ldr	r3, [r5, #0]
 8013fea:	4621      	mov	r1, r4
 8013fec:	4628      	mov	r0, r5
 8013fee:	689b      	ldr	r3, [r3, #8]
 8013ff0:	4798      	blx	r3
 8013ff2:	69a4      	ldr	r4, [r4, #24]
 8013ff4:	e7f7      	b.n	8013fe6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8013ff6:	bd38      	pop	{r3, r4, r5, pc}

08013ff8 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013ff8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013ffa:	b19b      	cbz	r3, 8014024 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013ffc:	428b      	cmp	r3, r1
 8013ffe:	d109      	bne.n	8014014 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8014000:	699a      	ldr	r2, [r3, #24]
 8014002:	2100      	movs	r1, #0
 8014004:	6159      	str	r1, [r3, #20]
 8014006:	6282      	str	r2, [r0, #40]	; 0x28
 8014008:	b902      	cbnz	r2, 801400c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801400a:	4770      	bx	lr
 801400c:	6199      	str	r1, [r3, #24]
 801400e:	4770      	bx	lr
 8014010:	4613      	mov	r3, r2
 8014012:	b13a      	cbz	r2, 8014024 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014014:	699a      	ldr	r2, [r3, #24]
 8014016:	428a      	cmp	r2, r1
 8014018:	d1fa      	bne.n	8014010 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801401a:	698a      	ldr	r2, [r1, #24]
 801401c:	619a      	str	r2, [r3, #24]
 801401e:	2300      	movs	r3, #0
 8014020:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8014024:	4770      	bx	lr

08014026 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8014026:	b410      	push	{r4}
 8014028:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801402a:	4604      	mov	r4, r0
 801402c:	b92b      	cbnz	r3, 801403a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801402e:	6803      	ldr	r3, [r0, #0]
 8014030:	4611      	mov	r1, r2
 8014032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014038:	4718      	bx	r3
 801403a:	b941      	cbnz	r1, 801404e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801403c:	6193      	str	r3, [r2, #24]
 801403e:	6282      	str	r2, [r0, #40]	; 0x28
 8014040:	6154      	str	r4, [r2, #20]
 8014042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014046:	4770      	bx	lr
 8014048:	4603      	mov	r3, r0
 801404a:	2800      	cmp	r0, #0
 801404c:	d0f9      	beq.n	8014042 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801404e:	4299      	cmp	r1, r3
 8014050:	6998      	ldr	r0, [r3, #24]
 8014052:	d1f9      	bne.n	8014048 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8014054:	6190      	str	r0, [r2, #24]
 8014056:	618a      	str	r2, [r1, #24]
 8014058:	e7f2      	b.n	8014040 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0801405c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801405c:	4288      	cmp	r0, r1
 801405e:	b508      	push	{r3, lr}
 8014060:	d105      	bne.n	801406e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8014062:	4b11      	ldr	r3, [pc, #68]	; (80140a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8014064:	2121      	movs	r1, #33	; 0x21
 8014066:	4a11      	ldr	r2, [pc, #68]	; (80140ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014068:	4811      	ldr	r0, [pc, #68]	; (80140b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801406a:	f010 fecb 	bl	8024e04 <__assert_func>
 801406e:	694b      	ldr	r3, [r1, #20]
 8014070:	b11b      	cbz	r3, 801407a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8014072:	4b10      	ldr	r3, [pc, #64]	; (80140b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8014074:	2122      	movs	r1, #34	; 0x22
 8014076:	4a0d      	ldr	r2, [pc, #52]	; (80140ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014078:	e7f6      	b.n	8014068 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801407a:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801407e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014080:	b913      	cbnz	r3, 8014088 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8014082:	6281      	str	r1, [r0, #40]	; 0x28
 8014084:	bd08      	pop	{r3, pc}
 8014086:	4613      	mov	r3, r2
 8014088:	699a      	ldr	r2, [r3, #24]
 801408a:	b12a      	cbz	r2, 8014098 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 801408c:	428b      	cmp	r3, r1
 801408e:	d1fa      	bne.n	8014086 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8014090:	4b09      	ldr	r3, [pc, #36]	; (80140b8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8014092:	2133      	movs	r1, #51	; 0x33
 8014094:	4a05      	ldr	r2, [pc, #20]	; (80140ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014096:	e7e7      	b.n	8014068 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014098:	428b      	cmp	r3, r1
 801409a:	d103      	bne.n	80140a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801409c:	4b06      	ldr	r3, [pc, #24]	; (80140b8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801409e:	2136      	movs	r1, #54	; 0x36
 80140a0:	4a02      	ldr	r2, [pc, #8]	; (80140ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80140a2:	e7e1      	b.n	8014068 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80140a4:	6199      	str	r1, [r3, #24]
 80140a6:	e7ed      	b.n	8014084 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80140a8:	0802adf3 	.word	0x0802adf3
 80140ac:	0802af44 	.word	0x0802af44
 80140b0:	0802ae1f 	.word	0x0802ae1f
 80140b4:	0802ae52 	.word	0x0802ae52
 80140b8:	0802ae88 	.word	0x0802ae88

080140bc <_ZN8touchgfx4RectaNERKS0_>:
 80140bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80140c0:	f9b1 7000 	ldrsh.w	r7, [r1]
 80140c4:	888c      	ldrh	r4, [r1, #4]
 80140c6:	f9b0 9000 	ldrsh.w	r9, [r0]
 80140ca:	443c      	add	r4, r7
 80140cc:	b2a4      	uxth	r4, r4
 80140ce:	fa0f f884 	sxth.w	r8, r4
 80140d2:	45c1      	cmp	r9, r8
 80140d4:	da2f      	bge.n	8014136 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80140d6:	8882      	ldrh	r2, [r0, #4]
 80140d8:	444a      	add	r2, r9
 80140da:	b292      	uxth	r2, r2
 80140dc:	fa0f fe82 	sxth.w	lr, r2
 80140e0:	4577      	cmp	r7, lr
 80140e2:	da28      	bge.n	8014136 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80140e4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80140e8:	88cb      	ldrh	r3, [r1, #6]
 80140ea:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80140ee:	442b      	add	r3, r5
 80140f0:	b21b      	sxth	r3, r3
 80140f2:	429e      	cmp	r6, r3
 80140f4:	da1f      	bge.n	8014136 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80140f6:	88c3      	ldrh	r3, [r0, #6]
 80140f8:	4433      	add	r3, r6
 80140fa:	b29b      	uxth	r3, r3
 80140fc:	fa0f fc83 	sxth.w	ip, r3
 8014100:	4565      	cmp	r5, ip
 8014102:	da18      	bge.n	8014136 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014104:	454f      	cmp	r7, r9
 8014106:	bfb8      	it	lt
 8014108:	464f      	movlt	r7, r9
 801410a:	42b5      	cmp	r5, r6
 801410c:	bfb8      	it	lt
 801410e:	4635      	movlt	r5, r6
 8014110:	45f0      	cmp	r8, lr
 8014112:	bfd8      	it	le
 8014114:	4622      	movle	r2, r4
 8014116:	1bd2      	subs	r2, r2, r7
 8014118:	8082      	strh	r2, [r0, #4]
 801411a:	884a      	ldrh	r2, [r1, #2]
 801411c:	88c9      	ldrh	r1, [r1, #6]
 801411e:	8007      	strh	r7, [r0, #0]
 8014120:	440a      	add	r2, r1
 8014122:	8045      	strh	r5, [r0, #2]
 8014124:	b292      	uxth	r2, r2
 8014126:	b211      	sxth	r1, r2
 8014128:	458c      	cmp	ip, r1
 801412a:	bfa8      	it	ge
 801412c:	4613      	movge	r3, r2
 801412e:	1b5b      	subs	r3, r3, r5
 8014130:	80c3      	strh	r3, [r0, #6]
 8014132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014136:	2300      	movs	r3, #0
 8014138:	8003      	strh	r3, [r0, #0]
 801413a:	8043      	strh	r3, [r0, #2]
 801413c:	8083      	strh	r3, [r0, #4]
 801413e:	80c3      	strh	r3, [r0, #6]
 8014140:	e7f7      	b.n	8014132 <_ZN8touchgfx4RectaNERKS0_+0x76>

08014142 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8014142:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014146:	2b00      	cmp	r3, #0
 8014148:	dd06      	ble.n	8014158 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801414a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801414e:	2800      	cmp	r0, #0
 8014150:	bfcc      	ite	gt
 8014152:	2000      	movgt	r0, #0
 8014154:	2001      	movle	r0, #1
 8014156:	4770      	bx	lr
 8014158:	2001      	movs	r0, #1
 801415a:	4770      	bx	lr

0801415c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801415c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014160:	2300      	movs	r3, #0
 8014162:	4604      	mov	r4, r0
 8014164:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8014166:	8003      	strh	r3, [r0, #0]
 8014168:	8043      	strh	r3, [r0, #2]
 801416a:	8083      	strh	r3, [r0, #4]
 801416c:	80c3      	strh	r3, [r0, #6]
 801416e:	2d00      	cmp	r5, #0
 8014170:	d040      	beq.n	80141f4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8014172:	1d28      	adds	r0, r5, #4
 8014174:	f7ff ffe5 	bl	8014142 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014178:	b988      	cbnz	r0, 801419e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801417a:	4620      	mov	r0, r4
 801417c:	f7ff ffe1 	bl	8014142 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014180:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014184:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014188:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801418c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8014190:	b138      	cbz	r0, 80141a2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8014192:	8022      	strh	r2, [r4, #0]
 8014194:	8063      	strh	r3, [r4, #2]
 8014196:	f8a4 e004 	strh.w	lr, [r4, #4]
 801419a:	f8a4 c006 	strh.w	ip, [r4, #6]
 801419e:	69ad      	ldr	r5, [r5, #24]
 80141a0:	e7e5      	b.n	801416e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80141a2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80141a6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80141aa:	4290      	cmp	r0, r2
 80141ac:	4607      	mov	r7, r0
 80141ae:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80141b2:	460e      	mov	r6, r1
 80141b4:	bfa8      	it	ge
 80141b6:	4617      	movge	r7, r2
 80141b8:	4299      	cmp	r1, r3
 80141ba:	4472      	add	r2, lr
 80141bc:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80141c0:	bfa8      	it	ge
 80141c2:	461e      	movge	r6, r3
 80141c4:	4440      	add	r0, r8
 80141c6:	4471      	add	r1, lr
 80141c8:	4463      	add	r3, ip
 80141ca:	b200      	sxth	r0, r0
 80141cc:	8027      	strh	r7, [r4, #0]
 80141ce:	b212      	sxth	r2, r2
 80141d0:	8066      	strh	r6, [r4, #2]
 80141d2:	b209      	sxth	r1, r1
 80141d4:	b21b      	sxth	r3, r3
 80141d6:	4290      	cmp	r0, r2
 80141d8:	bfac      	ite	ge
 80141da:	ebc7 0200 	rsbge	r2, r7, r0
 80141de:	ebc7 0202 	rsblt	r2, r7, r2
 80141e2:	4299      	cmp	r1, r3
 80141e4:	bfac      	ite	ge
 80141e6:	ebc6 0301 	rsbge	r3, r6, r1
 80141ea:	ebc6 0303 	rsblt	r3, r6, r3
 80141ee:	80a2      	strh	r2, [r4, #4]
 80141f0:	80e3      	strh	r3, [r4, #6]
 80141f2:	e7d4      	b.n	801419e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80141f4:	4620      	mov	r0, r4
 80141f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080141fa <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80141fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80141fe:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8014202:	b383      	cbz	r3, 8014266 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014204:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014206:	b374      	cbz	r4, 8014266 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014208:	f9b1 5000 	ldrsh.w	r5, [r1]
 801420c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8014210:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8014214:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8014218:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801421c:	b303      	cbz	r3, 8014260 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801421e:	4668      	mov	r0, sp
 8014220:	1d21      	adds	r1, r4, #4
 8014222:	f8ad 5000 	strh.w	r5, [sp]
 8014226:	f8ad 6002 	strh.w	r6, [sp, #2]
 801422a:	f8ad 7004 	strh.w	r7, [sp, #4]
 801422e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8014232:	f7ff ff43 	bl	80140bc <_ZN8touchgfx4RectaNERKS0_>
 8014236:	4668      	mov	r0, sp
 8014238:	f7ff ff83 	bl	8014142 <_ZNK8touchgfx4Rect7isEmptyEv>
 801423c:	b980      	cbnz	r0, 8014260 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801423e:	f8bd 3000 	ldrh.w	r3, [sp]
 8014242:	4669      	mov	r1, sp
 8014244:	88a2      	ldrh	r2, [r4, #4]
 8014246:	4620      	mov	r0, r4
 8014248:	1a9b      	subs	r3, r3, r2
 801424a:	88e2      	ldrh	r2, [r4, #6]
 801424c:	f8ad 3000 	strh.w	r3, [sp]
 8014250:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014254:	1a9b      	subs	r3, r3, r2
 8014256:	f8ad 3002 	strh.w	r3, [sp, #2]
 801425a:	6823      	ldr	r3, [r4, #0]
 801425c:	689b      	ldr	r3, [r3, #8]
 801425e:	4798      	blx	r3
 8014260:	69a4      	ldr	r4, [r4, #24]
 8014262:	2c00      	cmp	r4, #0
 8014264:	d1d8      	bne.n	8014218 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8014266:	b002      	add	sp, #8
 8014268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801426c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801426c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801426e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8014272:	460d      	mov	r5, r1
 8014274:	4616      	mov	r6, r2
 8014276:	b323      	cbz	r3, 80142c2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014278:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801427a:	b314      	cbz	r4, 80142c2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801427c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014280:	b1eb      	cbz	r3, 80142be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014282:	6828      	ldr	r0, [r5, #0]
 8014284:	466b      	mov	r3, sp
 8014286:	6869      	ldr	r1, [r5, #4]
 8014288:	c303      	stmia	r3!, {r0, r1}
 801428a:	4668      	mov	r0, sp
 801428c:	1d21      	adds	r1, r4, #4
 801428e:	f7ff ff15 	bl	80140bc <_ZN8touchgfx4RectaNERKS0_>
 8014292:	4668      	mov	r0, sp
 8014294:	f7ff ff55 	bl	8014142 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014298:	b988      	cbnz	r0, 80142be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801429a:	f8bd 3000 	ldrh.w	r3, [sp]
 801429e:	4669      	mov	r1, sp
 80142a0:	88a2      	ldrh	r2, [r4, #4]
 80142a2:	4620      	mov	r0, r4
 80142a4:	1a9b      	subs	r3, r3, r2
 80142a6:	88e2      	ldrh	r2, [r4, #6]
 80142a8:	f8ad 3000 	strh.w	r3, [sp]
 80142ac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80142b0:	1a9b      	subs	r3, r3, r2
 80142b2:	4632      	mov	r2, r6
 80142b4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80142b8:	6823      	ldr	r3, [r4, #0]
 80142ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80142bc:	4798      	blx	r3
 80142be:	69a4      	ldr	r4, [r4, #24]
 80142c0:	e7db      	b.n	801427a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80142c2:	b002      	add	sp, #8
 80142c4:	bd70      	pop	{r4, r5, r6, pc}

080142c6 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 80142c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80142ca:	4770      	bx	lr

080142cc <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80142cc:	4770      	bx	lr

080142ce <_ZN8touchgfx3HAL10FlushCacheEv>:
 80142ce:	4770      	bx	lr

080142d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80142d0:	6803      	ldr	r3, [r0, #0]
 80142d2:	b513      	push	{r0, r1, r4, lr}
 80142d4:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 80142d8:	2300      	movs	r3, #0
 80142da:	e9cd 3300 	strd	r3, r3, [sp]
 80142de:	466b      	mov	r3, sp
 80142e0:	47a0      	blx	r4
 80142e2:	b002      	add	sp, #8
 80142e4:	bd10      	pop	{r4, pc}

080142e6 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80142e6:	2301      	movs	r3, #1
 80142e8:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80142ec:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80142f0:	4770      	bx	lr

080142f2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80142f2:	2301      	movs	r3, #1
 80142f4:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80142f8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80142fc:	4770      	bx	lr

080142fe <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80142fe:	6843      	ldr	r3, [r0, #4]
 8014300:	2201      	movs	r2, #1
 8014302:	725a      	strb	r2, [r3, #9]
 8014304:	6840      	ldr	r0, [r0, #4]
 8014306:	6803      	ldr	r3, [r0, #0]
 8014308:	691b      	ldr	r3, [r3, #16]
 801430a:	4718      	bx	r3

0801430c <_ZN8touchgfx3HAL8flushDMAEv>:
 801430c:	6840      	ldr	r0, [r0, #4]
 801430e:	6803      	ldr	r3, [r0, #0]
 8014310:	689b      	ldr	r3, [r3, #8]
 8014312:	4718      	bx	r3

08014314 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8014314:	b530      	push	{r4, r5, lr}
 8014316:	b08b      	sub	sp, #44	; 0x2c
 8014318:	6804      	ldr	r4, [r0, #0]
 801431a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801431e:	9508      	str	r5, [sp, #32]
 8014320:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8014324:	9507      	str	r5, [sp, #28]
 8014326:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801432a:	9506      	str	r5, [sp, #24]
 801432c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8014330:	9505      	str	r5, [sp, #20]
 8014332:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8014336:	9504      	str	r5, [sp, #16]
 8014338:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801433c:	9503      	str	r5, [sp, #12]
 801433e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8014342:	9502      	str	r5, [sp, #8]
 8014344:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8014348:	e9cd 3500 	strd	r3, r5, [sp]
 801434c:	4613      	mov	r3, r2
 801434e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8014350:	2200      	movs	r2, #0
 8014352:	47a0      	blx	r4
 8014354:	b00b      	add	sp, #44	; 0x2c
 8014356:	bd30      	pop	{r4, r5, pc}

08014358 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014358:	4b04      	ldr	r3, [pc, #16]	; (801436c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801435a:	781b      	ldrb	r3, [r3, #0]
 801435c:	b123      	cbz	r3, 8014368 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801435e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8014362:	f080 0001 	eor.w	r0, r0, #1
 8014366:	4770      	bx	lr
 8014368:	2001      	movs	r0, #1
 801436a:	4770      	bx	lr
 801436c:	200566de 	.word	0x200566de

08014370 <_ZN8touchgfx3HAL8endFrameEv>:
 8014370:	b510      	push	{r4, lr}
 8014372:	4604      	mov	r4, r0
 8014374:	6840      	ldr	r0, [r0, #4]
 8014376:	6803      	ldr	r3, [r0, #0]
 8014378:	689b      	ldr	r3, [r3, #8]
 801437a:	4798      	blx	r3
 801437c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8014380:	b113      	cbz	r3, 8014388 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014382:	2301      	movs	r3, #1
 8014384:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014388:	bd10      	pop	{r4, pc}

0801438a <_ZN8touchgfx3HAL10initializeEv>:
 801438a:	b510      	push	{r4, lr}
 801438c:	4604      	mov	r4, r0
 801438e:	f7ee fdcb 	bl	8002f28 <_ZN8touchgfx10OSWrappers10initializeEv>
 8014392:	6860      	ldr	r0, [r4, #4]
 8014394:	6803      	ldr	r3, [r0, #0]
 8014396:	68db      	ldr	r3, [r3, #12]
 8014398:	4798      	blx	r3
 801439a:	68e0      	ldr	r0, [r4, #12]
 801439c:	6803      	ldr	r3, [r0, #0]
 801439e:	689b      	ldr	r3, [r3, #8]
 80143a0:	4798      	blx	r3
 80143a2:	6823      	ldr	r3, [r4, #0]
 80143a4:	4620      	mov	r0, r4
 80143a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143ac:	4718      	bx	r3

080143ae <_ZN8touchgfx3HAL9taskEntryEv>:
 80143ae:	b508      	push	{r3, lr}
 80143b0:	6803      	ldr	r3, [r0, #0]
 80143b2:	4604      	mov	r4, r0
 80143b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80143b6:	4798      	blx	r3
 80143b8:	6823      	ldr	r3, [r4, #0]
 80143ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143bc:	4620      	mov	r0, r4
 80143be:	4798      	blx	r3
 80143c0:	f7ee fe28 	bl	8003014 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80143c4:	6823      	ldr	r3, [r4, #0]
 80143c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80143c8:	e7f8      	b.n	80143bc <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080143cc <_ZN8touchgfx3HAL4tickEv>:
 80143cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80143ce:	6803      	ldr	r3, [r0, #0]
 80143d0:	4604      	mov	r4, r0
 80143d2:	4d5c      	ldr	r5, [pc, #368]	; (8014544 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80143d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80143d8:	4798      	blx	r3
 80143da:	2800      	cmp	r0, #0
 80143dc:	f000 8097 	beq.w	801450e <_ZN8touchgfx3HAL4tickEv+0x142>
 80143e0:	2001      	movs	r0, #1
 80143e2:	2600      	movs	r6, #0
 80143e4:	f7ee fb72 	bl	8002acc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80143e8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80143ec:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80143f0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80143f4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80143f8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80143fc:	b133      	cbz	r3, 801440c <_ZN8touchgfx3HAL4tickEv+0x40>
 80143fe:	6823      	ldr	r3, [r4, #0]
 8014400:	4620      	mov	r0, r4
 8014402:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8014406:	4798      	blx	r3
 8014408:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801440c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8014410:	2601      	movs	r6, #1
 8014412:	6862      	ldr	r2, [r4, #4]
 8014414:	f083 0301 	eor.w	r3, r3, #1
 8014418:	702e      	strb	r6, [r5, #0]
 801441a:	7253      	strb	r3, [r2, #9]
 801441c:	f003 fcac 	bl	8017d78 <_ZN8touchgfx11Application11getInstanceEv>
 8014420:	6803      	ldr	r3, [r0, #0]
 8014422:	4631      	mov	r1, r6
 8014424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014426:	4798      	blx	r3
 8014428:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801442c:	b90b      	cbnz	r3, 8014432 <_ZN8touchgfx3HAL4tickEv+0x66>
 801442e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8014432:	f003 fca1 	bl	8017d78 <_ZN8touchgfx11Application11getInstanceEv>
 8014436:	6803      	ldr	r3, [r0, #0]
 8014438:	695b      	ldr	r3, [r3, #20]
 801443a:	4798      	blx	r3
 801443c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801443e:	6803      	ldr	r3, [r0, #0]
 8014440:	691b      	ldr	r3, [r3, #16]
 8014442:	4798      	blx	r3
 8014444:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014448:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801444c:	3b01      	subs	r3, #1
 801444e:	b2db      	uxtb	r3, r3
 8014450:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014454:	b10a      	cbz	r2, 801445a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8014456:	2b00      	cmp	r3, #0
 8014458:	d1eb      	bne.n	8014432 <_ZN8touchgfx3HAL4tickEv+0x66>
 801445a:	4a3b      	ldr	r2, [pc, #236]	; (8014548 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801445c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8014460:	7813      	ldrb	r3, [r2, #0]
 8014462:	3301      	adds	r3, #1
 8014464:	b25b      	sxtb	r3, r3
 8014466:	4299      	cmp	r1, r3
 8014468:	7013      	strb	r3, [r2, #0]
 801446a:	dc10      	bgt.n	801448e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801446c:	2300      	movs	r3, #0
 801446e:	68e0      	ldr	r0, [r4, #12]
 8014470:	a902      	add	r1, sp, #8
 8014472:	7013      	strb	r3, [r2, #0]
 8014474:	aa03      	add	r2, sp, #12
 8014476:	6803      	ldr	r3, [r0, #0]
 8014478:	68db      	ldr	r3, [r3, #12]
 801447a:	4798      	blx	r3
 801447c:	6823      	ldr	r3, [r4, #0]
 801447e:	2800      	cmp	r0, #0
 8014480:	d051      	beq.n	8014526 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8014482:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8014486:	4620      	mov	r0, r4
 8014488:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801448c:	4798      	blx	r3
 801448e:	2300      	movs	r3, #0
 8014490:	6960      	ldr	r0, [r4, #20]
 8014492:	f88d 3007 	strb.w	r3, [sp, #7]
 8014496:	b158      	cbz	r0, 80144b0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8014498:	6803      	ldr	r3, [r0, #0]
 801449a:	f10d 0107 	add.w	r1, sp, #7
 801449e:	68db      	ldr	r3, [r3, #12]
 80144a0:	4798      	blx	r3
 80144a2:	b128      	cbz	r0, 80144b0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80144a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80144aa:	6803      	ldr	r3, [r0, #0]
 80144ac:	68db      	ldr	r3, [r3, #12]
 80144ae:	4798      	blx	r3
 80144b0:	f104 001c 	add.w	r0, r4, #28
 80144b4:	f00e ff5e 	bl	8023374 <_ZN8touchgfx8Gestures4tickEv>
 80144b8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80144bc:	b30b      	cbz	r3, 8014502 <_ZN8touchgfx3HAL4tickEv+0x136>
 80144be:	6920      	ldr	r0, [r4, #16]
 80144c0:	6803      	ldr	r3, [r0, #0]
 80144c2:	691b      	ldr	r3, [r3, #16]
 80144c4:	4798      	blx	r3
 80144c6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80144c8:	4606      	mov	r6, r0
 80144ca:	b903      	cbnz	r3, 80144ce <_ZN8touchgfx3HAL4tickEv+0x102>
 80144cc:	6720      	str	r0, [r4, #112]	; 0x70
 80144ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80144d0:	4a1e      	ldr	r2, [pc, #120]	; (801454c <_ZN8touchgfx3HAL4tickEv+0x180>)
 80144d2:	1af3      	subs	r3, r6, r3
 80144d4:	4293      	cmp	r3, r2
 80144d6:	d914      	bls.n	8014502 <_ZN8touchgfx3HAL4tickEv+0x136>
 80144d8:	6920      	ldr	r0, [r4, #16]
 80144da:	6803      	ldr	r3, [r0, #0]
 80144dc:	699b      	ldr	r3, [r3, #24]
 80144de:	4798      	blx	r3
 80144e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80144e2:	2264      	movs	r2, #100	; 0x64
 80144e4:	1af3      	subs	r3, r6, r3
 80144e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80144ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80144ee:	2800      	cmp	r0, #0
 80144f0:	dc1e      	bgt.n	8014530 <_ZN8touchgfx3HAL4tickEv+0x164>
 80144f2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80144f6:	6920      	ldr	r0, [r4, #16]
 80144f8:	2100      	movs	r1, #0
 80144fa:	6803      	ldr	r3, [r0, #0]
 80144fc:	69db      	ldr	r3, [r3, #28]
 80144fe:	4798      	blx	r3
 8014500:	6726      	str	r6, [r4, #112]	; 0x70
 8014502:	f003 fc39 	bl	8017d78 <_ZN8touchgfx11Application11getInstanceEv>
 8014506:	6803      	ldr	r3, [r0, #0]
 8014508:	2100      	movs	r1, #0
 801450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801450c:	4798      	blx	r3
 801450e:	6823      	ldr	r3, [r4, #0]
 8014510:	4620      	mov	r0, r4
 8014512:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014516:	4798      	blx	r3
 8014518:	2001      	movs	r0, #1
 801451a:	f7ee fae2 	bl	8002ae2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801451e:	2300      	movs	r3, #0
 8014520:	702b      	strb	r3, [r5, #0]
 8014522:	b004      	add	sp, #16
 8014524:	bd70      	pop	{r4, r5, r6, pc}
 8014526:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801452a:	4620      	mov	r0, r4
 801452c:	4798      	blx	r3
 801452e:	e7ae      	b.n	801448e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8014530:	2863      	cmp	r0, #99	; 0x63
 8014532:	bfcb      	itete	gt
 8014534:	2300      	movgt	r3, #0
 8014536:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801453a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801453e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8014542:	e7d8      	b.n	80144f6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8014544:	200566e4 	.word	0x200566e4
 8014548:	200566e5 	.word	0x200566e5
 801454c:	05f5e100 	.word	0x05f5e100

08014550 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014550:	f7ee bd2c 	b.w	8002fac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014554 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014554:	6581      	str	r1, [r0, #88]	; 0x58
 8014556:	301c      	adds	r0, #28
 8014558:	f00e bf0a 	b.w	8023370 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801455c <_ZN8touchgfx3HAL5touchEll>:
 801455c:	b530      	push	{r4, r5, lr}
 801455e:	b087      	sub	sp, #28
 8014560:	4604      	mov	r4, r0
 8014562:	a804      	add	r0, sp, #16
 8014564:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014568:	f003 f9f2 	bl	8017950 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801456c:	9b04      	ldr	r3, [sp, #16]
 801456e:	a906      	add	r1, sp, #24
 8014570:	a803      	add	r0, sp, #12
 8014572:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014576:	9b05      	ldr	r3, [sp, #20]
 8014578:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801457c:	f003 fa26 	bl	80179cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8014580:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8014584:	f104 001c 	add.w	r0, r4, #28
 8014588:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801458c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8014590:	b189      	cbz	r1, 80145b6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8014592:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8014596:	9300      	str	r3, [sp, #0]
 8014598:	4613      	mov	r3, r2
 801459a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801459e:	462a      	mov	r2, r5
 80145a0:	f00e fef6 	bl	8023390 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80145a4:	b128      	cbz	r0, 80145b2 <_ZN8touchgfx3HAL5touchEll+0x56>
 80145a6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80145aa:	65e3      	str	r3, [r4, #92]	; 0x5c
 80145ac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80145b0:	6623      	str	r3, [r4, #96]	; 0x60
 80145b2:	b007      	add	sp, #28
 80145b4:	bd30      	pop	{r4, r5, pc}
 80145b6:	f00e ff2f 	bl	8023418 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80145ba:	2301      	movs	r3, #1
 80145bc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80145c0:	e7f1      	b.n	80145a6 <_ZN8touchgfx3HAL5touchEll+0x4a>

080145c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80145c2:	b570      	push	{r4, r5, r6, lr}
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d050      	beq.n	801466a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80145c8:	ea81 0002 	eor.w	r0, r1, r2
 80145cc:	07c6      	lsls	r6, r0, #31
 80145ce:	d508      	bpl.n	80145e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80145d0:	3a01      	subs	r2, #1
 80145d2:	18cc      	adds	r4, r1, r3
 80145d4:	42a1      	cmp	r1, r4
 80145d6:	d048      	beq.n	801466a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80145d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80145dc:	f801 0b01 	strb.w	r0, [r1], #1
 80145e0:	e7f8      	b.n	80145d4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80145e2:	07d5      	lsls	r5, r2, #31
 80145e4:	bf42      	ittt	mi
 80145e6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80145ea:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80145ee:	f801 0b01 	strbmi.w	r0, [r1], #1
 80145f2:	2b01      	cmp	r3, #1
 80145f4:	d915      	bls.n	8014622 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80145f6:	ea82 0001 	eor.w	r0, r2, r1
 80145fa:	0784      	lsls	r4, r0, #30
 80145fc:	d02d      	beq.n	801465a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 80145fe:	1e94      	subs	r4, r2, #2
 8014600:	4608      	mov	r0, r1
 8014602:	18ce      	adds	r6, r1, r3
 8014604:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8014608:	f820 5b02 	strh.w	r5, [r0], #2
 801460c:	1a35      	subs	r5, r6, r0
 801460e:	2d01      	cmp	r5, #1
 8014610:	d8f8      	bhi.n	8014604 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8014612:	1e98      	subs	r0, r3, #2
 8014614:	f003 0301 	and.w	r3, r3, #1
 8014618:	f020 0001 	bic.w	r0, r0, #1
 801461c:	3002      	adds	r0, #2
 801461e:	4401      	add	r1, r0
 8014620:	4402      	add	r2, r0
 8014622:	1f14      	subs	r4, r2, #4
 8014624:	4608      	mov	r0, r1
 8014626:	18ce      	adds	r6, r1, r3
 8014628:	1a35      	subs	r5, r6, r0
 801462a:	2d03      	cmp	r5, #3
 801462c:	d810      	bhi.n	8014650 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801462e:	089c      	lsrs	r4, r3, #2
 8014630:	00a0      	lsls	r0, r4, #2
 8014632:	4401      	add	r1, r0
 8014634:	3801      	subs	r0, #1
 8014636:	4402      	add	r2, r0
 8014638:	f06f 0003 	mvn.w	r0, #3
 801463c:	fb00 3404 	mla	r4, r0, r4, r3
 8014640:	440c      	add	r4, r1
 8014642:	42a1      	cmp	r1, r4
 8014644:	d011      	beq.n	801466a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8014646:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801464a:	f801 3b01 	strb.w	r3, [r1], #1
 801464e:	e7f8      	b.n	8014642 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8014650:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8014654:	f840 5b04 	str.w	r5, [r0], #4
 8014658:	e7e6      	b.n	8014628 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801465a:	0790      	lsls	r0, r2, #30
 801465c:	d0e1      	beq.n	8014622 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801465e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8014662:	3b02      	subs	r3, #2
 8014664:	f821 0b02 	strh.w	r0, [r1], #2
 8014668:	e7db      	b.n	8014622 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801466a:	2001      	movs	r0, #1
 801466c:	bd70      	pop	{r4, r5, r6, pc}

0801466e <_ZN8touchgfx3HAL7noTouchEv>:
 801466e:	b510      	push	{r4, lr}
 8014670:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8014674:	4604      	mov	r4, r0
 8014676:	b153      	cbz	r3, 801468e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014678:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801467c:	2101      	movs	r1, #1
 801467e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8014682:	301c      	adds	r0, #28
 8014684:	f00e fec8 	bl	8023418 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014688:	2300      	movs	r3, #0
 801468a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801468e:	bd10      	pop	{r4, pc}

08014690 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014694:	4604      	mov	r4, r0
 8014696:	6980      	ldr	r0, [r0, #24]
 8014698:	b085      	sub	sp, #20
 801469a:	460f      	mov	r7, r1
 801469c:	4690      	mov	r8, r2
 801469e:	4699      	mov	r9, r3
 80146a0:	b930      	cbnz	r0, 80146b0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80146a2:	4b1c      	ldr	r3, [pc, #112]	; (8014714 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 80146a4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80146a8:	4a1b      	ldr	r2, [pc, #108]	; (8014718 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80146aa:	481c      	ldr	r0, [pc, #112]	; (801471c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 80146ac:	f010 fbaa 	bl	8024e04 <__assert_func>
 80146b0:	ad04      	add	r5, sp, #16
 80146b2:	2600      	movs	r6, #0
 80146b4:	f845 6d04 	str.w	r6, [r5, #-4]!
 80146b8:	6806      	ldr	r6, [r0, #0]
 80146ba:	9501      	str	r5, [sp, #4]
 80146bc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80146c0:	9500      	str	r5, [sp, #0]
 80146c2:	6835      	ldr	r5, [r6, #0]
 80146c4:	47a8      	blx	r5
 80146c6:	4d16      	ldr	r5, [pc, #88]	; (8014720 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80146c8:	4606      	mov	r6, r0
 80146ca:	f8a5 9000 	strh.w	r9, [r5]
 80146ce:	f7f0 ff53 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 80146d2:	6803      	ldr	r3, [r0, #0]
 80146d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146d6:	4798      	blx	r3
 80146d8:	2801      	cmp	r0, #1
 80146da:	d012      	beq.n	8014702 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 80146dc:	d306      	bcc.n	80146ec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 80146de:	280d      	cmp	r0, #13
 80146e0:	d80b      	bhi.n	80146fa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80146e2:	4b10      	ldr	r3, [pc, #64]	; (8014724 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80146e4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80146e8:	4a0b      	ldr	r2, [pc, #44]	; (8014718 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80146ea:	e7de      	b.n	80146aa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 80146ec:	882b      	ldrh	r3, [r5, #0]
 80146ee:	fb08 7203 	mla	r2, r8, r3, r7
 80146f2:	9b03      	ldr	r3, [sp, #12]
 80146f4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80146f8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80146fa:	4630      	mov	r0, r6
 80146fc:	b005      	add	sp, #20
 80146fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014702:	882a      	ldrh	r2, [r5, #0]
 8014704:	9b03      	ldr	r3, [sp, #12]
 8014706:	fb08 7202 	mla	r2, r8, r2, r7
 801470a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801470e:	1a9a      	subs	r2, r3, r2
 8014710:	63e2      	str	r2, [r4, #60]	; 0x3c
 8014712:	e7f2      	b.n	80146fa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8014714:	0802b0ec 	.word	0x0802b0ec
 8014718:	0802b471 	.word	0x0802b471
 801471c:	0802b131 	.word	0x0802b131
 8014720:	200566da 	.word	0x200566da
 8014724:	0802b157 	.word	0x0802b157

08014728 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8014728:	b5f0      	push	{r4, r5, r6, r7, lr}
 801472a:	b08b      	sub	sp, #44	; 0x2c
 801472c:	4617      	mov	r7, r2
 801472e:	4604      	mov	r4, r0
 8014730:	460e      	mov	r6, r1
 8014732:	461d      	mov	r5, r3
 8014734:	f7f0 ff20 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 8014738:	6803      	ldr	r3, [r0, #0]
 801473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801473c:	4798      	blx	r3
 801473e:	4b0f      	ldr	r3, [pc, #60]	; (801477c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x54>)
 8014740:	6822      	ldr	r2, [r4, #0]
 8014742:	4631      	mov	r1, r6
 8014744:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8014748:	881b      	ldrh	r3, [r3, #0]
 801474a:	4620      	mov	r0, r4
 801474c:	9306      	str	r3, [sp, #24]
 801474e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014752:	9305      	str	r3, [sp, #20]
 8014754:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8014758:	9304      	str	r3, [sp, #16]
 801475a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801475e:	9303      	str	r3, [sp, #12]
 8014760:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014764:	9302      	str	r3, [sp, #8]
 8014766:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801476a:	e9cd 5300 	strd	r5, r3, [sp]
 801476e:	463b      	mov	r3, r7
 8014770:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8014772:	2200      	movs	r2, #0
 8014774:	47a8      	blx	r5
 8014776:	b00b      	add	sp, #44	; 0x2c
 8014778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801477a:	bf00      	nop
 801477c:	200566da 	.word	0x200566da

08014780 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8014780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014784:	4698      	mov	r8, r3
 8014786:	6803      	ldr	r3, [r0, #0]
 8014788:	b08b      	sub	sp, #44	; 0x2c
 801478a:	4617      	mov	r7, r2
 801478c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 801478e:	460e      	mov	r6, r1
 8014790:	4b11      	ldr	r3, [pc, #68]	; (80147d8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8014792:	4604      	mov	r4, r0
 8014794:	f8b3 9000 	ldrh.w	r9, [r3]
 8014798:	f7f0 feee 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 801479c:	6803      	ldr	r3, [r0, #0]
 801479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147a0:	4798      	blx	r3
 80147a2:	2302      	movs	r3, #2
 80147a4:	9008      	str	r0, [sp, #32]
 80147a6:	2200      	movs	r2, #0
 80147a8:	4631      	mov	r1, r6
 80147aa:	4620      	mov	r0, r4
 80147ac:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80147b0:	2301      	movs	r3, #1
 80147b2:	9305      	str	r3, [sp, #20]
 80147b4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80147b8:	9304      	str	r3, [sp, #16]
 80147ba:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80147be:	9303      	str	r3, [sp, #12]
 80147c0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80147c4:	9302      	str	r3, [sp, #8]
 80147c6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80147ca:	e9cd 8300 	strd	r8, r3, [sp]
 80147ce:	463b      	mov	r3, r7
 80147d0:	47a8      	blx	r5
 80147d2:	b00b      	add	sp, #44	; 0x2c
 80147d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147d8:	200566da 	.word	0x200566da

080147dc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 80147dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80147e0:	4698      	mov	r8, r3
 80147e2:	6803      	ldr	r3, [r0, #0]
 80147e4:	b087      	sub	sp, #28
 80147e6:	460e      	mov	r6, r1
 80147e8:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80147ea:	4617      	mov	r7, r2
 80147ec:	4b0d      	ldr	r3, [pc, #52]	; (8014824 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 80147ee:	4604      	mov	r4, r0
 80147f0:	f8b3 9000 	ldrh.w	r9, [r3]
 80147f4:	f7f0 fec0 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 80147f8:	6803      	ldr	r3, [r0, #0]
 80147fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147fc:	4798      	blx	r3
 80147fe:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8014802:	463a      	mov	r2, r7
 8014804:	4631      	mov	r1, r6
 8014806:	9302      	str	r3, [sp, #8]
 8014808:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801480c:	9301      	str	r3, [sp, #4]
 801480e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014812:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8014816:	9300      	str	r3, [sp, #0]
 8014818:	4620      	mov	r0, r4
 801481a:	4643      	mov	r3, r8
 801481c:	47a8      	blx	r5
 801481e:	b007      	add	sp, #28
 8014820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014824:	200566da 	.word	0x200566da

08014828 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801482c:	4604      	mov	r4, r0
 801482e:	b08f      	sub	sp, #60	; 0x3c
 8014830:	4610      	mov	r0, r2
 8014832:	460d      	mov	r5, r1
 8014834:	4691      	mov	r9, r2
 8014836:	461e      	mov	r6, r3
 8014838:	f006 fabc 	bl	801adb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801483c:	2800      	cmp	r0, #0
 801483e:	f000 80b3 	beq.w	80149a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x180>
 8014842:	6823      	ldr	r3, [r4, #0]
 8014844:	4620      	mov	r0, r4
 8014846:	f8df b190 	ldr.w	fp, [pc, #400]	; 80149d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>
 801484a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014850:	4798      	blx	r3
 8014852:	6823      	ldr	r3, [r4, #0]
 8014854:	4620      	mov	r0, r4
 8014856:	f8df a184 	ldr.w	sl, [pc, #388]	; 80149dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 801485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801485c:	4798      	blx	r3
 801485e:	f8bb 3000 	ldrh.w	r3, [fp]
 8014862:	4f5a      	ldr	r7, [pc, #360]	; (80149cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8014864:	9300      	str	r3, [sp, #0]
 8014866:	f8ba 3000 	ldrh.w	r3, [sl]
 801486a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801486e:	4640      	mov	r0, r8
 8014870:	9301      	str	r3, [sp, #4]
 8014872:	883b      	ldrh	r3, [r7, #0]
 8014874:	9302      	str	r3, [sp, #8]
 8014876:	4b56      	ldr	r3, [pc, #344]	; (80149d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8014878:	881a      	ldrh	r2, [r3, #0]
 801487a:	9304      	str	r3, [sp, #16]
 801487c:	9203      	str	r2, [sp, #12]
 801487e:	f006 fb53 	bl	801af28 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014882:	8038      	strh	r0, [r7, #0]
 8014884:	4640      	mov	r0, r8
 8014886:	f006 fb89 	bl	801af9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801488a:	9b04      	ldr	r3, [sp, #16]
 801488c:	8018      	strh	r0, [r3, #0]
 801488e:	4b51      	ldr	r3, [pc, #324]	; (80149d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014890:	781b      	ldrb	r3, [r3, #0]
 8014892:	2b00      	cmp	r3, #0
 8014894:	f040 808b 	bne.w	80149ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x186>
 8014898:	883b      	ldrh	r3, [r7, #0]
 801489a:	f8aa 0000 	strh.w	r0, [sl]
 801489e:	f8ab 3000 	strh.w	r3, [fp]
 80148a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80148a4:	4648      	mov	r0, r9
 80148a6:	6c27      	ldr	r7, [r4, #64]	; 0x40
 80148a8:	9304      	str	r3, [sp, #16]
 80148aa:	f006 fa83 	bl	801adb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80148ae:	2200      	movs	r2, #0
 80148b0:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80148b4:	4611      	mov	r1, r2
 80148b6:	4628      	mov	r0, r5
 80148b8:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80148bc:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80148c0:	f7f1 fc3c 	bl	800613c <_ZN8touchgfx8Drawable5setXYEss>
 80148c4:	2301      	movs	r3, #1
 80148c6:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80148ca:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80148ce:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	dd71      	ble.n	80149ba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 80148d6:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	dd6d      	ble.n	80149ba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 80148de:	462a      	mov	r2, r5
 80148e0:	ab0a      	add	r3, sp, #40	; 0x28
 80148e2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80148e6:	6851      	ldr	r1, [r2, #4]
 80148e8:	c303      	stmia	r3!, {r0, r1}
 80148ea:	4631      	mov	r1, r6
 80148ec:	a80a      	add	r0, sp, #40	; 0x28
 80148ee:	f7ff fbe5 	bl	80140bc <_ZN8touchgfx4RectaNERKS0_>
 80148f2:	4b36      	ldr	r3, [pc, #216]	; (80149cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 80148f4:	2600      	movs	r6, #0
 80148f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80148fa:	4b35      	ldr	r3, [pc, #212]	; (80149d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80148fc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8014900:	aa0a      	add	r2, sp, #40	; 0x28
 8014902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014906:	960c      	str	r6, [sp, #48]	; 0x30
 8014908:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801490c:	ab08      	add	r3, sp, #32
 801490e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014912:	e883 0003 	stmia.w	r3, {r0, r1}
 8014916:	4618      	mov	r0, r3
 8014918:	a90c      	add	r1, sp, #48	; 0x30
 801491a:	f7ff fbcf 	bl	80140bc <_ZN8touchgfx4RectaNERKS0_>
 801491e:	a807      	add	r0, sp, #28
 8014920:	f006 fc00 	bl	801b124 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014924:	4680      	mov	r8, r0
 8014926:	f7f0 fe27 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 801492a:	6802      	ldr	r2, [r0, #0]
 801492c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801492e:	4790      	blx	r2
 8014930:	4580      	cmp	r8, r0
 8014932:	d049      	beq.n	80149c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a0>
 8014934:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8014936:	b150      	cbz	r0, 801494e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 8014938:	a807      	add	r0, sp, #28
 801493a:	f006 fbf3 	bl	801b124 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801493e:	4606      	mov	r6, r0
 8014940:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8014942:	6803      	ldr	r3, [r0, #0]
 8014944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014946:	4798      	blx	r3
 8014948:	1a33      	subs	r3, r6, r0
 801494a:	4258      	negs	r0, r3
 801494c:	4158      	adcs	r0, r3
 801494e:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8014952:	2600      	movs	r6, #0
 8014954:	696b      	ldr	r3, [r5, #20]
 8014956:	a908      	add	r1, sp, #32
 8014958:	682a      	ldr	r2, [r5, #0]
 801495a:	4628      	mov	r0, r5
 801495c:	9305      	str	r3, [sp, #20]
 801495e:	616e      	str	r6, [r5, #20]
 8014960:	6892      	ldr	r2, [r2, #8]
 8014962:	4790      	blx	r2
 8014964:	9b05      	ldr	r3, [sp, #20]
 8014966:	4652      	mov	r2, sl
 8014968:	4649      	mov	r1, r9
 801496a:	616b      	str	r3, [r5, #20]
 801496c:	4628      	mov	r0, r5
 801496e:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8014972:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8014976:	f7f1 fbe1 	bl	800613c <_ZN8touchgfx8Drawable5setXYEss>
 801497a:	9b04      	ldr	r3, [sp, #16]
 801497c:	9a00      	ldr	r2, [sp, #0]
 801497e:	4620      	mov	r0, r4
 8014980:	e9c4 370f 	strd	r3, r7, [r4, #60]	; 0x3c
 8014984:	4b14      	ldr	r3, [pc, #80]	; (80149d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014986:	801a      	strh	r2, [r3, #0]
 8014988:	9a01      	ldr	r2, [sp, #4]
 801498a:	4b14      	ldr	r3, [pc, #80]	; (80149dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801498c:	801a      	strh	r2, [r3, #0]
 801498e:	9a02      	ldr	r2, [sp, #8]
 8014990:	4b0e      	ldr	r3, [pc, #56]	; (80149cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8014992:	801a      	strh	r2, [r3, #0]
 8014994:	4b0e      	ldr	r3, [pc, #56]	; (80149d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8014996:	9a03      	ldr	r2, [sp, #12]
 8014998:	801a      	strh	r2, [r3, #0]
 801499a:	6823      	ldr	r3, [r4, #0]
 801499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801499e:	4798      	blx	r3
 80149a0:	6823      	ldr	r3, [r4, #0]
 80149a2:	4620      	mov	r0, r4
 80149a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149a6:	4798      	blx	r3
 80149a8:	b00f      	add	sp, #60	; 0x3c
 80149aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149ae:	883b      	ldrh	r3, [r7, #0]
 80149b0:	f8ab 0000 	strh.w	r0, [fp]
 80149b4:	f8aa 3000 	strh.w	r3, [sl]
 80149b8:	e773      	b.n	80148a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80149ba:	462a      	mov	r2, r5
 80149bc:	ab0a      	add	r3, sp, #40	; 0x28
 80149be:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80149c2:	6851      	ldr	r1, [r2, #4]
 80149c4:	c303      	stmia	r3!, {r0, r1}
 80149c6:	e794      	b.n	80148f2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xca>
 80149c8:	4630      	mov	r0, r6
 80149ca:	e7c0      	b.n	801494e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 80149cc:	200566d4 	.word	0x200566d4
 80149d0:	200566d6 	.word	0x200566d6
 80149d4:	200566d8 	.word	0x200566d8
 80149d8:	200566da 	.word	0x200566da
 80149dc:	200566dc 	.word	0x200566dc

080149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80149e0:	4b07      	ldr	r3, [pc, #28]	; (8014a00 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80149e2:	b510      	push	{r4, lr}
 80149e4:	781b      	ldrb	r3, [r3, #0]
 80149e6:	4604      	mov	r4, r0
 80149e8:	b13b      	cbz	r3, 80149fa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80149ea:	6803      	ldr	r3, [r0, #0]
 80149ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149ee:	4798      	blx	r3
 80149f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80149f2:	4283      	cmp	r3, r0
 80149f4:	d101      	bne.n	80149fa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80149f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80149f8:	bd10      	pop	{r4, pc}
 80149fa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80149fc:	e7fc      	b.n	80149f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80149fe:	bf00      	nop
 8014a00:	200566de 	.word	0x200566de

08014a04 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8014a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a08:	b088      	sub	sp, #32
 8014a0a:	4692      	mov	sl, r2
 8014a0c:	461c      	mov	r4, r3
 8014a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a12:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8014a16:	2500      	movs	r5, #0
 8014a18:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8014a1c:	4606      	mov	r6, r0
 8014a1e:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8014a22:	fb09 a404 	mla	r4, r9, r4, sl
 8014a26:	9503      	str	r5, [sp, #12]
 8014a28:	f8ad 8014 	strh.w	r8, [sp, #20]
 8014a2c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8014a30:	f88d 501c 	strb.w	r5, [sp, #28]
 8014a34:	e9cd 3100 	strd	r3, r1, [sp]
 8014a38:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014a3c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014a40:	f7ff ffce 	bl	80149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014a44:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8014a48:	f8ad 901a 	strh.w	r9, [sp, #26]
 8014a4c:	f88d 501e 	strb.w	r5, [sp, #30]
 8014a50:	9404      	str	r4, [sp, #16]
 8014a52:	f88d 501d 	strb.w	r5, [sp, #29]
 8014a56:	f1b8 0f00 	cmp.w	r8, #0
 8014a5a:	d000      	beq.n	8014a5e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5a>
 8014a5c:	b937      	cbnz	r7, 8014a6c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x68>
 8014a5e:	4b0d      	ldr	r3, [pc, #52]	; (8014a94 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x90>)
 8014a60:	f44f 7101 	mov.w	r1, #516	; 0x204
 8014a64:	4a0c      	ldr	r2, [pc, #48]	; (8014a98 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8014a66:	480d      	ldr	r0, [pc, #52]	; (8014a9c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8014a68:	f010 f9cc 	bl	8024e04 <__assert_func>
 8014a6c:	6833      	ldr	r3, [r6, #0]
 8014a6e:	4630      	mov	r0, r6
 8014a70:	9c00      	ldr	r4, [sp, #0]
 8014a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a74:	4798      	blx	r3
 8014a76:	4220      	tst	r0, r4
 8014a78:	d104      	bne.n	8014a84 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x80>
 8014a7a:	4b09      	ldr	r3, [pc, #36]	; (8014aa0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8014a7c:	f240 2105 	movw	r1, #517	; 0x205
 8014a80:	4a05      	ldr	r2, [pc, #20]	; (8014a98 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8014a82:	e7f0      	b.n	8014a66 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 8014a84:	6870      	ldr	r0, [r6, #4]
 8014a86:	4669      	mov	r1, sp
 8014a88:	6803      	ldr	r3, [r0, #0]
 8014a8a:	685b      	ldr	r3, [r3, #4]
 8014a8c:	4798      	blx	r3
 8014a8e:	b008      	add	sp, #32
 8014a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a94:	0802af7f 	.word	0x0802af7f
 8014a98:	0802b2ac 	.word	0x0802b2ac
 8014a9c:	0802b131 	.word	0x0802b131
 8014aa0:	0802afb7 	.word	0x0802afb7

08014aa4 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8014aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aa8:	b089      	sub	sp, #36	; 0x24
 8014aaa:	4693      	mov	fp, r2
 8014aac:	461d      	mov	r5, r3
 8014aae:	2400      	movs	r4, #0
 8014ab0:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8014ab4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014ab8:	468a      	mov	sl, r1
 8014aba:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8014abe:	fb09 b505 	mla	r5, r9, r5, fp
 8014ac2:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8014ac6:	4606      	mov	r6, r0
 8014ac8:	9403      	str	r4, [sp, #12]
 8014aca:	e9cd 3400 	strd	r3, r4, [sp]
 8014ace:	f7ff ff87 	bl	80149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014ad2:	f8ad 8014 	strh.w	r8, [sp, #20]
 8014ad6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014ada:	f8ad 7016 	strh.w	r7, [sp, #22]
 8014ade:	f8ad 4018 	strh.w	r4, [sp, #24]
 8014ae2:	9504      	str	r5, [sp, #16]
 8014ae4:	f8ad 901a 	strh.w	r9, [sp, #26]
 8014ae8:	f8cd a00c 	str.w	sl, [sp, #12]
 8014aec:	f8ad 401c 	strh.w	r4, [sp, #28]
 8014af0:	f88d 401e 	strb.w	r4, [sp, #30]
 8014af4:	f1b8 0f00 	cmp.w	r8, #0
 8014af8:	d000      	beq.n	8014afc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x58>
 8014afa:	b937      	cbnz	r7, 8014b0a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x66>
 8014afc:	4b0d      	ldr	r3, [pc, #52]	; (8014b34 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x90>)
 8014afe:	f240 2119 	movw	r1, #537	; 0x219
 8014b02:	4a0d      	ldr	r2, [pc, #52]	; (8014b38 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8014b04:	480d      	ldr	r0, [pc, #52]	; (8014b3c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8014b06:	f010 f97d 	bl	8024e04 <__assert_func>
 8014b0a:	6833      	ldr	r3, [r6, #0]
 8014b0c:	4630      	mov	r0, r6
 8014b0e:	9c00      	ldr	r4, [sp, #0]
 8014b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b12:	4798      	blx	r3
 8014b14:	4220      	tst	r0, r4
 8014b16:	d104      	bne.n	8014b22 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x7e>
 8014b18:	4b09      	ldr	r3, [pc, #36]	; (8014b40 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8014b1a:	f240 211a 	movw	r1, #538	; 0x21a
 8014b1e:	4a06      	ldr	r2, [pc, #24]	; (8014b38 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8014b20:	e7f0      	b.n	8014b04 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 8014b22:	6870      	ldr	r0, [r6, #4]
 8014b24:	4669      	mov	r1, sp
 8014b26:	6803      	ldr	r3, [r0, #0]
 8014b28:	685b      	ldr	r3, [r3, #4]
 8014b2a:	4798      	blx	r3
 8014b2c:	b009      	add	sp, #36	; 0x24
 8014b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b32:	bf00      	nop
 8014b34:	0802affc 	.word	0x0802affc
 8014b38:	0802b322 	.word	0x0802b322
 8014b3c:	0802b131 	.word	0x0802b131
 8014b40:	0802b034 	.word	0x0802b034

08014b44 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8014b44:	b508      	push	{r3, lr}
 8014b46:	290d      	cmp	r1, #13
 8014b48:	d817      	bhi.n	8014b7a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8014b4a:	e8df f001 	tbb	[pc, r1]
 8014b4e:	090b      	.short	0x090b
 8014b50:	0d0d0d07 	.word	0x0d0d0d07
 8014b54:	1414140d 	.word	0x1414140d
 8014b58:	0d0d1414 	.word	0x0d0d1414
 8014b5c:	2020      	movs	r0, #32
 8014b5e:	bd08      	pop	{r3, pc}
 8014b60:	2018      	movs	r0, #24
 8014b62:	e7fc      	b.n	8014b5e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014b64:	2010      	movs	r0, #16
 8014b66:	e7fa      	b.n	8014b5e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014b68:	4b05      	ldr	r3, [pc, #20]	; (8014b80 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8014b6a:	f240 2177 	movw	r1, #631	; 0x277
 8014b6e:	4a05      	ldr	r2, [pc, #20]	; (8014b84 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8014b70:	4805      	ldr	r0, [pc, #20]	; (8014b88 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8014b72:	f010 f947 	bl	8024e04 <__assert_func>
 8014b76:	2008      	movs	r0, #8
 8014b78:	e7f1      	b.n	8014b5e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014b7a:	2000      	movs	r0, #0
 8014b7c:	e7ef      	b.n	8014b5e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014b7e:	bf00      	nop
 8014b80:	0802b1ad 	.word	0x0802b1ad
 8014b84:	0802b63b 	.word	0x0802b63b
 8014b88:	0802b131 	.word	0x0802b131

08014b8c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8014b8c:	b570      	push	{r4, r5, r6, lr}
 8014b8e:	460d      	mov	r5, r1
 8014b90:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8014b94:	4616      	mov	r6, r2
 8014b96:	461c      	mov	r4, r3
 8014b98:	f7ff ffd4 	bl	8014b44 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8014b9c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014ba0:	10c0      	asrs	r0, r0, #3
 8014ba2:	fb06 5101 	mla	r1, r6, r1, r5
 8014ba6:	fb00 4001 	mla	r0, r0, r1, r4
 8014baa:	bd70      	pop	{r4, r5, r6, pc}

08014bac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8014bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bb0:	b08a      	sub	sp, #40	; 0x28
 8014bb2:	f04f 0c00 	mov.w	ip, #0
 8014bb6:	4604      	mov	r4, r0
 8014bb8:	469a      	mov	sl, r3
 8014bba:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8014bbe:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8014bc2:	2d0b      	cmp	r5, #11
 8014bc4:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8014bc8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8014bcc:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8014bd0:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8014bd4:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8014bd8:	f8cd c014 	str.w	ip, [sp, #20]
 8014bdc:	d129      	bne.n	8014c32 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x86>
 8014bde:	2080      	movs	r0, #128	; 0x80
 8014be0:	9204      	str	r2, [sp, #16]
 8014be2:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8014be6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014bea:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014bee:	f8ad 701c 	strh.w	r7, [sp, #28]
 8014bf2:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	f7ff fef0 	bl	80149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014c00:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8014c04:	4603      	mov	r3, r0
 8014c06:	4651      	mov	r1, sl
 8014c08:	4620      	mov	r0, r4
 8014c0a:	e9cd 9800 	strd	r9, r8, [sp]
 8014c0e:	f7ff ffbd 	bl	8014b8c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014c12:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8014c16:	9006      	str	r0, [sp, #24]
 8014c18:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8014c1c:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8014c20:	b107      	cbz	r7, 8014c24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x78>
 8014c22:	b9d6      	cbnz	r6, 8014c5a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xae>
 8014c24:	4b17      	ldr	r3, [pc, #92]	; (8014c84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8014c26:	f240 11cf 	movw	r1, #463	; 0x1cf
 8014c2a:	4a17      	ldr	r2, [pc, #92]	; (8014c88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8014c2c:	4817      	ldr	r0, [pc, #92]	; (8014c8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 8014c2e:	f010 f8e9 	bl	8024e04 <__assert_func>
 8014c32:	2d02      	cmp	r5, #2
 8014c34:	d108      	bne.n	8014c48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x9c>
 8014c36:	2bff      	cmp	r3, #255	; 0xff
 8014c38:	d104      	bne.n	8014c44 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x98>
 8014c3a:	2800      	cmp	r0, #0
 8014c3c:	bf14      	ite	ne
 8014c3e:	2040      	movne	r0, #64	; 0x40
 8014c40:	2020      	moveq	r0, #32
 8014c42:	e7cd      	b.n	8014be0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8014c44:	2040      	movs	r0, #64	; 0x40
 8014c46:	e7cb      	b.n	8014be0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8014c48:	2bff      	cmp	r3, #255	; 0xff
 8014c4a:	d104      	bne.n	8014c56 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xaa>
 8014c4c:	2800      	cmp	r0, #0
 8014c4e:	bf14      	ite	ne
 8014c50:	2004      	movne	r0, #4
 8014c52:	2001      	moveq	r0, #1
 8014c54:	e7c4      	b.n	8014be0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8014c56:	2004      	movs	r0, #4
 8014c58:	e7c2      	b.n	8014be0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8014c5a:	6823      	ldr	r3, [r4, #0]
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	9d02      	ldr	r5, [sp, #8]
 8014c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c62:	4798      	blx	r3
 8014c64:	4228      	tst	r0, r5
 8014c66:	d104      	bne.n	8014c72 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc6>
 8014c68:	4b09      	ldr	r3, [pc, #36]	; (8014c90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe4>)
 8014c6a:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8014c6e:	4a06      	ldr	r2, [pc, #24]	; (8014c88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8014c70:	e7dc      	b.n	8014c2c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x80>
 8014c72:	6860      	ldr	r0, [r4, #4]
 8014c74:	a902      	add	r1, sp, #8
 8014c76:	6803      	ldr	r3, [r0, #0]
 8014c78:	685b      	ldr	r3, [r3, #4]
 8014c7a:	4798      	blx	r3
 8014c7c:	b00a      	add	sp, #40	; 0x28
 8014c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c82:	bf00      	nop
 8014c84:	0802af7f 	.word	0x0802af7f
 8014c88:	0802b4d5 	.word	0x0802b4d5
 8014c8c:	0802b131 	.word	0x0802b131
 8014c90:	0802afb7 	.word	0x0802afb7

08014c94 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8014c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c98:	b08b      	sub	sp, #44	; 0x2c
 8014c9a:	469b      	mov	fp, r3
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	4692      	mov	sl, r2
 8014ca0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8014ca4:	2600      	movs	r6, #0
 8014ca6:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8014caa:	4689      	mov	r9, r1
 8014cac:	2fff      	cmp	r7, #255	; 0xff
 8014cae:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8014cb2:	9605      	str	r6, [sp, #20]
 8014cb4:	bf14      	ite	ne
 8014cb6:	2308      	movne	r3, #8
 8014cb8:	2302      	moveq	r3, #2
 8014cba:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8014cbe:	f7ff fe8f 	bl	80149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014cc2:	465a      	mov	r2, fp
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	4651      	mov	r1, sl
 8014cc8:	4620      	mov	r0, r4
 8014cca:	e9cd 8500 	strd	r8, r5, [sp]
 8014cce:	f7ff ff5d 	bl	8014b8c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014cd2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014cd6:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8014cda:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014cde:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014ce2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8014ce6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014cea:	6823      	ldr	r3, [r4, #0]
 8014cec:	9d02      	ldr	r5, [sp, #8]
 8014cee:	9006      	str	r0, [sp, #24]
 8014cf0:	4620      	mov	r0, r4
 8014cf2:	f8ad 6020 	strh.w	r6, [sp, #32]
 8014cf6:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8014cfa:	f8cd 9014 	str.w	r9, [sp, #20]
 8014cfe:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8014d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d04:	4798      	blx	r3
 8014d06:	4228      	tst	r0, r5
 8014d08:	d106      	bne.n	8014d18 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8014d0a:	4b07      	ldr	r3, [pc, #28]	; (8014d28 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8014d0c:	f240 212e 	movw	r1, #558	; 0x22e
 8014d10:	4a06      	ldr	r2, [pc, #24]	; (8014d2c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8014d12:	4807      	ldr	r0, [pc, #28]	; (8014d30 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8014d14:	f010 f876 	bl	8024e04 <__assert_func>
 8014d18:	6860      	ldr	r0, [r4, #4]
 8014d1a:	a902      	add	r1, sp, #8
 8014d1c:	6803      	ldr	r3, [r0, #0]
 8014d1e:	685b      	ldr	r3, [r3, #4]
 8014d20:	4798      	blx	r3
 8014d22:	b00b      	add	sp, #44	; 0x2c
 8014d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d28:	0802afb7 	.word	0x0802afb7
 8014d2c:	0802b5a6 	.word	0x0802b5a6
 8014d30:	0802b131 	.word	0x0802b131

08014d34 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8014d34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014d38:	461f      	mov	r7, r3
 8014d3a:	4b0b      	ldr	r3, [pc, #44]	; (8014d68 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8014d3c:	460d      	mov	r5, r1
 8014d3e:	4616      	mov	r6, r2
 8014d40:	f8b3 8000 	ldrh.w	r8, [r3]
 8014d44:	4604      	mov	r4, r0
 8014d46:	f7f0 fc17 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 8014d4a:	6803      	ldr	r3, [r0, #0]
 8014d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d4e:	4798      	blx	r3
 8014d50:	463b      	mov	r3, r7
 8014d52:	4632      	mov	r2, r6
 8014d54:	4629      	mov	r1, r5
 8014d56:	e9cd 8000 	strd	r8, r0, [sp]
 8014d5a:	4620      	mov	r0, r4
 8014d5c:	f7ff ff16 	bl	8014b8c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014d60:	b002      	add	sp, #8
 8014d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d66:	bf00      	nop
 8014d68:	200566da 	.word	0x200566da

08014d6c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8014d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d70:	4698      	mov	r8, r3
 8014d72:	b088      	sub	sp, #32
 8014d74:	2300      	movs	r3, #0
 8014d76:	4617      	mov	r7, r2
 8014d78:	4604      	mov	r4, r0
 8014d7a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8014d7e:	9303      	str	r3, [sp, #12]
 8014d80:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014d84:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8014d88:	f8ad 6014 	strh.w	r6, [sp, #20]
 8014d8c:	f8ad 5016 	strh.w	r5, [sp, #22]
 8014d90:	e9cd 3100 	strd	r3, r1, [sp]
 8014d94:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014d98:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014d9c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8014da0:	f88d 301c 	strb.w	r3, [sp, #28]
 8014da4:	f7ff fe1c 	bl	80149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014da8:	4642      	mov	r2, r8
 8014daa:	4603      	mov	r3, r0
 8014dac:	4639      	mov	r1, r7
 8014dae:	4620      	mov	r0, r4
 8014db0:	f7ff ffc0 	bl	8014d34 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014db4:	4b16      	ldr	r3, [pc, #88]	; (8014e10 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8014db6:	9004      	str	r0, [sp, #16]
 8014db8:	881b      	ldrh	r3, [r3, #0]
 8014dba:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014dbe:	f7f0 fbdb 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 8014dc2:	6803      	ldr	r3, [r0, #0]
 8014dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dc6:	4798      	blx	r3
 8014dc8:	f88d 001e 	strb.w	r0, [sp, #30]
 8014dcc:	f88d 001d 	strb.w	r0, [sp, #29]
 8014dd0:	b106      	cbz	r6, 8014dd4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8014dd2:	b935      	cbnz	r5, 8014de2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8014dd4:	4b0f      	ldr	r3, [pc, #60]	; (8014e14 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8014dd6:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8014dda:	4a0f      	ldr	r2, [pc, #60]	; (8014e18 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8014ddc:	480f      	ldr	r0, [pc, #60]	; (8014e1c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8014dde:	f010 f811 	bl	8024e04 <__assert_func>
 8014de2:	6823      	ldr	r3, [r4, #0]
 8014de4:	4620      	mov	r0, r4
 8014de6:	9d00      	ldr	r5, [sp, #0]
 8014de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dea:	4798      	blx	r3
 8014dec:	4228      	tst	r0, r5
 8014dee:	d104      	bne.n	8014dfa <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8014df0:	4b0b      	ldr	r3, [pc, #44]	; (8014e20 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8014df2:	f240 11ed 	movw	r1, #493	; 0x1ed
 8014df6:	4a08      	ldr	r2, [pc, #32]	; (8014e18 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8014df8:	e7f0      	b.n	8014ddc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8014dfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014dfc:	4669      	mov	r1, sp
 8014dfe:	6860      	ldr	r0, [r4, #4]
 8014e00:	9303      	str	r3, [sp, #12]
 8014e02:	6803      	ldr	r3, [r0, #0]
 8014e04:	685b      	ldr	r3, [r3, #4]
 8014e06:	4798      	blx	r3
 8014e08:	b008      	add	sp, #32
 8014e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e0e:	bf00      	nop
 8014e10:	200566da 	.word	0x200566da
 8014e14:	0802af7f 	.word	0x0802af7f
 8014e18:	0802b387 	.word	0x0802b387
 8014e1c:	0802b131 	.word	0x0802b131
 8014e20:	0802afb7 	.word	0x0802afb7

08014e24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8014e24:	b570      	push	{r4, r5, r6, lr}
 8014e26:	b08a      	sub	sp, #40	; 0x28
 8014e28:	4604      	mov	r4, r0
 8014e2a:	466b      	mov	r3, sp
 8014e2c:	e883 0006 	stmia.w	r3, {r1, r2}
 8014e30:	4b1f      	ldr	r3, [pc, #124]	; (8014eb0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	b933      	cbnz	r3, 8014e44 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8014e36:	4b1f      	ldr	r3, [pc, #124]	; (8014eb4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8014e38:	f240 213f 	movw	r1, #575	; 0x23f
 8014e3c:	4a1e      	ldr	r2, [pc, #120]	; (8014eb8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8014e3e:	481f      	ldr	r0, [pc, #124]	; (8014ebc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8014e40:	f00f ffe0 	bl	8024e04 <__assert_func>
 8014e44:	2300      	movs	r3, #0
 8014e46:	f8bd 5000 	ldrh.w	r5, [sp]
 8014e4a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8014e4e:	9305      	str	r3, [sp, #20]
 8014e50:	2301      	movs	r3, #1
 8014e52:	9302      	str	r3, [sp, #8]
 8014e54:	6803      	ldr	r3, [r0, #0]
 8014e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e58:	4798      	blx	r3
 8014e5a:	4632      	mov	r2, r6
 8014e5c:	4629      	mov	r1, r5
 8014e5e:	4603      	mov	r3, r0
 8014e60:	4620      	mov	r0, r4
 8014e62:	f7ff ff67 	bl	8014d34 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014e66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014e68:	9003      	str	r0, [sp, #12]
 8014e6a:	9306      	str	r3, [sp, #24]
 8014e6c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014e70:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014e74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014e78:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014e7c:	4b10      	ldr	r3, [pc, #64]	; (8014ec0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8014e7e:	881b      	ldrh	r3, [r3, #0]
 8014e80:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014e84:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014e88:	f7f0 fb76 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 8014e8c:	6803      	ldr	r3, [r0, #0]
 8014e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e90:	4798      	blx	r3
 8014e92:	23ff      	movs	r3, #255	; 0xff
 8014e94:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8014e98:	a902      	add	r1, sp, #8
 8014e9a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8014e9e:	6860      	ldr	r0, [r4, #4]
 8014ea0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014ea4:	6803      	ldr	r3, [r0, #0]
 8014ea6:	685b      	ldr	r3, [r3, #4]
 8014ea8:	4798      	blx	r3
 8014eaa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8014eac:	b00a      	add	sp, #40	; 0x28
 8014eae:	bd70      	pop	{r4, r5, r6, pc}
 8014eb0:	200566df 	.word	0x200566df
 8014eb4:	0802b07e 	.word	0x0802b07e
 8014eb8:	0802b42b 	.word	0x0802b42b
 8014ebc:	0802b131 	.word	0x0802b131
 8014ec0:	200566da 	.word	0x200566da

08014ec4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8014ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ec6:	b08b      	sub	sp, #44	; 0x2c
 8014ec8:	4604      	mov	r4, r0
 8014eca:	466d      	mov	r5, sp
 8014ecc:	e885 0006 	stmia.w	r5, {r1, r2}
 8014ed0:	461d      	mov	r5, r3
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	f8bd 6000 	ldrh.w	r6, [sp]
 8014ed8:	9305      	str	r3, [sp, #20]
 8014eda:	2301      	movs	r3, #1
 8014edc:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8014ee0:	9302      	str	r3, [sp, #8]
 8014ee2:	6803      	ldr	r3, [r0, #0]
 8014ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ee6:	4798      	blx	r3
 8014ee8:	463a      	mov	r2, r7
 8014eea:	4631      	mov	r1, r6
 8014eec:	4603      	mov	r3, r0
 8014eee:	4620      	mov	r0, r4
 8014ef0:	f7ff ff20 	bl	8014d34 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014ef4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014ef8:	9003      	str	r0, [sp, #12]
 8014efa:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014efe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014f02:	9506      	str	r5, [sp, #24]
 8014f04:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014f08:	4b0d      	ldr	r3, [pc, #52]	; (8014f40 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8014f0a:	881b      	ldrh	r3, [r3, #0]
 8014f0c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014f10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014f12:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014f16:	f7f0 fb2f 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 8014f1a:	6803      	ldr	r3, [r0, #0]
 8014f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f1e:	4798      	blx	r3
 8014f20:	23ff      	movs	r3, #255	; 0xff
 8014f22:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8014f26:	a902      	add	r1, sp, #8
 8014f28:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8014f2c:	6860      	ldr	r0, [r4, #4]
 8014f2e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014f32:	6803      	ldr	r3, [r0, #0]
 8014f34:	685b      	ldr	r3, [r3, #4]
 8014f36:	4798      	blx	r3
 8014f38:	4628      	mov	r0, r5
 8014f3a:	b00b      	add	sp, #44	; 0x2c
 8014f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f3e:	bf00      	nop
 8014f40:	200566da 	.word	0x200566da

08014f44 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8014f44:	b570      	push	{r4, r5, r6, lr}
 8014f46:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8014f4a:	4604      	mov	r4, r0
 8014f4c:	b19b      	cbz	r3, 8014f76 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8014f4e:	2002      	movs	r0, #2
 8014f50:	f7ed fdd2 	bl	8002af8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8014f54:	2300      	movs	r3, #0
 8014f56:	4620      	mov	r0, r4
 8014f58:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014f5c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8014f60:	6823      	ldr	r3, [r4, #0]
 8014f62:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8014f66:	f7ff fd3b 	bl	80149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014f6a:	4601      	mov	r1, r0
 8014f6c:	4620      	mov	r0, r4
 8014f6e:	462b      	mov	r3, r5
 8014f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f74:	4718      	bx	r3
 8014f76:	bd70      	pop	{r4, r5, r6, pc}

08014f78 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8014f78:	b538      	push	{r3, r4, r5, lr}
 8014f7a:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8014f7e:	4604      	mov	r4, r0
 8014f80:	460d      	mov	r5, r1
 8014f82:	428a      	cmp	r2, r1
 8014f84:	d008      	beq.n	8014f98 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 8014f86:	2a01      	cmp	r2, #1
 8014f88:	6803      	ldr	r3, [r0, #0]
 8014f8a:	d106      	bne.n	8014f9a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8014f8c:	b929      	cbnz	r1, 8014f9a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8014f8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014f92:	4798      	blx	r3
 8014f94:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8014f98:	bd38      	pop	{r3, r4, r5, pc}
 8014f9a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8014f9e:	4620      	mov	r0, r4
 8014fa0:	e7f7      	b.n	8014f92 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08014fa4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8014fa4:	4b0d      	ldr	r3, [pc, #52]	; (8014fdc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8014fa6:	b510      	push	{r4, lr}
 8014fa8:	781b      	ldrb	r3, [r3, #0]
 8014faa:	4604      	mov	r4, r0
 8014fac:	b95b      	cbnz	r3, 8014fc6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014fae:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8014fb2:	2b02      	cmp	r3, #2
 8014fb4:	d007      	beq.n	8014fc6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014fb6:	6840      	ldr	r0, [r0, #4]
 8014fb8:	f000 f93a 	bl	8015230 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8014fbc:	b118      	cbz	r0, 8014fc6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014fbe:	6862      	ldr	r2, [r4, #4]
 8014fc0:	7a53      	ldrb	r3, [r2, #9]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d0fc      	beq.n	8014fc0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8014fc6:	f7ed ffe3 	bl	8002f90 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014fca:	4620      	mov	r0, r4
 8014fcc:	2100      	movs	r1, #0
 8014fce:	f7ff ffd3 	bl	8014f78 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014fd2:	4620      	mov	r0, r4
 8014fd4:	f7ff fd04 	bl	80149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014fd8:	bd10      	pop	{r4, pc}
 8014fda:	bf00      	nop
 8014fdc:	200566de 	.word	0x200566de

08014fe0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8014fe0:	4770      	bx	lr

08014fe2 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8014fe2:	2000      	movs	r0, #0
 8014fe4:	4770      	bx	lr

08014fe6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8014fe6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8014fea:	1a13      	subs	r3, r2, r0
 8014fec:	4258      	negs	r0, r3
 8014fee:	4158      	adcs	r0, r3
 8014ff0:	4770      	bx	lr

08014ff2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8014ff2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8014ff6:	1a9b      	subs	r3, r3, r2
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	bfdc      	itt	le
 8014ffc:	6882      	ldrle	r2, [r0, #8]
 8014ffe:	189b      	addle	r3, r3, r2
 8015000:	2b01      	cmp	r3, #1
 8015002:	bfcc      	ite	gt
 8015004:	2000      	movgt	r0, #0
 8015006:	2001      	movle	r0, #1
 8015008:	4770      	bx	lr

0801500a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801500a:	6902      	ldr	r2, [r0, #16]
 801500c:	6840      	ldr	r0, [r0, #4]
 801500e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8015012:	4770      	bx	lr

08015014 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015014:	6803      	ldr	r3, [r0, #0]
 8015016:	691b      	ldr	r3, [r3, #16]
 8015018:	4718      	bx	r3

0801501a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801501a:	4770      	bx	lr

0801501c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801501c:	4770      	bx	lr
	...

08015020 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8015020:	2301      	movs	r3, #1
 8015022:	b570      	push	{r4, r5, r6, lr}
 8015024:	7203      	strb	r3, [r0, #8]
 8015026:	4604      	mov	r4, r0
 8015028:	6840      	ldr	r0, [r0, #4]
 801502a:	6803      	ldr	r3, [r0, #0]
 801502c:	699b      	ldr	r3, [r3, #24]
 801502e:	4798      	blx	r3
 8015030:	6803      	ldr	r3, [r0, #0]
 8015032:	4605      	mov	r5, r0
 8015034:	2b40      	cmp	r3, #64	; 0x40
 8015036:	d039      	beq.n	80150ac <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015038:	d815      	bhi.n	8015066 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801503a:	2b04      	cmp	r3, #4
 801503c:	d022      	beq.n	8015084 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801503e:	d808      	bhi.n	8015052 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015040:	2b01      	cmp	r3, #1
 8015042:	d033      	beq.n	80150ac <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015044:	2b02      	cmp	r3, #2
 8015046:	d108      	bne.n	801505a <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8015048:	6823      	ldr	r3, [r4, #0]
 801504a:	4620      	mov	r0, r4
 801504c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801504e:	4798      	blx	r3
 8015050:	e025      	b.n	801509e <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8015052:	2b08      	cmp	r3, #8
 8015054:	d01e      	beq.n	8015094 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8015056:	2b20      	cmp	r3, #32
 8015058:	d028      	beq.n	80150ac <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801505a:	4b17      	ldr	r3, [pc, #92]	; (80150b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 801505c:	218b      	movs	r1, #139	; 0x8b
 801505e:	4a17      	ldr	r2, [pc, #92]	; (80150bc <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8015060:	4817      	ldr	r0, [pc, #92]	; (80150c0 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8015062:	f00f fecf 	bl	8024e04 <__assert_func>
 8015066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801506a:	d01f      	beq.n	80150ac <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801506c:	d804      	bhi.n	8015078 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 801506e:	2b80      	cmp	r3, #128	; 0x80
 8015070:	d01c      	beq.n	80150ac <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015076:	e7ef      	b.n	8015058 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8015078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801507c:	d016      	beq.n	80150ac <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801507e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015082:	e7e0      	b.n	8015046 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8015084:	6823      	ldr	r3, [r4, #0]
 8015086:	7f01      	ldrb	r1, [r0, #28]
 8015088:	4620      	mov	r0, r4
 801508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801508c:	4798      	blx	r3
 801508e:	6823      	ldr	r3, [r4, #0]
 8015090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015092:	e006      	b.n	80150a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8015094:	6823      	ldr	r3, [r4, #0]
 8015096:	7f01      	ldrb	r1, [r0, #28]
 8015098:	4620      	mov	r0, r4
 801509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801509c:	4798      	blx	r3
 801509e:	6823      	ldr	r3, [r4, #0]
 80150a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150a2:	4629      	mov	r1, r5
 80150a4:	4620      	mov	r0, r4
 80150a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150aa:	4718      	bx	r3
 80150ac:	6823      	ldr	r3, [r4, #0]
 80150ae:	4620      	mov	r0, r4
 80150b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150b2:	4798      	blx	r3
 80150b4:	e7eb      	b.n	801508e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80150b6:	bf00      	nop
 80150b8:	0802b684 	.word	0x0802b684
 80150bc:	0802b794 	.word	0x0802b794
 80150c0:	0802b6a9 	.word	0x0802b6a9

080150c4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80150c4:	b570      	push	{r4, r5, r6, lr}
 80150c6:	4604      	mov	r4, r0
 80150c8:	460e      	mov	r6, r1
 80150ca:	6860      	ldr	r0, [r4, #4]
 80150cc:	6803      	ldr	r3, [r0, #0]
 80150ce:	685b      	ldr	r3, [r3, #4]
 80150d0:	4798      	blx	r3
 80150d2:	2800      	cmp	r0, #0
 80150d4:	d1f9      	bne.n	80150ca <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80150d6:	4d0d      	ldr	r5, [pc, #52]	; (801510c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80150d8:	6828      	ldr	r0, [r5, #0]
 80150da:	6803      	ldr	r3, [r0, #0]
 80150dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80150de:	4798      	blx	r3
 80150e0:	f7ed ff70 	bl	8002fc4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80150e4:	6828      	ldr	r0, [r5, #0]
 80150e6:	2101      	movs	r1, #1
 80150e8:	f7ff ff46 	bl	8014f78 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80150ec:	6860      	ldr	r0, [r4, #4]
 80150ee:	4631      	mov	r1, r6
 80150f0:	6803      	ldr	r3, [r0, #0]
 80150f2:	689b      	ldr	r3, [r3, #8]
 80150f4:	4798      	blx	r3
 80150f6:	6823      	ldr	r3, [r4, #0]
 80150f8:	4620      	mov	r0, r4
 80150fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150fc:	4798      	blx	r3
 80150fe:	6828      	ldr	r0, [r5, #0]
 8015100:	6803      	ldr	r3, [r0, #0]
 8015102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015108:	4718      	bx	r3
 801510a:	bf00      	nop
 801510c:	200566e0 	.word	0x200566e0

08015110 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015110:	b508      	push	{r3, lr}
 8015112:	f7ed ff3d 	bl	8002f90 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801511a:	f7ed bf47 	b.w	8002fac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801511e <_ZN8touchgfx13DMA_Interface5startEv>:
 801511e:	b510      	push	{r4, lr}
 8015120:	4604      	mov	r4, r0
 8015122:	6840      	ldr	r0, [r0, #4]
 8015124:	6803      	ldr	r3, [r0, #0]
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	4798      	blx	r3
 801512a:	b948      	cbnz	r0, 8015140 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801512c:	7a63      	ldrb	r3, [r4, #9]
 801512e:	b13b      	cbz	r3, 8015140 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015130:	7a23      	ldrb	r3, [r4, #8]
 8015132:	b92b      	cbnz	r3, 8015140 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015134:	6823      	ldr	r3, [r4, #0]
 8015136:	4620      	mov	r0, r4
 8015138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801513a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801513e:	4718      	bx	r3
 8015140:	bd10      	pop	{r4, pc}
	...

08015144 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015144:	b510      	push	{r4, lr}
 8015146:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801514a:	1b12      	subs	r2, r2, r4
 801514c:	2a00      	cmp	r2, #0
 801514e:	bfdc      	itt	le
 8015150:	6883      	ldrle	r3, [r0, #8]
 8015152:	18d2      	addle	r2, r2, r3
 8015154:	2a01      	cmp	r2, #1
 8015156:	dd18      	ble.n	801518a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8015158:	6843      	ldr	r3, [r0, #4]
 801515a:	f101 021c 	add.w	r2, r1, #28
 801515e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8015162:	f851 4b04 	ldr.w	r4, [r1], #4
 8015166:	4291      	cmp	r1, r2
 8015168:	f843 4b04 	str.w	r4, [r3], #4
 801516c:	d1f9      	bne.n	8015162 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801516e:	880a      	ldrh	r2, [r1, #0]
 8015170:	801a      	strh	r2, [r3, #0]
 8015172:	788a      	ldrb	r2, [r1, #2]
 8015174:	709a      	strb	r2, [r3, #2]
 8015176:	68c3      	ldr	r3, [r0, #12]
 8015178:	6882      	ldr	r2, [r0, #8]
 801517a:	f3bf 8f5b 	dmb	ish
 801517e:	3301      	adds	r3, #1
 8015180:	429a      	cmp	r2, r3
 8015182:	bfd8      	it	le
 8015184:	1a9b      	suble	r3, r3, r2
 8015186:	60c3      	str	r3, [r0, #12]
 8015188:	bd10      	pop	{r4, pc}
 801518a:	4b03      	ldr	r3, [pc, #12]	; (8015198 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801518c:	2139      	movs	r1, #57	; 0x39
 801518e:	4a03      	ldr	r2, [pc, #12]	; (801519c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8015190:	4803      	ldr	r0, [pc, #12]	; (80151a0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8015192:	f00f fe37 	bl	8024e04 <__assert_func>
 8015196:	bf00      	nop
 8015198:	0802b6cf 	.word	0x0802b6cf
 801519c:	0802b7c4 	.word	0x0802b7c4
 80151a0:	0802b6a9 	.word	0x0802b6a9

080151a4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80151a4:	b510      	push	{r4, lr}
 80151a6:	6803      	ldr	r3, [r0, #0]
 80151a8:	4604      	mov	r4, r0
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	4798      	blx	r3
 80151ae:	b128      	cbz	r0, 80151bc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80151b0:	4b07      	ldr	r3, [pc, #28]	; (80151d0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80151b2:	213f      	movs	r1, #63	; 0x3f
 80151b4:	4a07      	ldr	r2, [pc, #28]	; (80151d4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80151b6:	4808      	ldr	r0, [pc, #32]	; (80151d8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80151b8:	f00f fe24 	bl	8024e04 <__assert_func>
 80151bc:	6923      	ldr	r3, [r4, #16]
 80151be:	68a2      	ldr	r2, [r4, #8]
 80151c0:	f3bf 8f5b 	dmb	ish
 80151c4:	3301      	adds	r3, #1
 80151c6:	429a      	cmp	r2, r3
 80151c8:	bfd8      	it	le
 80151ca:	1a9b      	suble	r3, r3, r2
 80151cc:	6123      	str	r3, [r4, #16]
 80151ce:	bd10      	pop	{r4, pc}
 80151d0:	0802b6f2 	.word	0x0802b6f2
 80151d4:	0802b812 	.word	0x0802b812
 80151d8:	0802b6a9 	.word	0x0802b6a9

080151dc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80151dc:	b570      	push	{r4, r5, r6, lr}
 80151de:	4604      	mov	r4, r0
 80151e0:	6840      	ldr	r0, [r0, #4]
 80151e2:	6803      	ldr	r3, [r0, #0]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	4798      	blx	r3
 80151e8:	4605      	mov	r5, r0
 80151ea:	b930      	cbnz	r0, 80151fa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80151ec:	7a23      	ldrb	r3, [r4, #8]
 80151ee:	b123      	cbz	r3, 80151fa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80151f0:	6860      	ldr	r0, [r4, #4]
 80151f2:	6803      	ldr	r3, [r0, #0]
 80151f4:	695b      	ldr	r3, [r3, #20]
 80151f6:	4798      	blx	r3
 80151f8:	7225      	strb	r5, [r4, #8]
 80151fa:	6860      	ldr	r0, [r4, #4]
 80151fc:	6803      	ldr	r3, [r0, #0]
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	4798      	blx	r3
 8015202:	b928      	cbnz	r0, 8015210 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015204:	6823      	ldr	r3, [r4, #0]
 8015206:	4620      	mov	r0, r4
 8015208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801520a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801520e:	4718      	bx	r3
 8015210:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015214:	f7ed bee2 	b.w	8002fdc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08015218 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015218:	b510      	push	{r4, lr}
 801521a:	6082      	str	r2, [r0, #8]
 801521c:	2200      	movs	r2, #0
 801521e:	4c03      	ldr	r4, [pc, #12]	; (801522c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015220:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015224:	e9c0 4100 	strd	r4, r1, [r0]
 8015228:	bd10      	pop	{r4, pc}
 801522a:	bf00      	nop
 801522c:	0802b778 	.word	0x0802b778

08015230 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015230:	6840      	ldr	r0, [r0, #4]
 8015232:	6803      	ldr	r3, [r0, #0]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	4718      	bx	r3

08015238 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8015238:	2001      	movs	r0, #1
 801523a:	4770      	bx	lr

0801523c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 801523c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015240:	460d      	mov	r5, r1
 8015242:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8015246:	b085      	sub	sp, #20
 8015248:	4690      	mov	r8, r2
 801524a:	4411      	add	r1, r2
 801524c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015250:	4699      	mov	r9, r3
 8015252:	6803      	ldr	r3, [r0, #0]
 8015254:	60c1      	str	r1, [r0, #12]
 8015256:	4604      	mov	r4, r0
 8015258:	990c      	ldr	r1, [sp, #48]	; 0x30
 801525a:	440a      	add	r2, r1
 801525c:	6102      	str	r2, [r0, #16]
 801525e:	68db      	ldr	r3, [r3, #12]
 8015260:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8015264:	4798      	blx	r3
 8015266:	2800      	cmp	r0, #0
 8015268:	d03a      	beq.n	80152e0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa4>
 801526a:	44c8      	add	r8, r9
 801526c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015270:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015274:	4445      	add	r5, r8
 8015276:	442e      	add	r6, r5
 8015278:	6823      	ldr	r3, [r4, #0]
 801527a:	f10d 020f 	add.w	r2, sp, #15
 801527e:	a903      	add	r1, sp, #12
 8015280:	4620      	mov	r0, r4
 8015282:	9200      	str	r2, [sp, #0]
 8015284:	f10d 020d 	add.w	r2, sp, #13
 8015288:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801528c:	f10d 030e 	add.w	r3, sp, #14
 8015290:	47c0      	blx	r8
 8015292:	b1f0      	cbz	r0, 80152d2 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x96>
 8015294:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8015298:	7a20      	ldrb	r0, [r4, #8]
 801529a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801529e:	4358      	muls	r0, r3
 80152a0:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80152a4:	1c43      	adds	r3, r0, #1
 80152a6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80152aa:	7838      	ldrb	r0, [r7, #0]
 80152ac:	121b      	asrs	r3, r3, #8
 80152ae:	fb10 f003 	smulbb	r0, r0, r3
 80152b2:	b283      	uxth	r3, r0
 80152b4:	1c58      	adds	r0, r3, #1
 80152b6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80152ba:	6823      	ldr	r3, [r4, #0]
 80152bc:	1200      	asrs	r0, r0, #8
 80152be:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80152c2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80152c6:	28ff      	cmp	r0, #255	; 0xff
 80152c8:	d10d      	bne.n	80152e6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xaa>
 80152ca:	9100      	str	r1, [sp, #0]
 80152cc:	4629      	mov	r1, r5
 80152ce:	4620      	mov	r0, r4
 80152d0:	47c0      	blx	r8
 80152d2:	68e3      	ldr	r3, [r4, #12]
 80152d4:	3503      	adds	r5, #3
 80152d6:	3701      	adds	r7, #1
 80152d8:	3301      	adds	r3, #1
 80152da:	42ae      	cmp	r6, r5
 80152dc:	60e3      	str	r3, [r4, #12]
 80152de:	d8cb      	bhi.n	8015278 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x3c>
 80152e0:	b005      	add	sp, #20
 80152e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152e6:	fa1f fc80 	uxth.w	ip, r0
 80152ea:	43c0      	mvns	r0, r0
 80152ec:	f895 e002 	ldrb.w	lr, [r5, #2]
 80152f0:	fb12 f20c 	smulbb	r2, r2, ip
 80152f4:	b2c0      	uxtb	r0, r0
 80152f6:	fb13 f30c 	smulbb	r3, r3, ip
 80152fa:	fb0e 2200 	mla	r2, lr, r0, r2
 80152fe:	f895 e001 	ldrb.w	lr, [r5, #1]
 8015302:	fb11 f10c 	smulbb	r1, r1, ip
 8015306:	fb0e 3300 	mla	r3, lr, r0, r3
 801530a:	f895 e000 	ldrb.w	lr, [r5]
 801530e:	b292      	uxth	r2, r2
 8015310:	b29b      	uxth	r3, r3
 8015312:	fb0e 1000 	mla	r0, lr, r0, r1
 8015316:	1c59      	adds	r1, r3, #1
 8015318:	b280      	uxth	r0, r0
 801531a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801531e:	1c51      	adds	r1, r2, #1
 8015320:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8015324:	1c41      	adds	r1, r0, #1
 8015326:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801532a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801532e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015332:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015336:	9000      	str	r0, [sp, #0]
 8015338:	e7c8      	b.n	80152cc <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x90>

0801533a <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 801533a:	f89d 0000 	ldrb.w	r0, [sp]
 801533e:	704b      	strb	r3, [r1, #1]
 8015340:	7008      	strb	r0, [r1, #0]
 8015342:	708a      	strb	r2, [r1, #2]
 8015344:	4770      	bx	lr

08015346 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8015346:	4413      	add	r3, r2
 8015348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801534c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801534e:	4419      	add	r1, r3
 8015350:	7a03      	ldrb	r3, [r0, #8]
 8015352:	e9dd 6406 	ldrd	r6, r4, [sp, #24]
 8015356:	2bff      	cmp	r3, #255	; 0xff
 8015358:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801535c:	440e      	add	r6, r1
 801535e:	d13d      	bne.n	80153dc <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x96>
 8015360:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015364:	3103      	adds	r1, #3
 8015366:	7d87      	ldrb	r7, [r0, #22]
 8015368:	2bff      	cmp	r3, #255	; 0xff
 801536a:	d10a      	bne.n	8015382 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3c>
 801536c:	f801 7c03 	strb.w	r7, [r1, #-3]
 8015370:	7d43      	ldrb	r3, [r0, #21]
 8015372:	f801 3c02 	strb.w	r3, [r1, #-2]
 8015376:	7d03      	ldrb	r3, [r0, #20]
 8015378:	f801 3c01 	strb.w	r3, [r1, #-1]
 801537c:	428e      	cmp	r6, r1
 801537e:	d8ef      	bhi.n	8015360 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x1a>
 8015380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015382:	b29a      	uxth	r2, r3
 8015384:	43db      	mvns	r3, r3
 8015386:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 801538a:	fb17 f702 	smulbb	r7, r7, r2
 801538e:	b2db      	uxtb	r3, r3
 8015390:	fb05 7503 	mla	r5, r5, r3, r7
 8015394:	b2ad      	uxth	r5, r5
 8015396:	1c6f      	adds	r7, r5, #1
 8015398:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801539c:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 80153a0:	fb17 f703 	smulbb	r7, r7, r3
 80153a4:	122d      	asrs	r5, r5, #8
 80153a6:	f801 5c03 	strb.w	r5, [r1, #-3]
 80153aa:	7d45      	ldrb	r5, [r0, #21]
 80153ac:	fb05 7502 	mla	r5, r5, r2, r7
 80153b0:	b2ad      	uxth	r5, r5
 80153b2:	1c6f      	adds	r7, r5, #1
 80153b4:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80153b8:	122d      	asrs	r5, r5, #8
 80153ba:	f801 5c02 	strb.w	r5, [r1, #-2]
 80153be:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80153c2:	7d07      	ldrb	r7, [r0, #20]
 80153c4:	fb15 f303 	smulbb	r3, r5, r3
 80153c8:	fb07 3202 	mla	r2, r7, r2, r3
 80153cc:	b292      	uxth	r2, r2
 80153ce:	1c53      	adds	r3, r2, #1
 80153d0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80153d4:	1212      	asrs	r2, r2, #8
 80153d6:	f801 2c01 	strb.w	r2, [r1, #-1]
 80153da:	e7cf      	b.n	801537c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x36>
 80153dc:	3103      	adds	r1, #3
 80153de:	f814 2b01 	ldrb.w	r2, [r4], #1
 80153e2:	428e      	cmp	r6, r1
 80153e4:	7a03      	ldrb	r3, [r0, #8]
 80153e6:	f101 0103 	add.w	r1, r1, #3
 80153ea:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 80153ee:	fb02 f303 	mul.w	r3, r2, r3
 80153f2:	f103 0201 	add.w	r2, r3, #1
 80153f6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80153fa:	ea4f 2222 	mov.w	r2, r2, asr #8
 80153fe:	b295      	uxth	r5, r2
 8015400:	ea6f 0202 	mvn.w	r2, r2
 8015404:	b2d3      	uxtb	r3, r2
 8015406:	7d82      	ldrb	r2, [r0, #22]
 8015408:	fb1c fc03 	smulbb	ip, ip, r3
 801540c:	fb02 c205 	mla	r2, r2, r5, ip
 8015410:	b292      	uxth	r2, r2
 8015412:	f102 0c01 	add.w	ip, r2, #1
 8015416:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801541a:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 801541e:	fb1c fc03 	smulbb	ip, ip, r3
 8015422:	ea4f 2222 	mov.w	r2, r2, asr #8
 8015426:	f801 2c06 	strb.w	r2, [r1, #-6]
 801542a:	7d42      	ldrb	r2, [r0, #21]
 801542c:	fb02 c205 	mla	r2, r2, r5, ip
 8015430:	b292      	uxth	r2, r2
 8015432:	f102 0c01 	add.w	ip, r2, #1
 8015436:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801543a:	ea4f 2222 	mov.w	r2, r2, asr #8
 801543e:	f801 2c05 	strb.w	r2, [r1, #-5]
 8015442:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8015446:	f890 c014 	ldrb.w	ip, [r0, #20]
 801544a:	fb12 f303 	smulbb	r3, r2, r3
 801544e:	fb0c 3305 	mla	r3, ip, r5, r3
 8015452:	b29b      	uxth	r3, r3
 8015454:	f103 0201 	add.w	r2, r3, #1
 8015458:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801545c:	ea4f 2323 	mov.w	r3, r3, asr #8
 8015460:	f801 3c04 	strb.w	r3, [r1, #-4]
 8015464:	d8bb      	bhi.n	80153de <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x98>
 8015466:	e78b      	b.n	8015380 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3a>

08015468 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8015468:	b510      	push	{r4, lr}
 801546a:	7d04      	ldrb	r4, [r0, #20]
 801546c:	700c      	strb	r4, [r1, #0]
 801546e:	7d41      	ldrb	r1, [r0, #21]
 8015470:	7011      	strb	r1, [r2, #0]
 8015472:	7d82      	ldrb	r2, [r0, #22]
 8015474:	2001      	movs	r0, #1
 8015476:	701a      	strb	r2, [r3, #0]
 8015478:	22ff      	movs	r2, #255	; 0xff
 801547a:	9b02      	ldr	r3, [sp, #8]
 801547c:	701a      	strb	r2, [r3, #0]
 801547e:	bd10      	pop	{r4, pc}

08015480 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8015480:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8015484:	4770      	bx	lr

08015486 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8015486:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801548a:	4770      	bx	lr

0801548c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 801548c:	6281      	str	r1, [r0, #40]	; 0x28
 801548e:	4770      	bx	lr

08015490 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8015490:	b510      	push	{r4, lr}
 8015492:	2200      	movs	r2, #0
 8015494:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8015498:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801549c:	8002      	strh	r2, [r0, #0]
 801549e:	8042      	strh	r2, [r0, #2]
 80154a0:	8084      	strh	r4, [r0, #4]
 80154a2:	80c1      	strh	r1, [r0, #6]
 80154a4:	bd10      	pop	{r4, pc}

080154a6 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80154a6:	2200      	movs	r2, #0
 80154a8:	8002      	strh	r2, [r0, #0]
 80154aa:	8042      	strh	r2, [r0, #2]
 80154ac:	8082      	strh	r2, [r0, #4]
 80154ae:	80c2      	strh	r2, [r0, #6]
 80154b0:	4770      	bx	lr
	...

080154b4 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 80154b4:	b508      	push	{r3, lr}
 80154b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80154b8:	b928      	cbnz	r0, 80154c6 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 80154ba:	4b03      	ldr	r3, [pc, #12]	; (80154c8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 80154bc:	2126      	movs	r1, #38	; 0x26
 80154be:	4a03      	ldr	r2, [pc, #12]	; (80154cc <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 80154c0:	4803      	ldr	r0, [pc, #12]	; (80154d0 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 80154c2:	f00f fc9f 	bl	8024e04 <__assert_func>
 80154c6:	bd08      	pop	{r3, pc}
 80154c8:	0802b884 	.word	0x0802b884
 80154cc:	0802b964 	.word	0x0802b964
 80154d0:	0802b8ab 	.word	0x0802b8ab

080154d4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80154d4:	b510      	push	{r4, lr}
 80154d6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80154da:	888a      	ldrh	r2, [r1, #4]
 80154dc:	f9b0 3000 	ldrsh.w	r3, [r0]
 80154e0:	4422      	add	r2, r4
 80154e2:	b212      	sxth	r2, r2
 80154e4:	4293      	cmp	r3, r2
 80154e6:	da15      	bge.n	8015514 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80154e8:	8882      	ldrh	r2, [r0, #4]
 80154ea:	4413      	add	r3, r2
 80154ec:	b21b      	sxth	r3, r3
 80154ee:	429c      	cmp	r4, r3
 80154f0:	da10      	bge.n	8015514 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80154f2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80154f6:	88c9      	ldrh	r1, [r1, #6]
 80154f8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80154fc:	4419      	add	r1, r3
 80154fe:	b209      	sxth	r1, r1
 8015500:	428a      	cmp	r2, r1
 8015502:	da07      	bge.n	8015514 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015504:	88c0      	ldrh	r0, [r0, #6]
 8015506:	4410      	add	r0, r2
 8015508:	b200      	sxth	r0, r0
 801550a:	4283      	cmp	r3, r0
 801550c:	bfac      	ite	ge
 801550e:	2000      	movge	r0, #0
 8015510:	2001      	movlt	r0, #1
 8015512:	bd10      	pop	{r4, pc}
 8015514:	2000      	movs	r0, #0
 8015516:	e7fc      	b.n	8015512 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08015518 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8015518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801551c:	b08b      	sub	sp, #44	; 0x2c
 801551e:	4604      	mov	r4, r0
 8015520:	6808      	ldr	r0, [r1, #0]
 8015522:	f04f 0a00 	mov.w	sl, #0
 8015526:	6849      	ldr	r1, [r1, #4]
 8015528:	ab04      	add	r3, sp, #16
 801552a:	f647 7bff 	movw	fp, #32767	; 0x7fff
 801552e:	c303      	stmia	r3!, {r0, r1}
 8015530:	4b35      	ldr	r3, [pc, #212]	; (8015608 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 8015532:	4621      	mov	r1, r4
 8015534:	a806      	add	r0, sp, #24
 8015536:	781b      	ldrb	r3, [r3, #0]
 8015538:	2b01      	cmp	r3, #1
 801553a:	6823      	ldr	r3, [r4, #0]
 801553c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801553e:	bf1f      	itttt	ne
 8015540:	f10d 090e 	addne.w	r9, sp, #14
 8015544:	ae05      	addne	r6, sp, #20
 8015546:	f10d 0516 	addne.w	r5, sp, #22
 801554a:	f10d 0812 	addne.w	r8, sp, #18
 801554e:	bf01      	itttt	eq
 8015550:	f10d 0916 	addeq.w	r9, sp, #22
 8015554:	f10d 060e 	addeq.w	r6, sp, #14
 8015558:	ad05      	addeq	r5, sp, #20
 801555a:	f10d 0810 	addeq.w	r8, sp, #16
 801555e:	4798      	blx	r3
 8015560:	f9b5 3000 	ldrsh.w	r3, [r5]
 8015564:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8015568:	2b00      	cmp	r3, #0
 801556a:	d042      	beq.n	80155f2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 801556c:	4293      	cmp	r3, r2
 801556e:	bfa8      	it	ge
 8015570:	4613      	movge	r3, r2
 8015572:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015576:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801557a:	2f00      	cmp	r7, #0
 801557c:	dd21      	ble.n	80155c2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 801557e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8015582:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8015586:	f9b6 2000 	ldrsh.w	r2, [r6]
 801558a:	f9b9 3000 	ldrsh.w	r3, [r9]
 801558e:	f8ad 0020 	strh.w	r0, [sp, #32]
 8015592:	a808      	add	r0, sp, #32
 8015594:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8015598:	a906      	add	r1, sp, #24
 801559a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801559e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80155a2:	f7ff ff97 	bl	80154d4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80155a6:	9001      	str	r0, [sp, #4]
 80155a8:	b1d0      	cbz	r0, 80155e0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 80155aa:	6822      	ldr	r2, [r4, #0]
 80155ac:	a908      	add	r1, sp, #32
 80155ae:	4620      	mov	r0, r4
 80155b0:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80155b2:	4790      	blx	r2
 80155b4:	b9a0      	cbnz	r0, 80155e0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 80155b6:	107f      	asrs	r7, r7, #1
 80155b8:	9b01      	ldr	r3, [sp, #4]
 80155ba:	f8ad 700e 	strh.w	r7, [sp, #14]
 80155be:	469a      	mov	sl, r3
 80155c0:	e7d9      	b.n	8015576 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80155c2:	d10d      	bne.n	80155e0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 80155c4:	2301      	movs	r3, #1
 80155c6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80155ca:	f8b8 2000 	ldrh.w	r2, [r8]
 80155ce:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 80155d2:	440a      	add	r2, r1
 80155d4:	f8a8 2000 	strh.w	r2, [r8]
 80155d8:	882b      	ldrh	r3, [r5, #0]
 80155da:	1a5b      	subs	r3, r3, r1
 80155dc:	802b      	strh	r3, [r5, #0]
 80155de:	e7bf      	b.n	8015560 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80155e0:	f1ba 0f00 	cmp.w	sl, #0
 80155e4:	d0f1      	beq.n	80155ca <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 80155e6:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80155ea:	455b      	cmp	r3, fp
 80155ec:	bf08      	it	eq
 80155ee:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 80155f0:	e7eb      	b.n	80155ca <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 80155f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80155f6:	429a      	cmp	r2, r3
 80155f8:	bf04      	itt	eq
 80155fa:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 80155fe:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8015600:	b00b      	add	sp, #44	; 0x2c
 8015602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015606:	bf00      	nop
 8015608:	200566d8 	.word	0x200566d8

0801560c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801560c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801560e:	b085      	sub	sp, #20
 8015610:	6803      	ldr	r3, [r0, #0]
 8015612:	4604      	mov	r4, r0
 8015614:	4601      	mov	r1, r0
 8015616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015618:	4668      	mov	r0, sp
 801561a:	4798      	blx	r3
 801561c:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8015620:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8015624:	2300      	movs	r3, #0
 8015626:	a902      	add	r1, sp, #8
 8015628:	4668      	mov	r0, sp
 801562a:	9302      	str	r3, [sp, #8]
 801562c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8015630:	f8ad 500e 	strh.w	r5, [sp, #14]
 8015634:	f7ff ff4e 	bl	80154d4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015638:	b340      	cbz	r0, 801568c <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 801563a:	f9bd 2000 	ldrsh.w	r2, [sp]
 801563e:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 8015642:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8015646:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801564a:	443a      	add	r2, r7
 801564c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 8015650:	f8ad 0000 	strh.w	r0, [sp]
 8015654:	b292      	uxth	r2, r2
 8015656:	f8ad 1002 	strh.w	r1, [sp, #2]
 801565a:	b217      	sxth	r7, r2
 801565c:	42be      	cmp	r6, r7
 801565e:	bfd8      	it	le
 8015660:	b2b2      	uxthle	r2, r6
 8015662:	1a12      	subs	r2, r2, r0
 8015664:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015668:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801566c:	4413      	add	r3, r2
 801566e:	b29b      	uxth	r3, r3
 8015670:	b21a      	sxth	r2, r3
 8015672:	4295      	cmp	r5, r2
 8015674:	bfd8      	it	le
 8015676:	b2ab      	uxthle	r3, r5
 8015678:	1a5b      	subs	r3, r3, r1
 801567a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801567e:	6823      	ldr	r3, [r4, #0]
 8015680:	4669      	mov	r1, sp
 8015682:	4620      	mov	r0, r4
 8015684:	691b      	ldr	r3, [r3, #16]
 8015686:	4798      	blx	r3
 8015688:	b005      	add	sp, #20
 801568a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801568c:	e9cd 0000 	strd	r0, r0, [sp]
 8015690:	e7f5      	b.n	801567e <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

08015694 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8015694:	2200      	movs	r2, #0
 8015696:	2101      	movs	r1, #1
 8015698:	8082      	strh	r2, [r0, #4]
 801569a:	80c2      	strh	r2, [r0, #6]
 801569c:	8102      	strh	r2, [r0, #8]
 801569e:	8142      	strh	r2, [r0, #10]
 80156a0:	8182      	strh	r2, [r0, #12]
 80156a2:	81c2      	strh	r2, [r0, #14]
 80156a4:	8202      	strh	r2, [r0, #16]
 80156a6:	8242      	strh	r2, [r0, #18]
 80156a8:	61c2      	str	r2, [r0, #28]
 80156aa:	8402      	strh	r2, [r0, #32]
 80156ac:	8442      	strh	r2, [r0, #34]	; 0x22
 80156ae:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80156b2:	6282      	str	r2, [r0, #40]	; 0x28
 80156b4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80156b8:	4905      	ldr	r1, [pc, #20]	; (80156d0 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 80156ba:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80156be:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80156c2:	6001      	str	r1, [r0, #0]
 80156c4:	8582      	strh	r2, [r0, #44]	; 0x2c
 80156c6:	22ff      	movs	r2, #255	; 0xff
 80156c8:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 80156cc:	4770      	bx	lr
 80156ce:	bf00      	nop
 80156d0:	0802b8f0 	.word	0x0802b8f0

080156d4 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 80156d4:	f101 0368 	add.w	r3, r1, #104	; 0x68
 80156d8:	4602      	mov	r2, r0
 80156da:	cb03      	ldmia	r3!, {r0, r1}
 80156dc:	6010      	str	r0, [r2, #0]
 80156de:	4610      	mov	r0, r2
 80156e0:	6051      	str	r1, [r2, #4]
 80156e2:	4770      	bx	lr

080156e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80156e4:	b507      	push	{r0, r1, r2, lr}
 80156e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80156ea:	ab01      	add	r3, sp, #4
 80156ec:	6809      	ldr	r1, [r1, #0]
 80156ee:	6800      	ldr	r0, [r0, #0]
 80156f0:	f003 fc74 	bl	8018fdc <_ZN8touchgfx6muldivElllRl>
 80156f4:	b003      	add	sp, #12
 80156f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080156fc <_ZN8touchgfx7CWRUtil4sineEi>:
 80156fc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015700:	fb90 f3f2 	sdiv	r3, r0, r2
 8015704:	fb03 0312 	mls	r3, r3, r2, r0
 8015708:	4413      	add	r3, r2
 801570a:	fb93 f0f2 	sdiv	r0, r3, r2
 801570e:	fb02 3010 	mls	r0, r2, r0, r3
 8015712:	4b0a      	ldr	r3, [pc, #40]	; (801573c <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8015714:	285a      	cmp	r0, #90	; 0x5a
 8015716:	dc02      	bgt.n	801571e <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8015718:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801571c:	4770      	bx	lr
 801571e:	28b4      	cmp	r0, #180	; 0xb4
 8015720:	dc02      	bgt.n	8015728 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8015722:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8015726:	e7f7      	b.n	8015718 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8015728:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801572c:	bfd4      	ite	le
 801572e:	38b4      	suble	r0, #180	; 0xb4
 8015730:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8015734:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8015738:	4240      	negs	r0, r0
 801573a:	4770      	bx	lr
 801573c:	0802ba0e 	.word	0x0802ba0e

08015740 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8015740:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8015744:	f04f 0300 	mov.w	r3, #0
 8015748:	bf2c      	ite	cs
 801574a:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801574e:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8015752:	1899      	adds	r1, r3, r2
 8015754:	4288      	cmp	r0, r1
 8015756:	bf24      	itt	cs
 8015758:	1853      	addcs	r3, r2, r1
 801575a:	1a40      	subcs	r0, r0, r1
 801575c:	0892      	lsrs	r2, r2, #2
 801575e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015762:	d1f6      	bne.n	8015752 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8015764:	4618      	mov	r0, r3
 8015766:	4770      	bx	lr

08015768 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8015768:	b510      	push	{r4, lr}
 801576a:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 801576e:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8015772:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8015776:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 801577a:	139b      	asrs	r3, r3, #14
 801577c:	13a4      	asrs	r4, r4, #14
 801577e:	429c      	cmp	r4, r3
 8015780:	bfb8      	it	lt
 8015782:	461c      	movlt	r4, r3
 8015784:	2c01      	cmp	r4, #1
 8015786:	dd07      	ble.n	8015798 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8015788:	fb91 f1f4 	sdiv	r1, r1, r4
 801578c:	fb90 f0f4 	sdiv	r0, r0, r4
 8015790:	f7ff ffea 	bl	8015768 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8015794:	4360      	muls	r0, r4
 8015796:	bd10      	pop	{r4, pc}
 8015798:	4340      	muls	r0, r0
 801579a:	fb01 0001 	mla	r0, r1, r1, r0
 801579e:	f7ff ffcf 	bl	8015740 <_ZN8touchgfx7CWRUtil5isqrtEm>
 80157a2:	e7f8      	b.n	8015796 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

080157a4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 80157a4:	2800      	cmp	r0, #0
 80157a6:	b508      	push	{r3, lr}
 80157a8:	da05      	bge.n	80157b6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 80157aa:	4240      	negs	r0, r0
 80157ac:	f7ff fffa 	bl	80157a4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80157b0:	4240      	negs	r0, r0
 80157b2:	b240      	sxtb	r0, r0
 80157b4:	bd08      	pop	{r3, pc}
 80157b6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80157ba:	dc11      	bgt.n	80157e0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 80157bc:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 80157c0:	dd09      	ble.n	80157d6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 80157c2:	4340      	muls	r0, r0
 80157c4:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 80157c8:	f7ff ffba 	bl	8015740 <_ZN8touchgfx7CWRUtil5isqrtEm>
 80157cc:	f7ff ffea 	bl	80157a4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80157d0:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80157d4:	e7ed      	b.n	80157b2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 80157d6:	3003      	adds	r0, #3
 80157d8:	4b02      	ldr	r3, [pc, #8]	; (80157e4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 80157da:	10c0      	asrs	r0, r0, #3
 80157dc:	5618      	ldrsb	r0, [r3, r0]
 80157de:	e7e9      	b.n	80157b4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 80157e0:	2000      	movs	r0, #0
 80157e2:	e7e7      	b.n	80157b4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 80157e4:	0802b9b2 	.word	0x0802b9b2

080157e8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 80157e8:	1e03      	subs	r3, r0, #0
 80157ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80157ec:	460c      	mov	r4, r1
 80157ee:	4615      	mov	r5, r2
 80157f0:	db01      	blt.n	80157f6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 80157f2:	2900      	cmp	r1, #0
 80157f4:	da06      	bge.n	8015804 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 80157f6:	4b10      	ldr	r3, [pc, #64]	; (8015838 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x50>)
 80157f8:	f44f 714b 	mov.w	r1, #812	; 0x32c
 80157fc:	4a0f      	ldr	r2, [pc, #60]	; (801583c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 80157fe:	4810      	ldr	r0, [pc, #64]	; (8015840 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8015800:	f00f fb00 	bl	8024e04 <__assert_func>
 8015804:	4299      	cmp	r1, r3
 8015806:	dd07      	ble.n	8015818 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x30>
 8015808:	4619      	mov	r1, r3
 801580a:	4620      	mov	r0, r4
 801580c:	f7ff ffec 	bl	80157e8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015810:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8015814:	b003      	add	sp, #12
 8015816:	bd30      	pop	{r4, r5, pc}
 8015818:	f7ff ffa6 	bl	8015768 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801581c:	6028      	str	r0, [r5, #0]
 801581e:	2800      	cmp	r0, #0
 8015820:	d0f8      	beq.n	8015814 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 8015822:	4602      	mov	r2, r0
 8015824:	ab01      	add	r3, sp, #4
 8015826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801582a:	4620      	mov	r0, r4
 801582c:	f003 fbd6 	bl	8018fdc <_ZN8touchgfx6muldivElllRl>
 8015830:	f7ff ffb8 	bl	80157a4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8015834:	e7ee      	b.n	8015814 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 8015836:	bf00      	nop
 8015838:	0802bac4 	.word	0x0802bac4
 801583c:	0802bb88 	.word	0x0802bb88
 8015840:	0802bad5 	.word	0x0802bad5

08015844 <_ZN8touchgfx4LineC1Ev>:
 8015844:	b510      	push	{r4, lr}
 8015846:	4604      	mov	r4, r0
 8015848:	f7ff ff24 	bl	8015694 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801584c:	4b0c      	ldr	r3, [pc, #48]	; (8015880 <_ZN8touchgfx4LineC1Ev+0x3c>)
 801584e:	2220      	movs	r2, #32
 8015850:	4620      	mov	r0, r4
 8015852:	6023      	str	r3, [r4, #0]
 8015854:	2300      	movs	r3, #0
 8015856:	6422      	str	r2, [r4, #64]	; 0x40
 8015858:	2212      	movs	r2, #18
 801585a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801585e:	6722      	str	r2, [r4, #112]	; 0x70
 8015860:	60a3      	str	r3, [r4, #8]
 8015862:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8015866:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801586a:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801586e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8015872:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 8015876:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 801587a:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 801587e:	bd10      	pop	{r4, pc}
 8015880:	0802bb14 	.word	0x0802bb14

08015884 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8015884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015888:	6b86      	ldr	r6, [r0, #56]	; 0x38
 801588a:	4604      	mov	r4, r0
 801588c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801588e:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8015890:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8015892:	1af6      	subs	r6, r6, r3
 8015894:	eba5 0502 	sub.w	r5, r5, r2
 8015898:	f040 808e 	bne.w	80159b8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x134>
 801589c:	b955      	cbnz	r5, 80158b4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x30>
 801589e:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 80158a2:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80158a6:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80158aa:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80158ae:	b003      	add	sp, #12
 80158b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158b4:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 80158b8:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 80158bc:	f04f 0802 	mov.w	r8, #2
 80158c0:	463a      	mov	r2, r7
 80158c2:	4629      	mov	r1, r5
 80158c4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80158c6:	f003 fba8 	bl	801901a <_ZN8touchgfx6muldivElll>
 80158ca:	4631      	mov	r1, r6
 80158cc:	463a      	mov	r2, r7
 80158ce:	fb90 f5f8 	sdiv	r5, r0, r8
 80158d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80158d4:	f003 fba1 	bl	801901a <_ZN8touchgfx6muldivElll>
 80158d8:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 80158dc:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 80158de:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 80158e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80158e2:	fb90 f0f8 	sdiv	r0, r0, r8
 80158e6:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 80158ea:	eba8 0305 	sub.w	r3, r8, r5
 80158ee:	f1ba 0f00 	cmp.w	sl, #0
 80158f2:	f040 80b8 	bne.w	8015a66 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e2>
 80158f6:	64a3      	str	r3, [r4, #72]	; 0x48
 80158f8:	1843      	adds	r3, r0, r1
 80158fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80158fc:	1b7b      	subs	r3, r7, r5
 80158fe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8015900:	1983      	adds	r3, r0, r6
 8015902:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015904:	19eb      	adds	r3, r5, r7
 8015906:	6523      	str	r3, [r4, #80]	; 0x50
 8015908:	1a33      	subs	r3, r6, r0
 801590a:	6623      	str	r3, [r4, #96]	; 0x60
 801590c:	eb05 0308 	add.w	r3, r5, r8
 8015910:	6563      	str	r3, [r4, #84]	; 0x54
 8015912:	1a0b      	subs	r3, r1, r0
 8015914:	f8d4 e048 	ldr.w	lr, [r4, #72]	; 0x48
 8015918:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 801591c:	6663      	str	r3, [r4, #100]	; 0x64
 801591e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8015922:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
 8015926:	4672      	mov	r2, lr
 8015928:	9301      	str	r3, [sp, #4]
 801592a:	f8cd c000 	str.w	ip, [sp]
 801592e:	f859 bb04 	ldr.w	fp, [r9], #4
 8015932:	9b00      	ldr	r3, [sp, #0]
 8015934:	45de      	cmp	lr, fp
 8015936:	bfa8      	it	ge
 8015938:	46de      	movge	lr, fp
 801593a:	455a      	cmp	r2, fp
 801593c:	bfb8      	it	lt
 801593e:	465a      	movlt	r2, fp
 8015940:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8015944:	45dc      	cmp	ip, fp
 8015946:	bfa8      	it	ge
 8015948:	46dc      	movge	ip, fp
 801594a:	455b      	cmp	r3, fp
 801594c:	bfb8      	it	lt
 801594e:	465b      	movlt	r3, fp
 8015950:	9300      	str	r3, [sp, #0]
 8015952:	9b01      	ldr	r3, [sp, #4]
 8015954:	454b      	cmp	r3, r9
 8015956:	d1ea      	bne.n	801592e <_ZN8touchgfx4Line17updateCachedShapeEv+0xaa>
 8015958:	f04f 0920 	mov.w	r9, #32
 801595c:	9b00      	ldr	r3, [sp, #0]
 801595e:	f1ba 0f01 	cmp.w	sl, #1
 8015962:	fb92 f2f9 	sdiv	r2, r2, r9
 8015966:	fb93 f3f9 	sdiv	r3, r3, r9
 801596a:	fb9e fef9 	sdiv	lr, lr, r9
 801596e:	fb9c fcf9 	sdiv	ip, ip, r9
 8015972:	f102 0201 	add.w	r2, r2, #1
 8015976:	f103 0301 	add.w	r3, r3, #1
 801597a:	f8a4 e068 	strh.w	lr, [r4, #104]	; 0x68
 801597e:	f8a4 c06a 	strh.w	ip, [r4, #106]	; 0x6a
 8015982:	eba2 0e0e 	sub.w	lr, r2, lr
 8015986:	eba3 0c0c 	sub.w	ip, r3, ip
 801598a:	f8a4 e06c 	strh.w	lr, [r4, #108]	; 0x6c
 801598e:	f8a4 c06e 	strh.w	ip, [r4, #110]	; 0x6e
 8015992:	d18c      	bne.n	80158ae <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 8015994:	eba8 0305 	sub.w	r3, r8, r5
 8015998:	64a3      	str	r3, [r4, #72]	; 0x48
 801599a:	1843      	adds	r3, r0, r1
 801599c:	65a3      	str	r3, [r4, #88]	; 0x58
 801599e:	1b7b      	subs	r3, r7, r5
 80159a0:	442f      	add	r7, r5
 80159a2:	4445      	add	r5, r8
 80159a4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80159a6:	1983      	adds	r3, r0, r6
 80159a8:	1a36      	subs	r6, r6, r0
 80159aa:	1a08      	subs	r0, r1, r0
 80159ac:	65e3      	str	r3, [r4, #92]	; 0x5c
 80159ae:	6527      	str	r7, [r4, #80]	; 0x50
 80159b0:	6626      	str	r6, [r4, #96]	; 0x60
 80159b2:	6565      	str	r5, [r4, #84]	; 0x54
 80159b4:	6660      	str	r0, [r4, #100]	; 0x64
 80159b6:	e77a      	b.n	80158ae <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 80159b8:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 80159bc:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 80159c0:	2d00      	cmp	r5, #0
 80159c2:	f43f af7b 	beq.w	80158bc <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 80159c6:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 80159ca:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 80159ce:	fb93 f2f7 	sdiv	r2, r3, r7
 80159d2:	fb07 3312 	mls	r3, r7, r2, r3
 80159d6:	b34b      	cbz	r3, 8015a2c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a8>
 80159d8:	fb97 f2f3 	sdiv	r2, r7, r3
 80159dc:	fb03 7712 	mls	r7, r3, r2, r7
 80159e0:	2f00      	cmp	r7, #0
 80159e2:	d1f4      	bne.n	80159ce <_ZN8touchgfx4Line17updateCachedShapeEv+0x14a>
 80159e4:	2b01      	cmp	r3, #1
 80159e6:	f24b 5204 	movw	r2, #46340	; 0xb504
 80159ea:	bf18      	it	ne
 80159ec:	fb96 f6f3 	sdivne	r6, r6, r3
 80159f0:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 80159f4:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 80159f8:	bf18      	it	ne
 80159fa:	fb95 f5f3 	sdivne	r5, r5, r3
 80159fe:	4291      	cmp	r1, r2
 8015a00:	dd16      	ble.n	8015a30 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1ac>
 8015a02:	2d00      	cmp	r5, #0
 8015a04:	da47      	bge.n	8015a96 <_ZN8touchgfx4Line17updateCachedShapeEv+0x212>
 8015a06:	4b26      	ldr	r3, [pc, #152]	; (8015aa0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x21c>)
 8015a08:	429d      	cmp	r5, r3
 8015a0a:	da25      	bge.n	8015a58 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d4>
 8015a0c:	426a      	negs	r2, r5
 8015a0e:	f24b 5304 	movw	r3, #46340	; 0xb504
 8015a12:	fb91 f1f3 	sdiv	r1, r1, r3
 8015a16:	fb92 f3f3 	sdiv	r3, r2, r3
 8015a1a:	4299      	cmp	r1, r3
 8015a1c:	bfcc      	ite	gt
 8015a1e:	1c4b      	addgt	r3, r1, #1
 8015a20:	3301      	addle	r3, #1
 8015a22:	fb96 f6f3 	sdiv	r6, r6, r3
 8015a26:	fb95 f5f3 	sdiv	r5, r5, r3
 8015a2a:	e00f      	b.n	8015a4c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8015a2c:	463b      	mov	r3, r7
 8015a2e:	e7d9      	b.n	80159e4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x160>
 8015a30:	2d00      	cmp	r5, #0
 8015a32:	fb92 f2f1 	sdiv	r2, r2, r1
 8015a36:	da11      	bge.n	8015a5c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d8>
 8015a38:	4269      	negs	r1, r5
 8015a3a:	f24b 5304 	movw	r3, #46340	; 0xb504
 8015a3e:	fb93 f3f1 	sdiv	r3, r3, r1
 8015a42:	429a      	cmp	r2, r3
 8015a44:	bfa8      	it	ge
 8015a46:	461a      	movge	r2, r3
 8015a48:	4356      	muls	r6, r2
 8015a4a:	4355      	muls	r5, r2
 8015a4c:	4629      	mov	r1, r5
 8015a4e:	4630      	mov	r0, r6
 8015a50:	f7ff fe8a 	bl	8015768 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8015a54:	4607      	mov	r7, r0
 8015a56:	e731      	b.n	80158bc <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 8015a58:	2200      	movs	r2, #0
 8015a5a:	e7ed      	b.n	8015a38 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b4>
 8015a5c:	4629      	mov	r1, r5
 8015a5e:	e7ec      	b.n	8015a3a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 8015a60:	4629      	mov	r1, r5
 8015a62:	2200      	movs	r2, #0
 8015a64:	e7e9      	b.n	8015a3a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 8015a66:	1a1b      	subs	r3, r3, r0
 8015a68:	64a3      	str	r3, [r4, #72]	; 0x48
 8015a6a:	1843      	adds	r3, r0, r1
 8015a6c:	1b5b      	subs	r3, r3, r5
 8015a6e:	65a3      	str	r3, [r4, #88]	; 0x58
 8015a70:	1b7b      	subs	r3, r7, r5
 8015a72:	4403      	add	r3, r0
 8015a74:	64e3      	str	r3, [r4, #76]	; 0x4c
 8015a76:	1983      	adds	r3, r0, r6
 8015a78:	442b      	add	r3, r5
 8015a7a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015a7c:	19eb      	adds	r3, r5, r7
 8015a7e:	4403      	add	r3, r0
 8015a80:	6523      	str	r3, [r4, #80]	; 0x50
 8015a82:	1a33      	subs	r3, r6, r0
 8015a84:	442b      	add	r3, r5
 8015a86:	6623      	str	r3, [r4, #96]	; 0x60
 8015a88:	eb05 0308 	add.w	r3, r5, r8
 8015a8c:	1a1b      	subs	r3, r3, r0
 8015a8e:	6563      	str	r3, [r4, #84]	; 0x54
 8015a90:	1a0b      	subs	r3, r1, r0
 8015a92:	1b5b      	subs	r3, r3, r5
 8015a94:	e73e      	b.n	8015914 <_ZN8touchgfx4Line17updateCachedShapeEv+0x90>
 8015a96:	4295      	cmp	r5, r2
 8015a98:	dde2      	ble.n	8015a60 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1dc>
 8015a9a:	462a      	mov	r2, r5
 8015a9c:	e7b7      	b.n	8015a0e <_ZN8touchgfx4Line17updateCachedShapeEv+0x18a>
 8015a9e:	bf00      	nop
 8015aa0:	ffff4afc 	.word	0xffff4afc

08015aa4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8015aa4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015aa6:	428b      	cmp	r3, r1
 8015aa8:	d102      	bne.n	8015ab0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8015aaa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015aac:	4293      	cmp	r3, r2
 8015aae:	d003      	beq.n	8015ab8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8015ab0:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8015ab4:	f7ff bee6 	b.w	8015884 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8015ab8:	4770      	bx	lr

08015aba <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8015aba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015abc:	428b      	cmp	r3, r1
 8015abe:	d102      	bne.n	8015ac6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8015ac0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8015ac2:	4293      	cmp	r3, r2
 8015ac4:	d003      	beq.n	8015ace <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8015ac6:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8015aca:	f7ff bedb 	b.w	8015884 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8015ace:	4770      	bx	lr

08015ad0 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8015ad0:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8015ad4:	f7ff bed6 	b.w	8015884 <_ZN8touchgfx4Line17updateCachedShapeEv>

08015ad8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8015ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015adc:	b0b3      	sub	sp, #204	; 0xcc
 8015ade:	4604      	mov	r4, r0
 8015ae0:	460a      	mov	r2, r1
 8015ae2:	4601      	mov	r1, r0
 8015ae4:	a803      	add	r0, sp, #12
 8015ae6:	ad32      	add	r5, sp, #200	; 0xc8
 8015ae8:	f00d fd48 	bl	802357c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8015aec:	2300      	movs	r3, #0
 8015aee:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8015af0:	f845 3dc8 	str.w	r3, [r5, #-200]!
 8015af4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015af6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015af8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015afa:	1ac0      	subs	r0, r0, r3
 8015afc:	eba1 0102 	sub.w	r1, r1, r2
 8015b00:	d43c      	bmi.n	8015b7c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8015b02:	2900      	cmp	r1, #0
 8015b04:	462a      	mov	r2, r5
 8015b06:	db33      	blt.n	8015b70 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8015b08:	f7ff fe6e 	bl	80157e8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015b0c:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8015b10:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8015b12:	a803      	add	r0, sp, #12
 8015b14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015b16:	f00d fefc 	bl	8023912 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8015b1a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8015b1c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8015b1e:	a803      	add	r0, sp, #12
 8015b20:	f00d fe86 	bl	8023830 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015b24:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015b28:	2b01      	cmp	r3, #1
 8015b2a:	d137      	bne.n	8015b9c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8015b2c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8015b2e:	2eb3      	cmp	r6, #179	; 0xb3
 8015b30:	dc34      	bgt.n	8015b9c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8015b32:	eba7 0906 	sub.w	r9, r7, r6
 8015b36:	4648      	mov	r0, r9
 8015b38:	f7ff fde0 	bl	80156fc <_ZN8touchgfx7CWRUtil4sineEi>
 8015b3c:	a901      	add	r1, sp, #4
 8015b3e:	9001      	str	r0, [sp, #4]
 8015b40:	4628      	mov	r0, r5
 8015b42:	f7ff fdcf 	bl	80156e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015b46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015b48:	eb00 0801 	add.w	r8, r0, r1
 8015b4c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8015b50:	f7ff fdd4 	bl	80156fc <_ZN8touchgfx7CWRUtil4sineEi>
 8015b54:	a902      	add	r1, sp, #8
 8015b56:	9002      	str	r0, [sp, #8]
 8015b58:	4628      	mov	r0, r5
 8015b5a:	f7ff fdc3 	bl	80156e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015b5e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8015b60:	4641      	mov	r1, r8
 8015b62:	1a12      	subs	r2, r2, r0
 8015b64:	a803      	add	r0, sp, #12
 8015b66:	f00d fe63 	bl	8023830 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015b6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015b6c:	441e      	add	r6, r3
 8015b6e:	e7de      	b.n	8015b2e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8015b70:	4249      	negs	r1, r1
 8015b72:	f7ff fe39 	bl	80157e8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015b76:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 8015b7a:	e7c9      	b.n	8015b10 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8015b7c:	2900      	cmp	r1, #0
 8015b7e:	f1c0 0000 	rsb	r0, r0, #0
 8015b82:	462a      	mov	r2, r5
 8015b84:	db04      	blt.n	8015b90 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8015b86:	f7ff fe2f 	bl	80157e8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015b8a:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 8015b8e:	e7bf      	b.n	8015b10 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8015b90:	4249      	negs	r1, r1
 8015b92:	f7ff fe29 	bl	80157e8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015b96:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 8015b9a:	e7b9      	b.n	8015b10 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8015b9c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8015b9e:	a803      	add	r0, sp, #12
 8015ba0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8015ba2:	f00d fe45 	bl	8023830 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015ba6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015ba8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8015baa:	a803      	add	r0, sp, #12
 8015bac:	f00d fe40 	bl	8023830 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015bb0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015bb4:	2b01      	cmp	r3, #1
 8015bb6:	d123      	bne.n	8015c00 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8015bb8:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8015bba:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8015bbe:	2e00      	cmp	r6, #0
 8015bc0:	dd1e      	ble.n	8015c00 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8015bc2:	eb06 0907 	add.w	r9, r6, r7
 8015bc6:	4648      	mov	r0, r9
 8015bc8:	f7ff fd98 	bl	80156fc <_ZN8touchgfx7CWRUtil4sineEi>
 8015bcc:	a901      	add	r1, sp, #4
 8015bce:	9001      	str	r0, [sp, #4]
 8015bd0:	4628      	mov	r0, r5
 8015bd2:	f7ff fd87 	bl	80156e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015bd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015bd8:	eb00 0801 	add.w	r8, r0, r1
 8015bdc:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8015be0:	f7ff fd8c 	bl	80156fc <_ZN8touchgfx7CWRUtil4sineEi>
 8015be4:	a902      	add	r1, sp, #8
 8015be6:	9002      	str	r0, [sp, #8]
 8015be8:	4628      	mov	r0, r5
 8015bea:	f7ff fd7b 	bl	80156e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015bee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015bf0:	4641      	mov	r1, r8
 8015bf2:	1a12      	subs	r2, r2, r0
 8015bf4:	a803      	add	r0, sp, #12
 8015bf6:	f00d fe1b 	bl	8023830 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015bfa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015bfc:	1af6      	subs	r6, r6, r3
 8015bfe:	e7de      	b.n	8015bbe <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8015c00:	21ff      	movs	r1, #255	; 0xff
 8015c02:	a803      	add	r0, sp, #12
 8015c04:	f00d ff89 	bl	8023b1a <_ZN8touchgfx6Canvas6renderEh>
 8015c08:	4604      	mov	r4, r0
 8015c0a:	a803      	add	r0, sp, #12
 8015c0c:	f00d ffc4 	bl	8023b98 <_ZN8touchgfx6CanvasD1Ev>
 8015c10:	4620      	mov	r0, r4
 8015c12:	b033      	add	sp, #204	; 0xcc
 8015c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015c18 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8015c18:	2200      	movs	r2, #0
 8015c1a:	8002      	strh	r2, [r0, #0]
 8015c1c:	8042      	strh	r2, [r0, #2]
 8015c1e:	8082      	strh	r2, [r0, #4]
 8015c20:	80c2      	strh	r2, [r0, #6]
 8015c22:	4770      	bx	lr

08015c24 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8015c24:	b570      	push	{r4, r5, r6, lr}
 8015c26:	6803      	ldr	r3, [r0, #0]
 8015c28:	4604      	mov	r4, r0
 8015c2a:	4615      	mov	r5, r2
 8015c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c2e:	4798      	blx	r3
 8015c30:	6823      	ldr	r3, [r4, #0]
 8015c32:	4629      	mov	r1, r5
 8015c34:	4620      	mov	r0, r4
 8015c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c3c:	4718      	bx	r3
	...

08015c40 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8015c40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015c46:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015c48:	4299      	cmp	r1, r3
 8015c4a:	d029      	beq.n	8015ca0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8015c4c:	4b15      	ldr	r3, [pc, #84]	; (8015ca4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	b92b      	cbnz	r3, 8015c5e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8015c52:	4b15      	ldr	r3, [pc, #84]	; (8015ca8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8015c54:	21ae      	movs	r1, #174	; 0xae
 8015c56:	4a15      	ldr	r2, [pc, #84]	; (8015cac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8015c58:	4815      	ldr	r0, [pc, #84]	; (8015cb0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8015c5a:	f00f f8d3 	bl	8024e04 <__assert_func>
 8015c5e:	4a15      	ldr	r2, [pc, #84]	; (8015cb4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8015c60:	8812      	ldrh	r2, [r2, #0]
 8015c62:	428a      	cmp	r2, r1
 8015c64:	d803      	bhi.n	8015c6e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8015c66:	4b14      	ldr	r3, [pc, #80]	; (8015cb8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8015c68:	21af      	movs	r1, #175	; 0xaf
 8015c6a:	4a10      	ldr	r2, [pc, #64]	; (8015cac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8015c6c:	e7f4      	b.n	8015c58 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8015c6e:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8015c72:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8015c76:	4b11      	ldr	r3, [pc, #68]	; (8015cbc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8015c78:	7854      	ldrb	r4, [r2, #1]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8015c80:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8015c84:	682b      	ldr	r3, [r5, #0]
 8015c86:	69de      	ldr	r6, [r3, #28]
 8015c88:	4b0d      	ldr	r3, [pc, #52]	; (8015cc0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8015c8a:	6818      	ldr	r0, [r3, #0]
 8015c8c:	f7f2 faec 	bl	8008268 <_ZNK8touchgfx5Texts7getTextEt>
 8015c90:	2300      	movs	r3, #0
 8015c92:	4602      	mov	r2, r0
 8015c94:	4621      	mov	r1, r4
 8015c96:	9300      	str	r3, [sp, #0]
 8015c98:	4628      	mov	r0, r5
 8015c9a:	47b0      	blx	r6
 8015c9c:	b002      	add	sp, #8
 8015c9e:	bd70      	pop	{r4, r5, r6, pc}
 8015ca0:	2000      	movs	r0, #0
 8015ca2:	e7fb      	b.n	8015c9c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8015ca4:	20056750 	.word	0x20056750
 8015ca8:	0802bbf3 	.word	0x0802bbf3
 8015cac:	0802bd28 	.word	0x0802bd28
 8015cb0:	0802bc35 	.word	0x0802bc35
 8015cb4:	20056754 	.word	0x20056754
 8015cb8:	0802bc5e 	.word	0x0802bc5e
 8015cbc:	20056758 	.word	0x20056758
 8015cc0:	2005675c 	.word	0x2005675c

08015cc4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8015cc4:	b570      	push	{r4, r5, r6, lr}
 8015cc6:	6803      	ldr	r3, [r0, #0]
 8015cc8:	4604      	mov	r4, r0
 8015cca:	b28d      	uxth	r5, r1
 8015ccc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015cce:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8015cd0:	4b10      	ldr	r3, [pc, #64]	; (8015d14 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	b92b      	cbnz	r3, 8015ce2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8015cd6:	4b10      	ldr	r3, [pc, #64]	; (8015d18 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8015cd8:	21ae      	movs	r1, #174	; 0xae
 8015cda:	4a10      	ldr	r2, [pc, #64]	; (8015d1c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8015cdc:	4810      	ldr	r0, [pc, #64]	; (8015d20 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8015cde:	f00f f891 	bl	8024e04 <__assert_func>
 8015ce2:	4910      	ldr	r1, [pc, #64]	; (8015d24 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8015ce4:	8809      	ldrh	r1, [r1, #0]
 8015ce6:	4291      	cmp	r1, r2
 8015ce8:	d803      	bhi.n	8015cf2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8015cea:	4b0f      	ldr	r3, [pc, #60]	; (8015d28 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8015cec:	21af      	movs	r1, #175	; 0xaf
 8015cee:	4a0b      	ldr	r2, [pc, #44]	; (8015d1c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8015cf0:	e7f4      	b.n	8015cdc <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8015cf2:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8015cf6:	4b0d      	ldr	r3, [pc, #52]	; (8015d2c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8015cfe:	6803      	ldr	r3, [r0, #0]
 8015d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d02:	4798      	blx	r3
 8015d04:	1a29      	subs	r1, r5, r0
 8015d06:	4633      	mov	r3, r6
 8015d08:	4620      	mov	r0, r4
 8015d0a:	b209      	sxth	r1, r1
 8015d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d10:	4718      	bx	r3
 8015d12:	bf00      	nop
 8015d14:	20056750 	.word	0x20056750
 8015d18:	0802bbf3 	.word	0x0802bbf3
 8015d1c:	0802bd28 	.word	0x0802bd28
 8015d20:	0802bc35 	.word	0x0802bc35
 8015d24:	20056754 	.word	0x20056754
 8015d28:	0802bc5e 	.word	0x0802bc5e
 8015d2c:	20056758 	.word	0x20056758

08015d30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8015d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015d38:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8015d3a:	b08c      	sub	sp, #48	; 0x30
 8015d3c:	4604      	mov	r4, r0
 8015d3e:	4293      	cmp	r3, r2
 8015d40:	4688      	mov	r8, r1
 8015d42:	d05f      	beq.n	8015e04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8015d44:	4e31      	ldr	r6, [pc, #196]	; (8015e0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8015d46:	6832      	ldr	r2, [r6, #0]
 8015d48:	b92a      	cbnz	r2, 8015d56 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8015d4a:	4b31      	ldr	r3, [pc, #196]	; (8015e10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8015d4c:	21ae      	movs	r1, #174	; 0xae
 8015d4e:	4a31      	ldr	r2, [pc, #196]	; (8015e14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8015d50:	4831      	ldr	r0, [pc, #196]	; (8015e18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8015d52:	f00f f857 	bl	8024e04 <__assert_func>
 8015d56:	4d31      	ldr	r5, [pc, #196]	; (8015e1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8015d58:	8829      	ldrh	r1, [r5, #0]
 8015d5a:	4299      	cmp	r1, r3
 8015d5c:	d803      	bhi.n	8015d66 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8015d5e:	4b30      	ldr	r3, [pc, #192]	; (8015e20 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8015d60:	21af      	movs	r1, #175	; 0xaf
 8015d62:	4a2c      	ldr	r2, [pc, #176]	; (8015e14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8015d64:	e7f4      	b.n	8015d50 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8015d66:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8015d6a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015d6e:	4b2d      	ldr	r3, [pc, #180]	; (8015e24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015d76:	2a00      	cmp	r2, #0
 8015d78:	d044      	beq.n	8015e04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8015d7a:	784b      	ldrb	r3, [r1, #1]
 8015d7c:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8015d80:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8015d84:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015d88:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8015d8c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8015d90:	4b25      	ldr	r3, [pc, #148]	; (8015e28 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8015d92:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8015d9c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8015da0:	9207      	str	r2, [sp, #28]
 8015da2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015da4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015da8:	f88d a020 	strb.w	sl, [sp, #32]
 8015dac:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8015db0:	9009      	str	r0, [sp, #36]	; 0x24
 8015db2:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8015db6:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8015dba:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8015dbe:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8015dc2:	b10a      	cbz	r2, 8015dc8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8015dc4:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8015dc6:	b907      	cbnz	r7, 8015dca <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8015dc8:	689f      	ldr	r7, [r3, #8]
 8015dca:	f10d 0914 	add.w	r9, sp, #20
 8015dce:	4621      	mov	r1, r4
 8015dd0:	4648      	mov	r0, r9
 8015dd2:	f002 fff5 	bl	8018dc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015dd6:	6833      	ldr	r3, [r6, #0]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d0b6      	beq.n	8015d4a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8015ddc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015dde:	882b      	ldrh	r3, [r5, #0]
 8015de0:	428b      	cmp	r3, r1
 8015de2:	d9bc      	bls.n	8015d5e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8015de4:	4b11      	ldr	r3, [pc, #68]	; (8015e2c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8015de6:	6818      	ldr	r0, [r3, #0]
 8015de8:	f7f2 fa3e 	bl	8008268 <_ZNK8touchgfx5Texts7getTextEt>
 8015dec:	2300      	movs	r3, #0
 8015dee:	9001      	str	r0, [sp, #4]
 8015df0:	4638      	mov	r0, r7
 8015df2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015df6:	ab07      	add	r3, sp, #28
 8015df8:	9300      	str	r3, [sp, #0]
 8015dfa:	4643      	mov	r3, r8
 8015dfc:	e899 0006 	ldmia.w	r9, {r1, r2}
 8015e00:	f7f2 f9c3 	bl	800818a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015e04:	b00c      	add	sp, #48	; 0x30
 8015e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e0a:	bf00      	nop
 8015e0c:	20056750 	.word	0x20056750
 8015e10:	0802bbf3 	.word	0x0802bbf3
 8015e14:	0802bd28 	.word	0x0802bd28
 8015e18:	0802bc35 	.word	0x0802bc35
 8015e1c:	20056754 	.word	0x20056754
 8015e20:	0802bc5e 	.word	0x0802bc5e
 8015e24:	20056758 	.word	0x20056758
 8015e28:	200566e0 	.word	0x200566e0
 8015e2c:	2005675c 	.word	0x2005675c

08015e30 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015e30:	b40e      	push	{r1, r2, r3}
 8015e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e3a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8015e3c:	b09a      	sub	sp, #104	; 0x68
 8015e3e:	4605      	mov	r5, r0
 8015e40:	4293      	cmp	r3, r2
 8015e42:	d067      	beq.n	8015f14 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>
 8015e44:	aa24      	add	r2, sp, #144	; 0x90
 8015e46:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8015f28 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>
 8015e4a:	9202      	str	r2, [sp, #8]
 8015e4c:	f8da 2000 	ldr.w	r2, [sl]
 8015e50:	b92a      	cbnz	r2, 8015e5e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8015e52:	4b31      	ldr	r3, [pc, #196]	; (8015f18 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8015e54:	21ae      	movs	r1, #174	; 0xae
 8015e56:	4a31      	ldr	r2, [pc, #196]	; (8015f1c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 8015e58:	4831      	ldr	r0, [pc, #196]	; (8015f20 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8015e5a:	f00e ffd3 	bl	8024e04 <__assert_func>
 8015e5e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8015f2c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>
 8015e62:	f8b8 1000 	ldrh.w	r1, [r8]
 8015e66:	4299      	cmp	r1, r3
 8015e68:	d803      	bhi.n	8015e72 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8015e6a:	4b2e      	ldr	r3, [pc, #184]	; (8015f24 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8015e6c:	21af      	movs	r1, #175	; 0xaf
 8015e6e:	4a2b      	ldr	r2, [pc, #172]	; (8015f1c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 8015e70:	e7f2      	b.n	8015e58 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8015e72:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8015f30 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 8015e76:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015e7a:	f8d9 3000 	ldr.w	r3, [r9]
 8015e7e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8015e82:	6823      	ldr	r3, [r4, #0]
 8015e84:	4620      	mov	r0, r4
 8015e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e88:	4798      	blx	r3
 8015e8a:	4607      	mov	r7, r0
 8015e8c:	b206      	sxth	r6, r0
 8015e8e:	a803      	add	r0, sp, #12
 8015e90:	f003 fc55 	bl	801973e <_ZN8touchgfx12TextProviderC1Ev>
 8015e94:	6823      	ldr	r3, [r4, #0]
 8015e96:	4620      	mov	r0, r4
 8015e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e9a:	4798      	blx	r3
 8015e9c:	6823      	ldr	r3, [r4, #0]
 8015e9e:	4683      	mov	fp, r0
 8015ea0:	4620      	mov	r0, r4
 8015ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015ea4:	4798      	blx	r3
 8015ea6:	465b      	mov	r3, fp
 8015ea8:	9000      	str	r0, [sp, #0]
 8015eaa:	a803      	add	r0, sp, #12
 8015eac:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8015eae:	9a02      	ldr	r2, [sp, #8]
 8015eb0:	f003 fc92 	bl	80197d8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015eb4:	f8da 3000 	ldr.w	r3, [sl]
 8015eb8:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d0c8      	beq.n	8015e52 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8015ec0:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8015ec2:	f8b8 0000 	ldrh.w	r0, [r8]
 8015ec6:	4290      	cmp	r0, r2
 8015ec8:	d9cf      	bls.n	8015e6a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8015eca:	eb03 0442 	add.w	r4, r3, r2, lsl #1
 8015ece:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8015ed2:	f8d9 3000 	ldr.w	r3, [r9]
 8015ed6:	7862      	ldrb	r2, [r4, #1]
 8015ed8:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 8015edc:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8015ee0:	9400      	str	r4, [sp, #0]
 8015ee2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015ee6:	a803      	add	r0, sp, #12
 8015ee8:	f001 fad1 	bl	801748e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8015eec:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8015ef0:	b203      	sxth	r3, r0
 8015ef2:	18b1      	adds	r1, r6, r2
 8015ef4:	2900      	cmp	r1, #0
 8015ef6:	dd0b      	ble.n	8015f10 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>
 8015ef8:	3b01      	subs	r3, #1
 8015efa:	fb13 f302 	smulbb	r3, r3, r2
 8015efe:	fb17 3300 	smlabb	r3, r7, r0, r3
 8015f02:	b21e      	sxth	r6, r3
 8015f04:	4630      	mov	r0, r6
 8015f06:	b01a      	add	sp, #104	; 0x68
 8015f08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f0c:	b003      	add	sp, #12
 8015f0e:	4770      	bx	lr
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	dcf7      	bgt.n	8015f04 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8015f14:	2600      	movs	r6, #0
 8015f16:	e7f5      	b.n	8015f04 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8015f18:	0802bbf3 	.word	0x0802bbf3
 8015f1c:	0802bd28 	.word	0x0802bd28
 8015f20:	0802bc35 	.word	0x0802bc35
 8015f24:	0802bc5e 	.word	0x0802bc5e
 8015f28:	20056750 	.word	0x20056750
 8015f2c:	20056754 	.word	0x20056754
 8015f30:	20056758 	.word	0x20056758

08015f34 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8015f34:	b570      	push	{r4, r5, r6, lr}
 8015f36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f3a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015f3c:	4604      	mov	r4, r0
 8015f3e:	4299      	cmp	r1, r3
 8015f40:	d01e      	beq.n	8015f80 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8015f42:	6803      	ldr	r3, [r0, #0]
 8015f44:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8015f46:	4b0f      	ldr	r3, [pc, #60]	; (8015f84 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	b92b      	cbnz	r3, 8015f58 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8015f4c:	4b0e      	ldr	r3, [pc, #56]	; (8015f88 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8015f4e:	21ae      	movs	r1, #174	; 0xae
 8015f50:	4a0e      	ldr	r2, [pc, #56]	; (8015f8c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8015f52:	480f      	ldr	r0, [pc, #60]	; (8015f90 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8015f54:	f00e ff56 	bl	8024e04 <__assert_func>
 8015f58:	4b0e      	ldr	r3, [pc, #56]	; (8015f94 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8015f5a:	881b      	ldrh	r3, [r3, #0]
 8015f5c:	428b      	cmp	r3, r1
 8015f5e:	d803      	bhi.n	8015f68 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8015f60:	4b0d      	ldr	r3, [pc, #52]	; (8015f98 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8015f62:	21af      	movs	r1, #175	; 0xaf
 8015f64:	4a09      	ldr	r2, [pc, #36]	; (8015f8c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8015f66:	e7f4      	b.n	8015f52 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8015f68:	4b0c      	ldr	r3, [pc, #48]	; (8015f9c <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8015f6a:	6818      	ldr	r0, [r3, #0]
 8015f6c:	f7f2 f97c 	bl	8008268 <_ZNK8touchgfx5Texts7getTextEt>
 8015f70:	2300      	movs	r3, #0
 8015f72:	4601      	mov	r1, r0
 8015f74:	46ac      	mov	ip, r5
 8015f76:	4620      	mov	r0, r4
 8015f78:	461a      	mov	r2, r3
 8015f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f7e:	4760      	bx	ip
 8015f80:	2000      	movs	r0, #0
 8015f82:	bd70      	pop	{r4, r5, r6, pc}
 8015f84:	20056750 	.word	0x20056750
 8015f88:	0802bbf3 	.word	0x0802bbf3
 8015f8c:	0802bd28 	.word	0x0802bd28
 8015f90:	0802bc35 	.word	0x0802bc35
 8015f94:	20056754 	.word	0x20056754
 8015f98:	0802bc5e 	.word	0x0802bc5e
 8015f9c:	2005675c 	.word	0x2005675c

08015fa0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8015fa0:	b538      	push	{r3, r4, r5, lr}
 8015fa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fa6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015fa8:	4604      	mov	r4, r0
 8015faa:	429a      	cmp	r2, r3
 8015fac:	d014      	beq.n	8015fd8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8015fae:	6803      	ldr	r3, [r0, #0]
 8015fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015fb2:	4798      	blx	r3
 8015fb4:	6823      	ldr	r3, [r4, #0]
 8015fb6:	4605      	mov	r5, r0
 8015fb8:	4620      	mov	r0, r4
 8015fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015fbc:	4798      	blx	r3
 8015fbe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015fc2:	b22d      	sxth	r5, r5
 8015fc4:	4601      	mov	r1, r0
 8015fc6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8015fca:	bf06      	itte	eq
 8015fcc:	4602      	moveq	r2, r0
 8015fce:	4629      	moveq	r1, r5
 8015fd0:	462a      	movne	r2, r5
 8015fd2:	4620      	mov	r0, r4
 8015fd4:	f7f0 f8d0 	bl	8006178 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015fd8:	bd38      	pop	{r3, r4, r5, pc}

08015fda <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8015fda:	888a      	ldrh	r2, [r1, #4]
 8015fdc:	8582      	strh	r2, [r0, #44]	; 0x2c
 8015fde:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8015fe2:	b922      	cbnz	r2, 8015fee <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8015fe4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015fe8:	b90b      	cbnz	r3, 8015fee <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8015fea:	f7ff bfd9 	b.w	8015fa0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8015fee:	4770      	bx	lr

08015ff0 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	8083      	strh	r3, [r0, #4]
 8015ff4:	80c3      	strh	r3, [r0, #6]
 8015ff6:	8003      	strh	r3, [r0, #0]
 8015ff8:	8043      	strh	r3, [r0, #2]
 8015ffa:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8015ffe:	2bff      	cmp	r3, #255	; 0xff
 8016000:	bf01      	itttt	eq
 8016002:	890b      	ldrheq	r3, [r1, #8]
 8016004:	8083      	strheq	r3, [r0, #4]
 8016006:	894b      	ldrheq	r3, [r1, #10]
 8016008:	80c3      	strheq	r3, [r0, #6]
 801600a:	4770      	bx	lr

0801600c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801600c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801600e:	4604      	mov	r4, r0
 8016010:	466b      	mov	r3, sp
 8016012:	6808      	ldr	r0, [r1, #0]
 8016014:	6849      	ldr	r1, [r1, #4]
 8016016:	c303      	stmia	r3!, {r0, r1}
 8016018:	6823      	ldr	r3, [r4, #0]
 801601a:	4669      	mov	r1, sp
 801601c:	4620      	mov	r0, r4
 801601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016020:	4798      	blx	r3
 8016022:	4b08      	ldr	r3, [pc, #32]	; (8016044 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801602a:	b10a      	cbz	r2, 8016030 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801602c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801602e:	b900      	cbnz	r0, 8016032 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8016030:	6898      	ldr	r0, [r3, #8]
 8016032:	6803      	ldr	r3, [r0, #0]
 8016034:	4669      	mov	r1, sp
 8016036:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8016038:	699d      	ldr	r5, [r3, #24]
 801603a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801603e:	47a8      	blx	r5
 8016040:	b003      	add	sp, #12
 8016042:	bd30      	pop	{r4, r5, pc}
 8016044:	200566e0 	.word	0x200566e0

08016048 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8016048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801604a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801604e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016050:	4606      	mov	r6, r0
 8016052:	4299      	cmp	r1, r3
 8016054:	d02a      	beq.n	80160ac <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8016056:	4b16      	ldr	r3, [pc, #88]	; (80160b0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	b92b      	cbnz	r3, 8016068 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 801605c:	4b15      	ldr	r3, [pc, #84]	; (80160b4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801605e:	21ae      	movs	r1, #174	; 0xae
 8016060:	4a15      	ldr	r2, [pc, #84]	; (80160b8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8016062:	4816      	ldr	r0, [pc, #88]	; (80160bc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8016064:	f00e fece 	bl	8024e04 <__assert_func>
 8016068:	4a15      	ldr	r2, [pc, #84]	; (80160c0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 801606a:	8812      	ldrh	r2, [r2, #0]
 801606c:	428a      	cmp	r2, r1
 801606e:	d803      	bhi.n	8016078 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8016070:	4b14      	ldr	r3, [pc, #80]	; (80160c4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8016072:	21af      	movs	r1, #175	; 0xaf
 8016074:	4a10      	ldr	r2, [pc, #64]	; (80160b8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8016076:	e7f4      	b.n	8016062 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8016078:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801607c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8016080:	4b11      	ldr	r3, [pc, #68]	; (80160c8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8016082:	7854      	ldrb	r4, [r2, #1]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801608a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801608e:	682b      	ldr	r3, [r5, #0]
 8016090:	69df      	ldr	r7, [r3, #28]
 8016092:	4b0e      	ldr	r3, [pc, #56]	; (80160cc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8016094:	6818      	ldr	r0, [r3, #0]
 8016096:	f7f2 f8e7 	bl	8008268 <_ZNK8touchgfx5Texts7getTextEt>
 801609a:	2300      	movs	r3, #0
 801609c:	4602      	mov	r2, r0
 801609e:	4621      	mov	r1, r4
 80160a0:	9300      	str	r3, [sp, #0]
 80160a2:	4628      	mov	r0, r5
 80160a4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80160a6:	47b8      	blx	r7
 80160a8:	b003      	add	sp, #12
 80160aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160ac:	2000      	movs	r0, #0
 80160ae:	e7fb      	b.n	80160a8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 80160b0:	20056750 	.word	0x20056750
 80160b4:	0802bbf3 	.word	0x0802bbf3
 80160b8:	0802be34 	.word	0x0802be34
 80160bc:	0802bc35 	.word	0x0802bc35
 80160c0:	20056754 	.word	0x20056754
 80160c4:	0802bc5e 	.word	0x0802bc5e
 80160c8:	20056758 	.word	0x20056758
 80160cc:	2005675c 	.word	0x2005675c

080160d0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 80160d0:	b570      	push	{r4, r5, r6, lr}
 80160d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80160d6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80160d8:	4604      	mov	r4, r0
 80160da:	4299      	cmp	r1, r3
 80160dc:	d01e      	beq.n	801611c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 80160de:	6803      	ldr	r3, [r0, #0]
 80160e0:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 80160e2:	4b0f      	ldr	r3, [pc, #60]	; (8016120 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	b92b      	cbnz	r3, 80160f4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 80160e8:	4b0e      	ldr	r3, [pc, #56]	; (8016124 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 80160ea:	21ae      	movs	r1, #174	; 0xae
 80160ec:	4a0e      	ldr	r2, [pc, #56]	; (8016128 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 80160ee:	480f      	ldr	r0, [pc, #60]	; (801612c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 80160f0:	f00e fe88 	bl	8024e04 <__assert_func>
 80160f4:	4b0e      	ldr	r3, [pc, #56]	; (8016130 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 80160f6:	881b      	ldrh	r3, [r3, #0]
 80160f8:	428b      	cmp	r3, r1
 80160fa:	d803      	bhi.n	8016104 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 80160fc:	4b0d      	ldr	r3, [pc, #52]	; (8016134 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 80160fe:	21af      	movs	r1, #175	; 0xaf
 8016100:	4a09      	ldr	r2, [pc, #36]	; (8016128 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8016102:	e7f4      	b.n	80160ee <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8016104:	4b0c      	ldr	r3, [pc, #48]	; (8016138 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8016106:	6818      	ldr	r0, [r3, #0]
 8016108:	f7f2 f8ae 	bl	8008268 <_ZNK8touchgfx5Texts7getTextEt>
 801610c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801610e:	4601      	mov	r1, r0
 8016110:	46ac      	mov	ip, r5
 8016112:	4620      	mov	r0, r4
 8016114:	2300      	movs	r3, #0
 8016116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801611a:	4760      	bx	ip
 801611c:	2000      	movs	r0, #0
 801611e:	bd70      	pop	{r4, r5, r6, pc}
 8016120:	20056750 	.word	0x20056750
 8016124:	0802bbf3 	.word	0x0802bbf3
 8016128:	0802be34 	.word	0x0802be34
 801612c:	0802bc35 	.word	0x0802bc35
 8016130:	20056754 	.word	0x20056754
 8016134:	0802bc5e 	.word	0x0802bc5e
 8016138:	2005675c 	.word	0x2005675c

0801613c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801613c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016144:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8016146:	b08c      	sub	sp, #48	; 0x30
 8016148:	4604      	mov	r4, r0
 801614a:	4293      	cmp	r3, r2
 801614c:	460e      	mov	r6, r1
 801614e:	d05d      	beq.n	801620c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8016150:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8016230 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8016154:	f8d8 2000 	ldr.w	r2, [r8]
 8016158:	b92a      	cbnz	r2, 8016166 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801615a:	4b2e      	ldr	r3, [pc, #184]	; (8016214 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801615c:	21ae      	movs	r1, #174	; 0xae
 801615e:	4a2e      	ldr	r2, [pc, #184]	; (8016218 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8016160:	482e      	ldr	r0, [pc, #184]	; (801621c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8016162:	f00e fe4f 	bl	8024e04 <__assert_func>
 8016166:	4f2e      	ldr	r7, [pc, #184]	; (8016220 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8016168:	8839      	ldrh	r1, [r7, #0]
 801616a:	4299      	cmp	r1, r3
 801616c:	d803      	bhi.n	8016176 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801616e:	4b2d      	ldr	r3, [pc, #180]	; (8016224 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8016170:	21af      	movs	r1, #175	; 0xaf
 8016172:	4a29      	ldr	r2, [pc, #164]	; (8016218 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8016174:	e7f4      	b.n	8016160 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8016176:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801617a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801617e:	4b2a      	ldr	r3, [pc, #168]	; (8016228 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016186:	2a00      	cmp	r2, #0
 8016188:	d040      	beq.n	801620c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801618a:	784b      	ldrb	r3, [r1, #1]
 801618c:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8016190:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8016194:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8016198:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 801619c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80161a0:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80161a4:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80161a8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80161ac:	ad05      	add	r5, sp, #20
 80161ae:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80161b0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80161b4:	9207      	str	r2, [sp, #28]
 80161b6:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80161ba:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80161be:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80161c2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80161c6:	f88d a020 	strb.w	sl, [sp, #32]
 80161ca:	9009      	str	r0, [sp, #36]	; 0x24
 80161cc:	f7ef f9d4 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 80161d0:	4621      	mov	r1, r4
 80161d2:	4681      	mov	r9, r0
 80161d4:	4628      	mov	r0, r5
 80161d6:	f002 fdf3 	bl	8018dc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80161da:	f8d8 3000 	ldr.w	r3, [r8]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d0bb      	beq.n	801615a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 80161e2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80161e4:	883b      	ldrh	r3, [r7, #0]
 80161e6:	428b      	cmp	r3, r1
 80161e8:	d9c1      	bls.n	801616e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 80161ea:	4b10      	ldr	r3, [pc, #64]	; (801622c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 80161ec:	6818      	ldr	r0, [r3, #0]
 80161ee:	f7f2 f83b 	bl	8008268 <_ZNK8touchgfx5Texts7getTextEt>
 80161f2:	2300      	movs	r3, #0
 80161f4:	9303      	str	r3, [sp, #12]
 80161f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80161f8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80161fc:	ab07      	add	r3, sp, #28
 80161fe:	4648      	mov	r0, r9
 8016200:	9300      	str	r3, [sp, #0]
 8016202:	4633      	mov	r3, r6
 8016204:	e895 0006 	ldmia.w	r5, {r1, r2}
 8016208:	f7f1 ffbf 	bl	800818a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801620c:	b00c      	add	sp, #48	; 0x30
 801620e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016212:	bf00      	nop
 8016214:	0802bbf3 	.word	0x0802bbf3
 8016218:	0802be34 	.word	0x0802be34
 801621c:	0802bc35 	.word	0x0802bc35
 8016220:	20056754 	.word	0x20056754
 8016224:	0802bc5e 	.word	0x0802bc5e
 8016228:	20056758 	.word	0x20056758
 801622c:	2005675c 	.word	0x2005675c
 8016230:	20056750 	.word	0x20056750

08016234 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8016234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016238:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801623a:	4604      	mov	r4, r0
 801623c:	460e      	mov	r6, r1
 801623e:	b08e      	sub	sp, #56	; 0x38
 8016240:	b218      	sxth	r0, r3
 8016242:	8921      	ldrh	r1, [r4, #8]
 8016244:	005b      	lsls	r3, r3, #1
 8016246:	8962      	ldrh	r2, [r4, #10]
 8016248:	f8ad 0000 	strh.w	r0, [sp]
 801624c:	b29b      	uxth	r3, r3
 801624e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8016252:	1ac9      	subs	r1, r1, r3
 8016254:	1ad3      	subs	r3, r2, r3
 8016256:	b209      	sxth	r1, r1
 8016258:	b21b      	sxth	r3, r3
 801625a:	2900      	cmp	r1, #0
 801625c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016260:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016264:	dd5e      	ble.n	8016324 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8016266:	2b00      	cmp	r3, #0
 8016268:	dd5c      	ble.n	8016324 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801626a:	6830      	ldr	r0, [r6, #0]
 801626c:	ab02      	add	r3, sp, #8
 801626e:	6871      	ldr	r1, [r6, #4]
 8016270:	c303      	stmia	r3!, {r0, r1}
 8016272:	4669      	mov	r1, sp
 8016274:	a802      	add	r0, sp, #8
 8016276:	f7fd ff21 	bl	80140bc <_ZN8touchgfx4RectaNERKS0_>
 801627a:	4620      	mov	r0, r4
 801627c:	a902      	add	r1, sp, #8
 801627e:	f7ff fec5 	bl	801600c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8016282:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8016284:	2800      	cmp	r0, #0
 8016286:	d05f      	beq.n	8016348 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8016288:	8963      	ldrh	r3, [r4, #10]
 801628a:	b202      	sxth	r2, r0
 801628c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8016290:	2500      	movs	r5, #0
 8016292:	1a1f      	subs	r7, r3, r0
 8016294:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8016298:	f8ad 101c 	strh.w	r1, [sp, #28]
 801629c:	b21b      	sxth	r3, r3
 801629e:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80162a2:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80162a6:	af04      	add	r7, sp, #16
 80162a8:	1a09      	subs	r1, r1, r0
 80162aa:	9506      	str	r5, [sp, #24]
 80162ac:	f8ad 201e 	strh.w	r2, [sp, #30]
 80162b0:	f8ad 5020 	strh.w	r5, [sp, #32]
 80162b4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80162b8:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 80162bc:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80162c0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80162c4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80162c8:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 80162cc:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80162d0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80162d4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80162d8:	ab06      	add	r3, sp, #24
 80162da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80162de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80162e2:	e887 0003 	stmia.w	r7, {r0, r1}
 80162e6:	4631      	mov	r1, r6
 80162e8:	4638      	mov	r0, r7
 80162ea:	f7fd fee7 	bl	80140bc <_ZN8touchgfx4RectaNERKS0_>
 80162ee:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	dd12      	ble.n	801631c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 80162f6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	dd0e      	ble.n	801631c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 80162fe:	6823      	ldr	r3, [r4, #0]
 8016300:	4639      	mov	r1, r7
 8016302:	4620      	mov	r0, r4
 8016304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016306:	4798      	blx	r3
 8016308:	f7ef f936 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 801630c:	6803      	ldr	r3, [r0, #0]
 801630e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016310:	4639      	mov	r1, r7
 8016312:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8016316:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801631a:	47c0      	blx	r8
 801631c:	3501      	adds	r5, #1
 801631e:	2d04      	cmp	r5, #4
 8016320:	d1da      	bne.n	80162d8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8016322:	e011      	b.n	8016348 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8016324:	6830      	ldr	r0, [r6, #0]
 8016326:	ab06      	add	r3, sp, #24
 8016328:	6871      	ldr	r1, [r6, #4]
 801632a:	c303      	stmia	r3!, {r0, r1}
 801632c:	6823      	ldr	r3, [r4, #0]
 801632e:	a906      	add	r1, sp, #24
 8016330:	4620      	mov	r0, r4
 8016332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016334:	4798      	blx	r3
 8016336:	f7ef f91f 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 801633a:	6803      	ldr	r3, [r0, #0]
 801633c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801633e:	a906      	add	r1, sp, #24
 8016340:	699d      	ldr	r5, [r3, #24]
 8016342:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8016346:	47a8      	blx	r5
 8016348:	b00e      	add	sp, #56	; 0x38
 801634a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08016350 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8016350:	4b02      	ldr	r3, [pc, #8]	; (801635c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8016352:	6018      	str	r0, [r3, #0]
 8016354:	4b02      	ldr	r3, [pc, #8]	; (8016360 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8016356:	6019      	str	r1, [r3, #0]
 8016358:	4770      	bx	lr
 801635a:	bf00      	nop
 801635c:	200566e8 	.word	0x200566e8
 8016360:	200566fc 	.word	0x200566fc

08016364 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8016364:	b538      	push	{r3, r4, r5, lr}
 8016366:	4c2b      	ldr	r4, [pc, #172]	; (8016414 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8016368:	4b2b      	ldr	r3, [pc, #172]	; (8016418 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801636a:	6821      	ldr	r1, [r4, #0]
 801636c:	681a      	ldr	r2, [r3, #0]
 801636e:	4281      	cmp	r1, r0
 8016370:	4d2a      	ldr	r5, [pc, #168]	; (801641c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8016372:	492b      	ldr	r1, [pc, #172]	; (8016420 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8016374:	d108      	bne.n	8016388 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8016376:	682b      	ldr	r3, [r5, #0]
 8016378:	4293      	cmp	r3, r2
 801637a:	d105      	bne.n	8016388 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801637c:	6808      	ldr	r0, [r1, #0]
 801637e:	280f      	cmp	r0, #15
 8016380:	bf94      	ite	ls
 8016382:	2000      	movls	r0, #0
 8016384:	2001      	movhi	r0, #1
 8016386:	bd38      	pop	{r3, r4, r5, pc}
 8016388:	4b26      	ldr	r3, [pc, #152]	; (8016424 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801638a:	6020      	str	r0, [r4, #0]
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	602a      	str	r2, [r5, #0]
 8016390:	4298      	cmp	r0, r3
 8016392:	d905      	bls.n	80163a0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8016394:	4b24      	ldr	r3, [pc, #144]	; (8016428 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8016396:	2137      	movs	r1, #55	; 0x37
 8016398:	4a24      	ldr	r2, [pc, #144]	; (801642c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801639a:	4825      	ldr	r0, [pc, #148]	; (8016430 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801639c:	f00e fd32 	bl	8024e04 <__assert_func>
 80163a0:	f010 0403 	ands.w	r4, r0, #3
 80163a4:	bf1f      	itttt	ne
 80163a6:	f1c4 0504 	rsbne	r5, r4, #4
 80163aa:	3b04      	subne	r3, #4
 80163ac:	1952      	addne	r2, r2, r5
 80163ae:	191b      	addne	r3, r3, r4
 80163b0:	4d20      	ldr	r5, [pc, #128]	; (8016434 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 80163b2:	4402      	add	r2, r0
 80163b4:	1a1b      	subs	r3, r3, r0
 80163b6:	3001      	adds	r0, #1
 80163b8:	602a      	str	r2, [r5, #0]
 80163ba:	f020 0401 	bic.w	r4, r0, #1
 80163be:	42a3      	cmp	r3, r4
 80163c0:	d203      	bcs.n	80163ca <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 80163c2:	4b19      	ldr	r3, [pc, #100]	; (8016428 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80163c4:	214a      	movs	r1, #74	; 0x4a
 80163c6:	4a19      	ldr	r2, [pc, #100]	; (801642c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80163c8:	e7e7      	b.n	801639a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80163ca:	f010 0002 	ands.w	r0, r0, #2
 80163ce:	bf1f      	itttt	ne
 80163d0:	f1c0 0504 	rsbne	r5, r0, #4
 80163d4:	1952      	addne	r2, r2, r5
 80163d6:	1f05      	subne	r5, r0, #4
 80163d8:	195b      	addne	r3, r3, r5
 80163da:	4422      	add	r2, r4
 80163dc:	4d16      	ldr	r5, [pc, #88]	; (8016438 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 80163de:	1b1b      	subs	r3, r3, r4
 80163e0:	602a      	str	r2, [r5, #0]
 80163e2:	429c      	cmp	r4, r3
 80163e4:	d903      	bls.n	80163ee <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 80163e6:	4b10      	ldr	r3, [pc, #64]	; (8016428 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80163e8:	215d      	movs	r1, #93	; 0x5d
 80163ea:	4a10      	ldr	r2, [pc, #64]	; (801642c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80163ec:	e7d5      	b.n	801639a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80163ee:	b120      	cbz	r0, 80163fa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 80163f0:	f1c0 0504 	rsb	r5, r0, #4
 80163f4:	3804      	subs	r0, #4
 80163f6:	442a      	add	r2, r5
 80163f8:	4403      	add	r3, r0
 80163fa:	1b1b      	subs	r3, r3, r4
 80163fc:	4422      	add	r2, r4
 80163fe:	480f      	ldr	r0, [pc, #60]	; (801643c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8016400:	2b0f      	cmp	r3, #15
 8016402:	600b      	str	r3, [r1, #0]
 8016404:	6002      	str	r2, [r0, #0]
 8016406:	d803      	bhi.n	8016410 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8016408:	4b0d      	ldr	r3, [pc, #52]	; (8016440 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801640a:	2170      	movs	r1, #112	; 0x70
 801640c:	4a07      	ldr	r2, [pc, #28]	; (801642c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801640e:	e7c4      	b.n	801639a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8016410:	2001      	movs	r0, #1
 8016412:	e7b8      	b.n	8016386 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8016414:	200566f0 	.word	0x200566f0
 8016418:	200566e8 	.word	0x200566e8
 801641c:	200566f8 	.word	0x200566f8
 8016420:	20056700 	.word	0x20056700
 8016424:	200566fc 	.word	0x200566fc
 8016428:	0802bec8 	.word	0x0802bec8
 801642c:	0802bf90 	.word	0x0802bf90
 8016430:	0802bf01 	.word	0x0802bf01
 8016434:	20056704 	.word	0x20056704
 8016438:	200566f4 	.word	0x200566f4
 801643c:	200566ec 	.word	0x200566ec
 8016440:	0802bf4b 	.word	0x0802bf4b

08016444 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8016444:	4b04      	ldr	r3, [pc, #16]	; (8016458 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8016446:	6818      	ldr	r0, [r3, #0]
 8016448:	b120      	cbz	r0, 8016454 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801644a:	4b04      	ldr	r3, [pc, #16]	; (801645c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801644c:	6818      	ldr	r0, [r3, #0]
 801644e:	3000      	adds	r0, #0
 8016450:	bf18      	it	ne
 8016452:	2001      	movne	r0, #1
 8016454:	4770      	bx	lr
 8016456:	bf00      	nop
 8016458:	200566e8 	.word	0x200566e8
 801645c:	200566fc 	.word	0x200566fc

08016460 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8016460:	4b01      	ldr	r3, [pc, #4]	; (8016468 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8016462:	6818      	ldr	r0, [r3, #0]
 8016464:	4770      	bx	lr
 8016466:	bf00      	nop
 8016468:	200566f0 	.word	0x200566f0

0801646c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801646c:	4b01      	ldr	r3, [pc, #4]	; (8016474 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801646e:	6818      	ldr	r0, [r3, #0]
 8016470:	4770      	bx	lr
 8016472:	bf00      	nop
 8016474:	200566f8 	.word	0x200566f8

08016478 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8016478:	4b01      	ldr	r3, [pc, #4]	; (8016480 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801647a:	6818      	ldr	r0, [r3, #0]
 801647c:	4770      	bx	lr
 801647e:	bf00      	nop
 8016480:	20056704 	.word	0x20056704

08016484 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8016484:	4b01      	ldr	r3, [pc, #4]	; (801648c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8016486:	6818      	ldr	r0, [r3, #0]
 8016488:	4770      	bx	lr
 801648a:	bf00      	nop
 801648c:	200566f4 	.word	0x200566f4

08016490 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8016490:	4b01      	ldr	r3, [pc, #4]	; (8016498 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8016492:	6818      	ldr	r0, [r3, #0]
 8016494:	4770      	bx	lr
 8016496:	bf00      	nop
 8016498:	200566ec 	.word	0x200566ec

0801649c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801649c:	4b01      	ldr	r3, [pc, #4]	; (80164a4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801649e:	6818      	ldr	r0, [r3, #0]
 80164a0:	4770      	bx	lr
 80164a2:	bf00      	nop
 80164a4:	20056700 	.word	0x20056700

080164a8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80164a8:	4b01      	ldr	r3, [pc, #4]	; (80164b0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80164aa:	6019      	str	r1, [r3, #0]
 80164ac:	4770      	bx	lr
 80164ae:	bf00      	nop
 80164b0:	20056708 	.word	0x20056708

080164b4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80164b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164b8:	4696      	mov	lr, r2
 80164ba:	b097      	sub	sp, #92	; 0x5c
 80164bc:	4605      	mov	r5, r0
 80164be:	4614      	mov	r4, r2
 80164c0:	460e      	mov	r6, r1
 80164c2:	461f      	mov	r7, r3
 80164c4:	f10d 0c1c 	add.w	ip, sp, #28
 80164c8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80164cc:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80164d0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80164d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80164d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80164dc:	f8de 3000 	ldr.w	r3, [lr]
 80164e0:	f104 0e14 	add.w	lr, r4, #20
 80164e4:	f8cc 3000 	str.w	r3, [ip]
 80164e8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80164ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80164f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80164f4:	f8de 3000 	ldr.w	r3, [lr]
 80164f8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80164fc:	f8cc 3000 	str.w	r3, [ip]
 8016500:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016504:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016508:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801650c:	f8de 3000 	ldr.w	r3, [lr]
 8016510:	4631      	mov	r1, r6
 8016512:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016514:	4628      	mov	r0, r5
 8016516:	f8cc 3000 	str.w	r3, [ip]
 801651a:	682b      	ldr	r3, [r5, #0]
 801651c:	9201      	str	r2, [sp, #4]
 801651e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016520:	f8cd 8008 	str.w	r8, [sp, #8]
 8016524:	9200      	str	r2, [sp, #0]
 8016526:	aa07      	add	r2, sp, #28
 8016528:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801652c:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8016530:	463b      	mov	r3, r7
 8016532:	47d8      	blx	fp
 8016534:	46a6      	mov	lr, r4
 8016536:	f10d 0c1c 	add.w	ip, sp, #28
 801653a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801653e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016542:	f8de 3000 	ldr.w	r3, [lr]
 8016546:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801654a:	343c      	adds	r4, #60	; 0x3c
 801654c:	f8cc 3000 	str.w	r3, [ip]
 8016550:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016554:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016558:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801655c:	f8de 3000 	ldr.w	r3, [lr]
 8016560:	f8cc 3000 	str.w	r3, [ip]
 8016564:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801656a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801656e:	6823      	ldr	r3, [r4, #0]
 8016570:	4631      	mov	r1, r6
 8016572:	4628      	mov	r0, r5
 8016574:	f8cc 3000 	str.w	r3, [ip]
 8016578:	682b      	ldr	r3, [r5, #0]
 801657a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801657e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016580:	f8cd 8008 	str.w	r8, [sp, #8]
 8016584:	9201      	str	r2, [sp, #4]
 8016586:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016588:	9200      	str	r2, [sp, #0]
 801658a:	aa07      	add	r2, sp, #28
 801658c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 801658e:	463b      	mov	r3, r7
 8016590:	47a0      	blx	r4
 8016592:	b017      	add	sp, #92	; 0x5c
 8016594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016598 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016598:	2000      	movs	r0, #0
 801659a:	4770      	bx	lr

0801659c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801659c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165a0:	b08d      	sub	sp, #52	; 0x34
 80165a2:	4688      	mov	r8, r1
 80165a4:	f8d3 c000 	ldr.w	ip, [r3]
 80165a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80165aa:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80165ae:	680f      	ldr	r7, [r1, #0]
 80165b0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80165b4:	eba7 070c 	sub.w	r7, r7, ip
 80165b8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80165bc:	edd3 6a07 	vldr	s13, [r3, #28]
 80165c0:	42bc      	cmp	r4, r7
 80165c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80165c4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80165c8:	bfa8      	it	ge
 80165ca:	463c      	movge	r4, r7
 80165cc:	f9b1 9000 	ldrsh.w	r9, [r1]
 80165d0:	f9ba 1000 	ldrsh.w	r1, [sl]
 80165d4:	ee07 4a90 	vmov	s15, r4
 80165d8:	eb09 0e0c 	add.w	lr, r9, ip
 80165dc:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80165e0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80165e4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80165e8:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80165ec:	4571      	cmp	r1, lr
 80165ee:	ee25 4a04 	vmul.f32	s8, s10, s8
 80165f2:	ee65 4a24 	vmul.f32	s9, s10, s9
 80165f6:	ee25 5a27 	vmul.f32	s10, s10, s15
 80165fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80165fe:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8016602:	ee32 1a05 	vadd.f32	s2, s4, s10
 8016606:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801660a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801660e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016612:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016616:	f340 808c 	ble.w	8016732 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801661a:	eba1 060e 	sub.w	r6, r1, lr
 801661e:	fb96 f5f4 	sdiv	r5, r6, r4
 8016622:	ee07 5a10 	vmov	s14, r5
 8016626:	2d00      	cmp	r5, #0
 8016628:	fb04 6615 	mls	r6, r4, r5, r6
 801662c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016630:	eea7 0a04 	vfma.f32	s0, s14, s8
 8016634:	eee7 0a24 	vfma.f32	s1, s14, s9
 8016638:	eea7 1a05 	vfma.f32	s2, s14, s10
 801663c:	dd12      	ble.n	8016664 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801663e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8016642:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8016646:	ee31 2a45 	vsub.f32	s4, s2, s10
 801664a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801664e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016652:	bf14      	ite	ne
 8016654:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016658:	eeb0 7a67 	vmoveq.f32	s14, s15
 801665c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016660:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016664:	fb05 f204 	mul.w	r2, r5, r4
 8016668:	1abf      	subs	r7, r7, r2
 801666a:	4494      	add	ip, r2
 801666c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8016670:	4411      	add	r1, r2
 8016672:	eb09 020c 	add.w	r2, r9, ip
 8016676:	b209      	sxth	r1, r1
 8016678:	443a      	add	r2, r7
 801667a:	428a      	cmp	r2, r1
 801667c:	bfc4      	itt	gt
 801667e:	eba1 0209 	subgt.w	r2, r1, r9
 8016682:	eba2 070c 	subgt.w	r7, r2, ip
 8016686:	2f00      	cmp	r7, #0
 8016688:	dd50      	ble.n	801672c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801668a:	fb97 f1f4 	sdiv	r1, r7, r4
 801668e:	fb04 7211 	mls	r2, r4, r1, r7
 8016692:	b90a      	cbnz	r2, 8016698 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8016694:	3901      	subs	r1, #1
 8016696:	4622      	mov	r2, r4
 8016698:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801669c:	6840      	ldr	r0, [r0, #4]
 801669e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80166a2:	44b6      	add	lr, r6
 80166a4:	f8d0 a000 	ldr.w	sl, [r0]
 80166a8:	2900      	cmp	r1, #0
 80166aa:	bfcc      	ite	gt
 80166ac:	46a1      	movgt	r9, r4
 80166ae:	4691      	movle	r9, r2
 80166b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80166b2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80166b4:	fb04 e505 	mla	r5, r4, r5, lr
 80166b8:	eef0 6a42 	vmov.f32	s13, s4
 80166bc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80166c0:	9008      	str	r0, [sp, #32]
 80166c2:	eeb0 7a61 	vmov.f32	s14, s3
 80166c6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80166c8:	695b      	ldr	r3, [r3, #20]
 80166ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80166ce:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80166d2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80166d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80166d8:	445b      	add	r3, fp
 80166da:	9307      	str	r3, [sp, #28]
 80166dc:	ee16 3a90 	vmov	r3, s13
 80166e0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80166e4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80166e8:	ee21 3a23 	vmul.f32	s6, s2, s7
 80166ec:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80166f0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80166f4:	ee17 7a90 	vmov	r7, s15
 80166f8:	ee73 7a42 	vsub.f32	s15, s6, s4
 80166fc:	fb97 f7f4 	sdiv	r7, r7, r4
 8016700:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016704:	ee17 ca90 	vmov	ip, s15
 8016708:	fb9c fcf4 	sdiv	ip, ip, r4
 801670c:	fb0c 3306 	mla	r3, ip, r6, r3
 8016710:	9302      	str	r3, [sp, #8]
 8016712:	ee17 3a10 	vmov	r3, s14
 8016716:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801671a:	fb07 3706 	mla	r7, r7, r6, r3
 801671e:	eba9 0306 	sub.w	r3, r9, r6
 8016722:	e9cd 4700 	strd	r4, r7, [sp]
 8016726:	f8da 4008 	ldr.w	r4, [sl, #8]
 801672a:	47a0      	blx	r4
 801672c:	b00d      	add	sp, #52	; 0x34
 801672e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016732:	2500      	movs	r5, #0
 8016734:	462e      	mov	r6, r5
 8016736:	e799      	b.n	801666c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08016738 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801673c:	b0db      	sub	sp, #364	; 0x16c
 801673e:	461d      	mov	r5, r3
 8016740:	4614      	mov	r4, r2
 8016742:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8016746:	910f      	str	r1, [sp, #60]	; 0x3c
 8016748:	4629      	mov	r1, r5
 801674a:	930a      	str	r3, [sp, #40]	; 0x28
 801674c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8016750:	9009      	str	r0, [sp, #36]	; 0x24
 8016752:	930b      	str	r3, [sp, #44]	; 0x2c
 8016754:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8016758:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801675c:	9310      	str	r3, [sp, #64]	; 0x40
 801675e:	6803      	ldr	r3, [r0, #0]
 8016760:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8016762:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016766:	47b8      	blx	r7
 8016768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801676a:	6058      	str	r0, [r3, #4]
 801676c:	2800      	cmp	r0, #0
 801676e:	f000 83a1 	beq.w	8016eb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016772:	682b      	ldr	r3, [r5, #0]
 8016774:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016778:	ed94 7a02 	vldr	s14, [r4, #8]
 801677c:	9314      	str	r3, [sp, #80]	; 0x50
 801677e:	686b      	ldr	r3, [r5, #4]
 8016780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016784:	9315      	str	r3, [sp, #84]	; 0x54
 8016786:	4bc1      	ldr	r3, [pc, #772]	; (8016a8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016788:	7819      	ldrb	r1, [r3, #0]
 801678a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801678e:	2900      	cmp	r1, #0
 8016790:	bf16      	itet	ne
 8016792:	4619      	movne	r1, r3
 8016794:	4611      	moveq	r1, r2
 8016796:	4613      	movne	r3, r2
 8016798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801679c:	9116      	str	r1, [sp, #88]	; 0x58
 801679e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80167a2:	f240 8387 	bls.w	8016eb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80167a6:	ed94 7a07 	vldr	s14, [r4, #28]
 80167aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80167ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167b2:	f240 837f 	bls.w	8016eb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80167b6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80167ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80167be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167c2:	f240 8377 	bls.w	8016eb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80167c6:	6822      	ldr	r2, [r4, #0]
 80167c8:	4bb1      	ldr	r3, [pc, #708]	; (8016a90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80167ca:	429a      	cmp	r2, r3
 80167cc:	f2c0 8372 	blt.w	8016eb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80167d0:	49b0      	ldr	r1, [pc, #704]	; (8016a94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80167d2:	6963      	ldr	r3, [r4, #20]
 80167d4:	428a      	cmp	r2, r1
 80167d6:	f300 836d 	bgt.w	8016eb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80167da:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80167de:	48ae      	ldr	r0, [pc, #696]	; (8016a98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80167e0:	33ff      	adds	r3, #255	; 0xff
 80167e2:	4283      	cmp	r3, r0
 80167e4:	f200 8366 	bhi.w	8016eb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80167e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80167ea:	4dac      	ldr	r5, [pc, #688]	; (8016a9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80167ec:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80167f0:	33ff      	adds	r3, #255	; 0xff
 80167f2:	42ab      	cmp	r3, r5
 80167f4:	f200 835e 	bhi.w	8016eb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80167f8:	6862      	ldr	r2, [r4, #4]
 80167fa:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80167fe:	33ff      	adds	r3, #255	; 0xff
 8016800:	4283      	cmp	r3, r0
 8016802:	f200 8357 	bhi.w	8016eb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016806:	69a1      	ldr	r1, [r4, #24]
 8016808:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801680c:	33ff      	adds	r3, #255	; 0xff
 801680e:	4283      	cmp	r3, r0
 8016810:	f200 8350 	bhi.w	8016eb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016814:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016816:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801681a:	30ff      	adds	r0, #255	; 0xff
 801681c:	42a8      	cmp	r0, r5
 801681e:	f200 8349 	bhi.w	8016eb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016822:	428a      	cmp	r2, r1
 8016824:	f280 8110 	bge.w	8016a48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8016828:	429a      	cmp	r2, r3
 801682a:	f300 8119 	bgt.w	8016a60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801682e:	4299      	cmp	r1, r3
 8016830:	f280 811d 	bge.w	8016a6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8016834:	2502      	movs	r5, #2
 8016836:	2701      	movs	r7, #1
 8016838:	46a9      	mov	r9, r5
 801683a:	46b8      	mov	r8, r7
 801683c:	f04f 0a00 	mov.w	sl, #0
 8016840:	4621      	mov	r1, r4
 8016842:	a849      	add	r0, sp, #292	; 0x124
 8016844:	f003 fd3e 	bl	801a2c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016848:	4622      	mov	r2, r4
 801684a:	4653      	mov	r3, sl
 801684c:	a949      	add	r1, sp, #292	; 0x124
 801684e:	f8cd 9000 	str.w	r9, [sp]
 8016852:	a819      	add	r0, sp, #100	; 0x64
 8016854:	f003 fe66 	bl	801a524 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016858:	4622      	mov	r2, r4
 801685a:	4653      	mov	r3, sl
 801685c:	a949      	add	r1, sp, #292	; 0x124
 801685e:	f8cd 8000 	str.w	r8, [sp]
 8016862:	a829      	add	r0, sp, #164	; 0xa4
 8016864:	f003 fe5e 	bl	801a524 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016868:	4643      	mov	r3, r8
 801686a:	4622      	mov	r2, r4
 801686c:	a949      	add	r1, sp, #292	; 0x124
 801686e:	f8cd 9000 	str.w	r9, [sp]
 8016872:	a839      	add	r0, sp, #228	; 0xe4
 8016874:	f003 fe56 	bl	801a524 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016878:	42af      	cmp	r7, r5
 801687a:	af12      	add	r7, sp, #72	; 0x48
 801687c:	bfb7      	itett	lt
 801687e:	2300      	movlt	r3, #0
 8016880:	2301      	movge	r3, #1
 8016882:	ad29      	addlt	r5, sp, #164	; 0xa4
 8016884:	ac19      	addlt	r4, sp, #100	; 0x64
 8016886:	bfb1      	iteee	lt
 8016888:	930e      	strlt	r3, [sp, #56]	; 0x38
 801688a:	ad19      	addge	r5, sp, #100	; 0x64
 801688c:	930e      	strge	r3, [sp, #56]	; 0x38
 801688e:	ac29      	addge	r4, sp, #164	; 0xa4
 8016890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016892:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016896:	e887 0003 	stmia.w	r7, {r0, r1}
 801689a:	b928      	cbnz	r0, 80168a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801689c:	4b80      	ldr	r3, [pc, #512]	; (8016aa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801689e:	6818      	ldr	r0, [r3, #0]
 80168a0:	6803      	ldr	r3, [r0, #0]
 80168a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168a4:	4798      	blx	r3
 80168a6:	6038      	str	r0, [r7, #0]
 80168a8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80168aa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80168ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80168b2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80168b4:	930c      	str	r3, [sp, #48]	; 0x30
 80168b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80168b8:	6963      	ldr	r3, [r4, #20]
 80168ba:	440b      	add	r3, r1
 80168bc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80168c0:	4408      	add	r0, r1
 80168c2:	b200      	sxth	r0, r0
 80168c4:	4283      	cmp	r3, r0
 80168c6:	900d      	str	r0, [sp, #52]	; 0x34
 80168c8:	f280 80dd 	bge.w	8016a86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80168cc:	428b      	cmp	r3, r1
 80168ce:	da08      	bge.n	80168e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80168d0:	2a00      	cmp	r2, #0
 80168d2:	dd06      	ble.n	80168e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80168d4:	1acb      	subs	r3, r1, r3
 80168d6:	429a      	cmp	r2, r3
 80168d8:	f2c0 80e4 	blt.w	8016aa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80168dc:	2b00      	cmp	r3, #0
 80168de:	f300 80e2 	bgt.w	8016aa6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80168e2:	6967      	ldr	r7, [r4, #20]
 80168e4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80168e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168ea:	443b      	add	r3, r7
 80168ec:	461f      	mov	r7, r3
 80168ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80168f0:	1bdf      	subs	r7, r3, r7
 80168f2:	4297      	cmp	r7, r2
 80168f4:	bfa8      	it	ge
 80168f6:	4617      	movge	r7, r2
 80168f8:	2f00      	cmp	r7, #0
 80168fa:	f340 8166 	ble.w	8016bca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80168fe:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016900:	6829      	ldr	r1, [r5, #0]
 8016902:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016906:	f9bb 3000 	ldrsh.w	r3, [fp]
 801690a:	4411      	add	r1, r2
 801690c:	6820      	ldr	r0, [r4, #0]
 801690e:	4299      	cmp	r1, r3
 8016910:	dd1a      	ble.n	8016948 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016912:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016916:	4402      	add	r2, r0
 8016918:	440b      	add	r3, r1
 801691a:	b21b      	sxth	r3, r3
 801691c:	429a      	cmp	r2, r3
 801691e:	dc13      	bgt.n	8016948 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016920:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016922:	a912      	add	r1, sp, #72	; 0x48
 8016924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016926:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	9206      	str	r2, [sp, #24]
 801692c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801692e:	9500      	str	r5, [sp, #0]
 8016930:	9205      	str	r2, [sp, #20]
 8016932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016934:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016938:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801693a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801693e:	aa49      	add	r2, sp, #292	; 0x124
 8016940:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8016944:	4623      	mov	r3, r4
 8016946:	47c8      	blx	r9
 8016948:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801694c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016950:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016954:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016958:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801695c:	68a1      	ldr	r1, [r4, #8]
 801695e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016962:	ed94 6a08 	vldr	s12, [r4, #32]
 8016966:	edd4 6a07 	vldr	s13, [r4, #28]
 801696a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801696e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016972:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016976:	e9d4 2300 	ldrd	r2, r3, [r4]
 801697a:	edc4 6a07 	vstr	s13, [r4, #28]
 801697e:	441a      	add	r2, r3
 8016980:	6963      	ldr	r3, [r4, #20]
 8016982:	3301      	adds	r3, #1
 8016984:	6022      	str	r2, [r4, #0]
 8016986:	6163      	str	r3, [r4, #20]
 8016988:	69a3      	ldr	r3, [r4, #24]
 801698a:	3b01      	subs	r3, #1
 801698c:	61a3      	str	r3, [r4, #24]
 801698e:	6923      	ldr	r3, [r4, #16]
 8016990:	440b      	add	r3, r1
 8016992:	68e1      	ldr	r1, [r4, #12]
 8016994:	428b      	cmp	r3, r1
 8016996:	6123      	str	r3, [r4, #16]
 8016998:	db15      	blt.n	80169c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801699a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801699e:	3201      	adds	r2, #1
 80169a0:	1a5b      	subs	r3, r3, r1
 80169a2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80169a6:	6022      	str	r2, [r4, #0]
 80169a8:	6123      	str	r3, [r4, #16]
 80169aa:	edc4 6a07 	vstr	s13, [r4, #28]
 80169ae:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80169b2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80169b6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80169ba:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80169be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80169c2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80169c6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80169ca:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80169ce:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80169d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80169d6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80169da:	68a9      	ldr	r1, [r5, #8]
 80169dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80169e0:	ed95 6a08 	vldr	s12, [r5, #32]
 80169e4:	edd5 6a07 	vldr	s13, [r5, #28]
 80169e8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80169ec:	ee76 6a86 	vadd.f32	s13, s13, s12
 80169f0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80169f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80169f8:	edc5 6a07 	vstr	s13, [r5, #28]
 80169fc:	441a      	add	r2, r3
 80169fe:	696b      	ldr	r3, [r5, #20]
 8016a00:	3301      	adds	r3, #1
 8016a02:	602a      	str	r2, [r5, #0]
 8016a04:	616b      	str	r3, [r5, #20]
 8016a06:	69ab      	ldr	r3, [r5, #24]
 8016a08:	3b01      	subs	r3, #1
 8016a0a:	61ab      	str	r3, [r5, #24]
 8016a0c:	692b      	ldr	r3, [r5, #16]
 8016a0e:	440b      	add	r3, r1
 8016a10:	68e9      	ldr	r1, [r5, #12]
 8016a12:	428b      	cmp	r3, r1
 8016a14:	612b      	str	r3, [r5, #16]
 8016a16:	db15      	blt.n	8016a44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8016a18:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016a1c:	3201      	adds	r2, #1
 8016a1e:	1a5b      	subs	r3, r3, r1
 8016a20:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016a24:	602a      	str	r2, [r5, #0]
 8016a26:	612b      	str	r3, [r5, #16]
 8016a28:	edc5 6a07 	vstr	s13, [r5, #28]
 8016a2c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016a30:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016a34:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016a38:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a40:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016a44:	3f01      	subs	r7, #1
 8016a46:	e757      	b.n	80168f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016a48:	4299      	cmp	r1, r3
 8016a4a:	dc13      	bgt.n	8016a74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016a4c:	429a      	cmp	r2, r3
 8016a4e:	da14      	bge.n	8016a7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8016a50:	2502      	movs	r5, #2
 8016a52:	2703      	movs	r7, #3
 8016a54:	f04f 0800 	mov.w	r8, #0
 8016a58:	46a9      	mov	r9, r5
 8016a5a:	f04f 0a01 	mov.w	sl, #1
 8016a5e:	e6ef      	b.n	8016840 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016a60:	2501      	movs	r5, #1
 8016a62:	2700      	movs	r7, #0
 8016a64:	46a9      	mov	r9, r5
 8016a66:	46b8      	mov	r8, r7
 8016a68:	f04f 0a02 	mov.w	sl, #2
 8016a6c:	e6e8      	b.n	8016840 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016a6e:	2501      	movs	r5, #1
 8016a70:	2702      	movs	r7, #2
 8016a72:	e6e1      	b.n	8016838 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016a74:	2500      	movs	r5, #0
 8016a76:	2701      	movs	r7, #1
 8016a78:	e7f4      	b.n	8016a64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016a7a:	2702      	movs	r7, #2
 8016a7c:	2503      	movs	r5, #3
 8016a7e:	f04f 0900 	mov.w	r9, #0
 8016a82:	46b8      	mov	r8, r7
 8016a84:	e7e9      	b.n	8016a5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8016a86:	4613      	mov	r3, r2
 8016a88:	e728      	b.n	80168dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8016a8a:	bf00      	nop
 8016a8c:	200566d8 	.word	0x200566d8
 8016a90:	fffd8f01 	.word	0xfffd8f01
 8016a94:	00027100 	.word	0x00027100
 8016a98:	0004e1ff 	.word	0x0004e1ff
 8016a9c:	0004e1fe 	.word	0x0004e1fe
 8016aa0:	200566e0 	.word	0x200566e0
 8016aa4:	4613      	mov	r3, r2
 8016aa6:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016aa8:	469e      	mov	lr, r3
 8016aaa:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8016aac:	469c      	mov	ip, r3
 8016aae:	9111      	str	r1, [sp, #68]	; 0x44
 8016ab0:	f04f 0900 	mov.w	r9, #0
 8016ab4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8016ab8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8016abc:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8016ac0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8016ac4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8016ac8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8016acc:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8016ad0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8016ad4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8016ad8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8016adc:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8016ae0:	f1bc 0f00 	cmp.w	ip, #0
 8016ae4:	d147      	bne.n	8016b76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8016ae6:	eb03 0c07 	add.w	ip, r3, r7
 8016aea:	1ad7      	subs	r7, r2, r3
 8016aec:	f1b9 0f00 	cmp.w	r9, #0
 8016af0:	d009      	beq.n	8016b06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8016af2:	9029      	str	r0, [sp, #164]	; 0xa4
 8016af4:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8016af8:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8016afc:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8016b00:	912d      	str	r1, [sp, #180]	; 0xb4
 8016b02:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8016b06:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016b08:	f04f 0800 	mov.w	r8, #0
 8016b0c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016b10:	9111      	str	r1, [sp, #68]	; 0x44
 8016b12:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016b16:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016b1a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016b1e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016b22:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016b26:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016b2a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016b2e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016b32:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016b36:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016b3a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016b3e:	f1be 0f00 	cmp.w	lr, #0
 8016b42:	d031      	beq.n	8016ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016b44:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016b46:	4450      	add	r0, sl
 8016b48:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016b4c:	4431      	add	r1, r6
 8016b4e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016b52:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016b56:	4549      	cmp	r1, r9
 8016b58:	db08      	blt.n	8016b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8016b5a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016b5e:	3001      	adds	r0, #1
 8016b60:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016b64:	eba1 0109 	sub.w	r1, r1, r9
 8016b68:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016b6c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016b70:	f04f 0801 	mov.w	r8, #1
 8016b74:	e7e3      	b.n	8016b3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8016b76:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016b78:	4450      	add	r0, sl
 8016b7a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016b7e:	4431      	add	r1, r6
 8016b80:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016b84:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016b88:	4541      	cmp	r1, r8
 8016b8a:	db08      	blt.n	8016b9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8016b8c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016b90:	3001      	adds	r0, #1
 8016b92:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016b96:	eba1 0108 	sub.w	r1, r1, r8
 8016b9a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016b9e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016ba2:	f04f 0901 	mov.w	r9, #1
 8016ba6:	e79b      	b.n	8016ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8016ba8:	449c      	add	ip, r3
 8016baa:	1aff      	subs	r7, r7, r3
 8016bac:	f1b8 0f00 	cmp.w	r8, #0
 8016bb0:	d009      	beq.n	8016bc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8016bb2:	9019      	str	r0, [sp, #100]	; 0x64
 8016bb4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016bb8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016bbc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8016bc0:	911d      	str	r1, [sp, #116]	; 0x74
 8016bc2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016bc6:	1ad2      	subs	r2, r2, r3
 8016bc8:	e68b      	b.n	80168e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016bcc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	f000 80d1 	beq.w	8016d76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8016bd4:	ad19      	add	r5, sp, #100	; 0x64
 8016bd6:	ac39      	add	r4, sp, #228	; 0xe4
 8016bd8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016bda:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016bde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016be2:	930c      	str	r3, [sp, #48]	; 0x30
 8016be4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016be6:	6963      	ldr	r3, [r4, #20]
 8016be8:	440b      	add	r3, r1
 8016bea:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016bee:	4408      	add	r0, r1
 8016bf0:	b200      	sxth	r0, r0
 8016bf2:	4283      	cmp	r3, r0
 8016bf4:	900d      	str	r0, [sp, #52]	; 0x34
 8016bf6:	f280 80c1 	bge.w	8016d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8016bfa:	428b      	cmp	r3, r1
 8016bfc:	da08      	bge.n	8016c10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016bfe:	2a00      	cmp	r2, #0
 8016c00:	dd06      	ble.n	8016c10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016c02:	1acb      	subs	r3, r1, r3
 8016c04:	429a      	cmp	r2, r3
 8016c06:	f2c0 80bb 	blt.w	8016d80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	f300 80b9 	bgt.w	8016d82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8016c10:	6967      	ldr	r7, [r4, #20]
 8016c12:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c18:	443b      	add	r3, r7
 8016c1a:	461f      	mov	r7, r3
 8016c1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c1e:	1bdf      	subs	r7, r3, r7
 8016c20:	4297      	cmp	r7, r2
 8016c22:	bfa8      	it	ge
 8016c24:	4617      	movge	r7, r2
 8016c26:	2f00      	cmp	r7, #0
 8016c28:	f340 813c 	ble.w	8016ea4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8016c2c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016c2e:	6829      	ldr	r1, [r5, #0]
 8016c30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016c34:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016c38:	4411      	add	r1, r2
 8016c3a:	6820      	ldr	r0, [r4, #0]
 8016c3c:	4299      	cmp	r1, r3
 8016c3e:	dd1a      	ble.n	8016c76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016c40:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016c44:	4402      	add	r2, r0
 8016c46:	440b      	add	r3, r1
 8016c48:	b21b      	sxth	r3, r3
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	dc13      	bgt.n	8016c76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016c4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016c50:	a912      	add	r1, sp, #72	; 0x48
 8016c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	9206      	str	r2, [sp, #24]
 8016c5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016c5c:	9500      	str	r5, [sp, #0]
 8016c5e:	9205      	str	r2, [sp, #20]
 8016c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016c62:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016c66:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016c68:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016c6c:	aa49      	add	r2, sp, #292	; 0x124
 8016c6e:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8016c72:	4623      	mov	r3, r4
 8016c74:	47c8      	blx	r9
 8016c76:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016c7a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016c7e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016c82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016c86:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016c8a:	68a1      	ldr	r1, [r4, #8]
 8016c8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016c90:	ed94 6a08 	vldr	s12, [r4, #32]
 8016c94:	edd4 6a07 	vldr	s13, [r4, #28]
 8016c98:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016c9c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016ca0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016ca4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016ca8:	edc4 6a07 	vstr	s13, [r4, #28]
 8016cac:	441a      	add	r2, r3
 8016cae:	6963      	ldr	r3, [r4, #20]
 8016cb0:	3301      	adds	r3, #1
 8016cb2:	6022      	str	r2, [r4, #0]
 8016cb4:	6163      	str	r3, [r4, #20]
 8016cb6:	69a3      	ldr	r3, [r4, #24]
 8016cb8:	3b01      	subs	r3, #1
 8016cba:	61a3      	str	r3, [r4, #24]
 8016cbc:	6923      	ldr	r3, [r4, #16]
 8016cbe:	440b      	add	r3, r1
 8016cc0:	68e1      	ldr	r1, [r4, #12]
 8016cc2:	428b      	cmp	r3, r1
 8016cc4:	6123      	str	r3, [r4, #16]
 8016cc6:	db15      	blt.n	8016cf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8016cc8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016ccc:	3201      	adds	r2, #1
 8016cce:	1a5b      	subs	r3, r3, r1
 8016cd0:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016cd4:	6022      	str	r2, [r4, #0]
 8016cd6:	6123      	str	r3, [r4, #16]
 8016cd8:	edc4 6a07 	vstr	s13, [r4, #28]
 8016cdc:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016ce0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016ce4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016ce8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016cf0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016cf4:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016cf8:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016cfc:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016d00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d04:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016d08:	68a9      	ldr	r1, [r5, #8]
 8016d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016d0e:	ed95 6a08 	vldr	s12, [r5, #32]
 8016d12:	edd5 6a07 	vldr	s13, [r5, #28]
 8016d16:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016d1a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016d1e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016d22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016d26:	edc5 6a07 	vstr	s13, [r5, #28]
 8016d2a:	441a      	add	r2, r3
 8016d2c:	696b      	ldr	r3, [r5, #20]
 8016d2e:	3301      	adds	r3, #1
 8016d30:	602a      	str	r2, [r5, #0]
 8016d32:	616b      	str	r3, [r5, #20]
 8016d34:	69ab      	ldr	r3, [r5, #24]
 8016d36:	3b01      	subs	r3, #1
 8016d38:	61ab      	str	r3, [r5, #24]
 8016d3a:	692b      	ldr	r3, [r5, #16]
 8016d3c:	440b      	add	r3, r1
 8016d3e:	68e9      	ldr	r1, [r5, #12]
 8016d40:	428b      	cmp	r3, r1
 8016d42:	612b      	str	r3, [r5, #16]
 8016d44:	db15      	blt.n	8016d72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8016d46:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016d4a:	3201      	adds	r2, #1
 8016d4c:	1a5b      	subs	r3, r3, r1
 8016d4e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016d52:	602a      	str	r2, [r5, #0]
 8016d54:	612b      	str	r3, [r5, #16]
 8016d56:	edc5 6a07 	vstr	s13, [r5, #28]
 8016d5a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016d5e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016d62:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016d66:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d6e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016d72:	3f01      	subs	r7, #1
 8016d74:	e757      	b.n	8016c26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8016d76:	ad39      	add	r5, sp, #228	; 0xe4
 8016d78:	ac19      	add	r4, sp, #100	; 0x64
 8016d7a:	e72d      	b.n	8016bd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8016d7c:	4613      	mov	r3, r2
 8016d7e:	e744      	b.n	8016c0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8016d80:	4613      	mov	r3, r2
 8016d82:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8016d84:	469e      	mov	lr, r3
 8016d86:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8016d8a:	461f      	mov	r7, r3
 8016d8c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8016d90:	f04f 0900 	mov.w	r9, #0
 8016d94:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8016d98:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8016d9c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8016da0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8016da4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8016da8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8016daa:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8016dae:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8016db2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8016db6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8016dba:	960e      	str	r6, [sp, #56]	; 0x38
 8016dbc:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8016dc0:	2f00      	cmp	r7, #0
 8016dc2:	d146      	bne.n	8016e52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8016dc4:	449c      	add	ip, r3
 8016dc6:	1ad7      	subs	r7, r2, r3
 8016dc8:	f1b9 0f00 	cmp.w	r9, #0
 8016dcc:	d009      	beq.n	8016de2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8016dce:	9039      	str	r0, [sp, #228]	; 0xe4
 8016dd0:	913d      	str	r1, [sp, #244]	; 0xf4
 8016dd2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8016dd6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8016dda:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8016dde:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8016de2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016de4:	f04f 0800 	mov.w	r8, #0
 8016de8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016dec:	910e      	str	r1, [sp, #56]	; 0x38
 8016dee:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016df2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016df6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016dfa:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016dfe:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016e02:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016e06:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016e0a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016e0e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016e12:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016e16:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016e1a:	f1be 0f00 	cmp.w	lr, #0
 8016e1e:	d030      	beq.n	8016e82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8016e20:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016e22:	4450      	add	r0, sl
 8016e24:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016e28:	4431      	add	r1, r6
 8016e2a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016e2e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016e32:	4549      	cmp	r1, r9
 8016e34:	db08      	blt.n	8016e48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8016e36:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016e3a:	3001      	adds	r0, #1
 8016e3c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016e40:	eba1 0109 	sub.w	r1, r1, r9
 8016e44:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016e48:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016e4c:	f04f 0801 	mov.w	r8, #1
 8016e50:	e7e3      	b.n	8016e1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8016e52:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016e54:	4450      	add	r0, sl
 8016e56:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016e5a:	4431      	add	r1, r6
 8016e5c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016e60:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016e64:	4541      	cmp	r1, r8
 8016e66:	db08      	blt.n	8016e7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8016e68:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016e6c:	3001      	adds	r0, #1
 8016e6e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016e72:	eba1 0108 	sub.w	r1, r1, r8
 8016e76:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016e7a:	3f01      	subs	r7, #1
 8016e7c:	f04f 0901 	mov.w	r9, #1
 8016e80:	e79e      	b.n	8016dc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8016e82:	449c      	add	ip, r3
 8016e84:	1aff      	subs	r7, r7, r3
 8016e86:	f1b8 0f00 	cmp.w	r8, #0
 8016e8a:	d009      	beq.n	8016ea0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8016e8c:	9019      	str	r0, [sp, #100]	; 0x64
 8016e8e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016e92:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016e96:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8016e9a:	911d      	str	r1, [sp, #116]	; 0x74
 8016e9c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016ea0:	1ad2      	subs	r2, r2, r3
 8016ea2:	e6b5      	b.n	8016c10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016ea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	b923      	cbnz	r3, 8016eb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016eaa:	4b04      	ldr	r3, [pc, #16]	; (8016ebc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8016eac:	6818      	ldr	r0, [r3, #0]
 8016eae:	6803      	ldr	r3, [r0, #0]
 8016eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016eb2:	4798      	blx	r3
 8016eb4:	b05b      	add	sp, #364	; 0x16c
 8016eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eba:	bf00      	nop
 8016ebc:	200566e0 	.word	0x200566e0

08016ec0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8016ec0:	b570      	push	{r4, r5, r6, lr}
 8016ec2:	4604      	mov	r4, r0
 8016ec4:	2500      	movs	r5, #0
 8016ec6:	9804      	ldr	r0, [sp, #16]
 8016ec8:	7223      	strb	r3, [r4, #8]
 8016eca:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016ece:	8025      	strh	r5, [r4, #0]
 8016ed0:	6061      	str	r1, [r4, #4]
 8016ed2:	7263      	strb	r3, [r4, #9]
 8016ed4:	60e0      	str	r0, [r4, #12]
 8016ed6:	8222      	strh	r2, [r4, #16]
 8016ed8:	8265      	strh	r5, [r4, #18]
 8016eda:	82a5      	strh	r5, [r4, #20]
 8016edc:	82e5      	strh	r5, [r4, #22]
 8016ede:	8325      	strh	r5, [r4, #24]
 8016ee0:	8365      	strh	r5, [r4, #26]
 8016ee2:	83a5      	strh	r5, [r4, #28]
 8016ee4:	77a5      	strb	r5, [r4, #30]
 8016ee6:	6803      	ldr	r3, [r0, #0]
 8016ee8:	695b      	ldr	r3, [r3, #20]
 8016eea:	4798      	blx	r3
 8016eec:	4606      	mov	r6, r0
 8016eee:	b1f8      	cbz	r0, 8016f30 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8016ef0:	68e0      	ldr	r0, [r4, #12]
 8016ef2:	4631      	mov	r1, r6
 8016ef4:	6803      	ldr	r3, [r0, #0]
 8016ef6:	68db      	ldr	r3, [r3, #12]
 8016ef8:	4798      	blx	r3
 8016efa:	7b43      	ldrb	r3, [r0, #13]
 8016efc:	7a82      	ldrb	r2, [r0, #10]
 8016efe:	4605      	mov	r5, r0
 8016f00:	005b      	lsls	r3, r3, #1
 8016f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016f06:	4313      	orrs	r3, r2
 8016f08:	83a3      	strh	r3, [r4, #28]
 8016f0a:	7a63      	ldrb	r3, [r4, #9]
 8016f0c:	2b04      	cmp	r3, #4
 8016f0e:	d10f      	bne.n	8016f30 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8016f10:	68e0      	ldr	r0, [r4, #12]
 8016f12:	462a      	mov	r2, r5
 8016f14:	4631      	mov	r1, r6
 8016f16:	6803      	ldr	r3, [r0, #0]
 8016f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f1a:	4798      	blx	r3
 8016f1c:	7b6b      	ldrb	r3, [r5, #13]
 8016f1e:	005b      	lsls	r3, r3, #1
 8016f20:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016f24:	7aab      	ldrb	r3, [r5, #10]
 8016f26:	4313      	orrs	r3, r2
 8016f28:	4418      	add	r0, r3
 8016f2a:	8ba3      	ldrh	r3, [r4, #28]
 8016f2c:	4418      	add	r0, r3
 8016f2e:	83a0      	strh	r0, [r4, #28]
 8016f30:	4620      	mov	r0, r4
 8016f32:	bd70      	pop	{r4, r5, r6, pc}

08016f34 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8016f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f38:	2400      	movs	r4, #0
 8016f3a:	b085      	sub	sp, #20
 8016f3c:	4681      	mov	r9, r0
 8016f3e:	4688      	mov	r8, r1
 8016f40:	4692      	mov	sl, r2
 8016f42:	469b      	mov	fp, r3
 8016f44:	4627      	mov	r7, r4
 8016f46:	4625      	mov	r5, r4
 8016f48:	4626      	mov	r6, r4
 8016f4a:	4554      	cmp	r4, sl
 8016f4c:	da2a      	bge.n	8016fa4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016f4e:	2300      	movs	r3, #0
 8016f50:	9303      	str	r3, [sp, #12]
 8016f52:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016f56:	429d      	cmp	r5, r3
 8016f58:	d004      	beq.n	8016f64 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8016f5a:	f242 030b 	movw	r3, #8203	; 0x200b
 8016f5e:	429d      	cmp	r5, r3
 8016f60:	bf18      	it	ne
 8016f62:	462f      	movne	r7, r5
 8016f64:	ab03      	add	r3, sp, #12
 8016f66:	4642      	mov	r2, r8
 8016f68:	4659      	mov	r1, fp
 8016f6a:	4648      	mov	r0, r9
 8016f6c:	f002 ff30 	bl	8019dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016f70:	4605      	mov	r5, r0
 8016f72:	b1b8      	cbz	r0, 8016fa4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016f74:	280a      	cmp	r0, #10
 8016f76:	d015      	beq.n	8016fa4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016f78:	9a03      	ldr	r2, [sp, #12]
 8016f7a:	b18a      	cbz	r2, 8016fa0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8016f7c:	7b50      	ldrb	r0, [r2, #13]
 8016f7e:	4639      	mov	r1, r7
 8016f80:	7a93      	ldrb	r3, [r2, #10]
 8016f82:	0040      	lsls	r0, r0, #1
 8016f84:	8895      	ldrh	r5, [r2, #4]
 8016f86:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8016f8a:	4303      	orrs	r3, r0
 8016f8c:	4640      	mov	r0, r8
 8016f8e:	9301      	str	r3, [sp, #4]
 8016f90:	f8d8 3000 	ldr.w	r3, [r8]
 8016f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f96:	4798      	blx	r3
 8016f98:	9b01      	ldr	r3, [sp, #4]
 8016f9a:	4418      	add	r0, r3
 8016f9c:	4406      	add	r6, r0
 8016f9e:	b2b6      	uxth	r6, r6
 8016fa0:	3401      	adds	r4, #1
 8016fa2:	e7d2      	b.n	8016f4a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8016fa4:	4630      	mov	r0, r6
 8016fa6:	b005      	add	sp, #20
 8016fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016fac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8016fac:	2a02      	cmp	r2, #2
 8016fae:	b530      	push	{r4, r5, lr}
 8016fb0:	d011      	beq.n	8016fd6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8016fb2:	2a03      	cmp	r2, #3
 8016fb4:	d01c      	beq.n	8016ff0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8016fb6:	2a01      	cmp	r2, #1
 8016fb8:	d10c      	bne.n	8016fd4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8016fba:	888b      	ldrh	r3, [r1, #4]
 8016fbc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8016fc0:	8801      	ldrh	r1, [r0, #0]
 8016fc2:	1a9b      	subs	r3, r3, r2
 8016fc4:	8844      	ldrh	r4, [r0, #2]
 8016fc6:	1a5b      	subs	r3, r3, r1
 8016fc8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016fcc:	8004      	strh	r4, [r0, #0]
 8016fce:	8043      	strh	r3, [r0, #2]
 8016fd0:	8081      	strh	r1, [r0, #4]
 8016fd2:	80c2      	strh	r2, [r0, #6]
 8016fd4:	bd30      	pop	{r4, r5, pc}
 8016fd6:	88cb      	ldrh	r3, [r1, #6]
 8016fd8:	88c2      	ldrh	r2, [r0, #6]
 8016fda:	1a9b      	subs	r3, r3, r2
 8016fdc:	8842      	ldrh	r2, [r0, #2]
 8016fde:	1a9b      	subs	r3, r3, r2
 8016fe0:	888a      	ldrh	r2, [r1, #4]
 8016fe2:	8881      	ldrh	r1, [r0, #4]
 8016fe4:	8043      	strh	r3, [r0, #2]
 8016fe6:	1a52      	subs	r2, r2, r1
 8016fe8:	8801      	ldrh	r1, [r0, #0]
 8016fea:	1a52      	subs	r2, r2, r1
 8016fec:	8002      	strh	r2, [r0, #0]
 8016fee:	e7f1      	b.n	8016fd4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8016ff0:	88cb      	ldrh	r3, [r1, #6]
 8016ff2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016ff6:	8841      	ldrh	r1, [r0, #2]
 8016ff8:	1a9b      	subs	r3, r3, r2
 8016ffa:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016ffe:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017002:	1a5b      	subs	r3, r3, r1
 8017004:	8045      	strh	r5, [r0, #2]
 8017006:	8082      	strh	r2, [r0, #4]
 8017008:	8003      	strh	r3, [r0, #0]
 801700a:	80c4      	strh	r4, [r0, #6]
 801700c:	e7e2      	b.n	8016fd4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801700e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801700e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017012:	b09f      	sub	sp, #124	; 0x7c
 8017014:	9116      	str	r1, [sp, #88]	; 0x58
 8017016:	9317      	str	r3, [sp, #92]	; 0x5c
 8017018:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801701a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801701c:	8809      	ldrh	r1, [r1, #0]
 801701e:	889b      	ldrh	r3, [r3, #4]
 8017020:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8017024:	440b      	add	r3, r1
 8017026:	9212      	str	r2, [sp, #72]	; 0x48
 8017028:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801702c:	b21b      	sxth	r3, r3
 801702e:	9011      	str	r0, [sp, #68]	; 0x44
 8017030:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8017034:	9310      	str	r3, [sp, #64]	; 0x40
 8017036:	f8d8 3000 	ldr.w	r3, [r8]
 801703a:	7a59      	ldrb	r1, [r3, #9]
 801703c:	7a1b      	ldrb	r3, [r3, #8]
 801703e:	9114      	str	r1, [sp, #80]	; 0x50
 8017040:	9315      	str	r3, [sp, #84]	; 0x54
 8017042:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017044:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017048:	2a00      	cmp	r2, #0
 801704a:	d067      	beq.n	801711c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801704c:	f898 3010 	ldrb.w	r3, [r8, #16]
 8017050:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017052:	2b04      	cmp	r3, #4
 8017054:	bf14      	ite	ne
 8017056:	2301      	movne	r3, #1
 8017058:	2302      	moveq	r3, #2
 801705a:	4413      	add	r3, r2
 801705c:	f04f 0900 	mov.w	r9, #0
 8017060:	930f      	str	r3, [sp, #60]	; 0x3c
 8017062:	464c      	mov	r4, r9
 8017064:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017068:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801706c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8017070:	4293      	cmp	r3, r2
 8017072:	f280 808c 	bge.w	801718e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8017076:	2300      	movs	r3, #0
 8017078:	931c      	str	r3, [sp, #112]	; 0x70
 801707a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801707e:	429c      	cmp	r4, r3
 8017080:	d006      	beq.n	8017090 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8017082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017084:	f242 020b 	movw	r2, #8203	; 0x200b
 8017088:	4294      	cmp	r4, r2
 801708a:	bf18      	it	ne
 801708c:	4623      	movne	r3, r4
 801708e:	930d      	str	r3, [sp, #52]	; 0x34
 8017090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017092:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8017094:	f8d8 2000 	ldr.w	r2, [r8]
 8017098:	428b      	cmp	r3, r1
 801709a:	db41      	blt.n	8017120 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801709c:	6813      	ldr	r3, [r2, #0]
 801709e:	4610      	mov	r0, r2
 80170a0:	695b      	ldr	r3, [r3, #20]
 80170a2:	4798      	blx	r3
 80170a4:	4604      	mov	r4, r0
 80170a6:	f8d8 0000 	ldr.w	r0, [r8]
 80170aa:	aa1d      	add	r2, sp, #116	; 0x74
 80170ac:	4621      	mov	r1, r4
 80170ae:	6803      	ldr	r3, [r0, #0]
 80170b0:	689e      	ldr	r6, [r3, #8]
 80170b2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80170b6:	47b0      	blx	r6
 80170b8:	901c      	str	r0, [sp, #112]	; 0x70
 80170ba:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80170be:	429c      	cmp	r4, r3
 80170c0:	f000 80ea 	beq.w	8017298 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80170c4:	f242 030b 	movw	r3, #8203	; 0x200b
 80170c8:	429c      	cmp	r4, r3
 80170ca:	f000 80e5 	beq.w	8017298 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80170ce:	2c00      	cmp	r4, #0
 80170d0:	f000 80f7 	beq.w	80172c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80170d4:	2c0a      	cmp	r4, #10
 80170d6:	d060      	beq.n	801719a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80170d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80170da:	b36a      	cbz	r2, 8017138 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 80170dc:	8894      	ldrh	r4, [r2, #4]
 80170de:	f1bb 0f00 	cmp.w	fp, #0
 80170e2:	d03b      	beq.n	801715c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 80170e4:	f892 900d 	ldrb.w	r9, [r2, #13]
 80170e8:	f1bb 0f01 	cmp.w	fp, #1
 80170ec:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80170f0:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80170f4:	f892 900a 	ldrb.w	r9, [r2, #10]
 80170f8:	ea49 0903 	orr.w	r9, r9, r3
 80170fc:	d134      	bne.n	8017168 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 80170fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017100:	eba5 0509 	sub.w	r5, r5, r9
 8017104:	2b00      	cmp	r3, #0
 8017106:	d14f      	bne.n	80171a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8017108:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801710a:	eb09 0305 	add.w	r3, r9, r5
 801710e:	4413      	add	r3, r2
 8017110:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8017112:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017116:	4293      	cmp	r3, r2
 8017118:	da51      	bge.n	80171be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801711a:	e038      	b.n	801718e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801711c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801711e:	e79d      	b.n	801705c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8017120:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8017124:	4659      	mov	r1, fp
 8017126:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8017128:	9301      	str	r3, [sp, #4]
 801712a:	ab1d      	add	r3, sp, #116	; 0x74
 801712c:	9300      	str	r3, [sp, #0]
 801712e:	ab1c      	add	r3, sp, #112	; 0x70
 8017130:	f002 fea6 	bl	8019e80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8017134:	4604      	mov	r4, r0
 8017136:	e7c0      	b.n	80170ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8017138:	f8d8 0000 	ldr.w	r0, [r8]
 801713c:	6803      	ldr	r3, [r0, #0]
 801713e:	691b      	ldr	r3, [r3, #16]
 8017140:	4798      	blx	r3
 8017142:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017146:	4298      	cmp	r0, r3
 8017148:	f000 80a6 	beq.w	8017298 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801714c:	f242 030b 	movw	r3, #8203	; 0x200b
 8017150:	4298      	cmp	r0, r3
 8017152:	f000 80a1 	beq.w	8017298 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8017156:	f1bb 0f00 	cmp.w	fp, #0
 801715a:	d100      	bne.n	801715e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801715c:	444d      	add	r5, r9
 801715e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017160:	2a00      	cmp	r2, #0
 8017162:	d1bf      	bne.n	80170e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8017164:	4691      	mov	r9, r2
 8017166:	e097      	b.n	8017298 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8017168:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801716a:	2b00      	cmp	r3, #0
 801716c:	f000 80ab 	beq.w	80172c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8017170:	f1bb 0f00 	cmp.w	fp, #0
 8017174:	d118      	bne.n	80171a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8017176:	f8d8 0000 	ldr.w	r0, [r8]
 801717a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801717c:	6803      	ldr	r3, [r0, #0]
 801717e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017180:	4798      	blx	r3
 8017182:	4405      	add	r5, r0
 8017184:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017186:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017188:	1aeb      	subs	r3, r5, r3
 801718a:	4293      	cmp	r3, r2
 801718c:	dd17      	ble.n	80171be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801718e:	2c00      	cmp	r4, #0
 8017190:	f000 8097 	beq.w	80172c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8017194:	2c0a      	cmp	r4, #10
 8017196:	f040 8085 	bne.w	80172a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801719a:	240a      	movs	r4, #10
 801719c:	fab4 f084 	clz	r0, r4
 80171a0:	0940      	lsrs	r0, r0, #5
 80171a2:	b01f      	add	sp, #124	; 0x7c
 80171a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171a8:	f8d8 0000 	ldr.w	r0, [r8]
 80171ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80171ae:	6803      	ldr	r3, [r0, #0]
 80171b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171b2:	4798      	blx	r3
 80171b4:	f1bb 0f01 	cmp.w	fp, #1
 80171b8:	eba5 0500 	sub.w	r5, r5, r0
 80171bc:	d0a4      	beq.n	8017108 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80171be:	981c      	ldr	r0, [sp, #112]	; 0x70
 80171c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80171c2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80171c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80171ca:	7b43      	ldrb	r3, [r0, #13]
 80171cc:	4429      	add	r1, r5
 80171ce:	015b      	lsls	r3, r3, #5
 80171d0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80171d4:	7983      	ldrb	r3, [r0, #6]
 80171d6:	4313      	orrs	r3, r2
 80171d8:	440b      	add	r3, r1
 80171da:	42b3      	cmp	r3, r6
 80171dc:	db5c      	blt.n	8017298 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80171de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80171e0:	4299      	cmp	r1, r3
 80171e2:	da59      	bge.n	8017298 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80171e4:	f8d8 0000 	ldr.w	r0, [r8]
 80171e8:	42ae      	cmp	r6, r5
 80171ea:	6803      	ldr	r3, [r0, #0]
 80171ec:	bfcc      	ite	gt
 80171ee:	1b76      	subgt	r6, r6, r5
 80171f0:	2600      	movle	r6, #0
 80171f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171f4:	bfc8      	it	gt
 80171f6:	b2b6      	uxthgt	r6, r6
 80171f8:	4798      	blx	r3
 80171fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80171fc:	7b5a      	ldrb	r2, [r3, #13]
 80171fe:	00d1      	lsls	r1, r2, #3
 8017200:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8017204:	7a19      	ldrb	r1, [r3, #8]
 8017206:	4339      	orrs	r1, r7
 8017208:	0657      	lsls	r7, r2, #25
 801720a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801720c:	bf48      	it	mi
 801720e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8017212:	4407      	add	r7, r0
 8017214:	bf48      	it	mi
 8017216:	b209      	sxthmi	r1, r1
 8017218:	1a7f      	subs	r7, r7, r1
 801721a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801721c:	b2bf      	uxth	r7, r7
 801721e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8017222:	fa0f fa87 	sxth.w	sl, r7
 8017226:	4551      	cmp	r1, sl
 8017228:	dd3a      	ble.n	80172a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801722a:	0112      	lsls	r2, r2, #4
 801722c:	79d8      	ldrb	r0, [r3, #7]
 801722e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017232:	4302      	orrs	r2, r0
 8017234:	4492      	add	sl, r2
 8017236:	4551      	cmp	r1, sl
 8017238:	dc2e      	bgt.n	8017298 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801723a:	1bcf      	subs	r7, r1, r7
 801723c:	468a      	mov	sl, r1
 801723e:	b2bf      	uxth	r7, r7
 8017240:	9319      	str	r3, [sp, #100]	; 0x64
 8017242:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017244:	f8d8 0000 	ldr.w	r0, [r8]
 8017248:	681a      	ldr	r2, [r3, #0]
 801724a:	6801      	ldr	r1, [r0, #0]
 801724c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801724e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017250:	9313      	str	r3, [sp, #76]	; 0x4c
 8017252:	9218      	str	r2, [sp, #96]	; 0x60
 8017254:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8017256:	4788      	blx	r1
 8017258:	f898 1006 	ldrb.w	r1, [r8, #6]
 801725c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801725e:	910b      	str	r1, [sp, #44]	; 0x2c
 8017260:	f898 100e 	ldrb.w	r1, [r8, #14]
 8017264:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017266:	910a      	str	r1, [sp, #40]	; 0x28
 8017268:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801726c:	9109      	str	r1, [sp, #36]	; 0x24
 801726e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8017272:	9305      	str	r3, [sp, #20]
 8017274:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017276:	9206      	str	r2, [sp, #24]
 8017278:	e9cd a601 	strd	sl, r6, [sp, #4]
 801727c:	442e      	add	r6, r5
 801727e:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8017282:	b236      	sxth	r6, r6
 8017284:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017286:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801728a:	9600      	str	r6, [sp, #0]
 801728c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801728e:	681a      	ldr	r2, [r3, #0]
 8017290:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017292:	685b      	ldr	r3, [r3, #4]
 8017294:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017296:	47b0      	blx	r6
 8017298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801729a:	3301      	adds	r3, #1
 801729c:	930e      	str	r3, [sp, #56]	; 0x38
 801729e:	e6e5      	b.n	801706c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 80172a0:	2700      	movs	r7, #0
 80172a2:	e7cd      	b.n	8017240 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 80172a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80172a6:	3501      	adds	r5, #1
 80172a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80172aa:	429d      	cmp	r5, r3
 80172ac:	f6bf af76 	bge.w	801719c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80172b0:	4659      	mov	r1, fp
 80172b2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80172b4:	f7f0 feb8 	bl	8008028 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80172b8:	4604      	mov	r4, r0
 80172ba:	b110      	cbz	r0, 80172c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80172bc:	280a      	cmp	r0, #10
 80172be:	d1f2      	bne.n	80172a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 80172c0:	e76b      	b.n	801719a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80172c2:	2400      	movs	r4, #0
 80172c4:	e76a      	b.n	801719c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80172c6:	f1bb 0f00 	cmp.w	fp, #0
 80172ca:	f43f af5b 	beq.w	8017184 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80172ce:	e776      	b.n	80171be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

080172d0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80172d0:	b530      	push	{r4, r5, lr}
 80172d2:	8a44      	ldrh	r4, [r0, #18]
 80172d4:	8ac5      	ldrh	r5, [r0, #22]
 80172d6:	82c3      	strh	r3, [r0, #22]
 80172d8:	442c      	add	r4, r5
 80172da:	1ae4      	subs	r4, r4, r3
 80172dc:	8b03      	ldrh	r3, [r0, #24]
 80172de:	8244      	strh	r4, [r0, #18]
 80172e0:	8a84      	ldrh	r4, [r0, #20]
 80172e2:	4422      	add	r2, r4
 80172e4:	440c      	add	r4, r1
 80172e6:	1a59      	subs	r1, r3, r1
 80172e8:	8342      	strh	r2, [r0, #26]
 80172ea:	8284      	strh	r4, [r0, #20]
 80172ec:	8301      	strh	r1, [r0, #24]
 80172ee:	bd30      	pop	{r4, r5, pc}

080172f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80172f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172f4:	7a43      	ldrb	r3, [r0, #9]
 80172f6:	b087      	sub	sp, #28
 80172f8:	4604      	mov	r4, r0
 80172fa:	460f      	mov	r7, r1
 80172fc:	1eda      	subs	r2, r3, #3
 80172fe:	b2d2      	uxtb	r2, r2
 8017300:	2900      	cmp	r1, #0
 8017302:	d036      	beq.n	8017372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8017304:	2a01      	cmp	r2, #1
 8017306:	d932      	bls.n	801736e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8017308:	1e58      	subs	r0, r3, #1
 801730a:	f1d0 0b00 	rsbs	fp, r0, #0
 801730e:	eb4b 0b00 	adc.w	fp, fp, r0
 8017312:	1e99      	subs	r1, r3, #2
 8017314:	424b      	negs	r3, r1
 8017316:	414b      	adcs	r3, r1
 8017318:	9303      	str	r3, [sp, #12]
 801731a:	2300      	movs	r3, #0
 801731c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8017320:	2500      	movs	r5, #0
 8017322:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8017326:	46a9      	mov	r9, r5
 8017328:	8265      	strh	r5, [r4, #18]
 801732a:	82a5      	strh	r5, [r4, #20]
 801732c:	2300      	movs	r3, #0
 801732e:	9305      	str	r3, [sp, #20]
 8017330:	8823      	ldrh	r3, [r4, #0]
 8017332:	2b20      	cmp	r3, #32
 8017334:	d02b      	beq.n	801738e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8017336:	eba3 020a 	sub.w	r2, r3, sl
 801733a:	4256      	negs	r6, r2
 801733c:	4156      	adcs	r6, r2
 801733e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8017342:	4293      	cmp	r3, r2
 8017344:	d004      	beq.n	8017350 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8017346:	4553      	cmp	r3, sl
 8017348:	bf16      	itet	ne
 801734a:	4699      	movne	r9, r3
 801734c:	2601      	moveq	r6, #1
 801734e:	2600      	movne	r6, #0
 8017350:	ab05      	add	r3, sp, #20
 8017352:	68e2      	ldr	r2, [r4, #12]
 8017354:	7a21      	ldrb	r1, [r4, #8]
 8017356:	6860      	ldr	r0, [r4, #4]
 8017358:	f002 fd3a 	bl	8019dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801735c:	8020      	strh	r0, [r4, #0]
 801735e:	b9c8      	cbnz	r0, 8017394 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8017360:	8b22      	ldrh	r2, [r4, #24]
 8017362:	2300      	movs	r3, #0
 8017364:	4611      	mov	r1, r2
 8017366:	4620      	mov	r0, r4
 8017368:	f7ff ffb2 	bl	80172d0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801736c:	e066      	b.n	801743c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801736e:	468b      	mov	fp, r1
 8017370:	e7cf      	b.n	8017312 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8017372:	3b01      	subs	r3, #1
 8017374:	2a01      	cmp	r2, #1
 8017376:	9103      	str	r1, [sp, #12]
 8017378:	468b      	mov	fp, r1
 801737a:	bf8c      	ite	hi
 801737c:	2200      	movhi	r2, #0
 801737e:	2201      	movls	r2, #1
 8017380:	2b01      	cmp	r3, #1
 8017382:	9202      	str	r2, [sp, #8]
 8017384:	bf8c      	ite	hi
 8017386:	2300      	movhi	r3, #0
 8017388:	2301      	movls	r3, #1
 801738a:	9301      	str	r3, [sp, #4]
 801738c:	e7c8      	b.n	8017320 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801738e:	4699      	mov	r9, r3
 8017390:	2601      	movs	r6, #1
 8017392:	e7dd      	b.n	8017350 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8017394:	8ae3      	ldrh	r3, [r4, #22]
 8017396:	280a      	cmp	r0, #10
 8017398:	f103 0301 	add.w	r3, r3, #1
 801739c:	82e3      	strh	r3, [r4, #22]
 801739e:	d0df      	beq.n	8017360 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 80173a0:	9a05      	ldr	r2, [sp, #20]
 80173a2:	bb42      	cbnz	r2, 80173f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 80173a4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80173a8:	4298      	cmp	r0, r3
 80173aa:	d001      	beq.n	80173b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80173ac:	4550      	cmp	r0, sl
 80173ae:	d1bd      	bne.n	801732c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80173b0:	8823      	ldrh	r3, [r4, #0]
 80173b2:	8b21      	ldrh	r1, [r4, #24]
 80173b4:	2b20      	cmp	r3, #32
 80173b6:	d001      	beq.n	80173bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 80173b8:	4553      	cmp	r3, sl
 80173ba:	d131      	bne.n	8017420 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 80173bc:	2e00      	cmp	r6, #0
 80173be:	bf0a      	itet	eq
 80173c0:	460d      	moveq	r5, r1
 80173c2:	4630      	movne	r0, r6
 80173c4:	2001      	moveq	r0, #1
 80173c6:	440a      	add	r2, r1
 80173c8:	8aa3      	ldrh	r3, [r4, #20]
 80173ca:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80173ce:	b292      	uxth	r2, r2
 80173d0:	8322      	strh	r2, [r4, #24]
 80173d2:	4413      	add	r3, r2
 80173d4:	2f00      	cmp	r7, #0
 80173d6:	d03a      	beq.n	801744e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 80173d8:	f1bb 0f00 	cmp.w	fp, #0
 80173dc:	d102      	bne.n	80173e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 80173de:	9903      	ldr	r1, [sp, #12]
 80173e0:	b301      	cbz	r1, 8017424 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80173e2:	b1f8      	cbz	r0, 8017424 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80173e4:	8ba1      	ldrh	r1, [r4, #28]
 80173e6:	4419      	add	r1, r3
 80173e8:	458c      	cmp	ip, r1
 80173ea:	da2a      	bge.n	8017442 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80173ec:	8a61      	ldrh	r1, [r4, #18]
 80173ee:	b341      	cbz	r1, 8017442 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80173f0:	4563      	cmp	r3, ip
 80173f2:	dd9b      	ble.n	801732c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80173f4:	e01c      	b.n	8017430 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 80173f6:	8893      	ldrh	r3, [r2, #4]
 80173f8:	4649      	mov	r1, r9
 80173fa:	8023      	strh	r3, [r4, #0]
 80173fc:	f892 800d 	ldrb.w	r8, [r2, #13]
 8017400:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8017404:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8017408:	f892 800a 	ldrb.w	r8, [r2, #10]
 801740c:	ea48 0800 	orr.w	r8, r8, r0
 8017410:	68e0      	ldr	r0, [r4, #12]
 8017412:	6803      	ldr	r3, [r0, #0]
 8017414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017416:	4798      	blx	r3
 8017418:	eb08 0200 	add.w	r2, r8, r0
 801741c:	b292      	uxth	r2, r2
 801741e:	e7c7      	b.n	80173b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8017420:	2000      	movs	r0, #0
 8017422:	e7d0      	b.n	80173c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8017424:	4563      	cmp	r3, ip
 8017426:	dd81      	ble.n	801732c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017428:	8a63      	ldrh	r3, [r4, #18]
 801742a:	2b00      	cmp	r3, #0
 801742c:	f43f af7e 	beq.w	801732c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017430:	2301      	movs	r3, #1
 8017432:	8ba2      	ldrh	r2, [r4, #28]
 8017434:	77a3      	strb	r3, [r4, #30]
 8017436:	8b63      	ldrh	r3, [r4, #26]
 8017438:	4413      	add	r3, r2
 801743a:	8363      	strh	r3, [r4, #26]
 801743c:	b007      	add	sp, #28
 801743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017442:	2300      	movs	r3, #0
 8017444:	4611      	mov	r1, r2
 8017446:	4620      	mov	r0, r4
 8017448:	f7ff ff42 	bl	80172d0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801744c:	e76e      	b.n	801732c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801744e:	4563      	cmp	r3, ip
 8017450:	dd14      	ble.n	801747c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8017452:	9b02      	ldr	r3, [sp, #8]
 8017454:	b113      	cbz	r3, 801745c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8017456:	2301      	movs	r3, #1
 8017458:	460a      	mov	r2, r1
 801745a:	e783      	b.n	8017364 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801745c:	9b01      	ldr	r3, [sp, #4]
 801745e:	2b00      	cmp	r3, #0
 8017460:	f43f af64 	beq.w	801732c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017464:	2800      	cmp	r0, #0
 8017466:	f47f af61 	bne.w	801732c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801746a:	b116      	cbz	r6, 8017472 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801746c:	2301      	movs	r3, #1
 801746e:	462a      	mov	r2, r5
 8017470:	e779      	b.n	8017366 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8017472:	8a63      	ldrh	r3, [r4, #18]
 8017474:	2b00      	cmp	r3, #0
 8017476:	f43f af59 	beq.w	801732c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801747a:	e7df      	b.n	801743c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801747c:	2800      	cmp	r0, #0
 801747e:	f47f af55 	bne.w	801732c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017482:	2e00      	cmp	r6, #0
 8017484:	f43f af52 	beq.w	801732c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017488:	2301      	movs	r3, #1
 801748a:	462a      	mov	r2, r5
 801748c:	e7db      	b.n	8017446 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801748e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801748e:	b530      	push	{r4, r5, lr}
 8017490:	4605      	mov	r5, r0
 8017492:	b08b      	sub	sp, #44	; 0x2c
 8017494:	b191      	cbz	r1, 80174bc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8017496:	2401      	movs	r4, #1
 8017498:	e9cd 3100 	strd	r3, r1, [sp]
 801749c:	4613      	mov	r3, r2
 801749e:	4601      	mov	r1, r0
 80174a0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80174a4:	a802      	add	r0, sp, #8
 80174a6:	f7ff fd0b 	bl	8016ec0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80174aa:	2100      	movs	r1, #0
 80174ac:	a802      	add	r0, sp, #8
 80174ae:	f7ff ff1f 	bl	80172f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80174b2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80174b6:	b163      	cbz	r3, 80174d2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80174b8:	3401      	adds	r4, #1
 80174ba:	e7f6      	b.n	80174aa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 80174bc:	2401      	movs	r4, #1
 80174be:	f002 fd7f 	bl	8019fc0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80174c2:	280a      	cmp	r0, #10
 80174c4:	4628      	mov	r0, r5
 80174c6:	bf08      	it	eq
 80174c8:	3401      	addeq	r4, #1
 80174ca:	f002 fd79 	bl	8019fc0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80174ce:	2800      	cmp	r0, #0
 80174d0:	d1f7      	bne.n	80174c2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80174d2:	b2a0      	uxth	r0, r4
 80174d4:	b00b      	add	sp, #44	; 0x2c
 80174d6:	bd30      	pop	{r4, r5, pc}

080174d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80174d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174dc:	b0df      	sub	sp, #380	; 0x17c
 80174de:	4689      	mov	r9, r1
 80174e0:	461c      	mov	r4, r3
 80174e2:	f8dd a1a0 	ldr.w	sl, [sp, #416]	; 0x1a0
 80174e6:	900a      	str	r0, [sp, #40]	; 0x28
 80174e8:	f1ba 0f00 	cmp.w	sl, #0
 80174ec:	f000 80b1 	beq.w	8017652 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	f000 80ad 	beq.w	8017652 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80174f8:	7ba3      	ldrb	r3, [r4, #14]
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	f000 80a9 	beq.w	8017652 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8017500:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8017504:	6810      	ldr	r0, [r2, #0]
 8017506:	6851      	ldr	r1, [r2, #4]
 8017508:	2500      	movs	r5, #0
 801750a:	4643      	mov	r3, r8
 801750c:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8017510:	950f      	str	r5, [sp, #60]	; 0x3c
 8017512:	af19      	add	r7, sp, #100	; 0x64
 8017514:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017518:	79a2      	ldrb	r2, [r4, #6]
 801751a:	c303      	stmia	r3!, {r0, r1}
 801751c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8017520:	a90f      	add	r1, sp, #60	; 0x3c
 8017522:	4640      	mov	r0, r8
 8017524:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8017528:	f7ff fd40 	bl	8016fac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801752c:	a90f      	add	r1, sp, #60	; 0x3c
 801752e:	79a2      	ldrb	r2, [r4, #6]
 8017530:	4608      	mov	r0, r1
 8017532:	f7ff fd3b 	bl	8016fac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017536:	4638      	mov	r0, r7
 8017538:	f002 f901 	bl	801973e <_ZN8touchgfx12TextProviderC1Ev>
 801753c:	6820      	ldr	r0, [r4, #0]
 801753e:	6803      	ldr	r3, [r0, #0]
 8017540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017542:	4798      	blx	r3
 8017544:	4606      	mov	r6, r0
 8017546:	6820      	ldr	r0, [r4, #0]
 8017548:	6803      	ldr	r3, [r0, #0]
 801754a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801754c:	4798      	blx	r3
 801754e:	4633      	mov	r3, r6
 8017550:	9000      	str	r0, [sp, #0]
 8017552:	4651      	mov	r1, sl
 8017554:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8017556:	4638      	mov	r0, r7
 8017558:	f002 f93e 	bl	80197d8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801755c:	7923      	ldrb	r3, [r4, #4]
 801755e:	6820      	ldr	r0, [r4, #0]
 8017560:	9308      	str	r3, [sp, #32]
 8017562:	6803      	ldr	r3, [r0, #0]
 8017564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017566:	4798      	blx	r3
 8017568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801756c:	181e      	adds	r6, r3, r0
 801756e:	42ae      	cmp	r6, r5
 8017570:	dd06      	ble.n	8017580 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8017572:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8017576:	4282      	cmp	r2, r0
 8017578:	bfa4      	itt	ge
 801757a:	189d      	addge	r5, r3, r2
 801757c:	fb95 f5f6 	sdivge	r5, r5, r6
 8017580:	a830      	add	r0, sp, #192	; 0xc0
 8017582:	f002 f8dc 	bl	801973e <_ZN8touchgfx12TextProviderC1Ev>
 8017586:	7c23      	ldrb	r3, [r4, #16]
 8017588:	b17b      	cbz	r3, 80175aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801758a:	6820      	ldr	r0, [r4, #0]
 801758c:	6803      	ldr	r3, [r0, #0]
 801758e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017590:	4798      	blx	r3
 8017592:	4683      	mov	fp, r0
 8017594:	6820      	ldr	r0, [r4, #0]
 8017596:	6803      	ldr	r3, [r0, #0]
 8017598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801759a:	4798      	blx	r3
 801759c:	465b      	mov	r3, fp
 801759e:	9000      	str	r0, [sp, #0]
 80175a0:	4651      	mov	r1, sl
 80175a2:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 80175a4:	a830      	add	r0, sp, #192	; 0xc0
 80175a6:	f002 f917 	bl	80197d8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80175aa:	7c21      	ldrb	r1, [r4, #16]
 80175ac:	a811      	add	r0, sp, #68	; 0x44
 80175ae:	7963      	ldrb	r3, [r4, #5]
 80175b0:	9101      	str	r1, [sp, #4]
 80175b2:	6821      	ldr	r1, [r4, #0]
 80175b4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80175b8:	9100      	str	r1, [sp, #0]
 80175ba:	a930      	add	r1, sp, #192	; 0xc0
 80175bc:	f7ff fc80 	bl	8016ec0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80175c0:	7c23      	ldrb	r3, [r4, #16]
 80175c2:	b9bb      	cbnz	r3, 80175f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11c>
 80175c4:	fa1f fa86 	uxth.w	sl, r6
 80175c8:	2d00      	cmp	r5, #0
 80175ca:	dd45      	ble.n	8017658 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80175cc:	4638      	mov	r0, r7
 80175ce:	f002 fcf7 	bl	8019fc0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80175d2:	2800      	cmp	r0, #0
 80175d4:	d03d      	beq.n	8017652 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80175d6:	280a      	cmp	r0, #10
 80175d8:	d1f6      	bne.n	80175c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 80175da:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80175de:	3d01      	subs	r5, #1
 80175e0:	4453      	add	r3, sl
 80175e2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80175e6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80175ea:	eba3 030a 	sub.w	r3, r3, sl
 80175ee:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80175f2:	e7e9      	b.n	80175c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 80175f4:	0073      	lsls	r3, r6, #1
 80175f6:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80175fa:	fa1f fa86 	uxth.w	sl, r6
 80175fe:	9309      	str	r3, [sp, #36]	; 0x24
 8017600:	2d00      	cmp	r5, #0
 8017602:	dd29      	ble.n	8017658 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017604:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8017608:	a811      	add	r0, sp, #68	; 0x44
 801760a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801760c:	428b      	cmp	r3, r1
 801760e:	bfd4      	ite	le
 8017610:	2100      	movle	r1, #0
 8017612:	2101      	movgt	r1, #1
 8017614:	f7ff fe6c 	bl	80172f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017618:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801761c:	3b01      	subs	r3, #1
 801761e:	b29b      	uxth	r3, r3
 8017620:	455b      	cmp	r3, fp
 8017622:	930b      	str	r3, [sp, #44]	; 0x2c
 8017624:	d005      	beq.n	8017632 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15a>
 8017626:	7961      	ldrb	r1, [r4, #5]
 8017628:	4638      	mov	r0, r7
 801762a:	f7f0 fcfd 	bl	8008028 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801762e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017630:	e7f4      	b.n	801761c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8017632:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017636:	3d01      	subs	r5, #1
 8017638:	4453      	add	r3, sl
 801763a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801763e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8017642:	eba3 030a 	sub.w	r3, r3, sl
 8017646:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801764a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801764e:	2b00      	cmp	r3, #0
 8017650:	d1d6      	bne.n	8017600 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x128>
 8017652:	b05f      	add	sp, #380	; 0x17c
 8017654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017658:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801765c:	ad47      	add	r5, sp, #284	; 0x11c
 801765e:	f04f 0b00 	mov.w	fp, #0
 8017662:	7c23      	ldrb	r3, [r4, #16]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d067      	beq.n	8017738 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8017668:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801766c:	a811      	add	r0, sp, #68	; 0x44
 801766e:	458a      	cmp	sl, r1
 8017670:	bfd4      	ite	le
 8017672:	2100      	movle	r1, #0
 8017674:	2101      	movgt	r1, #1
 8017676:	f7ff fe3b 	bl	80172f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801767a:	9b08      	ldr	r3, [sp, #32]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d056      	beq.n	801772e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8017680:	7c23      	ldrb	r3, [r4, #16]
 8017682:	225c      	movs	r2, #92	; 0x5c
 8017684:	4639      	mov	r1, r7
 8017686:	4628      	mov	r0, r5
 8017688:	9309      	str	r3, [sp, #36]	; 0x24
 801768a:	f00d fc39 	bl	8024f00 <memcpy>
 801768e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017690:	2b00      	cmp	r3, #0
 8017692:	d059      	beq.n	8017748 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8017694:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8017698:	7922      	ldrb	r2, [r4, #4]
 801769a:	2a01      	cmp	r2, #1
 801769c:	d13d      	bne.n	801771a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801769e:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 80176a2:	1ac0      	subs	r0, r0, r3
 80176a4:	2302      	movs	r3, #2
 80176a6:	fb90 f0f3 	sdiv	r0, r0, r3
 80176aa:	b200      	sxth	r0, r0
 80176ac:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80176b0:	4418      	add	r0, r3
 80176b2:	7c23      	ldrb	r3, [r4, #16]
 80176b4:	f8ad 011c 	strh.w	r0, [sp, #284]	; 0x11c
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d03a      	beq.n	8017732 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 80176bc:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 80176c0:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 80176c4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80176c8:	9500      	str	r5, [sp, #0]
 80176ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80176cc:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80176d0:	e9cd b703 	strd	fp, r7, [sp, #12]
 80176d4:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80176d8:	464a      	mov	r2, r9
 80176da:	2100      	movs	r1, #0
 80176dc:	f7ff fc97 	bl	801700e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80176e0:	2800      	cmp	r0, #0
 80176e2:	d1b6      	bne.n	8017652 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80176e4:	b2b2      	uxth	r2, r6
 80176e6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80176ea:	4611      	mov	r1, r2
 80176ec:	4413      	add	r3, r2
 80176ee:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80176f2:	b21b      	sxth	r3, r3
 80176f4:	1a52      	subs	r2, r2, r1
 80176f6:	7c21      	ldrb	r1, [r4, #16]
 80176f8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80176fc:	b212      	sxth	r2, r2
 80176fe:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8017702:	b109      	cbz	r1, 8017708 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 8017704:	42b2      	cmp	r2, r6
 8017706:	dba4      	blt.n	8017652 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8017708:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801770c:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8017710:	440a      	add	r2, r1
 8017712:	b212      	sxth	r2, r2
 8017714:	4293      	cmp	r3, r2
 8017716:	dda4      	ble.n	8017662 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 8017718:	e79b      	b.n	8017652 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801771a:	2a02      	cmp	r2, #2
 801771c:	d105      	bne.n	801772a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801771e:	7be2      	ldrb	r2, [r4, #15]
 8017720:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8017724:	1a80      	subs	r0, r0, r2
 8017726:	1ac0      	subs	r0, r0, r3
 8017728:	e7bf      	b.n	80176aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d2>
 801772a:	2000      	movs	r0, #0
 801772c:	e7be      	b.n	80176ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801772e:	7be0      	ldrb	r0, [r4, #15]
 8017730:	e7bc      	b.n	80176ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8017732:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017736:	e7c3      	b.n	80176c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8017738:	9b08      	ldr	r3, [sp, #32]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d0f7      	beq.n	801772e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801773e:	225c      	movs	r2, #92	; 0x5c
 8017740:	4639      	mov	r1, r7
 8017742:	4628      	mov	r0, r5
 8017744:	f00d fbdc 	bl	8024f00 <memcpy>
 8017748:	2300      	movs	r3, #0
 801774a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801774e:	6821      	ldr	r1, [r4, #0]
 8017750:	4628      	mov	r0, r5
 8017752:	f7ff fbef 	bl	8016f34 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017756:	b203      	sxth	r3, r0
 8017758:	e79e      	b.n	8017698 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>

0801775a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801775a:	2b02      	cmp	r3, #2
 801775c:	b510      	push	{r4, lr}
 801775e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017762:	d00b      	beq.n	801777c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8017764:	2b03      	cmp	r3, #3
 8017766:	d00e      	beq.n	8017786 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8017768:	2b01      	cmp	r3, #1
 801776a:	d001      	beq.n	8017770 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801776c:	1860      	adds	r0, r4, r1
 801776e:	bd10      	pop	{r4, pc}
 8017770:	8880      	ldrh	r0, [r0, #4]
 8017772:	4420      	add	r0, r4
 8017774:	b200      	sxth	r0, r0
 8017776:	1a80      	subs	r0, r0, r2
 8017778:	3801      	subs	r0, #1
 801777a:	e7f8      	b.n	801776e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801777c:	8880      	ldrh	r0, [r0, #4]
 801777e:	4420      	add	r0, r4
 8017780:	b200      	sxth	r0, r0
 8017782:	1a40      	subs	r0, r0, r1
 8017784:	e7f8      	b.n	8017778 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8017786:	18a0      	adds	r0, r4, r2
 8017788:	e7f1      	b.n	801776e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801778a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801778a:	2b02      	cmp	r3, #2
 801778c:	b510      	push	{r4, lr}
 801778e:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8017792:	d006      	beq.n	80177a2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8017794:	2b03      	cmp	r3, #3
 8017796:	d00a      	beq.n	80177ae <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8017798:	2b01      	cmp	r3, #1
 801779a:	bf14      	ite	ne
 801779c:	18a0      	addne	r0, r4, r2
 801779e:	1860      	addeq	r0, r4, r1
 80177a0:	bd10      	pop	{r4, pc}
 80177a2:	88c0      	ldrh	r0, [r0, #6]
 80177a4:	4420      	add	r0, r4
 80177a6:	b200      	sxth	r0, r0
 80177a8:	1a80      	subs	r0, r0, r2
 80177aa:	3801      	subs	r0, #1
 80177ac:	e7f8      	b.n	80177a0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80177ae:	88c0      	ldrh	r0, [r0, #6]
 80177b0:	4420      	add	r0, r4
 80177b2:	b200      	sxth	r0, r0
 80177b4:	1a40      	subs	r0, r0, r1
 80177b6:	e7f8      	b.n	80177aa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

080177b8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80177b8:	4b01      	ldr	r3, [pc, #4]	; (80177c0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80177ba:	2200      	movs	r2, #0
 80177bc:	601a      	str	r2, [r3, #0]
 80177be:	4770      	bx	lr
 80177c0:	20056708 	.word	0x20056708

080177c4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80177c4:	4603      	mov	r3, r0
 80177c6:	b1c8      	cbz	r0, 80177fc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80177c8:	0c02      	lsrs	r2, r0, #16
 80177ca:	0412      	lsls	r2, r2, #16
 80177cc:	b9a2      	cbnz	r2, 80177f8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80177ce:	0403      	lsls	r3, r0, #16
 80177d0:	2010      	movs	r0, #16
 80177d2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80177d6:	bf04      	itt	eq
 80177d8:	021b      	lsleq	r3, r3, #8
 80177da:	3008      	addeq	r0, #8
 80177dc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80177e0:	bf04      	itt	eq
 80177e2:	011b      	lsleq	r3, r3, #4
 80177e4:	3004      	addeq	r0, #4
 80177e6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80177ea:	bf04      	itt	eq
 80177ec:	009b      	lsleq	r3, r3, #2
 80177ee:	3002      	addeq	r0, #2
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	db04      	blt.n	80177fe <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80177f4:	3001      	adds	r0, #1
 80177f6:	4770      	bx	lr
 80177f8:	2000      	movs	r0, #0
 80177fa:	e7ea      	b.n	80177d2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80177fc:	2020      	movs	r0, #32
 80177fe:	4770      	bx	lr

08017800 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8017800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017804:	b087      	sub	sp, #28
 8017806:	4681      	mov	r9, r0
 8017808:	4698      	mov	r8, r3
 801780a:	4610      	mov	r0, r2
 801780c:	460d      	mov	r5, r1
 801780e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8017812:	b981      	cbnz	r1, 8017836 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8017814:	b14b      	cbz	r3, 801782a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8017816:	460b      	mov	r3, r1
 8017818:	464a      	mov	r2, r9
 801781a:	4641      	mov	r1, r8
 801781c:	e9cd 4700 	strd	r4, r7, [sp]
 8017820:	f7ff ffee 	bl	8017800 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017824:	b007      	add	sp, #28
 8017826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801782a:	f04f 33ff 	mov.w	r3, #4294967295
 801782e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017832:	603b      	str	r3, [r7, #0]
 8017834:	e7f6      	b.n	8017824 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017836:	fa32 fa01 	lsrs.w	sl, r2, r1
 801783a:	d107      	bne.n	801784c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801783c:	fb09 f602 	mul.w	r6, r9, r2
 8017840:	fbb6 f0f4 	udiv	r0, r6, r4
 8017844:	fb04 6610 	mls	r6, r4, r0, r6
 8017848:	603e      	str	r6, [r7, #0]
 801784a:	e7eb      	b.n	8017824 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801784c:	2601      	movs	r6, #1
 801784e:	fa09 fb01 	lsl.w	fp, r9, r1
 8017852:	408e      	lsls	r6, r1
 8017854:	fbbb f3f4 	udiv	r3, fp, r4
 8017858:	3e01      	subs	r6, #1
 801785a:	9302      	str	r3, [sp, #8]
 801785c:	fb0a f303 	mul.w	r3, sl, r3
 8017860:	4016      	ands	r6, r2
 8017862:	9303      	str	r3, [sp, #12]
 8017864:	4630      	mov	r0, r6
 8017866:	f7ff ffad 	bl	80177c4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801786a:	464a      	mov	r2, r9
 801786c:	460b      	mov	r3, r1
 801786e:	4601      	mov	r1, r0
 8017870:	4630      	mov	r0, r6
 8017872:	e9cd 4700 	strd	r4, r7, [sp]
 8017876:	f7ff ffc3 	bl	8017800 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801787a:	9b02      	ldr	r3, [sp, #8]
 801787c:	4606      	mov	r6, r0
 801787e:	eb05 0108 	add.w	r1, r5, r8
 8017882:	fb04 bb13 	mls	fp, r4, r3, fp
 8017886:	4658      	mov	r0, fp
 8017888:	f7ff ff9c 	bl	80177c4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801788c:	ab05      	add	r3, sp, #20
 801788e:	465a      	mov	r2, fp
 8017890:	e9cd 4300 	strd	r4, r3, [sp]
 8017894:	4603      	mov	r3, r0
 8017896:	4650      	mov	r0, sl
 8017898:	f7ff ffb2 	bl	8017800 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801789c:	6839      	ldr	r1, [r7, #0]
 801789e:	9a05      	ldr	r2, [sp, #20]
 80178a0:	9b03      	ldr	r3, [sp, #12]
 80178a2:	4411      	add	r1, r2
 80178a4:	fbb1 f2f4 	udiv	r2, r1, r4
 80178a8:	18d3      	adds	r3, r2, r3
 80178aa:	fb04 1412 	mls	r4, r4, r2, r1
 80178ae:	441e      	add	r6, r3
 80178b0:	603c      	str	r4, [r7, #0]
 80178b2:	4430      	add	r0, r6
 80178b4:	e7b6      	b.n	8017824 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080178b6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80178b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178ba:	b085      	sub	sp, #20
 80178bc:	f1b0 0900 	subs.w	r9, r0, #0
 80178c0:	461d      	mov	r5, r3
 80178c2:	4617      	mov	r7, r2
 80178c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80178c6:	bfbb      	ittet	lt
 80178c8:	f1c9 0900 	rsblt	r9, r9, #0
 80178cc:	f04f 36ff 	movlt.w	r6, #4294967295
 80178d0:	2601      	movge	r6, #1
 80178d2:	6823      	ldrlt	r3, [r4, #0]
 80178d4:	bfbc      	itt	lt
 80178d6:	425b      	neglt	r3, r3
 80178d8:	6023      	strlt	r3, [r4, #0]
 80178da:	2a00      	cmp	r2, #0
 80178dc:	da04      	bge.n	80178e8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80178de:	6823      	ldr	r3, [r4, #0]
 80178e0:	4257      	negs	r7, r2
 80178e2:	4276      	negs	r6, r6
 80178e4:	425b      	negs	r3, r3
 80178e6:	6023      	str	r3, [r4, #0]
 80178e8:	2d00      	cmp	r5, #0
 80178ea:	4638      	mov	r0, r7
 80178ec:	bfba      	itte	lt
 80178ee:	426d      	neglt	r5, r5
 80178f0:	f04f 38ff 	movlt.w	r8, #4294967295
 80178f4:	f04f 0801 	movge.w	r8, #1
 80178f8:	f7ff ff64 	bl	80177c4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80178fc:	ab03      	add	r3, sp, #12
 80178fe:	463a      	mov	r2, r7
 8017900:	e9cd 5300 	strd	r5, r3, [sp]
 8017904:	4603      	mov	r3, r0
 8017906:	4648      	mov	r0, r9
 8017908:	f7ff ff7a 	bl	8017800 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801790c:	6823      	ldr	r3, [r4, #0]
 801790e:	9a03      	ldr	r2, [sp, #12]
 8017910:	4546      	cmp	r6, r8
 8017912:	441a      	add	r2, r3
 8017914:	fb92 f3f5 	sdiv	r3, r2, r5
 8017918:	4418      	add	r0, r3
 801791a:	fb05 2313 	mls	r3, r5, r3, r2
 801791e:	bf18      	it	ne
 8017920:	4240      	negne	r0, r0
 8017922:	1c72      	adds	r2, r6, #1
 8017924:	6023      	str	r3, [r4, #0]
 8017926:	d105      	bne.n	8017934 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8017928:	2b00      	cmp	r3, #0
 801792a:	f1c3 0200 	rsb	r2, r3, #0
 801792e:	db0b      	blt.n	8017948 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8017930:	6022      	str	r2, [r4, #0]
 8017932:	e006      	b.n	8017942 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017934:	2e01      	cmp	r6, #1
 8017936:	d104      	bne.n	8017942 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017938:	2b00      	cmp	r3, #0
 801793a:	da02      	bge.n	8017942 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801793c:	442b      	add	r3, r5
 801793e:	3801      	subs	r0, #1
 8017940:	6023      	str	r3, [r4, #0]
 8017942:	b005      	add	sp, #20
 8017944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017948:	3801      	subs	r0, #1
 801794a:	1b52      	subs	r2, r2, r5
 801794c:	e7f0      	b.n	8017930 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08017950 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017950:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017954:	4c1c      	ldr	r4, [pc, #112]	; (80179c8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8017956:	4605      	mov	r5, r0
 8017958:	6807      	ldr	r7, [r0, #0]
 801795a:	69a3      	ldr	r3, [r4, #24]
 801795c:	b92b      	cbnz	r3, 801796a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801795e:	6840      	ldr	r0, [r0, #4]
 8017960:	e9c5 7000 	strd	r7, r0, [r5]
 8017964:	b004      	add	sp, #16
 8017966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801796a:	f04f 0802 	mov.w	r8, #2
 801796e:	68a2      	ldr	r2, [r4, #8]
 8017970:	ae04      	add	r6, sp, #16
 8017972:	6820      	ldr	r0, [r4, #0]
 8017974:	fb93 f1f8 	sdiv	r1, r3, r8
 8017978:	440a      	add	r2, r1
 801797a:	69e1      	ldr	r1, [r4, #28]
 801797c:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017980:	463a      	mov	r2, r7
 8017982:	9600      	str	r6, [sp, #0]
 8017984:	f7ff ff97 	bl	80178b6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017988:	69a3      	ldr	r3, [r4, #24]
 801798a:	4607      	mov	r7, r0
 801798c:	686a      	ldr	r2, [r5, #4]
 801798e:	6a21      	ldr	r1, [r4, #32]
 8017990:	9600      	str	r6, [sp, #0]
 8017992:	6860      	ldr	r0, [r4, #4]
 8017994:	f7ff ff8f 	bl	80178b6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017998:	69a3      	ldr	r3, [r4, #24]
 801799a:	6962      	ldr	r2, [r4, #20]
 801799c:	4407      	add	r7, r0
 801799e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80179a0:	9600      	str	r6, [sp, #0]
 80179a2:	68e0      	ldr	r0, [r4, #12]
 80179a4:	fb93 f8f8 	sdiv	r8, r3, r8
 80179a8:	4442      	add	r2, r8
 80179aa:	9203      	str	r2, [sp, #12]
 80179ac:	682a      	ldr	r2, [r5, #0]
 80179ae:	f7ff ff82 	bl	80178b6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80179b2:	4680      	mov	r8, r0
 80179b4:	9600      	str	r6, [sp, #0]
 80179b6:	69a3      	ldr	r3, [r4, #24]
 80179b8:	686a      	ldr	r2, [r5, #4]
 80179ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80179bc:	6920      	ldr	r0, [r4, #16]
 80179be:	f7ff ff7a 	bl	80178b6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80179c2:	4440      	add	r0, r8
 80179c4:	e7cc      	b.n	8017960 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80179c6:	bf00      	nop
 80179c8:	2005670c 	.word	0x2005670c

080179cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80179cc:	4b07      	ldr	r3, [pc, #28]	; (80179ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80179ce:	b510      	push	{r4, lr}
 80179d0:	781b      	ldrb	r3, [r3, #0]
 80179d2:	2b01      	cmp	r3, #1
 80179d4:	d108      	bne.n	80179e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80179d6:	4b06      	ldr	r3, [pc, #24]	; (80179f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80179d8:	880c      	ldrh	r4, [r1, #0]
 80179da:	881b      	ldrh	r3, [r3, #0]
 80179dc:	f9b0 2000 	ldrsh.w	r2, [r0]
 80179e0:	3b01      	subs	r3, #1
 80179e2:	1b1b      	subs	r3, r3, r4
 80179e4:	8003      	strh	r3, [r0, #0]
 80179e6:	800a      	strh	r2, [r1, #0]
 80179e8:	bd10      	pop	{r4, pc}
 80179ea:	bf00      	nop
 80179ec:	200566d8 	.word	0x200566d8
 80179f0:	200566dc 	.word	0x200566dc

080179f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80179f4:	4b0a      	ldr	r3, [pc, #40]	; (8017a20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80179f6:	b510      	push	{r4, lr}
 80179f8:	781b      	ldrb	r3, [r3, #0]
 80179fa:	2b01      	cmp	r3, #1
 80179fc:	d10e      	bne.n	8017a1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80179fe:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017a02:	8843      	ldrh	r3, [r0, #2]
 8017a04:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017a08:	18ca      	adds	r2, r1, r3
 8017a0a:	4b06      	ldr	r3, [pc, #24]	; (8017a24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017a0c:	8044      	strh	r4, [r0, #2]
 8017a0e:	881b      	ldrh	r3, [r3, #0]
 8017a10:	1a9b      	subs	r3, r3, r2
 8017a12:	8003      	strh	r3, [r0, #0]
 8017a14:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017a18:	8081      	strh	r1, [r0, #4]
 8017a1a:	80c3      	strh	r3, [r0, #6]
 8017a1c:	bd10      	pop	{r4, pc}
 8017a1e:	bf00      	nop
 8017a20:	200566d8 	.word	0x200566d8
 8017a24:	200566d4 	.word	0x200566d4

08017a28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017a28:	4b07      	ldr	r3, [pc, #28]	; (8017a48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017a2a:	b510      	push	{r4, lr}
 8017a2c:	781b      	ldrb	r3, [r3, #0]
 8017a2e:	2b01      	cmp	r3, #1
 8017a30:	d108      	bne.n	8017a44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017a32:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017a36:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017a3a:	8003      	strh	r3, [r0, #0]
 8017a3c:	8893      	ldrh	r3, [r2, #4]
 8017a3e:	3b01      	subs	r3, #1
 8017a40:	1b1b      	subs	r3, r3, r4
 8017a42:	800b      	strh	r3, [r1, #0]
 8017a44:	bd10      	pop	{r4, pc}
 8017a46:	bf00      	nop
 8017a48:	200566d8 	.word	0x200566d8

08017a4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017a4c:	4b08      	ldr	r3, [pc, #32]	; (8017a70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017a4e:	b513      	push	{r0, r1, r4, lr}
 8017a50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017a54:	2400      	movs	r4, #0
 8017a56:	4b07      	ldr	r3, [pc, #28]	; (8017a74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8017a58:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017a5c:	466a      	mov	r2, sp
 8017a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017a62:	9400      	str	r4, [sp, #0]
 8017a64:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017a68:	f7ff ffde 	bl	8017a28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017a6c:	b002      	add	sp, #8
 8017a6e:	bd10      	pop	{r4, pc}
 8017a70:	200566d4 	.word	0x200566d4
 8017a74:	200566d6 	.word	0x200566d6

08017a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017a78:	4b0a      	ldr	r3, [pc, #40]	; (8017aa4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017a7a:	460a      	mov	r2, r1
 8017a7c:	b510      	push	{r4, lr}
 8017a7e:	781b      	ldrb	r3, [r3, #0]
 8017a80:	2b01      	cmp	r3, #1
 8017a82:	d10d      	bne.n	8017aa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017a84:	8881      	ldrh	r1, [r0, #4]
 8017a86:	8803      	ldrh	r3, [r0, #0]
 8017a88:	440b      	add	r3, r1
 8017a8a:	4601      	mov	r1, r0
 8017a8c:	3b01      	subs	r3, #1
 8017a8e:	f821 3b02 	strh.w	r3, [r1], #2
 8017a92:	f7ff ffc9 	bl	8017a28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017a96:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017a9a:	88c2      	ldrh	r2, [r0, #6]
 8017a9c:	80c3      	strh	r3, [r0, #6]
 8017a9e:	8082      	strh	r2, [r0, #4]
 8017aa0:	bd10      	pop	{r4, pc}
 8017aa2:	bf00      	nop
 8017aa4:	200566d8 	.word	0x200566d8

08017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017aa8:	4b09      	ldr	r3, [pc, #36]	; (8017ad0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017aaa:	b507      	push	{r0, r1, r2, lr}
 8017aac:	2100      	movs	r1, #0
 8017aae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ab2:	4b08      	ldr	r3, [pc, #32]	; (8017ad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8017ab4:	9100      	str	r1, [sp, #0]
 8017ab6:	4669      	mov	r1, sp
 8017ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017abc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017ac0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017ac4:	f7ff ffd8 	bl	8017a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017ac8:	b003      	add	sp, #12
 8017aca:	f85d fb04 	ldr.w	pc, [sp], #4
 8017ace:	bf00      	nop
 8017ad0:	200566d4 	.word	0x200566d4
 8017ad4:	200566d6 	.word	0x200566d6

08017ad8 <_ZN8touchgfx11Application13requestRedrawEv>:
 8017ad8:	4b06      	ldr	r3, [pc, #24]	; (8017af4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8017ada:	2100      	movs	r1, #0
 8017adc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ae0:	4b05      	ldr	r3, [pc, #20]	; (8017af8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8017ae2:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8017ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017aea:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8017aee:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8017af2:	4770      	bx	lr
 8017af4:	200566d4 	.word	0x200566d4
 8017af8:	200566d6 	.word	0x200566d6

08017afc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017afc:	4b03      	ldr	r3, [pc, #12]	; (8017b0c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8017afe:	6818      	ldr	r0, [r3, #0]
 8017b00:	b110      	cbz	r0, 8017b08 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8017b02:	6803      	ldr	r3, [r0, #0]
 8017b04:	699b      	ldr	r3, [r3, #24]
 8017b06:	4718      	bx	r3
 8017b08:	4770      	bx	lr
 8017b0a:	bf00      	nop
 8017b0c:	2005673c 	.word	0x2005673c

08017b10 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017b10:	4770      	bx	lr
	...

08017b14 <_ZN8touchgfx11Application4drawEv>:
 8017b14:	4b09      	ldr	r3, [pc, #36]	; (8017b3c <_ZN8touchgfx11Application4drawEv+0x28>)
 8017b16:	b507      	push	{r0, r1, r2, lr}
 8017b18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017b1c:	2100      	movs	r1, #0
 8017b1e:	4b08      	ldr	r3, [pc, #32]	; (8017b40 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8017b20:	9100      	str	r1, [sp, #0]
 8017b22:	4669      	mov	r1, sp
 8017b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017b28:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017b2c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017b30:	6803      	ldr	r3, [r0, #0]
 8017b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b34:	4798      	blx	r3
 8017b36:	b003      	add	sp, #12
 8017b38:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b3c:	200566d4 	.word	0x200566d4
 8017b40:	200566d6 	.word	0x200566d6

08017b44 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017b44:	4b03      	ldr	r3, [pc, #12]	; (8017b54 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8017b46:	6818      	ldr	r0, [r3, #0]
 8017b48:	b110      	cbz	r0, 8017b50 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8017b4a:	6803      	ldr	r3, [r0, #0]
 8017b4c:	69db      	ldr	r3, [r3, #28]
 8017b4e:	4718      	bx	r3
 8017b50:	4770      	bx	lr
 8017b52:	bf00      	nop
 8017b54:	2005673c 	.word	0x2005673c

08017b58 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8017b58:	4b03      	ldr	r3, [pc, #12]	; (8017b68 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8017b5a:	6818      	ldr	r0, [r3, #0]
 8017b5c:	b110      	cbz	r0, 8017b64 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8017b5e:	6803      	ldr	r3, [r0, #0]
 8017b60:	6a1b      	ldr	r3, [r3, #32]
 8017b62:	4718      	bx	r3
 8017b64:	4770      	bx	lr
 8017b66:	bf00      	nop
 8017b68:	2005673c 	.word	0x2005673c

08017b6c <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017b6c:	4b03      	ldr	r3, [pc, #12]	; (8017b7c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8017b6e:	6818      	ldr	r0, [r3, #0]
 8017b70:	b110      	cbz	r0, 8017b78 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8017b72:	6803      	ldr	r3, [r0, #0]
 8017b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b76:	4718      	bx	r3
 8017b78:	4770      	bx	lr
 8017b7a:	bf00      	nop
 8017b7c:	2005673c 	.word	0x2005673c

08017b80 <_ZN8touchgfx11Application15handleTickEventEv>:
 8017b80:	b570      	push	{r4, r5, r6, lr}
 8017b82:	4d34      	ldr	r5, [pc, #208]	; (8017c54 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 8017b84:	4604      	mov	r4, r0
 8017b86:	6828      	ldr	r0, [r5, #0]
 8017b88:	b140      	cbz	r0, 8017b9c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017b8a:	7a03      	ldrb	r3, [r0, #8]
 8017b8c:	b933      	cbnz	r3, 8017b9c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017b8e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8017b92:	6803      	ldr	r3, [r0, #0]
 8017b94:	689b      	ldr	r3, [r3, #8]
 8017b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b9a:	4718      	bx	r3
 8017b9c:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8017ba0:	b97b      	cbnz	r3, 8017bc2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017ba2:	b170      	cbz	r0, 8017bc2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017ba4:	7a03      	ldrb	r3, [r0, #8]
 8017ba6:	b163      	cbz	r3, 8017bc2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017ba8:	4b2b      	ldr	r3, [pc, #172]	; (8017c58 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8017baa:	6818      	ldr	r0, [r3, #0]
 8017bac:	b110      	cbz	r0, 8017bb4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8017bae:	6803      	ldr	r3, [r0, #0]
 8017bb0:	691b      	ldr	r3, [r3, #16]
 8017bb2:	4798      	blx	r3
 8017bb4:	6828      	ldr	r0, [r5, #0]
 8017bb6:	6803      	ldr	r3, [r0, #0]
 8017bb8:	68db      	ldr	r3, [r3, #12]
 8017bba:	4798      	blx	r3
 8017bbc:	2301      	movs	r3, #1
 8017bbe:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8017bc2:	2500      	movs	r5, #0
 8017bc4:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8017bc8:	42a8      	cmp	r0, r5
 8017bca:	dd0c      	ble.n	8017be6 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8017bcc:	1963      	adds	r3, r4, r5
 8017bce:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8017bd2:	b132      	cbz	r2, 8017be2 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8017bd4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8017bd8:	4413      	add	r3, r2
 8017bda:	6858      	ldr	r0, [r3, #4]
 8017bdc:	6803      	ldr	r3, [r0, #0]
 8017bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017be0:	4798      	blx	r3
 8017be2:	3501      	adds	r5, #1
 8017be4:	e7ee      	b.n	8017bc4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8017be6:	2300      	movs	r3, #0
 8017be8:	461a      	mov	r2, r3
 8017bea:	4298      	cmp	r0, r3
 8017bec:	d114      	bne.n	8017c18 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 8017bee:	1d25      	adds	r5, r4, #4
 8017bf0:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8017bf4:	1e48      	subs	r0, r1, #1
 8017bf6:	b280      	uxth	r0, r0
 8017bf8:	4291      	cmp	r1, r2
 8017bfa:	dd24      	ble.n	8017c46 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 8017bfc:	4288      	cmp	r0, r1
 8017bfe:	d2fb      	bcs.n	8017bf8 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8017c00:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8017c04:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8017c08:	3304      	adds	r3, #4
 8017c0a:	428b      	cmp	r3, r1
 8017c0c:	d018      	beq.n	8017c40 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8017c0e:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8017c12:	f843 6c04 	str.w	r6, [r3, #-4]
 8017c16:	e7f8      	b.n	8017c0a <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8017c18:	18e1      	adds	r1, r4, r3
 8017c1a:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8017c1e:	b16d      	cbz	r5, 8017c3c <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8017c20:	429a      	cmp	r2, r3
 8017c22:	d00a      	beq.n	8017c3a <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8017c24:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8017c28:	4431      	add	r1, r6
 8017c2a:	684e      	ldr	r6, [r1, #4]
 8017c2c:	b291      	uxth	r1, r2
 8017c2e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8017c32:	604e      	str	r6, [r1, #4]
 8017c34:	18a1      	adds	r1, r4, r2
 8017c36:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8017c3a:	3201      	adds	r2, #1
 8017c3c:	3301      	adds	r3, #1
 8017c3e:	e7d4      	b.n	8017bea <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8017c40:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8017c44:	e7d4      	b.n	8017bf0 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8017c46:	4b04      	ldr	r3, [pc, #16]	; (8017c58 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8017c48:	6818      	ldr	r0, [r3, #0]
 8017c4a:	b110      	cbz	r0, 8017c52 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 8017c4c:	6803      	ldr	r3, [r0, #0]
 8017c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c50:	e7a1      	b.n	8017b96 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8017c52:	bd70      	pop	{r4, r5, r6, pc}
 8017c54:	20056740 	.word	0x20056740
 8017c58:	2005673c 	.word	0x2005673c

08017c5c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017c5c:	b570      	push	{r4, r5, r6, lr}
 8017c5e:	4606      	mov	r6, r0
 8017c60:	460c      	mov	r4, r1
 8017c62:	b929      	cbnz	r1, 8017c70 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8017c64:	4b0c      	ldr	r3, [pc, #48]	; (8017c98 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8017c66:	2167      	movs	r1, #103	; 0x67
 8017c68:	4a0c      	ldr	r2, [pc, #48]	; (8017c9c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8017c6a:	480d      	ldr	r0, [pc, #52]	; (8017ca0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8017c6c:	f00d f8ca 	bl	8024e04 <__assert_func>
 8017c70:	2300      	movs	r3, #0
 8017c72:	4d0c      	ldr	r5, [pc, #48]	; (8017ca4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8017c74:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8017c78:	6828      	ldr	r0, [r5, #0]
 8017c7a:	b110      	cbz	r0, 8017c82 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8017c7c:	6803      	ldr	r3, [r0, #0]
 8017c7e:	695b      	ldr	r3, [r3, #20]
 8017c80:	4798      	blx	r3
 8017c82:	602c      	str	r4, [r5, #0]
 8017c84:	4620      	mov	r0, r4
 8017c86:	6823      	ldr	r3, [r4, #0]
 8017c88:	68db      	ldr	r3, [r3, #12]
 8017c8a:	4798      	blx	r3
 8017c8c:	6833      	ldr	r3, [r6, #0]
 8017c8e:	4630      	mov	r0, r6
 8017c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c96:	4718      	bx	r3
 8017c98:	0802c028 	.word	0x0802c028
 8017c9c:	0802c0f8 	.word	0x0802c0f8
 8017ca0:	0802c032 	.word	0x0802c032
 8017ca4:	2005673c 	.word	0x2005673c

08017ca8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8017ca8:	b570      	push	{r4, r5, r6, lr}
 8017caa:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017cae:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017cb2:	42ac      	cmp	r4, r5
 8017cb4:	db18      	blt.n	8017ce8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017cb6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8017cba:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017cbe:	429a      	cmp	r2, r3
 8017cc0:	db12      	blt.n	8017ce8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017cc2:	8886      	ldrh	r6, [r0, #4]
 8017cc4:	4435      	add	r5, r6
 8017cc6:	888e      	ldrh	r6, [r1, #4]
 8017cc8:	4434      	add	r4, r6
 8017cca:	b22d      	sxth	r5, r5
 8017ccc:	b224      	sxth	r4, r4
 8017cce:	42a5      	cmp	r5, r4
 8017cd0:	db0a      	blt.n	8017ce8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017cd2:	88c0      	ldrh	r0, [r0, #6]
 8017cd4:	4418      	add	r0, r3
 8017cd6:	88cb      	ldrh	r3, [r1, #6]
 8017cd8:	441a      	add	r2, r3
 8017cda:	b200      	sxth	r0, r0
 8017cdc:	b212      	sxth	r2, r2
 8017cde:	4290      	cmp	r0, r2
 8017ce0:	bfb4      	ite	lt
 8017ce2:	2000      	movlt	r0, #0
 8017ce4:	2001      	movge	r0, #1
 8017ce6:	bd70      	pop	{r4, r5, r6, pc}
 8017ce8:	2000      	movs	r0, #0
 8017cea:	e7fc      	b.n	8017ce6 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08017cec <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8017cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cee:	4604      	mov	r4, r0
 8017cf0:	4608      	mov	r0, r1
 8017cf2:	460d      	mov	r5, r1
 8017cf4:	f7fc fa25 	bl	8014142 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017cf8:	b978      	cbnz	r0, 8017d1a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8017cfa:	4620      	mov	r0, r4
 8017cfc:	f7fc fa21 	bl	8014142 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017d00:	f9b5 6000 	ldrsh.w	r6, [r5]
 8017d04:	b150      	cbz	r0, 8017d1c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8017d06:	8026      	strh	r6, [r4, #0]
 8017d08:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017d0c:	8063      	strh	r3, [r4, #2]
 8017d0e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8017d12:	80a3      	strh	r3, [r4, #4]
 8017d14:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017d18:	80e3      	strh	r3, [r4, #6]
 8017d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d1c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017d20:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017d24:	42b1      	cmp	r1, r6
 8017d26:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8017d2a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8017d2e:	460f      	mov	r7, r1
 8017d30:	88ed      	ldrh	r5, [r5, #6]
 8017d32:	bfa8      	it	ge
 8017d34:	4637      	movge	r7, r6
 8017d36:	4293      	cmp	r3, r2
 8017d38:	4618      	mov	r0, r3
 8017d3a:	4466      	add	r6, ip
 8017d3c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017d40:	bfa8      	it	ge
 8017d42:	4610      	movge	r0, r2
 8017d44:	442a      	add	r2, r5
 8017d46:	88e5      	ldrh	r5, [r4, #6]
 8017d48:	4461      	add	r1, ip
 8017d4a:	b236      	sxth	r6, r6
 8017d4c:	8027      	strh	r7, [r4, #0]
 8017d4e:	442b      	add	r3, r5
 8017d50:	b209      	sxth	r1, r1
 8017d52:	b212      	sxth	r2, r2
 8017d54:	8060      	strh	r0, [r4, #2]
 8017d56:	b21b      	sxth	r3, r3
 8017d58:	428e      	cmp	r6, r1
 8017d5a:	bfac      	ite	ge
 8017d5c:	ebc7 0106 	rsbge	r1, r7, r6
 8017d60:	ebc7 0101 	rsblt	r1, r7, r1
 8017d64:	429a      	cmp	r2, r3
 8017d66:	bfac      	ite	ge
 8017d68:	ebc0 0202 	rsbge	r2, r0, r2
 8017d6c:	ebc0 0203 	rsblt	r2, r0, r3
 8017d70:	80a1      	strh	r1, [r4, #4]
 8017d72:	80e2      	strh	r2, [r4, #6]
 8017d74:	e7d1      	b.n	8017d1a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08017d78 <_ZN8touchgfx11Application11getInstanceEv>:
 8017d78:	4b01      	ldr	r3, [pc, #4]	; (8017d80 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017d7a:	6818      	ldr	r0, [r3, #0]
 8017d7c:	4770      	bx	lr
 8017d7e:	bf00      	nop
 8017d80:	2005674c 	.word	0x2005674c

08017d84 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8017d84:	2300      	movs	r3, #0
 8017d86:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8017d8a:	30a8      	adds	r0, #168	; 0xa8
 8017d8c:	f820 3c24 	strh.w	r3, [r0, #-36]
 8017d90:	f802 3b01 	strb.w	r3, [r2], #1
 8017d94:	4282      	cmp	r2, r0
 8017d96:	d1fb      	bne.n	8017d90 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8017d98:	4770      	bx	lr

08017d9a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8017da0:	2200      	movs	r2, #0
 8017da2:	801a      	strh	r2, [r3, #0]
 8017da4:	3308      	adds	r3, #8
 8017da6:	f823 2c06 	strh.w	r2, [r3, #-6]
 8017daa:	f823 2c04 	strh.w	r2, [r3, #-4]
 8017dae:	f823 2c02 	strh.w	r2, [r3, #-2]
 8017db2:	428b      	cmp	r3, r1
 8017db4:	d1f5      	bne.n	8017da2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8017db6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8017dba:	4770      	bx	lr

08017dbc <_ZN8touchgfx11ApplicationC1Ev>:
 8017dbc:	b570      	push	{r4, r5, r6, lr}
 8017dbe:	4b1a      	ldr	r3, [pc, #104]	; (8017e28 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8017dc0:	2500      	movs	r5, #0
 8017dc2:	4604      	mov	r4, r0
 8017dc4:	30a8      	adds	r0, #168	; 0xa8
 8017dc6:	f840 3ca8 	str.w	r3, [r0, #-168]
 8017dca:	f820 5c24 	strh.w	r5, [r0, #-36]
 8017dce:	f7ff ffe4 	bl	8017d9a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017dd2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8017dd6:	f7ff ffe0 	bl	8017d9a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017dda:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8017dde:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8017de2:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8017de6:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8017dea:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8017dee:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8017df2:	490e      	ldr	r1, [pc, #56]	; (8017e2c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8017df4:	480e      	ldr	r0, [pc, #56]	; (8017e30 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8017df6:	f00b fa69 	bl	80232cc <CRC_Lock>
 8017dfa:	4e0e      	ldr	r6, [pc, #56]	; (8017e34 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8017dfc:	4b0e      	ldr	r3, [pc, #56]	; (8017e38 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8017dfe:	b158      	cbz	r0, 8017e18 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8017e00:	801d      	strh	r5, [r3, #0]
 8017e02:	2300      	movs	r3, #0
 8017e04:	4a0d      	ldr	r2, [pc, #52]	; (8017e3c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8017e06:	4620      	mov	r0, r4
 8017e08:	6013      	str	r3, [r2, #0]
 8017e0a:	4a0d      	ldr	r2, [pc, #52]	; (8017e40 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8017e0c:	6033      	str	r3, [r6, #0]
 8017e0e:	6013      	str	r3, [r2, #0]
 8017e10:	f7ff ffb8 	bl	8017d84 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8017e14:	4620      	mov	r0, r4
 8017e16:	bd70      	pop	{r4, r5, r6, pc}
 8017e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017e1c:	2002      	movs	r0, #2
 8017e1e:	801a      	strh	r2, [r3, #0]
 8017e20:	6030      	str	r0, [r6, #0]
 8017e22:	f001 fb41 	bl	80194a8 <_ZN8touchgfx6Screen4drawEv>
 8017e26:	e7ec      	b.n	8017e02 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8017e28:	0802c0bc 	.word	0x0802c0bc
 8017e2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8017e30:	f407a5c2 	.word	0xf407a5c2
 8017e34:	2005673c 	.word	0x2005673c
 8017e38:	2000001c 	.word	0x2000001c
 8017e3c:	2005674c 	.word	0x2005674c
 8017e40:	20056740 	.word	0x20056740

08017e44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8017e44:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8017e48:	428b      	cmp	r3, r1
 8017e4a:	b510      	push	{r4, lr}
 8017e4c:	d90e      	bls.n	8017e6c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 8017e4e:	3b01      	subs	r3, #1
 8017e50:	b29b      	uxth	r3, r3
 8017e52:	428b      	cmp	r3, r1
 8017e54:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8017e58:	d908      	bls.n	8017e6c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 8017e5a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8017e5e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8017e62:	681a      	ldr	r2, [r3, #0]
 8017e64:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8017e68:	685a      	ldr	r2, [r3, #4]
 8017e6a:	6062      	str	r2, [r4, #4]
 8017e6c:	bd10      	pop	{r4, pc}
	...

08017e70 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8017e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017e72:	466b      	mov	r3, sp
 8017e74:	4604      	mov	r4, r0
 8017e76:	e883 0006 	stmia.w	r3, {r1, r2}
 8017e7a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8017e7e:	2a07      	cmp	r2, #7
 8017e80:	d906      	bls.n	8017e90 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8017e82:	4b09      	ldr	r3, [pc, #36]	; (8017ea8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8017e84:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8017e88:	4a08      	ldr	r2, [pc, #32]	; (8017eac <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8017e8a:	4809      	ldr	r0, [pc, #36]	; (8017eb0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8017e8c:	f00c ffba 	bl	8024e04 <__assert_func>
 8017e90:	1c51      	adds	r1, r2, #1
 8017e92:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8017e96:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8017e9a:	cb03      	ldmia	r3!, {r0, r1}
 8017e9c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8017ea0:	6069      	str	r1, [r5, #4]
 8017ea2:	b003      	add	sp, #12
 8017ea4:	bd30      	pop	{r4, r5, pc}
 8017ea6:	bf00      	nop
 8017ea8:	0802c05c 	.word	0x0802c05c
 8017eac:	0802c13c 	.word	0x0802c13c
 8017eb0:	0802c08b 	.word	0x0802c08b

08017eb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8017eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb8:	b08d      	sub	sp, #52	; 0x34
 8017eba:	4683      	mov	fp, r0
 8017ebc:	ac08      	add	r4, sp, #32
 8017ebe:	4620      	mov	r0, r4
 8017ec0:	e884 0006 	stmia.w	r4, {r1, r2}
 8017ec4:	f7fc f93d 	bl	8014142 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017ec8:	2800      	cmp	r0, #0
 8017eca:	d16a      	bne.n	8017fa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8017ecc:	9402      	str	r4, [sp, #8]
 8017ece:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8017ed2:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8017ed6:	2400      	movs	r4, #0
 8017ed8:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8017edc:	9301      	str	r3, [sp, #4]
 8017ede:	36a0      	adds	r6, #160	; 0xa0
 8017ee0:	42a5      	cmp	r5, r4
 8017ee2:	d00d      	beq.n	8017f00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8017ee4:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8017ee8:	9802      	ldr	r0, [sp, #8]
 8017eea:	f7ff fedd 	bl	8017ca8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017eee:	b128      	cbz	r0, 8017efc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8017ef0:	1e69      	subs	r1, r5, #1
 8017ef2:	9801      	ldr	r0, [sp, #4]
 8017ef4:	1b09      	subs	r1, r1, r4
 8017ef6:	b289      	uxth	r1, r1
 8017ef8:	f7ff ffa4 	bl	8017e44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017efc:	3401      	adds	r4, #1
 8017efe:	e7ef      	b.n	8017ee0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017f00:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8017f04:	1e7b      	subs	r3, r7, #1
 8017f06:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8017f0a:	9703      	str	r7, [sp, #12]
 8017f0c:	9300      	str	r3, [sp, #0]
 8017f0e:	2400      	movs	r4, #0
 8017f10:	4655      	mov	r5, sl
 8017f12:	9704      	str	r7, [sp, #16]
 8017f14:	4626      	mov	r6, r4
 8017f16:	9b04      	ldr	r3, [sp, #16]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d078      	beq.n	801800e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 8017f1c:	9902      	ldr	r1, [sp, #8]
 8017f1e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8017f22:	f7fd fad7 	bl	80154d4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017f26:	b360      	cbz	r0, 8017f82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8017f28:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8017f2c:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8017f30:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8017f34:	45e6      	cmp	lr, ip
 8017f36:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8017f3a:	db35      	blt.n	8017fa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8017f3c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8017f40:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8017f44:	4472      	add	r2, lr
 8017f46:	4463      	add	r3, ip
 8017f48:	b212      	sxth	r2, r2
 8017f4a:	b21b      	sxth	r3, r3
 8017f4c:	429a      	cmp	r2, r3
 8017f4e:	dc2b      	bgt.n	8017fa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8017f50:	fa1f f288 	uxth.w	r2, r8
 8017f54:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8017f58:	45c1      	cmp	r9, r8
 8017f5a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8017f5e:	4413      	add	r3, r2
 8017f60:	fa1f fc89 	uxth.w	ip, r9
 8017f64:	b29b      	uxth	r3, r3
 8017f66:	fa0f fe83 	sxth.w	lr, r3
 8017f6a:	db0f      	blt.n	8017f8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 8017f6c:	eba3 030c 	sub.w	r3, r3, ip
 8017f70:	1ac9      	subs	r1, r1, r3
 8017f72:	b209      	sxth	r1, r1
 8017f74:	2900      	cmp	r1, #0
 8017f76:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8017f7a:	dd12      	ble.n	8017fa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8017f7c:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8017f80:	4604      	mov	r4, r0
 8017f82:	9b04      	ldr	r3, [sp, #16]
 8017f84:	3d08      	subs	r5, #8
 8017f86:	3b01      	subs	r3, #1
 8017f88:	9304      	str	r3, [sp, #16]
 8017f8a:	e7c4      	b.n	8017f16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8017f8c:	4461      	add	r1, ip
 8017f8e:	b209      	sxth	r1, r1
 8017f90:	4571      	cmp	r1, lr
 8017f92:	dc3a      	bgt.n	801800a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8017f94:	eba2 020c 	sub.w	r2, r2, ip
 8017f98:	b212      	sxth	r2, r2
 8017f9a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8017f9e:	2a00      	cmp	r2, #0
 8017fa0:	dcee      	bgt.n	8017f80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8017fa2:	b00d      	add	sp, #52	; 0x34
 8017fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fa8:	45c1      	cmp	r9, r8
 8017faa:	db2e      	blt.n	801800a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8017fac:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8017fb0:	4499      	add	r9, r3
 8017fb2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8017fb6:	4498      	add	r8, r3
 8017fb8:	fa0f f989 	sxth.w	r9, r9
 8017fbc:	fa0f f888 	sxth.w	r8, r8
 8017fc0:	45c1      	cmp	r9, r8
 8017fc2:	dc22      	bgt.n	801800a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8017fc4:	fa1f f28c 	uxth.w	r2, ip
 8017fc8:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8017fcc:	45e6      	cmp	lr, ip
 8017fce:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8017fd2:	4413      	add	r3, r2
 8017fd4:	fa1f f88e 	uxth.w	r8, lr
 8017fd8:	b29b      	uxth	r3, r3
 8017fda:	fa0f f983 	sxth.w	r9, r3
 8017fde:	db0a      	blt.n	8017ff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8017fe0:	eba3 0308 	sub.w	r3, r3, r8
 8017fe4:	1ac9      	subs	r1, r1, r3
 8017fe6:	b209      	sxth	r1, r1
 8017fe8:	2900      	cmp	r1, #0
 8017fea:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8017fee:	ddd8      	ble.n	8017fa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8017ff0:	f8ad 9020 	strh.w	r9, [sp, #32]
 8017ff4:	e7c4      	b.n	8017f80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8017ff6:	4441      	add	r1, r8
 8017ff8:	b209      	sxth	r1, r1
 8017ffa:	4549      	cmp	r1, r9
 8017ffc:	dc05      	bgt.n	801800a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8017ffe:	eba2 0208 	sub.w	r2, r2, r8
 8018002:	b212      	sxth	r2, r2
 8018004:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8018008:	e7c9      	b.n	8017f9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801800a:	4606      	mov	r6, r0
 801800c:	e7b9      	b.n	8017f82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801800e:	2c00      	cmp	r4, #0
 8018010:	f47f af7d 	bne.w	8017f0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8018014:	2e00      	cmp	r6, #0
 8018016:	f000 81dc 	beq.w	80183d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801801a:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801801e:	4655      	mov	r5, sl
 8018020:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8018024:	b2b9      	uxth	r1, r7
 8018026:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801802a:	b2b3      	uxth	r3, r6
 801802c:	9104      	str	r1, [sp, #16]
 801802e:	9804      	ldr	r0, [sp, #16]
 8018030:	441a      	add	r2, r3
 8018032:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8018036:	b292      	uxth	r2, r2
 8018038:	4401      	add	r1, r0
 801803a:	fa0f f882 	sxth.w	r8, r2
 801803e:	b289      	uxth	r1, r1
 8018040:	9105      	str	r1, [sp, #20]
 8018042:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8018046:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801804a:	9b03      	ldr	r3, [sp, #12]
 801804c:	2b00      	cmp	r3, #0
 801804e:	d054      	beq.n	80180fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8018050:	9902      	ldr	r1, [sp, #8]
 8018052:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8018056:	f7fd fa3d 	bl	80154d4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801805a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801805e:	b1d8      	cbz	r0, 8018098 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018060:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8018064:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8018068:	4576      	cmp	r6, lr
 801806a:	dc26      	bgt.n	80180ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801806c:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8018070:	44f4      	add	ip, lr
 8018072:	fa0f fc8c 	sxth.w	ip, ip
 8018076:	45e0      	cmp	r8, ip
 8018078:	db1f      	blt.n	80180ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801807a:	428f      	cmp	r7, r1
 801807c:	fa1f fc81 	uxth.w	ip, r1
 8018080:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8018084:	dc0f      	bgt.n	80180a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8018086:	9805      	ldr	r0, [sp, #20]
 8018088:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801808c:	eba0 0c0c 	sub.w	ip, r0, ip
 8018090:	eba1 010c 	sub.w	r1, r1, ip
 8018094:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8018098:	4620      	mov	r0, r4
 801809a:	9903      	ldr	r1, [sp, #12]
 801809c:	3d08      	subs	r5, #8
 801809e:	4604      	mov	r4, r0
 80180a0:	3901      	subs	r1, #1
 80180a2:	9103      	str	r1, [sp, #12]
 80180a4:	e7cf      	b.n	8018046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 80180a6:	4461      	add	r1, ip
 80180a8:	b209      	sxth	r1, r1
 80180aa:	4549      	cmp	r1, r9
 80180ac:	dcf5      	bgt.n	801809a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80180ae:	9904      	ldr	r1, [sp, #16]
 80180b0:	eba1 0c0c 	sub.w	ip, r1, ip
 80180b4:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 80180b8:	e7ee      	b.n	8018098 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80180ba:	428f      	cmp	r7, r1
 80180bc:	dced      	bgt.n	801809a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80180be:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 80180c2:	4461      	add	r1, ip
 80180c4:	b209      	sxth	r1, r1
 80180c6:	4589      	cmp	r9, r1
 80180c8:	dbe7      	blt.n	801809a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80180ca:	4576      	cmp	r6, lr
 80180cc:	fa1f fc8e 	uxth.w	ip, lr
 80180d0:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 80180d4:	dc08      	bgt.n	80180e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 80180d6:	eba2 0c0c 	sub.w	ip, r2, ip
 80180da:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 80180de:	eba1 010c 	sub.w	r1, r1, ip
 80180e2:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 80180e6:	e7d7      	b.n	8018098 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80180e8:	4461      	add	r1, ip
 80180ea:	b209      	sxth	r1, r1
 80180ec:	4588      	cmp	r8, r1
 80180ee:	dbd4      	blt.n	801809a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80180f0:	eba3 0c0c 	sub.w	ip, r3, ip
 80180f4:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 80180f8:	e7ce      	b.n	8018098 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80180fa:	2c00      	cmp	r4, #0
 80180fc:	f000 8169 	beq.w	80183d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8018100:	9b00      	ldr	r3, [sp, #0]
 8018102:	3301      	adds	r3, #1
 8018104:	f000 8165 	beq.w	80183d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8018108:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801810c:	9802      	ldr	r0, [sp, #8]
 801810e:	4621      	mov	r1, r4
 8018110:	f7ff fdca 	bl	8017ca8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018114:	b120      	cbz	r0, 8018120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8018116:	f8bd 1000 	ldrh.w	r1, [sp]
 801811a:	9801      	ldr	r0, [sp, #4]
 801811c:	f7ff fe92 	bl	8017e44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018120:	9902      	ldr	r1, [sp, #8]
 8018122:	4620      	mov	r0, r4
 8018124:	f7fd f9d6 	bl	80154d4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018128:	2800      	cmp	r0, #0
 801812a:	f000 809b 	beq.w	8018264 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801812e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8018132:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8018136:	fa1f f288 	uxth.w	r2, r8
 801813a:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801813e:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8018142:	19d5      	adds	r5, r2, r7
 8018144:	b2a1      	uxth	r1, r4
 8018146:	45a0      	cmp	r8, r4
 8018148:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801814c:	fa1f f985 	uxth.w	r9, r5
 8018150:	440b      	add	r3, r1
 8018152:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8018156:	fa0f f589 	sxth.w	r5, r9
 801815a:	b29b      	uxth	r3, r3
 801815c:	9503      	str	r5, [sp, #12]
 801815e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8018162:	9507      	str	r5, [sp, #28]
 8018164:	f340 809d 	ble.w	80182a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8018168:	1a52      	subs	r2, r2, r1
 801816a:	4584      	cmp	ip, r0
 801816c:	fa0f fe83 	sxth.w	lr, r3
 8018170:	b292      	uxth	r2, r2
 8018172:	b215      	sxth	r5, r2
 8018174:	dd2f      	ble.n	80181d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8018176:	9e00      	ldr	r6, [sp, #0]
 8018178:	fa1f fc8c 	uxth.w	ip, ip
 801817c:	b280      	uxth	r0, r0
 801817e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8018182:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8018186:	9e03      	ldr	r6, [sp, #12]
 8018188:	ebac 0300 	sub.w	r3, ip, r0
 801818c:	448c      	add	ip, r1
 801818e:	eba6 060e 	sub.w	r6, r6, lr
 8018192:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8018196:	b29b      	uxth	r3, r3
 8018198:	4470      	add	r0, lr
 801819a:	fa0f fc8c 	sxth.w	ip, ip
 801819e:	b21c      	sxth	r4, r3
 80181a0:	b200      	sxth	r0, r0
 80181a2:	4366      	muls	r6, r4
 80181a4:	ebac 0000 	sub.w	r0, ip, r0
 80181a8:	4368      	muls	r0, r5
 80181aa:	4286      	cmp	r6, r0
 80181ac:	db09      	blt.n	80181c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 80181ae:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 80181b2:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 80181b6:	4417      	add	r7, r2
 80181b8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80181bc:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80181c0:	e685      	b.n	8017ece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80181c2:	440b      	add	r3, r1
 80181c4:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 80181c8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80181cc:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 80181d0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80181d4:	e67b      	b.n	8017ece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80181d6:	9e03      	ldr	r6, [sp, #12]
 80181d8:	45b6      	cmp	lr, r6
 80181da:	da28      	bge.n	801822e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 80181dc:	9b00      	ldr	r3, [sp, #0]
 80181de:	eba6 060e 	sub.w	r6, r6, lr
 80181e2:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 80181e6:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 80181ea:	eb04 030c 	add.w	r3, r4, ip
 80181ee:	fa1f f883 	uxth.w	r8, r3
 80181f2:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 80181f6:	4403      	add	r3, r0
 80181f8:	fa0f f988 	sxth.w	r9, r8
 80181fc:	eba0 000c 	sub.w	r0, r0, ip
 8018200:	eba3 0308 	sub.w	r3, r3, r8
 8018204:	4368      	muls	r0, r5
 8018206:	b29b      	uxth	r3, r3
 8018208:	fa0f f883 	sxth.w	r8, r3
 801820c:	fb08 f606 	mul.w	r6, r8, r6
 8018210:	42b0      	cmp	r0, r6
 8018212:	dc06      	bgt.n	8018222 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8018214:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8018218:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801821c:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8018220:	e7c9      	b.n	80181b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8018222:	4423      	add	r3, r4
 8018224:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8018228:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801822c:	e64f      	b.n	8017ece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801822e:	eba3 0309 	sub.w	r3, r3, r9
 8018232:	9807      	ldr	r0, [sp, #28]
 8018234:	b29b      	uxth	r3, r3
 8018236:	2806      	cmp	r0, #6
 8018238:	fa0f fc83 	sxth.w	ip, r3
 801823c:	d818      	bhi.n	8018270 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801823e:	4652      	mov	r2, sl
 8018240:	ab0a      	add	r3, sp, #40	; 0x28
 8018242:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8018246:	6851      	ldr	r1, [r2, #4]
 8018248:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801824c:	c303      	stmia	r3!, {r0, r1}
 801824e:	9b03      	ldr	r3, [sp, #12]
 8018250:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8018254:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8018258:	ab0a      	add	r3, sp, #40	; 0x28
 801825a:	9801      	ldr	r0, [sp, #4]
 801825c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8018260:	f7ff fe06 	bl	8017e70 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018264:	9b00      	ldr	r3, [sp, #0]
 8018266:	f1aa 0a08 	sub.w	sl, sl, #8
 801826a:	3b01      	subs	r3, #1
 801826c:	9300      	str	r3, [sp, #0]
 801826e:	e747      	b.n	8018100 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8018270:	9800      	ldr	r0, [sp, #0]
 8018272:	45ac      	cmp	ip, r5
 8018274:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8018278:	db0c      	blt.n	8018294 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801827a:	4417      	add	r7, r2
 801827c:	4458      	add	r0, fp
 801827e:	f8ad 4020 	strh.w	r4, [sp, #32]
 8018282:	b2bf      	uxth	r7, r7
 8018284:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8018288:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801828c:	440f      	add	r7, r1
 801828e:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 8018292:	e61c      	b.n	8017ece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8018294:	4458      	add	r0, fp
 8018296:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801829a:	443b      	add	r3, r7
 801829c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80182a0:	e615      	b.n	8017ece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80182a2:	fa1f f18c 	uxth.w	r1, ip
 80182a6:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 80182aa:	b282      	uxth	r2, r0
 80182ac:	4584      	cmp	ip, r0
 80182ae:	eb01 0e05 	add.w	lr, r1, r5
 80182b2:	9204      	str	r2, [sp, #16]
 80182b4:	fa1f fe8e 	uxth.w	lr, lr
 80182b8:	9e04      	ldr	r6, [sp, #16]
 80182ba:	fa0f f28e 	sxth.w	r2, lr
 80182be:	9205      	str	r2, [sp, #20]
 80182c0:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 80182c4:	4432      	add	r2, r6
 80182c6:	b292      	uxth	r2, r2
 80182c8:	9206      	str	r2, [sp, #24]
 80182ca:	da26      	bge.n	801831a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 80182cc:	eba3 0309 	sub.w	r3, r3, r9
 80182d0:	eba2 020e 	sub.w	r2, r2, lr
 80182d4:	eba0 000c 	sub.w	r0, r0, ip
 80182d8:	eba4 0408 	sub.w	r4, r4, r8
 80182dc:	b29b      	uxth	r3, r3
 80182de:	b292      	uxth	r2, r2
 80182e0:	fa0f fa83 	sxth.w	sl, r3
 80182e4:	b211      	sxth	r1, r2
 80182e6:	fb0a f000 	mul.w	r0, sl, r0
 80182ea:	434c      	muls	r4, r1
 80182ec:	42a0      	cmp	r0, r4
 80182ee:	9800      	ldr	r0, [sp, #0]
 80182f0:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80182f4:	dc06      	bgt.n	8018304 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 80182f6:	4458      	add	r0, fp
 80182f8:	9a05      	ldr	r2, [sp, #20]
 80182fa:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 80182fe:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8018302:	e7ca      	b.n	801829a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8018304:	eb0b 0300 	add.w	r3, fp, r0
 8018308:	9903      	ldr	r1, [sp, #12]
 801830a:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801830e:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8018312:	442a      	add	r2, r5
 8018314:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8018318:	e5d9      	b.n	8017ece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801831a:	9e04      	ldr	r6, [sp, #16]
 801831c:	9a03      	ldr	r2, [sp, #12]
 801831e:	1b89      	subs	r1, r1, r6
 8018320:	b21e      	sxth	r6, r3
 8018322:	b289      	uxth	r1, r1
 8018324:	4296      	cmp	r6, r2
 8018326:	fa0f fc81 	sxth.w	ip, r1
 801832a:	dd25      	ble.n	8018378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801832c:	eba3 0309 	sub.w	r3, r3, r9
 8018330:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8018334:	9e05      	ldr	r6, [sp, #20]
 8018336:	eba4 0408 	sub.w	r4, r4, r8
 801833a:	b29b      	uxth	r3, r3
 801833c:	eba6 0902 	sub.w	r9, r6, r2
 8018340:	fb0c f404 	mul.w	r4, ip, r4
 8018344:	b218      	sxth	r0, r3
 8018346:	9a00      	ldr	r2, [sp, #0]
 8018348:	fb00 f909 	mul.w	r9, r0, r9
 801834c:	00d2      	lsls	r2, r2, #3
 801834e:	454c      	cmp	r4, r9
 8018350:	db03      	blt.n	801835a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 8018352:	445a      	add	r2, fp
 8018354:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8018358:	e79f      	b.n	801829a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801835a:	eb0b 0302 	add.w	r3, fp, r2
 801835e:	9a03      	ldr	r2, [sp, #12]
 8018360:	4429      	add	r1, r5
 8018362:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8018366:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801836a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801836e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8018372:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018376:	e5aa      	b.n	8017ece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8018378:	9b06      	ldr	r3, [sp, #24]
 801837a:	9c07      	ldr	r4, [sp, #28]
 801837c:	eba3 020e 	sub.w	r2, r3, lr
 8018380:	2c06      	cmp	r4, #6
 8018382:	b292      	uxth	r2, r2
 8018384:	b213      	sxth	r3, r2
 8018386:	d80d      	bhi.n	80183a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 8018388:	4651      	mov	r1, sl
 801838a:	aa0a      	add	r2, sp, #40	; 0x28
 801838c:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8018390:	6849      	ldr	r1, [r1, #4]
 8018392:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8018396:	9b05      	ldr	r3, [sp, #20]
 8018398:	c203      	stmia	r2!, {r0, r1}
 801839a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801839e:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 80183a2:	e759      	b.n	8018258 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 80183a4:	9c00      	ldr	r4, [sp, #0]
 80183a6:	4563      	cmp	r3, ip
 80183a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80183ac:	db0d      	blt.n	80183ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 80183ae:	4429      	add	r1, r5
 80183b0:	9a04      	ldr	r2, [sp, #16]
 80183b2:	445c      	add	r4, fp
 80183b4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80183b8:	b289      	uxth	r1, r1
 80183ba:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 80183be:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80183c2:	4411      	add	r1, r2
 80183c4:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 80183c8:	e581      	b.n	8017ece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80183ca:	445c      	add	r4, fp
 80183cc:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 80183d0:	e79f      	b.n	8018312 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 80183d2:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80183d6:	2f07      	cmp	r7, #7
 80183d8:	d806      	bhi.n	80183e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 80183da:	ab08      	add	r3, sp, #32
 80183dc:	9801      	ldr	r0, [sp, #4]
 80183de:	e893 0006 	ldmia.w	r3, {r1, r2}
 80183e2:	f7ff fd45 	bl	8017e70 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80183e6:	e5dc      	b.n	8017fa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80183e8:	f107 39ff 	add.w	r9, r7, #4294967295
 80183ec:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80183f0:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 80183f4:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80183f8:	f04f 35ff 	mov.w	r5, #4294967295
 80183fc:	2400      	movs	r4, #0
 80183fe:	9304      	str	r3, [sp, #16]
 8018400:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8018404:	f109 32ff 	add.w	r2, r9, #4294967295
 8018408:	9300      	str	r3, [sp, #0]
 801840a:	4690      	mov	r8, r2
 801840c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8018410:	9303      	str	r3, [sp, #12]
 8018412:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8018416:	f1b8 3fff 	cmp.w	r8, #4294967295
 801841a:	6818      	ldr	r0, [r3, #0]
 801841c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8018420:	9206      	str	r2, [sp, #24]
 8018422:	bf16      	itet	ne
 8018424:	9904      	ldrne	r1, [sp, #16]
 8018426:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801842a:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801842e:	9305      	str	r3, [sp, #20]
 8018430:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8018434:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8018438:	fb16 f601 	smulbb	r6, r6, r1
 801843c:	6859      	ldr	r1, [r3, #4]
 801843e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018442:	4671      	mov	r1, lr
 8018444:	a80a      	add	r0, sp, #40	; 0x28
 8018446:	f7ff fc51 	bl	8017cec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801844a:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801844e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8018452:	9b03      	ldr	r3, [sp, #12]
 8018454:	9a00      	ldr	r2, [sp, #0]
 8018456:	fb11 f100 	smulbb	r1, r1, r0
 801845a:	2008      	movs	r0, #8
 801845c:	fb02 6603 	mla	r6, r2, r3, r6
 8018460:	1b8e      	subs	r6, r1, r6
 8018462:	fb91 f1f0 	sdiv	r1, r1, r0
 8018466:	42b1      	cmp	r1, r6
 8018468:	dc21      	bgt.n	80184ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801846a:	4556      	cmp	r6, sl
 801846c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8018470:	da03      	bge.n	801847a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 8018472:	b1e6      	cbz	r6, 80184ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8018474:	46b2      	mov	sl, r6
 8018476:	4645      	mov	r5, r8
 8018478:	464c      	mov	r4, r9
 801847a:	f108 38ff 	add.w	r8, r8, #4294967295
 801847e:	f118 0f02 	cmn.w	r8, #2
 8018482:	d1c8      	bne.n	8018416 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 8018484:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018488:	f1a7 0708 	sub.w	r7, r7, #8
 801848c:	4691      	mov	r9, r2
 801848e:	d1b7      	bne.n	8018400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8018490:	9b01      	ldr	r3, [sp, #4]
 8018492:	b2a6      	uxth	r6, r4
 8018494:	00e4      	lsls	r4, r4, #3
 8018496:	1918      	adds	r0, r3, r4
 8018498:	1c6b      	adds	r3, r5, #1
 801849a:	d10b      	bne.n	80184b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801849c:	4601      	mov	r1, r0
 801849e:	9802      	ldr	r0, [sp, #8]
 80184a0:	f7ff fc24 	bl	8017cec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80184a4:	4631      	mov	r1, r6
 80184a6:	9801      	ldr	r0, [sp, #4]
 80184a8:	f7ff fccc 	bl	8017e44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80184ac:	e50f      	b.n	8017ece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80184ae:	4645      	mov	r5, r8
 80184b0:	464c      	mov	r4, r9
 80184b2:	e7ed      	b.n	8018490 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 80184b4:	9b01      	ldr	r3, [sp, #4]
 80184b6:	00ed      	lsls	r5, r5, #3
 80184b8:	445c      	add	r4, fp
 80184ba:	1959      	adds	r1, r3, r5
 80184bc:	445d      	add	r5, fp
 80184be:	f7ff fc15 	bl	8017cec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80184c2:	9b02      	ldr	r3, [sp, #8]
 80184c4:	cb03      	ldmia	r3!, {r0, r1}
 80184c6:	9b02      	ldr	r3, [sp, #8]
 80184c8:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 80184cc:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 80184d0:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 80184d4:	6861      	ldr	r1, [r4, #4]
 80184d6:	c303      	stmia	r3!, {r0, r1}
 80184d8:	e7e4      	b.n	80184a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

080184dc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80184dc:	4b1d      	ldr	r3, [pc, #116]	; (8018554 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 80184de:	b530      	push	{r4, r5, lr}
 80184e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80184e4:	b085      	sub	sp, #20
 80184e6:	4b1c      	ldr	r3, [pc, #112]	; (8018558 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 80184e8:	460c      	mov	r4, r1
 80184ea:	2100      	movs	r1, #0
 80184ec:	4605      	mov	r5, r0
 80184ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80184f2:	6820      	ldr	r0, [r4, #0]
 80184f4:	9100      	str	r1, [sp, #0]
 80184f6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80184fa:	ab02      	add	r3, sp, #8
 80184fc:	6861      	ldr	r1, [r4, #4]
 80184fe:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018502:	c303      	stmia	r3!, {r0, r1}
 8018504:	4669      	mov	r1, sp
 8018506:	a802      	add	r0, sp, #8
 8018508:	f7fb fdd8 	bl	80140bc <_ZN8touchgfx4RectaNERKS0_>
 801850c:	ab02      	add	r3, sp, #8
 801850e:	cb03      	ldmia	r3!, {r0, r1}
 8018510:	4b12      	ldr	r3, [pc, #72]	; (801855c <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8018512:	6020      	str	r0, [r4, #0]
 8018514:	6818      	ldr	r0, [r3, #0]
 8018516:	6061      	str	r1, [r4, #4]
 8018518:	b138      	cbz	r0, 801852a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801851a:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801851e:	b133      	cbz	r3, 801852e <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8018520:	6821      	ldr	r1, [r4, #0]
 8018522:	4628      	mov	r0, r5
 8018524:	6862      	ldr	r2, [r4, #4]
 8018526:	f7ff fcc5 	bl	8017eb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801852a:	b005      	add	sp, #20
 801852c:	bd30      	pop	{r4, r5, pc}
 801852e:	6803      	ldr	r3, [r0, #0]
 8018530:	4621      	mov	r1, r4
 8018532:	689b      	ldr	r3, [r3, #8]
 8018534:	4798      	blx	r3
 8018536:	4b0a      	ldr	r3, [pc, #40]	; (8018560 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8018538:	6818      	ldr	r0, [r3, #0]
 801853a:	b118      	cbz	r0, 8018544 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801853c:	6803      	ldr	r3, [r0, #0]
 801853e:	4621      	mov	r1, r4
 8018540:	689b      	ldr	r3, [r3, #8]
 8018542:	4798      	blx	r3
 8018544:	4b07      	ldr	r3, [pc, #28]	; (8018564 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8018546:	4621      	mov	r1, r4
 8018548:	6818      	ldr	r0, [r3, #0]
 801854a:	6803      	ldr	r3, [r0, #0]
 801854c:	699b      	ldr	r3, [r3, #24]
 801854e:	4798      	blx	r3
 8018550:	e7eb      	b.n	801852a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8018552:	bf00      	nop
 8018554:	200566d4 	.word	0x200566d4
 8018558:	200566d6 	.word	0x200566d6
 801855c:	2005673c 	.word	0x2005673c
 8018560:	20056738 	.word	0x20056738
 8018564:	200566e0 	.word	0x200566e0

08018568 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8018568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801856c:	4604      	mov	r4, r0
 801856e:	b09b      	sub	sp, #108	; 0x6c
 8018570:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8018574:	b129      	cbz	r1, 8018582 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8018576:	2300      	movs	r3, #0
 8018578:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801857c:	b01b      	add	sp, #108	; 0x6c
 801857e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018582:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8018586:	4630      	mov	r0, r6
 8018588:	f7fb fddb 	bl	8014142 <_ZNK8touchgfx4Rect7isEmptyEv>
 801858c:	4605      	mov	r5, r0
 801858e:	b940      	cbnz	r0, 80185a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8018590:	4620      	mov	r0, r4
 8018592:	e896 0006 	ldmia.w	r6, {r1, r2}
 8018596:	f7ff fc8d 	bl	8017eb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801859a:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801859e:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80185a2:	4ba6      	ldr	r3, [pc, #664]	; (801883c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 80185a4:	681b      	ldr	r3, [r3, #0]
 80185a6:	b33b      	cbz	r3, 80185f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80185a8:	4da5      	ldr	r5, [pc, #660]	; (8018840 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 80185aa:	4628      	mov	r0, r5
 80185ac:	f7fb fdc9 	bl	8014142 <_ZNK8touchgfx4Rect7isEmptyEv>
 80185b0:	4606      	mov	r6, r0
 80185b2:	bb08      	cbnz	r0, 80185f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80185b4:	4628      	mov	r0, r5
 80185b6:	f7ff fa1d 	bl	80179f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80185ba:	6829      	ldr	r1, [r5, #0]
 80185bc:	686a      	ldr	r2, [r5, #4]
 80185be:	4620      	mov	r0, r4
 80185c0:	f7ff fc78 	bl	8017eb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80185c4:	802e      	strh	r6, [r5, #0]
 80185c6:	806e      	strh	r6, [r5, #2]
 80185c8:	80ae      	strh	r6, [r5, #4]
 80185ca:	80ee      	strh	r6, [r5, #6]
 80185cc:	4f9d      	ldr	r7, [pc, #628]	; (8018844 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 80185ce:	a809      	add	r0, sp, #36	; 0x24
 80185d0:	f7ff fbe3 	bl	8017d9a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80185d4:	883d      	ldrh	r5, [r7, #0]
 80185d6:	462e      	mov	r6, r5
 80185d8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80185dc:	42b3      	cmp	r3, r6
 80185de:	d910      	bls.n	8018602 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 80185e0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80185e4:	3601      	adds	r6, #1
 80185e6:	a809      	add	r0, sp, #36	; 0x24
 80185e8:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80185ec:	b2b6      	uxth	r6, r6
 80185ee:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80185f2:	f7ff fc3d 	bl	8017e70 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80185f6:	e7ef      	b.n	80185d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80185f8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d1e5      	bne.n	80185cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8018600:	e7bc      	b.n	801857c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8018602:	462e      	mov	r6, r5
 8018604:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8018608:	42b3      	cmp	r3, r6
 801860a:	d90b      	bls.n	8018624 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801860c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018610:	3601      	adds	r6, #1
 8018612:	4620      	mov	r0, r4
 8018614:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8018618:	b2b6      	uxth	r6, r6
 801861a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801861e:	f7ff fc49 	bl	8017eb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018622:	e7ef      	b.n	8018604 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8018624:	4a88      	ldr	r2, [pc, #544]	; (8018848 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8018626:	6813      	ldr	r3, [r2, #0]
 8018628:	4690      	mov	r8, r2
 801862a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801862e:	2b01      	cmp	r3, #1
 8018630:	f040 8094 	bne.w	801875c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8018634:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8018638:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801863c:	f04f 0900 	mov.w	r9, #0
 8018640:	33aa      	adds	r3, #170	; 0xaa
 8018642:	42a8      	cmp	r0, r5
 8018644:	f103 0308 	add.w	r3, r3, #8
 8018648:	dd0a      	ble.n	8018660 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801864a:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801864e:	3501      	adds	r5, #1
 8018650:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8018654:	440a      	add	r2, r1
 8018656:	b212      	sxth	r2, r2
 8018658:	4591      	cmp	r9, r2
 801865a:	bfb8      	it	lt
 801865c:	4691      	movlt	r9, r2
 801865e:	e7f0      	b.n	8018642 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 8018660:	4b7a      	ldr	r3, [pc, #488]	; (801884c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8018662:	4e7b      	ldr	r6, [pc, #492]	; (8018850 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8018664:	881d      	ldrh	r5, [r3, #0]
 8018666:	2300      	movs	r3, #0
 8018668:	2d0f      	cmp	r5, #15
 801866a:	bf8c      	ite	hi
 801866c:	08ed      	lsrhi	r5, r5, #3
 801866e:	2501      	movls	r5, #1
 8018670:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018674:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018678:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801867c:	f8d8 0000 	ldr.w	r0, [r8]
 8018680:	440b      	add	r3, r1
 8018682:	6802      	ldr	r2, [r0, #0]
 8018684:	b21b      	sxth	r3, r3
 8018686:	4599      	cmp	r9, r3
 8018688:	dd4b      	ble.n	8018722 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801868a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 801868e:	4798      	blx	r3
 8018690:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018694:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018698:	4413      	add	r3, r2
 801869a:	b21b      	sxth	r3, r3
 801869c:	195a      	adds	r2, r3, r5
 801869e:	4290      	cmp	r0, r2
 80186a0:	da07      	bge.n	80186b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 80186a2:	4581      	cmp	r9, r0
 80186a4:	dd05      	ble.n	80186b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 80186a6:	4298      	cmp	r0, r3
 80186a8:	da33      	bge.n	8018712 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	dd31      	ble.n	8018712 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 80186ae:	4648      	mov	r0, r9
 80186b0:	e004      	b.n	80186bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 80186b2:	4298      	cmp	r0, r3
 80186b4:	dbfb      	blt.n	80186ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 80186b6:	4548      	cmp	r0, r9
 80186b8:	bfa8      	it	ge
 80186ba:	4648      	movge	r0, r9
 80186bc:	f9b6 2000 	ldrsh.w	r2, [r6]
 80186c0:	2100      	movs	r1, #0
 80186c2:	1ac0      	subs	r0, r0, r3
 80186c4:	f8b7 a000 	ldrh.w	sl, [r7]
 80186c8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80186cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80186d0:	f8ad 2018 	strh.w	r2, [sp, #24]
 80186d4:	f8ad 001a 	strh.w	r0, [sp, #26]
 80186d8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80186dc:	4553      	cmp	r3, sl
 80186de:	d9c9      	bls.n	8018674 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 80186e0:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80186e4:	ab07      	add	r3, sp, #28
 80186e6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80186ea:	6851      	ldr	r1, [r2, #4]
 80186ec:	c303      	stmia	r3!, {r0, r1}
 80186ee:	a807      	add	r0, sp, #28
 80186f0:	a905      	add	r1, sp, #20
 80186f2:	f7fb fce3 	bl	80140bc <_ZN8touchgfx4RectaNERKS0_>
 80186f6:	a807      	add	r0, sp, #28
 80186f8:	f7fb fd23 	bl	8014142 <_ZNK8touchgfx4Rect7isEmptyEv>
 80186fc:	b920      	cbnz	r0, 8018708 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 80186fe:	6823      	ldr	r3, [r4, #0]
 8018700:	a907      	add	r1, sp, #28
 8018702:	4620      	mov	r0, r4
 8018704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018706:	4798      	blx	r3
 8018708:	f10a 0a01 	add.w	sl, sl, #1
 801870c:	fa1f fa8a 	uxth.w	sl, sl
 8018710:	e7e2      	b.n	80186d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 8018712:	f8d8 0000 	ldr.w	r0, [r8]
 8018716:	2101      	movs	r1, #1
 8018718:	6803      	ldr	r3, [r0, #0]
 801871a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801871e:	4798      	blx	r3
 8018720:	e7a8      	b.n	8018674 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8018722:	6a13      	ldr	r3, [r2, #32]
 8018724:	4798      	blx	r3
 8018726:	4b4b      	ldr	r3, [pc, #300]	; (8018854 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8018728:	781b      	ldrb	r3, [r3, #0]
 801872a:	2b00      	cmp	r3, #0
 801872c:	f43f af26 	beq.w	801857c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8018730:	2300      	movs	r3, #0
 8018732:	883d      	ldrh	r5, [r7, #0]
 8018734:	34ea      	adds	r4, #234	; 0xea
 8018736:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801873a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801873e:	42ab      	cmp	r3, r5
 8018740:	f67f af1c 	bls.w	801857c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8018744:	ab1a      	add	r3, sp, #104	; 0x68
 8018746:	4620      	mov	r0, r4
 8018748:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801874c:	3501      	adds	r5, #1
 801874e:	3b44      	subs	r3, #68	; 0x44
 8018750:	b2ad      	uxth	r5, r5
 8018752:	e893 0006 	ldmia.w	r3, {r1, r2}
 8018756:	f7ff fb8b 	bl	8017e70 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801875a:	e7ee      	b.n	801873a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801875c:	2b02      	cmp	r3, #2
 801875e:	f040 813d 	bne.w	80189dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 8018762:	4b3d      	ldr	r3, [pc, #244]	; (8018858 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 8018764:	781b      	ldrb	r3, [r3, #0]
 8018766:	2b01      	cmp	r3, #1
 8018768:	d02c      	beq.n	80187c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801876a:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801876e:	883a      	ldrh	r2, [r7, #0]
 8018770:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 8018774:	3201      	adds	r2, #1
 8018776:	b292      	uxth	r2, r2
 8018778:	2900      	cmp	r1, #0
 801877a:	d0d4      	beq.n	8018726 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801877c:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8018780:	4610      	mov	r0, r2
 8018782:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8018786:	f04f 0a00 	mov.w	sl, #0
 801878a:	441d      	add	r5, r3
 801878c:	b22d      	sxth	r5, r5
 801878e:	b283      	uxth	r3, r0
 8018790:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8018794:	4299      	cmp	r1, r3
 8018796:	f240 80c3 	bls.w	8018920 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801879a:	4426      	add	r6, r4
 801879c:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 80187a0:	4684      	mov	ip, r0
 80187a2:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 80187a6:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 80187aa:	4573      	cmp	r3, lr
 80187ac:	f340 80a5 	ble.w	80188fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 80187b0:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 80187b4:	4475      	add	r5, lr
 80187b6:	b22d      	sxth	r5, r5
 80187b8:	429d      	cmp	r5, r3
 80187ba:	bfa8      	it	ge
 80187bc:	461d      	movge	r5, r3
 80187be:	3001      	adds	r0, #1
 80187c0:	46e2      	mov	sl, ip
 80187c2:	e7e4      	b.n	801878e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 80187c4:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 80187c8:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 80187cc:	f1bb 0f00 	cmp.w	fp, #0
 80187d0:	d0a9      	beq.n	8018726 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80187d2:	883b      	ldrh	r3, [r7, #0]
 80187d4:	2600      	movs	r6, #0
 80187d6:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 80187da:	3301      	adds	r3, #1
 80187dc:	b29b      	uxth	r3, r3
 80187de:	b299      	uxth	r1, r3
 80187e0:	00f5      	lsls	r5, r6, #3
 80187e2:	458b      	cmp	fp, r1
 80187e4:	d93a      	bls.n	801885c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 80187e6:	4425      	add	r5, r4
 80187e8:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80187ec:	469c      	mov	ip, r3
 80187ee:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 80187f2:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 80187f6:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 80187fa:	4408      	add	r0, r1
 80187fc:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8018800:	4471      	add	r1, lr
 8018802:	b200      	sxth	r0, r0
 8018804:	b209      	sxth	r1, r1
 8018806:	4288      	cmp	r0, r1
 8018808:	da06      	bge.n	8018818 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801880a:	4586      	cmp	lr, r0
 801880c:	4672      	mov	r2, lr
 801880e:	bfb8      	it	lt
 8018810:	4602      	movlt	r2, r0
 8018812:	3301      	adds	r3, #1
 8018814:	4666      	mov	r6, ip
 8018816:	e7e2      	b.n	80187de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8018818:	d10b      	bne.n	8018832 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801881a:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801881e:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8018822:	458c      	cmp	ip, r1
 8018824:	bfb4      	ite	lt
 8018826:	469c      	movlt	ip, r3
 8018828:	46b4      	movge	ip, r6
 801882a:	4572      	cmp	r2, lr
 801882c:	bfb8      	it	lt
 801882e:	4672      	movlt	r2, lr
 8018830:	e7ef      	b.n	8018812 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8018832:	428a      	cmp	r2, r1
 8018834:	46b4      	mov	ip, r6
 8018836:	bfb8      	it	lt
 8018838:	460a      	movlt	r2, r1
 801883a:	e7ea      	b.n	8018812 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801883c:	20056738 	.word	0x20056738
 8018840:	20056744 	.word	0x20056744
 8018844:	2000001c 	.word	0x2000001c
 8018848:	200566e0 	.word	0x200566e0
 801884c:	200566d6 	.word	0x200566d6
 8018850:	200566d4 	.word	0x200566d4
 8018854:	200566de 	.word	0x200566de
 8018858:	200566d8 	.word	0x200566d8
 801885c:	1961      	adds	r1, r4, r5
 801885e:	ab07      	add	r3, sp, #28
 8018860:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8018864:	6849      	ldr	r1, [r1, #4]
 8018866:	c303      	stmia	r3!, {r0, r1}
 8018868:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801886c:	a807      	add	r0, sp, #28
 801886e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018872:	2b13      	cmp	r3, #19
 8018874:	440b      	add	r3, r1
 8018876:	bfd8      	it	le
 8018878:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801887c:	1a9b      	subs	r3, r3, r2
 801887e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018882:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018886:	f7ff f90f 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801888a:	a807      	add	r0, sp, #28
 801888c:	f7fb fc59 	bl	8014142 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018890:	2800      	cmp	r0, #0
 8018892:	d199      	bne.n	80187c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8018894:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8018898:	4425      	add	r5, r4
 801889a:	f8d8 0000 	ldr.w	r0, [r8]
 801889e:	f1bc 0f14 	cmp.w	ip, #20
 80188a2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80188a6:	f8d0 e000 	ldr.w	lr, [r0]
 80188aa:	bfa8      	it	ge
 80188ac:	f04f 0c14 	movge.w	ip, #20
 80188b0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80188b4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80188b8:	fa1f fc8c 	uxth.w	ip, ip
 80188bc:	f8cd c000 	str.w	ip, [sp]
 80188c0:	f8de a084 	ldr.w	sl, [lr, #132]	; 0x84
 80188c4:	47d0      	blx	sl
 80188c6:	4682      	mov	sl, r0
 80188c8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80188cc:	a807      	add	r0, sp, #28
 80188ce:	f7ff f891 	bl	80179f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80188d2:	6823      	ldr	r3, [r4, #0]
 80188d4:	4620      	mov	r0, r4
 80188d6:	a907      	add	r1, sp, #28
 80188d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80188da:	4798      	blx	r3
 80188dc:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80188e0:	eba0 000a 	sub.w	r0, r0, sl
 80188e4:	b200      	sxth	r0, r0
 80188e6:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 80188ea:	2800      	cmp	r0, #0
 80188ec:	f47f af6c 	bne.w	80187c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80188f0:	b2b1      	uxth	r1, r6
 80188f2:	4648      	mov	r0, r9
 80188f4:	f7ff faa6 	bl	8017e44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80188f8:	e766      	b.n	80187c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80188fa:	d10c      	bne.n	8018916 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 80188fc:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8018900:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8018904:	45b4      	cmp	ip, r6
 8018906:	bfb4      	ite	lt
 8018908:	4684      	movlt	ip, r0
 801890a:	46d4      	movge	ip, sl
 801890c:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8018910:	4433      	add	r3, r6
 8018912:	b21b      	sxth	r3, r3
 8018914:	e750      	b.n	80187b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 8018916:	4575      	cmp	r5, lr
 8018918:	46d4      	mov	ip, sl
 801891a:	bfa8      	it	ge
 801891c:	4675      	movge	r5, lr
 801891e:	e74e      	b.n	80187be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 8018920:	eb0b 0006 	add.w	r0, fp, r6
 8018924:	4426      	add	r6, r4
 8018926:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801892a:	f1b9 0f13 	cmp.w	r9, #19
 801892e:	bfdc      	itt	le
 8018930:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8018934:	444d      	addle	r5, r9
 8018936:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801893a:	bfd8      	it	le
 801893c:	b22d      	sxthle	r5, r5
 801893e:	f7fb fc00 	bl	8014142 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018942:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8018946:	2800      	cmp	r0, #0
 8018948:	f47f af16 	bne.w	8018778 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801894c:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8018950:	fa1f f989 	uxth.w	r9, r9
 8018954:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018958:	eba5 050c 	sub.w	r5, r5, ip
 801895c:	fa1f f28c 	uxth.w	r2, ip
 8018960:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 8018964:	eb02 0009 	add.w	r0, r2, r9
 8018968:	2d14      	cmp	r5, #20
 801896a:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801896e:	bfa8      	it	ge
 8018970:	2514      	movge	r5, #20
 8018972:	b200      	sxth	r0, r0
 8018974:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018978:	b289      	uxth	r1, r1
 801897a:	fa1f fe85 	uxth.w	lr, r5
 801897e:	eba0 000c 	sub.w	r0, r0, ip
 8018982:	f8ad c01e 	strh.w	ip, [sp, #30]
 8018986:	4586      	cmp	lr, r0
 8018988:	f8d8 0000 	ldr.w	r0, [r8]
 801898c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018990:	b29b      	uxth	r3, r3
 8018992:	bfb8      	it	lt
 8018994:	46f1      	movlt	r9, lr
 8018996:	6805      	ldr	r5, [r0, #0]
 8018998:	f8cd 9000 	str.w	r9, [sp]
 801899c:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
 80189a0:	47a8      	blx	r5
 80189a2:	6823      	ldr	r3, [r4, #0]
 80189a4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80189a8:	a907      	add	r1, sp, #28
 80189aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80189ac:	4620      	mov	r0, r4
 80189ae:	4798      	blx	r3
 80189b0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80189b4:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 80189b8:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 80189bc:	1a5b      	subs	r3, r3, r1
 80189be:	440a      	add	r2, r1
 80189c0:	b21b      	sxth	r3, r3
 80189c2:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 80189c6:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	f47f aecf 	bne.w	801876e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 80189d0:	fa1f f18a 	uxth.w	r1, sl
 80189d4:	4658      	mov	r0, fp
 80189d6:	f7ff fa35 	bl	8017e44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80189da:	e6c8      	b.n	801876e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 80189dc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80189e0:	42ab      	cmp	r3, r5
 80189e2:	f67f aea0 	bls.w	8018726 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80189e6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80189ea:	ab07      	add	r3, sp, #28
 80189ec:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80189f0:	6851      	ldr	r1, [r2, #4]
 80189f2:	c303      	stmia	r3!, {r0, r1}
 80189f4:	a807      	add	r0, sp, #28
 80189f6:	f7fb fba4 	bl	8014142 <_ZNK8touchgfx4Rect7isEmptyEv>
 80189fa:	b920      	cbnz	r0, 8018a06 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 80189fc:	6823      	ldr	r3, [r4, #0]
 80189fe:	a907      	add	r1, sp, #28
 8018a00:	4620      	mov	r0, r4
 8018a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a04:	4798      	blx	r3
 8018a06:	3501      	adds	r5, #1
 8018a08:	b2ad      	uxth	r5, r5
 8018a0a:	e7e7      	b.n	80189dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08018a0c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018a0c:	4b03      	ldr	r3, [pc, #12]	; (8018a1c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018a0e:	2200      	movs	r2, #0
 8018a10:	801a      	strh	r2, [r3, #0]
 8018a12:	805a      	strh	r2, [r3, #2]
 8018a14:	809a      	strh	r2, [r3, #4]
 8018a16:	80da      	strh	r2, [r3, #6]
 8018a18:	4770      	bx	lr
 8018a1a:	bf00      	nop
 8018a1c:	20056744 	.word	0x20056744

08018a20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a24:	b09b      	sub	sp, #108	; 0x6c
 8018a26:	4606      	mov	r6, r0
 8018a28:	4614      	mov	r4, r2
 8018a2a:	468a      	mov	sl, r1
 8018a2c:	a803      	add	r0, sp, #12
 8018a2e:	461d      	mov	r5, r3
 8018a30:	f000 fe85 	bl	801973e <_ZN8touchgfx12TextProviderC1Ev>
 8018a34:	6833      	ldr	r3, [r6, #0]
 8018a36:	4630      	mov	r0, r6
 8018a38:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8018a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a3e:	4798      	blx	r3
 8018a40:	6833      	ldr	r3, [r6, #0]
 8018a42:	4607      	mov	r7, r0
 8018a44:	4630      	mov	r0, r6
 8018a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018a48:	4798      	blx	r3
 8018a4a:	462a      	mov	r2, r5
 8018a4c:	2500      	movs	r5, #0
 8018a4e:	4621      	mov	r1, r4
 8018a50:	9000      	str	r0, [sp, #0]
 8018a52:	463b      	mov	r3, r7
 8018a54:	462c      	mov	r4, r5
 8018a56:	46a9      	mov	r9, r5
 8018a58:	46a8      	mov	r8, r5
 8018a5a:	a803      	add	r0, sp, #12
 8018a5c:	f000 febc 	bl	80197d8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018a60:	2300      	movs	r3, #0
 8018a62:	9302      	str	r3, [sp, #8]
 8018a64:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018a68:	429c      	cmp	r4, r3
 8018a6a:	d002      	beq.n	8018a72 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8018a6c:	455c      	cmp	r4, fp
 8018a6e:	bf18      	it	ne
 8018a70:	4625      	movne	r5, r4
 8018a72:	ab02      	add	r3, sp, #8
 8018a74:	4632      	mov	r2, r6
 8018a76:	4651      	mov	r1, sl
 8018a78:	a803      	add	r0, sp, #12
 8018a7a:	f001 f9a9 	bl	8019dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018a7e:	4604      	mov	r4, r0
 8018a80:	b108      	cbz	r0, 8018a86 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8018a82:	280a      	cmp	r0, #10
 8018a84:	d10a      	bne.n	8018a9c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8018a86:	45c1      	cmp	r9, r8
 8018a88:	bf38      	it	cc
 8018a8a:	46c1      	movcc	r9, r8
 8018a8c:	f04f 0800 	mov.w	r8, #0
 8018a90:	2c00      	cmp	r4, #0
 8018a92:	d1e5      	bne.n	8018a60 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018a94:	4648      	mov	r0, r9
 8018a96:	b01b      	add	sp, #108	; 0x6c
 8018a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a9c:	9a02      	ldr	r2, [sp, #8]
 8018a9e:	2a00      	cmp	r2, #0
 8018aa0:	d0de      	beq.n	8018a60 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018aa2:	7b57      	ldrb	r7, [r2, #13]
 8018aa4:	4629      	mov	r1, r5
 8018aa6:	6833      	ldr	r3, [r6, #0]
 8018aa8:	007f      	lsls	r7, r7, #1
 8018aaa:	8894      	ldrh	r4, [r2, #4]
 8018aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018aae:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8018ab2:	7a97      	ldrb	r7, [r2, #10]
 8018ab4:	4307      	orrs	r7, r0
 8018ab6:	4630      	mov	r0, r6
 8018ab8:	4798      	blx	r3
 8018aba:	4438      	add	r0, r7
 8018abc:	4480      	add	r8, r0
 8018abe:	fa1f f888 	uxth.w	r8, r8
 8018ac2:	e7e5      	b.n	8018a90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08018ac4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8018ac4:	b508      	push	{r3, lr}
 8018ac6:	6803      	ldr	r3, [r0, #0]
 8018ac8:	68db      	ldr	r3, [r3, #12]
 8018aca:	4798      	blx	r3
 8018acc:	b128      	cbz	r0, 8018ada <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8018ace:	7b43      	ldrb	r3, [r0, #13]
 8018ad0:	7a80      	ldrb	r0, [r0, #10]
 8018ad2:	005b      	lsls	r3, r3, #1
 8018ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ad8:	4318      	orrs	r0, r3
 8018ada:	bd08      	pop	{r3, pc}

08018adc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8018adc:	b40e      	push	{r1, r2, r3}
 8018ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ae0:	b09c      	sub	sp, #112	; 0x70
 8018ae2:	4605      	mov	r5, r0
 8018ae4:	ab21      	add	r3, sp, #132	; 0x84
 8018ae6:	a805      	add	r0, sp, #20
 8018ae8:	f853 4b04 	ldr.w	r4, [r3], #4
 8018aec:	9303      	str	r3, [sp, #12]
 8018aee:	f000 fe26 	bl	801973e <_ZN8touchgfx12TextProviderC1Ev>
 8018af2:	682b      	ldr	r3, [r5, #0]
 8018af4:	4628      	mov	r0, r5
 8018af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018af8:	4798      	blx	r3
 8018afa:	682b      	ldr	r3, [r5, #0]
 8018afc:	4606      	mov	r6, r0
 8018afe:	4628      	mov	r0, r5
 8018b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018b02:	4798      	blx	r3
 8018b04:	4633      	mov	r3, r6
 8018b06:	4621      	mov	r1, r4
 8018b08:	ae1c      	add	r6, sp, #112	; 0x70
 8018b0a:	2400      	movs	r4, #0
 8018b0c:	9000      	str	r0, [sp, #0]
 8018b0e:	9a03      	ldr	r2, [sp, #12]
 8018b10:	a805      	add	r0, sp, #20
 8018b12:	f000 fe61 	bl	80197d8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018b16:	f846 4d60 	str.w	r4, [r6, #-96]!
 8018b1a:	462a      	mov	r2, r5
 8018b1c:	4633      	mov	r3, r6
 8018b1e:	4621      	mov	r1, r4
 8018b20:	a805      	add	r0, sp, #20
 8018b22:	f001 f955 	bl	8019dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018b26:	b300      	cbz	r0, 8018b6a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8018b28:	280a      	cmp	r0, #10
 8018b2a:	d01a      	beq.n	8018b62 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018b2c:	9f04      	ldr	r7, [sp, #16]
 8018b2e:	b1c7      	cbz	r7, 8018b62 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018b30:	7b78      	ldrb	r0, [r7, #13]
 8018b32:	7a3b      	ldrb	r3, [r7, #8]
 8018b34:	00c1      	lsls	r1, r0, #3
 8018b36:	88aa      	ldrh	r2, [r5, #4]
 8018b38:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018b3c:	4319      	orrs	r1, r3
 8018b3e:	0643      	lsls	r3, r0, #25
 8018b40:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8018b44:	bf48      	it	mi
 8018b46:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8018b4a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018b4e:	bf48      	it	mi
 8018b50:	b219      	sxthmi	r1, r3
 8018b52:	79fb      	ldrb	r3, [r7, #7]
 8018b54:	4303      	orrs	r3, r0
 8018b56:	4413      	add	r3, r2
 8018b58:	1a5b      	subs	r3, r3, r1
 8018b5a:	b29b      	uxth	r3, r3
 8018b5c:	42a3      	cmp	r3, r4
 8018b5e:	bfc8      	it	gt
 8018b60:	b21c      	sxthgt	r4, r3
 8018b62:	4633      	mov	r3, r6
 8018b64:	462a      	mov	r2, r5
 8018b66:	2100      	movs	r1, #0
 8018b68:	e7da      	b.n	8018b20 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8018b6a:	b2a0      	uxth	r0, r4
 8018b6c:	b01c      	add	sp, #112	; 0x70
 8018b6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018b72:	b003      	add	sp, #12
 8018b74:	4770      	bx	lr

08018b76 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8018b76:	b40e      	push	{r1, r2, r3}
 8018b78:	b570      	push	{r4, r5, r6, lr}
 8018b7a:	b09b      	sub	sp, #108	; 0x6c
 8018b7c:	4604      	mov	r4, r0
 8018b7e:	ab1f      	add	r3, sp, #124	; 0x7c
 8018b80:	a803      	add	r0, sp, #12
 8018b82:	f853 5b04 	ldr.w	r5, [r3], #4
 8018b86:	9302      	str	r3, [sp, #8]
 8018b88:	f000 fdd9 	bl	801973e <_ZN8touchgfx12TextProviderC1Ev>
 8018b8c:	6823      	ldr	r3, [r4, #0]
 8018b8e:	4620      	mov	r0, r4
 8018b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b92:	4798      	blx	r3
 8018b94:	6823      	ldr	r3, [r4, #0]
 8018b96:	4606      	mov	r6, r0
 8018b98:	4620      	mov	r0, r4
 8018b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018b9c:	2401      	movs	r4, #1
 8018b9e:	4798      	blx	r3
 8018ba0:	4633      	mov	r3, r6
 8018ba2:	9000      	str	r0, [sp, #0]
 8018ba4:	4629      	mov	r1, r5
 8018ba6:	9a02      	ldr	r2, [sp, #8]
 8018ba8:	a803      	add	r0, sp, #12
 8018baa:	f000 fe15 	bl	80197d8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018bae:	a803      	add	r0, sp, #12
 8018bb0:	f001 fa06 	bl	8019fc0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018bb4:	b2a3      	uxth	r3, r4
 8018bb6:	b138      	cbz	r0, 8018bc8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8018bb8:	280a      	cmp	r0, #10
 8018bba:	a803      	add	r0, sp, #12
 8018bbc:	bf04      	itt	eq
 8018bbe:	3301      	addeq	r3, #1
 8018bc0:	b21c      	sxtheq	r4, r3
 8018bc2:	f001 f9fd 	bl	8019fc0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018bc6:	e7f5      	b.n	8018bb4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8018bc8:	4618      	mov	r0, r3
 8018bca:	b01b      	add	sp, #108	; 0x6c
 8018bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018bd0:	b003      	add	sp, #12
 8018bd2:	4770      	bx	lr

08018bd4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018bd4:	b40e      	push	{r1, r2, r3}
 8018bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bd8:	b09c      	sub	sp, #112	; 0x70
 8018bda:	4604      	mov	r4, r0
 8018bdc:	ab21      	add	r3, sp, #132	; 0x84
 8018bde:	a805      	add	r0, sp, #20
 8018be0:	f853 5b04 	ldr.w	r5, [r3], #4
 8018be4:	9303      	str	r3, [sp, #12]
 8018be6:	f000 fdaa 	bl	801973e <_ZN8touchgfx12TextProviderC1Ev>
 8018bea:	6823      	ldr	r3, [r4, #0]
 8018bec:	4620      	mov	r0, r4
 8018bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018bf0:	4798      	blx	r3
 8018bf2:	6823      	ldr	r3, [r4, #0]
 8018bf4:	4606      	mov	r6, r0
 8018bf6:	4620      	mov	r0, r4
 8018bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018bfa:	4798      	blx	r3
 8018bfc:	4633      	mov	r3, r6
 8018bfe:	4629      	mov	r1, r5
 8018c00:	9000      	str	r0, [sp, #0]
 8018c02:	9a03      	ldr	r2, [sp, #12]
 8018c04:	a805      	add	r0, sp, #20
 8018c06:	f000 fde7 	bl	80197d8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018c0a:	ad1c      	add	r5, sp, #112	; 0x70
 8018c0c:	2100      	movs	r1, #0
 8018c0e:	26ff      	movs	r6, #255	; 0xff
 8018c10:	4622      	mov	r2, r4
 8018c12:	a805      	add	r0, sp, #20
 8018c14:	f845 1d60 	str.w	r1, [r5, #-96]!
 8018c18:	462b      	mov	r3, r5
 8018c1a:	f001 f8d9 	bl	8019dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018c1e:	b1d8      	cbz	r0, 8018c58 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8018c20:	280a      	cmp	r0, #10
 8018c22:	d012      	beq.n	8018c4a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8018c24:	9804      	ldr	r0, [sp, #16]
 8018c26:	b180      	cbz	r0, 8018c4a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8018c28:	7b47      	ldrb	r7, [r0, #13]
 8018c2a:	7922      	ldrb	r2, [r4, #4]
 8018c2c:	00fb      	lsls	r3, r7, #3
 8018c2e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018c32:	7a03      	ldrb	r3, [r0, #8]
 8018c34:	430b      	orrs	r3, r1
 8018c36:	0679      	lsls	r1, r7, #25
 8018c38:	bf44      	itt	mi
 8018c3a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018c3e:	b21b      	sxthmi	r3, r3
 8018c40:	1ad3      	subs	r3, r2, r3
 8018c42:	b2db      	uxtb	r3, r3
 8018c44:	429e      	cmp	r6, r3
 8018c46:	bf28      	it	cs
 8018c48:	461e      	movcs	r6, r3
 8018c4a:	462b      	mov	r3, r5
 8018c4c:	4622      	mov	r2, r4
 8018c4e:	2100      	movs	r1, #0
 8018c50:	a805      	add	r0, sp, #20
 8018c52:	f001 f8bd 	bl	8019dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018c56:	e7e2      	b.n	8018c1e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8018c58:	4630      	mov	r0, r6
 8018c5a:	b01c      	add	sp, #112	; 0x70
 8018c5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018c60:	b003      	add	sp, #12
 8018c62:	4770      	bx	lr

08018c64 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8018c64:	b513      	push	{r0, r1, r4, lr}
 8018c66:	1d01      	adds	r1, r0, #4
 8018c68:	4603      	mov	r3, r0
 8018c6a:	466a      	mov	r2, sp
 8018c6c:	c903      	ldmia	r1, {r0, r1}
 8018c6e:	e882 0003 	stmia.w	r2, {r0, r1}
 8018c72:	2100      	movs	r1, #0
 8018c74:	4618      	mov	r0, r3
 8018c76:	9100      	str	r1, [sp, #0]
 8018c78:	6819      	ldr	r1, [r3, #0]
 8018c7a:	690c      	ldr	r4, [r1, #16]
 8018c7c:	4611      	mov	r1, r2
 8018c7e:	47a0      	blx	r4
 8018c80:	b002      	add	sp, #8
 8018c82:	bd10      	pop	{r4, pc}

08018c84 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8018c84:	b538      	push	{r3, r4, r5, lr}
 8018c86:	680b      	ldr	r3, [r1, #0]
 8018c88:	460c      	mov	r4, r1
 8018c8a:	4605      	mov	r5, r0
 8018c8c:	68db      	ldr	r3, [r3, #12]
 8018c8e:	4798      	blx	r3
 8018c90:	6823      	ldr	r3, [r4, #0]
 8018c92:	4620      	mov	r0, r4
 8018c94:	4629      	mov	r1, r5
 8018c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c98:	4798      	blx	r3
 8018c9a:	4628      	mov	r0, r5
 8018c9c:	bd38      	pop	{r3, r4, r5, pc}

08018c9e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018c9e:	b410      	push	{r4}
 8018ca0:	880a      	ldrh	r2, [r1, #0]
 8018ca2:	8884      	ldrh	r4, [r0, #4]
 8018ca4:	4422      	add	r2, r4
 8018ca6:	800a      	strh	r2, [r1, #0]
 8018ca8:	884a      	ldrh	r2, [r1, #2]
 8018caa:	88c4      	ldrh	r4, [r0, #6]
 8018cac:	4422      	add	r2, r4
 8018cae:	804a      	strh	r2, [r1, #2]
 8018cb0:	6940      	ldr	r0, [r0, #20]
 8018cb2:	b120      	cbz	r0, 8018cbe <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018cb4:	6803      	ldr	r3, [r0, #0]
 8018cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018cbc:	4718      	bx	r3
 8018cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018cc2:	4770      	bx	lr

08018cc4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8018cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cc6:	460b      	mov	r3, r1
 8018cc8:	b085      	sub	sp, #20
 8018cca:	4604      	mov	r4, r0
 8018ccc:	b901      	cbnz	r1, 8018cd0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8018cce:	b322      	cbz	r2, 8018d1a <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 8018cd0:	1d27      	adds	r7, r4, #4
 8018cd2:	466e      	mov	r6, sp
 8018cd4:	88e5      	ldrh	r5, [r4, #6]
 8018cd6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018cda:	442a      	add	r2, r5
 8018cdc:	e886 0003 	stmia.w	r6, {r0, r1}
 8018ce0:	88a1      	ldrh	r1, [r4, #4]
 8018ce2:	4620      	mov	r0, r4
 8018ce4:	b215      	sxth	r5, r2
 8018ce6:	4419      	add	r1, r3
 8018ce8:	6823      	ldr	r3, [r4, #0]
 8018cea:	b209      	sxth	r1, r1
 8018cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cee:	4798      	blx	r3
 8018cf0:	6823      	ldr	r3, [r4, #0]
 8018cf2:	4629      	mov	r1, r5
 8018cf4:	4620      	mov	r0, r4
 8018cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018cf8:	ad02      	add	r5, sp, #8
 8018cfa:	4798      	blx	r3
 8018cfc:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018d00:	e885 0003 	stmia.w	r5, {r0, r1}
 8018d04:	6960      	ldr	r0, [r4, #20]
 8018d06:	b150      	cbz	r0, 8018d1e <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 8018d08:	6803      	ldr	r3, [r0, #0]
 8018d0a:	4631      	mov	r1, r6
 8018d0c:	691b      	ldr	r3, [r3, #16]
 8018d0e:	4798      	blx	r3
 8018d10:	6960      	ldr	r0, [r4, #20]
 8018d12:	6803      	ldr	r3, [r0, #0]
 8018d14:	691b      	ldr	r3, [r3, #16]
 8018d16:	4629      	mov	r1, r5
 8018d18:	4798      	blx	r3
 8018d1a:	b005      	add	sp, #20
 8018d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d1e:	f7ff f82b 	bl	8017d78 <_ZN8touchgfx11Application11getInstanceEv>
 8018d22:	6803      	ldr	r3, [r0, #0]
 8018d24:	4631      	mov	r1, r6
 8018d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018d28:	4798      	blx	r3
 8018d2a:	f7ff f825 	bl	8017d78 <_ZN8touchgfx11Application11getInstanceEv>
 8018d2e:	6803      	ldr	r3, [r0, #0]
 8018d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018d32:	e7f0      	b.n	8018d16 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

08018d34 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018d36:	8882      	ldrh	r2, [r0, #4]
 8018d38:	4605      	mov	r5, r0
 8018d3a:	880b      	ldrh	r3, [r1, #0]
 8018d3c:	460c      	mov	r4, r1
 8018d3e:	4413      	add	r3, r2
 8018d40:	800b      	strh	r3, [r1, #0]
 8018d42:	884b      	ldrh	r3, [r1, #2]
 8018d44:	88c2      	ldrh	r2, [r0, #6]
 8018d46:	4413      	add	r3, r2
 8018d48:	4602      	mov	r2, r0
 8018d4a:	804b      	strh	r3, [r1, #2]
 8018d4c:	466b      	mov	r3, sp
 8018d4e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018d52:	6851      	ldr	r1, [r2, #4]
 8018d54:	c303      	stmia	r3!, {r0, r1}
 8018d56:	4621      	mov	r1, r4
 8018d58:	4668      	mov	r0, sp
 8018d5a:	f7fb f9af 	bl	80140bc <_ZN8touchgfx4RectaNERKS0_>
 8018d5e:	466b      	mov	r3, sp
 8018d60:	cb03      	ldmia	r3!, {r0, r1}
 8018d62:	6020      	str	r0, [r4, #0]
 8018d64:	6061      	str	r1, [r4, #4]
 8018d66:	6968      	ldr	r0, [r5, #20]
 8018d68:	b128      	cbz	r0, 8018d76 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8018d6a:	6803      	ldr	r3, [r0, #0]
 8018d6c:	691b      	ldr	r3, [r3, #16]
 8018d6e:	4621      	mov	r1, r4
 8018d70:	4798      	blx	r3
 8018d72:	b003      	add	sp, #12
 8018d74:	bd30      	pop	{r4, r5, pc}
 8018d76:	f7fe ffff 	bl	8017d78 <_ZN8touchgfx11Application11getInstanceEv>
 8018d7a:	6803      	ldr	r3, [r0, #0]
 8018d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018d7e:	e7f6      	b.n	8018d6e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08018d80 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018d80:	b570      	push	{r4, r5, r6, lr}
 8018d82:	8882      	ldrh	r2, [r0, #4]
 8018d84:	460c      	mov	r4, r1
 8018d86:	880b      	ldrh	r3, [r1, #0]
 8018d88:	4605      	mov	r5, r0
 8018d8a:	4413      	add	r3, r2
 8018d8c:	800b      	strh	r3, [r1, #0]
 8018d8e:	884b      	ldrh	r3, [r1, #2]
 8018d90:	88c2      	ldrh	r2, [r0, #6]
 8018d92:	4413      	add	r3, r2
 8018d94:	804b      	strh	r3, [r1, #2]
 8018d96:	1d01      	adds	r1, r0, #4
 8018d98:	4620      	mov	r0, r4
 8018d9a:	f7fb f98f 	bl	80140bc <_ZN8touchgfx4RectaNERKS0_>
 8018d9e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	dd0b      	ble.n	8018dbe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018da6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	dd07      	ble.n	8018dbe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018dae:	6968      	ldr	r0, [r5, #20]
 8018db0:	b128      	cbz	r0, 8018dbe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018db2:	6803      	ldr	r3, [r0, #0]
 8018db4:	4621      	mov	r1, r4
 8018db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018dbc:	4718      	bx	r3
 8018dbe:	bd70      	pop	{r4, r5, r6, pc}

08018dc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8018dc0:	b510      	push	{r4, lr}
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	4604      	mov	r4, r0
 8018dc6:	4608      	mov	r0, r1
 8018dc8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8018dcc:	8023      	strh	r3, [r4, #0]
 8018dce:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018dd2:	8063      	strh	r3, [r4, #2]
 8018dd4:	6803      	ldr	r3, [r0, #0]
 8018dd6:	80a1      	strh	r1, [r4, #4]
 8018dd8:	4621      	mov	r1, r4
 8018dda:	80e2      	strh	r2, [r4, #6]
 8018ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018dde:	4798      	blx	r3
 8018de0:	4620      	mov	r0, r4
 8018de2:	bd10      	pop	{r4, pc}

08018de4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8018de4:	b530      	push	{r4, r5, lr}
 8018de6:	8083      	strh	r3, [r0, #4]
 8018de8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018dec:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8018df0:	7183      	strb	r3, [r0, #6]
 8018df2:	79c3      	ldrb	r3, [r0, #7]
 8018df4:	6101      	str	r1, [r0, #16]
 8018df6:	f365 0306 	bfi	r3, r5, #0, #7
 8018dfa:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8018dfe:	8282      	strh	r2, [r0, #20]
 8018e00:	f365 13c7 	bfi	r3, r5, #7, #1
 8018e04:	71c3      	strb	r3, [r0, #7]
 8018e06:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8018e0a:	7203      	strb	r3, [r0, #8]
 8018e0c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8018e10:	7243      	strb	r3, [r0, #9]
 8018e12:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018e16:	8143      	strh	r3, [r0, #10]
 8018e18:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018e1c:	8183      	strh	r3, [r0, #12]
 8018e1e:	4b01      	ldr	r3, [pc, #4]	; (8018e24 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8018e20:	6003      	str	r3, [r0, #0]
 8018e22:	bd30      	pop	{r4, r5, pc}
 8018e24:	0802c210 	.word	0x0802c210

08018e28 <_ZNK8touchgfx9ConstFont4findEt>:
 8018e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e2a:	6904      	ldr	r4, [r0, #16]
 8018e2c:	b3bc      	cbz	r4, 8018e9e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018e2e:	88a3      	ldrh	r3, [r4, #4]
 8018e30:	8a82      	ldrh	r2, [r0, #20]
 8018e32:	1acb      	subs	r3, r1, r3
 8018e34:	f102 32ff 	add.w	r2, r2, #4294967295
 8018e38:	d431      	bmi.n	8018e9e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018e3a:	4293      	cmp	r3, r2
 8018e3c:	dd0c      	ble.n	8018e58 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8018e3e:	230e      	movs	r3, #14
 8018e40:	fb03 4302 	mla	r3, r3, r2, r4
 8018e44:	889b      	ldrh	r3, [r3, #4]
 8018e46:	1a5b      	subs	r3, r3, r1
 8018e48:	1ad3      	subs	r3, r2, r3
 8018e4a:	429a      	cmp	r2, r3
 8018e4c:	db27      	blt.n	8018e9e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	bfbc      	itt	lt
 8018e52:	2302      	movlt	r3, #2
 8018e54:	fb92 f3f3 	sdivlt	r3, r2, r3
 8018e58:	2500      	movs	r5, #0
 8018e5a:	260e      	movs	r6, #14
 8018e5c:	4295      	cmp	r5, r2
 8018e5e:	dc1e      	bgt.n	8018e9e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018e60:	fb06 4003 	mla	r0, r6, r3, r4
 8018e64:	8887      	ldrh	r7, [r0, #4]
 8018e66:	42b9      	cmp	r1, r7
 8018e68:	d01a      	beq.n	8018ea0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8018e6a:	d20d      	bcs.n	8018e88 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8018e6c:	1e5a      	subs	r2, r3, #1
 8018e6e:	4295      	cmp	r5, r2
 8018e70:	dc15      	bgt.n	8018e9e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018e72:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8018e76:	1a5b      	subs	r3, r3, r1
 8018e78:	1ad3      	subs	r3, r2, r3
 8018e7a:	429a      	cmp	r2, r3
 8018e7c:	db0f      	blt.n	8018e9e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018e7e:	429d      	cmp	r5, r3
 8018e80:	ddec      	ble.n	8018e5c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018e82:	1953      	adds	r3, r2, r5
 8018e84:	105b      	asrs	r3, r3, #1
 8018e86:	e7e9      	b.n	8018e5c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018e88:	1c5d      	adds	r5, r3, #1
 8018e8a:	42aa      	cmp	r2, r5
 8018e8c:	db07      	blt.n	8018e9e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018e8e:	8a43      	ldrh	r3, [r0, #18]
 8018e90:	1acb      	subs	r3, r1, r3
 8018e92:	442b      	add	r3, r5
 8018e94:	429d      	cmp	r5, r3
 8018e96:	dc02      	bgt.n	8018e9e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018e98:	429a      	cmp	r2, r3
 8018e9a:	dadf      	bge.n	8018e5c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018e9c:	e7f1      	b.n	8018e82 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8018e9e:	2000      	movs	r0, #0
 8018ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018ea2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8018ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ea4:	4604      	mov	r4, r0
 8018ea6:	4617      	mov	r7, r2
 8018ea8:	461e      	mov	r6, r3
 8018eaa:	b911      	cbnz	r1, 8018eb2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018eac:	2500      	movs	r5, #0
 8018eae:	4628      	mov	r0, r5
 8018eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018eb2:	290a      	cmp	r1, #10
 8018eb4:	d0fa      	beq.n	8018eac <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018eb6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018eba:	4291      	cmp	r1, r2
 8018ebc:	d0f6      	beq.n	8018eac <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018ebe:	f242 020b 	movw	r2, #8203	; 0x200b
 8018ec2:	4291      	cmp	r1, r2
 8018ec4:	d0f2      	beq.n	8018eac <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018ec6:	f7ff ffaf 	bl	8018e28 <_ZNK8touchgfx9ConstFont4findEt>
 8018eca:	4605      	mov	r5, r0
 8018ecc:	b950      	cbnz	r0, 8018ee4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018ece:	6823      	ldr	r3, [r4, #0]
 8018ed0:	4620      	mov	r0, r4
 8018ed2:	691b      	ldr	r3, [r3, #16]
 8018ed4:	4798      	blx	r3
 8018ed6:	4601      	mov	r1, r0
 8018ed8:	4620      	mov	r0, r4
 8018eda:	f7ff ffa5 	bl	8018e28 <_ZNK8touchgfx9ConstFont4findEt>
 8018ede:	4605      	mov	r5, r0
 8018ee0:	2800      	cmp	r0, #0
 8018ee2:	d0e3      	beq.n	8018eac <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018ee4:	6823      	ldr	r3, [r4, #0]
 8018ee6:	4629      	mov	r1, r5
 8018ee8:	4620      	mov	r0, r4
 8018eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018eec:	4798      	blx	r3
 8018eee:	6038      	str	r0, [r7, #0]
 8018ef0:	6823      	ldr	r3, [r4, #0]
 8018ef2:	4620      	mov	r0, r4
 8018ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018ef6:	4798      	blx	r3
 8018ef8:	7030      	strb	r0, [r6, #0]
 8018efa:	e7d8      	b.n	8018eae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018efc <_ZN8touchgfx6memsetEPvhm>:
 8018efc:	4402      	add	r2, r0
 8018efe:	4290      	cmp	r0, r2
 8018f00:	d002      	beq.n	8018f08 <_ZN8touchgfx6memsetEPvhm+0xc>
 8018f02:	f800 1b01 	strb.w	r1, [r0], #1
 8018f06:	e7fa      	b.n	8018efe <_ZN8touchgfx6memsetEPvhm+0x2>
 8018f08:	4770      	bx	lr

08018f0a <_ZN8touchgfx4clzuEm>:
 8018f0a:	4603      	mov	r3, r0
 8018f0c:	b1c8      	cbz	r0, 8018f42 <_ZN8touchgfx4clzuEm+0x38>
 8018f0e:	0c02      	lsrs	r2, r0, #16
 8018f10:	0412      	lsls	r2, r2, #16
 8018f12:	b9a2      	cbnz	r2, 8018f3e <_ZN8touchgfx4clzuEm+0x34>
 8018f14:	0403      	lsls	r3, r0, #16
 8018f16:	2010      	movs	r0, #16
 8018f18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018f1c:	bf04      	itt	eq
 8018f1e:	021b      	lsleq	r3, r3, #8
 8018f20:	3008      	addeq	r0, #8
 8018f22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018f26:	bf04      	itt	eq
 8018f28:	011b      	lsleq	r3, r3, #4
 8018f2a:	3004      	addeq	r0, #4
 8018f2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018f30:	bf04      	itt	eq
 8018f32:	009b      	lsleq	r3, r3, #2
 8018f34:	3002      	addeq	r0, #2
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	db04      	blt.n	8018f44 <_ZN8touchgfx4clzuEm+0x3a>
 8018f3a:	3001      	adds	r0, #1
 8018f3c:	4770      	bx	lr
 8018f3e:	2000      	movs	r0, #0
 8018f40:	e7ea      	b.n	8018f18 <_ZN8touchgfx4clzuEm+0xe>
 8018f42:	2020      	movs	r0, #32
 8018f44:	4770      	bx	lr

08018f46 <_ZN8touchgfx7muldivuEmmmRm>:
 8018f46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f4a:	4680      	mov	r8, r0
 8018f4c:	460f      	mov	r7, r1
 8018f4e:	4615      	mov	r5, r2
 8018f50:	461e      	mov	r6, r3
 8018f52:	f7ff ffda 	bl	8018f0a <_ZN8touchgfx4clzuEm>
 8018f56:	b998      	cbnz	r0, 8018f80 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8018f58:	4608      	mov	r0, r1
 8018f5a:	f7ff ffd6 	bl	8018f0a <_ZN8touchgfx4clzuEm>
 8018f5e:	2800      	cmp	r0, #0
 8018f60:	dd08      	ble.n	8018f74 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8018f62:	4633      	mov	r3, r6
 8018f64:	462a      	mov	r2, r5
 8018f66:	4641      	mov	r1, r8
 8018f68:	4638      	mov	r0, r7
 8018f6a:	f7ff ffec 	bl	8018f46 <_ZN8touchgfx7muldivuEmmmRm>
 8018f6e:	b003      	add	sp, #12
 8018f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f74:	f04f 33ff 	mov.w	r3, #4294967295
 8018f78:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018f7c:	6033      	str	r3, [r6, #0]
 8018f7e:	e7f6      	b.n	8018f6e <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8018f80:	fa31 f900 	lsrs.w	r9, r1, r0
 8018f84:	fb01 f308 	mul.w	r3, r1, r8
 8018f88:	d105      	bne.n	8018f96 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8018f8a:	fbb3 f0f5 	udiv	r0, r3, r5
 8018f8e:	fb05 3510 	mls	r5, r5, r0, r3
 8018f92:	6035      	str	r5, [r6, #0]
 8018f94:	e7eb      	b.n	8018f6e <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8018f96:	2301      	movs	r3, #1
 8018f98:	fa08 fb00 	lsl.w	fp, r8, r0
 8018f9c:	462a      	mov	r2, r5
 8018f9e:	4641      	mov	r1, r8
 8018fa0:	fa03 f000 	lsl.w	r0, r3, r0
 8018fa4:	4633      	mov	r3, r6
 8018fa6:	fbbb faf5 	udiv	sl, fp, r5
 8018faa:	3801      	subs	r0, #1
 8018fac:	fb09 f40a 	mul.w	r4, r9, sl
 8018fb0:	4038      	ands	r0, r7
 8018fb2:	f7ff ffc8 	bl	8018f46 <_ZN8touchgfx7muldivuEmmmRm>
 8018fb6:	462a      	mov	r2, r5
 8018fb8:	4607      	mov	r7, r0
 8018fba:	ab01      	add	r3, sp, #4
 8018fbc:	fb05 b11a 	mls	r1, r5, sl, fp
 8018fc0:	4648      	mov	r0, r9
 8018fc2:	f7ff ffc0 	bl	8018f46 <_ZN8touchgfx7muldivuEmmmRm>
 8018fc6:	9b01      	ldr	r3, [sp, #4]
 8018fc8:	6832      	ldr	r2, [r6, #0]
 8018fca:	441a      	add	r2, r3
 8018fcc:	fbb2 f3f5 	udiv	r3, r2, r5
 8018fd0:	441c      	add	r4, r3
 8018fd2:	fb05 2513 	mls	r5, r5, r3, r2
 8018fd6:	443c      	add	r4, r7
 8018fd8:	4420      	add	r0, r4
 8018fda:	e7da      	b.n	8018f92 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

08018fdc <_ZN8touchgfx6muldivElllRl>:
 8018fdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018fde:	2800      	cmp	r0, #0
 8018fe0:	461e      	mov	r6, r3
 8018fe2:	bfba      	itte	lt
 8018fe4:	4240      	neglt	r0, r0
 8018fe6:	f04f 34ff 	movlt.w	r4, #4294967295
 8018fea:	2401      	movge	r4, #1
 8018fec:	2900      	cmp	r1, #0
 8018fee:	bfbc      	itt	lt
 8018ff0:	4249      	neglt	r1, r1
 8018ff2:	4264      	neglt	r4, r4
 8018ff4:	2a00      	cmp	r2, #0
 8018ff6:	bfb6      	itet	lt
 8018ff8:	4265      	neglt	r5, r4
 8018ffa:	4625      	movge	r5, r4
 8018ffc:	4252      	neglt	r2, r2
 8018ffe:	4288      	cmp	r0, r1
 8019000:	bfc2      	ittt	gt
 8019002:	4603      	movgt	r3, r0
 8019004:	4608      	movgt	r0, r1
 8019006:	4619      	movgt	r1, r3
 8019008:	ab01      	add	r3, sp, #4
 801900a:	f7ff ff9c 	bl	8018f46 <_ZN8touchgfx7muldivuEmmmRm>
 801900e:	9b01      	ldr	r3, [sp, #4]
 8019010:	4368      	muls	r0, r5
 8019012:	435c      	muls	r4, r3
 8019014:	6034      	str	r4, [r6, #0]
 8019016:	b002      	add	sp, #8
 8019018:	bd70      	pop	{r4, r5, r6, pc}

0801901a <_ZN8touchgfx6muldivElll>:
 801901a:	b513      	push	{r0, r1, r4, lr}
 801901c:	4614      	mov	r4, r2
 801901e:	ab01      	add	r3, sp, #4
 8019020:	f7ff ffdc 	bl	8018fdc <_ZN8touchgfx6muldivElllRl>
 8019024:	2800      	cmp	r0, #0
 8019026:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 801902a:	9b01      	ldr	r3, [sp, #4]
 801902c:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 8019030:	db0a      	blt.n	8019048 <_ZN8touchgfx6muldivElll+0x2e>
 8019032:	2b00      	cmp	r3, #0
 8019034:	f102 0201 	add.w	r2, r2, #1
 8019038:	bfb8      	it	lt
 801903a:	425b      	neglt	r3, r3
 801903c:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8019040:	db00      	blt.n	8019044 <_ZN8touchgfx6muldivElll+0x2a>
 8019042:	3001      	adds	r0, #1
 8019044:	b002      	add	sp, #8
 8019046:	bd10      	pop	{r4, pc}
 8019048:	2b00      	cmp	r3, #0
 801904a:	bfb8      	it	lt
 801904c:	425b      	neglt	r3, r3
 801904e:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8019052:	bfc8      	it	gt
 8019054:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8019058:	e7f4      	b.n	8019044 <_ZN8touchgfx6muldivElll+0x2a>

0801905a <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801905a:	2000      	movs	r0, #0
 801905c:	4770      	bx	lr

0801905e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801905e:	2001      	movs	r0, #1
 8019060:	4770      	bx	lr

08019062 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8019062:	2002      	movs	r0, #2
 8019064:	4770      	bx	lr

08019066 <_ZN8touchgfx12GestureEventD1Ev>:
 8019066:	4770      	bx	lr

08019068 <_ZN8touchgfx9DragEventD1Ev>:
 8019068:	4770      	bx	lr

0801906a <_ZN8touchgfx10ClickEventD1Ev>:
 801906a:	4770      	bx	lr

0801906c <_ZN8touchgfx10ClickEventD0Ev>:
 801906c:	b510      	push	{r4, lr}
 801906e:	4604      	mov	r4, r0
 8019070:	210c      	movs	r1, #12
 8019072:	f00b fe50 	bl	8024d16 <_ZdlPvj>
 8019076:	4620      	mov	r0, r4
 8019078:	bd10      	pop	{r4, pc}

0801907a <_ZN8touchgfx9DragEventD0Ev>:
 801907a:	b510      	push	{r4, lr}
 801907c:	4604      	mov	r4, r0
 801907e:	2110      	movs	r1, #16
 8019080:	f00b fe49 	bl	8024d16 <_ZdlPvj>
 8019084:	4620      	mov	r0, r4
 8019086:	bd10      	pop	{r4, pc}

08019088 <_ZN8touchgfx12GestureEventD0Ev>:
 8019088:	b510      	push	{r4, lr}
 801908a:	4604      	mov	r4, r0
 801908c:	210c      	movs	r1, #12
 801908e:	f00b fe42 	bl	8024d16 <_ZdlPvj>
 8019092:	4620      	mov	r0, r4
 8019094:	bd10      	pop	{r4, pc}
	...

08019098 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019098:	b530      	push	{r4, r5, lr}
 801909a:	460d      	mov	r5, r1
 801909c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801909e:	b087      	sub	sp, #28
 80190a0:	4604      	mov	r4, r0
 80190a2:	b301      	cbz	r1, 80190e6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80190a4:	a801      	add	r0, sp, #4
 80190a6:	f7ff fe8b 	bl	8018dc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80190aa:	892a      	ldrh	r2, [r5, #8]
 80190ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80190b0:	7928      	ldrb	r0, [r5, #4]
 80190b2:	1ad2      	subs	r2, r2, r3
 80190b4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80190b6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80190ba:	441a      	add	r2, r3
 80190bc:	896b      	ldrh	r3, [r5, #10]
 80190be:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80190c2:	f88d 0010 	strb.w	r0, [sp, #16]
 80190c6:	1b5b      	subs	r3, r3, r5
 80190c8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80190ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80190cc:	442b      	add	r3, r5
 80190ce:	4d07      	ldr	r5, [pc, #28]	; (80190ec <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80190d0:	f8ad 1012 	strh.w	r1, [sp, #18]
 80190d4:	a903      	add	r1, sp, #12
 80190d6:	9503      	str	r5, [sp, #12]
 80190d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80190dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80190e0:	6803      	ldr	r3, [r0, #0]
 80190e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190e4:	4798      	blx	r3
 80190e6:	b007      	add	sp, #28
 80190e8:	bd30      	pop	{r4, r5, pc}
 80190ea:	bf00      	nop
 80190ec:	0802c290 	.word	0x0802c290

080190f0 <_ZNK8touchgfx4Rect9intersectEss>:
 80190f0:	b510      	push	{r4, lr}
 80190f2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80190f6:	428b      	cmp	r3, r1
 80190f8:	dc10      	bgt.n	801911c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80190fa:	8884      	ldrh	r4, [r0, #4]
 80190fc:	4423      	add	r3, r4
 80190fe:	b21b      	sxth	r3, r3
 8019100:	4299      	cmp	r1, r3
 8019102:	da0b      	bge.n	801911c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019104:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019108:	4293      	cmp	r3, r2
 801910a:	dc07      	bgt.n	801911c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801910c:	88c0      	ldrh	r0, [r0, #6]
 801910e:	4418      	add	r0, r3
 8019110:	b200      	sxth	r0, r0
 8019112:	4282      	cmp	r2, r0
 8019114:	bfac      	ite	ge
 8019116:	2000      	movge	r0, #0
 8019118:	2001      	movlt	r0, #1
 801911a:	bd10      	pop	{r4, pc}
 801911c:	2000      	movs	r0, #0
 801911e:	e7fc      	b.n	801911a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08019120 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019122:	460c      	mov	r4, r1
 8019124:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019126:	b089      	sub	sp, #36	; 0x24
 8019128:	4605      	mov	r5, r0
 801912a:	2900      	cmp	r1, #0
 801912c:	d054      	beq.n	80191d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801912e:	4668      	mov	r0, sp
 8019130:	f7ff fe46 	bl	8018dc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019134:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8019136:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8019138:	4668      	mov	r0, sp
 801913a:	8922      	ldrh	r2, [r4, #8]
 801913c:	88e1      	ldrh	r1, [r4, #6]
 801913e:	443a      	add	r2, r7
 8019140:	4431      	add	r1, r6
 8019142:	b212      	sxth	r2, r2
 8019144:	b209      	sxth	r1, r1
 8019146:	f7ff ffd3 	bl	80190f0 <_ZNK8touchgfx4Rect9intersectEss>
 801914a:	b1d0      	cbz	r0, 8019182 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801914c:	89a2      	ldrh	r2, [r4, #12]
 801914e:	4668      	mov	r0, sp
 8019150:	8961      	ldrh	r1, [r4, #10]
 8019152:	443a      	add	r2, r7
 8019154:	4431      	add	r1, r6
 8019156:	b212      	sxth	r2, r2
 8019158:	b209      	sxth	r1, r1
 801915a:	f7ff ffc9 	bl	80190f0 <_ZNK8touchgfx4Rect9intersectEss>
 801915e:	4603      	mov	r3, r0
 8019160:	b978      	cbnz	r0, 8019182 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019162:	4a1e      	ldr	r2, [pc, #120]	; (80191dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8019164:	a904      	add	r1, sp, #16
 8019166:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019168:	9204      	str	r2, [sp, #16]
 801916a:	2202      	movs	r2, #2
 801916c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019170:	f88d 2014 	strb.w	r2, [sp, #20]
 8019174:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019178:	f8ad 301a 	strh.w	r3, [sp, #26]
 801917c:	6803      	ldr	r3, [r0, #0]
 801917e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019180:	4798      	blx	r3
 8019182:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8019184:	a802      	add	r0, sp, #8
 8019186:	f7ff fe1b 	bl	8018dc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801918a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801918e:	88e0      	ldrh	r0, [r4, #6]
 8019190:	8961      	ldrh	r1, [r4, #10]
 8019192:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8019196:	1a80      	subs	r0, r0, r2
 8019198:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801919c:	1a89      	subs	r1, r1, r2
 801919e:	8923      	ldrh	r3, [r4, #8]
 80191a0:	4460      	add	r0, ip
 80191a2:	89a2      	ldrh	r2, [r4, #12]
 80191a4:	4461      	add	r1, ip
 80191a6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80191a8:	eba3 030e 	sub.w	r3, r3, lr
 80191ac:	eba2 020e 	sub.w	r2, r2, lr
 80191b0:	f8ad 0016 	strh.w	r0, [sp, #22]
 80191b4:	7927      	ldrb	r7, [r4, #4]
 80191b6:	4433      	add	r3, r6
 80191b8:	4432      	add	r2, r6
 80191ba:	4c09      	ldr	r4, [pc, #36]	; (80191e0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 80191bc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80191be:	f8ad 101a 	strh.w	r1, [sp, #26]
 80191c2:	a904      	add	r1, sp, #16
 80191c4:	9404      	str	r4, [sp, #16]
 80191c6:	f88d 7014 	strb.w	r7, [sp, #20]
 80191ca:	f8ad 3018 	strh.w	r3, [sp, #24]
 80191ce:	f8ad 201c 	strh.w	r2, [sp, #28]
 80191d2:	6803      	ldr	r3, [r0, #0]
 80191d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80191d6:	4798      	blx	r3
 80191d8:	b009      	add	sp, #36	; 0x24
 80191da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191dc:	0802c268 	.word	0x0802c268
 80191e0:	0802c27c 	.word	0x0802c27c

080191e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80191e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191e8:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 80191ec:	b0a1      	sub	sp, #132	; 0x84
 80191ee:	4604      	mov	r4, r0
 80191f0:	460d      	mov	r5, r1
 80191f2:	790b      	ldrb	r3, [r1, #4]
 80191f4:	f1b9 0f00 	cmp.w	r9, #0
 80191f8:	d00f      	beq.n	801921a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	f040 80a2 	bne.w	8019344 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019200:	b021      	add	sp, #132	; 0x84
 8019202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019206:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801920a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801920e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019212:	1d20      	adds	r0, r4, #4
 8019214:	f7fa fea0 	bl	8013f58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019218:	e094      	b.n	8019344 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801921a:	2b00      	cmp	r3, #0
 801921c:	d1f0      	bne.n	8019200 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801921e:	4b5f      	ldr	r3, [pc, #380]	; (801939c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8019226:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801922a:	f1ba 0f03 	cmp.w	sl, #3
 801922e:	ddea      	ble.n	8019206 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8019230:	f1ba 0f0c 	cmp.w	sl, #12
 8019234:	f04f 0303 	mov.w	r3, #3
 8019238:	f04f 0600 	mov.w	r6, #0
 801923c:	4958      	ldr	r1, [pc, #352]	; (80193a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801923e:	bfd8      	it	le
 8019240:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8019244:	960a      	str	r6, [sp, #40]	; 0x28
 8019246:	bfd8      	it	le
 8019248:	fb92 f3f3 	sdivle	r3, r2, r3
 801924c:	9301      	str	r3, [sp, #4]
 801924e:	4b55      	ldr	r3, [pc, #340]	; (80193a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8019250:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019254:	4b54      	ldr	r3, [pc, #336]	; (80193a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8019256:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801925a:	2248      	movs	r2, #72	; 0x48
 801925c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019260:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019264:	ab0e      	add	r3, sp, #56	; 0x38
 8019266:	4618      	mov	r0, r3
 8019268:	f00b fe4a 	bl	8024f00 <memcpy>
 801926c:	f04f 32ff 	mov.w	r2, #4294967295
 8019270:	f8cd a008 	str.w	sl, [sp, #8]
 8019274:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8019278:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801927c:	46b3      	mov	fp, r6
 801927e:	fb93 f3f2 	sdiv	r3, r3, r2
 8019282:	b29b      	uxth	r3, r3
 8019284:	9303      	str	r3, [sp, #12]
 8019286:	2300      	movs	r3, #0
 8019288:	9a03      	ldr	r2, [sp, #12]
 801928a:	88ef      	ldrh	r7, [r5, #6]
 801928c:	a80a      	add	r0, sp, #40	; 0x28
 801928e:	9309      	str	r3, [sp, #36]	; 0x24
 8019290:	9b07      	ldr	r3, [sp, #28]
 8019292:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8019296:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801929a:	fb13 f302 	smulbb	r3, r3, r2
 801929e:	b29b      	uxth	r3, r3
 80192a0:	9304      	str	r3, [sp, #16]
 80192a2:	9b07      	ldr	r3, [sp, #28]
 80192a4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80192a8:	685b      	ldr	r3, [r3, #4]
 80192aa:	fb13 f302 	smulbb	r3, r3, r2
 80192ae:	b29b      	uxth	r3, r3
 80192b0:	9305      	str	r3, [sp, #20]
 80192b2:	9b04      	ldr	r3, [sp, #16]
 80192b4:	441f      	add	r7, r3
 80192b6:	9b05      	ldr	r3, [sp, #20]
 80192b8:	4498      	add	r8, r3
 80192ba:	b23f      	sxth	r7, r7
 80192bc:	fa0f f888 	sxth.w	r8, r8
 80192c0:	4639      	mov	r1, r7
 80192c2:	4642      	mov	r2, r8
 80192c4:	f7ff ff14 	bl	80190f0 <_ZNK8touchgfx4Rect9intersectEss>
 80192c8:	b380      	cbz	r0, 801932c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80192ca:	4639      	mov	r1, r7
 80192cc:	ab09      	add	r3, sp, #36	; 0x24
 80192ce:	4642      	mov	r2, r8
 80192d0:	1d20      	adds	r0, r4, #4
 80192d2:	f7fa fe41 	bl	8013f58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80192d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80192d8:	b341      	cbz	r1, 801932c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80192da:	4549      	cmp	r1, r9
 80192dc:	d026      	beq.n	801932c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80192de:	a80c      	add	r0, sp, #48	; 0x30
 80192e0:	f7ff fd6e 	bl	8018dc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80192e4:	2002      	movs	r0, #2
 80192e6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80192ea:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80192ee:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80192f2:	fb92 f2f0 	sdiv	r2, r2, r0
 80192f6:	440a      	add	r2, r1
 80192f8:	1a99      	subs	r1, r3, r2
 80192fa:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80192fe:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019302:	fb93 f3f0 	sdiv	r3, r3, r0
 8019306:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801930a:	4403      	add	r3, r0
 801930c:	1ad3      	subs	r3, r2, r3
 801930e:	9a06      	ldr	r2, [sp, #24]
 8019310:	435b      	muls	r3, r3
 8019312:	fb01 3301 	mla	r3, r1, r1, r3
 8019316:	4293      	cmp	r3, r2
 8019318:	d208      	bcs.n	801932c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801931a:	9a04      	ldr	r2, [sp, #16]
 801931c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019320:	86a2      	strh	r2, [r4, #52]	; 0x34
 8019322:	9a05      	ldr	r2, [sp, #20]
 8019324:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8019328:	86e2      	strh	r2, [r4, #54]	; 0x36
 801932a:	9306      	str	r3, [sp, #24]
 801932c:	f10b 0b02 	add.w	fp, fp, #2
 8019330:	f1bb 0f08 	cmp.w	fp, #8
 8019334:	dda7      	ble.n	8019286 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8019336:	9b02      	ldr	r3, [sp, #8]
 8019338:	3601      	adds	r6, #1
 801933a:	4453      	add	r3, sl
 801933c:	9302      	str	r3, [sp, #8]
 801933e:	9b01      	ldr	r3, [sp, #4]
 8019340:	42b3      	cmp	r3, r6
 8019342:	d199      	bne.n	8019278 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 8019344:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019346:	2900      	cmp	r1, #0
 8019348:	f43f af5a 	beq.w	8019200 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801934c:	a80c      	add	r0, sp, #48	; 0x30
 801934e:	2600      	movs	r6, #0
 8019350:	f7ff fd36 	bl	8018dc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019354:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8019358:	88ea      	ldrh	r2, [r5, #6]
 801935a:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801935e:	1ad2      	subs	r2, r2, r3
 8019360:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019362:	7929      	ldrb	r1, [r5, #4]
 8019364:	441a      	add	r2, r3
 8019366:	892b      	ldrh	r3, [r5, #8]
 8019368:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801936c:	a90e      	add	r1, sp, #56	; 0x38
 801936e:	1a1b      	subs	r3, r3, r0
 8019370:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019372:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8019376:	4403      	add	r3, r0
 8019378:	480c      	ldr	r0, [pc, #48]	; (80193ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801937a:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801937e:	900e      	str	r0, [sp, #56]	; 0x38
 8019380:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019382:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8019386:	6803      	ldr	r3, [r0, #0]
 8019388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801938a:	4798      	blx	r3
 801938c:	792b      	ldrb	r3, [r5, #4]
 801938e:	2b00      	cmp	r3, #0
 8019390:	f43f af36 	beq.w	8019200 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019394:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8019398:	e732      	b.n	8019200 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801939a:	bf00      	nop
 801939c:	200566e0 	.word	0x200566e0
 80193a0:	0802a1e8 	.word	0x0802a1e8
 80193a4:	200566d4 	.word	0x200566d4
 80193a8:	200566d6 	.word	0x200566d6
 80193ac:	0802c268 	.word	0x0802c268

080193b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80193b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80193b2:	4604      	mov	r4, r0
 80193b4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80193b8:	3201      	adds	r2, #1
 80193ba:	d112      	bne.n	80193e2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80193bc:	2500      	movs	r5, #0
 80193be:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80193c2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80193c6:	6803      	ldr	r3, [r0, #0]
 80193c8:	9500      	str	r5, [sp, #0]
 80193ca:	466d      	mov	r5, sp
 80193cc:	f8ad 1004 	strh.w	r1, [sp, #4]
 80193d0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80193d4:	4629      	mov	r1, r5
 80193d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193d8:	4798      	blx	r3
 80193da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80193de:	e884 0003 	stmia.w	r4, {r0, r1}
 80193e2:	4620      	mov	r0, r4
 80193e4:	b003      	add	sp, #12
 80193e6:	bd30      	pop	{r4, r5, pc}

080193e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80193e8:	b513      	push	{r0, r1, r4, lr}
 80193ea:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80193ee:	4604      	mov	r4, r0
 80193f0:	3301      	adds	r3, #1
 80193f2:	d109      	bne.n	8019408 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80193f4:	4601      	mov	r1, r0
 80193f6:	4668      	mov	r0, sp
 80193f8:	f7ff fce2 	bl	8018dc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80193fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8019400:	8423      	strh	r3, [r4, #32]
 8019402:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019406:	8463      	strh	r3, [r4, #34]	; 0x22
 8019408:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801940c:	b002      	add	sp, #8
 801940e:	bd10      	pop	{r4, pc}

08019410 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019410:	b513      	push	{r0, r1, r4, lr}
 8019412:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8019416:	4604      	mov	r4, r0
 8019418:	3301      	adds	r3, #1
 801941a:	d109      	bne.n	8019430 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801941c:	4601      	mov	r1, r0
 801941e:	4668      	mov	r0, sp
 8019420:	f7ff fcce 	bl	8018dc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019424:	f8bd 3000 	ldrh.w	r3, [sp]
 8019428:	8423      	strh	r3, [r4, #32]
 801942a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801942e:	8463      	strh	r3, [r4, #34]	; 0x22
 8019430:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8019434:	b002      	add	sp, #8
 8019436:	bd10      	pop	{r4, pc}

08019438 <_ZN8touchgfx6ScreenC1Ev>:
 8019438:	b570      	push	{r4, r5, r6, lr}
 801943a:	4b17      	ldr	r3, [pc, #92]	; (8019498 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801943c:	4605      	mov	r5, r0
 801943e:	4a17      	ldr	r2, [pc, #92]	; (801949c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019440:	2101      	movs	r1, #1
 8019442:	f845 3b04 	str.w	r3, [r5], #4
 8019446:	2300      	movs	r3, #0
 8019448:	6042      	str	r2, [r0, #4]
 801944a:	4604      	mov	r4, r0
 801944c:	8103      	strh	r3, [r0, #8]
 801944e:	8143      	strh	r3, [r0, #10]
 8019450:	8183      	strh	r3, [r0, #12]
 8019452:	81c3      	strh	r3, [r0, #14]
 8019454:	8203      	strh	r3, [r0, #16]
 8019456:	8243      	strh	r3, [r0, #18]
 8019458:	8283      	strh	r3, [r0, #20]
 801945a:	82c3      	strh	r3, [r0, #22]
 801945c:	6203      	str	r3, [r0, #32]
 801945e:	8483      	strh	r3, [r0, #36]	; 0x24
 8019460:	84c3      	strh	r3, [r0, #38]	; 0x26
 8019462:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8019466:	6343      	str	r3, [r0, #52]	; 0x34
 8019468:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801946c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8019470:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8019474:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8019478:	4b09      	ldr	r3, [pc, #36]	; (80194a0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801947a:	4628      	mov	r0, r5
 801947c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019480:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8019482:	4a08      	ldr	r2, [pc, #32]	; (80194a4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019484:	f9b2 1000 	ldrsh.w	r1, [r2]
 8019488:	4798      	blx	r3
 801948a:	6863      	ldr	r3, [r4, #4]
 801948c:	4628      	mov	r0, r5
 801948e:	4631      	mov	r1, r6
 8019490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019492:	4798      	blx	r3
 8019494:	4620      	mov	r0, r4
 8019496:	bd70      	pop	{r4, r5, r6, pc}
 8019498:	0802c2a4 	.word	0x0802c2a4
 801949c:	0802aec4 	.word	0x0802aec4
 80194a0:	200566d6 	.word	0x200566d6
 80194a4:	200566d4 	.word	0x200566d4

080194a8 <_ZN8touchgfx6Screen4drawEv>:
 80194a8:	4b09      	ldr	r3, [pc, #36]	; (80194d0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80194aa:	b507      	push	{r0, r1, r2, lr}
 80194ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80194b0:	2100      	movs	r1, #0
 80194b2:	4b08      	ldr	r3, [pc, #32]	; (80194d4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80194b4:	9100      	str	r1, [sp, #0]
 80194b6:	4669      	mov	r1, sp
 80194b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194bc:	f8ad 2004 	strh.w	r2, [sp, #4]
 80194c0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80194c4:	6803      	ldr	r3, [r0, #0]
 80194c6:	689b      	ldr	r3, [r3, #8]
 80194c8:	4798      	blx	r3
 80194ca:	b003      	add	sp, #12
 80194cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80194d0:	200566d4 	.word	0x200566d4
 80194d4:	200566d6 	.word	0x200566d6

080194d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80194d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194dc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80194e0:	b089      	sub	sp, #36	; 0x24
 80194e2:	4680      	mov	r8, r0
 80194e4:	460c      	mov	r4, r1
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	4615      	mov	r5, r2
 80194ea:	dd0e      	ble.n	801950a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80194ec:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	dd0a      	ble.n	801950a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80194f4:	4628      	mov	r0, r5
 80194f6:	f7ff ff5b 	bl	80193b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80194fa:	4621      	mov	r1, r4
 80194fc:	f7fb ffea 	bl	80154d4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019500:	69eb      	ldr	r3, [r5, #28]
 8019502:	b928      	cbnz	r0, 8019510 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8019504:	461d      	mov	r5, r3
 8019506:	2b00      	cmp	r3, #0
 8019508:	d1f4      	bne.n	80194f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801950a:	b009      	add	sp, #36	; 0x24
 801950c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019510:	ae04      	add	r6, sp, #16
 8019512:	2b00      	cmp	r3, #0
 8019514:	f000 80b5 	beq.w	8019682 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019518:	682b      	ldr	r3, [r5, #0]
 801951a:	4629      	mov	r1, r5
 801951c:	a802      	add	r0, sp, #8
 801951e:	68db      	ldr	r3, [r3, #12]
 8019520:	4798      	blx	r3
 8019522:	4628      	mov	r0, r5
 8019524:	f7ff ff60 	bl	80193e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019528:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801952c:	4407      	add	r7, r0
 801952e:	4628      	mov	r0, r5
 8019530:	f7ff ff6e 	bl	8019410 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019534:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019538:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801953c:	b23f      	sxth	r7, r7
 801953e:	4418      	add	r0, r3
 8019540:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019544:	4621      	mov	r1, r4
 8019546:	f8ad 2014 	strh.w	r2, [sp, #20]
 801954a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801954e:	4630      	mov	r0, r6
 8019550:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019554:	f8ad 7010 	strh.w	r7, [sp, #16]
 8019558:	f7fa fdb0 	bl	80140bc <_ZN8touchgfx4RectaNERKS0_>
 801955c:	4628      	mov	r0, r5
 801955e:	f7ff ff27 	bl	80193b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019562:	ab06      	add	r3, sp, #24
 8019564:	4602      	mov	r2, r0
 8019566:	e896 0003 	ldmia.w	r6, {r0, r1}
 801956a:	e883 0003 	stmia.w	r3, {r0, r1}
 801956e:	4611      	mov	r1, r2
 8019570:	4618      	mov	r0, r3
 8019572:	f7fa fda3 	bl	80140bc <_ZN8touchgfx4RectaNERKS0_>
 8019576:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801957a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801957e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8019582:	4299      	cmp	r1, r3
 8019584:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8019588:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801958c:	d10b      	bne.n	80195a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801958e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019592:	4552      	cmp	r2, sl
 8019594:	d107      	bne.n	80195a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019596:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801959a:	455a      	cmp	r2, fp
 801959c:	d103      	bne.n	80195a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801959e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80195a2:	454a      	cmp	r2, r9
 80195a4:	d06d      	beq.n	8019682 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80195a6:	f1bb 0f00 	cmp.w	fp, #0
 80195aa:	dd65      	ble.n	8019678 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80195ac:	f1b9 0f00 	cmp.w	r9, #0
 80195b0:	dd62      	ble.n	8019678 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80195b2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80195b6:	fa1f f08a 	uxth.w	r0, sl
 80195ba:	4552      	cmp	r2, sl
 80195bc:	9000      	str	r0, [sp, #0]
 80195be:	da12      	bge.n	80195e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80195c0:	9301      	str	r3, [sp, #4]
 80195c2:	9b00      	ldr	r3, [sp, #0]
 80195c4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80195c8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80195cc:	1a9a      	subs	r2, r3, r2
 80195ce:	f8ad 1010 	strh.w	r1, [sp, #16]
 80195d2:	4631      	mov	r1, r6
 80195d4:	f8ad 0014 	strh.w	r0, [sp, #20]
 80195d8:	4640      	mov	r0, r8
 80195da:	f8ad 2016 	strh.w	r2, [sp, #22]
 80195de:	69ea      	ldr	r2, [r5, #28]
 80195e0:	f7ff ff7a 	bl	80194d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80195e4:	9b01      	ldr	r3, [sp, #4]
 80195e6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80195ea:	b29f      	uxth	r7, r3
 80195ec:	429a      	cmp	r2, r3
 80195ee:	da0d      	bge.n	801960c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80195f0:	f8ad 2010 	strh.w	r2, [sp, #16]
 80195f4:	1aba      	subs	r2, r7, r2
 80195f6:	f8ad a012 	strh.w	sl, [sp, #18]
 80195fa:	4631      	mov	r1, r6
 80195fc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019600:	4640      	mov	r0, r8
 8019602:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019606:	69ea      	ldr	r2, [r5, #28]
 8019608:	f7ff ff66 	bl	80194d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801960c:	8822      	ldrh	r2, [r4, #0]
 801960e:	445f      	add	r7, fp
 8019610:	88a3      	ldrh	r3, [r4, #4]
 8019612:	b2bf      	uxth	r7, r7
 8019614:	4413      	add	r3, r2
 8019616:	b23a      	sxth	r2, r7
 8019618:	b29b      	uxth	r3, r3
 801961a:	b219      	sxth	r1, r3
 801961c:	4291      	cmp	r1, r2
 801961e:	dd0d      	ble.n	801963c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8019620:	1bdb      	subs	r3, r3, r7
 8019622:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019626:	f8ad a012 	strh.w	sl, [sp, #18]
 801962a:	4631      	mov	r1, r6
 801962c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019630:	4640      	mov	r0, r8
 8019632:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019636:	69ea      	ldr	r2, [r5, #28]
 8019638:	f7ff ff4e 	bl	80194d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801963c:	88e2      	ldrh	r2, [r4, #6]
 801963e:	8863      	ldrh	r3, [r4, #2]
 8019640:	4413      	add	r3, r2
 8019642:	9a00      	ldr	r2, [sp, #0]
 8019644:	444a      	add	r2, r9
 8019646:	b29b      	uxth	r3, r3
 8019648:	fa1f f982 	uxth.w	r9, r2
 801964c:	b219      	sxth	r1, r3
 801964e:	fa0f f289 	sxth.w	r2, r9
 8019652:	428a      	cmp	r2, r1
 8019654:	da15      	bge.n	8019682 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019656:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801965a:	eba3 0309 	sub.w	r3, r3, r9
 801965e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019662:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019666:	4631      	mov	r1, r6
 8019668:	f8ad 0010 	strh.w	r0, [sp, #16]
 801966c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019670:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019674:	69ea      	ldr	r2, [r5, #28]
 8019676:	e001      	b.n	801967c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8019678:	69ea      	ldr	r2, [r5, #28]
 801967a:	4621      	mov	r1, r4
 801967c:	4640      	mov	r0, r8
 801967e:	f7ff ff2b 	bl	80194d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019682:	4628      	mov	r0, r5
 8019684:	f7ff fe94 	bl	80193b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019688:	6861      	ldr	r1, [r4, #4]
 801968a:	4602      	mov	r2, r0
 801968c:	4633      	mov	r3, r6
 801968e:	6820      	ldr	r0, [r4, #0]
 8019690:	c303      	stmia	r3!, {r0, r1}
 8019692:	4611      	mov	r1, r2
 8019694:	4630      	mov	r0, r6
 8019696:	f7fa fd11 	bl	80140bc <_ZN8touchgfx4RectaNERKS0_>
 801969a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801969e:	2b00      	cmp	r3, #0
 80196a0:	f77f af33 	ble.w	801950a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80196a4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	f77f af2e 	ble.w	801950a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80196ae:	4628      	mov	r0, r5
 80196b0:	f7ff fe9a 	bl	80193e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80196b4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80196b8:	1a18      	subs	r0, r3, r0
 80196ba:	f8ad 0010 	strh.w	r0, [sp, #16]
 80196be:	4628      	mov	r0, r5
 80196c0:	f7ff fea6 	bl	8019410 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80196c4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80196c8:	4631      	mov	r1, r6
 80196ca:	1a18      	subs	r0, r3, r0
 80196cc:	f8ad 0012 	strh.w	r0, [sp, #18]
 80196d0:	4628      	mov	r0, r5
 80196d2:	682b      	ldr	r3, [r5, #0]
 80196d4:	689b      	ldr	r3, [r3, #8]
 80196d6:	4798      	blx	r3
 80196d8:	e717      	b.n	801950a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080196da <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80196da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80196dc:	2300      	movs	r3, #0
 80196de:	aa02      	add	r2, sp, #8
 80196e0:	4604      	mov	r4, r0
 80196e2:	3004      	adds	r0, #4
 80196e4:	f842 3d04 	str.w	r3, [r2, #-4]!
 80196e8:	460d      	mov	r5, r1
 80196ea:	f7fa fdbf 	bl	801426c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80196ee:	9a01      	ldr	r2, [sp, #4]
 80196f0:	b11a      	cbz	r2, 80196fa <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 80196f2:	4629      	mov	r1, r5
 80196f4:	4620      	mov	r0, r4
 80196f6:	f7ff feef 	bl	80194d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80196fa:	b003      	add	sp, #12
 80196fc:	bd30      	pop	{r4, r5, pc}

080196fe <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80196fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019700:	4602      	mov	r2, r0
 8019702:	4604      	mov	r4, r0
 8019704:	460d      	mov	r5, r1
 8019706:	466b      	mov	r3, sp
 8019708:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801970c:	6851      	ldr	r1, [r2, #4]
 801970e:	c303      	stmia	r3!, {r0, r1}
 8019710:	4629      	mov	r1, r5
 8019712:	4668      	mov	r0, sp
 8019714:	f7fa fcd2 	bl	80140bc <_ZN8touchgfx4RectaNERKS0_>
 8019718:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801971c:	4669      	mov	r1, sp
 801971e:	b123      	cbz	r3, 801972a <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8019720:	4620      	mov	r0, r4
 8019722:	f7ff ffda 	bl	80196da <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8019726:	b003      	add	sp, #12
 8019728:	bd30      	pop	{r4, r5, pc}
 801972a:	1d20      	adds	r0, r4, #4
 801972c:	f7fa fd65 	bl	80141fa <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8019730:	e7f9      	b.n	8019726 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08019732 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019732:	460b      	mov	r3, r1
 8019734:	680a      	ldr	r2, [r1, #0]
 8019736:	1d01      	adds	r1, r0, #4
 8019738:	6992      	ldr	r2, [r2, #24]
 801973a:	4618      	mov	r0, r3
 801973c:	4710      	bx	r2

0801973e <_ZN8touchgfx12TextProviderC1Ev>:
 801973e:	b538      	push	{r3, r4, r5, lr}
 8019740:	2500      	movs	r5, #0
 8019742:	4604      	mov	r4, r0
 8019744:	220e      	movs	r2, #14
 8019746:	7405      	strb	r5, [r0, #16]
 8019748:	4629      	mov	r1, r5
 801974a:	82c5      	strh	r5, [r0, #22]
 801974c:	8305      	strh	r5, [r0, #24]
 801974e:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8019750:	8605      	strh	r5, [r0, #48]	; 0x30
 8019752:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019754:	8705      	strh	r5, [r0, #56]	; 0x38
 8019756:	e9c0 5500 	strd	r5, r5, [r0]
 801975a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801975e:	e9c0 550f 	strd	r5, r5, [r0, #60]	; 0x3c
 8019762:	3044      	adds	r0, #68	; 0x44
 8019764:	f00b fbda 	bl	8024f1c <memset>
 8019768:	2301      	movs	r3, #1
 801976a:	4620      	mov	r0, r4
 801976c:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8019770:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8019774:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8019778:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801977c:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 8019780:	f7ee fcf8 	bl	8008174 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8019784:	4620      	mov	r0, r4
 8019786:	bd38      	pop	{r3, r4, r5, pc}

08019788 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8019788:	b530      	push	{r4, r5, lr}
 801978a:	2500      	movs	r5, #0
 801978c:	2401      	movs	r4, #1
 801978e:	6843      	ldr	r3, [r0, #4]
 8019790:	b913      	cbnz	r3, 8019798 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8019792:	6803      	ldr	r3, [r0, #0]
 8019794:	b1f3      	cbz	r3, 80197d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8019796:	6043      	str	r3, [r0, #4]
 8019798:	7c03      	ldrb	r3, [r0, #16]
 801979a:	b143      	cbz	r3, 80197ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801979c:	68c3      	ldr	r3, [r0, #12]
 801979e:	b12b      	cbz	r3, 80197ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80197a0:	881a      	ldrh	r2, [r3, #0]
 80197a2:	b11a      	cbz	r2, 80197ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80197a4:	1c9a      	adds	r2, r3, #2
 80197a6:	60c2      	str	r2, [r0, #12]
 80197a8:	8818      	ldrh	r0, [r3, #0]
 80197aa:	bd30      	pop	{r4, r5, pc}
 80197ac:	7405      	strb	r5, [r0, #16]
 80197ae:	6843      	ldr	r3, [r0, #4]
 80197b0:	8819      	ldrh	r1, [r3, #0]
 80197b2:	b179      	cbz	r1, 80197d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80197b4:	1c9a      	adds	r2, r3, #2
 80197b6:	2902      	cmp	r1, #2
 80197b8:	6042      	str	r2, [r0, #4]
 80197ba:	d1f5      	bne.n	80197a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80197bc:	6883      	ldr	r3, [r0, #8]
 80197be:	1d1a      	adds	r2, r3, #4
 80197c0:	6082      	str	r2, [r0, #8]
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	60c3      	str	r3, [r0, #12]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d0e1      	beq.n	801978e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80197ca:	881b      	ldrh	r3, [r3, #0]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d0de      	beq.n	801978e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80197d0:	7404      	strb	r4, [r0, #16]
 80197d2:	e7dc      	b.n	801978e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80197d4:	2000      	movs	r0, #0
 80197d6:	e7e8      	b.n	80197aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080197d8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80197d8:	b410      	push	{r4}
 80197da:	63c3      	str	r3, [r0, #60]	; 0x3c
 80197dc:	9b01      	ldr	r3, [sp, #4]
 80197de:	6082      	str	r2, [r0, #8]
 80197e0:	6403      	str	r3, [r0, #64]	; 0x40
 80197e2:	2300      	movs	r3, #0
 80197e4:	6001      	str	r1, [r0, #0]
 80197e6:	6043      	str	r3, [r0, #4]
 80197e8:	60c3      	str	r3, [r0, #12]
 80197ea:	7403      	strb	r3, [r0, #16]
 80197ec:	8603      	strh	r3, [r0, #48]	; 0x30
 80197ee:	8303      	strh	r3, [r0, #24]
 80197f0:	8703      	strh	r3, [r0, #56]	; 0x38
 80197f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197f6:	f7ee bcbd 	b.w	8008174 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080197fa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80197fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197fc:	4605      	mov	r5, r0
 80197fe:	4608      	mov	r0, r1
 8019800:	b1f1      	cbz	r1, 8019840 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8019802:	f105 0444 	add.w	r4, r5, #68	; 0x44
 8019806:	460b      	mov	r3, r1
 8019808:	f101 0708 	add.w	r7, r1, #8
 801980c:	4622      	mov	r2, r4
 801980e:	6818      	ldr	r0, [r3, #0]
 8019810:	3308      	adds	r3, #8
 8019812:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019816:	4626      	mov	r6, r4
 8019818:	42bb      	cmp	r3, r7
 801981a:	c603      	stmia	r6!, {r0, r1}
 801981c:	4634      	mov	r4, r6
 801981e:	d1f6      	bne.n	801980e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8019820:	6818      	ldr	r0, [r3, #0]
 8019822:	6030      	str	r0, [r6, #0]
 8019824:	4610      	mov	r0, r2
 8019826:	889b      	ldrh	r3, [r3, #4]
 8019828:	80b3      	strh	r3, [r6, #4]
 801982a:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 801982e:	015b      	lsls	r3, r3, #5
 8019830:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019834:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 8019838:	430b      	orrs	r3, r1
 801983a:	425b      	negs	r3, r3
 801983c:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
 8019840:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019842 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019842:	b538      	push	{r3, r4, r5, lr}
 8019844:	460c      	mov	r4, r1
 8019846:	6811      	ldr	r1, [r2, #0]
 8019848:	4610      	mov	r0, r2
 801984a:	68cd      	ldr	r5, [r1, #12]
 801984c:	4619      	mov	r1, r3
 801984e:	47a8      	blx	r5
 8019850:	2800      	cmp	r0, #0
 8019852:	bf08      	it	eq
 8019854:	4620      	moveq	r0, r4
 8019856:	bd38      	pop	{r3, r4, r5, pc}

08019858 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8019858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801985a:	4604      	mov	r4, r0
 801985c:	4615      	mov	r5, r2
 801985e:	4608      	mov	r0, r1
 8019860:	b93a      	cbnz	r2, 8019872 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019862:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8019866:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
 801986a:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 801986e:	4628      	mov	r0, r5
 8019870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019872:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8019876:	8893      	ldrh	r3, [r2, #4]
 8019878:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801987c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019880:	79ee      	ldrb	r6, [r5, #7]
 8019882:	4316      	orrs	r6, r2
 8019884:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8019888:	189a      	adds	r2, r3, r2
 801988a:	b2b7      	uxth	r7, r6
 801988c:	b291      	uxth	r1, r2
 801988e:	291d      	cmp	r1, #29
 8019890:	f200 8084 	bhi.w	801999c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8019894:	2201      	movs	r2, #1
 8019896:	10f6      	asrs	r6, r6, #3
 8019898:	408a      	lsls	r2, r1
 801989a:	4978      	ldr	r1, [pc, #480]	; (8019a7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801989c:	420a      	tst	r2, r1
 801989e:	d12e      	bne.n	80198fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 80198a0:	f412 7f60 	tst.w	r2, #896	; 0x380
 80198a4:	d07a      	beq.n	801999c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80198a6:	f104 0244 	add.w	r2, r4, #68	; 0x44
 80198aa:	462b      	mov	r3, r5
 80198ac:	f105 0e08 	add.w	lr, r5, #8
 80198b0:	4615      	mov	r5, r2
 80198b2:	6818      	ldr	r0, [r3, #0]
 80198b4:	3308      	adds	r3, #8
 80198b6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80198ba:	4694      	mov	ip, r2
 80198bc:	4573      	cmp	r3, lr
 80198be:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80198c2:	4662      	mov	r2, ip
 80198c4:	d1f5      	bne.n	80198b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 80198c6:	6818      	ldr	r0, [r3, #0]
 80198c8:	f8cc 0000 	str.w	r0, [ip]
 80198cc:	889b      	ldrh	r3, [r3, #4]
 80198ce:	f8ac 3004 	strh.w	r3, [ip, #4]
 80198d2:	b2b3      	uxth	r3, r6
 80198d4:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 80198d8:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80198dc:	1aca      	subs	r2, r1, r3
 80198de:	1bcf      	subs	r7, r1, r7
 80198e0:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80198e4:	b292      	uxth	r2, r2
 80198e6:	1afb      	subs	r3, r7, r3
 80198e8:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
 80198ec:	10d2      	asrs	r2, r2, #3
 80198ee:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80198f2:	4302      	orrs	r2, r0
 80198f4:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 80198f8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 80198fc:	e7b7      	b.n	801986e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80198fe:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019900:	b92b      	cbnz	r3, 801990e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8019902:	4b5f      	ldr	r3, [pc, #380]	; (8019a80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8019904:	21bf      	movs	r1, #191	; 0xbf
 8019906:	4a5f      	ldr	r2, [pc, #380]	; (8019a84 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8019908:	485f      	ldr	r0, [pc, #380]	; (8019a88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801990a:	f00b fa7b 	bl	8024e04 <__assert_func>
 801990e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8019910:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019914:	8b59      	ldrh	r1, [r3, #26]
 8019916:	f640 6333 	movw	r3, #3635	; 0xe33
 801991a:	4299      	cmp	r1, r3
 801991c:	d110      	bne.n	8019940 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801991e:	6803      	ldr	r3, [r0, #0]
 8019920:	68db      	ldr	r3, [r3, #12]
 8019922:	4798      	blx	r3
 8019924:	7b41      	ldrb	r1, [r0, #13]
 8019926:	00cb      	lsls	r3, r1, #3
 8019928:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801992c:	7a03      	ldrb	r3, [r0, #8]
 801992e:	0648      	lsls	r0, r1, #25
 8019930:	ea43 0302 	orr.w	r3, r3, r2
 8019934:	bf44      	itt	mi
 8019936:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801993a:	b21b      	sxthmi	r3, r3
 801993c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8019940:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8019944:	462a      	mov	r2, r5
 8019946:	f105 0c08 	add.w	ip, r5, #8
 801994a:	443b      	add	r3, r7
 801994c:	4433      	add	r3, r6
 801994e:	f104 0644 	add.w	r6, r4, #68	; 0x44
 8019952:	b29b      	uxth	r3, r3
 8019954:	4635      	mov	r5, r6
 8019956:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801995a:	6810      	ldr	r0, [r2, #0]
 801995c:	3208      	adds	r2, #8
 801995e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8019962:	4637      	mov	r7, r6
 8019964:	4562      	cmp	r2, ip
 8019966:	c703      	stmia	r7!, {r0, r1}
 8019968:	463e      	mov	r6, r7
 801996a:	d1f6      	bne.n	801995a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801996c:	6810      	ldr	r0, [r2, #0]
 801996e:	6038      	str	r0, [r7, #0]
 8019970:	8892      	ldrh	r2, [r2, #4]
 8019972:	80ba      	strh	r2, [r7, #4]
 8019974:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8019978:	10db      	asrs	r3, r3, #3
 801997a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801997e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019982:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019986:	4313      	orrs	r3, r2
 8019988:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 801998c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8019990:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 8019994:	1a9b      	subs	r3, r3, r2
 8019996:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801999a:	e768      	b.n	801986e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801999c:	f023 0204 	bic.w	r2, r3, #4
 80199a0:	f640 611b 	movw	r1, #3611	; 0xe1b
 80199a4:	428a      	cmp	r2, r1
 80199a6:	d003      	beq.n	80199b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 80199a8:	f640 621d 	movw	r2, #3613	; 0xe1d
 80199ac:	4293      	cmp	r3, r2
 80199ae:	d120      	bne.n	80199f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 80199b0:	3b01      	subs	r3, #1
 80199b2:	4602      	mov	r2, r0
 80199b4:	4629      	mov	r1, r5
 80199b6:	4620      	mov	r0, r4
 80199b8:	b29b      	uxth	r3, r3
 80199ba:	f7ff ff42 	bl	8019842 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80199be:	7b41      	ldrb	r1, [r0, #13]
 80199c0:	00cb      	lsls	r3, r1, #3
 80199c2:	0649      	lsls	r1, r1, #25
 80199c4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80199c8:	7a03      	ldrb	r3, [r0, #8]
 80199ca:	ea43 0302 	orr.w	r3, r3, r2
 80199ce:	bf44      	itt	mi
 80199d0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80199d4:	b21b      	sxthmi	r3, r3
 80199d6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80199da:	7b6b      	ldrb	r3, [r5, #13]
 80199dc:	7aaa      	ldrb	r2, [r5, #10]
 80199de:	005b      	lsls	r3, r3, #1
 80199e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80199e4:	4313      	orrs	r3, r2
 80199e6:	115a      	asrs	r2, r3, #5
 80199e8:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80199ec:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80199f0:	e035      	b.n	8019a5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 80199f2:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80199f6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80199fa:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80199fe:	7a2a      	ldrb	r2, [r5, #8]
 8019a00:	ea42 0201 	orr.w	r2, r2, r1
 8019a04:	f640 6109 	movw	r1, #3593	; 0xe09
 8019a08:	bf1c      	itt	ne
 8019a0a:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8019a0e:	b212      	sxthne	r2, r2
 8019a10:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8019a14:	f023 0210 	bic.w	r2, r3, #16
 8019a18:	428a      	cmp	r2, r1
 8019a1a:	d003      	beq.n	8019a24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8019a1c:	f640 6213 	movw	r2, #3603	; 0xe13
 8019a20:	4293      	cmp	r3, r2
 8019a22:	d129      	bne.n	8019a78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8019a24:	7b6e      	ldrb	r6, [r5, #13]
 8019a26:	4629      	mov	r1, r5
 8019a28:	0076      	lsls	r6, r6, #1
 8019a2a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019a2e:	7aae      	ldrb	r6, [r5, #10]
 8019a30:	4316      	orrs	r6, r2
 8019a32:	f640 6213 	movw	r2, #3603	; 0xe13
 8019a36:	4293      	cmp	r3, r2
 8019a38:	4602      	mov	r2, r0
 8019a3a:	4620      	mov	r0, r4
 8019a3c:	bf16      	itet	ne
 8019a3e:	f103 33ff 	addne.w	r3, r3, #4294967295
 8019a42:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8019a46:	b29b      	uxthne	r3, r3
 8019a48:	f7ff fefb 	bl	8019842 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019a4c:	7b43      	ldrb	r3, [r0, #13]
 8019a4e:	7a82      	ldrb	r2, [r0, #10]
 8019a50:	005b      	lsls	r3, r3, #1
 8019a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019a56:	4313      	orrs	r3, r2
 8019a58:	1af6      	subs	r6, r6, r3
 8019a5a:	f8a4 6056 	strh.w	r6, [r4, #86]	; 0x56
 8019a5e:	7b69      	ldrb	r1, [r5, #13]
 8019a60:	00cb      	lsls	r3, r1, #3
 8019a62:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019a66:	7a2b      	ldrb	r3, [r5, #8]
 8019a68:	4313      	orrs	r3, r2
 8019a6a:	064a      	lsls	r2, r1, #25
 8019a6c:	bf44      	itt	mi
 8019a6e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019a72:	b21b      	sxthmi	r3, r3
 8019a74:	1bdb      	subs	r3, r3, r7
 8019a76:	e73f      	b.n	80198f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8019a78:	2300      	movs	r3, #0
 8019a7a:	e7b7      	b.n	80199ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8019a7c:	3fc00079 	.word	0x3fc00079
 8019a80:	0802c2d0 	.word	0x0802c2d0
 8019a84:	0802c542 	.word	0x0802c542
 8019a88:	0802c2d9 	.word	0x0802c2d9

08019a8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8019a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019a90:	4604      	mov	r4, r0
 8019a92:	b942      	cbnz	r2, 8019aa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8019a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019a98:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8019a9c:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 8019aa0:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8019aa4:	e046      	b.n	8019b34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8019aa6:	7b51      	ldrb	r1, [r2, #13]
 8019aa8:	8893      	ldrh	r3, [r2, #4]
 8019aaa:	010f      	lsls	r7, r1, #4
 8019aac:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8019ab0:	79d7      	ldrb	r7, [r2, #7]
 8019ab2:	4307      	orrs	r7, r0
 8019ab4:	2f04      	cmp	r7, #4
 8019ab6:	b2bd      	uxth	r5, r7
 8019ab8:	bfcc      	ite	gt
 8019aba:	08bf      	lsrgt	r7, r7, #2
 8019abc:	2701      	movle	r7, #1
 8019abe:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8019ac2:	f200 80ab 	bhi.w	8019c1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8019ac6:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8019aca:	4283      	cmp	r3, r0
 8019acc:	d216      	bcs.n	8019afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019ace:	f240 605b 	movw	r0, #1627	; 0x65b
 8019ad2:	4283      	cmp	r3, r0
 8019ad4:	d859      	bhi.n	8019b8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8019ad6:	f240 6057 	movw	r0, #1623	; 0x657
 8019ada:	4283      	cmp	r3, r0
 8019adc:	d20e      	bcs.n	8019afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019ade:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8019ae2:	d24a      	bcs.n	8019b7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8019ae4:	f240 604e 	movw	r0, #1614	; 0x64e
 8019ae8:	4283      	cmp	r3, r0
 8019aea:	d207      	bcs.n	8019afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019aec:	f240 601a 	movw	r0, #1562	; 0x61a
 8019af0:	4283      	cmp	r3, r0
 8019af2:	d02a      	beq.n	8019b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019af4:	d821      	bhi.n	8019b3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8019af6:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8019afa:	d35b      	bcc.n	8019bb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019afc:	f9b4 3052 	ldrsh.w	r3, [r4, #82]	; 0x52
 8019b00:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019b04:	f040 80d0 	bne.w	8019ca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8019b08:	f9b4 0054 	ldrsh.w	r0, [r4, #84]	; 0x54
 8019b0c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019b10:	f040 80ca 	bne.w	8019ca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8019b14:	00cb      	lsls	r3, r1, #3
 8019b16:	0649      	lsls	r1, r1, #25
 8019b18:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019b1c:	7a13      	ldrb	r3, [r2, #8]
 8019b1e:	ea43 0300 	orr.w	r3, r3, r0
 8019b22:	bf44      	itt	mi
 8019b24:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019b28:	b21b      	sxthmi	r3, r3
 8019b2a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8019b2e:	1b5d      	subs	r5, r3, r5
 8019b30:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8019b34:	4610      	mov	r0, r2
 8019b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b3a:	f240 604b 	movw	r0, #1611	; 0x64b
 8019b3e:	4283      	cmp	r3, r0
 8019b40:	d338      	bcc.n	8019bb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019b42:	f240 604c 	movw	r0, #1612	; 0x64c
 8019b46:	4283      	cmp	r3, r0
 8019b48:	d9d8      	bls.n	8019afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019b4a:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8019b4e:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 8019b52:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019b56:	f040 80f2 	bne.w	8019d3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8019b5a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019b5e:	f040 80ee 	bne.w	8019d3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8019b62:	00cb      	lsls	r3, r1, #3
 8019b64:	064e      	lsls	r6, r1, #25
 8019b66:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019b6a:	7a13      	ldrb	r3, [r2, #8]
 8019b6c:	ea43 0300 	orr.w	r3, r3, r0
 8019b70:	bf44      	itt	mi
 8019b72:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019b76:	b21b      	sxthmi	r3, r3
 8019b78:	e7d9      	b.n	8019b2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8019b7a:	f240 6054 	movw	r0, #1620	; 0x654
 8019b7e:	4283      	cmp	r3, r0
 8019b80:	d8e3      	bhi.n	8019b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019b82:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8019b86:	d9e0      	bls.n	8019b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019b88:	e7b8      	b.n	8019afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019b8a:	f240 6074 	movw	r0, #1652	; 0x674
 8019b8e:	4283      	cmp	r3, r0
 8019b90:	d0b4      	beq.n	8019afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019b92:	d82d      	bhi.n	8019bf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8019b94:	f240 605e 	movw	r0, #1630	; 0x65e
 8019b98:	4283      	cmp	r3, r0
 8019b9a:	d804      	bhi.n	8019ba6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8019b9c:	f240 605d 	movw	r0, #1629	; 0x65d
 8019ba0:	4283      	cmp	r3, r0
 8019ba2:	d3d2      	bcc.n	8019b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019ba4:	e7aa      	b.n	8019afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019ba6:	f240 605f 	movw	r0, #1631	; 0x65f
 8019baa:	4283      	cmp	r3, r0
 8019bac:	d0cd      	beq.n	8019b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019bae:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8019bb2:	d0a3      	beq.n	8019afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019bb4:	00cb      	lsls	r3, r1, #3
 8019bb6:	0649      	lsls	r1, r1, #25
 8019bb8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019bbc:	7a13      	ldrb	r3, [r2, #8]
 8019bbe:	ea43 0300 	orr.w	r3, r3, r0
 8019bc2:	bf44      	itt	mi
 8019bc4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019bc8:	b21b      	sxthmi	r3, r3
 8019bca:	1b5d      	subs	r5, r3, r5
 8019bcc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8019bd0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8019bd4:	7b53      	ldrb	r3, [r2, #13]
 8019bd6:	015b      	lsls	r3, r3, #5
 8019bd8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019bdc:	7993      	ldrb	r3, [r2, #6]
 8019bde:	430b      	orrs	r3, r1
 8019be0:	2105      	movs	r1, #5
 8019be2:	005b      	lsls	r3, r3, #1
 8019be4:	fb93 f3f1 	sdiv	r3, r3, r1
 8019be8:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8019bec:	440b      	add	r3, r1
 8019bee:	e757      	b.n	8019aa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8019bf0:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8019bf4:	4283      	cmp	r3, r0
 8019bf6:	d809      	bhi.n	8019c0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8019bf8:	f240 60df 	movw	r0, #1759	; 0x6df
 8019bfc:	4283      	cmp	r3, r0
 8019bfe:	f4bf af7d 	bcs.w	8019afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019c02:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8019c06:	2b05      	cmp	r3, #5
 8019c08:	d8d4      	bhi.n	8019bb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019c0a:	e777      	b.n	8019afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019c0c:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8019c10:	4283      	cmp	r3, r0
 8019c12:	d09a      	beq.n	8019b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019c14:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8019c18:	4283      	cmp	r3, r0
 8019c1a:	e7ca      	b.n	8019bb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8019c1c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8019c20:	d22b      	bcs.n	8019c7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8019c22:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8019c26:	4283      	cmp	r3, r0
 8019c28:	d28f      	bcs.n	8019b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019c2a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019c2e:	4283      	cmp	r3, r0
 8019c30:	d816      	bhi.n	8019c60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8019c32:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8019c36:	4283      	cmp	r3, r0
 8019c38:	f4bf af60 	bcs.w	8019afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019c3c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8019c40:	4283      	cmp	r3, r0
 8019c42:	d80a      	bhi.n	8019c5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8019c44:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8019c48:	4283      	cmp	r3, r0
 8019c4a:	f4bf af57 	bcs.w	8019afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019c4e:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8019c52:	4283      	cmp	r3, r0
 8019c54:	f43f af79 	beq.w	8019b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019c58:	e7ac      	b.n	8019bb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019c5a:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8019c5e:	e7f8      	b.n	8019c52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8019c60:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8019c64:	4283      	cmp	r3, r0
 8019c66:	d802      	bhi.n	8019c6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8019c68:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8019c6c:	e798      	b.n	8019ba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8019c6e:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8019c72:	4283      	cmp	r3, r0
 8019c74:	f47f af42 	bne.w	8019afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019c78:	e767      	b.n	8019b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019c7a:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8019c7e:	4283      	cmp	r3, r0
 8019c80:	f43f af63 	beq.w	8019b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019c84:	d802      	bhi.n	8019c8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8019c86:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8019c8a:	e7f2      	b.n	8019c72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8019c8c:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8019c90:	4283      	cmp	r3, r0
 8019c92:	d805      	bhi.n	8019ca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8019c94:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8019c98:	4283      	cmp	r3, r0
 8019c9a:	f4ff af2f 	bcc.w	8019afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019c9e:	e754      	b.n	8019b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019ca0:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8019ca4:	4283      	cmp	r3, r0
 8019ca6:	e7af      	b.n	8019c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8019ca8:	f104 0c44 	add.w	ip, r4, #68	; 0x44
 8019cac:	4617      	mov	r7, r2
 8019cae:	f102 0808 	add.w	r8, r2, #8
 8019cb2:	4666      	mov	r6, ip
 8019cb4:	6838      	ldr	r0, [r7, #0]
 8019cb6:	3708      	adds	r7, #8
 8019cb8:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8019cbc:	46e6      	mov	lr, ip
 8019cbe:	4547      	cmp	r7, r8
 8019cc0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8019cc4:	46f4      	mov	ip, lr
 8019cc6:	d1f5      	bne.n	8019cb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8019cc8:	6838      	ldr	r0, [r7, #0]
 8019cca:	f8ce 0000 	str.w	r0, [lr]
 8019cce:	88b9      	ldrh	r1, [r7, #4]
 8019cd0:	f8ae 1004 	strh.w	r1, [lr, #4]
 8019cd4:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 8019cd8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019cdc:	d009      	beq.n	8019cf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8019cde:	7b51      	ldrb	r1, [r2, #13]
 8019ce0:	7992      	ldrb	r2, [r2, #6]
 8019ce2:	0149      	lsls	r1, r1, #5
 8019ce4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019ce8:	4311      	orrs	r1, r2
 8019cea:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019cee:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 8019cf2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019cf6:	d00d      	beq.n	8019d14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8019cf8:	442b      	add	r3, r5
 8019cfa:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8019cfe:	b29b      	uxth	r3, r3
 8019d00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019d04:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8019d08:	10db      	asrs	r3, r3, #3
 8019d0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019d0e:	4313      	orrs	r3, r2
 8019d10:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8019d14:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8019d18:	00cb      	lsls	r3, r1, #3
 8019d1a:	064f      	lsls	r7, r1, #25
 8019d1c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019d20:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8019d24:	ea43 0302 	orr.w	r3, r3, r2
 8019d28:	bf44      	itt	mi
 8019d2a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019d2e:	b21b      	sxthmi	r3, r3
 8019d30:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8019d34:	1b5d      	subs	r5, r3, r5
 8019d36:	4632      	mov	r2, r6
 8019d38:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8019d3c:	e6fa      	b.n	8019b34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8019d3e:	f104 0e44 	add.w	lr, r4, #68	; 0x44
 8019d42:	4694      	mov	ip, r2
 8019d44:	f102 0908 	add.w	r9, r2, #8
 8019d48:	4676      	mov	r6, lr
 8019d4a:	f8dc 0000 	ldr.w	r0, [ip]
 8019d4e:	f10c 0c08 	add.w	ip, ip, #8
 8019d52:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8019d56:	46f0      	mov	r8, lr
 8019d58:	45cc      	cmp	ip, r9
 8019d5a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8019d5e:	46c6      	mov	lr, r8
 8019d60:	d1f3      	bne.n	8019d4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 8019d62:	f8dc 0000 	ldr.w	r0, [ip]
 8019d66:	f8c8 0000 	str.w	r0, [r8]
 8019d6a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8019d6e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8019d72:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 8019d76:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019d7a:	d009      	beq.n	8019d90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8019d7c:	7b51      	ldrb	r1, [r2, #13]
 8019d7e:	7992      	ldrb	r2, [r2, #6]
 8019d80:	0149      	lsls	r1, r1, #5
 8019d82:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019d86:	4311      	orrs	r1, r2
 8019d88:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019d8c:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 8019d90:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019d94:	d00d      	beq.n	8019db2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 8019d96:	1bdb      	subs	r3, r3, r7
 8019d98:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8019d9c:	b29b      	uxth	r3, r3
 8019d9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019da2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8019da6:	10db      	asrs	r3, r3, #3
 8019da8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019dac:	4313      	orrs	r3, r2
 8019dae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8019db2:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8019db6:	00cb      	lsls	r3, r1, #3
 8019db8:	0648      	lsls	r0, r1, #25
 8019dba:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019dbe:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8019dc2:	ea43 0302 	orr.w	r3, r3, r2
 8019dc6:	bf44      	itt	mi
 8019dc8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019dcc:	b21b      	sxthmi	r3, r3
 8019dce:	e7b1      	b.n	8019d34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

08019dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8019dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dd4:	461e      	mov	r6, r3
 8019dd6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8019dd8:	4604      	mov	r4, r0
 8019dda:	4617      	mov	r7, r2
 8019ddc:	b92b      	cbnz	r3, 8019dea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8019dde:	4b25      	ldr	r3, [pc, #148]	; (8019e74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8019de0:	21bf      	movs	r1, #191	; 0xbf
 8019de2:	4a25      	ldr	r2, [pc, #148]	; (8019e78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8019de4:	4825      	ldr	r0, [pc, #148]	; (8019e7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 8019de6:	f00b f80d 	bl	8024e04 <__assert_func>
 8019dea:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8019dec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019df0:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8019df4:	f7ee f918 	bl	8008028 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019df8:	4605      	mov	r5, r0
 8019dfa:	b918      	cbnz	r0, 8019e04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8019dfc:	6030      	str	r0, [r6, #0]
 8019dfe:	4628      	mov	r0, r5
 8019e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e04:	683b      	ldr	r3, [r7, #0]
 8019e06:	4601      	mov	r1, r0
 8019e08:	4638      	mov	r0, r7
 8019e0a:	68db      	ldr	r3, [r3, #12]
 8019e0c:	4798      	blx	r3
 8019e0e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019e12:	4602      	mov	r2, r0
 8019e14:	6030      	str	r0, [r6, #0]
 8019e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019e1a:	d213      	bcs.n	8019e44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8019e1c:	4643      	mov	r3, r8
 8019e1e:	4639      	mov	r1, r7
 8019e20:	4620      	mov	r0, r4
 8019e22:	f7ff fe33 	bl	8019a8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019e26:	6030      	str	r0, [r6, #0]
 8019e28:	6833      	ldr	r3, [r6, #0]
 8019e2a:	b143      	cbz	r3, 8019e3e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8019e2c:	7b5a      	ldrb	r2, [r3, #13]
 8019e2e:	7a9b      	ldrb	r3, [r3, #10]
 8019e30:	0052      	lsls	r2, r2, #1
 8019e32:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019e36:	4313      	orrs	r3, r2
 8019e38:	bf0c      	ite	eq
 8019e3a:	2301      	moveq	r3, #1
 8019e3c:	2300      	movne	r3, #0
 8019e3e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019e42:	e7dc      	b.n	8019dfe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8019e44:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019e48:	b29b      	uxth	r3, r3
 8019e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8019e4c:	d804      	bhi.n	8019e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8019e4e:	4639      	mov	r1, r7
 8019e50:	4620      	mov	r0, r4
 8019e52:	f7ff fd01 	bl	8019858 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019e56:	e7e6      	b.n	8019e26 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8019e58:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	d0e3      	beq.n	8019e28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8019e60:	f640 1302 	movw	r3, #2306	; 0x902
 8019e64:	429d      	cmp	r5, r3
 8019e66:	d1df      	bne.n	8019e28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8019e68:	4601      	mov	r1, r0
 8019e6a:	4620      	mov	r0, r4
 8019e6c:	f7ff fcc5 	bl	80197fa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019e70:	e7d9      	b.n	8019e26 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8019e72:	bf00      	nop
 8019e74:	0802c2d0 	.word	0x0802c2d0
 8019e78:	0802c542 	.word	0x0802c542
 8019e7c:	0802c2d9 	.word	0x0802c2d9

08019e80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8019e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e84:	461e      	mov	r6, r3
 8019e86:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8019e88:	4604      	mov	r4, r0
 8019e8a:	4617      	mov	r7, r2
 8019e8c:	b92b      	cbnz	r3, 8019e9a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8019e8e:	4b26      	ldr	r3, [pc, #152]	; (8019f28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8019e90:	21bf      	movs	r1, #191	; 0xbf
 8019e92:	4a26      	ldr	r2, [pc, #152]	; (8019f2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8019e94:	4826      	ldr	r0, [pc, #152]	; (8019f30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8019e96:	f00a ffb5 	bl	8024e04 <__assert_func>
 8019e9a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8019e9c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019ea0:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8019ea4:	f7ee f8c0 	bl	8008028 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019ea8:	4605      	mov	r5, r0
 8019eaa:	b918      	cbnz	r0, 8019eb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8019eac:	6030      	str	r0, [r6, #0]
 8019eae:	4628      	mov	r0, r5
 8019eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019eb4:	683b      	ldr	r3, [r7, #0]
 8019eb6:	4601      	mov	r1, r0
 8019eb8:	4638      	mov	r0, r7
 8019eba:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8019ebe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019ec2:	47c8      	blx	r9
 8019ec4:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019ec8:	4602      	mov	r2, r0
 8019eca:	6030      	str	r0, [r6, #0]
 8019ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019ed0:	d213      	bcs.n	8019efa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 8019ed2:	4643      	mov	r3, r8
 8019ed4:	4639      	mov	r1, r7
 8019ed6:	4620      	mov	r0, r4
 8019ed8:	f7ff fdd8 	bl	8019a8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019edc:	6030      	str	r0, [r6, #0]
 8019ede:	6833      	ldr	r3, [r6, #0]
 8019ee0:	b143      	cbz	r3, 8019ef4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8019ee2:	7b5a      	ldrb	r2, [r3, #13]
 8019ee4:	7a9b      	ldrb	r3, [r3, #10]
 8019ee6:	0052      	lsls	r2, r2, #1
 8019ee8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019eec:	4313      	orrs	r3, r2
 8019eee:	bf0c      	ite	eq
 8019ef0:	2301      	moveq	r3, #1
 8019ef2:	2300      	movne	r3, #0
 8019ef4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019ef8:	e7d9      	b.n	8019eae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8019efa:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019efe:	b29b      	uxth	r3, r3
 8019f00:	2b7f      	cmp	r3, #127	; 0x7f
 8019f02:	d804      	bhi.n	8019f0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 8019f04:	4639      	mov	r1, r7
 8019f06:	4620      	mov	r0, r4
 8019f08:	f7ff fca6 	bl	8019858 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019f0c:	e7e6      	b.n	8019edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8019f0e:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d0e3      	beq.n	8019ede <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8019f16:	f640 1302 	movw	r3, #2306	; 0x902
 8019f1a:	429d      	cmp	r5, r3
 8019f1c:	d1df      	bne.n	8019ede <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8019f1e:	4601      	mov	r1, r0
 8019f20:	4620      	mov	r0, r4
 8019f22:	f7ff fc6a 	bl	80197fa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019f26:	e7d9      	b.n	8019edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8019f28:	0802c2d0 	.word	0x0802c2d0
 8019f2c:	0802c542 	.word	0x0802c542
 8019f30:	0802c2d9 	.word	0x0802c2d9

08019f34 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8019f34:	b510      	push	{r4, lr}
 8019f36:	4604      	mov	r4, r0
 8019f38:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8019f3a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019f3c:	b9d9      	cbnz	r1, 8019f76 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 8019f3e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019f40:	2b0a      	cmp	r3, #10
 8019f42:	d036      	beq.n	8019fb2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8019f44:	4620      	mov	r0, r4
 8019f46:	f7ff fc1f 	bl	8019788 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8019f4a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019f4c:	2b09      	cmp	r3, #9
 8019f4e:	d906      	bls.n	8019f5e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 8019f50:	4b18      	ldr	r3, [pc, #96]	; (8019fb4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 8019f52:	f240 1103 	movw	r1, #259	; 0x103
 8019f56:	4a18      	ldr	r2, [pc, #96]	; (8019fb8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8019f58:	4818      	ldr	r0, [pc, #96]	; (8019fbc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8019f5a:	f00a ff53 	bl	8024e04 <__assert_func>
 8019f5e:	1c5a      	adds	r2, r3, #1
 8019f60:	8622      	strh	r2, [r4, #48]	; 0x30
 8019f62:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8019f64:	4413      	add	r3, r2
 8019f66:	b29b      	uxth	r3, r3
 8019f68:	2b09      	cmp	r3, #9
 8019f6a:	bf88      	it	hi
 8019f6c:	3b0a      	subhi	r3, #10
 8019f6e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019f72:	8358      	strh	r0, [r3, #26]
 8019f74:	e7e3      	b.n	8019f3e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 8019f76:	2b0a      	cmp	r3, #10
 8019f78:	d01b      	beq.n	8019fb2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8019f7a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019f7c:	3901      	subs	r1, #1
 8019f7e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8019f82:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8019f84:	8721      	strh	r1, [r4, #56]	; 0x38
 8019f86:	1c51      	adds	r1, r2, #1
 8019f88:	b289      	uxth	r1, r1
 8019f8a:	2901      	cmp	r1, #1
 8019f8c:	bf8a      	itet	hi
 8019f8e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019f92:	86e1      	strhls	r1, [r4, #54]	; 0x36
 8019f94:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 8019f96:	2b09      	cmp	r3, #9
 8019f98:	d8da      	bhi.n	8019f50 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 8019f9a:	1c5a      	adds	r2, r3, #1
 8019f9c:	8622      	strh	r2, [r4, #48]	; 0x30
 8019f9e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8019fa0:	4413      	add	r3, r2
 8019fa2:	b29b      	uxth	r3, r3
 8019fa4:	2b09      	cmp	r3, #9
 8019fa6:	bf88      	it	hi
 8019fa8:	3b0a      	subhi	r3, #10
 8019faa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019fae:	8358      	strh	r0, [r3, #26]
 8019fb0:	e7c2      	b.n	8019f38 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8019fb2:	bd10      	pop	{r4, pc}
 8019fb4:	0802c305 	.word	0x0802c305
 8019fb8:	0802c698 	.word	0x0802c698
 8019fbc:	0802c2d9 	.word	0x0802c2d9

08019fc0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019fc0:	b538      	push	{r3, r4, r5, lr}
 8019fc2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8019fc4:	4604      	mov	r4, r0
 8019fc6:	b92a      	cbnz	r2, 8019fd4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8019fc8:	4b13      	ldr	r3, [pc, #76]	; (801a018 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8019fca:	21d4      	movs	r1, #212	; 0xd4
 8019fcc:	4a13      	ldr	r2, [pc, #76]	; (801a01c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8019fce:	4814      	ldr	r0, [pc, #80]	; (801a020 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8019fd0:	f00a ff18 	bl	8024e04 <__assert_func>
 8019fd4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8019fd6:	3a01      	subs	r2, #1
 8019fd8:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8019fdc:	8b4d      	ldrh	r5, [r1, #26]
 8019fde:	8602      	strh	r2, [r0, #48]	; 0x30
 8019fe0:	1c5a      	adds	r2, r3, #1
 8019fe2:	b292      	uxth	r2, r2
 8019fe4:	2a09      	cmp	r2, #9
 8019fe6:	bf8a      	itet	hi
 8019fe8:	3b09      	subhi	r3, #9
 8019fea:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 8019fec:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 8019fee:	f7ff ffa1 	bl	8019f34 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019ff2:	8b23      	ldrh	r3, [r4, #24]
 8019ff4:	2b01      	cmp	r3, #1
 8019ff6:	bf9c      	itt	ls
 8019ff8:	3301      	addls	r3, #1
 8019ffa:	8323      	strhls	r3, [r4, #24]
 8019ffc:	8ae3      	ldrh	r3, [r4, #22]
 8019ffe:	b90b      	cbnz	r3, 801a004 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801a000:	2302      	movs	r3, #2
 801a002:	82e3      	strh	r3, [r4, #22]
 801a004:	8ae3      	ldrh	r3, [r4, #22]
 801a006:	4628      	mov	r0, r5
 801a008:	3b01      	subs	r3, #1
 801a00a:	b29b      	uxth	r3, r3
 801a00c:	82e3      	strh	r3, [r4, #22]
 801a00e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a012:	8265      	strh	r5, [r4, #18]
 801a014:	bd38      	pop	{r3, r4, r5, pc}
 801a016:	bf00      	nop
 801a018:	0802c2d0 	.word	0x0802c2d0
 801a01c:	0802c5ed 	.word	0x0802c5ed
 801a020:	0802c2d9 	.word	0x0802c2d9

0801a024 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801a024:	428a      	cmp	r2, r1
 801a026:	b538      	push	{r3, r4, r5, lr}
 801a028:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801a02a:	d90c      	bls.n	801a046 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801a02c:	b92c      	cbnz	r4, 801a03a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801a02e:	4b1c      	ldr	r3, [pc, #112]	; (801a0a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801a030:	21e0      	movs	r1, #224	; 0xe0
 801a032:	4a1c      	ldr	r2, [pc, #112]	; (801a0a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801a034:	481c      	ldr	r0, [pc, #112]	; (801a0a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801a036:	f00a fee5 	bl	8024e04 <__assert_func>
 801a03a:	3c01      	subs	r4, #1
 801a03c:	4b1b      	ldr	r3, [pc, #108]	; (801a0ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801a03e:	4a1c      	ldr	r2, [pc, #112]	; (801a0b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801a040:	21c4      	movs	r1, #196	; 0xc4
 801a042:	8604      	strh	r4, [r0, #48]	; 0x30
 801a044:	e7f6      	b.n	801a034 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801a046:	428c      	cmp	r4, r1
 801a048:	d203      	bcs.n	801a052 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801a04a:	4b1a      	ldr	r3, [pc, #104]	; (801a0b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801a04c:	21ca      	movs	r1, #202	; 0xca
 801a04e:	4a1a      	ldr	r2, [pc, #104]	; (801a0b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801a050:	e7f0      	b.n	801a034 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801a052:	1a64      	subs	r4, r4, r1
 801a054:	250a      	movs	r5, #10
 801a056:	8604      	strh	r4, [r0, #48]	; 0x30
 801a058:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801a05a:	4421      	add	r1, r4
 801a05c:	b289      	uxth	r1, r1
 801a05e:	2909      	cmp	r1, #9
 801a060:	bf88      	it	hi
 801a062:	390a      	subhi	r1, #10
 801a064:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801a066:	b1ba      	cbz	r2, 801a098 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801a068:	3a01      	subs	r2, #1
 801a06a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801a06c:	b292      	uxth	r2, r2
 801a06e:	2909      	cmp	r1, #9
 801a070:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801a074:	d903      	bls.n	801a07e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801a076:	4b11      	ldr	r3, [pc, #68]	; (801a0bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801a078:	21e5      	movs	r1, #229	; 0xe5
 801a07a:	4a11      	ldr	r2, [pc, #68]	; (801a0c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801a07c:	e7da      	b.n	801a034 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801a07e:	3101      	adds	r1, #1
 801a080:	8601      	strh	r1, [r0, #48]	; 0x30
 801a082:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801a084:	b901      	cbnz	r1, 801a088 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801a086:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801a088:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801a08a:	3901      	subs	r1, #1
 801a08c:	b289      	uxth	r1, r1
 801a08e:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801a090:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a094:	834c      	strh	r4, [r1, #26]
 801a096:	e7e6      	b.n	801a066 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801a098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a09c:	f7ff bf4a 	b.w	8019f34 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a0a0:	0802c2d0 	.word	0x0802c2d0
 801a0a4:	0802c3c6 	.word	0x0802c3c6
 801a0a8:	0802c2d9 	.word	0x0802c2d9
 801a0ac:	0802c311 	.word	0x0802c311
 801a0b0:	0802c470 	.word	0x0802c470
 801a0b4:	0802c31f 	.word	0x0802c31f
 801a0b8:	0802c747 	.word	0x0802c747
 801a0bc:	0802c32b 	.word	0x0802c32b
 801a0c0:	0802c33e 	.word	0x0802c33e

0801a0c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a0c4:	3a01      	subs	r2, #1
 801a0c6:	b570      	push	{r4, r5, r6, lr}
 801a0c8:	b292      	uxth	r2, r2
 801a0ca:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801a0ce:	42b2      	cmp	r2, r6
 801a0d0:	d019      	beq.n	801a106 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801a0d2:	8b04      	ldrh	r4, [r0, #24]
 801a0d4:	f831 5b02 	ldrh.w	r5, [r1], #2
 801a0d8:	4294      	cmp	r4, r2
 801a0da:	d805      	bhi.n	801a0e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801a0dc:	4b19      	ldr	r3, [pc, #100]	; (801a144 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801a0de:	4a1a      	ldr	r2, [pc, #104]	; (801a148 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801a0e0:	21c4      	movs	r1, #196	; 0xc4
 801a0e2:	481a      	ldr	r0, [pc, #104]	; (801a14c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801a0e4:	f00a fe8e 	bl	8024e04 <__assert_func>
 801a0e8:	8ac4      	ldrh	r4, [r0, #22]
 801a0ea:	4414      	add	r4, r2
 801a0ec:	3a01      	subs	r2, #1
 801a0ee:	b2a4      	uxth	r4, r4
 801a0f0:	b292      	uxth	r2, r2
 801a0f2:	2c01      	cmp	r4, #1
 801a0f4:	bf88      	it	hi
 801a0f6:	3c02      	subhi	r4, #2
 801a0f8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801a0fc:	8a64      	ldrh	r4, [r4, #18]
 801a0fe:	42ac      	cmp	r4, r5
 801a100:	d0e5      	beq.n	801a0ce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801a102:	2000      	movs	r0, #0
 801a104:	bd70      	pop	{r4, r5, r6, pc}
 801a106:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a10a:	2400      	movs	r4, #0
 801a10c:	4413      	add	r3, r2
 801a10e:	b2a2      	uxth	r2, r4
 801a110:	429a      	cmp	r2, r3
 801a112:	da14      	bge.n	801a13e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801a114:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801a116:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801a11a:	4296      	cmp	r6, r2
 801a11c:	d802      	bhi.n	801a124 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801a11e:	4b09      	ldr	r3, [pc, #36]	; (801a144 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801a120:	4a0b      	ldr	r2, [pc, #44]	; (801a150 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801a122:	e7dd      	b.n	801a0e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801a124:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801a126:	3401      	adds	r4, #1
 801a128:	4432      	add	r2, r6
 801a12a:	b292      	uxth	r2, r2
 801a12c:	2a09      	cmp	r2, #9
 801a12e:	bf88      	it	hi
 801a130:	3a0a      	subhi	r2, #10
 801a132:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a136:	8b52      	ldrh	r2, [r2, #26]
 801a138:	42aa      	cmp	r2, r5
 801a13a:	d0e8      	beq.n	801a10e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801a13c:	e7e1      	b.n	801a102 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801a13e:	2001      	movs	r0, #1
 801a140:	e7e0      	b.n	801a104 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801a142:	bf00      	nop
 801a144:	0802c311 	.word	0x0802c311
 801a148:	0802c7cb 	.word	0x0802c7cb
 801a14c:	0802c2d9 	.word	0x0802c2d9
 801a150:	0802c470 	.word	0x0802c470

0801a154 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801a154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a158:	4605      	mov	r5, r0
 801a15a:	4616      	mov	r6, r2
 801a15c:	1c8c      	adds	r4, r1, #2
 801a15e:	8809      	ldrh	r1, [r1, #0]
 801a160:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801a164:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801a168:	42b3      	cmp	r3, r6
 801a16a:	d124      	bne.n	801a1b6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801a16c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801a170:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801a174:	f001 070f 	and.w	r7, r1, #15
 801a178:	4652      	mov	r2, sl
 801a17a:	f8cd 8000 	str.w	r8, [sp]
 801a17e:	464b      	mov	r3, r9
 801a180:	4621      	mov	r1, r4
 801a182:	4628      	mov	r0, r5
 801a184:	f7ff ff9e 	bl	801a0c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801a188:	4683      	mov	fp, r0
 801a18a:	b168      	cbz	r0, 801a1a8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801a18c:	eb0a 0109 	add.w	r1, sl, r9
 801a190:	463a      	mov	r2, r7
 801a192:	4628      	mov	r0, r5
 801a194:	4441      	add	r1, r8
 801a196:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801a19a:	4649      	mov	r1, r9
 801a19c:	f7ff ff42 	bl	801a024 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801a1a0:	4658      	mov	r0, fp
 801a1a2:	b003      	add	sp, #12
 801a1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1a8:	eb07 010a 	add.w	r1, r7, sl
 801a1ac:	4449      	add	r1, r9
 801a1ae:	4441      	add	r1, r8
 801a1b0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a1b4:	e7d2      	b.n	801a15c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801a1b6:	f04f 0b00 	mov.w	fp, #0
 801a1ba:	e7f1      	b.n	801a1a0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801a1bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a1bc:	b570      	push	{r4, r5, r6, lr}
 801a1be:	8810      	ldrh	r0, [r2, #0]
 801a1c0:	4298      	cmp	r0, r3
 801a1c2:	d817      	bhi.n	801a1f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a1c4:	1e48      	subs	r0, r1, #1
 801a1c6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a1ca:	4298      	cmp	r0, r3
 801a1cc:	d312      	bcc.n	801a1f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a1ce:	2400      	movs	r4, #0
 801a1d0:	428c      	cmp	r4, r1
 801a1d2:	d20f      	bcs.n	801a1f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a1d4:	1860      	adds	r0, r4, r1
 801a1d6:	1040      	asrs	r0, r0, #1
 801a1d8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a1dc:	0085      	lsls	r5, r0, #2
 801a1de:	42b3      	cmp	r3, r6
 801a1e0:	d902      	bls.n	801a1e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a1e2:	3001      	adds	r0, #1
 801a1e4:	b284      	uxth	r4, r0
 801a1e6:	e7f3      	b.n	801a1d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a1e8:	d201      	bcs.n	801a1ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801a1ea:	b281      	uxth	r1, r0
 801a1ec:	e7f0      	b.n	801a1d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a1ee:	442a      	add	r2, r5
 801a1f0:	8850      	ldrh	r0, [r2, #2]
 801a1f2:	bd70      	pop	{r4, r5, r6, pc}
 801a1f4:	2000      	movs	r0, #0
 801a1f6:	e7fc      	b.n	801a1f2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801a1f8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801a1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1fc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801a1fe:	4604      	mov	r4, r0
 801a200:	260b      	movs	r6, #11
 801a202:	886f      	ldrh	r7, [r5, #2]
 801a204:	087f      	lsrs	r7, r7, #1
 801a206:	3e01      	subs	r6, #1
 801a208:	d01b      	beq.n	801a242 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801a20a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a20c:	b92b      	cbnz	r3, 801a21a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801a20e:	4b0e      	ldr	r3, [pc, #56]	; (801a248 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801a210:	21bf      	movs	r1, #191	; 0xbf
 801a212:	4a0e      	ldr	r2, [pc, #56]	; (801a24c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801a214:	480e      	ldr	r0, [pc, #56]	; (801a250 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801a216:	f00a fdf5 	bl	8024e04 <__assert_func>
 801a21a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801a21c:	462a      	mov	r2, r5
 801a21e:	4639      	mov	r1, r7
 801a220:	4620      	mov	r0, r4
 801a222:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a226:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801a22a:	4643      	mov	r3, r8
 801a22c:	f7ff ffc6 	bl	801a1bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801a230:	b138      	cbz	r0, 801a242 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801a232:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801a236:	4642      	mov	r2, r8
 801a238:	4620      	mov	r0, r4
 801a23a:	f7ff ff8b 	bl	801a154 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801a23e:	2800      	cmp	r0, #0
 801a240:	d1e1      	bne.n	801a206 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801a242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a246:	bf00      	nop
 801a248:	0802c2d0 	.word	0x0802c2d0
 801a24c:	0802c542 	.word	0x0802c542
 801a250:	0802c2d9 	.word	0x0802c2d9

0801a254 <_ZN8touchgfx8ceil28_4El>:
 801a254:	f110 030f 	adds.w	r3, r0, #15
 801a258:	d401      	bmi.n	801a25e <_ZN8touchgfx8ceil28_4El+0xa>
 801a25a:	1118      	asrs	r0, r3, #4
 801a25c:	4770      	bx	lr
 801a25e:	2210      	movs	r2, #16
 801a260:	f1c0 0001 	rsb	r0, r0, #1
 801a264:	fb93 f3f2 	sdiv	r3, r3, r2
 801a268:	f010 000f 	ands.w	r0, r0, #15
 801a26c:	bf18      	it	ne
 801a26e:	2001      	movne	r0, #1
 801a270:	1a18      	subs	r0, r3, r0
 801a272:	4770      	bx	lr

0801a274 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801a274:	2900      	cmp	r1, #0
 801a276:	b538      	push	{r3, r4, r5, lr}
 801a278:	dc05      	bgt.n	801a286 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801a27a:	4b0f      	ldr	r3, [pc, #60]	; (801a2b8 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801a27c:	21f7      	movs	r1, #247	; 0xf7
 801a27e:	4a0f      	ldr	r2, [pc, #60]	; (801a2bc <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801a280:	480f      	ldr	r0, [pc, #60]	; (801a2c0 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801a282:	f00a fdbf 	bl	8024e04 <__assert_func>
 801a286:	2800      	cmp	r0, #0
 801a288:	db06      	blt.n	801a298 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801a28a:	fb90 f4f1 	sdiv	r4, r0, r1
 801a28e:	fb01 0114 	mls	r1, r1, r4, r0
 801a292:	6014      	str	r4, [r2, #0]
 801a294:	6019      	str	r1, [r3, #0]
 801a296:	bd38      	pop	{r3, r4, r5, pc}
 801a298:	4240      	negs	r0, r0
 801a29a:	fb90 f4f1 	sdiv	r4, r0, r1
 801a29e:	4265      	negs	r5, r4
 801a2a0:	fb01 0014 	mls	r0, r1, r4, r0
 801a2a4:	6015      	str	r5, [r2, #0]
 801a2a6:	6018      	str	r0, [r3, #0]
 801a2a8:	2800      	cmp	r0, #0
 801a2aa:	d0f4      	beq.n	801a296 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801a2ac:	6810      	ldr	r0, [r2, #0]
 801a2ae:	3801      	subs	r0, #1
 801a2b0:	6010      	str	r0, [r2, #0]
 801a2b2:	6818      	ldr	r0, [r3, #0]
 801a2b4:	1a09      	subs	r1, r1, r0
 801a2b6:	e7ed      	b.n	801a294 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801a2b8:	0802c89c 	.word	0x0802c89c
 801a2bc:	0802c8db 	.word	0x0802c8db
 801a2c0:	0802c8ac 	.word	0x0802c8ac

0801a2c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801a2c4:	b570      	push	{r4, r5, r6, lr}
 801a2c6:	694a      	ldr	r2, [r1, #20]
 801a2c8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801a2ca:	684b      	ldr	r3, [r1, #4]
 801a2cc:	1b54      	subs	r4, r2, r5
 801a2ce:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801a2d0:	f000 8106 	beq.w	801a4e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801a2d4:	1b9b      	subs	r3, r3, r6
 801a2d6:	d003      	beq.n	801a2e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a2d8:	4363      	muls	r3, r4
 801a2da:	2210      	movs	r2, #16
 801a2dc:	fb93 f3f2 	sdiv	r3, r3, r2
 801a2e0:	680c      	ldr	r4, [r1, #0]
 801a2e2:	698a      	ldr	r2, [r1, #24]
 801a2e4:	1b65      	subs	r5, r4, r5
 801a2e6:	f000 80fd 	beq.w	801a4e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801a2ea:	1b92      	subs	r2, r2, r6
 801a2ec:	d003      	beq.n	801a2f6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a2ee:	436a      	muls	r2, r5
 801a2f0:	2410      	movs	r4, #16
 801a2f2:	fb92 f2f4 	sdiv	r2, r2, r4
 801a2f6:	1a9b      	subs	r3, r3, r2
 801a2f8:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801a520 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801a2fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a300:	460a      	mov	r2, r1
 801a302:	ee07 3a90 	vmov	s15, r3
 801a306:	f100 040c 	add.w	r4, r0, #12
 801a30a:	4603      	mov	r3, r0
 801a30c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a310:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a314:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801a318:	eeb1 6a43 	vneg.f32	s12, s6
 801a31c:	edd2 7a02 	vldr	s15, [r2, #8]
 801a320:	3214      	adds	r2, #20
 801a322:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a326:	ece3 6a01 	vstmia	r3!, {s13}
 801a32a:	429c      	cmp	r4, r3
 801a32c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801a330:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a334:	edc3 7a02 	vstr	s15, [r3, #8]
 801a338:	ed52 7a01 	vldr	s15, [r2, #-4]
 801a33c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a340:	edc3 7a05 	vstr	s15, [r3, #20]
 801a344:	d1ea      	bne.n	801a31c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801a346:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a348:	698b      	ldr	r3, [r1, #24]
 801a34a:	edd0 4a02 	vldr	s9, [r0, #8]
 801a34e:	1a9b      	subs	r3, r3, r2
 801a350:	edd0 3a00 	vldr	s7, [r0]
 801a354:	edd0 6a01 	vldr	s13, [r0, #4]
 801a358:	ee07 3a90 	vmov	s15, r3
 801a35c:	684b      	ldr	r3, [r1, #4]
 801a35e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801a362:	ed90 5a05 	vldr	s10, [r0, #20]
 801a366:	1a9b      	subs	r3, r3, r2
 801a368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a36c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801a370:	ed90 2a03 	vldr	s4, [r0, #12]
 801a374:	ee07 3a10 	vmov	s14, r3
 801a378:	edd0 5a04 	vldr	s11, [r0, #16]
 801a37c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a380:	ed90 1a07 	vldr	s2, [r0, #28]
 801a384:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a388:	edd0 2a06 	vldr	s5, [r0, #24]
 801a38c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801a390:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801a394:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a398:	ee32 5a45 	vsub.f32	s10, s4, s10
 801a39c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a3a0:	ee67 7a83 	vmul.f32	s15, s15, s6
 801a3a4:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801a3a8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a3aa:	694a      	ldr	r2, [r1, #20]
 801a3ac:	1b13      	subs	r3, r2, r4
 801a3ae:	ee07 3a10 	vmov	s14, r3
 801a3b2:	680b      	ldr	r3, [r1, #0]
 801a3b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a3b8:	1b1b      	subs	r3, r3, r4
 801a3ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a3be:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801a3c2:	ee07 3a10 	vmov	s14, r3
 801a3c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a3ca:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a3ce:	eee6 4a87 	vfma.f32	s9, s13, s14
 801a3d2:	ee64 4a86 	vmul.f32	s9, s9, s12
 801a3d6:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801a3da:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a3dc:	698b      	ldr	r3, [r1, #24]
 801a3de:	1a9b      	subs	r3, r3, r2
 801a3e0:	ee06 3a90 	vmov	s13, r3
 801a3e4:	684b      	ldr	r3, [r1, #4]
 801a3e6:	1a9b      	subs	r3, r3, r2
 801a3e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a3ec:	ee07 3a10 	vmov	s14, r3
 801a3f0:	ee66 6a84 	vmul.f32	s13, s13, s8
 801a3f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a3f8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801a3fc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a400:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a404:	ee66 6a83 	vmul.f32	s13, s13, s6
 801a408:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801a40c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a40e:	694a      	ldr	r2, [r1, #20]
 801a410:	1b13      	subs	r3, r2, r4
 801a412:	ee07 3a10 	vmov	s14, r3
 801a416:	680b      	ldr	r3, [r1, #0]
 801a418:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a41c:	1b1b      	subs	r3, r3, r4
 801a41e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a422:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801a426:	ee07 3a10 	vmov	s14, r3
 801a42a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a42e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a432:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a436:	edd0 5a08 	vldr	s11, [r0, #32]
 801a43a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801a43e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801a442:	ee25 5a06 	vmul.f32	s10, s10, s12
 801a446:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801a44a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a44c:	698b      	ldr	r3, [r1, #24]
 801a44e:	1a9b      	subs	r3, r3, r2
 801a450:	ee07 3a10 	vmov	s14, r3
 801a454:	684b      	ldr	r3, [r1, #4]
 801a456:	1a9b      	subs	r3, r3, r2
 801a458:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a45c:	ee01 3a90 	vmov	s3, r3
 801a460:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a464:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a468:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801a46c:	ee61 1a84 	vmul.f32	s3, s3, s8
 801a470:	eea1 7a21 	vfma.f32	s14, s2, s3
 801a474:	ee27 7a03 	vmul.f32	s14, s14, s6
 801a478:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a47c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a47e:	694a      	ldr	r2, [r1, #20]
 801a480:	1b13      	subs	r3, r2, r4
 801a482:	ee03 3a10 	vmov	s6, r3
 801a486:	680b      	ldr	r3, [r1, #0]
 801a488:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a48c:	1b1b      	subs	r3, r3, r4
 801a48e:	ee23 3a04 	vmul.f32	s6, s6, s8
 801a492:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801a496:	ee03 3a10 	vmov	s6, r3
 801a49a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a49e:	ee23 4a04 	vmul.f32	s8, s6, s8
 801a4a2:	eee1 5a04 	vfma.f32	s11, s2, s8
 801a4a6:	ee25 6a86 	vmul.f32	s12, s11, s12
 801a4aa:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801a4ae:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801a4b2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801a4b6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801a4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4be:	dd13      	ble.n	801a4e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801a4c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a4c4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801a4c8:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a4ca:	eee3 7a87 	vfma.f32	s15, s7, s14
 801a4ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4d6:	dd15      	ble.n	801a504 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801a4d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a4dc:	6403      	str	r3, [r0, #64]	; 0x40
 801a4de:	bd70      	pop	{r4, r5, r6, pc}
 801a4e0:	4623      	mov	r3, r4
 801a4e2:	e6fd      	b.n	801a2e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a4e4:	462a      	mov	r2, r5
 801a4e6:	e706      	b.n	801a2f6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a4e8:	d502      	bpl.n	801a4f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801a4ea:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a4ee:	e7e9      	b.n	801a4c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801a4f0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801a4f4:	eea3 2a85 	vfma.f32	s4, s7, s10
 801a4f8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801a4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a500:	dade      	bge.n	801a4c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801a502:	e7f2      	b.n	801a4ea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801a504:	d502      	bpl.n	801a50c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801a506:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a50a:	e7e7      	b.n	801a4dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801a50c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801a510:	eee3 4a86 	vfma.f32	s9, s7, s12
 801a514:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801a518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a51c:	dadc      	bge.n	801a4d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801a51e:	e7f2      	b.n	801a506 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801a520:	3d800000 	.word	0x3d800000

0801a524 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801a524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a528:	f04f 0814 	mov.w	r8, #20
 801a52c:	4604      	mov	r4, r0
 801a52e:	4617      	mov	r7, r2
 801a530:	460d      	mov	r5, r1
 801a532:	fb08 f903 	mul.w	r9, r8, r3
 801a536:	461e      	mov	r6, r3
 801a538:	eb02 0a09 	add.w	sl, r2, r9
 801a53c:	f8da 0004 	ldr.w	r0, [sl, #4]
 801a540:	f7ff fe88 	bl	801a254 <_ZN8touchgfx8ceil28_4El>
 801a544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a546:	6160      	str	r0, [r4, #20]
 801a548:	fb08 f803 	mul.w	r8, r8, r3
 801a54c:	9001      	str	r0, [sp, #4]
 801a54e:	eb07 0b08 	add.w	fp, r7, r8
 801a552:	f8db 0004 	ldr.w	r0, [fp, #4]
 801a556:	f7ff fe7d 	bl	801a254 <_ZN8touchgfx8ceil28_4El>
 801a55a:	9a01      	ldr	r2, [sp, #4]
 801a55c:	1a80      	subs	r0, r0, r2
 801a55e:	61a0      	str	r0, [r4, #24]
 801a560:	2800      	cmp	r0, #0
 801a562:	f000 8088 	beq.w	801a676 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801a566:	f857 3009 	ldr.w	r3, [r7, r9]
 801a56a:	f857 c008 	ldr.w	ip, [r7, r8]
 801a56e:	f8db 0004 	ldr.w	r0, [fp, #4]
 801a572:	ebac 0c03 	sub.w	ip, ip, r3
 801a576:	f8da 1004 	ldr.w	r1, [sl, #4]
 801a57a:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801a57e:	1a40      	subs	r0, r0, r1
 801a580:	fb0b f202 	mul.w	r2, fp, r2
 801a584:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801a588:	fb0c 2211 	mls	r2, ip, r1, r2
 801a58c:	4641      	mov	r1, r8
 801a58e:	fb00 2003 	mla	r0, r0, r3, r2
 801a592:	f104 0310 	add.w	r3, r4, #16
 801a596:	4622      	mov	r2, r4
 801a598:	3801      	subs	r0, #1
 801a59a:	4440      	add	r0, r8
 801a59c:	f7ff fe6a 	bl	801a274 <_ZN8touchgfx11floorDivModEllRlS0_>
 801a5a0:	f104 0308 	add.w	r3, r4, #8
 801a5a4:	1d22      	adds	r2, r4, #4
 801a5a6:	4641      	mov	r1, r8
 801a5a8:	4658      	mov	r0, fp
 801a5aa:	f7ff fe63 	bl	801a274 <_ZN8touchgfx11floorDivModEllRlS0_>
 801a5ae:	f8c4 800c 	str.w	r8, [r4, #12]
 801a5b2:	6962      	ldr	r2, [r4, #20]
 801a5b4:	f8da 3004 	ldr.w	r3, [sl, #4]
 801a5b8:	eddf 6a31 	vldr	s13, [pc, #196]	; 801a680 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801a5bc:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801a5c0:	6822      	ldr	r2, [r4, #0]
 801a5c2:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801a5c6:	ee07 3a10 	vmov	s14, r3
 801a5ca:	f857 3009 	ldr.w	r3, [r7, r9]
 801a5ce:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801a5d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a5d6:	ee07 3a90 	vmov	s15, r3
 801a5da:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801a5de:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a5e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a5e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a5ea:	edd3 6a00 	vldr	s13, [r3]
 801a5ee:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a5f2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a5f6:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a5fa:	edc4 6a07 	vstr	s13, [r4, #28]
 801a5fe:	edd4 6a01 	vldr	s13, [r4, #4]
 801a602:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801a606:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a60a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801a60e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a612:	ed84 6a08 	vstr	s12, [r4, #32]
 801a616:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801a618:	6262      	str	r2, [r4, #36]	; 0x24
 801a61a:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801a61e:	ed93 6a03 	vldr	s12, [r3, #12]
 801a622:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a626:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801a62a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801a62e:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801a632:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801a636:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801a63a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a63e:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801a642:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801a644:	6322      	str	r2, [r4, #48]	; 0x30
 801a646:	ed93 6a06 	vldr	s12, [r3, #24]
 801a64a:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801a64e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a652:	eeb0 7a46 	vmov.f32	s14, s12
 801a656:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801a65a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a65e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801a662:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801a666:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801a66a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a66e:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801a672:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801a674:	63e3      	str	r3, [r4, #60]	; 0x3c
 801a676:	4620      	mov	r0, r4
 801a678:	b003      	add	sp, #12
 801a67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a67e:	bf00      	nop
 801a680:	3d800000 	.word	0x3d800000

0801a684 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801a684:	4602      	mov	r2, r0
 801a686:	b148      	cbz	r0, 801a69c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801a688:	2300      	movs	r3, #0
 801a68a:	b298      	uxth	r0, r3
 801a68c:	3301      	adds	r3, #1
 801a68e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a692:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801a696:	2900      	cmp	r1, #0
 801a698:	d1f7      	bne.n	801a68a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801a69a:	4770      	bx	lr
 801a69c:	4770      	bx	lr

0801a69e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801a69e:	b530      	push	{r4, r5, lr}
 801a6a0:	4604      	mov	r4, r0
 801a6a2:	b159      	cbz	r1, 801a6bc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801a6a4:	b148      	cbz	r0, 801a6ba <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a6a6:	2300      	movs	r3, #0
 801a6a8:	b298      	uxth	r0, r3
 801a6aa:	4282      	cmp	r2, r0
 801a6ac:	d905      	bls.n	801a6ba <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a6ae:	5ccd      	ldrb	r5, [r1, r3]
 801a6b0:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a6b4:	3301      	adds	r3, #1
 801a6b6:	2d00      	cmp	r5, #0
 801a6b8:	d1f6      	bne.n	801a6a8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801a6ba:	bd30      	pop	{r4, r5, pc}
 801a6bc:	4608      	mov	r0, r1
 801a6be:	e7fc      	b.n	801a6ba <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801a6c0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801a6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a6c2:	468c      	mov	ip, r1
 801a6c4:	b08b      	sub	sp, #44	; 0x2c
 801a6c6:	2100      	movs	r1, #0
 801a6c8:	ae01      	add	r6, sp, #4
 801a6ca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a6ce:	211f      	movs	r1, #31
 801a6d0:	fbb0 f7f3 	udiv	r7, r0, r3
 801a6d4:	fb03 0517 	mls	r5, r3, r7, r0
 801a6d8:	4638      	mov	r0, r7
 801a6da:	b2ec      	uxtb	r4, r5
 801a6dc:	2d09      	cmp	r5, #9
 801a6de:	bfd4      	ite	le
 801a6e0:	3430      	addle	r4, #48	; 0x30
 801a6e2:	3457      	addgt	r4, #87	; 0x57
 801a6e4:	b2e4      	uxtb	r4, r4
 801a6e6:	558c      	strb	r4, [r1, r6]
 801a6e8:	1e4c      	subs	r4, r1, #1
 801a6ea:	b92f      	cbnz	r7, 801a6f8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801a6ec:	4431      	add	r1, r6
 801a6ee:	4660      	mov	r0, ip
 801a6f0:	f7ff ffd5 	bl	801a69e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a6f4:	b00b      	add	sp, #44	; 0x2c
 801a6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6f8:	4621      	mov	r1, r4
 801a6fa:	e7e9      	b.n	801a6d0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801a6fc <_ZN8touchgfx7Unicode4itoaElPtti>:
 801a6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a6fe:	4607      	mov	r7, r0
 801a700:	b08b      	sub	sp, #44	; 0x2c
 801a702:	4608      	mov	r0, r1
 801a704:	b341      	cbz	r1, 801a758 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a706:	1e99      	subs	r1, r3, #2
 801a708:	2922      	cmp	r1, #34	; 0x22
 801a70a:	d825      	bhi.n	801a758 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a70c:	2100      	movs	r1, #0
 801a70e:	463c      	mov	r4, r7
 801a710:	261f      	movs	r6, #31
 801a712:	f10d 0c04 	add.w	ip, sp, #4
 801a716:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a71a:	1e71      	subs	r1, r6, #1
 801a71c:	fb94 fef3 	sdiv	lr, r4, r3
 801a720:	fb03 441e 	mls	r4, r3, lr, r4
 801a724:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801a728:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801a72c:	b2ec      	uxtb	r4, r5
 801a72e:	2d09      	cmp	r5, #9
 801a730:	bfd4      	ite	le
 801a732:	3430      	addle	r4, #48	; 0x30
 801a734:	3457      	addgt	r4, #87	; 0x57
 801a736:	b2e4      	uxtb	r4, r4
 801a738:	f80c 4006 	strb.w	r4, [ip, r6]
 801a73c:	4674      	mov	r4, lr
 801a73e:	b96c      	cbnz	r4, 801a75c <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801a740:	2f00      	cmp	r7, #0
 801a742:	da05      	bge.n	801a750 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801a744:	ab0a      	add	r3, sp, #40	; 0x28
 801a746:	4419      	add	r1, r3
 801a748:	232d      	movs	r3, #45	; 0x2d
 801a74a:	f801 3c24 	strb.w	r3, [r1, #-36]
 801a74e:	1eb1      	subs	r1, r6, #2
 801a750:	3101      	adds	r1, #1
 801a752:	4461      	add	r1, ip
 801a754:	f7ff ffa3 	bl	801a69e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a758:	b00b      	add	sp, #44	; 0x2c
 801a75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a75c:	460e      	mov	r6, r1
 801a75e:	e7dc      	b.n	801a71a <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801a760 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801a760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a764:	b085      	sub	sp, #20
 801a766:	4691      	mov	r9, r2
 801a768:	6802      	ldr	r2, [r0, #0]
 801a76a:	4688      	mov	r8, r1
 801a76c:	461c      	mov	r4, r3
 801a76e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801a772:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801a776:	4683      	mov	fp, r0
 801a778:	4610      	mov	r0, r2
 801a77a:	9103      	str	r1, [sp, #12]
 801a77c:	9302      	str	r3, [sp, #8]
 801a77e:	9201      	str	r2, [sp, #4]
 801a780:	f7ff ff80 	bl	801a684 <_ZN8touchgfx7Unicode6strlenEPKt>
 801a784:	f1b8 0f00 	cmp.w	r8, #0
 801a788:	bf0c      	ite	eq
 801a78a:	4684      	moveq	ip, r0
 801a78c:	f100 0c01 	addne.w	ip, r0, #1
 801a790:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801a794:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801a798:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a79a:	fa1f fc8c 	uxth.w	ip, ip
 801a79e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a7a0:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801a7a4:	9903      	ldr	r1, [sp, #12]
 801a7a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a7aa:	d041      	beq.n	801a830 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a7ac:	d834      	bhi.n	801a818 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801a7ae:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801a7b2:	d059      	beq.n	801a868 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801a7b4:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801a7b8:	d03a      	beq.n	801a830 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a7ba:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801a7be:	d034      	beq.n	801a82a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a7c0:	2400      	movs	r4, #0
 801a7c2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801a7c6:	3a01      	subs	r2, #1
 801a7c8:	b169      	cbz	r1, 801a7e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a7ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a7cc:	458c      	cmp	ip, r1
 801a7ce:	da09      	bge.n	801a7e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a7d0:	eba1 010c 	sub.w	r1, r1, ip
 801a7d4:	b289      	uxth	r1, r1
 801a7d6:	b933      	cbnz	r3, 801a7e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a7d8:	2e00      	cmp	r6, #0
 801a7da:	d051      	beq.n	801a880 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a7dc:	2800      	cmp	r0, #0
 801a7de:	d04f      	beq.n	801a880 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a7e0:	440c      	add	r4, r1
 801a7e2:	b2a4      	uxth	r4, r4
 801a7e4:	2100      	movs	r1, #0
 801a7e6:	682b      	ldr	r3, [r5, #0]
 801a7e8:	4293      	cmp	r3, r2
 801a7ea:	da07      	bge.n	801a7fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a7ec:	f1b8 0f00 	cmp.w	r8, #0
 801a7f0:	d004      	beq.n	801a7fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a7f2:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801a7f6:	682b      	ldr	r3, [r5, #0]
 801a7f8:	3301      	adds	r3, #1
 801a7fa:	602b      	str	r3, [r5, #0]
 801a7fc:	2730      	movs	r7, #48	; 0x30
 801a7fe:	2c00      	cmp	r4, #0
 801a800:	d04e      	beq.n	801a8a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a802:	682e      	ldr	r6, [r5, #0]
 801a804:	3c01      	subs	r4, #1
 801a806:	42b2      	cmp	r2, r6
 801a808:	b2a4      	uxth	r4, r4
 801a80a:	dd49      	ble.n	801a8a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a80c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a810:	682b      	ldr	r3, [r5, #0]
 801a812:	3301      	adds	r3, #1
 801a814:	602b      	str	r3, [r5, #0]
 801a816:	e7f2      	b.n	801a7fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801a818:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801a81c:	d01d      	beq.n	801a85a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801a81e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801a822:	d002      	beq.n	801a82a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a824:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801a828:	e7c9      	b.n	801a7be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801a82a:	4684      	mov	ip, r0
 801a82c:	f04f 0800 	mov.w	r8, #0
 801a830:	2c00      	cmp	r4, #0
 801a832:	d0c6      	beq.n	801a7c2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a834:	b947      	cbnz	r7, 801a848 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a836:	2801      	cmp	r0, #1
 801a838:	d106      	bne.n	801a848 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a83a:	8814      	ldrh	r4, [r2, #0]
 801a83c:	2c30      	cmp	r4, #48	; 0x30
 801a83e:	bf02      	ittt	eq
 801a840:	3202      	addeq	r2, #2
 801a842:	4638      	moveq	r0, r7
 801a844:	f8cb 2000 	streq.w	r2, [fp]
 801a848:	45bc      	cmp	ip, r7
 801a84a:	da14      	bge.n	801a876 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801a84c:	b2bf      	uxth	r7, r7
 801a84e:	eba7 040c 	sub.w	r4, r7, ip
 801a852:	46bc      	mov	ip, r7
 801a854:	b2a4      	uxth	r4, r4
 801a856:	2600      	movs	r6, #0
 801a858:	e7b3      	b.n	801a7c2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a85a:	4684      	mov	ip, r0
 801a85c:	b16c      	cbz	r4, 801a87a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801a85e:	42b8      	cmp	r0, r7
 801a860:	dd00      	ble.n	801a864 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801a862:	b2b8      	uxth	r0, r7
 801a864:	2400      	movs	r4, #0
 801a866:	e003      	b.n	801a870 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801a868:	f04f 0c01 	mov.w	ip, #1
 801a86c:	2400      	movs	r4, #0
 801a86e:	4660      	mov	r0, ip
 801a870:	4626      	mov	r6, r4
 801a872:	46a0      	mov	r8, r4
 801a874:	e7a5      	b.n	801a7c2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a876:	2400      	movs	r4, #0
 801a878:	e7ed      	b.n	801a856 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801a87a:	4626      	mov	r6, r4
 801a87c:	46a0      	mov	r8, r4
 801a87e:	e7a0      	b.n	801a7c2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a880:	2900      	cmp	r1, #0
 801a882:	d0b0      	beq.n	801a7e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a884:	2720      	movs	r7, #32
 801a886:	682e      	ldr	r6, [r5, #0]
 801a888:	2900      	cmp	r1, #0
 801a88a:	d0ac      	beq.n	801a7e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a88c:	3901      	subs	r1, #1
 801a88e:	4296      	cmp	r6, r2
 801a890:	b289      	uxth	r1, r1
 801a892:	daa7      	bge.n	801a7e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a894:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a898:	682b      	ldr	r3, [r5, #0]
 801a89a:	3301      	adds	r3, #1
 801a89c:	602b      	str	r3, [r5, #0]
 801a89e:	e7f2      	b.n	801a886 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801a8a0:	b188      	cbz	r0, 801a8c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801a8a2:	682b      	ldr	r3, [r5, #0]
 801a8a4:	3801      	subs	r0, #1
 801a8a6:	429a      	cmp	r2, r3
 801a8a8:	b280      	uxth	r0, r0
 801a8aa:	dd0c      	ble.n	801a8c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801a8ac:	f8db 3000 	ldr.w	r3, [fp]
 801a8b0:	1c9c      	adds	r4, r3, #2
 801a8b2:	f8cb 4000 	str.w	r4, [fp]
 801a8b6:	881c      	ldrh	r4, [r3, #0]
 801a8b8:	682b      	ldr	r3, [r5, #0]
 801a8ba:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801a8be:	682b      	ldr	r3, [r5, #0]
 801a8c0:	3301      	adds	r3, #1
 801a8c2:	602b      	str	r3, [r5, #0]
 801a8c4:	e7ec      	b.n	801a8a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a8c6:	2620      	movs	r6, #32
 801a8c8:	b151      	cbz	r1, 801a8e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801a8ca:	6828      	ldr	r0, [r5, #0]
 801a8cc:	3901      	subs	r1, #1
 801a8ce:	4282      	cmp	r2, r0
 801a8d0:	b289      	uxth	r1, r1
 801a8d2:	dd05      	ble.n	801a8e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801a8d4:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801a8d8:	682b      	ldr	r3, [r5, #0]
 801a8da:	3301      	adds	r3, #1
 801a8dc:	602b      	str	r3, [r5, #0]
 801a8de:	e7f3      	b.n	801a8c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801a8e0:	b005      	add	sp, #20
 801a8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a8e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801a8e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a8ea:	2400      	movs	r4, #0
 801a8ec:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801a8f0:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801a8f4:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801a8f8:	8014      	strh	r4, [r2, #0]
 801a8fa:	701c      	strb	r4, [r3, #0]
 801a8fc:	f888 4000 	strb.w	r4, [r8]
 801a900:	f88c 4000 	strb.w	r4, [ip]
 801a904:	f88e 4000 	strb.w	r4, [lr]
 801a908:	703c      	strb	r4, [r7, #0]
 801a90a:	6804      	ldr	r4, [r0, #0]
 801a90c:	b1a4      	cbz	r4, 801a938 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801a90e:	8824      	ldrh	r4, [r4, #0]
 801a910:	f04f 0901 	mov.w	r9, #1
 801a914:	b314      	cbz	r4, 801a95c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a916:	2c2b      	cmp	r4, #43	; 0x2b
 801a918:	d001      	beq.n	801a91e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801a91a:	2c20      	cmp	r4, #32
 801a91c:	d110      	bne.n	801a940 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801a91e:	8014      	strh	r4, [r2, #0]
 801a920:	6804      	ldr	r4, [r0, #0]
 801a922:	b10c      	cbz	r4, 801a928 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801a924:	3402      	adds	r4, #2
 801a926:	6004      	str	r4, [r0, #0]
 801a928:	680c      	ldr	r4, [r1, #0]
 801a92a:	b10c      	cbz	r4, 801a930 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801a92c:	3401      	adds	r4, #1
 801a92e:	600c      	str	r4, [r1, #0]
 801a930:	6804      	ldr	r4, [r0, #0]
 801a932:	b17c      	cbz	r4, 801a954 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801a934:	8824      	ldrh	r4, [r4, #0]
 801a936:	e7ed      	b.n	801a914 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801a938:	680c      	ldr	r4, [r1, #0]
 801a93a:	b17c      	cbz	r4, 801a95c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a93c:	7824      	ldrb	r4, [r4, #0]
 801a93e:	e7e7      	b.n	801a910 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801a940:	2c2d      	cmp	r4, #45	; 0x2d
 801a942:	d102      	bne.n	801a94a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801a944:	f883 9000 	strb.w	r9, [r3]
 801a948:	e7ea      	b.n	801a920 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801a94a:	2c23      	cmp	r4, #35	; 0x23
 801a94c:	d107      	bne.n	801a95e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801a94e:	f888 9000 	strb.w	r9, [r8]
 801a952:	e7e5      	b.n	801a920 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801a954:	680c      	ldr	r4, [r1, #0]
 801a956:	b10c      	cbz	r4, 801a95c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a958:	7824      	ldrb	r4, [r4, #0]
 801a95a:	e7db      	b.n	801a914 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801a95c:	2400      	movs	r4, #0
 801a95e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801a962:	2b09      	cmp	r3, #9
 801a964:	d901      	bls.n	801a96a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801a966:	2c2a      	cmp	r4, #42	; 0x2a
 801a968:	d122      	bne.n	801a9b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a96a:	2301      	movs	r3, #1
 801a96c:	2c30      	cmp	r4, #48	; 0x30
 801a96e:	f88e 3000 	strb.w	r3, [lr]
 801a972:	d10d      	bne.n	801a990 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801a974:	f88c 3000 	strb.w	r3, [ip]
 801a978:	6803      	ldr	r3, [r0, #0]
 801a97a:	b10b      	cbz	r3, 801a980 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801a97c:	3302      	adds	r3, #2
 801a97e:	6003      	str	r3, [r0, #0]
 801a980:	680b      	ldr	r3, [r1, #0]
 801a982:	b10b      	cbz	r3, 801a988 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801a984:	3301      	adds	r3, #1
 801a986:	600b      	str	r3, [r1, #0]
 801a988:	6803      	ldr	r3, [r0, #0]
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d02f      	beq.n	801a9ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801a98e:	881c      	ldrh	r4, [r3, #0]
 801a990:	2c2a      	cmp	r4, #42	; 0x2a
 801a992:	d135      	bne.n	801aa00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801a994:	f04f 33ff 	mov.w	r3, #4294967295
 801a998:	6033      	str	r3, [r6, #0]
 801a99a:	6803      	ldr	r3, [r0, #0]
 801a99c:	b10b      	cbz	r3, 801a9a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801a99e:	3302      	adds	r3, #2
 801a9a0:	6003      	str	r3, [r0, #0]
 801a9a2:	680b      	ldr	r3, [r1, #0]
 801a9a4:	b10b      	cbz	r3, 801a9aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801a9a6:	3301      	adds	r3, #1
 801a9a8:	600b      	str	r3, [r1, #0]
 801a9aa:	6803      	ldr	r3, [r0, #0]
 801a9ac:	b31b      	cbz	r3, 801a9f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801a9ae:	881c      	ldrh	r4, [r3, #0]
 801a9b0:	2c2e      	cmp	r4, #46	; 0x2e
 801a9b2:	d11a      	bne.n	801a9ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a9b4:	2301      	movs	r3, #1
 801a9b6:	703b      	strb	r3, [r7, #0]
 801a9b8:	6803      	ldr	r3, [r0, #0]
 801a9ba:	b10b      	cbz	r3, 801a9c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801a9bc:	3302      	adds	r3, #2
 801a9be:	6003      	str	r3, [r0, #0]
 801a9c0:	680b      	ldr	r3, [r1, #0]
 801a9c2:	b10b      	cbz	r3, 801a9c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801a9c4:	3301      	adds	r3, #1
 801a9c6:	600b      	str	r3, [r1, #0]
 801a9c8:	6803      	ldr	r3, [r0, #0]
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d036      	beq.n	801aa3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801a9ce:	881b      	ldrh	r3, [r3, #0]
 801a9d0:	2b2a      	cmp	r3, #42	; 0x2a
 801a9d2:	d137      	bne.n	801aa44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801a9d4:	f04f 33ff 	mov.w	r3, #4294967295
 801a9d8:	602b      	str	r3, [r5, #0]
 801a9da:	6803      	ldr	r3, [r0, #0]
 801a9dc:	b10b      	cbz	r3, 801a9e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801a9de:	3302      	adds	r3, #2
 801a9e0:	6003      	str	r3, [r0, #0]
 801a9e2:	680b      	ldr	r3, [r1, #0]
 801a9e4:	b10b      	cbz	r3, 801a9ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a9e6:	3301      	adds	r3, #1
 801a9e8:	600b      	str	r3, [r1, #0]
 801a9ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9ee:	680c      	ldr	r4, [r1, #0]
 801a9f0:	b134      	cbz	r4, 801aa00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801a9f2:	7824      	ldrb	r4, [r4, #0]
 801a9f4:	e7cc      	b.n	801a990 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801a9f6:	680b      	ldr	r3, [r1, #0]
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d0f6      	beq.n	801a9ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a9fc:	781c      	ldrb	r4, [r3, #0]
 801a9fe:	e7d7      	b.n	801a9b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801aa00:	2300      	movs	r3, #0
 801aa02:	220a      	movs	r2, #10
 801aa04:	6033      	str	r3, [r6, #0]
 801aa06:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801aa0a:	fa1f f38c 	uxth.w	r3, ip
 801aa0e:	2b09      	cmp	r3, #9
 801aa10:	d8ce      	bhi.n	801a9b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801aa12:	6833      	ldr	r3, [r6, #0]
 801aa14:	fb02 c303 	mla	r3, r2, r3, ip
 801aa18:	6033      	str	r3, [r6, #0]
 801aa1a:	6803      	ldr	r3, [r0, #0]
 801aa1c:	b10b      	cbz	r3, 801aa22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801aa1e:	3302      	adds	r3, #2
 801aa20:	6003      	str	r3, [r0, #0]
 801aa22:	680b      	ldr	r3, [r1, #0]
 801aa24:	b10b      	cbz	r3, 801aa2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801aa26:	3301      	adds	r3, #1
 801aa28:	600b      	str	r3, [r1, #0]
 801aa2a:	6803      	ldr	r3, [r0, #0]
 801aa2c:	b10b      	cbz	r3, 801aa32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801aa2e:	881c      	ldrh	r4, [r3, #0]
 801aa30:	e7e9      	b.n	801aa06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801aa32:	680c      	ldr	r4, [r1, #0]
 801aa34:	2c00      	cmp	r4, #0
 801aa36:	d0e6      	beq.n	801aa06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801aa38:	7824      	ldrb	r4, [r4, #0]
 801aa3a:	e7e4      	b.n	801aa06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801aa3c:	680b      	ldr	r3, [r1, #0]
 801aa3e:	b10b      	cbz	r3, 801aa44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801aa40:	781b      	ldrb	r3, [r3, #0]
 801aa42:	e7c5      	b.n	801a9d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801aa44:	2200      	movs	r2, #0
 801aa46:	240a      	movs	r4, #10
 801aa48:	602a      	str	r2, [r5, #0]
 801aa4a:	3b30      	subs	r3, #48	; 0x30
 801aa4c:	682a      	ldr	r2, [r5, #0]
 801aa4e:	b29e      	uxth	r6, r3
 801aa50:	2e09      	cmp	r6, #9
 801aa52:	d813      	bhi.n	801aa7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801aa54:	fb04 3302 	mla	r3, r4, r2, r3
 801aa58:	602b      	str	r3, [r5, #0]
 801aa5a:	6803      	ldr	r3, [r0, #0]
 801aa5c:	b10b      	cbz	r3, 801aa62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801aa5e:	3302      	adds	r3, #2
 801aa60:	6003      	str	r3, [r0, #0]
 801aa62:	680b      	ldr	r3, [r1, #0]
 801aa64:	b10b      	cbz	r3, 801aa6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801aa66:	3301      	adds	r3, #1
 801aa68:	600b      	str	r3, [r1, #0]
 801aa6a:	6803      	ldr	r3, [r0, #0]
 801aa6c:	b10b      	cbz	r3, 801aa72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801aa6e:	881b      	ldrh	r3, [r3, #0]
 801aa70:	e7eb      	b.n	801aa4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801aa72:	680b      	ldr	r3, [r1, #0]
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d0e8      	beq.n	801aa4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801aa78:	781b      	ldrb	r3, [r3, #0]
 801aa7a:	e7e6      	b.n	801aa4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801aa7c:	2a06      	cmp	r2, #6
 801aa7e:	bfa8      	it	ge
 801aa80:	2206      	movge	r2, #6
 801aa82:	602a      	str	r2, [r5, #0]
 801aa84:	e7b1      	b.n	801a9ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801aa86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801aa86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa8a:	b0a3      	sub	sp, #140	; 0x8c
 801aa8c:	2600      	movs	r6, #0
 801aa8e:	4607      	mov	r7, r0
 801aa90:	4688      	mov	r8, r1
 801aa92:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801aa96:	4631      	mov	r1, r6
 801aa98:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801aa9a:	4648      	mov	r0, r9
 801aa9c:	960d      	str	r6, [sp, #52]	; 0x34
 801aa9e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801aaa2:	2242      	movs	r2, #66	; 0x42
 801aaa4:	f00a fa3a 	bl	8024f1c <memset>
 801aaa8:	b15f      	cbz	r7, 801aac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801aaaa:	f108 3aff 	add.w	sl, r8, #4294967295
 801aaae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aab2:	b152      	cbz	r2, 801aaca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801aab4:	8812      	ldrh	r2, [r2, #0]
 801aab6:	b10a      	cbz	r2, 801aabc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801aab8:	459a      	cmp	sl, r3
 801aaba:	dc2e      	bgt.n	801ab1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801aabc:	2200      	movs	r2, #0
 801aabe:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801aac2:	4638      	mov	r0, r7
 801aac4:	b023      	add	sp, #140	; 0x8c
 801aac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaca:	9a08      	ldr	r2, [sp, #32]
 801aacc:	2a00      	cmp	r2, #0
 801aace:	d0f5      	beq.n	801aabc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801aad0:	7812      	ldrb	r2, [r2, #0]
 801aad2:	e7f0      	b.n	801aab6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801aad4:	2d00      	cmp	r5, #0
 801aad6:	d0ea      	beq.n	801aaae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801aad8:	782a      	ldrb	r2, [r5, #0]
 801aada:	b142      	cbz	r2, 801aaee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801aadc:	2a25      	cmp	r2, #37	; 0x25
 801aade:	d001      	beq.n	801aae4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801aae0:	459a      	cmp	sl, r3
 801aae2:	dc08      	bgt.n	801aaf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801aae4:	f1bb 0f00 	cmp.w	fp, #0
 801aae8:	d121      	bne.n	801ab2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801aaea:	2d00      	cmp	r5, #0
 801aaec:	d0df      	beq.n	801aaae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801aaee:	782a      	ldrb	r2, [r5, #0]
 801aaf0:	f04f 0b00 	mov.w	fp, #0
 801aaf4:	e01d      	b.n	801ab32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801aaf6:	f1bb 0f00 	cmp.w	fp, #0
 801aafa:	d077      	beq.n	801abec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801aafc:	f8bb 2000 	ldrh.w	r2, [fp]
 801ab00:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801ab04:	f1bb 0f00 	cmp.w	fp, #0
 801ab08:	d002      	beq.n	801ab10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801ab0a:	f10b 0202 	add.w	r2, fp, #2
 801ab0e:	9209      	str	r2, [sp, #36]	; 0x24
 801ab10:	b10d      	cbz	r5, 801ab16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801ab12:	3501      	adds	r5, #1
 801ab14:	9508      	str	r5, [sp, #32]
 801ab16:	3301      	adds	r3, #1
 801ab18:	930d      	str	r3, [sp, #52]	; 0x34
 801ab1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab1c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801ab20:	f1bb 0f00 	cmp.w	fp, #0
 801ab24:	d0d6      	beq.n	801aad4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801ab26:	f8bb 2000 	ldrh.w	r2, [fp]
 801ab2a:	2a00      	cmp	r2, #0
 801ab2c:	d1d6      	bne.n	801aadc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801ab2e:	f8bb 2000 	ldrh.w	r2, [fp]
 801ab32:	2a00      	cmp	r2, #0
 801ab34:	d0bb      	beq.n	801aaae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ab36:	459a      	cmp	sl, r3
 801ab38:	ddb9      	ble.n	801aaae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ab3a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801ab3e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801ab42:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801ab46:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801ab4a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801ab4e:	960e      	str	r6, [sp, #56]	; 0x38
 801ab50:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801ab54:	960f      	str	r6, [sp, #60]	; 0x3c
 801ab56:	f1bb 0f00 	cmp.w	fp, #0
 801ab5a:	d002      	beq.n	801ab62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801ab5c:	f10b 0302 	add.w	r3, fp, #2
 801ab60:	9309      	str	r3, [sp, #36]	; 0x24
 801ab62:	b10d      	cbz	r5, 801ab68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801ab64:	1c6b      	adds	r3, r5, #1
 801ab66:	9308      	str	r3, [sp, #32]
 801ab68:	ab0f      	add	r3, sp, #60	; 0x3c
 801ab6a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801ab6e:	a908      	add	r1, sp, #32
 801ab70:	a809      	add	r0, sp, #36	; 0x24
 801ab72:	9305      	str	r3, [sp, #20]
 801ab74:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801ab78:	9304      	str	r3, [sp, #16]
 801ab7a:	ab0e      	add	r3, sp, #56	; 0x38
 801ab7c:	9303      	str	r3, [sp, #12]
 801ab7e:	ab0c      	add	r3, sp, #48	; 0x30
 801ab80:	9302      	str	r3, [sp, #8]
 801ab82:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801ab86:	9301      	str	r3, [sp, #4]
 801ab88:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801ab8c:	9300      	str	r3, [sp, #0]
 801ab8e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801ab92:	f7ff fea8 	bl	801a8e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801ab96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	bfbf      	itttt	lt
 801ab9c:	6823      	ldrlt	r3, [r4, #0]
 801ab9e:	3404      	addlt	r4, #4
 801aba0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801aba4:	930e      	strlt	r3, [sp, #56]	; 0x38
 801aba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	bfbe      	ittt	lt
 801abac:	6823      	ldrlt	r3, [r4, #0]
 801abae:	3404      	addlt	r4, #4
 801abb0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801abb4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801abb8:	bfb8      	it	lt
 801abba:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801abbc:	b1d9      	cbz	r1, 801abf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801abbe:	880b      	ldrh	r3, [r1, #0]
 801abc0:	2b69      	cmp	r3, #105	; 0x69
 801abc2:	d01f      	beq.n	801ac04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801abc4:	d82f      	bhi.n	801ac26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801abc6:	2b58      	cmp	r3, #88	; 0x58
 801abc8:	d01c      	beq.n	801ac04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801abca:	d818      	bhi.n	801abfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801abcc:	2b25      	cmp	r3, #37	; 0x25
 801abce:	d034      	beq.n	801ac3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801abd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801abd2:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801abd6:	f1bb 0f00 	cmp.w	fp, #0
 801abda:	f000 80b7 	beq.w	801ad4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801abde:	f8bb 5000 	ldrh.w	r5, [fp]
 801abe2:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801abe6:	3301      	adds	r3, #1
 801abe8:	930d      	str	r3, [sp, #52]	; 0x34
 801abea:	e029      	b.n	801ac40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801abec:	b10d      	cbz	r5, 801abf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801abee:	782a      	ldrb	r2, [r5, #0]
 801abf0:	e786      	b.n	801ab00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801abf2:	462a      	mov	r2, r5
 801abf4:	e784      	b.n	801ab00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801abf6:	2a00      	cmp	r2, #0
 801abf8:	d0ea      	beq.n	801abd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801abfa:	7813      	ldrb	r3, [r2, #0]
 801abfc:	e7e0      	b.n	801abc0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801abfe:	3b63      	subs	r3, #99	; 0x63
 801ac00:	2b01      	cmp	r3, #1
 801ac02:	d8e5      	bhi.n	801abd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ac04:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801ac08:	b329      	cbz	r1, 801ac56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801ac0a:	880b      	ldrh	r3, [r1, #0]
 801ac0c:	2b69      	cmp	r3, #105	; 0x69
 801ac0e:	d063      	beq.n	801acd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801ac10:	d825      	bhi.n	801ac5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801ac12:	2b63      	cmp	r3, #99	; 0x63
 801ac14:	d038      	beq.n	801ac88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801ac16:	2b64      	cmp	r3, #100	; 0x64
 801ac18:	d05e      	beq.n	801acd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801ac1a:	2b58      	cmp	r3, #88	; 0x58
 801ac1c:	d07a      	beq.n	801ad14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801ac1e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801ac22:	4625      	mov	r5, r4
 801ac24:	e036      	b.n	801ac94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ac26:	2b73      	cmp	r3, #115	; 0x73
 801ac28:	d0ec      	beq.n	801ac04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ac2a:	d802      	bhi.n	801ac32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801ac2c:	2b6f      	cmp	r3, #111	; 0x6f
 801ac2e:	d1cf      	bne.n	801abd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ac30:	e7e8      	b.n	801ac04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ac32:	2b75      	cmp	r3, #117	; 0x75
 801ac34:	d0e6      	beq.n	801ac04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ac36:	2b78      	cmp	r3, #120	; 0x78
 801ac38:	e7f9      	b.n	801ac2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801ac3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac3c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801ac40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac42:	b10b      	cbz	r3, 801ac48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801ac44:	3302      	adds	r3, #2
 801ac46:	9309      	str	r3, [sp, #36]	; 0x24
 801ac48:	9b08      	ldr	r3, [sp, #32]
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	f43f af2f 	beq.w	801aaae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ac50:	3301      	adds	r3, #1
 801ac52:	9308      	str	r3, [sp, #32]
 801ac54:	e72b      	b.n	801aaae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ac56:	2a00      	cmp	r2, #0
 801ac58:	d0e1      	beq.n	801ac1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ac5a:	7813      	ldrb	r3, [r2, #0]
 801ac5c:	e7d6      	b.n	801ac0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801ac5e:	2b73      	cmp	r3, #115	; 0x73
 801ac60:	d036      	beq.n	801acd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801ac62:	d807      	bhi.n	801ac74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801ac64:	2b6f      	cmp	r3, #111	; 0x6f
 801ac66:	d1da      	bne.n	801ac1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ac68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac6a:	1d25      	adds	r5, r4, #4
 801ac6c:	2308      	movs	r3, #8
 801ac6e:	eba8 0202 	sub.w	r2, r8, r2
 801ac72:	e049      	b.n	801ad08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801ac74:	2b75      	cmp	r3, #117	; 0x75
 801ac76:	d042      	beq.n	801acfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801ac78:	2b78      	cmp	r3, #120	; 0x78
 801ac7a:	d1d0      	bne.n	801ac1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ac7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac7e:	1d25      	adds	r5, r4, #4
 801ac80:	2310      	movs	r3, #16
 801ac82:	eba8 0202 	sub.w	r2, r8, r2
 801ac86:	e03f      	b.n	801ad08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801ac88:	7823      	ldrb	r3, [r4, #0]
 801ac8a:	1d25      	adds	r5, r4, #4
 801ac8c:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801ac90:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801ac94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac96:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d051      	beq.n	801ad42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801ac9e:	881a      	ldrh	r2, [r3, #0]
 801aca0:	a80d      	add	r0, sp, #52	; 0x34
 801aca2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801aca6:	462c      	mov	r4, r5
 801aca8:	9005      	str	r0, [sp, #20]
 801acaa:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801acae:	9004      	str	r0, [sp, #16]
 801acb0:	980e      	ldr	r0, [sp, #56]	; 0x38
 801acb2:	9003      	str	r0, [sp, #12]
 801acb4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801acb8:	9002      	str	r0, [sp, #8]
 801acba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801acbc:	9001      	str	r0, [sp, #4]
 801acbe:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801acc2:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801acc6:	9000      	str	r0, [sp, #0]
 801acc8:	a810      	add	r0, sp, #64	; 0x40
 801acca:	f7ff fd49 	bl	801a760 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801acce:	e7b7      	b.n	801ac40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801acd0:	1d25      	adds	r5, r4, #4
 801acd2:	6823      	ldr	r3, [r4, #0]
 801acd4:	9310      	str	r3, [sp, #64]	; 0x40
 801acd6:	e7dd      	b.n	801ac94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801acd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801acda:	230a      	movs	r3, #10
 801acdc:	4649      	mov	r1, r9
 801acde:	6820      	ldr	r0, [r4, #0]
 801ace0:	eba8 0202 	sub.w	r2, r8, r2
 801ace4:	1d25      	adds	r5, r4, #4
 801ace6:	b292      	uxth	r2, r2
 801ace8:	f7ff fd08 	bl	801a6fc <_ZN8touchgfx7Unicode4itoaElPtti>
 801acec:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801acf0:	2b2d      	cmp	r3, #45	; 0x2d
 801acf2:	d1cf      	bne.n	801ac94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801acf4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801acf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801acfa:	3302      	adds	r3, #2
 801acfc:	e7ea      	b.n	801acd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801acfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ad00:	1d25      	adds	r5, r4, #4
 801ad02:	230a      	movs	r3, #10
 801ad04:	eba8 0202 	sub.w	r2, r8, r2
 801ad08:	b292      	uxth	r2, r2
 801ad0a:	4649      	mov	r1, r9
 801ad0c:	6820      	ldr	r0, [r4, #0]
 801ad0e:	f7ff fcd7 	bl	801a6c0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ad12:	e7bf      	b.n	801ac94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ad14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ad16:	2310      	movs	r3, #16
 801ad18:	4649      	mov	r1, r9
 801ad1a:	6820      	ldr	r0, [r4, #0]
 801ad1c:	eba8 0202 	sub.w	r2, r8, r2
 801ad20:	1d25      	adds	r5, r4, #4
 801ad22:	b292      	uxth	r2, r2
 801ad24:	f7ff fccc 	bl	801a6c0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ad28:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801ad2c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d0af      	beq.n	801ac94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ad34:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801ad38:	2919      	cmp	r1, #25
 801ad3a:	d8f7      	bhi.n	801ad2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ad3c:	3b20      	subs	r3, #32
 801ad3e:	8013      	strh	r3, [r2, #0]
 801ad40:	e7f4      	b.n	801ad2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ad42:	9a08      	ldr	r2, [sp, #32]
 801ad44:	2a00      	cmp	r2, #0
 801ad46:	d0ab      	beq.n	801aca0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ad48:	7812      	ldrb	r2, [r2, #0]
 801ad4a:	e7a9      	b.n	801aca0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ad4c:	2d00      	cmp	r5, #0
 801ad4e:	f43f af48 	beq.w	801abe2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801ad52:	782d      	ldrb	r5, [r5, #0]
 801ad54:	e745      	b.n	801abe2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801ad56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801ad56:	b507      	push	{r0, r1, r2, lr}
 801ad58:	9300      	str	r3, [sp, #0]
 801ad5a:	4613      	mov	r3, r2
 801ad5c:	2200      	movs	r2, #0
 801ad5e:	f7ff fe92 	bl	801aa86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801ad62:	b003      	add	sp, #12
 801ad64:	f85d fb04 	ldr.w	pc, [sp], #4

0801ad68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801ad68:	b40c      	push	{r2, r3}
 801ad6a:	b507      	push	{r0, r1, r2, lr}
 801ad6c:	ab04      	add	r3, sp, #16
 801ad6e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ad72:	9301      	str	r3, [sp, #4]
 801ad74:	f7ff ffef 	bl	801ad56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801ad78:	b003      	add	sp, #12
 801ad7a:	f85d eb04 	ldr.w	lr, [sp], #4
 801ad7e:	b002      	add	sp, #8
 801ad80:	4770      	bx	lr
	...

0801ad84 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801ad84:	4b01      	ldr	r3, [pc, #4]	; (801ad8c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801ad86:	6018      	str	r0, [r3, #0]
 801ad88:	4770      	bx	lr
 801ad8a:	bf00      	nop
 801ad8c:	20056760 	.word	0x20056760

0801ad90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801ad90:	4b06      	ldr	r3, [pc, #24]	; (801adac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801ad92:	881a      	ldrh	r2, [r3, #0]
 801ad94:	4282      	cmp	r2, r0
 801ad96:	d807      	bhi.n	801ada8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801ad98:	4b05      	ldr	r3, [pc, #20]	; (801adb0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801ad9a:	881b      	ldrh	r3, [r3, #0]
 801ad9c:	4413      	add	r3, r2
 801ad9e:	4298      	cmp	r0, r3
 801ada0:	bfac      	ite	ge
 801ada2:	2000      	movge	r0, #0
 801ada4:	2001      	movlt	r0, #1
 801ada6:	4770      	bx	lr
 801ada8:	2000      	movs	r0, #0
 801adaa:	4770      	bx	lr
 801adac:	20056780 	.word	0x20056780
 801adb0:	20056784 	.word	0x20056784

0801adb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801adb4:	b508      	push	{r3, lr}
 801adb6:	4601      	mov	r1, r0
 801adb8:	f7ff ffea 	bl	801ad90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801adbc:	b118      	cbz	r0, 801adc6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801adbe:	4b02      	ldr	r3, [pc, #8]	; (801adc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801adc0:	681b      	ldr	r3, [r3, #0]
 801adc2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801adc6:	bd08      	pop	{r3, pc}
 801adc8:	20056764 	.word	0x20056764

0801adcc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801adcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801add0:	4d28      	ldr	r5, [pc, #160]	; (801ae74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801add2:	682b      	ldr	r3, [r5, #0]
 801add4:	2b00      	cmp	r3, #0
 801add6:	d04a      	beq.n	801ae6e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801add8:	4a27      	ldr	r2, [pc, #156]	; (801ae78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801adda:	4e28      	ldr	r6, [pc, #160]	; (801ae7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801addc:	8810      	ldrh	r0, [r2, #0]
 801adde:	f8b6 8000 	ldrh.w	r8, [r6]
 801ade2:	4c27      	ldr	r4, [pc, #156]	; (801ae80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ade4:	4440      	add	r0, r8
 801ade6:	4f27      	ldr	r7, [pc, #156]	; (801ae84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ade8:	1c41      	adds	r1, r0, #1
 801adea:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801adee:	f021 0101 	bic.w	r1, r1, #1
 801adf2:	eb03 020e 	add.w	r2, r3, lr
 801adf6:	0409      	lsls	r1, r1, #16
 801adf8:	6022      	str	r2, [r4, #0]
 801adfa:	0c09      	lsrs	r1, r1, #16
 801adfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801ae00:	eb0e 010c 	add.w	r1, lr, ip
 801ae04:	185a      	adds	r2, r3, r1
 801ae06:	603a      	str	r2, [r7, #0]
 801ae08:	220e      	movs	r2, #14
 801ae0a:	fb02 f208 	mul.w	r2, r2, r8
 801ae0e:	3203      	adds	r2, #3
 801ae10:	f022 0203 	bic.w	r2, r2, #3
 801ae14:	4411      	add	r1, r2
 801ae16:	440b      	add	r3, r1
 801ae18:	491b      	ldr	r1, [pc, #108]	; (801ae88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801ae1a:	600b      	str	r3, [r1, #0]
 801ae1c:	2300      	movs	r3, #0
 801ae1e:	491b      	ldr	r1, [pc, #108]	; (801ae8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801ae20:	800b      	strh	r3, [r1, #0]
 801ae22:	491b      	ldr	r1, [pc, #108]	; (801ae90 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801ae24:	6809      	ldr	r1, [r1, #0]
 801ae26:	eba1 010e 	sub.w	r1, r1, lr
 801ae2a:	eba1 010c 	sub.w	r1, r1, ip
 801ae2e:	469c      	mov	ip, r3
 801ae30:	1a8a      	subs	r2, r1, r2
 801ae32:	4918      	ldr	r1, [pc, #96]	; (801ae94 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801ae34:	600a      	str	r2, [r1, #0]
 801ae36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ae3a:	4a17      	ldr	r2, [pc, #92]	; (801ae98 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801ae3c:	8013      	strh	r3, [r2, #0]
 801ae3e:	4283      	cmp	r3, r0
 801ae40:	d10d      	bne.n	801ae5e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801ae42:	8835      	ldrh	r5, [r6, #0]
 801ae44:	2300      	movs	r3, #0
 801ae46:	6838      	ldr	r0, [r7, #0]
 801ae48:	240e      	movs	r4, #14
 801ae4a:	429d      	cmp	r5, r3
 801ae4c:	d90f      	bls.n	801ae6e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801ae4e:	fb04 0203 	mla	r2, r4, r3, r0
 801ae52:	3301      	adds	r3, #1
 801ae54:	7b11      	ldrb	r1, [r2, #12]
 801ae56:	f36f 1145 	bfc	r1, #5, #1
 801ae5a:	7311      	strb	r1, [r2, #12]
 801ae5c:	e7f5      	b.n	801ae4a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801ae5e:	682a      	ldr	r2, [r5, #0]
 801ae60:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801ae64:	6822      	ldr	r2, [r4, #0]
 801ae66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801ae6a:	3301      	adds	r3, #1
 801ae6c:	e7e7      	b.n	801ae3e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801ae6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae72:	bf00      	nop
 801ae74:	20056764 	.word	0x20056764
 801ae78:	20056780 	.word	0x20056780
 801ae7c:	20056784 	.word	0x20056784
 801ae80:	20056778 	.word	0x20056778
 801ae84:	20056768 	.word	0x20056768
 801ae88:	20056770 	.word	0x20056770
 801ae8c:	20056782 	.word	0x20056782
 801ae90:	2005676c 	.word	0x2005676c
 801ae94:	2005677c 	.word	0x2005677c
 801ae98:	20056774 	.word	0x20056774

0801ae9c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801ae9c:	4b10      	ldr	r3, [pc, #64]	; (801aee0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801ae9e:	b510      	push	{r4, lr}
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	b9db      	cbnz	r3, 801aedc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801aea4:	b1d1      	cbz	r1, 801aedc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801aea6:	4b0f      	ldr	r3, [pc, #60]	; (801aee4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801aea8:	240e      	movs	r4, #14
 801aeaa:	801a      	strh	r2, [r3, #0]
 801aeac:	b292      	uxth	r2, r2
 801aeae:	4b0e      	ldr	r3, [pc, #56]	; (801aee8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801aeb0:	881b      	ldrh	r3, [r3, #0]
 801aeb2:	4413      	add	r3, r2
 801aeb4:	4362      	muls	r2, r4
 801aeb6:	2406      	movs	r4, #6
 801aeb8:	fb04 2203 	mla	r2, r4, r3, r2
 801aebc:	428a      	cmp	r2, r1
 801aebe:	d305      	bcc.n	801aecc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801aec0:	4b0a      	ldr	r3, [pc, #40]	; (801aeec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801aec2:	2135      	movs	r1, #53	; 0x35
 801aec4:	4a0a      	ldr	r2, [pc, #40]	; (801aef0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801aec6:	480b      	ldr	r0, [pc, #44]	; (801aef4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801aec8:	f009 ff9c 	bl	8024e04 <__assert_func>
 801aecc:	4b0a      	ldr	r3, [pc, #40]	; (801aef8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801aece:	6019      	str	r1, [r3, #0]
 801aed0:	4b0a      	ldr	r3, [pc, #40]	; (801aefc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801aed2:	6018      	str	r0, [r3, #0]
 801aed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aed8:	f7ff bf78 	b.w	801adcc <_ZN8touchgfx6Bitmap10clearCacheEv>
 801aedc:	bd10      	pop	{r4, pc}
 801aede:	bf00      	nop
 801aee0:	20056770 	.word	0x20056770
 801aee4:	20056784 	.word	0x20056784
 801aee8:	20056780 	.word	0x20056780
 801aeec:	0802c979 	.word	0x0802c979
 801aef0:	0802ca0e 	.word	0x0802ca0e
 801aef4:	0802c954 	.word	0x0802c954
 801aef8:	2005676c 	.word	0x2005676c
 801aefc:	20056764 	.word	0x20056764

0801af00 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801af00:	b470      	push	{r4, r5, r6}
 801af02:	4c07      	ldr	r4, [pc, #28]	; (801af20 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801af04:	4605      	mov	r5, r0
 801af06:	4610      	mov	r0, r2
 801af08:	9a03      	ldr	r2, [sp, #12]
 801af0a:	6826      	ldr	r6, [r4, #0]
 801af0c:	b936      	cbnz	r6, 801af1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801af0e:	6025      	str	r5, [r4, #0]
 801af10:	4c04      	ldr	r4, [pc, #16]	; (801af24 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801af12:	8021      	strh	r1, [r4, #0]
 801af14:	4619      	mov	r1, r3
 801af16:	bc70      	pop	{r4, r5, r6}
 801af18:	f7ff bfc0 	b.w	801ae9c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801af1c:	bc70      	pop	{r4, r5, r6}
 801af1e:	4770      	bx	lr
 801af20:	20056788 	.word	0x20056788
 801af24:	20056780 	.word	0x20056780

0801af28 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801af28:	b508      	push	{r3, lr}
 801af2a:	4b14      	ldr	r3, [pc, #80]	; (801af7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801af2c:	6819      	ldr	r1, [r3, #0]
 801af2e:	b931      	cbnz	r1, 801af3e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801af30:	4b13      	ldr	r3, [pc, #76]	; (801af80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801af32:	f240 4186 	movw	r1, #1158	; 0x486
 801af36:	4a13      	ldr	r2, [pc, #76]	; (801af84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801af38:	4813      	ldr	r0, [pc, #76]	; (801af88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801af3a:	f009 ff63 	bl	8024e04 <__assert_func>
 801af3e:	4a13      	ldr	r2, [pc, #76]	; (801af8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801af40:	8803      	ldrh	r3, [r0, #0]
 801af42:	8812      	ldrh	r2, [r2, #0]
 801af44:	4293      	cmp	r3, r2
 801af46:	d204      	bcs.n	801af52 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801af48:	2214      	movs	r2, #20
 801af4a:	fb02 1303 	mla	r3, r2, r3, r1
 801af4e:	8918      	ldrh	r0, [r3, #8]
 801af50:	bd08      	pop	{r3, pc}
 801af52:	490f      	ldr	r1, [pc, #60]	; (801af90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801af54:	8809      	ldrh	r1, [r1, #0]
 801af56:	4411      	add	r1, r2
 801af58:	428b      	cmp	r3, r1
 801af5a:	da06      	bge.n	801af6a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801af5c:	1a9b      	subs	r3, r3, r2
 801af5e:	4a0d      	ldr	r2, [pc, #52]	; (801af94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801af60:	210e      	movs	r1, #14
 801af62:	6812      	ldr	r2, [r2, #0]
 801af64:	fb01 2303 	mla	r3, r1, r3, r2
 801af68:	e7f1      	b.n	801af4e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801af6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801af6e:	4293      	cmp	r3, r2
 801af70:	bf0a      	itet	eq
 801af72:	4b09      	ldreq	r3, [pc, #36]	; (801af98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801af74:	2000      	movne	r0, #0
 801af76:	8818      	ldrheq	r0, [r3, #0]
 801af78:	e7ea      	b.n	801af50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801af7a:	bf00      	nop
 801af7c:	20056788 	.word	0x20056788
 801af80:	0802c9d2 	.word	0x0802c9d2
 801af84:	0802ca85 	.word	0x0802ca85
 801af88:	0802c954 	.word	0x0802c954
 801af8c:	20056780 	.word	0x20056780
 801af90:	20056784 	.word	0x20056784
 801af94:	20056768 	.word	0x20056768
 801af98:	200566d4 	.word	0x200566d4

0801af9c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801af9c:	b508      	push	{r3, lr}
 801af9e:	4b14      	ldr	r3, [pc, #80]	; (801aff0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801afa0:	6819      	ldr	r1, [r3, #0]
 801afa2:	b931      	cbnz	r1, 801afb2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801afa4:	4b13      	ldr	r3, [pc, #76]	; (801aff4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801afa6:	f240 419a 	movw	r1, #1178	; 0x49a
 801afaa:	4a13      	ldr	r2, [pc, #76]	; (801aff8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801afac:	4813      	ldr	r0, [pc, #76]	; (801affc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801afae:	f009 ff29 	bl	8024e04 <__assert_func>
 801afb2:	4a13      	ldr	r2, [pc, #76]	; (801b000 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801afb4:	8803      	ldrh	r3, [r0, #0]
 801afb6:	8812      	ldrh	r2, [r2, #0]
 801afb8:	4293      	cmp	r3, r2
 801afba:	d204      	bcs.n	801afc6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801afbc:	2214      	movs	r2, #20
 801afbe:	fb02 1303 	mla	r3, r2, r3, r1
 801afc2:	8958      	ldrh	r0, [r3, #10]
 801afc4:	bd08      	pop	{r3, pc}
 801afc6:	490f      	ldr	r1, [pc, #60]	; (801b004 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801afc8:	8809      	ldrh	r1, [r1, #0]
 801afca:	4411      	add	r1, r2
 801afcc:	428b      	cmp	r3, r1
 801afce:	da06      	bge.n	801afde <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801afd0:	1a9b      	subs	r3, r3, r2
 801afd2:	4a0d      	ldr	r2, [pc, #52]	; (801b008 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801afd4:	210e      	movs	r1, #14
 801afd6:	6812      	ldr	r2, [r2, #0]
 801afd8:	fb01 2303 	mla	r3, r1, r3, r2
 801afdc:	e7f1      	b.n	801afc2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801afde:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801afe2:	4293      	cmp	r3, r2
 801afe4:	bf0a      	itet	eq
 801afe6:	4b09      	ldreq	r3, [pc, #36]	; (801b00c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801afe8:	2000      	movne	r0, #0
 801afea:	8818      	ldrheq	r0, [r3, #0]
 801afec:	e7ea      	b.n	801afc4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801afee:	bf00      	nop
 801aff0:	20056788 	.word	0x20056788
 801aff4:	0802c9d2 	.word	0x0802c9d2
 801aff8:	0802cab1 	.word	0x0802cab1
 801affc:	0802c954 	.word	0x0802c954
 801b000:	20056780 	.word	0x20056780
 801b004:	20056784 	.word	0x20056784
 801b008:	20056768 	.word	0x20056768
 801b00c:	200566d6 	.word	0x200566d6

0801b010 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b010:	b508      	push	{r3, lr}
 801b012:	4b12      	ldr	r3, [pc, #72]	; (801b05c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b014:	6819      	ldr	r1, [r3, #0]
 801b016:	b931      	cbnz	r1, 801b026 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b018:	4b11      	ldr	r3, [pc, #68]	; (801b060 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b01a:	f240 41d2 	movw	r1, #1234	; 0x4d2
 801b01e:	4a11      	ldr	r2, [pc, #68]	; (801b064 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b020:	4811      	ldr	r0, [pc, #68]	; (801b068 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b022:	f009 feef 	bl	8024e04 <__assert_func>
 801b026:	8803      	ldrh	r3, [r0, #0]
 801b028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b02c:	4293      	cmp	r3, r2
 801b02e:	d012      	beq.n	801b056 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b030:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b034:	4293      	cmp	r3, r2
 801b036:	d103      	bne.n	801b040 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801b038:	4b0c      	ldr	r3, [pc, #48]	; (801b06c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b03e:	bd08      	pop	{r3, pc}
 801b040:	4a0b      	ldr	r2, [pc, #44]	; (801b070 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801b042:	6812      	ldr	r2, [r2, #0]
 801b044:	b11a      	cbz	r2, 801b04e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801b046:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b04a:	2800      	cmp	r0, #0
 801b04c:	d1f7      	bne.n	801b03e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b04e:	2214      	movs	r2, #20
 801b050:	4353      	muls	r3, r2
 801b052:	58c8      	ldr	r0, [r1, r3]
 801b054:	e7f3      	b.n	801b03e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b056:	2000      	movs	r0, #0
 801b058:	e7f1      	b.n	801b03e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b05a:	bf00      	nop
 801b05c:	20056788 	.word	0x20056788
 801b060:	0802c9d2 	.word	0x0802c9d2
 801b064:	0802ca54 	.word	0x0802ca54
 801b068:	0802c954 	.word	0x0802c954
 801b06c:	200566e0 	.word	0x200566e0
 801b070:	20056764 	.word	0x20056764

0801b074 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b074:	8802      	ldrh	r2, [r0, #0]
 801b076:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801b07a:	429a      	cmp	r2, r3
 801b07c:	d845      	bhi.n	801b10a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801b07e:	4b24      	ldr	r3, [pc, #144]	; (801b110 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b080:	8818      	ldrh	r0, [r3, #0]
 801b082:	4282      	cmp	r2, r0
 801b084:	d221      	bcs.n	801b0ca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801b086:	4b23      	ldr	r3, [pc, #140]	; (801b114 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b088:	6819      	ldr	r1, [r3, #0]
 801b08a:	2314      	movs	r3, #20
 801b08c:	fb03 1302 	mla	r3, r3, r2, r1
 801b090:	6858      	ldr	r0, [r3, #4]
 801b092:	2800      	cmp	r0, #0
 801b094:	d03a      	beq.n	801b10c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801b096:	4920      	ldr	r1, [pc, #128]	; (801b118 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b098:	6809      	ldr	r1, [r1, #0]
 801b09a:	2900      	cmp	r1, #0
 801b09c:	d036      	beq.n	801b10c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801b09e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b0a2:	2900      	cmp	r1, #0
 801b0a4:	d032      	beq.n	801b10c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801b0a6:	891a      	ldrh	r2, [r3, #8]
 801b0a8:	8958      	ldrh	r0, [r3, #10]
 801b0aa:	4350      	muls	r0, r2
 801b0ac:	7c5a      	ldrb	r2, [r3, #17]
 801b0ae:	7cdb      	ldrb	r3, [r3, #19]
 801b0b0:	0952      	lsrs	r2, r2, #5
 801b0b2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b0b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b0ba:	2b0b      	cmp	r3, #11
 801b0bc:	bf18      	it	ne
 801b0be:	0040      	lslne	r0, r0, #1
 801b0c0:	3003      	adds	r0, #3
 801b0c2:	f020 0003 	bic.w	r0, r0, #3
 801b0c6:	4408      	add	r0, r1
 801b0c8:	4770      	bx	lr
 801b0ca:	4b14      	ldr	r3, [pc, #80]	; (801b11c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801b0cc:	881b      	ldrh	r3, [r3, #0]
 801b0ce:	4403      	add	r3, r0
 801b0d0:	429a      	cmp	r2, r3
 801b0d2:	da1a      	bge.n	801b10a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801b0d4:	4b12      	ldr	r3, [pc, #72]	; (801b120 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801b0d6:	1a10      	subs	r0, r2, r0
 801b0d8:	210e      	movs	r1, #14
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	fb01 3000 	mla	r0, r1, r0, r3
 801b0e0:	7b03      	ldrb	r3, [r0, #12]
 801b0e2:	f003 031f 	and.w	r3, r3, #31
 801b0e6:	2b0b      	cmp	r3, #11
 801b0e8:	d10b      	bne.n	801b102 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b0ea:	8903      	ldrh	r3, [r0, #8]
 801b0ec:	8940      	ldrh	r0, [r0, #10]
 801b0ee:	4358      	muls	r0, r3
 801b0f0:	4b09      	ldr	r3, [pc, #36]	; (801b118 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b0f2:	3003      	adds	r0, #3
 801b0f4:	6819      	ldr	r1, [r3, #0]
 801b0f6:	f020 0303 	bic.w	r3, r0, #3
 801b0fa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b0fe:	4418      	add	r0, r3
 801b100:	4770      	bx	lr
 801b102:	2b0d      	cmp	r3, #13
 801b104:	d101      	bne.n	801b10a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801b106:	300d      	adds	r0, #13
 801b108:	4770      	bx	lr
 801b10a:	2000      	movs	r0, #0
 801b10c:	4770      	bx	lr
 801b10e:	bf00      	nop
 801b110:	20056780 	.word	0x20056780
 801b114:	20056788 	.word	0x20056788
 801b118:	20056764 	.word	0x20056764
 801b11c:	20056784 	.word	0x20056784
 801b120:	20056768 	.word	0x20056768

0801b124 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b124:	4b17      	ldr	r3, [pc, #92]	; (801b184 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801b126:	b510      	push	{r4, lr}
 801b128:	6819      	ldr	r1, [r3, #0]
 801b12a:	8803      	ldrh	r3, [r0, #0]
 801b12c:	b1e9      	cbz	r1, 801b16a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801b12e:	4a16      	ldr	r2, [pc, #88]	; (801b188 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801b130:	8812      	ldrh	r2, [r2, #0]
 801b132:	429a      	cmp	r2, r3
 801b134:	d90a      	bls.n	801b14c <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801b136:	2214      	movs	r2, #20
 801b138:	fb02 1303 	mla	r3, r2, r3, r1
 801b13c:	7c58      	ldrb	r0, [r3, #17]
 801b13e:	0942      	lsrs	r2, r0, #5
 801b140:	7cd8      	ldrb	r0, [r3, #19]
 801b142:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b146:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b14a:	bd10      	pop	{r4, pc}
 801b14c:	490f      	ldr	r1, [pc, #60]	; (801b18c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b14e:	8809      	ldrh	r1, [r1, #0]
 801b150:	4411      	add	r1, r2
 801b152:	428b      	cmp	r3, r1
 801b154:	da09      	bge.n	801b16a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801b156:	1a9b      	subs	r3, r3, r2
 801b158:	4a0d      	ldr	r2, [pc, #52]	; (801b190 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b15a:	210e      	movs	r1, #14
 801b15c:	6812      	ldr	r2, [r2, #0]
 801b15e:	fb01 2303 	mla	r3, r1, r3, r2
 801b162:	7b18      	ldrb	r0, [r3, #12]
 801b164:	f000 001f 	and.w	r0, r0, #31
 801b168:	e7ef      	b.n	801b14a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b16a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b16e:	4293      	cmp	r3, r2
 801b170:	d106      	bne.n	801b180 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801b172:	f7ea fa01 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 801b176:	6803      	ldr	r3, [r0, #0]
 801b178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b17e:	4718      	bx	r3
 801b180:	2000      	movs	r0, #0
 801b182:	e7e2      	b.n	801b14a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b184:	20056788 	.word	0x20056788
 801b188:	20056780 	.word	0x20056780
 801b18c:	20056784 	.word	0x20056784
 801b190:	20056768 	.word	0x20056768

0801b194 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801b194:	2018      	movs	r0, #24
 801b196:	4770      	bx	lr

0801b198 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801b198:	2001      	movs	r0, #1
 801b19a:	4770      	bx	lr

0801b19c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1a0:	b085      	sub	sp, #20
 801b1a2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b1a4:	9203      	str	r2, [sp, #12]
 801b1a6:	6870      	ldr	r0, [r6, #4]
 801b1a8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801b1ac:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801b1b0:	9101      	str	r1, [sp, #4]
 801b1b2:	fa1f f885 	uxth.w	r8, r5
 801b1b6:	43ed      	mvns	r5, r5
 801b1b8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b1bc:	b2ed      	uxtb	r5, r5
 801b1be:	fb00 2404 	mla	r4, r0, r4, r2
 801b1c2:	6832      	ldr	r2, [r6, #0]
 801b1c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b1c8:	4414      	add	r4, r2
 801b1ca:	f8dc 2000 	ldr.w	r2, [ip]
 801b1ce:	9202      	str	r2, [sp, #8]
 801b1d0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b1d4:	f102 0e04 	add.w	lr, r2, #4
 801b1d8:	9a01      	ldr	r2, [sp, #4]
 801b1da:	2a00      	cmp	r2, #0
 801b1dc:	dc03      	bgt.n	801b1e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b1de:	9a03      	ldr	r2, [sp, #12]
 801b1e0:	2a00      	cmp	r2, #0
 801b1e2:	f340 8116 	ble.w	801b412 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b1e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b1e8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801b1ec:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b1f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b1f2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801b1f6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	dd0e      	ble.n	801b21c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b1fe:	1406      	asrs	r6, r0, #16
 801b200:	d405      	bmi.n	801b20e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b202:	4556      	cmp	r6, sl
 801b204:	da03      	bge.n	801b20e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b206:	1416      	asrs	r6, r2, #16
 801b208:	d401      	bmi.n	801b20e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b20a:	454e      	cmp	r6, r9
 801b20c:	db07      	blt.n	801b21e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b20e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b210:	3b01      	subs	r3, #1
 801b212:	3403      	adds	r4, #3
 801b214:	4430      	add	r0, r6
 801b216:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b218:	4432      	add	r2, r6
 801b21a:	e7ee      	b.n	801b1fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b21c:	d063      	beq.n	801b2e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801b21e:	1e5e      	subs	r6, r3, #1
 801b220:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801b222:	fb07 0706 	mla	r7, r7, r6, r0
 801b226:	143f      	asrs	r7, r7, #16
 801b228:	d454      	bmi.n	801b2d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b22a:	4557      	cmp	r7, sl
 801b22c:	da52      	bge.n	801b2d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b22e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801b230:	fb07 2606 	mla	r6, r7, r6, r2
 801b234:	1436      	asrs	r6, r6, #16
 801b236:	d44d      	bmi.n	801b2d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b238:	454e      	cmp	r6, r9
 801b23a:	da4b      	bge.n	801b2d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b23c:	1ce6      	adds	r6, r4, #3
 801b23e:	4699      	mov	r9, r3
 801b240:	f1b9 0f00 	cmp.w	r9, #0
 801b244:	f106 0603 	add.w	r6, r6, #3
 801b248:	dd48      	ble.n	801b2dc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801b24a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801b24e:	1417      	asrs	r7, r2, #16
 801b250:	9902      	ldr	r1, [sp, #8]
 801b252:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b256:	f109 39ff 	add.w	r9, r9, #4294967295
 801b25a:	fb0b 1707 	mla	r7, fp, r7, r1
 801b25e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b262:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b264:	f817 700a 	ldrb.w	r7, [r7, sl]
 801b268:	fb1b fb05 	smulbb	fp, fp, r5
 801b26c:	4408      	add	r0, r1
 801b26e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b270:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b274:	440a      	add	r2, r1
 801b276:	eb0e 0a07 	add.w	sl, lr, r7
 801b27a:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801b27e:	fb07 b708 	mla	r7, r7, r8, fp
 801b282:	b2bf      	uxth	r7, r7
 801b284:	f107 0b01 	add.w	fp, r7, #1
 801b288:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b28c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b290:	fb1b fb05 	smulbb	fp, fp, r5
 801b294:	123f      	asrs	r7, r7, #8
 801b296:	f806 7c06 	strb.w	r7, [r6, #-6]
 801b29a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801b29e:	fb07 b708 	mla	r7, r7, r8, fp
 801b2a2:	b2bf      	uxth	r7, r7
 801b2a4:	f107 0b01 	add.w	fp, r7, #1
 801b2a8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b2ac:	123f      	asrs	r7, r7, #8
 801b2ae:	f806 7c05 	strb.w	r7, [r6, #-5]
 801b2b2:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801b2b6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b2ba:	fb1a fa05 	smulbb	sl, sl, r5
 801b2be:	fb07 a708 	mla	r7, r7, r8, sl
 801b2c2:	b2bf      	uxth	r7, r7
 801b2c4:	f107 0a01 	add.w	sl, r7, #1
 801b2c8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801b2cc:	123f      	asrs	r7, r7, #8
 801b2ce:	f806 7c04 	strb.w	r7, [r6, #-4]
 801b2d2:	e7b5      	b.n	801b240 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801b2d4:	2700      	movs	r7, #0
 801b2d6:	1bde      	subs	r6, r3, r7
 801b2d8:	2e00      	cmp	r6, #0
 801b2da:	dc42      	bgt.n	801b362 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801b2dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b2e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b2e4:	441c      	add	r4, r3
 801b2e6:	9b01      	ldr	r3, [sp, #4]
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	f340 8092 	ble.w	801b412 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b2ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b2f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b2f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b2f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b2fc:	eef0 6a62 	vmov.f32	s13, s5
 801b300:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b304:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b308:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b30c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b310:	eef0 6a43 	vmov.f32	s13, s6
 801b314:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b318:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b31c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b320:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b324:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b328:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b32c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b330:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b334:	ee12 2a90 	vmov	r2, s5
 801b338:	eef0 2a47 	vmov.f32	s5, s14
 801b33c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b340:	ee13 2a10 	vmov	r2, s6
 801b344:	9311      	str	r3, [sp, #68]	; 0x44
 801b346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b348:	eeb0 3a67 	vmov.f32	s6, s15
 801b34c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b350:	9312      	str	r3, [sp, #72]	; 0x48
 801b352:	9b01      	ldr	r3, [sp, #4]
 801b354:	9a03      	ldr	r2, [sp, #12]
 801b356:	3b01      	subs	r3, #1
 801b358:	9301      	str	r3, [sp, #4]
 801b35a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b35c:	bf08      	it	eq
 801b35e:	4613      	moveq	r3, r2
 801b360:	e73a      	b.n	801b1d8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b362:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b366:	d44e      	bmi.n	801b406 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b368:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b36c:	4556      	cmp	r6, sl
 801b36e:	dd4a      	ble.n	801b406 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b370:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801b374:	d447      	bmi.n	801b406 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b376:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801b37a:	4559      	cmp	r1, fp
 801b37c:	dd43      	ble.n	801b406 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b37e:	fa0f f986 	sxth.w	r9, r6
 801b382:	9902      	ldr	r1, [sp, #8]
 801b384:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b388:	fb0b 1909 	mla	r9, fp, r9, r1
 801b38c:	f814 b006 	ldrb.w	fp, [r4, r6]
 801b390:	f819 900a 	ldrb.w	r9, [r9, sl]
 801b394:	fb1b fb05 	smulbb	fp, fp, r5
 801b398:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b39c:	eb0e 0a09 	add.w	sl, lr, r9
 801b3a0:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801b3a4:	fb09 b908 	mla	r9, r9, r8, fp
 801b3a8:	fa1f f989 	uxth.w	r9, r9
 801b3ac:	f109 0b01 	add.w	fp, r9, #1
 801b3b0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b3b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b3b8:	f804 9006 	strb.w	r9, [r4, r6]
 801b3bc:	4426      	add	r6, r4
 801b3be:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b3c2:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b3c6:	fb1b fb05 	smulbb	fp, fp, r5
 801b3ca:	fb09 b908 	mla	r9, r9, r8, fp
 801b3ce:	fa1f f989 	uxth.w	r9, r9
 801b3d2:	f109 0b01 	add.w	fp, r9, #1
 801b3d6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b3da:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b3de:	f886 9001 	strb.w	r9, [r6, #1]
 801b3e2:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b3e6:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b3ea:	fb1a fa05 	smulbb	sl, sl, r5
 801b3ee:	fb09 a908 	mla	r9, r9, r8, sl
 801b3f2:	fa1f f989 	uxth.w	r9, r9
 801b3f6:	f109 0a01 	add.w	sl, r9, #1
 801b3fa:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801b3fe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b402:	f886 9002 	strb.w	r9, [r6, #2]
 801b406:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b408:	3701      	adds	r7, #1
 801b40a:	4408      	add	r0, r1
 801b40c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b40e:	440a      	add	r2, r1
 801b410:	e761      	b.n	801b2d6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b412:	b005      	add	sp, #20
 801b414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b418 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b41c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b41e:	4693      	mov	fp, r2
 801b420:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801b422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b426:	6868      	ldr	r0, [r5, #4]
 801b428:	6877      	ldr	r7, [r6, #4]
 801b42a:	9100      	str	r1, [sp, #0]
 801b42c:	3704      	adds	r7, #4
 801b42e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801b432:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801b436:	fb00 2404 	mla	r4, r0, r4, r2
 801b43a:	682a      	ldr	r2, [r5, #0]
 801b43c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b440:	4414      	add	r4, r2
 801b442:	6832      	ldr	r2, [r6, #0]
 801b444:	9201      	str	r2, [sp, #4]
 801b446:	9a00      	ldr	r2, [sp, #0]
 801b448:	2a00      	cmp	r2, #0
 801b44a:	dc03      	bgt.n	801b454 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b44c:	f1bb 0f00 	cmp.w	fp, #0
 801b450:	f340 80bc 	ble.w	801b5cc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b454:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b456:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801b45a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b45e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b460:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801b464:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b468:	2b00      	cmp	r3, #0
 801b46a:	dd0c      	ble.n	801b486 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b46c:	1405      	asrs	r5, r0, #16
 801b46e:	d405      	bmi.n	801b47c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b470:	4555      	cmp	r5, sl
 801b472:	da03      	bge.n	801b47c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b474:	1415      	asrs	r5, r2, #16
 801b476:	d401      	bmi.n	801b47c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b478:	454d      	cmp	r5, r9
 801b47a:	db05      	blt.n	801b488 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b47c:	4440      	add	r0, r8
 801b47e:	4472      	add	r2, lr
 801b480:	3b01      	subs	r3, #1
 801b482:	3403      	adds	r4, #3
 801b484:	e7f0      	b.n	801b468 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801b486:	d03f      	beq.n	801b508 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801b488:	1e5d      	subs	r5, r3, #1
 801b48a:	fb08 0c05 	mla	ip, r8, r5, r0
 801b48e:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801b492:	d42e      	bmi.n	801b4f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b494:	45d4      	cmp	ip, sl
 801b496:	da2c      	bge.n	801b4f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b498:	fb0e 2505 	mla	r5, lr, r5, r2
 801b49c:	142d      	asrs	r5, r5, #16
 801b49e:	d428      	bmi.n	801b4f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b4a0:	454d      	cmp	r5, r9
 801b4a2:	da26      	bge.n	801b4f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b4a4:	1ce5      	adds	r5, r4, #3
 801b4a6:	469c      	mov	ip, r3
 801b4a8:	f1bc 0f00 	cmp.w	ip, #0
 801b4ac:	f105 0503 	add.w	r5, r5, #3
 801b4b0:	dd25      	ble.n	801b4fe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801b4b2:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801b4b6:	ea4f 4922 	mov.w	r9, r2, asr #16
 801b4ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b4be:	4472      	add	r2, lr
 801b4c0:	468a      	mov	sl, r1
 801b4c2:	9901      	ldr	r1, [sp, #4]
 801b4c4:	fb0a 1909 	mla	r9, sl, r9, r1
 801b4c8:	1401      	asrs	r1, r0, #16
 801b4ca:	4440      	add	r0, r8
 801b4cc:	f819 9001 	ldrb.w	r9, [r9, r1]
 801b4d0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b4d4:	eb07 0a09 	add.w	sl, r7, r9
 801b4d8:	f817 9009 	ldrb.w	r9, [r7, r9]
 801b4dc:	f805 9c06 	strb.w	r9, [r5, #-6]
 801b4e0:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b4e4:	f805 9c05 	strb.w	r9, [r5, #-5]
 801b4e8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b4ec:	f805 9c04 	strb.w	r9, [r5, #-4]
 801b4f0:	e7da      	b.n	801b4a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b4f2:	2500      	movs	r5, #0
 801b4f4:	eba3 0c05 	sub.w	ip, r3, r5
 801b4f8:	f1bc 0f00 	cmp.w	ip, #0
 801b4fc:	dc3b      	bgt.n	801b576 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801b4fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b502:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b506:	441c      	add	r4, r3
 801b508:	9b00      	ldr	r3, [sp, #0]
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	dd5e      	ble.n	801b5cc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b50e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b514:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b518:	eeb0 6a62 	vmov.f32	s12, s5
 801b51c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b520:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b524:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b528:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801b52c:	eeb0 6a43 	vmov.f32	s12, s6
 801b530:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b534:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801b538:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b53c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b540:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b544:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b548:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b54c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b550:	ee12 2a90 	vmov	r2, s5
 801b554:	eef0 2a47 	vmov.f32	s5, s14
 801b558:	fb92 f8f3 	sdiv	r8, r2, r3
 801b55c:	ee13 2a10 	vmov	r2, s6
 801b560:	eeb0 3a67 	vmov.f32	s6, s15
 801b564:	fb92 fef3 	sdiv	lr, r2, r3
 801b568:	9b00      	ldr	r3, [sp, #0]
 801b56a:	3b01      	subs	r3, #1
 801b56c:	9300      	str	r3, [sp, #0]
 801b56e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b570:	bf08      	it	eq
 801b572:	465b      	moveq	r3, fp
 801b574:	e767      	b.n	801b446 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b576:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b57a:	d423      	bmi.n	801b5c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b57c:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801b580:	45cc      	cmp	ip, r9
 801b582:	dd1f      	ble.n	801b5c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b584:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b588:	d41c      	bmi.n	801b5c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b58a:	68f1      	ldr	r1, [r6, #12]
 801b58c:	4551      	cmp	r1, sl
 801b58e:	dd19      	ble.n	801b5c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b590:	fa0f fc8c 	sxth.w	ip, ip
 801b594:	9901      	ldr	r1, [sp, #4]
 801b596:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801b59a:	f81c c009 	ldrb.w	ip, [ip, r9]
 801b59e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b5a2:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801b5a6:	eb07 090c 	add.w	r9, r7, ip
 801b5aa:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801b5ae:	f804 a00c 	strb.w	sl, [r4, ip]
 801b5b2:	44a4      	add	ip, r4
 801b5b4:	f899 a001 	ldrb.w	sl, [r9, #1]
 801b5b8:	f88c a001 	strb.w	sl, [ip, #1]
 801b5bc:	f899 9002 	ldrb.w	r9, [r9, #2]
 801b5c0:	f88c 9002 	strb.w	r9, [ip, #2]
 801b5c4:	4440      	add	r0, r8
 801b5c6:	4472      	add	r2, lr
 801b5c8:	3501      	adds	r5, #1
 801b5ca:	e793      	b.n	801b4f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801b5cc:	b003      	add	sp, #12
 801b5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b5d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b5d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5d6:	b085      	sub	sp, #20
 801b5d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b5dc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b5de:	9202      	str	r2, [sp, #8]
 801b5e0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801b5e4:	6860      	ldr	r0, [r4, #4]
 801b5e6:	9203      	str	r2, [sp, #12]
 801b5e8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801b5ec:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801b5f0:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801b5f4:	fb00 2505 	mla	r5, r0, r5, r2
 801b5f8:	6822      	ldr	r2, [r4, #0]
 801b5fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b5fe:	4415      	add	r5, r2
 801b600:	f8dc 2000 	ldr.w	r2, [ip]
 801b604:	9200      	str	r2, [sp, #0]
 801b606:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b60a:	3204      	adds	r2, #4
 801b60c:	9201      	str	r2, [sp, #4]
 801b60e:	2900      	cmp	r1, #0
 801b610:	dc03      	bgt.n	801b61a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b612:	9a02      	ldr	r2, [sp, #8]
 801b614:	2a00      	cmp	r2, #0
 801b616:	f340 8127 	ble.w	801b868 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801b61a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b61c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b620:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b624:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b626:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b62a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b62e:	2b00      	cmp	r3, #0
 801b630:	dd0d      	ble.n	801b64e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b632:	1422      	asrs	r2, r4, #16
 801b634:	d405      	bmi.n	801b642 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b636:	4542      	cmp	r2, r8
 801b638:	da03      	bge.n	801b642 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b63a:	1402      	asrs	r2, r0, #16
 801b63c:	d401      	bmi.n	801b642 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b63e:	42ba      	cmp	r2, r7
 801b640:	db06      	blt.n	801b650 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b642:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b644:	4474      	add	r4, lr
 801b646:	3b01      	subs	r3, #1
 801b648:	3503      	adds	r5, #3
 801b64a:	4410      	add	r0, r2
 801b64c:	e7ef      	b.n	801b62e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b64e:	d075      	beq.n	801b73c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801b650:	1e5a      	subs	r2, r3, #1
 801b652:	fb0e 4602 	mla	r6, lr, r2, r4
 801b656:	1436      	asrs	r6, r6, #16
 801b658:	d465      	bmi.n	801b726 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b65a:	4546      	cmp	r6, r8
 801b65c:	da63      	bge.n	801b726 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b65e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b660:	fb06 0202 	mla	r2, r6, r2, r0
 801b664:	1412      	asrs	r2, r2, #16
 801b666:	d45e      	bmi.n	801b726 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b668:	42ba      	cmp	r2, r7
 801b66a:	da5c      	bge.n	801b726 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b66c:	1cef      	adds	r7, r5, #3
 801b66e:	4699      	mov	r9, r3
 801b670:	f1b9 0f00 	cmp.w	r9, #0
 801b674:	dd5d      	ble.n	801b732 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801b676:	1402      	asrs	r2, r0, #16
 801b678:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b67c:	1426      	asrs	r6, r4, #16
 801b67e:	4692      	mov	sl, r2
 801b680:	9a00      	ldr	r2, [sp, #0]
 801b682:	fb08 220a 	mla	r2, r8, sl, r2
 801b686:	5d92      	ldrb	r2, [r2, r6]
 801b688:	9e01      	ldr	r6, [sp, #4]
 801b68a:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801b68e:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801b692:	d041      	beq.n	801b718 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b694:	9a03      	ldr	r2, [sp, #12]
 801b696:	fa5f fb86 	uxtb.w	fp, r6
 801b69a:	fb02 f808 	mul.w	r8, r2, r8
 801b69e:	f108 0201 	add.w	r2, r8, #1
 801b6a2:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801b6a6:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801b6aa:	1212      	asrs	r2, r2, #8
 801b6ac:	fa1f fa82 	uxth.w	sl, r2
 801b6b0:	43d2      	mvns	r2, r2
 801b6b2:	fb1b fb0a 	smulbb	fp, fp, sl
 801b6b6:	b2d2      	uxtb	r2, r2
 801b6b8:	fb08 b802 	mla	r8, r8, r2, fp
 801b6bc:	fa1f f888 	uxth.w	r8, r8
 801b6c0:	f108 0b01 	add.w	fp, r8, #1
 801b6c4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b6c8:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b6cc:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b6d0:	fb1b fb0a 	smulbb	fp, fp, sl
 801b6d4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b6d8:	fb16 fa0a 	smulbb	sl, r6, sl
 801b6dc:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801b6e0:	f807 8c03 	strb.w	r8, [r7, #-3]
 801b6e4:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801b6e8:	fb06 aa02 	mla	sl, r6, r2, sl
 801b6ec:	fb08 b802 	mla	r8, r8, r2, fp
 801b6f0:	fa1f fa8a 	uxth.w	sl, sl
 801b6f4:	fa1f f888 	uxth.w	r8, r8
 801b6f8:	f10a 0601 	add.w	r6, sl, #1
 801b6fc:	f108 0b01 	add.w	fp, r8, #1
 801b700:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b704:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b708:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b70c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b710:	f807 ac01 	strb.w	sl, [r7, #-1]
 801b714:	f807 8c02 	strb.w	r8, [r7, #-2]
 801b718:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b71a:	4474      	add	r4, lr
 801b71c:	3703      	adds	r7, #3
 801b71e:	f109 39ff 	add.w	r9, r9, #4294967295
 801b722:	4410      	add	r0, r2
 801b724:	e7a4      	b.n	801b670 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b726:	f04f 0800 	mov.w	r8, #0
 801b72a:	eba3 0208 	sub.w	r2, r3, r8
 801b72e:	2a00      	cmp	r2, #0
 801b730:	dc3b      	bgt.n	801b7aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801b732:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b736:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b73a:	441d      	add	r5, r3
 801b73c:	2900      	cmp	r1, #0
 801b73e:	f340 8093 	ble.w	801b868 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801b742:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b748:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b74c:	3901      	subs	r1, #1
 801b74e:	eeb0 6a62 	vmov.f32	s12, s5
 801b752:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b756:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b75a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b75e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b762:	eeb0 6a43 	vmov.f32	s12, s6
 801b766:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b76a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b76e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b772:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b776:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b77a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b77e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b782:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b786:	ee12 2a90 	vmov	r2, s5
 801b78a:	eef0 2a47 	vmov.f32	s5, s14
 801b78e:	fb92 fef3 	sdiv	lr, r2, r3
 801b792:	ee13 2a10 	vmov	r2, s6
 801b796:	eeb0 3a67 	vmov.f32	s6, s15
 801b79a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b79e:	9a02      	ldr	r2, [sp, #8]
 801b7a0:	9312      	str	r3, [sp, #72]	; 0x48
 801b7a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b7a4:	bf08      	it	eq
 801b7a6:	4613      	moveq	r3, r2
 801b7a8:	e731      	b.n	801b60e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b7aa:	1427      	asrs	r7, r4, #16
 801b7ac:	d456      	bmi.n	801b85c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b7ae:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b7b2:	42be      	cmp	r6, r7
 801b7b4:	dd52      	ble.n	801b85c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b7b6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b7ba:	d44f      	bmi.n	801b85c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b7bc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b7c0:	454a      	cmp	r2, r9
 801b7c2:	dd4b      	ble.n	801b85c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b7c4:	9a00      	ldr	r2, [sp, #0]
 801b7c6:	b236      	sxth	r6, r6
 801b7c8:	fb09 2606 	mla	r6, r9, r6, r2
 801b7cc:	5df2      	ldrb	r2, [r6, r7]
 801b7ce:	9e01      	ldr	r6, [sp, #4]
 801b7d0:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801b7d4:	0e3a      	lsrs	r2, r7, #24
 801b7d6:	d041      	beq.n	801b85c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b7d8:	9e03      	ldr	r6, [sp, #12]
 801b7da:	fa5f fb87 	uxtb.w	fp, r7
 801b7de:	4372      	muls	r2, r6
 801b7e0:	1c56      	adds	r6, r2, #1
 801b7e2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b7e6:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801b7ea:	1212      	asrs	r2, r2, #8
 801b7ec:	f815 9006 	ldrb.w	r9, [r5, r6]
 801b7f0:	fa1f fa82 	uxth.w	sl, r2
 801b7f4:	43d2      	mvns	r2, r2
 801b7f6:	fb1b fb0a 	smulbb	fp, fp, sl
 801b7fa:	b2d2      	uxtb	r2, r2
 801b7fc:	fb09 b902 	mla	r9, r9, r2, fp
 801b800:	fa1f f989 	uxth.w	r9, r9
 801b804:	f109 0b01 	add.w	fp, r9, #1
 801b808:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b80c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801b810:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b814:	fb1b fb0a 	smulbb	fp, fp, sl
 801b818:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b81c:	fb17 fa0a 	smulbb	sl, r7, sl
 801b820:	f805 9006 	strb.w	r9, [r5, r6]
 801b824:	442e      	add	r6, r5
 801b826:	78b7      	ldrb	r7, [r6, #2]
 801b828:	f896 9001 	ldrb.w	r9, [r6, #1]
 801b82c:	fb07 aa02 	mla	sl, r7, r2, sl
 801b830:	fb09 b902 	mla	r9, r9, r2, fp
 801b834:	fa1f fa8a 	uxth.w	sl, sl
 801b838:	fa1f f989 	uxth.w	r9, r9
 801b83c:	f10a 0701 	add.w	r7, sl, #1
 801b840:	f109 0b01 	add.w	fp, r9, #1
 801b844:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b848:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b84c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b850:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b854:	f886 a002 	strb.w	sl, [r6, #2]
 801b858:	f886 9001 	strb.w	r9, [r6, #1]
 801b85c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b85e:	4474      	add	r4, lr
 801b860:	f108 0801 	add.w	r8, r8, #1
 801b864:	4410      	add	r0, r2
 801b866:	e760      	b.n	801b72a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801b868:	b005      	add	sp, #20
 801b86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b86e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b86e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b872:	b085      	sub	sp, #20
 801b874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b878:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b87a:	9203      	str	r2, [sp, #12]
 801b87c:	6868      	ldr	r0, [r5, #4]
 801b87e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801b882:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801b886:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b88a:	fb00 2404 	mla	r4, r0, r4, r2
 801b88e:	682a      	ldr	r2, [r5, #0]
 801b890:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b894:	4414      	add	r4, r2
 801b896:	f8dc 2000 	ldr.w	r2, [ip]
 801b89a:	9201      	str	r2, [sp, #4]
 801b89c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b8a0:	3204      	adds	r2, #4
 801b8a2:	9202      	str	r2, [sp, #8]
 801b8a4:	2900      	cmp	r1, #0
 801b8a6:	dc03      	bgt.n	801b8b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801b8a8:	9a03      	ldr	r2, [sp, #12]
 801b8aa:	2a00      	cmp	r2, #0
 801b8ac:	f340 8137 	ble.w	801bb1e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b8b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b8b2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b8b6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b8ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b8bc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b8c0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	dd0d      	ble.n	801b8e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b8c8:	1405      	asrs	r5, r0, #16
 801b8ca:	d405      	bmi.n	801b8d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b8cc:	4545      	cmp	r5, r8
 801b8ce:	da03      	bge.n	801b8d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b8d0:	1415      	asrs	r5, r2, #16
 801b8d2:	d401      	bmi.n	801b8d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b8d4:	42bd      	cmp	r5, r7
 801b8d6:	db06      	blt.n	801b8e6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b8d8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b8da:	4470      	add	r0, lr
 801b8dc:	3b01      	subs	r3, #1
 801b8de:	3403      	adds	r4, #3
 801b8e0:	442a      	add	r2, r5
 801b8e2:	e7ef      	b.n	801b8c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801b8e4:	d070      	beq.n	801b9c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801b8e6:	1e5d      	subs	r5, r3, #1
 801b8e8:	fb0e 0605 	mla	r6, lr, r5, r0
 801b8ec:	1436      	asrs	r6, r6, #16
 801b8ee:	d462      	bmi.n	801b9b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801b8f0:	4546      	cmp	r6, r8
 801b8f2:	da60      	bge.n	801b9b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801b8f4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b8f6:	fb06 2505 	mla	r5, r6, r5, r2
 801b8fa:	142d      	asrs	r5, r5, #16
 801b8fc:	d45b      	bmi.n	801b9b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801b8fe:	42bd      	cmp	r5, r7
 801b900:	da59      	bge.n	801b9b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801b902:	1ce5      	adds	r5, r4, #3
 801b904:	469a      	mov	sl, r3
 801b906:	f1ba 0f00 	cmp.w	sl, #0
 801b90a:	dd58      	ble.n	801b9be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801b90c:	1416      	asrs	r6, r2, #16
 801b90e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b912:	1407      	asrs	r7, r0, #16
 801b914:	46b1      	mov	r9, r6
 801b916:	9e01      	ldr	r6, [sp, #4]
 801b918:	fb08 6609 	mla	r6, r8, r9, r6
 801b91c:	5df6      	ldrb	r6, [r6, r7]
 801b91e:	9f02      	ldr	r7, [sp, #8]
 801b920:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801b924:	0e37      	lsrs	r7, r6, #24
 801b926:	2fff      	cmp	r7, #255	; 0xff
 801b928:	f000 80f0 	beq.w	801bb0c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801b92c:	fa5f f887 	uxtb.w	r8, r7
 801b930:	b3d7      	cbz	r7, 801b9a8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b932:	fa1f f788 	uxth.w	r7, r8
 801b936:	ea6f 0808 	mvn.w	r8, r8
 801b93a:	fa5f fb86 	uxtb.w	fp, r6
 801b93e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801b942:	fa5f f888 	uxtb.w	r8, r8
 801b946:	fb1b fb07 	smulbb	fp, fp, r7
 801b94a:	fb09 b908 	mla	r9, r9, r8, fp
 801b94e:	fa1f f989 	uxth.w	r9, r9
 801b952:	f109 0b01 	add.w	fp, r9, #1
 801b956:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b95a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801b95e:	fb1b fb08 	smulbb	fp, fp, r8
 801b962:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b966:	f805 9c03 	strb.w	r9, [r5, #-3]
 801b96a:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801b96e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b972:	fb09 b907 	mla	r9, r9, r7, fp
 801b976:	fa1f f989 	uxth.w	r9, r9
 801b97a:	f109 0b01 	add.w	fp, r9, #1
 801b97e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b982:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b986:	f805 9c02 	strb.w	r9, [r5, #-2]
 801b98a:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801b98e:	fb19 f808 	smulbb	r8, r9, r8
 801b992:	fb06 8607 	mla	r6, r6, r7, r8
 801b996:	b2b6      	uxth	r6, r6
 801b998:	f106 0801 	add.w	r8, r6, #1
 801b99c:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801b9a0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b9a4:	f805 8c01 	strb.w	r8, [r5, #-1]
 801b9a8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b9aa:	4470      	add	r0, lr
 801b9ac:	3503      	adds	r5, #3
 801b9ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b9b2:	4432      	add	r2, r6
 801b9b4:	e7a7      	b.n	801b906 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b9b6:	2600      	movs	r6, #0
 801b9b8:	1b9d      	subs	r5, r3, r6
 801b9ba:	2d00      	cmp	r5, #0
 801b9bc:	dc3b      	bgt.n	801ba36 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b9be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b9c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b9c6:	441c      	add	r4, r3
 801b9c8:	2900      	cmp	r1, #0
 801b9ca:	f340 80a8 	ble.w	801bb1e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b9ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b9d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b9d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b9d8:	3901      	subs	r1, #1
 801b9da:	eeb0 6a62 	vmov.f32	s12, s5
 801b9de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b9e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b9e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b9ea:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b9ee:	eeb0 6a43 	vmov.f32	s12, s6
 801b9f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b9f6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b9fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b9fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba02:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba06:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba0a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba0e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba12:	ee12 2a90 	vmov	r2, s5
 801ba16:	eef0 2a47 	vmov.f32	s5, s14
 801ba1a:	fb92 fef3 	sdiv	lr, r2, r3
 801ba1e:	ee13 2a10 	vmov	r2, s6
 801ba22:	eeb0 3a67 	vmov.f32	s6, s15
 801ba26:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba2a:	9a03      	ldr	r2, [sp, #12]
 801ba2c:	9312      	str	r3, [sp, #72]	; 0x48
 801ba2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba30:	bf08      	it	eq
 801ba32:	4613      	moveq	r3, r2
 801ba34:	e736      	b.n	801b8a4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ba36:	ea5f 4820 	movs.w	r8, r0, asr #16
 801ba3a:	d457      	bmi.n	801baec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ba3c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801ba40:	4547      	cmp	r7, r8
 801ba42:	dd53      	ble.n	801baec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ba44:	ea5f 4922 	movs.w	r9, r2, asr #16
 801ba48:	d450      	bmi.n	801baec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ba4a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801ba4e:	454d      	cmp	r5, r9
 801ba50:	dd4c      	ble.n	801baec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ba52:	9d01      	ldr	r5, [sp, #4]
 801ba54:	b23f      	sxth	r7, r7
 801ba56:	fb09 5707 	mla	r7, r9, r7, r5
 801ba5a:	f817 5008 	ldrb.w	r5, [r7, r8]
 801ba5e:	9f02      	ldr	r7, [sp, #8]
 801ba60:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801ba64:	0e2f      	lsrs	r7, r5, #24
 801ba66:	2fff      	cmp	r7, #255	; 0xff
 801ba68:	d045      	beq.n	801baf6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801ba6a:	fa5f f987 	uxtb.w	r9, r7
 801ba6e:	b3ef      	cbz	r7, 801baec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ba70:	fa1f f889 	uxth.w	r8, r9
 801ba74:	ea6f 0909 	mvn.w	r9, r9
 801ba78:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801ba7c:	fa5f fb85 	uxtb.w	fp, r5
 801ba80:	f814 a007 	ldrb.w	sl, [r4, r7]
 801ba84:	fa5f f989 	uxtb.w	r9, r9
 801ba88:	fb1b fb08 	smulbb	fp, fp, r8
 801ba8c:	fb0a ba09 	mla	sl, sl, r9, fp
 801ba90:	fa1f fa8a 	uxth.w	sl, sl
 801ba94:	f10a 0b01 	add.w	fp, sl, #1
 801ba98:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801ba9c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801baa0:	f804 a007 	strb.w	sl, [r4, r7]
 801baa4:	4427      	add	r7, r4
 801baa6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801baaa:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801baae:	f897 b001 	ldrb.w	fp, [r7, #1]
 801bab2:	fb1b fb09 	smulbb	fp, fp, r9
 801bab6:	fb0a ba08 	mla	sl, sl, r8, fp
 801baba:	fa1f fa8a 	uxth.w	sl, sl
 801babe:	f10a 0b01 	add.w	fp, sl, #1
 801bac2:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801bac6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801baca:	f887 a001 	strb.w	sl, [r7, #1]
 801bace:	f897 a002 	ldrb.w	sl, [r7, #2]
 801bad2:	fb1a f909 	smulbb	r9, sl, r9
 801bad6:	fb05 9508 	mla	r5, r5, r8, r9
 801bada:	b2ad      	uxth	r5, r5
 801badc:	f105 0901 	add.w	r9, r5, #1
 801bae0:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801bae4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bae8:	f887 9002 	strb.w	r9, [r7, #2]
 801baec:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801baee:	4470      	add	r0, lr
 801baf0:	3601      	adds	r6, #1
 801baf2:	442a      	add	r2, r5
 801baf4:	e760      	b.n	801b9b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801baf6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801bafa:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801bafe:	55e5      	strb	r5, [r4, r7]
 801bb00:	4427      	add	r7, r4
 801bb02:	0c2d      	lsrs	r5, r5, #16
 801bb04:	f887 8001 	strb.w	r8, [r7, #1]
 801bb08:	70bd      	strb	r5, [r7, #2]
 801bb0a:	e7ef      	b.n	801baec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bb0c:	0a37      	lsrs	r7, r6, #8
 801bb0e:	f805 6c03 	strb.w	r6, [r5, #-3]
 801bb12:	0c36      	lsrs	r6, r6, #16
 801bb14:	f805 7c02 	strb.w	r7, [r5, #-2]
 801bb18:	f805 6c01 	strb.w	r6, [r5, #-1]
 801bb1c:	e744      	b.n	801b9a8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801bb1e:	b005      	add	sp, #20
 801bb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb24 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bb24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb28:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bb2a:	9201      	str	r2, [sp, #4]
 801bb2c:	6870      	ldr	r0, [r6, #4]
 801bb2e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801bb32:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801bb36:	fa1f fe85 	uxth.w	lr, r5
 801bb3a:	43ed      	mvns	r5, r5
 801bb3c:	f8dc 8000 	ldr.w	r8, [ip]
 801bb40:	b2ed      	uxtb	r5, r5
 801bb42:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801bb46:	fb00 2404 	mla	r4, r0, r4, r2
 801bb4a:	6832      	ldr	r2, [r6, #0]
 801bb4c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bb50:	4414      	add	r4, r2
 801bb52:	2900      	cmp	r1, #0
 801bb54:	dc03      	bgt.n	801bb5e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801bb56:	9a01      	ldr	r2, [sp, #4]
 801bb58:	2a00      	cmp	r2, #0
 801bb5a:	f340 810d 	ble.w	801bd78 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801bb5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb60:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801bb64:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bb68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bb6a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801bb6e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	dd0e      	ble.n	801bb94 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bb76:	1406      	asrs	r6, r0, #16
 801bb78:	d405      	bmi.n	801bb86 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801bb7a:	4556      	cmp	r6, sl
 801bb7c:	da03      	bge.n	801bb86 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801bb7e:	1416      	asrs	r6, r2, #16
 801bb80:	d401      	bmi.n	801bb86 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801bb82:	454e      	cmp	r6, r9
 801bb84:	db07      	blt.n	801bb96 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bb86:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bb88:	3b01      	subs	r3, #1
 801bb8a:	3403      	adds	r4, #3
 801bb8c:	4430      	add	r0, r6
 801bb8e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801bb90:	4432      	add	r2, r6
 801bb92:	e7ee      	b.n	801bb72 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801bb94:	d060      	beq.n	801bc58 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801bb96:	1e5e      	subs	r6, r3, #1
 801bb98:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801bb9a:	fb07 0706 	mla	r7, r7, r6, r0
 801bb9e:	143f      	asrs	r7, r7, #16
 801bba0:	d451      	bmi.n	801bc46 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801bba2:	4557      	cmp	r7, sl
 801bba4:	da4f      	bge.n	801bc46 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801bba6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801bba8:	fb07 2606 	mla	r6, r7, r6, r2
 801bbac:	1436      	asrs	r6, r6, #16
 801bbae:	d44a      	bmi.n	801bc46 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801bbb0:	454e      	cmp	r6, r9
 801bbb2:	da48      	bge.n	801bc46 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801bbb4:	1ce6      	adds	r6, r4, #3
 801bbb6:	4699      	mov	r9, r3
 801bbb8:	f1b9 0f00 	cmp.w	r9, #0
 801bbbc:	f106 0603 	add.w	r6, r6, #3
 801bbc0:	dd45      	ble.n	801bc4e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801bbc2:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801bbc6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801bbca:	1417      	asrs	r7, r2, #16
 801bbcc:	f109 39ff 	add.w	r9, r9, #4294967295
 801bbd0:	fb0b a707 	mla	r7, fp, r7, sl
 801bbd4:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801bbd8:	fb1b fb05 	smulbb	fp, fp, r5
 801bbdc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bbe0:	eb08 0a07 	add.w	sl, r8, r7
 801bbe4:	f818 7007 	ldrb.w	r7, [r8, r7]
 801bbe8:	fb07 b70e 	mla	r7, r7, lr, fp
 801bbec:	b2bf      	uxth	r7, r7
 801bbee:	f107 0b01 	add.w	fp, r7, #1
 801bbf2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801bbf6:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801bbfa:	fb1b fb05 	smulbb	fp, fp, r5
 801bbfe:	123f      	asrs	r7, r7, #8
 801bc00:	f806 7c06 	strb.w	r7, [r6, #-6]
 801bc04:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801bc08:	fb07 b70e 	mla	r7, r7, lr, fp
 801bc0c:	b2bf      	uxth	r7, r7
 801bc0e:	f107 0b01 	add.w	fp, r7, #1
 801bc12:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801bc16:	123f      	asrs	r7, r7, #8
 801bc18:	f806 7c05 	strb.w	r7, [r6, #-5]
 801bc1c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801bc20:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801bc24:	fb1a fa05 	smulbb	sl, sl, r5
 801bc28:	fb07 a70e 	mla	r7, r7, lr, sl
 801bc2c:	b2bf      	uxth	r7, r7
 801bc2e:	f107 0a01 	add.w	sl, r7, #1
 801bc32:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801bc36:	123f      	asrs	r7, r7, #8
 801bc38:	f806 7c04 	strb.w	r7, [r6, #-4]
 801bc3c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801bc3e:	4438      	add	r0, r7
 801bc40:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801bc42:	443a      	add	r2, r7
 801bc44:	e7b8      	b.n	801bbb8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bc46:	2700      	movs	r7, #0
 801bc48:	1bde      	subs	r6, r3, r7
 801bc4a:	2e00      	cmp	r6, #0
 801bc4c:	dc3f      	bgt.n	801bcce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801bc4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bc52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc56:	441c      	add	r4, r3
 801bc58:	2900      	cmp	r1, #0
 801bc5a:	f340 808d 	ble.w	801bd78 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801bc5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bc62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bc64:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bc68:	3901      	subs	r1, #1
 801bc6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bc6e:	eef0 6a62 	vmov.f32	s13, s5
 801bc72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bc76:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bc7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc7e:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801bc82:	eef0 6a43 	vmov.f32	s13, s6
 801bc86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc8a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801bc8e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bc92:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bc96:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bc9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bc9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bca2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bca6:	ee12 2a90 	vmov	r2, s5
 801bcaa:	eef0 2a47 	vmov.f32	s5, s14
 801bcae:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcb2:	ee13 2a10 	vmov	r2, s6
 801bcb6:	930f      	str	r3, [sp, #60]	; 0x3c
 801bcb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bcba:	eeb0 3a67 	vmov.f32	s6, s15
 801bcbe:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcc2:	9a01      	ldr	r2, [sp, #4]
 801bcc4:	9310      	str	r3, [sp, #64]	; 0x40
 801bcc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bcc8:	bf08      	it	eq
 801bcca:	4613      	moveq	r3, r2
 801bccc:	e741      	b.n	801bb52 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801bcce:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bcd2:	d44b      	bmi.n	801bd6c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801bcd4:	f8dc b008 	ldr.w	fp, [ip, #8]
 801bcd8:	45cb      	cmp	fp, r9
 801bcda:	dd47      	ble.n	801bd6c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801bcdc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801bce0:	d444      	bmi.n	801bd6c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801bce2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801bce6:	4556      	cmp	r6, sl
 801bce8:	dd40      	ble.n	801bd6c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801bcea:	fa0f f68b 	sxth.w	r6, fp
 801bcee:	fb0a 9906 	mla	r9, sl, r6, r9
 801bcf2:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801bcf6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801bcfa:	f814 b006 	ldrb.w	fp, [r4, r6]
 801bcfe:	fb1b fb05 	smulbb	fp, fp, r5
 801bd02:	eb08 0a09 	add.w	sl, r8, r9
 801bd06:	f818 9009 	ldrb.w	r9, [r8, r9]
 801bd0a:	fb09 b90e 	mla	r9, r9, lr, fp
 801bd0e:	fa1f f989 	uxth.w	r9, r9
 801bd12:	f109 0b01 	add.w	fp, r9, #1
 801bd16:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bd1a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bd1e:	f804 9006 	strb.w	r9, [r4, r6]
 801bd22:	4426      	add	r6, r4
 801bd24:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801bd28:	f896 b001 	ldrb.w	fp, [r6, #1]
 801bd2c:	fb1b fb05 	smulbb	fp, fp, r5
 801bd30:	fb09 b90e 	mla	r9, r9, lr, fp
 801bd34:	fa1f f989 	uxth.w	r9, r9
 801bd38:	f109 0b01 	add.w	fp, r9, #1
 801bd3c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bd40:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bd44:	f886 9001 	strb.w	r9, [r6, #1]
 801bd48:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801bd4c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801bd50:	fb1a fa05 	smulbb	sl, sl, r5
 801bd54:	fb09 a90e 	mla	r9, r9, lr, sl
 801bd58:	fa1f f989 	uxth.w	r9, r9
 801bd5c:	f109 0a01 	add.w	sl, r9, #1
 801bd60:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801bd64:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bd68:	f886 9002 	strb.w	r9, [r6, #2]
 801bd6c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bd6e:	3701      	adds	r7, #1
 801bd70:	4430      	add	r0, r6
 801bd72:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801bd74:	4432      	add	r2, r6
 801bd76:	e767      	b.n	801bc48 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801bd78:	b003      	add	sp, #12
 801bd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bd7e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bd7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd82:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bd84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bd88:	9201      	str	r2, [sp, #4]
 801bd8a:	6868      	ldr	r0, [r5, #4]
 801bd8c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801bd8e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801bd92:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801bd96:	fb00 2404 	mla	r4, r0, r4, r2
 801bd9a:	682a      	ldr	r2, [r5, #0]
 801bd9c:	f8d7 8000 	ldr.w	r8, [r7]
 801bda0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bda4:	4414      	add	r4, r2
 801bda6:	2900      	cmp	r1, #0
 801bda8:	dc03      	bgt.n	801bdb2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801bdaa:	9a01      	ldr	r2, [sp, #4]
 801bdac:	2a00      	cmp	r2, #0
 801bdae:	f340 80af 	ble.w	801bf10 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801bdb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bdb4:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801bdb8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bdbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bdbe:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801bdc2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	dd0c      	ble.n	801bde4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bdca:	1405      	asrs	r5, r0, #16
 801bdcc:	d405      	bmi.n	801bdda <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801bdce:	4555      	cmp	r5, sl
 801bdd0:	da03      	bge.n	801bdda <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801bdd2:	1415      	asrs	r5, r2, #16
 801bdd4:	d401      	bmi.n	801bdda <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801bdd6:	454d      	cmp	r5, r9
 801bdd8:	db05      	blt.n	801bde6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bdda:	4470      	add	r0, lr
 801bddc:	4462      	add	r2, ip
 801bdde:	3b01      	subs	r3, #1
 801bde0:	3403      	adds	r4, #3
 801bde2:	e7f0      	b.n	801bdc6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801bde4:	d038      	beq.n	801be58 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801bde6:	1e5d      	subs	r5, r3, #1
 801bde8:	fb0e 0605 	mla	r6, lr, r5, r0
 801bdec:	1436      	asrs	r6, r6, #16
 801bdee:	d42a      	bmi.n	801be46 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801bdf0:	4556      	cmp	r6, sl
 801bdf2:	da28      	bge.n	801be46 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801bdf4:	fb0c 2505 	mla	r5, ip, r5, r2
 801bdf8:	142d      	asrs	r5, r5, #16
 801bdfa:	d424      	bmi.n	801be46 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801bdfc:	454d      	cmp	r5, r9
 801bdfe:	da22      	bge.n	801be46 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801be00:	1ce6      	adds	r6, r4, #3
 801be02:	4699      	mov	r9, r3
 801be04:	f1b9 0f00 	cmp.w	r9, #0
 801be08:	f106 0603 	add.w	r6, r6, #3
 801be0c:	dd1f      	ble.n	801be4e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801be0e:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801be12:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801be16:	1415      	asrs	r5, r2, #16
 801be18:	4470      	add	r0, lr
 801be1a:	4462      	add	r2, ip
 801be1c:	f109 39ff 	add.w	r9, r9, #4294967295
 801be20:	fb0b a505 	mla	r5, fp, r5, sl
 801be24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801be28:	eb08 0a05 	add.w	sl, r8, r5
 801be2c:	f818 5005 	ldrb.w	r5, [r8, r5]
 801be30:	f806 5c06 	strb.w	r5, [r6, #-6]
 801be34:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801be38:	f806 5c05 	strb.w	r5, [r6, #-5]
 801be3c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801be40:	f806 5c04 	strb.w	r5, [r6, #-4]
 801be44:	e7de      	b.n	801be04 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801be46:	2600      	movs	r6, #0
 801be48:	1b9d      	subs	r5, r3, r6
 801be4a:	2d00      	cmp	r5, #0
 801be4c:	dc38      	bgt.n	801bec0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801be4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801be52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801be56:	441c      	add	r4, r3
 801be58:	2900      	cmp	r1, #0
 801be5a:	dd59      	ble.n	801bf10 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801be5c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801be60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be62:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be66:	3901      	subs	r1, #1
 801be68:	eeb0 6a62 	vmov.f32	s12, s5
 801be6c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801be70:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be74:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be78:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801be7c:	eeb0 6a43 	vmov.f32	s12, s6
 801be80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be84:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801be88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801be8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801be90:	ee77 2a62 	vsub.f32	s5, s14, s5
 801be94:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801be98:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801be9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bea0:	ee12 2a90 	vmov	r2, s5
 801bea4:	eef0 2a47 	vmov.f32	s5, s14
 801bea8:	fb92 fef3 	sdiv	lr, r2, r3
 801beac:	ee13 2a10 	vmov	r2, s6
 801beb0:	eeb0 3a67 	vmov.f32	s6, s15
 801beb4:	fb92 fcf3 	sdiv	ip, r2, r3
 801beb8:	9a01      	ldr	r2, [sp, #4]
 801beba:	bf08      	it	eq
 801bebc:	4613      	moveq	r3, r2
 801bebe:	e772      	b.n	801bda6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801bec0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bec4:	d420      	bmi.n	801bf08 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801bec6:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801beca:	45cb      	cmp	fp, r9
 801becc:	dd1c      	ble.n	801bf08 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801bece:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801bed2:	d419      	bmi.n	801bf08 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801bed4:	68fd      	ldr	r5, [r7, #12]
 801bed6:	4555      	cmp	r5, sl
 801bed8:	dd16      	ble.n	801bf08 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801beda:	fa0f f58b 	sxth.w	r5, fp
 801bede:	fb0a 9505 	mla	r5, sl, r5, r9
 801bee2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bee6:	f818 9005 	ldrb.w	r9, [r8, r5]
 801beea:	eb08 0b05 	add.w	fp, r8, r5
 801beee:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801bef2:	f804 9005 	strb.w	r9, [r4, r5]
 801bef6:	4425      	add	r5, r4
 801bef8:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801befc:	f885 9001 	strb.w	r9, [r5, #1]
 801bf00:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801bf04:	f885 9002 	strb.w	r9, [r5, #2]
 801bf08:	4470      	add	r0, lr
 801bf0a:	4462      	add	r2, ip
 801bf0c:	3601      	adds	r6, #1
 801bf0e:	e79b      	b.n	801be48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801bf10:	b003      	add	sp, #12
 801bf12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bf16 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bf16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf1a:	b085      	sub	sp, #20
 801bf1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bf20:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bf22:	9202      	str	r2, [sp, #8]
 801bf24:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801bf28:	6860      	ldr	r0, [r4, #4]
 801bf2a:	9203      	str	r2, [sp, #12]
 801bf2c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801bf30:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801bf34:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801bf38:	fb00 2505 	mla	r5, r0, r5, r2
 801bf3c:	6822      	ldr	r2, [r4, #0]
 801bf3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bf42:	4415      	add	r5, r2
 801bf44:	f8dc 2000 	ldr.w	r2, [ip]
 801bf48:	9201      	str	r2, [sp, #4]
 801bf4a:	2900      	cmp	r1, #0
 801bf4c:	dc03      	bgt.n	801bf56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801bf4e:	9a02      	ldr	r2, [sp, #8]
 801bf50:	2a00      	cmp	r2, #0
 801bf52:	f340 8122 	ble.w	801c19a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801bf56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bf58:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bf5c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801bf60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bf62:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801bf66:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	dd0d      	ble.n	801bf8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801bf6e:	1422      	asrs	r2, r4, #16
 801bf70:	d405      	bmi.n	801bf7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bf72:	4542      	cmp	r2, r8
 801bf74:	da03      	bge.n	801bf7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bf76:	1402      	asrs	r2, r0, #16
 801bf78:	d401      	bmi.n	801bf7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bf7a:	42ba      	cmp	r2, r7
 801bf7c:	db06      	blt.n	801bf8c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bf7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bf80:	4474      	add	r4, lr
 801bf82:	3b01      	subs	r3, #1
 801bf84:	3503      	adds	r5, #3
 801bf86:	4410      	add	r0, r2
 801bf88:	e7ef      	b.n	801bf6a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801bf8a:	d072      	beq.n	801c072 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801bf8c:	1e5a      	subs	r2, r3, #1
 801bf8e:	fb0e 4602 	mla	r6, lr, r2, r4
 801bf92:	1436      	asrs	r6, r6, #16
 801bf94:	d462      	bmi.n	801c05c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801bf96:	4546      	cmp	r6, r8
 801bf98:	da60      	bge.n	801c05c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801bf9a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bf9c:	fb06 0202 	mla	r2, r6, r2, r0
 801bfa0:	1412      	asrs	r2, r2, #16
 801bfa2:	d45b      	bmi.n	801c05c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801bfa4:	42ba      	cmp	r2, r7
 801bfa6:	da59      	bge.n	801c05c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801bfa8:	1cef      	adds	r7, r5, #3
 801bfaa:	4699      	mov	r9, r3
 801bfac:	f1b9 0f00 	cmp.w	r9, #0
 801bfb0:	dd5a      	ble.n	801c068 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801bfb2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bfb6:	1426      	asrs	r6, r4, #16
 801bfb8:	1402      	asrs	r2, r0, #16
 801bfba:	fb08 6202 	mla	r2, r8, r2, r6
 801bfbe:	9e01      	ldr	r6, [sp, #4]
 801bfc0:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801bfc4:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801bfc8:	d041      	beq.n	801c04e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801bfca:	9a03      	ldr	r2, [sp, #12]
 801bfcc:	fa5f fb86 	uxtb.w	fp, r6
 801bfd0:	fb02 f808 	mul.w	r8, r2, r8
 801bfd4:	f108 0201 	add.w	r2, r8, #1
 801bfd8:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801bfdc:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801bfe0:	1212      	asrs	r2, r2, #8
 801bfe2:	fa1f fa82 	uxth.w	sl, r2
 801bfe6:	43d2      	mvns	r2, r2
 801bfe8:	fb1b fb0a 	smulbb	fp, fp, sl
 801bfec:	b2d2      	uxtb	r2, r2
 801bfee:	fb08 b802 	mla	r8, r8, r2, fp
 801bff2:	fa1f f888 	uxth.w	r8, r8
 801bff6:	f108 0b01 	add.w	fp, r8, #1
 801bffa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801bffe:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c002:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c006:	fb1b fb0a 	smulbb	fp, fp, sl
 801c00a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c00e:	fb16 fa0a 	smulbb	sl, r6, sl
 801c012:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c016:	f807 8c03 	strb.w	r8, [r7, #-3]
 801c01a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801c01e:	fb06 aa02 	mla	sl, r6, r2, sl
 801c022:	fb08 b802 	mla	r8, r8, r2, fp
 801c026:	fa1f fa8a 	uxth.w	sl, sl
 801c02a:	fa1f f888 	uxth.w	r8, r8
 801c02e:	f10a 0601 	add.w	r6, sl, #1
 801c032:	f108 0b01 	add.w	fp, r8, #1
 801c036:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c03a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c03e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c042:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c046:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c04a:	f807 8c02 	strb.w	r8, [r7, #-2]
 801c04e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c050:	4474      	add	r4, lr
 801c052:	3703      	adds	r7, #3
 801c054:	f109 39ff 	add.w	r9, r9, #4294967295
 801c058:	4410      	add	r0, r2
 801c05a:	e7a7      	b.n	801bfac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c05c:	f04f 0800 	mov.w	r8, #0
 801c060:	eba3 0208 	sub.w	r2, r3, r8
 801c064:	2a00      	cmp	r2, #0
 801c066:	dc3b      	bgt.n	801c0e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801c068:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c06c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c070:	441d      	add	r5, r3
 801c072:	2900      	cmp	r1, #0
 801c074:	f340 8091 	ble.w	801c19a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801c078:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c07c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c07e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c082:	3901      	subs	r1, #1
 801c084:	eeb0 6a62 	vmov.f32	s12, s5
 801c088:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c08c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c090:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c094:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c098:	eeb0 6a43 	vmov.f32	s12, s6
 801c09c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c0a0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c0a4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c0a8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c0ac:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c0b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c0b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c0b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c0bc:	ee12 2a90 	vmov	r2, s5
 801c0c0:	eef0 2a47 	vmov.f32	s5, s14
 801c0c4:	fb92 fef3 	sdiv	lr, r2, r3
 801c0c8:	ee13 2a10 	vmov	r2, s6
 801c0cc:	eeb0 3a67 	vmov.f32	s6, s15
 801c0d0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c0d4:	9a02      	ldr	r2, [sp, #8]
 801c0d6:	9312      	str	r3, [sp, #72]	; 0x48
 801c0d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c0da:	bf08      	it	eq
 801c0dc:	4613      	moveq	r3, r2
 801c0de:	e734      	b.n	801bf4a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c0e0:	1427      	asrs	r7, r4, #16
 801c0e2:	d454      	bmi.n	801c18e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c0e4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c0e8:	42be      	cmp	r6, r7
 801c0ea:	dd50      	ble.n	801c18e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c0ec:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c0f0:	d44d      	bmi.n	801c18e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c0f2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c0f6:	454a      	cmp	r2, r9
 801c0f8:	dd49      	ble.n	801c18e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c0fa:	b236      	sxth	r6, r6
 801c0fc:	9a01      	ldr	r2, [sp, #4]
 801c0fe:	fb09 7606 	mla	r6, r9, r6, r7
 801c102:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801c106:	0e3a      	lsrs	r2, r7, #24
 801c108:	d041      	beq.n	801c18e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c10a:	9e03      	ldr	r6, [sp, #12]
 801c10c:	fa5f fb87 	uxtb.w	fp, r7
 801c110:	4372      	muls	r2, r6
 801c112:	1c56      	adds	r6, r2, #1
 801c114:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c118:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801c11c:	1212      	asrs	r2, r2, #8
 801c11e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c122:	fa1f fa82 	uxth.w	sl, r2
 801c126:	43d2      	mvns	r2, r2
 801c128:	fb1b fb0a 	smulbb	fp, fp, sl
 801c12c:	b2d2      	uxtb	r2, r2
 801c12e:	fb09 b902 	mla	r9, r9, r2, fp
 801c132:	fa1f f989 	uxth.w	r9, r9
 801c136:	f109 0b01 	add.w	fp, r9, #1
 801c13a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c13e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c142:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c146:	fb1b fb0a 	smulbb	fp, fp, sl
 801c14a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c14e:	fb17 fa0a 	smulbb	sl, r7, sl
 801c152:	f805 9006 	strb.w	r9, [r5, r6]
 801c156:	442e      	add	r6, r5
 801c158:	78b7      	ldrb	r7, [r6, #2]
 801c15a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c15e:	fb07 aa02 	mla	sl, r7, r2, sl
 801c162:	fb09 b902 	mla	r9, r9, r2, fp
 801c166:	fa1f fa8a 	uxth.w	sl, sl
 801c16a:	fa1f f989 	uxth.w	r9, r9
 801c16e:	f10a 0701 	add.w	r7, sl, #1
 801c172:	f109 0b01 	add.w	fp, r9, #1
 801c176:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c17a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c17e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c182:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c186:	f886 a002 	strb.w	sl, [r6, #2]
 801c18a:	f886 9001 	strb.w	r9, [r6, #1]
 801c18e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c190:	4474      	add	r4, lr
 801c192:	f108 0801 	add.w	r8, r8, #1
 801c196:	4410      	add	r0, r2
 801c198:	e762      	b.n	801c060 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801c19a:	b005      	add	sp, #20
 801c19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c1a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c1a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1a4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c1a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c1aa:	9201      	str	r2, [sp, #4]
 801c1ac:	6860      	ldr	r0, [r4, #4]
 801c1ae:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801c1b2:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801c1b6:	fb00 2505 	mla	r5, r0, r5, r2
 801c1ba:	6822      	ldr	r2, [r4, #0]
 801c1bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c1c0:	4415      	add	r5, r2
 801c1c2:	f8dc 2000 	ldr.w	r2, [ip]
 801c1c6:	9200      	str	r2, [sp, #0]
 801c1c8:	2900      	cmp	r1, #0
 801c1ca:	dc03      	bgt.n	801c1d4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c1cc:	9a01      	ldr	r2, [sp, #4]
 801c1ce:	2a00      	cmp	r2, #0
 801c1d0:	f340 812b 	ble.w	801c42a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c1d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c1d6:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c1da:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c1de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c1e0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c1e4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	dd0e      	ble.n	801c20a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c1ec:	1422      	asrs	r2, r4, #16
 801c1ee:	d405      	bmi.n	801c1fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c1f0:	4572      	cmp	r2, lr
 801c1f2:	da03      	bge.n	801c1fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c1f4:	1402      	asrs	r2, r0, #16
 801c1f6:	d401      	bmi.n	801c1fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c1f8:	42ba      	cmp	r2, r7
 801c1fa:	db07      	blt.n	801c20c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c1fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c1fe:	3b01      	subs	r3, #1
 801c200:	3503      	adds	r5, #3
 801c202:	4414      	add	r4, r2
 801c204:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c206:	4410      	add	r0, r2
 801c208:	e7ee      	b.n	801c1e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c20a:	d06f      	beq.n	801c2ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c20c:	1e5a      	subs	r2, r3, #1
 801c20e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c210:	fb06 4602 	mla	r6, r6, r2, r4
 801c214:	1436      	asrs	r6, r6, #16
 801c216:	d45e      	bmi.n	801c2d6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c218:	4576      	cmp	r6, lr
 801c21a:	da5c      	bge.n	801c2d6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c21c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c21e:	fb06 0202 	mla	r2, r6, r2, r0
 801c222:	1412      	asrs	r2, r2, #16
 801c224:	d457      	bmi.n	801c2d6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c226:	42ba      	cmp	r2, r7
 801c228:	da55      	bge.n	801c2d6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c22a:	1cee      	adds	r6, r5, #3
 801c22c:	469a      	mov	sl, r3
 801c22e:	f1ba 0f00 	cmp.w	sl, #0
 801c232:	dd56      	ble.n	801c2e2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c234:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c238:	1427      	asrs	r7, r4, #16
 801c23a:	1402      	asrs	r2, r0, #16
 801c23c:	fb0e 7202 	mla	r2, lr, r2, r7
 801c240:	9f00      	ldr	r7, [sp, #0]
 801c242:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801c246:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801c24a:	d03c      	beq.n	801c2c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c24c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c250:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c254:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c258:	fa5f f28e 	uxtb.w	r2, lr
 801c25c:	b2ff      	uxtb	r7, r7
 801c25e:	f000 80dd 	beq.w	801c41c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c262:	fa1f f882 	uxth.w	r8, r2
 801c266:	43d2      	mvns	r2, r2
 801c268:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801c26c:	fb17 f708 	smulbb	r7, r7, r8
 801c270:	b2d2      	uxtb	r2, r2
 801c272:	fb19 f908 	smulbb	r9, r9, r8
 801c276:	fb0e 7702 	mla	r7, lr, r2, r7
 801c27a:	fb1b f808 	smulbb	r8, fp, r8
 801c27e:	b2bf      	uxth	r7, r7
 801c280:	f107 0e01 	add.w	lr, r7, #1
 801c284:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801c288:	123f      	asrs	r7, r7, #8
 801c28a:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c28e:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801c292:	fb07 9902 	mla	r9, r7, r2, r9
 801c296:	fa1f f989 	uxth.w	r9, r9
 801c29a:	f109 0701 	add.w	r7, r9, #1
 801c29e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c2a2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c2a6:	fb07 8802 	mla	r8, r7, r2, r8
 801c2aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c2ae:	fa1f f888 	uxth.w	r8, r8
 801c2b2:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c2b6:	f108 0201 	add.w	r2, r8, #1
 801c2ba:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c2be:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c2c2:	f806 8c01 	strb.w	r8, [r6, #-1]
 801c2c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c2c8:	3603      	adds	r6, #3
 801c2ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c2ce:	4414      	add	r4, r2
 801c2d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c2d2:	4410      	add	r0, r2
 801c2d4:	e7ab      	b.n	801c22e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c2d6:	f04f 0e00 	mov.w	lr, #0
 801c2da:	eba3 020e 	sub.w	r2, r3, lr
 801c2de:	2a00      	cmp	r2, #0
 801c2e0:	dc3d      	bgt.n	801c35e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801c2e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c2e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c2ea:	441d      	add	r5, r3
 801c2ec:	2900      	cmp	r1, #0
 801c2ee:	f340 809c 	ble.w	801c42a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c2f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c2f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c2f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c2fc:	3901      	subs	r1, #1
 801c2fe:	eeb0 6a62 	vmov.f32	s12, s5
 801c302:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c306:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c30a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c30e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c312:	eeb0 6a43 	vmov.f32	s12, s6
 801c316:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c31a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c31e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c322:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c326:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c32a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c32e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c332:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c336:	ee12 2a90 	vmov	r2, s5
 801c33a:	eef0 2a47 	vmov.f32	s5, s14
 801c33e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c342:	ee13 2a10 	vmov	r2, s6
 801c346:	930f      	str	r3, [sp, #60]	; 0x3c
 801c348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c34a:	eeb0 3a67 	vmov.f32	s6, s15
 801c34e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c352:	9a01      	ldr	r2, [sp, #4]
 801c354:	9310      	str	r3, [sp, #64]	; 0x40
 801c356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c358:	bf08      	it	eq
 801c35a:	4613      	moveq	r3, r2
 801c35c:	e734      	b.n	801c1c8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801c35e:	1427      	asrs	r7, r4, #16
 801c360:	d44d      	bmi.n	801c3fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c362:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c366:	42be      	cmp	r6, r7
 801c368:	dd49      	ble.n	801c3fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c36a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801c36e:	d446      	bmi.n	801c3fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c370:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c374:	4542      	cmp	r2, r8
 801c376:	dd42      	ble.n	801c3fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c378:	b236      	sxth	r6, r6
 801c37a:	9a00      	ldr	r2, [sp, #0]
 801c37c:	fb08 7606 	mla	r6, r8, r6, r7
 801c380:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801c384:	0e3a      	lsrs	r2, r7, #24
 801c386:	d03a      	beq.n	801c3fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c388:	2aff      	cmp	r2, #255	; 0xff
 801c38a:	b2d6      	uxtb	r6, r2
 801c38c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c390:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c394:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801c398:	b2ff      	uxtb	r7, r7
 801c39a:	d037      	beq.n	801c40c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801c39c:	fa1f f986 	uxth.w	r9, r6
 801c3a0:	4472      	add	r2, lr
 801c3a2:	43f6      	mvns	r6, r6
 801c3a4:	f815 8002 	ldrb.w	r8, [r5, r2]
 801c3a8:	fb17 f709 	smulbb	r7, r7, r9
 801c3ac:	fb1a fa09 	smulbb	sl, sl, r9
 801c3b0:	b2f6      	uxtb	r6, r6
 801c3b2:	fb1b f909 	smulbb	r9, fp, r9
 801c3b6:	fb08 7706 	mla	r7, r8, r6, r7
 801c3ba:	b2bf      	uxth	r7, r7
 801c3bc:	f107 0801 	add.w	r8, r7, #1
 801c3c0:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801c3c4:	123f      	asrs	r7, r7, #8
 801c3c6:	54af      	strb	r7, [r5, r2]
 801c3c8:	442a      	add	r2, r5
 801c3ca:	7857      	ldrb	r7, [r2, #1]
 801c3cc:	fb07 aa06 	mla	sl, r7, r6, sl
 801c3d0:	fa1f fa8a 	uxth.w	sl, sl
 801c3d4:	f10a 0701 	add.w	r7, sl, #1
 801c3d8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c3dc:	7897      	ldrb	r7, [r2, #2]
 801c3de:	fb07 9906 	mla	r9, r7, r6, r9
 801c3e2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c3e6:	fa1f f989 	uxth.w	r9, r9
 801c3ea:	f882 a001 	strb.w	sl, [r2, #1]
 801c3ee:	f109 0601 	add.w	r6, r9, #1
 801c3f2:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801c3f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c3fa:	f882 9002 	strb.w	r9, [r2, #2]
 801c3fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c400:	f10e 0e01 	add.w	lr, lr, #1
 801c404:	4414      	add	r4, r2
 801c406:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c408:	4410      	add	r0, r2
 801c40a:	e766      	b.n	801c2da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c40c:	4472      	add	r2, lr
 801c40e:	54af      	strb	r7, [r5, r2]
 801c410:	442a      	add	r2, r5
 801c412:	f882 a001 	strb.w	sl, [r2, #1]
 801c416:	f882 b002 	strb.w	fp, [r2, #2]
 801c41a:	e7f0      	b.n	801c3fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c41c:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c420:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c424:	f806 bc01 	strb.w	fp, [r6, #-1]
 801c428:	e74d      	b.n	801c2c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c42a:	b003      	add	sp, #12
 801c42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c430 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c434:	b087      	sub	sp, #28
 801c436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c43a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c43c:	9204      	str	r2, [sp, #16]
 801c43e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c442:	6860      	ldr	r0, [r4, #4]
 801c444:	9205      	str	r2, [sp, #20]
 801c446:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801c44a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801c44e:	9101      	str	r1, [sp, #4]
 801c450:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c454:	fb00 2505 	mla	r5, r0, r5, r2
 801c458:	6822      	ldr	r2, [r4, #0]
 801c45a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c45e:	4415      	add	r5, r2
 801c460:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c464:	3201      	adds	r2, #1
 801c466:	f022 0201 	bic.w	r2, r2, #1
 801c46a:	9202      	str	r2, [sp, #8]
 801c46c:	f8dc 2000 	ldr.w	r2, [ip]
 801c470:	9203      	str	r2, [sp, #12]
 801c472:	9a01      	ldr	r2, [sp, #4]
 801c474:	2a00      	cmp	r2, #0
 801c476:	dc03      	bgt.n	801c480 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c478:	9a04      	ldr	r2, [sp, #16]
 801c47a:	2a00      	cmp	r2, #0
 801c47c:	f340 8135 	ble.w	801c6ea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c480:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c482:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c486:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c48a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c48c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c490:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c494:	2b00      	cmp	r3, #0
 801c496:	dd0d      	ble.n	801c4b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c498:	1422      	asrs	r2, r4, #16
 801c49a:	d405      	bmi.n	801c4a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c49c:	4542      	cmp	r2, r8
 801c49e:	da03      	bge.n	801c4a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c4a0:	1402      	asrs	r2, r0, #16
 801c4a2:	d401      	bmi.n	801c4a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c4a4:	42ba      	cmp	r2, r7
 801c4a6:	db06      	blt.n	801c4b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c4a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c4aa:	4474      	add	r4, lr
 801c4ac:	3b01      	subs	r3, #1
 801c4ae:	3503      	adds	r5, #3
 801c4b0:	4410      	add	r0, r2
 801c4b2:	e7ef      	b.n	801c494 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c4b4:	d077      	beq.n	801c5a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801c4b6:	1e5a      	subs	r2, r3, #1
 801c4b8:	fb0e 4602 	mla	r6, lr, r2, r4
 801c4bc:	1436      	asrs	r6, r6, #16
 801c4be:	d469      	bmi.n	801c594 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c4c0:	4546      	cmp	r6, r8
 801c4c2:	da67      	bge.n	801c594 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c4c4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c4c6:	fb06 0202 	mla	r2, r6, r2, r0
 801c4ca:	1412      	asrs	r2, r2, #16
 801c4cc:	d462      	bmi.n	801c594 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c4ce:	42ba      	cmp	r2, r7
 801c4d0:	da60      	bge.n	801c594 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c4d2:	1cee      	adds	r6, r5, #3
 801c4d4:	4699      	mov	r9, r3
 801c4d6:	f1b9 0f00 	cmp.w	r9, #0
 801c4da:	dd5f      	ble.n	801c59c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801c4dc:	1422      	asrs	r2, r4, #16
 801c4de:	9902      	ldr	r1, [sp, #8]
 801c4e0:	1407      	asrs	r7, r0, #16
 801c4e2:	fb01 2707 	mla	r7, r1, r7, r2
 801c4e6:	9903      	ldr	r1, [sp, #12]
 801c4e8:	087a      	lsrs	r2, r7, #1
 801c4ea:	5c8a      	ldrb	r2, [r1, r2]
 801c4ec:	07f9      	lsls	r1, r7, #31
 801c4ee:	bf54      	ite	pl
 801c4f0:	f002 020f 	andpl.w	r2, r2, #15
 801c4f4:	1112      	asrmi	r2, r2, #4
 801c4f6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c4fa:	b2d2      	uxtb	r2, r2
 801c4fc:	2a00      	cmp	r2, #0
 801c4fe:	d042      	beq.n	801c586 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c500:	497b      	ldr	r1, [pc, #492]	; (801c6f0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801c502:	680f      	ldr	r7, [r1, #0]
 801c504:	9905      	ldr	r1, [sp, #20]
 801c506:	fa5f fb87 	uxtb.w	fp, r7
 801c50a:	434a      	muls	r2, r1
 801c50c:	f102 0801 	add.w	r8, r2, #1
 801c510:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801c514:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801c518:	1212      	asrs	r2, r2, #8
 801c51a:	fa1f fa82 	uxth.w	sl, r2
 801c51e:	43d2      	mvns	r2, r2
 801c520:	fb1b fb0a 	smulbb	fp, fp, sl
 801c524:	b2d2      	uxtb	r2, r2
 801c526:	fb08 b802 	mla	r8, r8, r2, fp
 801c52a:	fa1f f888 	uxth.w	r8, r8
 801c52e:	f108 0b01 	add.w	fp, r8, #1
 801c532:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c536:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c53a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c53e:	fb1b fb0a 	smulbb	fp, fp, sl
 801c542:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c546:	fb17 fa0a 	smulbb	sl, r7, sl
 801c54a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c54e:	f806 8c03 	strb.w	r8, [r6, #-3]
 801c552:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801c556:	fb07 aa02 	mla	sl, r7, r2, sl
 801c55a:	fb08 b802 	mla	r8, r8, r2, fp
 801c55e:	fa1f fa8a 	uxth.w	sl, sl
 801c562:	fa1f f888 	uxth.w	r8, r8
 801c566:	f10a 0701 	add.w	r7, sl, #1
 801c56a:	f108 0b01 	add.w	fp, r8, #1
 801c56e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c572:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c576:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c57a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c57e:	f806 ac01 	strb.w	sl, [r6, #-1]
 801c582:	f806 8c02 	strb.w	r8, [r6, #-2]
 801c586:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c588:	4474      	add	r4, lr
 801c58a:	3603      	adds	r6, #3
 801c58c:	f109 39ff 	add.w	r9, r9, #4294967295
 801c590:	4410      	add	r0, r2
 801c592:	e7a0      	b.n	801c4d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c594:	2700      	movs	r7, #0
 801c596:	1bda      	subs	r2, r3, r7
 801c598:	2a00      	cmp	r2, #0
 801c59a:	dc3e      	bgt.n	801c61a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801c59c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c5a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c5a4:	441d      	add	r5, r3
 801c5a6:	9b01      	ldr	r3, [sp, #4]
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	f340 809e 	ble.w	801c6ea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c5ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c5b8:	eeb0 6a62 	vmov.f32	s12, s5
 801c5bc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c5c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c5c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5c8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c5cc:	eeb0 6a43 	vmov.f32	s12, s6
 801c5d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5d4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c5d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c5dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c5e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c5e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c5e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c5ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c5f0:	ee12 2a90 	vmov	r2, s5
 801c5f4:	eef0 2a47 	vmov.f32	s5, s14
 801c5f8:	fb92 fef3 	sdiv	lr, r2, r3
 801c5fc:	ee13 2a10 	vmov	r2, s6
 801c600:	eeb0 3a67 	vmov.f32	s6, s15
 801c604:	fb92 f3f3 	sdiv	r3, r2, r3
 801c608:	9314      	str	r3, [sp, #80]	; 0x50
 801c60a:	9b01      	ldr	r3, [sp, #4]
 801c60c:	9a04      	ldr	r2, [sp, #16]
 801c60e:	3b01      	subs	r3, #1
 801c610:	9301      	str	r3, [sp, #4]
 801c612:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c614:	bf08      	it	eq
 801c616:	4613      	moveq	r3, r2
 801c618:	e72b      	b.n	801c472 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c61a:	1426      	asrs	r6, r4, #16
 801c61c:	d460      	bmi.n	801c6e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c61e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c622:	42b2      	cmp	r2, r6
 801c624:	dd5c      	ble.n	801c6e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c626:	ea5f 4820 	movs.w	r8, r0, asr #16
 801c62a:	d459      	bmi.n	801c6e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c62c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c630:	4542      	cmp	r2, r8
 801c632:	dd55      	ble.n	801c6e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c634:	9a02      	ldr	r2, [sp, #8]
 801c636:	9903      	ldr	r1, [sp, #12]
 801c638:	fb08 6602 	mla	r6, r8, r2, r6
 801c63c:	0872      	lsrs	r2, r6, #1
 801c63e:	07f6      	lsls	r6, r6, #31
 801c640:	5c8a      	ldrb	r2, [r1, r2]
 801c642:	bf54      	ite	pl
 801c644:	f002 020f 	andpl.w	r2, r2, #15
 801c648:	1112      	asrmi	r2, r2, #4
 801c64a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c64e:	b2d2      	uxtb	r2, r2
 801c650:	2a00      	cmp	r2, #0
 801c652:	d045      	beq.n	801c6e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c654:	4926      	ldr	r1, [pc, #152]	; (801c6f0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801c656:	f8d1 8000 	ldr.w	r8, [r1]
 801c65a:	9905      	ldr	r1, [sp, #20]
 801c65c:	fa5f fb88 	uxtb.w	fp, r8
 801c660:	434a      	muls	r2, r1
 801c662:	1c56      	adds	r6, r2, #1
 801c664:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c668:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c66c:	1212      	asrs	r2, r2, #8
 801c66e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c672:	fa1f fa82 	uxth.w	sl, r2
 801c676:	43d2      	mvns	r2, r2
 801c678:	fb1b fb0a 	smulbb	fp, fp, sl
 801c67c:	b2d2      	uxtb	r2, r2
 801c67e:	fb09 b902 	mla	r9, r9, r2, fp
 801c682:	fa1f f989 	uxth.w	r9, r9
 801c686:	f109 0b01 	add.w	fp, r9, #1
 801c68a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c68e:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801c692:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801c696:	fb1b fb0a 	smulbb	fp, fp, sl
 801c69a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c69e:	fb18 fa0a 	smulbb	sl, r8, sl
 801c6a2:	f805 9006 	strb.w	r9, [r5, r6]
 801c6a6:	442e      	add	r6, r5
 801c6a8:	f896 8002 	ldrb.w	r8, [r6, #2]
 801c6ac:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c6b0:	fb08 aa02 	mla	sl, r8, r2, sl
 801c6b4:	fb09 b902 	mla	r9, r9, r2, fp
 801c6b8:	fa1f fa8a 	uxth.w	sl, sl
 801c6bc:	fa1f f989 	uxth.w	r9, r9
 801c6c0:	f10a 0801 	add.w	r8, sl, #1
 801c6c4:	f109 0b01 	add.w	fp, r9, #1
 801c6c8:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801c6cc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c6d0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c6d4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c6d8:	f886 a002 	strb.w	sl, [r6, #2]
 801c6dc:	f886 9001 	strb.w	r9, [r6, #1]
 801c6e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c6e2:	4474      	add	r4, lr
 801c6e4:	3701      	adds	r7, #1
 801c6e6:	4410      	add	r0, r2
 801c6e8:	e755      	b.n	801c596 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801c6ea:	b007      	add	sp, #28
 801c6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6f0:	20056708 	.word	0x20056708

0801c6f4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6f8:	b085      	sub	sp, #20
 801c6fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c6fe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c700:	9203      	str	r2, [sp, #12]
 801c702:	6860      	ldr	r0, [r4, #4]
 801c704:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c708:	9100      	str	r1, [sp, #0]
 801c70a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801c70e:	fb00 2606 	mla	r6, r0, r6, r2
 801c712:	6822      	ldr	r2, [r4, #0]
 801c714:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c718:	4416      	add	r6, r2
 801c71a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c71e:	3201      	adds	r2, #1
 801c720:	f022 0201 	bic.w	r2, r2, #1
 801c724:	9201      	str	r2, [sp, #4]
 801c726:	f8dc 2000 	ldr.w	r2, [ip]
 801c72a:	9202      	str	r2, [sp, #8]
 801c72c:	9a00      	ldr	r2, [sp, #0]
 801c72e:	2a00      	cmp	r2, #0
 801c730:	dc03      	bgt.n	801c73a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801c732:	9a03      	ldr	r2, [sp, #12]
 801c734:	2a00      	cmp	r2, #0
 801c736:	f340 8140 	ble.w	801c9ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801c73a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c73c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c740:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801c744:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c746:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c74a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c74e:	2b00      	cmp	r3, #0
 801c750:	dd0e      	ble.n	801c770 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c752:	142a      	asrs	r2, r5, #16
 801c754:	d405      	bmi.n	801c762 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c756:	4572      	cmp	r2, lr
 801c758:	da03      	bge.n	801c762 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c75a:	1422      	asrs	r2, r4, #16
 801c75c:	d401      	bmi.n	801c762 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c75e:	42ba      	cmp	r2, r7
 801c760:	db07      	blt.n	801c772 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c762:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c764:	3b01      	subs	r3, #1
 801c766:	3603      	adds	r6, #3
 801c768:	4415      	add	r5, r2
 801c76a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c76c:	4414      	add	r4, r2
 801c76e:	e7ee      	b.n	801c74e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c770:	d072      	beq.n	801c858 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c772:	1e5a      	subs	r2, r3, #1
 801c774:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c776:	fb00 5002 	mla	r0, r0, r2, r5
 801c77a:	1400      	asrs	r0, r0, #16
 801c77c:	d463      	bmi.n	801c846 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c77e:	4570      	cmp	r0, lr
 801c780:	da61      	bge.n	801c846 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c782:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c784:	fb00 4202 	mla	r2, r0, r2, r4
 801c788:	1412      	asrs	r2, r2, #16
 801c78a:	d45c      	bmi.n	801c846 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c78c:	42ba      	cmp	r2, r7
 801c78e:	da5a      	bge.n	801c846 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c790:	1cf0      	adds	r0, r6, #3
 801c792:	469a      	mov	sl, r3
 801c794:	f1ba 0f00 	cmp.w	sl, #0
 801c798:	dd59      	ble.n	801c84e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801c79a:	142a      	asrs	r2, r5, #16
 801c79c:	9901      	ldr	r1, [sp, #4]
 801c79e:	1427      	asrs	r7, r4, #16
 801c7a0:	fb01 2707 	mla	r7, r1, r7, r2
 801c7a4:	9902      	ldr	r1, [sp, #8]
 801c7a6:	087a      	lsrs	r2, r7, #1
 801c7a8:	5c8a      	ldrb	r2, [r1, r2]
 801c7aa:	07f9      	lsls	r1, r7, #31
 801c7ac:	bf54      	ite	pl
 801c7ae:	f002 020f 	andpl.w	r2, r2, #15
 801c7b2:	1112      	asrmi	r2, r2, #4
 801c7b4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c7b8:	b2d2      	uxtb	r2, r2
 801c7ba:	2a00      	cmp	r2, #0
 801c7bc:	d03b      	beq.n	801c836 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c7be:	4980      	ldr	r1, [pc, #512]	; (801c9c0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801c7c0:	2aff      	cmp	r2, #255	; 0xff
 801c7c2:	680f      	ldr	r7, [r1, #0]
 801c7c4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c7c8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c7cc:	b2ff      	uxtb	r7, r7
 801c7ce:	f000 80ed 	beq.w	801c9ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801c7d2:	fa1f f882 	uxth.w	r8, r2
 801c7d6:	43d2      	mvns	r2, r2
 801c7d8:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801c7dc:	fb17 f708 	smulbb	r7, r7, r8
 801c7e0:	b2d2      	uxtb	r2, r2
 801c7e2:	fb19 f908 	smulbb	r9, r9, r8
 801c7e6:	fb0e 7702 	mla	r7, lr, r2, r7
 801c7ea:	fb1b f808 	smulbb	r8, fp, r8
 801c7ee:	b2bf      	uxth	r7, r7
 801c7f0:	f107 0e01 	add.w	lr, r7, #1
 801c7f4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801c7f8:	123f      	asrs	r7, r7, #8
 801c7fa:	f800 7c03 	strb.w	r7, [r0, #-3]
 801c7fe:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801c802:	fb07 9902 	mla	r9, r7, r2, r9
 801c806:	fa1f f989 	uxth.w	r9, r9
 801c80a:	f109 0701 	add.w	r7, r9, #1
 801c80e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c812:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801c816:	fb07 8802 	mla	r8, r7, r2, r8
 801c81a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c81e:	fa1f f888 	uxth.w	r8, r8
 801c822:	f800 9c02 	strb.w	r9, [r0, #-2]
 801c826:	f108 0201 	add.w	r2, r8, #1
 801c82a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c82e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c832:	f800 8c01 	strb.w	r8, [r0, #-1]
 801c836:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c838:	3003      	adds	r0, #3
 801c83a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c83e:	4415      	add	r5, r2
 801c840:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c842:	4414      	add	r4, r2
 801c844:	e7a6      	b.n	801c794 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c846:	2700      	movs	r7, #0
 801c848:	1bda      	subs	r2, r3, r7
 801c84a:	2a00      	cmp	r2, #0
 801c84c:	dc40      	bgt.n	801c8d0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801c84e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c852:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c856:	441e      	add	r6, r3
 801c858:	9b00      	ldr	r3, [sp, #0]
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	f340 80ad 	ble.w	801c9ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801c860:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c866:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c86a:	eeb0 6a62 	vmov.f32	s12, s5
 801c86e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c872:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c876:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c87a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c87e:	eeb0 6a43 	vmov.f32	s12, s6
 801c882:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c886:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c88a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c88e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c892:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c896:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c89a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c89e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c8a2:	ee12 2a90 	vmov	r2, s5
 801c8a6:	eef0 2a47 	vmov.f32	s5, s14
 801c8aa:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8ae:	ee13 2a10 	vmov	r2, s6
 801c8b2:	9311      	str	r3, [sp, #68]	; 0x44
 801c8b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8b6:	eeb0 3a67 	vmov.f32	s6, s15
 801c8ba:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8be:	9312      	str	r3, [sp, #72]	; 0x48
 801c8c0:	9b00      	ldr	r3, [sp, #0]
 801c8c2:	9a03      	ldr	r2, [sp, #12]
 801c8c4:	3b01      	subs	r3, #1
 801c8c6:	9300      	str	r3, [sp, #0]
 801c8c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8ca:	bf08      	it	eq
 801c8cc:	4613      	moveq	r3, r2
 801c8ce:	e72d      	b.n	801c72c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c8d0:	1428      	asrs	r0, r5, #16
 801c8d2:	d45c      	bmi.n	801c98e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c8d4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c8d8:	4282      	cmp	r2, r0
 801c8da:	dd58      	ble.n	801c98e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c8dc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801c8e0:	d455      	bmi.n	801c98e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c8e2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c8e6:	4572      	cmp	r2, lr
 801c8e8:	dd51      	ble.n	801c98e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c8ea:	9a01      	ldr	r2, [sp, #4]
 801c8ec:	9902      	ldr	r1, [sp, #8]
 801c8ee:	fb0e 0002 	mla	r0, lr, r2, r0
 801c8f2:	0842      	lsrs	r2, r0, #1
 801c8f4:	07c0      	lsls	r0, r0, #31
 801c8f6:	5c8a      	ldrb	r2, [r1, r2]
 801c8f8:	bf54      	ite	pl
 801c8fa:	f002 020f 	andpl.w	r2, r2, #15
 801c8fe:	1112      	asrmi	r2, r2, #4
 801c900:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c904:	b2d2      	uxtb	r2, r2
 801c906:	2a00      	cmp	r2, #0
 801c908:	d041      	beq.n	801c98e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c90a:	492d      	ldr	r1, [pc, #180]	; (801c9c0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801c90c:	2aff      	cmp	r2, #255	; 0xff
 801c90e:	6808      	ldr	r0, [r1, #0]
 801c910:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801c914:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c918:	fa5f fe80 	uxtb.w	lr, r0
 801c91c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801c920:	d03b      	beq.n	801c99a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801c922:	fa1f f982 	uxth.w	r9, r2
 801c926:	4438      	add	r0, r7
 801c928:	43d2      	mvns	r2, r2
 801c92a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801c92e:	fb1e fe09 	smulbb	lr, lr, r9
 801c932:	fb1a fa09 	smulbb	sl, sl, r9
 801c936:	b2d2      	uxtb	r2, r2
 801c938:	fb1b f909 	smulbb	r9, fp, r9
 801c93c:	fb08 ee02 	mla	lr, r8, r2, lr
 801c940:	fa1f fe8e 	uxth.w	lr, lr
 801c944:	f10e 0801 	add.w	r8, lr, #1
 801c948:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801c94c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c950:	f806 e000 	strb.w	lr, [r6, r0]
 801c954:	4430      	add	r0, r6
 801c956:	f890 e001 	ldrb.w	lr, [r0, #1]
 801c95a:	fb0e aa02 	mla	sl, lr, r2, sl
 801c95e:	fa1f fa8a 	uxth.w	sl, sl
 801c962:	f10a 0e01 	add.w	lr, sl, #1
 801c966:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801c96a:	f890 e002 	ldrb.w	lr, [r0, #2]
 801c96e:	fb0e 9902 	mla	r9, lr, r2, r9
 801c972:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c976:	fa1f f989 	uxth.w	r9, r9
 801c97a:	f880 a001 	strb.w	sl, [r0, #1]
 801c97e:	f109 0201 	add.w	r2, r9, #1
 801c982:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801c986:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c98a:	f880 9002 	strb.w	r9, [r0, #2]
 801c98e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c990:	3701      	adds	r7, #1
 801c992:	4415      	add	r5, r2
 801c994:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c996:	4414      	add	r4, r2
 801c998:	e756      	b.n	801c848 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c99a:	4438      	add	r0, r7
 801c99c:	f806 e000 	strb.w	lr, [r6, r0]
 801c9a0:	4430      	add	r0, r6
 801c9a2:	f880 a001 	strb.w	sl, [r0, #1]
 801c9a6:	f880 b002 	strb.w	fp, [r0, #2]
 801c9aa:	e7f0      	b.n	801c98e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c9ac:	f800 7c03 	strb.w	r7, [r0, #-3]
 801c9b0:	f800 9c02 	strb.w	r9, [r0, #-2]
 801c9b4:	f800 bc01 	strb.w	fp, [r0, #-1]
 801c9b8:	e73d      	b.n	801c836 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c9ba:	b005      	add	sp, #20
 801c9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9c0:	20056708 	.word	0x20056708

0801c9c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801c9c4:	4770      	bx	lr

0801c9c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801c9c6:	4770      	bx	lr

0801c9c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801c9c8:	4770      	bx	lr

0801c9ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801c9ca:	4770      	bx	lr

0801c9cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c9cc:	4770      	bx	lr

0801c9ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c9ce:	4770      	bx	lr

0801c9d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c9d0:	4770      	bx	lr

0801c9d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c9d2:	4770      	bx	lr

0801c9d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c9d4:	4770      	bx	lr

0801c9d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c9d6:	4770      	bx	lr

0801c9d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c9d8:	4770      	bx	lr

0801c9da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c9da:	4770      	bx	lr

0801c9dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c9dc:	4770      	bx	lr

0801c9de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c9de:	4770      	bx	lr

0801c9e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c9e0:	4770      	bx	lr

0801c9e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c9e2:	4770      	bx	lr

0801c9e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c9e4:	4770      	bx	lr

0801c9e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c9e6:	4770      	bx	lr

0801c9e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c9e8:	4770      	bx	lr

0801c9ea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c9ea:	4770      	bx	lr

0801c9ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801c9ec:	2bff      	cmp	r3, #255	; 0xff
 801c9ee:	b508      	push	{r3, lr}
 801c9f0:	d04f      	beq.n	801ca92 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801c9f2:	2a2c      	cmp	r2, #44	; 0x2c
 801c9f4:	d032      	beq.n	801ca5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801c9f6:	d80f      	bhi.n	801ca18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801c9f8:	2a08      	cmp	r2, #8
 801c9fa:	d046      	beq.n	801ca8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801c9fc:	d805      	bhi.n	801ca0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801c9fe:	2a04      	cmp	r2, #4
 801ca00:	d041      	beq.n	801ca86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ca02:	2a05      	cmp	r2, #5
 801ca04:	d03d      	beq.n	801ca82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801ca06:	2000      	movs	r0, #0
 801ca08:	e027      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ca0a:	2a0a      	cmp	r2, #10
 801ca0c:	d03d      	beq.n	801ca8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ca0e:	d301      	bcc.n	801ca14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ca10:	2a0b      	cmp	r2, #11
 801ca12:	d1f8      	bne.n	801ca06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ca14:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801ca16:	e020      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ca18:	2a30      	cmp	r2, #48	; 0x30
 801ca1a:	d038      	beq.n	801ca8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ca1c:	d808      	bhi.n	801ca30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801ca1e:	2a2e      	cmp	r2, #46	; 0x2e
 801ca20:	684b      	ldr	r3, [r1, #4]
 801ca22:	d029      	beq.n	801ca78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801ca24:	d90b      	bls.n	801ca3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801ca26:	781b      	ldrb	r3, [r3, #0]
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	d1ec      	bne.n	801ca06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ca2c:	6a00      	ldr	r0, [r0, #32]
 801ca2e:	e014      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ca30:	2a32      	cmp	r2, #50	; 0x32
 801ca32:	d02c      	beq.n	801ca8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ca34:	d301      	bcc.n	801ca3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801ca36:	2a33      	cmp	r2, #51	; 0x33
 801ca38:	d1e5      	bne.n	801ca06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ca3a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801ca3c:	e00d      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ca3e:	781b      	ldrb	r3, [r3, #0]
 801ca40:	2b01      	cmp	r3, #1
 801ca42:	d009      	beq.n	801ca58 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801ca44:	d3f2      	bcc.n	801ca2c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801ca46:	2b02      	cmp	r3, #2
 801ca48:	d1dd      	bne.n	801ca06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ca4a:	4b39      	ldr	r3, [pc, #228]	; (801cb30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ca4c:	f240 4186 	movw	r1, #1158	; 0x486
 801ca50:	4a38      	ldr	r2, [pc, #224]	; (801cb34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ca52:	4839      	ldr	r0, [pc, #228]	; (801cb38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801ca54:	f008 f9d6 	bl	8024e04 <__assert_func>
 801ca58:	6900      	ldr	r0, [r0, #16]
 801ca5a:	bd08      	pop	{r3, pc}
 801ca5c:	684b      	ldr	r3, [r1, #4]
 801ca5e:	781b      	ldrb	r3, [r3, #0]
 801ca60:	2b01      	cmp	r3, #1
 801ca62:	d007      	beq.n	801ca74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801ca64:	d30b      	bcc.n	801ca7e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801ca66:	2b02      	cmp	r3, #2
 801ca68:	d1cd      	bne.n	801ca06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ca6a:	4b31      	ldr	r3, [pc, #196]	; (801cb30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ca6c:	f240 4192 	movw	r1, #1170	; 0x492
 801ca70:	4a30      	ldr	r2, [pc, #192]	; (801cb34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ca72:	e7ee      	b.n	801ca52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ca74:	6880      	ldr	r0, [r0, #8]
 801ca76:	e7f0      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ca78:	781b      	ldrb	r3, [r3, #0]
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d1c3      	bne.n	801ca06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ca7e:	6980      	ldr	r0, [r0, #24]
 801ca80:	e7eb      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ca82:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801ca84:	e7e9      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ca86:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801ca88:	e7e7      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ca8a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801ca8c:	e7e5      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ca8e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801ca90:	e7e3      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ca92:	2a2c      	cmp	r2, #44	; 0x2c
 801ca94:	d030      	beq.n	801caf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801ca96:	d80f      	bhi.n	801cab8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801ca98:	2a08      	cmp	r2, #8
 801ca9a:	d044      	beq.n	801cb26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801ca9c:	d805      	bhi.n	801caaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801ca9e:	2a04      	cmp	r2, #4
 801caa0:	d03f      	beq.n	801cb22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801caa2:	2a05      	cmp	r2, #5
 801caa4:	d1af      	bne.n	801ca06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801caa6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801caa8:	e7d7      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801caaa:	2a0a      	cmp	r2, #10
 801caac:	d03b      	beq.n	801cb26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801caae:	d301      	bcc.n	801cab4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801cab0:	2a0b      	cmp	r2, #11
 801cab2:	d1a8      	bne.n	801ca06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cab4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801cab6:	e7d0      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cab8:	2a30      	cmp	r2, #48	; 0x30
 801caba:	d036      	beq.n	801cb2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801cabc:	d808      	bhi.n	801cad0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801cabe:	2a2e      	cmp	r2, #46	; 0x2e
 801cac0:	684b      	ldr	r3, [r1, #4]
 801cac2:	d028      	beq.n	801cb16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801cac4:	d90b      	bls.n	801cade <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801cac6:	781b      	ldrb	r3, [r3, #0]
 801cac8:	2b00      	cmp	r3, #0
 801caca:	d19c      	bne.n	801ca06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cacc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801cace:	e7c4      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cad0:	2a32      	cmp	r2, #50	; 0x32
 801cad2:	d02a      	beq.n	801cb2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801cad4:	d301      	bcc.n	801cada <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801cad6:	2a33      	cmp	r2, #51	; 0x33
 801cad8:	d195      	bne.n	801ca06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cada:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801cadc:	e7bd      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cade:	781b      	ldrb	r3, [r3, #0]
 801cae0:	2b01      	cmp	r3, #1
 801cae2:	d007      	beq.n	801caf4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801cae4:	d3f2      	bcc.n	801cacc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801cae6:	2b02      	cmp	r3, #2
 801cae8:	d18d      	bne.n	801ca06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801caea:	4b11      	ldr	r3, [pc, #68]	; (801cb30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801caec:	f240 41c3 	movw	r1, #1219	; 0x4c3
 801caf0:	4a10      	ldr	r2, [pc, #64]	; (801cb34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801caf2:	e7ae      	b.n	801ca52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801caf4:	6940      	ldr	r0, [r0, #20]
 801caf6:	e7b0      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801caf8:	684b      	ldr	r3, [r1, #4]
 801cafa:	781b      	ldrb	r3, [r3, #0]
 801cafc:	2b01      	cmp	r3, #1
 801cafe:	d008      	beq.n	801cb12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801cb00:	d30d      	bcc.n	801cb1e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801cb02:	2b02      	cmp	r3, #2
 801cb04:	f47f af7f 	bne.w	801ca06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cb08:	4b09      	ldr	r3, [pc, #36]	; (801cb30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801cb0a:	f240 41cf 	movw	r1, #1231	; 0x4cf
 801cb0e:	4a09      	ldr	r2, [pc, #36]	; (801cb34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801cb10:	e79f      	b.n	801ca52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801cb12:	68c0      	ldr	r0, [r0, #12]
 801cb14:	e7a1      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cb16:	781b      	ldrb	r3, [r3, #0]
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	f47f af74 	bne.w	801ca06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cb1e:	69c0      	ldr	r0, [r0, #28]
 801cb20:	e79b      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cb22:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801cb24:	e799      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cb26:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801cb28:	e797      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cb2a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801cb2c:	e795      	b.n	801ca5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cb2e:	bf00      	nop
 801cb30:	0802cc0d 	.word	0x0802cc0d
 801cb34:	0802d430 	.word	0x0802d430
 801cb38:	0802cc59 	.word	0x0802cc59

0801cb3c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801cb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb40:	b085      	sub	sp, #20
 801cb42:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
 801cb46:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cb48:	f1be 0f00 	cmp.w	lr, #0
 801cb4c:	f000 8114 	beq.w	801cd78 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801cb50:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 801cb54:	f1bc 0f00 	cmp.w	ip, #0
 801cb58:	f340 810e 	ble.w	801cd78 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801cb5c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801cb60:	2800      	cmp	r0, #0
 801cb62:	f340 8109 	ble.w	801cd78 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801cb66:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 801cb6a:	4350      	muls	r0, r2
 801cb6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cb70:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801cb74:	ea4f 2a14 	mov.w	sl, r4, lsr #8
 801cb78:	eba2 060c 	sub.w	r6, r2, ip
 801cb7c:	fb02 3305 	mla	r3, r2, r5, r3
 801cb80:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cb84:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801cb88:	fa5f f88b 	uxtb.w	r8, fp
 801cb8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb90:	fa5f f78a 	uxtb.w	r7, sl
 801cb94:	4419      	add	r1, r3
 801cb96:	fa5f f984 	uxtb.w	r9, r4
 801cb9a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cb9e:	4408      	add	r0, r1
 801cba0:	ea4f 034c 	mov.w	r3, ip, lsl #1
 801cba4:	d03e      	beq.n	801cc24 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 801cba6:	fa1f f58e 	uxth.w	r5, lr
 801cbaa:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
 801cbae:	4463      	add	r3, ip
 801cbb0:	fb08 f405 	mul.w	r4, r8, r5
 801cbb4:	b292      	uxth	r2, r2
 801cbb6:	436f      	muls	r7, r5
 801cbb8:	fb09 f505 	mul.w	r5, r9, r5
 801cbbc:	4281      	cmp	r1, r0
 801cbbe:	f080 80db 	bcs.w	801cd78 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801cbc2:	eb01 0c03 	add.w	ip, r1, r3
 801cbc6:	458c      	cmp	ip, r1
 801cbc8:	f101 0e03 	add.w	lr, r1, #3
 801cbcc:	d928      	bls.n	801cc20 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801cbce:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801cbd2:	fb11 f102 	smulbb	r1, r1, r2
 801cbd6:	4429      	add	r1, r5
 801cbd8:	b289      	uxth	r1, r1
 801cbda:	f101 0801 	add.w	r8, r1, #1
 801cbde:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801cbe2:	1209      	asrs	r1, r1, #8
 801cbe4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801cbe8:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801cbec:	fb11 f102 	smulbb	r1, r1, r2
 801cbf0:	4439      	add	r1, r7
 801cbf2:	b289      	uxth	r1, r1
 801cbf4:	f101 0801 	add.w	r8, r1, #1
 801cbf8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801cbfc:	1209      	asrs	r1, r1, #8
 801cbfe:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801cc02:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801cc06:	fb11 f102 	smulbb	r1, r1, r2
 801cc0a:	4421      	add	r1, r4
 801cc0c:	b289      	uxth	r1, r1
 801cc0e:	f101 0801 	add.w	r8, r1, #1
 801cc12:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801cc16:	1209      	asrs	r1, r1, #8
 801cc18:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801cc1c:	4671      	mov	r1, lr
 801cc1e:	e7d2      	b.n	801cbc6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8a>
 801cc20:	4431      	add	r1, r6
 801cc22:	e7cb      	b.n	801cbbc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x80>
 801cc24:	f012 0503 	ands.w	r5, r2, #3
 801cc28:	d00f      	beq.n	801cc4a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10e>
 801cc2a:	4463      	add	r3, ip
 801cc2c:	4281      	cmp	r1, r0
 801cc2e:	f080 80a3 	bcs.w	801cd78 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801cc32:	18ca      	adds	r2, r1, r3
 801cc34:	4291      	cmp	r1, r2
 801cc36:	f080 809d 	bcs.w	801cd74 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x238>
 801cc3a:	f881 9000 	strb.w	r9, [r1]
 801cc3e:	3103      	adds	r1, #3
 801cc40:	f801 7c02 	strb.w	r7, [r1, #-2]
 801cc44:	f801 8c01 	strb.w	r8, [r1, #-1]
 801cc48:	e7f4      	b.n	801cc34 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801cc4a:	f001 0603 	and.w	r6, r1, #3
 801cc4e:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 801cc52:	ea49 2a0a 	orr.w	sl, r9, sl, lsl #8
 801cc56:	4463      	add	r3, ip
 801cc58:	2e02      	cmp	r6, #2
 801cc5a:	b2bf      	uxth	r7, r7
 801cc5c:	fa1f fa8a 	uxth.w	sl, sl
 801cc60:	d017      	beq.n	801cc92 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801cc62:	2e03      	cmp	r6, #3
 801cc64:	d00c      	beq.n	801cc80 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801cc66:	2e01      	cmp	r6, #1
 801cc68:	d11f      	bne.n	801ccaa <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801cc6a:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801cc6e:	460d      	mov	r5, r1
 801cc70:	4285      	cmp	r5, r0
 801cc72:	d230      	bcs.n	801ccd6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x19a>
 801cc74:	f885 9000 	strb.w	r9, [r5]
 801cc78:	f8a5 7001 	strh.w	r7, [r5, #1]
 801cc7c:	4435      	add	r5, r6
 801cc7e:	e7f7      	b.n	801cc70 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>
 801cc80:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801cc84:	460d      	mov	r5, r1
 801cc86:	4285      	cmp	r5, r0
 801cc88:	d20c      	bcs.n	801cca4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801cc8a:	f885 9000 	strb.w	r9, [r5]
 801cc8e:	4435      	add	r5, r6
 801cc90:	e7f9      	b.n	801cc86 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801cc92:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801cc96:	460d      	mov	r5, r1
 801cc98:	4285      	cmp	r5, r0
 801cc9a:	d218      	bcs.n	801ccce <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x192>
 801cc9c:	f8a5 a000 	strh.w	sl, [r5]
 801cca0:	4435      	add	r5, r6
 801cca2:	e7f9      	b.n	801cc98 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15c>
 801cca4:	3b01      	subs	r3, #1
 801cca6:	3101      	adds	r1, #1
 801cca8:	2501      	movs	r5, #1
 801ccaa:	f003 0603 	and.w	r6, r3, #3
 801ccae:	2e02      	cmp	r6, #2
 801ccb0:	d021      	beq.n	801ccf6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1ba>
 801ccb2:	2e03      	cmp	r6, #3
 801ccb4:	d013      	beq.n	801ccde <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1a2>
 801ccb6:	2e01      	cmp	r6, #1
 801ccb8:	d126      	bne.n	801cd08 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801ccba:	3b01      	subs	r3, #1
 801ccbc:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 801ccc0:	18ce      	adds	r6, r1, r3
 801ccc2:	4286      	cmp	r6, r0
 801ccc4:	d220      	bcs.n	801cd08 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801ccc6:	f886 8000 	strb.w	r8, [r6]
 801ccca:	443e      	add	r6, r7
 801cccc:	e7f9      	b.n	801ccc2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x186>
 801ccce:	3b02      	subs	r3, #2
 801ccd0:	3102      	adds	r1, #2
 801ccd2:	2502      	movs	r5, #2
 801ccd4:	e7e9      	b.n	801ccaa <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801ccd6:	3b03      	subs	r3, #3
 801ccd8:	3103      	adds	r1, #3
 801ccda:	2500      	movs	r5, #0
 801ccdc:	e7e5      	b.n	801ccaa <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801ccde:	3b03      	subs	r3, #3
 801cce0:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 801cce4:	18ce      	adds	r6, r1, r3
 801cce6:	4286      	cmp	r6, r0
 801cce8:	d20e      	bcs.n	801cd08 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801ccea:	f8a6 a000 	strh.w	sl, [r6]
 801ccee:	f886 8002 	strb.w	r8, [r6, #2]
 801ccf2:	443e      	add	r6, r7
 801ccf4:	e7f7      	b.n	801cce6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1aa>
 801ccf6:	3b02      	subs	r3, #2
 801ccf8:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801ccfc:	18ce      	adds	r6, r1, r3
 801ccfe:	4286      	cmp	r6, r0
 801cd00:	d202      	bcs.n	801cd08 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801cd02:	8037      	strh	r7, [r6, #0]
 801cd04:	4466      	add	r6, ip
 801cd06:	e7fa      	b.n	801ccfe <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1c2>
 801cd08:	079e      	lsls	r6, r3, #30
 801cd0a:	d006      	beq.n	801cd1a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1de>
 801cd0c:	4b1c      	ldr	r3, [pc, #112]	; (801cd80 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x244>)
 801cd0e:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 801cd12:	4a1c      	ldr	r2, [pc, #112]	; (801cd84 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x248>)
 801cd14:	481c      	ldr	r0, [pc, #112]	; (801cd88 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x24c>)
 801cd16:	f008 f875 	bl	8024e04 <__assert_func>
 801cd1a:	b36b      	cbz	r3, 801cd78 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801cd1c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 801cd20:	109b      	asrs	r3, r3, #2
 801cd22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cd26:	2703      	movs	r7, #3
 801cd28:	ea44 6604 	orr.w	r6, r4, r4, lsl #24
 801cd2c:	9601      	str	r6, [sp, #4]
 801cd2e:	0426      	lsls	r6, r4, #16
 801cd30:	ea46 2614 	orr.w	r6, r6, r4, lsr #8
 801cd34:	ea48 2404 	orr.w	r4, r8, r4, lsl #8
 801cd38:	9602      	str	r6, [sp, #8]
 801cd3a:	009e      	lsls	r6, r3, #2
 801cd3c:	ebc3 0392 	rsb	r3, r3, r2, lsr #2
 801cd40:	9403      	str	r4, [sp, #12]
 801cd42:	009b      	lsls	r3, r3, #2
 801cd44:	4281      	cmp	r1, r0
 801cd46:	d217      	bcs.n	801cd78 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801cd48:	eb01 0c06 	add.w	ip, r1, r6
 801cd4c:	462a      	mov	r2, r5
 801cd4e:	4561      	cmp	r1, ip
 801cd50:	d20e      	bcs.n	801cd70 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x234>
 801cd52:	f10d 0e10 	add.w	lr, sp, #16
 801cd56:	1c54      	adds	r4, r2, #1
 801cd58:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 801cd5c:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 801cd60:	f841 2b04 	str.w	r2, [r1], #4
 801cd64:	fb94 f2f7 	sdiv	r2, r4, r7
 801cd68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cd6c:	1aa2      	subs	r2, r4, r2
 801cd6e:	e7ee      	b.n	801cd4e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x212>
 801cd70:	4419      	add	r1, r3
 801cd72:	e7e7      	b.n	801cd44 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x208>
 801cd74:	4431      	add	r1, r6
 801cd76:	e759      	b.n	801cc2c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf0>
 801cd78:	b005      	add	sp, #20
 801cd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd7e:	bf00      	nop
 801cd80:	0802cb29 	.word	0x0802cb29
 801cd84:	0802d17a 	.word	0x0802d17a
 801cd88:	0802cc59 	.word	0x0802cc59

0801cd8c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801cd8c:	b508      	push	{r3, lr}
 801cd8e:	4b06      	ldr	r3, [pc, #24]	; (801cda8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801cd90:	8818      	ldrh	r0, [r3, #0]
 801cd92:	b928      	cbnz	r0, 801cda0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801cd94:	4b05      	ldr	r3, [pc, #20]	; (801cdac <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801cd96:	214d      	movs	r1, #77	; 0x4d
 801cd98:	4a05      	ldr	r2, [pc, #20]	; (801cdb0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801cd9a:	4806      	ldr	r0, [pc, #24]	; (801cdb4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801cd9c:	f008 f832 	bl	8024e04 <__assert_func>
 801cda0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cda4:	b280      	uxth	r0, r0
 801cda6:	bd08      	pop	{r3, pc}
 801cda8:	200566da 	.word	0x200566da
 801cdac:	0802cea6 	.word	0x0802cea6
 801cdb0:	0802d3f5 	.word	0x0802d3f5
 801cdb4:	0802cee8 	.word	0x0802cee8

0801cdb8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801cdb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cdbc:	b08b      	sub	sp, #44	; 0x2c
 801cdbe:	460d      	mov	r5, r1
 801cdc0:	4616      	mov	r6, r2
 801cdc2:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801cdc6:	f1b8 0f00 	cmp.w	r8, #0
 801cdca:	d045      	beq.n	801ce58 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801cdcc:	6810      	ldr	r0, [r2, #0]
 801cdce:	ac06      	add	r4, sp, #24
 801cdd0:	6851      	ldr	r1, [r2, #4]
 801cdd2:	4f50      	ldr	r7, [pc, #320]	; (801cf14 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x15c>)
 801cdd4:	c403      	stmia	r4!, {r0, r1}
 801cdd6:	6818      	ldr	r0, [r3, #0]
 801cdd8:	ac08      	add	r4, sp, #32
 801cdda:	6859      	ldr	r1, [r3, #4]
 801cddc:	c403      	stmia	r4!, {r0, r1}
 801cdde:	a806      	add	r0, sp, #24
 801cde0:	f7fa fe62 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cde4:	4631      	mov	r1, r6
 801cde6:	a808      	add	r0, sp, #32
 801cde8:	f7fa fe46 	bl	8017a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cdec:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801cdf0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801cdf4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801cdf8:	6838      	ldr	r0, [r7, #0]
 801cdfa:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cdfe:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801ce02:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801ce06:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ce0a:	440d      	add	r5, r1
 801ce0c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801ce10:	440a      	add	r2, r1
 801ce12:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ce16:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ce1a:	4413      	add	r3, r2
 801ce1c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ce20:	6803      	ldr	r3, [r0, #0]
 801ce22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ce24:	4798      	blx	r3
 801ce26:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ce2a:	d018      	beq.n	801ce5e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801ce2c:	f010 0f04 	tst.w	r0, #4
 801ce30:	6838      	ldr	r0, [r7, #0]
 801ce32:	d017      	beq.n	801ce64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ce34:	2700      	movs	r7, #0
 801ce36:	6801      	ldr	r1, [r0, #0]
 801ce38:	b2a4      	uxth	r4, r4
 801ce3a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ce3e:	b2b6      	uxth	r6, r6
 801ce40:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ce44:	9401      	str	r4, [sp, #4]
 801ce46:	9600      	str	r6, [sp, #0]
 801ce48:	e9cd 8703 	strd	r8, r7, [sp, #12]
 801ce4c:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 801ce50:	9702      	str	r7, [sp, #8]
 801ce52:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 801ce54:	4629      	mov	r1, r5
 801ce56:	47a0      	blx	r4
 801ce58:	b00b      	add	sp, #44	; 0x2c
 801ce5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ce5e:	f010 0f01 	tst.w	r0, #1
 801ce62:	e7e5      	b.n	801ce30 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801ce64:	6803      	ldr	r3, [r0, #0]
 801ce66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce68:	4798      	blx	r3
 801ce6a:	4a2b      	ldr	r2, [pc, #172]	; (801cf18 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801ce6c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801ce70:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ce74:	8813      	ldrh	r3, [r2, #0]
 801ce76:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801ce7a:	fb03 f404 	mul.w	r4, r3, r4
 801ce7e:	fb03 c101 	mla	r1, r3, r1, ip
 801ce82:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ce86:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ce8a:	4408      	add	r0, r1
 801ce8c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801ce90:	4404      	add	r4, r0
 801ce92:	d02e      	beq.n	801cef2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13a>
 801ce94:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801ce98:	1b9b      	subs	r3, r3, r6
 801ce9a:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801ce9e:	1b96      	subs	r6, r2, r6
 801cea0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cea4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cea8:	42a0      	cmp	r0, r4
 801ceaa:	d22d      	bcs.n	801cf08 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801ceac:	eb00 0e01 	add.w	lr, r0, r1
 801ceb0:	4570      	cmp	r0, lr
 801ceb2:	d210      	bcs.n	801ced6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801ceb4:	f890 9000 	ldrb.w	r9, [r0]
 801ceb8:	f815 2b01 	ldrb.w	r2, [r5], #1
 801cebc:	fb19 f90c 	smulbb	r9, r9, ip
 801cec0:	fb02 9208 	mla	r2, r2, r8, r9
 801cec4:	b292      	uxth	r2, r2
 801cec6:	f102 0901 	add.w	r9, r2, #1
 801ceca:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801cece:	1212      	asrs	r2, r2, #8
 801ced0:	f800 2b01 	strb.w	r2, [r0], #1
 801ced4:	e7ec      	b.n	801ceb0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf8>
 801ced6:	4418      	add	r0, r3
 801ced8:	4435      	add	r5, r6
 801ceda:	e7e5      	b.n	801cea8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf0>
 801cedc:	8813      	ldrh	r3, [r2, #0]
 801cede:	1b9b      	subs	r3, r3, r6
 801cee0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cee4:	4418      	add	r0, r3
 801cee6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ceea:	1b9b      	subs	r3, r3, r6
 801ceec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cef0:	441d      	add	r5, r3
 801cef2:	42a0      	cmp	r0, r4
 801cef4:	d208      	bcs.n	801cf08 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801cef6:	eb00 0c01 	add.w	ip, r0, r1
 801cefa:	4560      	cmp	r0, ip
 801cefc:	d2ee      	bcs.n	801cedc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x124>
 801cefe:	f815 3b01 	ldrb.w	r3, [r5], #1
 801cf02:	f800 3b01 	strb.w	r3, [r0], #1
 801cf06:	e7f8      	b.n	801cefa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x142>
 801cf08:	6838      	ldr	r0, [r7, #0]
 801cf0a:	6803      	ldr	r3, [r0, #0]
 801cf0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf0e:	4798      	blx	r3
 801cf10:	e7a2      	b.n	801ce58 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801cf12:	bf00      	nop
 801cf14:	200566e0 	.word	0x200566e0
 801cf18:	200566da 	.word	0x200566da

0801cf1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801cf1c:	b510      	push	{r4, lr}
 801cf1e:	4604      	mov	r4, r0
 801cf20:	2104      	movs	r1, #4
 801cf22:	f007 fef8 	bl	8024d16 <_ZdlPvj>
 801cf26:	4620      	mov	r0, r4
 801cf28:	bd10      	pop	{r4, pc}

0801cf2a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801cf2a:	b510      	push	{r4, lr}
 801cf2c:	4604      	mov	r4, r0
 801cf2e:	2104      	movs	r1, #4
 801cf30:	f007 fef1 	bl	8024d16 <_ZdlPvj>
 801cf34:	4620      	mov	r0, r4
 801cf36:	bd10      	pop	{r4, pc}

0801cf38 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801cf38:	b510      	push	{r4, lr}
 801cf3a:	4604      	mov	r4, r0
 801cf3c:	2104      	movs	r1, #4
 801cf3e:	f007 feea 	bl	8024d16 <_ZdlPvj>
 801cf42:	4620      	mov	r0, r4
 801cf44:	bd10      	pop	{r4, pc}

0801cf46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801cf46:	b510      	push	{r4, lr}
 801cf48:	4604      	mov	r4, r0
 801cf4a:	2104      	movs	r1, #4
 801cf4c:	f007 fee3 	bl	8024d16 <_ZdlPvj>
 801cf50:	4620      	mov	r0, r4
 801cf52:	bd10      	pop	{r4, pc}

0801cf54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cf54:	b510      	push	{r4, lr}
 801cf56:	4604      	mov	r4, r0
 801cf58:	2104      	movs	r1, #4
 801cf5a:	f007 fedc 	bl	8024d16 <_ZdlPvj>
 801cf5e:	4620      	mov	r0, r4
 801cf60:	bd10      	pop	{r4, pc}

0801cf62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cf62:	b510      	push	{r4, lr}
 801cf64:	4604      	mov	r4, r0
 801cf66:	2104      	movs	r1, #4
 801cf68:	f007 fed5 	bl	8024d16 <_ZdlPvj>
 801cf6c:	4620      	mov	r0, r4
 801cf6e:	bd10      	pop	{r4, pc}

0801cf70 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cf70:	b510      	push	{r4, lr}
 801cf72:	4604      	mov	r4, r0
 801cf74:	2104      	movs	r1, #4
 801cf76:	f007 fece 	bl	8024d16 <_ZdlPvj>
 801cf7a:	4620      	mov	r0, r4
 801cf7c:	bd10      	pop	{r4, pc}

0801cf7e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cf7e:	b510      	push	{r4, lr}
 801cf80:	4604      	mov	r4, r0
 801cf82:	2104      	movs	r1, #4
 801cf84:	f007 fec7 	bl	8024d16 <_ZdlPvj>
 801cf88:	4620      	mov	r0, r4
 801cf8a:	bd10      	pop	{r4, pc}

0801cf8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801cf8c:	b510      	push	{r4, lr}
 801cf8e:	4604      	mov	r4, r0
 801cf90:	2104      	movs	r1, #4
 801cf92:	f007 fec0 	bl	8024d16 <_ZdlPvj>
 801cf96:	4620      	mov	r0, r4
 801cf98:	bd10      	pop	{r4, pc}

0801cf9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801cf9a:	b510      	push	{r4, lr}
 801cf9c:	4604      	mov	r4, r0
 801cf9e:	2104      	movs	r1, #4
 801cfa0:	f007 feb9 	bl	8024d16 <_ZdlPvj>
 801cfa4:	4620      	mov	r0, r4
 801cfa6:	bd10      	pop	{r4, pc}

0801cfa8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801cfa8:	b510      	push	{r4, lr}
 801cfaa:	4604      	mov	r4, r0
 801cfac:	2104      	movs	r1, #4
 801cfae:	f007 feb2 	bl	8024d16 <_ZdlPvj>
 801cfb2:	4620      	mov	r0, r4
 801cfb4:	bd10      	pop	{r4, pc}

0801cfb6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801cfb6:	b510      	push	{r4, lr}
 801cfb8:	4604      	mov	r4, r0
 801cfba:	2104      	movs	r1, #4
 801cfbc:	f007 feab 	bl	8024d16 <_ZdlPvj>
 801cfc0:	4620      	mov	r0, r4
 801cfc2:	bd10      	pop	{r4, pc}

0801cfc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cfc4:	b510      	push	{r4, lr}
 801cfc6:	4604      	mov	r4, r0
 801cfc8:	2104      	movs	r1, #4
 801cfca:	f007 fea4 	bl	8024d16 <_ZdlPvj>
 801cfce:	4620      	mov	r0, r4
 801cfd0:	bd10      	pop	{r4, pc}

0801cfd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cfd2:	b510      	push	{r4, lr}
 801cfd4:	4604      	mov	r4, r0
 801cfd6:	2104      	movs	r1, #4
 801cfd8:	f007 fe9d 	bl	8024d16 <_ZdlPvj>
 801cfdc:	4620      	mov	r0, r4
 801cfde:	bd10      	pop	{r4, pc}

0801cfe0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cfe0:	b510      	push	{r4, lr}
 801cfe2:	4604      	mov	r4, r0
 801cfe4:	2104      	movs	r1, #4
 801cfe6:	f007 fe96 	bl	8024d16 <_ZdlPvj>
 801cfea:	4620      	mov	r0, r4
 801cfec:	bd10      	pop	{r4, pc}

0801cfee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cfee:	b510      	push	{r4, lr}
 801cff0:	4604      	mov	r4, r0
 801cff2:	2104      	movs	r1, #4
 801cff4:	f007 fe8f 	bl	8024d16 <_ZdlPvj>
 801cff8:	4620      	mov	r0, r4
 801cffa:	bd10      	pop	{r4, pc}

0801cffc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801cffc:	b510      	push	{r4, lr}
 801cffe:	4604      	mov	r4, r0
 801d000:	2104      	movs	r1, #4
 801d002:	f007 fe88 	bl	8024d16 <_ZdlPvj>
 801d006:	4620      	mov	r0, r4
 801d008:	bd10      	pop	{r4, pc}

0801d00a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801d00a:	b510      	push	{r4, lr}
 801d00c:	4604      	mov	r4, r0
 801d00e:	2104      	movs	r1, #4
 801d010:	f007 fe81 	bl	8024d16 <_ZdlPvj>
 801d014:	4620      	mov	r0, r4
 801d016:	bd10      	pop	{r4, pc}

0801d018 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801d018:	b510      	push	{r4, lr}
 801d01a:	4604      	mov	r4, r0
 801d01c:	2104      	movs	r1, #4
 801d01e:	f007 fe7a 	bl	8024d16 <_ZdlPvj>
 801d022:	4620      	mov	r0, r4
 801d024:	bd10      	pop	{r4, pc}

0801d026 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801d026:	b510      	push	{r4, lr}
 801d028:	4604      	mov	r4, r0
 801d02a:	2104      	movs	r1, #4
 801d02c:	f007 fe73 	bl	8024d16 <_ZdlPvj>
 801d030:	4620      	mov	r0, r4
 801d032:	bd10      	pop	{r4, pc}

0801d034 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d034:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d036:	4606      	mov	r6, r0
 801d038:	b087      	sub	sp, #28
 801d03a:	4615      	mov	r5, r2
 801d03c:	461f      	mov	r7, r3
 801d03e:	b343      	cbz	r3, 801d092 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801d040:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d044:	2b00      	cmp	r3, #0
 801d046:	dd24      	ble.n	801d092 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801d048:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d04c:	2b00      	cmp	r3, #0
 801d04e:	dd20      	ble.n	801d092 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801d050:	6808      	ldr	r0, [r1, #0]
 801d052:	aa04      	add	r2, sp, #16
 801d054:	6849      	ldr	r1, [r1, #4]
 801d056:	4c1a      	ldr	r4, [pc, #104]	; (801d0c0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801d058:	c203      	stmia	r2!, {r0, r1}
 801d05a:	a804      	add	r0, sp, #16
 801d05c:	f7fa fd24 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d060:	6820      	ldr	r0, [r4, #0]
 801d062:	6803      	ldr	r3, [r0, #0]
 801d064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d066:	4798      	blx	r3
 801d068:	2fff      	cmp	r7, #255	; 0xff
 801d06a:	d014      	beq.n	801d096 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d06c:	f010 0f08 	tst.w	r0, #8
 801d070:	6820      	ldr	r0, [r4, #0]
 801d072:	d013      	beq.n	801d09c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801d074:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801d078:	6801      	ldr	r1, [r0, #0]
 801d07a:	9401      	str	r4, [sp, #4]
 801d07c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801d080:	9702      	str	r7, [sp, #8]
 801d082:	9400      	str	r4, [sp, #0]
 801d084:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d088:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 801d08a:	4629      	mov	r1, r5
 801d08c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d090:	47a0      	blx	r4
 801d092:	b007      	add	sp, #28
 801d094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d096:	f010 0f02 	tst.w	r0, #2
 801d09a:	e7e9      	b.n	801d070 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801d09c:	6803      	ldr	r3, [r0, #0]
 801d09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0a0:	4798      	blx	r3
 801d0a2:	4b08      	ldr	r3, [pc, #32]	; (801d0c4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801d0a4:	4601      	mov	r1, r0
 801d0a6:	4630      	mov	r0, r6
 801d0a8:	881a      	ldrh	r2, [r3, #0]
 801d0aa:	6833      	ldr	r3, [r6, #0]
 801d0ac:	e9cd 5700 	strd	r5, r7, [sp]
 801d0b0:	69dd      	ldr	r5, [r3, #28]
 801d0b2:	ab04      	add	r3, sp, #16
 801d0b4:	47a8      	blx	r5
 801d0b6:	6820      	ldr	r0, [r4, #0]
 801d0b8:	6803      	ldr	r3, [r0, #0]
 801d0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d0bc:	4798      	blx	r3
 801d0be:	e7e8      	b.n	801d092 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801d0c0:	200566e0 	.word	0x200566e0
 801d0c4:	200566da 	.word	0x200566da

0801d0c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801d0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0cc:	4db4      	ldr	r5, [pc, #720]	; (801d3a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 801d0ce:	4690      	mov	r8, r2
 801d0d0:	b08d      	sub	sp, #52	; 0x34
 801d0d2:	4604      	mov	r4, r0
 801d0d4:	682a      	ldr	r2, [r5, #0]
 801d0d6:	4689      	mov	r9, r1
 801d0d8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801d0dc:	2a02      	cmp	r2, #2
 801d0de:	d106      	bne.n	801d0ee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801d0e0:	4bb0      	ldr	r3, [pc, #704]	; (801d3a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 801d0e2:	f240 11ed 	movw	r1, #493	; 0x1ed
 801d0e6:	4ab0      	ldr	r2, [pc, #704]	; (801d3a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801d0e8:	48b0      	ldr	r0, [pc, #704]	; (801d3ac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 801d0ea:	f007 fe8b 	bl	8024e04 <__assert_func>
 801d0ee:	ae0c      	add	r6, sp, #48	; 0x30
 801d0f0:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 801d0f4:	4630      	mov	r0, r6
 801d0f6:	f7fe f815 	bl	801b124 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d0fa:	6823      	ldr	r3, [r4, #0]
 801d0fc:	4607      	mov	r7, r0
 801d0fe:	4620      	mov	r0, r4
 801d100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d102:	4798      	blx	r3
 801d104:	4287      	cmp	r7, r0
 801d106:	d004      	beq.n	801d112 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801d108:	4ba9      	ldr	r3, [pc, #676]	; (801d3b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 801d10a:	f240 11ef 	movw	r1, #495	; 0x1ef
 801d10e:	4aa6      	ldr	r2, [pc, #664]	; (801d3a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801d110:	e7ea      	b.n	801d0e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d112:	4630      	mov	r0, r6
 801d114:	f7fd ff7c 	bl	801b010 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d118:	4607      	mov	r7, r0
 801d11a:	b920      	cbnz	r0, 801d126 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801d11c:	4ba5      	ldr	r3, [pc, #660]	; (801d3b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 801d11e:	f240 11f1 	movw	r1, #497	; 0x1f1
 801d122:	4aa1      	ldr	r2, [pc, #644]	; (801d3a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801d124:	e7e0      	b.n	801d0e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d126:	f8d8 0000 	ldr.w	r0, [r8]
 801d12a:	ab06      	add	r3, sp, #24
 801d12c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d130:	f9b8 a000 	ldrsh.w	sl, [r8]
 801d134:	c303      	stmia	r3!, {r0, r1}
 801d136:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d13a:	ab08      	add	r3, sp, #32
 801d13c:	f8d9 0000 	ldr.w	r0, [r9]
 801d140:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801d144:	c303      	stmia	r3!, {r0, r1}
 801d146:	4630      	mov	r0, r6
 801d148:	f7fd feee 	bl	801af28 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d14c:	4680      	mov	r8, r0
 801d14e:	4630      	mov	r0, r6
 801d150:	f7fd ff24 	bl	801af9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d154:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801d158:	f10d 0920 	add.w	r9, sp, #32
 801d15c:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801d160:	a806      	add	r0, sp, #24
 801d162:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801d166:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801d16a:	f7fa fc9d 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d16e:	4648      	mov	r0, r9
 801d170:	f7fa fc9a 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d174:	a80a      	add	r0, sp, #40	; 0x28
 801d176:	f7fa fc97 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d17a:	4b8f      	ldr	r3, [pc, #572]	; (801d3b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801d17c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d180:	881e      	ldrh	r6, [r3, #0]
 801d182:	4b8e      	ldr	r3, [pc, #568]	; (801d3bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801d184:	fa0f fb86 	sxth.w	fp, r6
 801d188:	8819      	ldrh	r1, [r3, #0]
 801d18a:	4593      	cmp	fp, r2
 801d18c:	dd75      	ble.n	801d27a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801d18e:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 801d192:	4494      	add	ip, r2
 801d194:	fa1f fc8c 	uxth.w	ip, ip
 801d198:	fa0f fa8c 	sxth.w	sl, ip
 801d19c:	f1ba 0f00 	cmp.w	sl, #0
 801d1a0:	dd6b      	ble.n	801d27a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801d1a2:	fa0f f881 	sxth.w	r8, r1
 801d1a6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801d1aa:	4598      	cmp	r8, r3
 801d1ac:	dd65      	ble.n	801d27a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801d1ae:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 801d1b2:	4418      	add	r0, r3
 801d1b4:	b280      	uxth	r0, r0
 801d1b6:	fa0f fe80 	sxth.w	lr, r0
 801d1ba:	f1be 0f00 	cmp.w	lr, #0
 801d1be:	dd5c      	ble.n	801d27a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801d1c0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801d1c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d1c8:	45d3      	cmp	fp, sl
 801d1ca:	bfc8      	it	gt
 801d1cc:	4666      	movgt	r6, ip
 801d1ce:	45f0      	cmp	r8, lr
 801d1d0:	bfc8      	it	gt
 801d1d2:	4601      	movgt	r1, r0
 801d1d4:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d1d8:	1ab6      	subs	r6, r6, r2
 801d1da:	1ac9      	subs	r1, r1, r3
 801d1dc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801d1e0:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801d1e4:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801d1e8:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801d1ec:	f1bc 0f00 	cmp.w	ip, #0
 801d1f0:	f340 80aa 	ble.w	801d348 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801d1f4:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801d1f8:	2e00      	cmp	r6, #0
 801d1fa:	f340 80a5 	ble.w	801d348 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801d1fe:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801d202:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801d206:	4288      	cmp	r0, r1
 801d208:	db3b      	blt.n	801d282 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801d20a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801d20e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801d212:	429a      	cmp	r2, r3
 801d214:	db35      	blt.n	801d282 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801d216:	4460      	add	r0, ip
 801d218:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801d21c:	4461      	add	r1, ip
 801d21e:	b200      	sxth	r0, r0
 801d220:	b209      	sxth	r1, r1
 801d222:	4288      	cmp	r0, r1
 801d224:	dc2d      	bgt.n	801d282 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801d226:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801d22a:	4432      	add	r2, r6
 801d22c:	440b      	add	r3, r1
 801d22e:	b212      	sxth	r2, r2
 801d230:	b21b      	sxth	r3, r3
 801d232:	429a      	cmp	r2, r3
 801d234:	dc25      	bgt.n	801d282 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801d236:	6823      	ldr	r3, [r4, #0]
 801d238:	4620      	mov	r0, r4
 801d23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d23c:	4798      	blx	r3
 801d23e:	4682      	mov	sl, r0
 801d240:	6828      	ldr	r0, [r5, #0]
 801d242:	6803      	ldr	r3, [r0, #0]
 801d244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d246:	4798      	blx	r3
 801d248:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801d24c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d250:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d254:	9303      	str	r3, [sp, #12]
 801d256:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d25a:	1a9b      	subs	r3, r3, r2
 801d25c:	b29b      	uxth	r3, r3
 801d25e:	b21c      	sxth	r4, r3
 801d260:	2c00      	cmp	r4, #0
 801d262:	dc13      	bgt.n	801d28c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 801d264:	bf18      	it	ne
 801d266:	f8ad 2020 	strhne.w	r2, [sp, #32]
 801d26a:	463c      	mov	r4, r7
 801d26c:	bf1e      	ittt	ne
 801d26e:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 801d272:	189b      	addne	r3, r3, r2
 801d274:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801d278:	e00f      	b.n	801d29a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 801d27a:	2300      	movs	r3, #0
 801d27c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801d280:	e7b2      	b.n	801d1e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 801d282:	4b4f      	ldr	r3, [pc, #316]	; (801d3c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 801d284:	f240 11ff 	movw	r1, #511	; 0x1ff
 801d288:	4a47      	ldr	r2, [pc, #284]	; (801d3a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801d28a:	e72d      	b.n	801d0e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d28c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d290:	ebab 0303 	sub.w	r3, fp, r3
 801d294:	443c      	add	r4, r7
 801d296:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801d29a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d29e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d2a2:	1a9b      	subs	r3, r3, r2
 801d2a4:	b29b      	uxth	r3, r3
 801d2a6:	b219      	sxth	r1, r3
 801d2a8:	2900      	cmp	r1, #0
 801d2aa:	dd51      	ble.n	801d350 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 801d2ac:	9a03      	ldr	r2, [sp, #12]
 801d2ae:	fb02 4401 	mla	r4, r2, r1, r4
 801d2b2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801d2b6:	1ad3      	subs	r3, r2, r3
 801d2b8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d2bc:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	dd41      	ble.n	801d348 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801d2c4:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d2c8:	2e00      	cmp	r6, #0
 801d2ca:	dd3d      	ble.n	801d348 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801d2cc:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801d2d0:	f04f 0803 	mov.w	r8, #3
 801d2d4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d2d8:	fb0a f10c 	mul.w	r1, sl, ip
 801d2dc:	fb12 1808 	smlabb	r8, r2, r8, r1
 801d2e0:	4935      	ldr	r1, [pc, #212]	; (801d3b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801d2e2:	4480      	add	r8, r0
 801d2e4:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801d2e8:	8809      	ldrh	r1, [r1, #0]
 801d2ea:	4283      	cmp	r3, r0
 801d2ec:	eba1 0202 	sub.w	r2, r1, r2
 801d2f0:	bfa8      	it	ge
 801d2f2:	4603      	movge	r3, r0
 801d2f4:	4293      	cmp	r3, r2
 801d2f6:	bfa8      	it	ge
 801d2f8:	4613      	movge	r3, r2
 801d2fa:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 801d2fe:	4296      	cmp	r6, r2
 801d300:	bfa8      	it	ge
 801d302:	4616      	movge	r6, r2
 801d304:	4a2d      	ldr	r2, [pc, #180]	; (801d3bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801d306:	8812      	ldrh	r2, [r2, #0]
 801d308:	eba2 0c0c 	sub.w	ip, r2, ip
 801d30c:	4632      	mov	r2, r6
 801d30e:	4566      	cmp	r6, ip
 801d310:	bfa8      	it	ge
 801d312:	4662      	movge	r2, ip
 801d314:	4299      	cmp	r1, r3
 801d316:	9202      	str	r2, [sp, #8]
 801d318:	d12d      	bne.n	801d376 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801d31a:	4559      	cmp	r1, fp
 801d31c:	d12b      	bne.n	801d376 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801d31e:	6828      	ldr	r0, [r5, #0]
 801d320:	6803      	ldr	r3, [r0, #0]
 801d322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d324:	4798      	blx	r3
 801d326:	07c3      	lsls	r3, r0, #31
 801d328:	d51b      	bpl.n	801d362 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 801d32a:	6828      	ldr	r0, [r5, #0]
 801d32c:	9b02      	ldr	r3, [sp, #8]
 801d32e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801d332:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801d336:	6803      	ldr	r3, [r0, #0]
 801d338:	f8cd b000 	str.w	fp, [sp]
 801d33c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 801d33e:	4623      	mov	r3, r4
 801d340:	e899 0006 	ldmia.w	r9, {r1, r2}
 801d344:	47a8      	blx	r5
 801d346:	4607      	mov	r7, r0
 801d348:	4638      	mov	r0, r7
 801d34a:	b00d      	add	sp, #52	; 0x34
 801d34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d350:	bf1f      	itttt	ne
 801d352:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801d356:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801d35a:	189b      	addne	r3, r3, r2
 801d35c:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801d360:	e7ac      	b.n	801d2bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 801d362:	6828      	ldr	r0, [r5, #0]
 801d364:	4642      	mov	r2, r8
 801d366:	4621      	mov	r1, r4
 801d368:	6803      	ldr	r3, [r0, #0]
 801d36a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 801d36c:	9b02      	ldr	r3, [sp, #8]
 801d36e:	fb03 f30a 	mul.w	r3, r3, sl
 801d372:	47a8      	blx	r5
 801d374:	e7e8      	b.n	801d348 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801d376:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 801d37a:	f04f 0900 	mov.w	r9, #0
 801d37e:	9b02      	ldr	r3, [sp, #8]
 801d380:	454b      	cmp	r3, r9
 801d382:	dde1      	ble.n	801d348 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801d384:	6828      	ldr	r0, [r5, #0]
 801d386:	4642      	mov	r2, r8
 801d388:	4621      	mov	r1, r4
 801d38a:	44d0      	add	r8, sl
 801d38c:	6803      	ldr	r3, [r0, #0]
 801d38e:	f109 0901 	add.w	r9, r9, #1
 801d392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d394:	461e      	mov	r6, r3
 801d396:	465b      	mov	r3, fp
 801d398:	47b0      	blx	r6
 801d39a:	9b03      	ldr	r3, [sp, #12]
 801d39c:	441c      	add	r4, r3
 801d39e:	e7ee      	b.n	801d37e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 801d3a0:	200566e0 	.word	0x200566e0
 801d3a4:	0802cc8b 	.word	0x0802cc8b
 801d3a8:	0802d4da 	.word	0x0802d4da
 801d3ac:	0802cc59 	.word	0x0802cc59
 801d3b0:	0802cd3d 	.word	0x0802cd3d
 801d3b4:	0802cd92 	.word	0x0802cd92
 801d3b8:	200566da 	.word	0x200566da
 801d3bc:	200566dc 	.word	0x200566dc
 801d3c0:	0802cdd0 	.word	0x0802cdd0

0801d3c4 <_ZN8touchgfx8LCD24bppC1Ev>:
 801d3c4:	2200      	movs	r2, #0
 801d3c6:	490c      	ldr	r1, [pc, #48]	; (801d3f8 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801d3c8:	6042      	str	r2, [r0, #4]
 801d3ca:	6001      	str	r1, [r0, #0]
 801d3cc:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d3d0:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d3d4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d3d8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d3dc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d3e0:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d3e4:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d3e8:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d3ec:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d3f0:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d3f4:	4770      	bx	lr
 801d3f6:	bf00      	nop
 801d3f8:	0802d0b4 	.word	0x0802d0b4

0801d3fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d400:	4616      	mov	r6, r2
 801d402:	b091      	sub	sp, #68	; 0x44
 801d404:	880a      	ldrh	r2, [r1, #0]
 801d406:	4607      	mov	r7, r0
 801d408:	4688      	mov	r8, r1
 801d40a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801d40e:	b12a      	cbz	r2, 801d41c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801d410:	4b67      	ldr	r3, [pc, #412]	; (801d5b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801d412:	2160      	movs	r1, #96	; 0x60
 801d414:	4a67      	ldr	r2, [pc, #412]	; (801d5b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b8>)
 801d416:	4868      	ldr	r0, [pc, #416]	; (801d5b8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801d418:	f007 fcf4 	bl	8024e04 <__assert_func>
 801d41c:	6830      	ldr	r0, [r6, #0]
 801d41e:	ac0c      	add	r4, sp, #48	; 0x30
 801d420:	6871      	ldr	r1, [r6, #4]
 801d422:	4d66      	ldr	r5, [pc, #408]	; (801d5bc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801d424:	f8df a198 	ldr.w	sl, [pc, #408]	; 801d5c0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 801d428:	c403      	stmia	r4!, {r0, r1}
 801d42a:	6818      	ldr	r0, [r3, #0]
 801d42c:	ac0e      	add	r4, sp, #56	; 0x38
 801d42e:	6859      	ldr	r1, [r3, #4]
 801d430:	c403      	stmia	r4!, {r0, r1}
 801d432:	a80c      	add	r0, sp, #48	; 0x30
 801d434:	f7fa fb38 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d438:	4631      	mov	r1, r6
 801d43a:	a80e      	add	r0, sp, #56	; 0x38
 801d43c:	f7fa fb1c 	bl	8017a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d440:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d444:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d448:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d44c:	6828      	ldr	r0, [r5, #0]
 801d44e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d452:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801d456:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801d45a:	440f      	add	r7, r1
 801d45c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d460:	440a      	add	r2, r1
 801d462:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d466:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d46a:	4413      	add	r3, r2
 801d46c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d470:	6803      	ldr	r3, [r0, #0]
 801d472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d474:	4798      	blx	r3
 801d476:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d47a:	6828      	ldr	r0, [r5, #0]
 801d47c:	d01d      	beq.n	801d4ba <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d47e:	2201      	movs	r2, #1
 801d480:	250b      	movs	r5, #11
 801d482:	6801      	ldr	r1, [r0, #0]
 801d484:	b2a4      	uxth	r4, r4
 801d486:	b2b6      	uxth	r6, r6
 801d488:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d48c:	e9cd 5207 	strd	r5, r2, [sp, #28]
 801d490:	f8ba 5000 	ldrh.w	r5, [sl]
 801d494:	f8cd 9010 	str.w	r9, [sp, #16]
 801d498:	9602      	str	r6, [sp, #8]
 801d49a:	9401      	str	r4, [sp, #4]
 801d49c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801d4a0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d4a4:	9203      	str	r2, [sp, #12]
 801d4a6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d4aa:	9200      	str	r2, [sp, #0]
 801d4ac:	4642      	mov	r2, r8
 801d4ae:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801d4b0:	4639      	mov	r1, r7
 801d4b2:	47a0      	blx	r4
 801d4b4:	b011      	add	sp, #68	; 0x44
 801d4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4ba:	6803      	ldr	r3, [r0, #0]
 801d4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4be:	4798      	blx	r3
 801d4c0:	f8ba 5000 	ldrh.w	r5, [sl]
 801d4c4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d4c8:	f04f 0e04 	mov.w	lr, #4
 801d4cc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d4d0:	436e      	muls	r6, r5
 801d4d2:	fb05 2303 	mla	r3, r5, r3, r2
 801d4d6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d4da:	1b2d      	subs	r5, r5, r4
 801d4dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d4e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d4e4:	4418      	add	r0, r3
 801d4e6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d4ea:	1982      	adds	r2, r0, r6
 801d4ec:	1b1b      	subs	r3, r3, r4
 801d4ee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d4f2:	930b      	str	r3, [sp, #44]	; 0x2c
 801d4f4:	4290      	cmp	r0, r2
 801d4f6:	d254      	bcs.n	801d5a2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801d4f8:	eb00 0a04 	add.w	sl, r0, r4
 801d4fc:	4550      	cmp	r0, sl
 801d4fe:	d24c      	bcs.n	801d59a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19e>
 801d500:	f817 1b01 	ldrb.w	r1, [r7], #1
 801d504:	fb1e e101 	smlabb	r1, lr, r1, lr
 801d508:	eb08 0c01 	add.w	ip, r8, r1
 801d50c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801d510:	b173      	cbz	r3, 801d530 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 801d512:	2bff      	cmp	r3, #255	; 0xff
 801d514:	f818 b001 	ldrb.w	fp, [r8, r1]
 801d518:	d10c      	bne.n	801d534 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801d51a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d51e:	d109      	bne.n	801d534 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801d520:	f880 b000 	strb.w	fp, [r0]
 801d524:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801d528:	7043      	strb	r3, [r0, #1]
 801d52a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801d52e:	7083      	strb	r3, [r0, #2]
 801d530:	3003      	adds	r0, #3
 801d532:	e7e3      	b.n	801d4fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 801d534:	fb09 f103 	mul.w	r1, r9, r3
 801d538:	1c4b      	adds	r3, r1, #1
 801d53a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d53e:	7801      	ldrb	r1, [r0, #0]
 801d540:	121b      	asrs	r3, r3, #8
 801d542:	b29e      	uxth	r6, r3
 801d544:	43db      	mvns	r3, r3
 801d546:	fb1b fb06 	smulbb	fp, fp, r6
 801d54a:	b2db      	uxtb	r3, r3
 801d54c:	fb01 b103 	mla	r1, r1, r3, fp
 801d550:	b289      	uxth	r1, r1
 801d552:	f101 0b01 	add.w	fp, r1, #1
 801d556:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d55a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d55e:	fb1b fb03 	smulbb	fp, fp, r3
 801d562:	1209      	asrs	r1, r1, #8
 801d564:	7001      	strb	r1, [r0, #0]
 801d566:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801d56a:	fb01 b106 	mla	r1, r1, r6, fp
 801d56e:	b289      	uxth	r1, r1
 801d570:	f101 0b01 	add.w	fp, r1, #1
 801d574:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d578:	1209      	asrs	r1, r1, #8
 801d57a:	7041      	strb	r1, [r0, #1]
 801d57c:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801d580:	f890 c002 	ldrb.w	ip, [r0, #2]
 801d584:	fb1c f303 	smulbb	r3, ip, r3
 801d588:	fb01 3606 	mla	r6, r1, r6, r3
 801d58c:	b2b6      	uxth	r6, r6
 801d58e:	1c73      	adds	r3, r6, #1
 801d590:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d594:	1236      	asrs	r6, r6, #8
 801d596:	7086      	strb	r6, [r0, #2]
 801d598:	e7ca      	b.n	801d530 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 801d59a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d59c:	4428      	add	r0, r5
 801d59e:	441f      	add	r7, r3
 801d5a0:	e7a8      	b.n	801d4f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801d5a2:	4b06      	ldr	r3, [pc, #24]	; (801d5bc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801d5a4:	6818      	ldr	r0, [r3, #0]
 801d5a6:	6803      	ldr	r3, [r0, #0]
 801d5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d5aa:	4798      	blx	r3
 801d5ac:	e782      	b.n	801d4b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 801d5ae:	bf00      	nop
 801d5b0:	0802cbbd 	.word	0x0802cbbd
 801d5b4:	0802d2fc 	.word	0x0802d2fc
 801d5b8:	0802cc59 	.word	0x0802cc59
 801d5bc:	200566e0 	.word	0x200566e0
 801d5c0:	200566da 	.word	0x200566da

0801d5c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5c8:	f8b1 9000 	ldrh.w	r9, [r1]
 801d5cc:	b091      	sub	sp, #68	; 0x44
 801d5ce:	4604      	mov	r4, r0
 801d5d0:	460e      	mov	r6, r1
 801d5d2:	f1b9 0f01 	cmp.w	r9, #1
 801d5d6:	4690      	mov	r8, r2
 801d5d8:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801d5dc:	d005      	beq.n	801d5ea <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 801d5de:	4b68      	ldr	r3, [pc, #416]	; (801d780 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801d5e0:	21ae      	movs	r1, #174	; 0xae
 801d5e2:	4a68      	ldr	r2, [pc, #416]	; (801d784 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801d5e4:	4868      	ldr	r0, [pc, #416]	; (801d788 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801d5e6:	f007 fc0d 	bl	8024e04 <__assert_func>
 801d5ea:	6810      	ldr	r0, [r2, #0]
 801d5ec:	ad0c      	add	r5, sp, #48	; 0x30
 801d5ee:	6851      	ldr	r1, [r2, #4]
 801d5f0:	f8df a198 	ldr.w	sl, [pc, #408]	; 801d78c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801d5f4:	f8df b198 	ldr.w	fp, [pc, #408]	; 801d790 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801d5f8:	c503      	stmia	r5!, {r0, r1}
 801d5fa:	6818      	ldr	r0, [r3, #0]
 801d5fc:	ad0e      	add	r5, sp, #56	; 0x38
 801d5fe:	6859      	ldr	r1, [r3, #4]
 801d600:	c503      	stmia	r5!, {r0, r1}
 801d602:	a80c      	add	r0, sp, #48	; 0x30
 801d604:	f7fa fa50 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d608:	4641      	mov	r1, r8
 801d60a:	a80e      	add	r0, sp, #56	; 0x38
 801d60c:	f7fa fa34 	bl	8017a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d610:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d614:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d618:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d61c:	f8da 0000 	ldr.w	r0, [sl]
 801d620:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d624:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801d628:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801d62c:	440c      	add	r4, r1
 801d62e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d632:	440a      	add	r2, r1
 801d634:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d638:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d63c:	4413      	add	r3, r2
 801d63e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d642:	6803      	ldr	r3, [r0, #0]
 801d644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d646:	4798      	blx	r3
 801d648:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d64c:	f8da 0000 	ldr.w	r0, [sl]
 801d650:	d01e      	beq.n	801d690 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801d652:	220b      	movs	r2, #11
 801d654:	6801      	ldr	r1, [r0, #0]
 801d656:	f8cd 9020 	str.w	r9, [sp, #32]
 801d65a:	b2ad      	uxth	r5, r5
 801d65c:	9207      	str	r2, [sp, #28]
 801d65e:	f8bb 2000 	ldrh.w	r2, [fp]
 801d662:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d666:	9206      	str	r2, [sp, #24]
 801d668:	2200      	movs	r2, #0
 801d66a:	9502      	str	r5, [sp, #8]
 801d66c:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801d670:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d674:	9203      	str	r2, [sp, #12]
 801d676:	fa1f f288 	uxth.w	r2, r8
 801d67a:	9201      	str	r2, [sp, #4]
 801d67c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d680:	9200      	str	r2, [sp, #0]
 801d682:	4632      	mov	r2, r6
 801d684:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801d686:	4621      	mov	r1, r4
 801d688:	47a8      	blx	r5
 801d68a:	b011      	add	sp, #68	; 0x44
 801d68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d690:	6803      	ldr	r3, [r0, #0]
 801d692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d694:	4798      	blx	r3
 801d696:	f8bb 2000 	ldrh.w	r2, [fp]
 801d69a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d69e:	f04f 0e03 	mov.w	lr, #3
 801d6a2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801d6a6:	4355      	muls	r5, r2
 801d6a8:	fa1f fc87 	uxth.w	ip, r7
 801d6ac:	fb02 1303 	mla	r3, r2, r3, r1
 801d6b0:	eba2 0208 	sub.w	r2, r2, r8
 801d6b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d6b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d6bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d6c0:	4418      	add	r0, r3
 801d6c2:	920b      	str	r2, [sp, #44]	; 0x2c
 801d6c4:	1943      	adds	r3, r0, r5
 801d6c6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801d6ca:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801d6ce:	eba2 0208 	sub.w	r2, r2, r8
 801d6d2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d6d6:	b2ad      	uxth	r5, r5
 801d6d8:	4298      	cmp	r0, r3
 801d6da:	d24a      	bcs.n	801d772 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 801d6dc:	eb00 0908 	add.w	r9, r0, r8
 801d6e0:	4621      	mov	r1, r4
 801d6e2:	4548      	cmp	r0, r9
 801d6e4:	460c      	mov	r4, r1
 801d6e6:	d240      	bcs.n	801d76a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801d6e8:	f04f 0a04 	mov.w	sl, #4
 801d6ec:	7824      	ldrb	r4, [r4, #0]
 801d6ee:	2fff      	cmp	r7, #255	; 0xff
 801d6f0:	f101 0101 	add.w	r1, r1, #1
 801d6f4:	fb1e a404 	smlabb	r4, lr, r4, sl
 801d6f8:	eb06 0a04 	add.w	sl, r6, r4
 801d6fc:	f816 b004 	ldrb.w	fp, [r6, r4]
 801d700:	d02b      	beq.n	801d75a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801d702:	7804      	ldrb	r4, [r0, #0]
 801d704:	fb14 f405 	smulbb	r4, r4, r5
 801d708:	fb0b 440c 	mla	r4, fp, ip, r4
 801d70c:	b2a4      	uxth	r4, r4
 801d70e:	f104 0b01 	add.w	fp, r4, #1
 801d712:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801d716:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d71a:	fb1b fb05 	smulbb	fp, fp, r5
 801d71e:	1224      	asrs	r4, r4, #8
 801d720:	7004      	strb	r4, [r0, #0]
 801d722:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801d726:	fb04 b40c 	mla	r4, r4, ip, fp
 801d72a:	b2a4      	uxth	r4, r4
 801d72c:	f104 0b01 	add.w	fp, r4, #1
 801d730:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801d734:	1224      	asrs	r4, r4, #8
 801d736:	7044      	strb	r4, [r0, #1]
 801d738:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801d73c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801d740:	fb1a fa05 	smulbb	sl, sl, r5
 801d744:	fb04 a40c 	mla	r4, r4, ip, sl
 801d748:	b2a4      	uxth	r4, r4
 801d74a:	f104 0a01 	add.w	sl, r4, #1
 801d74e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801d752:	1224      	asrs	r4, r4, #8
 801d754:	7084      	strb	r4, [r0, #2]
 801d756:	3003      	adds	r0, #3
 801d758:	e7c3      	b.n	801d6e2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x11e>
 801d75a:	f880 b000 	strb.w	fp, [r0]
 801d75e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801d762:	7044      	strb	r4, [r0, #1]
 801d764:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801d768:	e7f4      	b.n	801d754 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x190>
 801d76a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d76c:	4420      	add	r0, r4
 801d76e:	188c      	adds	r4, r1, r2
 801d770:	e7b2      	b.n	801d6d8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x114>
 801d772:	4b06      	ldr	r3, [pc, #24]	; (801d78c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801d774:	6818      	ldr	r0, [r3, #0]
 801d776:	6803      	ldr	r3, [r0, #0]
 801d778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d77a:	4798      	blx	r3
 801d77c:	e785      	b.n	801d68a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801d77e:	bf00      	nop
 801d780:	0802cb3c 	.word	0x0802cb3c
 801d784:	0802d1ef 	.word	0x0802d1ef
 801d788:	0802cc59 	.word	0x0802cc59
 801d78c:	200566e0 	.word	0x200566e0
 801d790:	200566da 	.word	0x200566da

0801d794 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d794:	b570      	push	{r4, r5, r6, lr}
 801d796:	780d      	ldrb	r5, [r1, #0]
 801d798:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801d79c:	2d01      	cmp	r5, #1
 801d79e:	d00d      	beq.n	801d7bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801d7a0:	d307      	bcc.n	801d7b2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801d7a2:	2d02      	cmp	r5, #2
 801d7a4:	d10f      	bne.n	801d7c6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801d7a6:	4b08      	ldr	r3, [pc, #32]	; (801d7c8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801d7a8:	2153      	movs	r1, #83	; 0x53
 801d7aa:	4a08      	ldr	r2, [pc, #32]	; (801d7cc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801d7ac:	4808      	ldr	r0, [pc, #32]	; (801d7d0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801d7ae:	f007 fb29 	bl	8024e04 <__assert_func>
 801d7b2:	9404      	str	r4, [sp, #16]
 801d7b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d7b8:	f7ff be20 	b.w	801d3fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d7bc:	9404      	str	r4, [sp, #16]
 801d7be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d7c2:	f7ff beff 	b.w	801d5c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801d7c6:	bd70      	pop	{r4, r5, r6, pc}
 801d7c8:	0802cade 	.word	0x0802cade
 801d7cc:	0802d0f8 	.word	0x0802d0f8
 801d7d0:	0802cc59 	.word	0x0802cc59

0801d7d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801d7d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d7d8:	4605      	mov	r5, r0
 801d7da:	b08d      	sub	sp, #52	; 0x34
 801d7dc:	460c      	mov	r4, r1
 801d7de:	461f      	mov	r7, r3
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d051      	beq.n	801d888 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801d7e4:	6808      	ldr	r0, [r1, #0]
 801d7e6:	ab08      	add	r3, sp, #32
 801d7e8:	6849      	ldr	r1, [r1, #4]
 801d7ea:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801d9b4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801d7ee:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801d9b8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801d7f2:	c303      	stmia	r3!, {r0, r1}
 801d7f4:	6810      	ldr	r0, [r2, #0]
 801d7f6:	ab0a      	add	r3, sp, #40	; 0x28
 801d7f8:	6851      	ldr	r1, [r2, #4]
 801d7fa:	c303      	stmia	r3!, {r0, r1}
 801d7fc:	a808      	add	r0, sp, #32
 801d7fe:	f7fa f953 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d802:	4621      	mov	r1, r4
 801d804:	a80a      	add	r0, sp, #40	; 0x28
 801d806:	f7fa f937 	bl	8017a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d80a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d80e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d812:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d816:	f8d8 0000 	ldr.w	r0, [r8]
 801d81a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d81e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801d822:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
 801d826:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801d82a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d82e:	440a      	add	r2, r1
 801d830:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d834:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d838:	4413      	add	r3, r2
 801d83a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d83e:	6803      	ldr	r3, [r0, #0]
 801d840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d842:	4798      	blx	r3
 801d844:	2fff      	cmp	r7, #255	; 0xff
 801d846:	d022      	beq.n	801d88e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 801d848:	f010 0f04 	tst.w	r0, #4
 801d84c:	f8d8 0000 	ldr.w	r0, [r8]
 801d850:	d020      	beq.n	801d894 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc0>
 801d852:	2100      	movs	r1, #0
 801d854:	f04f 0e01 	mov.w	lr, #1
 801d858:	f8d0 c000 	ldr.w	ip, [r0]
 801d85c:	b2a4      	uxth	r4, r4
 801d85e:	b2b6      	uxth	r6, r6
 801d860:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d864:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d868:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 801d86c:	f8b9 e000 	ldrh.w	lr, [r9]
 801d870:	9703      	str	r7, [sp, #12]
 801d872:	9401      	str	r4, [sp, #4]
 801d874:	9600      	str	r6, [sp, #0]
 801d876:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801d87a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d87e:	9102      	str	r1, [sp, #8]
 801d880:	4629      	mov	r1, r5
 801d882:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
 801d886:	47a0      	blx	r4
 801d888:	b00d      	add	sp, #52	; 0x34
 801d88a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d88e:	f010 0f01 	tst.w	r0, #1
 801d892:	e7db      	b.n	801d84c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801d894:	6803      	ldr	r3, [r0, #0]
 801d896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d898:	4798      	blx	r3
 801d89a:	f8b9 1000 	ldrh.w	r1, [r9]
 801d89e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d8a2:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801d8a6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d8aa:	434c      	muls	r4, r1
 801d8ac:	2fff      	cmp	r7, #255	; 0xff
 801d8ae:	fb01 2303 	mla	r3, r1, r3, r2
 801d8b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d8b6:	eba1 0106 	sub.w	r1, r1, r6
 801d8ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d8be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d8c2:	4418      	add	r0, r3
 801d8c4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d8c8:	eba3 0606 	sub.w	r6, r3, r6
 801d8cc:	4404      	add	r4, r0
 801d8ce:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801d8d2:	d04a      	beq.n	801d96a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 801d8d4:	43fa      	mvns	r2, r7
 801d8d6:	b2bb      	uxth	r3, r7
 801d8d8:	b2d7      	uxtb	r7, r2
 801d8da:	42a0      	cmp	r0, r4
 801d8dc:	d263      	bcs.n	801d9a6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801d8de:	eb00 0e0c 	add.w	lr, r0, ip
 801d8e2:	4586      	cmp	lr, r0
 801d8e4:	f100 0803 	add.w	r8, r0, #3
 801d8e8:	d93a      	bls.n	801d960 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18c>
 801d8ea:	f835 2b02 	ldrh.w	r2, [r5], #2
 801d8ee:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801d8f2:	00d0      	lsls	r0, r2, #3
 801d8f4:	fb19 f907 	smulbb	r9, r9, r7
 801d8f8:	b2c0      	uxtb	r0, r0
 801d8fa:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801d8fe:	fb00 9003 	mla	r0, r0, r3, r9
 801d902:	b280      	uxth	r0, r0
 801d904:	f100 0901 	add.w	r9, r0, #1
 801d908:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801d90c:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801d910:	fb19 f907 	smulbb	r9, r9, r7
 801d914:	1200      	asrs	r0, r0, #8
 801d916:	f808 0c03 	strb.w	r0, [r8, #-3]
 801d91a:	10d0      	asrs	r0, r2, #3
 801d91c:	1212      	asrs	r2, r2, #8
 801d91e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801d922:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801d926:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801d92a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d92e:	fb00 9003 	mla	r0, r0, r3, r9
 801d932:	b280      	uxth	r0, r0
 801d934:	f100 0901 	add.w	r9, r0, #1
 801d938:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801d93c:	1200      	asrs	r0, r0, #8
 801d93e:	f808 0c02 	strb.w	r0, [r8, #-2]
 801d942:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801d946:	fb10 f007 	smulbb	r0, r0, r7
 801d94a:	fb02 0203 	mla	r2, r2, r3, r0
 801d94e:	b292      	uxth	r2, r2
 801d950:	1c50      	adds	r0, r2, #1
 801d952:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d956:	4640      	mov	r0, r8
 801d958:	1212      	asrs	r2, r2, #8
 801d95a:	f808 2c01 	strb.w	r2, [r8, #-1]
 801d95e:	e7c0      	b.n	801d8e2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10e>
 801d960:	4408      	add	r0, r1
 801d962:	4435      	add	r5, r6
 801d964:	e7b9      	b.n	801d8da <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x106>
 801d966:	4408      	add	r0, r1
 801d968:	4435      	add	r5, r6
 801d96a:	42a0      	cmp	r0, r4
 801d96c:	d21b      	bcs.n	801d9a6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801d96e:	eb00 070c 	add.w	r7, r0, ip
 801d972:	42b8      	cmp	r0, r7
 801d974:	d2f7      	bcs.n	801d966 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x192>
 801d976:	f835 3b02 	ldrh.w	r3, [r5], #2
 801d97a:	3003      	adds	r0, #3
 801d97c:	00da      	lsls	r2, r3, #3
 801d97e:	b2d2      	uxtb	r2, r2
 801d980:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d984:	f800 2c03 	strb.w	r2, [r0, #-3]
 801d988:	10da      	asrs	r2, r3, #3
 801d98a:	121b      	asrs	r3, r3, #8
 801d98c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d990:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d994:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801d998:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801d99c:	f800 2c02 	strb.w	r2, [r0, #-2]
 801d9a0:	f800 3c01 	strb.w	r3, [r0, #-1]
 801d9a4:	e7e5      	b.n	801d972 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x19e>
 801d9a6:	4b03      	ldr	r3, [pc, #12]	; (801d9b4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801d9a8:	6818      	ldr	r0, [r3, #0]
 801d9aa:	6803      	ldr	r3, [r0, #0]
 801d9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d9ae:	4798      	blx	r3
 801d9b0:	e76a      	b.n	801d888 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801d9b2:	bf00      	nop
 801d9b4:	200566e0 	.word	0x200566e0
 801d9b8:	200566da 	.word	0x200566da

0801d9bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801d9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d9c0:	b088      	sub	sp, #32
 801d9c2:	460d      	mov	r5, r1
 801d9c4:	4604      	mov	r4, r0
 801d9c6:	461e      	mov	r6, r3
 801d9c8:	6808      	ldr	r0, [r1, #0]
 801d9ca:	ab04      	add	r3, sp, #16
 801d9cc:	6849      	ldr	r1, [r1, #4]
 801d9ce:	4f5c      	ldr	r7, [pc, #368]	; (801db40 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x184>)
 801d9d0:	c303      	stmia	r3!, {r0, r1}
 801d9d2:	6810      	ldr	r0, [r2, #0]
 801d9d4:	ab06      	add	r3, sp, #24
 801d9d6:	6851      	ldr	r1, [r2, #4]
 801d9d8:	c303      	stmia	r3!, {r0, r1}
 801d9da:	a804      	add	r0, sp, #16
 801d9dc:	f7fa f864 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d9e0:	4629      	mov	r1, r5
 801d9e2:	a806      	add	r0, sp, #24
 801d9e4:	f7fa f848 	bl	8017a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d9e8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801d9ec:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801d9f0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801d9f4:	6838      	ldr	r0, [r7, #0]
 801d9f6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d9fa:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 801d9fe:	f9bd 501e 	ldrsh.w	r5, [sp, #30]
 801da02:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801da06:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801da0a:	440a      	add	r2, r1
 801da0c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801da10:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801da14:	4413      	add	r3, r2
 801da16:	f8ad 301a 	strh.w	r3, [sp, #26]
 801da1a:	6803      	ldr	r3, [r0, #0]
 801da1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da1e:	4798      	blx	r3
 801da20:	2eff      	cmp	r6, #255	; 0xff
 801da22:	d117      	bne.n	801da54 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801da24:	f010 0f20 	tst.w	r0, #32
 801da28:	6838      	ldr	r0, [r7, #0]
 801da2a:	d016      	beq.n	801da5a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801da2c:	b2ad      	uxth	r5, r5
 801da2e:	6801      	ldr	r1, [r0, #0]
 801da30:	9603      	str	r6, [sp, #12]
 801da32:	9501      	str	r5, [sp, #4]
 801da34:	fa1f f588 	uxth.w	r5, r8
 801da38:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 801da3c:	9500      	str	r5, [sp, #0]
 801da3e:	9602      	str	r6, [sp, #8]
 801da40:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801da44:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 801da46:	4621      	mov	r1, r4
 801da48:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801da4c:	47a8      	blx	r5
 801da4e:	b008      	add	sp, #32
 801da50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da54:	f010 0f40 	tst.w	r0, #64	; 0x40
 801da58:	e7e6      	b.n	801da28 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801da5a:	6803      	ldr	r3, [r0, #0]
 801da5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da5e:	4798      	blx	r3
 801da60:	4b38      	ldr	r3, [pc, #224]	; (801db44 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801da62:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801da66:	f8b3 c000 	ldrh.w	ip, [r3]
 801da6a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801da6e:	fb0c f505 	mul.w	r5, ip, r5
 801da72:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 801da76:	fb0c 2303 	mla	r3, ip, r3, r2
 801da7a:	ebac 0c08 	sub.w	ip, ip, r8
 801da7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801da82:	ebae 0e08 	sub.w	lr, lr, r8
 801da86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da8a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801da8e:	4418      	add	r0, r3
 801da90:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801da94:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801da98:	4405      	add	r5, r0
 801da9a:	42a8      	cmp	r0, r5
 801da9c:	d24a      	bcs.n	801db34 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x178>
 801da9e:	eb00 0803 	add.w	r8, r0, r3
 801daa2:	4540      	cmp	r0, r8
 801daa4:	d243      	bcs.n	801db2e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x172>
 801daa6:	78e2      	ldrb	r2, [r4, #3]
 801daa8:	b15a      	cbz	r2, 801dac2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801daaa:	2aff      	cmp	r2, #255	; 0xff
 801daac:	f894 9000 	ldrb.w	r9, [r4]
 801dab0:	d10a      	bne.n	801dac8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801dab2:	2eff      	cmp	r6, #255	; 0xff
 801dab4:	d108      	bne.n	801dac8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801dab6:	f880 9000 	strb.w	r9, [r0]
 801daba:	7862      	ldrb	r2, [r4, #1]
 801dabc:	7042      	strb	r2, [r0, #1]
 801dabe:	78a2      	ldrb	r2, [r4, #2]
 801dac0:	7082      	strb	r2, [r0, #2]
 801dac2:	3003      	adds	r0, #3
 801dac4:	3404      	adds	r4, #4
 801dac6:	e7ec      	b.n	801daa2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe6>
 801dac8:	4372      	muls	r2, r6
 801daca:	1c51      	adds	r1, r2, #1
 801dacc:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801dad0:	1209      	asrs	r1, r1, #8
 801dad2:	fa1f fa81 	uxth.w	sl, r1
 801dad6:	43c9      	mvns	r1, r1
 801dad8:	fb19 f90a 	smulbb	r9, r9, sl
 801dadc:	b2ca      	uxtb	r2, r1
 801dade:	7801      	ldrb	r1, [r0, #0]
 801dae0:	fb01 9902 	mla	r9, r1, r2, r9
 801dae4:	fa1f f989 	uxth.w	r9, r9
 801dae8:	f109 0101 	add.w	r1, r9, #1
 801daec:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801daf0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801daf4:	f880 9000 	strb.w	r9, [r0]
 801daf8:	f890 9001 	ldrb.w	r9, [r0, #1]
 801dafc:	7861      	ldrb	r1, [r4, #1]
 801dafe:	fb19 f902 	smulbb	r9, r9, r2
 801db02:	fb01 910a 	mla	r1, r1, sl, r9
 801db06:	b289      	uxth	r1, r1
 801db08:	f101 0901 	add.w	r9, r1, #1
 801db0c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801db10:	1209      	asrs	r1, r1, #8
 801db12:	7041      	strb	r1, [r0, #1]
 801db14:	7881      	ldrb	r1, [r0, #2]
 801db16:	f894 9002 	ldrb.w	r9, [r4, #2]
 801db1a:	fb11 f202 	smulbb	r2, r1, r2
 801db1e:	fb09 220a 	mla	r2, r9, sl, r2
 801db22:	b292      	uxth	r2, r2
 801db24:	1c51      	adds	r1, r2, #1
 801db26:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801db2a:	1212      	asrs	r2, r2, #8
 801db2c:	e7c8      	b.n	801dac0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x104>
 801db2e:	4460      	add	r0, ip
 801db30:	4474      	add	r4, lr
 801db32:	e7b2      	b.n	801da9a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801db34:	6838      	ldr	r0, [r7, #0]
 801db36:	6803      	ldr	r3, [r0, #0]
 801db38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801db3a:	4798      	blx	r3
 801db3c:	e787      	b.n	801da4e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x92>
 801db3e:	bf00      	nop
 801db40:	200566e0 	.word	0x200566e0
 801db44:	200566da 	.word	0x200566da

0801db48 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801db48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801db4c:	b085      	sub	sp, #20
 801db4e:	4606      	mov	r6, r0
 801db50:	460c      	mov	r4, r1
 801db52:	4691      	mov	r9, r2
 801db54:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801db58:	4698      	mov	r8, r3
 801db5a:	b31d      	cbz	r5, 801dba4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801db5c:	4608      	mov	r0, r1
 801db5e:	f7fd f9e3 	bl	801af28 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801db62:	4607      	mov	r7, r0
 801db64:	4620      	mov	r0, r4
 801db66:	f7fd fa19 	bl	801af9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801db6a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801db6e:	4620      	mov	r0, r4
 801db70:	f8ad 9008 	strh.w	r9, [sp, #8]
 801db74:	f8ad 800a 	strh.w	r8, [sp, #10]
 801db78:	f8ad 700c 	strh.w	r7, [sp, #12]
 801db7c:	f7fd fad2 	bl	801b124 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801db80:	280b      	cmp	r0, #11
 801db82:	d838      	bhi.n	801dbf6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 801db84:	e8df f000 	tbb	[pc, r0]
 801db88:	37062920 	.word	0x37062920
 801db8c:	37373737 	.word	0x37373737
 801db90:	11373737 	.word	0x11373737
 801db94:	4620      	mov	r0, r4
 801db96:	f7fd fa3b 	bl	801b010 <_ZNK8touchgfx6Bitmap7getDataEv>
 801db9a:	462b      	mov	r3, r5
 801db9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801db9e:	a902      	add	r1, sp, #8
 801dba0:	f7ff ff0c 	bl	801d9bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dba4:	b005      	add	sp, #20
 801dba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dbaa:	4620      	mov	r0, r4
 801dbac:	f7fd fa30 	bl	801b010 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dbb0:	4606      	mov	r6, r0
 801dbb2:	4620      	mov	r0, r4
 801dbb4:	f7fd fa5e 	bl	801b074 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801dbb8:	9500      	str	r5, [sp, #0]
 801dbba:	4601      	mov	r1, r0
 801dbbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dbbe:	aa02      	add	r2, sp, #8
 801dbc0:	4630      	mov	r0, r6
 801dbc2:	f7ff fde7 	bl	801d794 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801dbc6:	e7ed      	b.n	801dba4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dbc8:	4620      	mov	r0, r4
 801dbca:	f7fd fa21 	bl	801b010 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dbce:	462b      	mov	r3, r5
 801dbd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dbd2:	a902      	add	r1, sp, #8
 801dbd4:	f7ff fdfe 	bl	801d7d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801dbd8:	e7e4      	b.n	801dba4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dbda:	6833      	ldr	r3, [r6, #0]
 801dbdc:	4620      	mov	r0, r4
 801dbde:	68df      	ldr	r7, [r3, #12]
 801dbe0:	f7fd fa16 	bl	801b010 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dbe4:	2300      	movs	r3, #0
 801dbe6:	4601      	mov	r1, r0
 801dbe8:	aa02      	add	r2, sp, #8
 801dbea:	4630      	mov	r0, r6
 801dbec:	e9cd 5300 	strd	r5, r3, [sp]
 801dbf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dbf2:	47b8      	blx	r7
 801dbf4:	e7d6      	b.n	801dba4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dbf6:	4b03      	ldr	r3, [pc, #12]	; (801dc04 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 801dbf8:	2147      	movs	r1, #71	; 0x47
 801dbfa:	4a03      	ldr	r2, [pc, #12]	; (801dc08 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801dbfc:	4803      	ldr	r0, [pc, #12]	; (801dc0c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801dbfe:	f007 f901 	bl	8024e04 <__assert_func>
 801dc02:	bf00      	nop
 801dc04:	0802cb8a 	.word	0x0802cb8a
 801dc08:	0802d278 	.word	0x0802d278
 801dc0c:	0802cc59 	.word	0x0802cc59

0801dc10 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801dc10:	b570      	push	{r4, r5, r6, lr}
 801dc12:	9d04      	ldr	r5, [sp, #16]
 801dc14:	460c      	mov	r4, r1
 801dc16:	4619      	mov	r1, r3
 801dc18:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801dc1c:	2a0d      	cmp	r2, #13
 801dc1e:	d826      	bhi.n	801dc6e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801dc20:	e8df f002 	tbb	[pc, r2]
 801dc24:	200e1407 	.word	0x200e1407
 801dc28:	20202020 	.word	0x20202020
 801dc2c:	20202020 	.word	0x20202020
 801dc30:	2020      	.short	0x2020
 801dc32:	4b0f      	ldr	r3, [pc, #60]	; (801dc70 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801dc34:	f240 11d3 	movw	r1, #467	; 0x1d3
 801dc38:	4a0e      	ldr	r2, [pc, #56]	; (801dc74 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801dc3a:	480f      	ldr	r0, [pc, #60]	; (801dc78 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801dc3c:	f007 f8e2 	bl	8024e04 <__assert_func>
 801dc40:	462a      	mov	r2, r5
 801dc42:	4620      	mov	r0, r4
 801dc44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dc48:	f7ff beb8 	b.w	801d9bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dc4c:	6802      	ldr	r2, [r0, #0]
 801dc4e:	2600      	movs	r6, #0
 801dc50:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801dc54:	68d6      	ldr	r6, [r2, #12]
 801dc56:	462b      	mov	r3, r5
 801dc58:	460a      	mov	r2, r1
 801dc5a:	4621      	mov	r1, r4
 801dc5c:	46b4      	mov	ip, r6
 801dc5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dc62:	4760      	bx	ip
 801dc64:	4b05      	ldr	r3, [pc, #20]	; (801dc7c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801dc66:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 801dc6a:	4a02      	ldr	r2, [pc, #8]	; (801dc74 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801dc6c:	e7e5      	b.n	801dc3a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801dc6e:	bd70      	pop	{r4, r5, r6, pc}
 801dc70:	0802ce30 	.word	0x0802ce30
 801dc74:	0802d560 	.word	0x0802d560
 801dc78:	0802cc59 	.word	0x0802cc59
 801dc7c:	0802ce71 	.word	0x0802ce71

0801dc80 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801dc80:	b158      	cbz	r0, 801dc9a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801dc82:	2902      	cmp	r1, #2
 801dc84:	d00f      	beq.n	801dca6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801dc86:	2903      	cmp	r1, #3
 801dc88:	d010      	beq.n	801dcac <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801dc8a:	2901      	cmp	r1, #1
 801dc8c:	d101      	bne.n	801dc92 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801dc8e:	2001      	movs	r0, #1
 801dc90:	4770      	bx	lr
 801dc92:	4b08      	ldr	r3, [pc, #32]	; (801dcb4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801dc94:	8819      	ldrh	r1, [r3, #0]
 801dc96:	4248      	negs	r0, r1
 801dc98:	4770      	bx	lr
 801dc9a:	2902      	cmp	r1, #2
 801dc9c:	d006      	beq.n	801dcac <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801dc9e:	2903      	cmp	r1, #3
 801dca0:	d0f7      	beq.n	801dc92 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801dca2:	2901      	cmp	r1, #1
 801dca4:	d1f3      	bne.n	801dc8e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801dca6:	4b03      	ldr	r3, [pc, #12]	; (801dcb4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801dca8:	8818      	ldrh	r0, [r3, #0]
 801dcaa:	4770      	bx	lr
 801dcac:	f04f 30ff 	mov.w	r0, #4294967295
 801dcb0:	4770      	bx	lr
 801dcb2:	bf00      	nop
 801dcb4:	200566da 	.word	0x200566da

0801dcb8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801dcb8:	b170      	cbz	r0, 801dcd8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801dcba:	2902      	cmp	r1, #2
 801dcbc:	d012      	beq.n	801dce4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801dcbe:	2903      	cmp	r1, #3
 801dcc0:	d006      	beq.n	801dcd0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801dcc2:	2901      	cmp	r1, #1
 801dcc4:	d001      	beq.n	801dcca <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801dcc6:	2001      	movs	r0, #1
 801dcc8:	4770      	bx	lr
 801dcca:	4b08      	ldr	r3, [pc, #32]	; (801dcec <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801dccc:	8818      	ldrh	r0, [r3, #0]
 801dcce:	4770      	bx	lr
 801dcd0:	4b06      	ldr	r3, [pc, #24]	; (801dcec <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801dcd2:	8818      	ldrh	r0, [r3, #0]
 801dcd4:	4240      	negs	r0, r0
 801dcd6:	4770      	bx	lr
 801dcd8:	2902      	cmp	r1, #2
 801dcda:	d0f9      	beq.n	801dcd0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801dcdc:	2903      	cmp	r1, #3
 801dcde:	d0f2      	beq.n	801dcc6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801dce0:	2901      	cmp	r1, #1
 801dce2:	d1f2      	bne.n	801dcca <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801dce4:	f04f 30ff 	mov.w	r0, #4294967295
 801dce8:	4770      	bx	lr
 801dcea:	bf00      	nop
 801dcec:	200566da 	.word	0x200566da

0801dcf0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801dcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcf4:	b095      	sub	sp, #84	; 0x54
 801dcf6:	9109      	str	r1, [sp, #36]	; 0x24
 801dcf8:	a910      	add	r1, sp, #64	; 0x40
 801dcfa:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801dcfe:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
 801dd02:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801dd06:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801dd0a:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801dd0e:	e881 000c 	stmia.w	r1, {r2, r3}
 801dd12:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801dd16:	9308      	str	r3, [sp, #32]
 801dd18:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801dd1c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801dd20:	930f      	str	r3, [sp, #60]	; 0x3c
 801dd22:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801dd26:	798d      	ldrb	r5, [r1, #6]
 801dd28:	930a      	str	r3, [sp, #40]	; 0x28
 801dd2a:	7b4b      	ldrb	r3, [r1, #13]
 801dd2c:	0158      	lsls	r0, r3, #5
 801dd2e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801dd32:	4328      	orrs	r0, r5
 801dd34:	9007      	str	r0, [sp, #28]
 801dd36:	f000 817a 	beq.w	801e02e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801dd3a:	011b      	lsls	r3, r3, #4
 801dd3c:	79c8      	ldrb	r0, [r1, #7]
 801dd3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dd42:	4303      	orrs	r3, r0
 801dd44:	930c      	str	r3, [sp, #48]	; 0x30
 801dd46:	f000 8172 	beq.w	801e02e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801dd4a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801dd4e:	b29b      	uxth	r3, r3
 801dd50:	2f00      	cmp	r7, #0
 801dd52:	f000 8117 	beq.w	801df84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 801dd56:	1aff      	subs	r7, r7, r3
 801dd58:	b2bf      	uxth	r7, r7
 801dd5a:	043b      	lsls	r3, r7, #16
 801dd5c:	d502      	bpl.n	801dd64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801dd5e:	1bf6      	subs	r6, r6, r7
 801dd60:	2700      	movs	r7, #0
 801dd62:	b236      	sxth	r6, r6
 801dd64:	f9b2 1000 	ldrsh.w	r1, [r2]
 801dd68:	a810      	add	r0, sp, #64	; 0x40
 801dd6a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801dd6e:	428e      	cmp	r6, r1
 801dd70:	b28b      	uxth	r3, r1
 801dd72:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801dd76:	bfbf      	itttt	lt
 801dd78:	18ff      	addlt	r7, r7, r3
 801dd7a:	1bbe      	sublt	r6, r7, r6
 801dd7c:	b2b7      	uxthlt	r7, r6
 801dd7e:	460e      	movlt	r6, r1
 801dd80:	8891      	ldrh	r1, [r2, #4]
 801dd82:	440b      	add	r3, r1
 801dd84:	4631      	mov	r1, r6
 801dd86:	b21b      	sxth	r3, r3
 801dd88:	930e      	str	r3, [sp, #56]	; 0x38
 801dd8a:	88d3      	ldrh	r3, [r2, #6]
 801dd8c:	9a08      	ldr	r2, [sp, #32]
 801dd8e:	449a      	add	sl, r3
 801dd90:	fa0f f38a 	sxth.w	r3, sl
 801dd94:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 801dd98:	930d      	str	r3, [sp, #52]	; 0x34
 801dd9a:	4bb4      	ldr	r3, [pc, #720]	; (801e06c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801dd9c:	f893 b000 	ldrb.w	fp, [r3]
 801dda0:	f10b 3cff 	add.w	ip, fp, #4294967295
 801dda4:	f1dc 0300 	rsbs	r3, ip, #0
 801dda8:	eb43 030c 	adc.w	r3, r3, ip
 801ddac:	930b      	str	r3, [sp, #44]	; 0x2c
 801ddae:	464b      	mov	r3, r9
 801ddb0:	f7f9 fcd3 	bl	801775a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ddb4:	4631      	mov	r1, r6
 801ddb6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801ddba:	464b      	mov	r3, r9
 801ddbc:	9a08      	ldr	r2, [sp, #32]
 801ddbe:	a810      	add	r0, sp, #64	; 0x40
 801ddc0:	f7f9 fce3 	bl	801778a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ddc4:	a914      	add	r1, sp, #80	; 0x50
 801ddc6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ddca:	a813      	add	r0, sp, #76	; 0x4c
 801ddcc:	f7f9 fe3e 	bl	8017a4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ddd0:	f1b9 0f00 	cmp.w	r9, #0
 801ddd4:	f040 80d9 	bne.w	801df8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 801ddd8:	f1bb 0f01 	cmp.w	fp, #1
 801dddc:	f040 80dd 	bne.w	801df9a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 801dde0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dde2:	b153      	cbz	r3, 801ddfa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801dde4:	2508      	movs	r5, #8
 801dde6:	9a07      	ldr	r2, [sp, #28]
 801dde8:	fb95 f3f8 	sdiv	r3, r5, r8
 801ddec:	1e5d      	subs	r5, r3, #1
 801ddee:	4415      	add	r5, r2
 801ddf0:	fb95 f5f3 	sdiv	r5, r5, r3
 801ddf4:	fb15 f503 	smulbb	r5, r5, r3
 801ddf8:	b2ad      	uxth	r5, r5
 801ddfa:	b907      	cbnz	r7, 801ddfe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801ddfc:	b16c      	cbz	r4, 801de1a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801ddfe:	fb04 7305 	mla	r3, r4, r5, r7
 801de02:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801de04:	ebaa 0a04 	sub.w	sl, sl, r4
 801de08:	fb08 f303 	mul.w	r3, r8, r3
 801de0c:	fa1f fa8a 	uxth.w	sl, sl
 801de10:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801de14:	f003 0407 	and.w	r4, r3, #7
 801de18:	9224      	str	r2, [sp, #144]	; 0x90
 801de1a:	4649      	mov	r1, r9
 801de1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801de1e:	f7ff ff2f 	bl	801dc80 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801de22:	4649      	mov	r1, r9
 801de24:	4683      	mov	fp, r0
 801de26:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801de28:	f7ff ff46 	bl	801dcb8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801de2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801de2e:	9a08      	ldr	r2, [sp, #32]
 801de30:	4681      	mov	r9, r0
 801de32:	1a9b      	subs	r3, r3, r2
 801de34:	459a      	cmp	sl, r3
 801de36:	bfa8      	it	ge
 801de38:	469a      	movge	sl, r3
 801de3a:	f1ba 0f00 	cmp.w	sl, #0
 801de3e:	f340 80f6 	ble.w	801e02e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801de42:	1bf6      	subs	r6, r6, r7
 801de44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de46:	1b9e      	subs	r6, r3, r6
 801de48:	9b07      	ldr	r3, [sp, #28]
 801de4a:	429e      	cmp	r6, r3
 801de4c:	bfd4      	ite	le
 801de4e:	ebc7 0706 	rsble	r7, r7, r6
 801de52:	ebc7 0703 	rsbgt	r7, r7, r3
 801de56:	2f00      	cmp	r7, #0
 801de58:	f340 80e9 	ble.w	801e02e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801de5c:	1bed      	subs	r5, r5, r7
 801de5e:	fb08 f305 	mul.w	r3, r8, r5
 801de62:	930b      	str	r3, [sp, #44]	; 0x2c
 801de64:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801de66:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801de6a:	930c      	str	r3, [sp, #48]	; 0x30
 801de6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801de6e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801de72:	930d      	str	r3, [sp, #52]	; 0x34
 801de74:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801de76:	b2db      	uxtb	r3, r3
 801de78:	930e      	str	r3, [sp, #56]	; 0x38
 801de7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de7c:	2b00      	cmp	r3, #0
 801de7e:	f040 80db 	bne.w	801e038 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801de82:	4b7b      	ldr	r3, [pc, #492]	; (801e070 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801de84:	6818      	ldr	r0, [r3, #0]
 801de86:	6803      	ldr	r3, [r0, #0]
 801de88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de8a:	4798      	blx	r3
 801de8c:	2301      	movs	r3, #1
 801de8e:	4a79      	ldr	r2, [pc, #484]	; (801e074 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801de90:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801de94:	fb07 9b1b 	mls	fp, r7, fp, r9
 801de98:	fa03 f308 	lsl.w	r3, r3, r8
 801de9c:	8811      	ldrh	r1, [r2, #0]
 801de9e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801dea2:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801dea6:	3b01      	subs	r3, #1
 801dea8:	fb06 bb07 	mla	fp, r6, r7, fp
 801deac:	b2db      	uxtb	r3, r3
 801deae:	9308      	str	r3, [sp, #32]
 801deb0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801deb4:	fb01 2303 	mla	r3, r1, r3, r2
 801deb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801debc:	18c3      	adds	r3, r0, r3
 801debe:	9307      	str	r3, [sp, #28]
 801dec0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dec2:	781a      	ldrb	r2, [r3, #0]
 801dec4:	4122      	asrs	r2, r4
 801dec6:	b2d2      	uxtb	r2, r2
 801dec8:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801decc:	f0c0 80d4 	bcc.w	801e078 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 801ded0:	46be      	mov	lr, r7
 801ded2:	9907      	ldr	r1, [sp, #28]
 801ded4:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801ded8:	f0c0 80b7 	bcc.w	801e04a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35a>
 801dedc:	9b08      	ldr	r3, [sp, #32]
 801dede:	4013      	ands	r3, r2
 801dee0:	d041      	beq.n	801df66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801dee2:	20ff      	movs	r0, #255	; 0xff
 801dee4:	9d08      	ldr	r5, [sp, #32]
 801dee6:	fb90 f5f5 	sdiv	r5, r0, r5
 801deea:	436b      	muls	r3, r5
 801deec:	2bfe      	cmp	r3, #254	; 0xfe
 801deee:	dd03      	ble.n	801def8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801def0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801def2:	4285      	cmp	r5, r0
 801def4:	f000 80a2 	beq.w	801e03c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801def8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801defa:	980e      	ldr	r0, [sp, #56]	; 0x38
 801defc:	fb15 f303 	smulbb	r3, r5, r3
 801df00:	b29b      	uxth	r3, r3
 801df02:	1c5d      	adds	r5, r3, #1
 801df04:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801df08:	780d      	ldrb	r5, [r1, #0]
 801df0a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801df0e:	fa1f fc83 	uxth.w	ip, r3
 801df12:	43db      	mvns	r3, r3
 801df14:	fb10 f90c 	smulbb	r9, r0, ip
 801df18:	b2db      	uxtb	r3, r3
 801df1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801df1c:	fb05 9503 	mla	r5, r5, r3, r9
 801df20:	b2ad      	uxth	r5, r5
 801df22:	f105 0901 	add.w	r9, r5, #1
 801df26:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801df2a:	fb10 f90c 	smulbb	r9, r0, ip
 801df2e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801df30:	122d      	asrs	r5, r5, #8
 801df32:	fb10 fc0c 	smulbb	ip, r0, ip
 801df36:	700d      	strb	r5, [r1, #0]
 801df38:	784d      	ldrb	r5, [r1, #1]
 801df3a:	fb05 9503 	mla	r5, r5, r3, r9
 801df3e:	b2ad      	uxth	r5, r5
 801df40:	f105 0901 	add.w	r9, r5, #1
 801df44:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801df48:	122d      	asrs	r5, r5, #8
 801df4a:	704d      	strb	r5, [r1, #1]
 801df4c:	788d      	ldrb	r5, [r1, #2]
 801df4e:	fb05 cc03 	mla	ip, r5, r3, ip
 801df52:	fa1f fc8c 	uxth.w	ip, ip
 801df56:	f10c 0301 	add.w	r3, ip, #1
 801df5a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801df5e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801df62:	f881 c002 	strb.w	ip, [r1, #2]
 801df66:	4444      	add	r4, r8
 801df68:	4431      	add	r1, r6
 801df6a:	b2a4      	uxth	r4, r4
 801df6c:	2c07      	cmp	r4, #7
 801df6e:	bf89      	itett	hi
 801df70:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801df72:	fa42 f208 	asrls.w	r2, r2, r8
 801df76:	2400      	movhi	r4, #0
 801df78:	785a      	ldrbhi	r2, [r3, #1]
 801df7a:	bf8a      	itet	hi
 801df7c:	3301      	addhi	r3, #1
 801df7e:	b2d2      	uxtbls	r2, r2
 801df80:	9324      	strhi	r3, [sp, #144]	; 0x90
 801df82:	e7a7      	b.n	801ded4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 801df84:	441e      	add	r6, r3
 801df86:	b236      	sxth	r6, r6
 801df88:	e6ec      	b.n	801dd64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801df8a:	f1b9 0f01 	cmp.w	r9, #1
 801df8e:	f47f af27 	bne.w	801dde0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801df92:	f1bb 0f01 	cmp.w	fp, #1
 801df96:	f47f af23 	bne.w	801dde0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801df9a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 801e070 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801df9e:	f8db 0000 	ldr.w	r0, [fp]
 801dfa2:	6803      	ldr	r3, [r0, #0]
 801dfa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dfa6:	4798      	blx	r3
 801dfa8:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801dfac:	465a      	mov	r2, fp
 801dfae:	d006      	beq.n	801dfbe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801dfb0:	f1b8 0f04 	cmp.w	r8, #4
 801dfb4:	d13e      	bne.n	801e034 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801dfb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dfb8:	3300      	adds	r3, #0
 801dfba:	bf18      	it	ne
 801dfbc:	2301      	movne	r3, #1
 801dfbe:	0580      	lsls	r0, r0, #22
 801dfc0:	d563      	bpl.n	801e08a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801dfc2:	f1b8 0f08 	cmp.w	r8, #8
 801dfc6:	d160      	bne.n	801e08a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801dfc8:	2b00      	cmp	r3, #0
 801dfca:	bf0c      	ite	eq
 801dfcc:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801dfd0:	f44f 7180 	movne.w	r1, #256	; 0x100
 801dfd4:	2f00      	cmp	r7, #0
 801dfd6:	f47f af03 	bne.w	801dde0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801dfda:	2c00      	cmp	r4, #0
 801dfdc:	f47f af00 	bne.w	801dde0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801dfe0:	9b07      	ldr	r3, [sp, #28]
 801dfe2:	980e      	ldr	r0, [sp, #56]	; 0x38
 801dfe4:	18f3      	adds	r3, r6, r3
 801dfe6:	4283      	cmp	r3, r0
 801dfe8:	f73f aefa 	bgt.w	801dde0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801dfec:	9808      	ldr	r0, [sp, #32]
 801dfee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dff0:	4403      	add	r3, r0
 801dff2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801dff4:	4283      	cmp	r3, r0
 801dff6:	f73f aef3 	bgt.w	801dde0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801dffa:	f1b8 0f08 	cmp.w	r8, #8
 801dffe:	6810      	ldr	r0, [r2, #0]
 801e000:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801e004:	bf18      	it	ne
 801e006:	3501      	addne	r5, #1
 801e008:	6804      	ldr	r4, [r0, #0]
 801e00a:	9105      	str	r1, [sp, #20]
 801e00c:	bf18      	it	ne
 801e00e:	f025 0501 	bicne.w	r5, r5, #1
 801e012:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e014:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801e018:	bf18      	it	ne
 801e01a:	b2ad      	uxthne	r5, r5
 801e01c:	9104      	str	r1, [sp, #16]
 801e01e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e020:	e9cd 5a00 	strd	r5, sl, [sp]
 801e024:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801e028:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e02a:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801e02c:	47a0      	blx	r4
 801e02e:	b015      	add	sp, #84	; 0x54
 801e030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e034:	2300      	movs	r3, #0
 801e036:	e7c2      	b.n	801dfbe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801e038:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e03a:	e727      	b.n	801de8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 801e03c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e03e:	700b      	strb	r3, [r1, #0]
 801e040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e042:	704b      	strb	r3, [r1, #1]
 801e044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e046:	708b      	strb	r3, [r1, #2]
 801e048:	e78d      	b.n	801df66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801e04a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e04c:	b153      	cbz	r3, 801e064 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801e04e:	441c      	add	r4, r3
 801e050:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e052:	b2a4      	uxth	r4, r4
 801e054:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801e058:	f004 0407 	and.w	r4, r4, #7
 801e05c:	781a      	ldrb	r2, [r3, #0]
 801e05e:	9324      	str	r3, [sp, #144]	; 0x90
 801e060:	4122      	asrs	r2, r4
 801e062:	b2d2      	uxtb	r2, r2
 801e064:	9b07      	ldr	r3, [sp, #28]
 801e066:	445b      	add	r3, fp
 801e068:	9307      	str	r3, [sp, #28]
 801e06a:	e72d      	b.n	801dec8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 801e06c:	200566d8 	.word	0x200566d8
 801e070:	200566e0 	.word	0x200566e0
 801e074:	200566da 	.word	0x200566da
 801e078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	d1d7      	bne.n	801e02e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801e07e:	4b06      	ldr	r3, [pc, #24]	; (801e098 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801e080:	6818      	ldr	r0, [r3, #0]
 801e082:	6803      	ldr	r3, [r0, #0]
 801e084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e086:	4798      	blx	r3
 801e088:	e7d1      	b.n	801e02e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801e08a:	2b00      	cmp	r3, #0
 801e08c:	f43f aea8 	beq.w	801dde0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e090:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e094:	e79e      	b.n	801dfd4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801e096:	bf00      	nop
 801e098:	200566e0 	.word	0x200566e0

0801e09c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e09c:	b538      	push	{r3, r4, r5, lr}
 801e09e:	4c15      	ldr	r4, [pc, #84]	; (801e0f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e0a0:	4605      	mov	r5, r0
 801e0a2:	7823      	ldrb	r3, [r4, #0]
 801e0a4:	f3bf 8f5b 	dmb	ish
 801e0a8:	07da      	lsls	r2, r3, #31
 801e0aa:	d40b      	bmi.n	801e0c4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e0ac:	4620      	mov	r0, r4
 801e0ae:	f006 fe34 	bl	8024d1a <__cxa_guard_acquire>
 801e0b2:	b138      	cbz	r0, 801e0c4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e0b4:	4620      	mov	r0, r4
 801e0b6:	f006 fe3c 	bl	8024d32 <__cxa_guard_release>
 801e0ba:	4a0f      	ldr	r2, [pc, #60]	; (801e0f8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e0bc:	490f      	ldr	r1, [pc, #60]	; (801e0fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e0be:	4810      	ldr	r0, [pc, #64]	; (801e100 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e0c0:	f006 fe24 	bl	8024d0c <__aeabi_atexit>
 801e0c4:	4c0f      	ldr	r4, [pc, #60]	; (801e104 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e0c6:	7823      	ldrb	r3, [r4, #0]
 801e0c8:	f3bf 8f5b 	dmb	ish
 801e0cc:	07db      	lsls	r3, r3, #31
 801e0ce:	d40b      	bmi.n	801e0e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e0d0:	4620      	mov	r0, r4
 801e0d2:	f006 fe22 	bl	8024d1a <__cxa_guard_acquire>
 801e0d6:	b138      	cbz	r0, 801e0e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e0d8:	4620      	mov	r0, r4
 801e0da:	f006 fe2a 	bl	8024d32 <__cxa_guard_release>
 801e0de:	4a06      	ldr	r2, [pc, #24]	; (801e0f8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e0e0:	4909      	ldr	r1, [pc, #36]	; (801e108 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e0e2:	480a      	ldr	r0, [pc, #40]	; (801e10c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e0e4:	f006 fe12 	bl	8024d0c <__aeabi_atexit>
 801e0e8:	4b05      	ldr	r3, [pc, #20]	; (801e100 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e0ea:	612b      	str	r3, [r5, #16]
 801e0ec:	4b07      	ldr	r3, [pc, #28]	; (801e10c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e0ee:	616b      	str	r3, [r5, #20]
 801e0f0:	bd38      	pop	{r3, r4, r5, pc}
 801e0f2:	bf00      	nop
 801e0f4:	200567cc 	.word	0x200567cc
 801e0f8:	20000000 	.word	0x20000000
 801e0fc:	0801c9e7 	.word	0x0801c9e7
 801e100:	20000060 	.word	0x20000060
 801e104:	200567d0 	.word	0x200567d0
 801e108:	0801c9e5 	.word	0x0801c9e5
 801e10c:	20000064 	.word	0x20000064

0801e110 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e110:	b538      	push	{r3, r4, r5, lr}
 801e112:	4c15      	ldr	r4, [pc, #84]	; (801e168 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e114:	4605      	mov	r5, r0
 801e116:	7823      	ldrb	r3, [r4, #0]
 801e118:	f3bf 8f5b 	dmb	ish
 801e11c:	07da      	lsls	r2, r3, #31
 801e11e:	d40b      	bmi.n	801e138 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e120:	4620      	mov	r0, r4
 801e122:	f006 fdfa 	bl	8024d1a <__cxa_guard_acquire>
 801e126:	b138      	cbz	r0, 801e138 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e128:	4620      	mov	r0, r4
 801e12a:	f006 fe02 	bl	8024d32 <__cxa_guard_release>
 801e12e:	4a0f      	ldr	r2, [pc, #60]	; (801e16c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e130:	490f      	ldr	r1, [pc, #60]	; (801e170 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e132:	4810      	ldr	r0, [pc, #64]	; (801e174 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e134:	f006 fdea 	bl	8024d0c <__aeabi_atexit>
 801e138:	4c0f      	ldr	r4, [pc, #60]	; (801e178 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e13a:	7823      	ldrb	r3, [r4, #0]
 801e13c:	f3bf 8f5b 	dmb	ish
 801e140:	07db      	lsls	r3, r3, #31
 801e142:	d40b      	bmi.n	801e15c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e144:	4620      	mov	r0, r4
 801e146:	f006 fde8 	bl	8024d1a <__cxa_guard_acquire>
 801e14a:	b138      	cbz	r0, 801e15c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e14c:	4620      	mov	r0, r4
 801e14e:	f006 fdf0 	bl	8024d32 <__cxa_guard_release>
 801e152:	4a06      	ldr	r2, [pc, #24]	; (801e16c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e154:	4909      	ldr	r1, [pc, #36]	; (801e17c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e156:	480a      	ldr	r0, [pc, #40]	; (801e180 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e158:	f006 fdd8 	bl	8024d0c <__aeabi_atexit>
 801e15c:	4b05      	ldr	r3, [pc, #20]	; (801e174 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e15e:	60ab      	str	r3, [r5, #8]
 801e160:	4b07      	ldr	r3, [pc, #28]	; (801e180 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e162:	60eb      	str	r3, [r5, #12]
 801e164:	bd38      	pop	{r3, r4, r5, pc}
 801e166:	bf00      	nop
 801e168:	200567ac 	.word	0x200567ac
 801e16c:	20000000 	.word	0x20000000
 801e170:	0801c9eb 	.word	0x0801c9eb
 801e174:	20000040 	.word	0x20000040
 801e178:	200567b0 	.word	0x200567b0
 801e17c:	0801c9e9 	.word	0x0801c9e9
 801e180:	20000044 	.word	0x20000044

0801e184 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801e184:	b510      	push	{r4, lr}
 801e186:	4604      	mov	r4, r0
 801e188:	f7ff ff88 	bl	801e09c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e18c:	4620      	mov	r0, r4
 801e18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e192:	f7ff bfbd 	b.w	801e110 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e198 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e198:	b538      	push	{r3, r4, r5, lr}
 801e19a:	4c15      	ldr	r4, [pc, #84]	; (801e1f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e19c:	4605      	mov	r5, r0
 801e19e:	7823      	ldrb	r3, [r4, #0]
 801e1a0:	f3bf 8f5b 	dmb	ish
 801e1a4:	07da      	lsls	r2, r3, #31
 801e1a6:	d40b      	bmi.n	801e1c0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e1a8:	4620      	mov	r0, r4
 801e1aa:	f006 fdb6 	bl	8024d1a <__cxa_guard_acquire>
 801e1ae:	b138      	cbz	r0, 801e1c0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e1b0:	4620      	mov	r0, r4
 801e1b2:	f006 fdbe 	bl	8024d32 <__cxa_guard_release>
 801e1b6:	4a0f      	ldr	r2, [pc, #60]	; (801e1f4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e1b8:	490f      	ldr	r1, [pc, #60]	; (801e1f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e1ba:	4810      	ldr	r0, [pc, #64]	; (801e1fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e1bc:	f006 fda6 	bl	8024d0c <__aeabi_atexit>
 801e1c0:	4c0f      	ldr	r4, [pc, #60]	; (801e200 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e1c2:	7823      	ldrb	r3, [r4, #0]
 801e1c4:	f3bf 8f5b 	dmb	ish
 801e1c8:	07db      	lsls	r3, r3, #31
 801e1ca:	d40b      	bmi.n	801e1e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e1cc:	4620      	mov	r0, r4
 801e1ce:	f006 fda4 	bl	8024d1a <__cxa_guard_acquire>
 801e1d2:	b138      	cbz	r0, 801e1e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e1d4:	4620      	mov	r0, r4
 801e1d6:	f006 fdac 	bl	8024d32 <__cxa_guard_release>
 801e1da:	4a06      	ldr	r2, [pc, #24]	; (801e1f4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e1dc:	4909      	ldr	r1, [pc, #36]	; (801e204 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e1de:	480a      	ldr	r0, [pc, #40]	; (801e208 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e1e0:	f006 fd94 	bl	8024d0c <__aeabi_atexit>
 801e1e4:	4b05      	ldr	r3, [pc, #20]	; (801e1fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e1e6:	622b      	str	r3, [r5, #32]
 801e1e8:	4b07      	ldr	r3, [pc, #28]	; (801e208 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e1ea:	626b      	str	r3, [r5, #36]	; 0x24
 801e1ec:	bd38      	pop	{r3, r4, r5, pc}
 801e1ee:	bf00      	nop
 801e1f0:	200567d4 	.word	0x200567d4
 801e1f4:	20000000 	.word	0x20000000
 801e1f8:	0801c9df 	.word	0x0801c9df
 801e1fc:	20000068 	.word	0x20000068
 801e200:	200567d8 	.word	0x200567d8
 801e204:	0801c9dd 	.word	0x0801c9dd
 801e208:	2000006c 	.word	0x2000006c

0801e20c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e20c:	b538      	push	{r3, r4, r5, lr}
 801e20e:	4c15      	ldr	r4, [pc, #84]	; (801e264 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e210:	4605      	mov	r5, r0
 801e212:	7823      	ldrb	r3, [r4, #0]
 801e214:	f3bf 8f5b 	dmb	ish
 801e218:	07da      	lsls	r2, r3, #31
 801e21a:	d40b      	bmi.n	801e234 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e21c:	4620      	mov	r0, r4
 801e21e:	f006 fd7c 	bl	8024d1a <__cxa_guard_acquire>
 801e222:	b138      	cbz	r0, 801e234 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e224:	4620      	mov	r0, r4
 801e226:	f006 fd84 	bl	8024d32 <__cxa_guard_release>
 801e22a:	4a0f      	ldr	r2, [pc, #60]	; (801e268 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e22c:	490f      	ldr	r1, [pc, #60]	; (801e26c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e22e:	4810      	ldr	r0, [pc, #64]	; (801e270 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e230:	f006 fd6c 	bl	8024d0c <__aeabi_atexit>
 801e234:	4c0f      	ldr	r4, [pc, #60]	; (801e274 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e236:	7823      	ldrb	r3, [r4, #0]
 801e238:	f3bf 8f5b 	dmb	ish
 801e23c:	07db      	lsls	r3, r3, #31
 801e23e:	d40b      	bmi.n	801e258 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e240:	4620      	mov	r0, r4
 801e242:	f006 fd6a 	bl	8024d1a <__cxa_guard_acquire>
 801e246:	b138      	cbz	r0, 801e258 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e248:	4620      	mov	r0, r4
 801e24a:	f006 fd72 	bl	8024d32 <__cxa_guard_release>
 801e24e:	4a06      	ldr	r2, [pc, #24]	; (801e268 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e250:	4909      	ldr	r1, [pc, #36]	; (801e278 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e252:	480a      	ldr	r0, [pc, #40]	; (801e27c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e254:	f006 fd5a 	bl	8024d0c <__aeabi_atexit>
 801e258:	4b05      	ldr	r3, [pc, #20]	; (801e270 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e25a:	61ab      	str	r3, [r5, #24]
 801e25c:	4b07      	ldr	r3, [pc, #28]	; (801e27c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e25e:	61eb      	str	r3, [r5, #28]
 801e260:	bd38      	pop	{r3, r4, r5, pc}
 801e262:	bf00      	nop
 801e264:	200567b4 	.word	0x200567b4
 801e268:	20000000 	.word	0x20000000
 801e26c:	0801c9e3 	.word	0x0801c9e3
 801e270:	20000048 	.word	0x20000048
 801e274:	200567b8 	.word	0x200567b8
 801e278:	0801c9e1 	.word	0x0801c9e1
 801e27c:	2000004c 	.word	0x2000004c

0801e280 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e280:	b510      	push	{r4, lr}
 801e282:	4604      	mov	r4, r0
 801e284:	f7ff ff88 	bl	801e198 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e288:	4620      	mov	r0, r4
 801e28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e28e:	f7ff bfbd 	b.w	801e20c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e294 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801e294:	b538      	push	{r3, r4, r5, lr}
 801e296:	4c15      	ldr	r4, [pc, #84]	; (801e2ec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801e298:	4605      	mov	r5, r0
 801e29a:	7823      	ldrb	r3, [r4, #0]
 801e29c:	f3bf 8f5b 	dmb	ish
 801e2a0:	07da      	lsls	r2, r3, #31
 801e2a2:	d40b      	bmi.n	801e2bc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e2a4:	4620      	mov	r0, r4
 801e2a6:	f006 fd38 	bl	8024d1a <__cxa_guard_acquire>
 801e2aa:	b138      	cbz	r0, 801e2bc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e2ac:	4620      	mov	r0, r4
 801e2ae:	f006 fd40 	bl	8024d32 <__cxa_guard_release>
 801e2b2:	4a0f      	ldr	r2, [pc, #60]	; (801e2f0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e2b4:	490f      	ldr	r1, [pc, #60]	; (801e2f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801e2b6:	4810      	ldr	r0, [pc, #64]	; (801e2f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e2b8:	f006 fd28 	bl	8024d0c <__aeabi_atexit>
 801e2bc:	4c0f      	ldr	r4, [pc, #60]	; (801e2fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801e2be:	7823      	ldrb	r3, [r4, #0]
 801e2c0:	f3bf 8f5b 	dmb	ish
 801e2c4:	07db      	lsls	r3, r3, #31
 801e2c6:	d40b      	bmi.n	801e2e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e2c8:	4620      	mov	r0, r4
 801e2ca:	f006 fd26 	bl	8024d1a <__cxa_guard_acquire>
 801e2ce:	b138      	cbz	r0, 801e2e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e2d0:	4620      	mov	r0, r4
 801e2d2:	f006 fd2e 	bl	8024d32 <__cxa_guard_release>
 801e2d6:	4a06      	ldr	r2, [pc, #24]	; (801e2f0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e2d8:	4909      	ldr	r1, [pc, #36]	; (801e300 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801e2da:	480a      	ldr	r0, [pc, #40]	; (801e304 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e2dc:	f006 fd16 	bl	8024d0c <__aeabi_atexit>
 801e2e0:	4b05      	ldr	r3, [pc, #20]	; (801e2f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e2e2:	632b      	str	r3, [r5, #48]	; 0x30
 801e2e4:	4b07      	ldr	r3, [pc, #28]	; (801e304 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e2e6:	636b      	str	r3, [r5, #52]	; 0x34
 801e2e8:	bd38      	pop	{r3, r4, r5, pc}
 801e2ea:	bf00      	nop
 801e2ec:	200567bc 	.word	0x200567bc
 801e2f0:	20000000 	.word	0x20000000
 801e2f4:	0801c9d7 	.word	0x0801c9d7
 801e2f8:	20000050 	.word	0x20000050
 801e2fc:	200567c0 	.word	0x200567c0
 801e300:	0801c9d5 	.word	0x0801c9d5
 801e304:	20000054 	.word	0x20000054

0801e308 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801e308:	b538      	push	{r3, r4, r5, lr}
 801e30a:	4c15      	ldr	r4, [pc, #84]	; (801e360 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801e30c:	4605      	mov	r5, r0
 801e30e:	7823      	ldrb	r3, [r4, #0]
 801e310:	f3bf 8f5b 	dmb	ish
 801e314:	07da      	lsls	r2, r3, #31
 801e316:	d40b      	bmi.n	801e330 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e318:	4620      	mov	r0, r4
 801e31a:	f006 fcfe 	bl	8024d1a <__cxa_guard_acquire>
 801e31e:	b138      	cbz	r0, 801e330 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e320:	4620      	mov	r0, r4
 801e322:	f006 fd06 	bl	8024d32 <__cxa_guard_release>
 801e326:	4a0f      	ldr	r2, [pc, #60]	; (801e364 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e328:	490f      	ldr	r1, [pc, #60]	; (801e368 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801e32a:	4810      	ldr	r0, [pc, #64]	; (801e36c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e32c:	f006 fcee 	bl	8024d0c <__aeabi_atexit>
 801e330:	4c0f      	ldr	r4, [pc, #60]	; (801e370 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801e332:	7823      	ldrb	r3, [r4, #0]
 801e334:	f3bf 8f5b 	dmb	ish
 801e338:	07db      	lsls	r3, r3, #31
 801e33a:	d40b      	bmi.n	801e354 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e33c:	4620      	mov	r0, r4
 801e33e:	f006 fcec 	bl	8024d1a <__cxa_guard_acquire>
 801e342:	b138      	cbz	r0, 801e354 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e344:	4620      	mov	r0, r4
 801e346:	f006 fcf4 	bl	8024d32 <__cxa_guard_release>
 801e34a:	4a06      	ldr	r2, [pc, #24]	; (801e364 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e34c:	4909      	ldr	r1, [pc, #36]	; (801e374 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801e34e:	480a      	ldr	r0, [pc, #40]	; (801e378 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e350:	f006 fcdc 	bl	8024d0c <__aeabi_atexit>
 801e354:	4b05      	ldr	r3, [pc, #20]	; (801e36c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e356:	62ab      	str	r3, [r5, #40]	; 0x28
 801e358:	4b07      	ldr	r3, [pc, #28]	; (801e378 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e35a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e35c:	bd38      	pop	{r3, r4, r5, pc}
 801e35e:	bf00      	nop
 801e360:	20056794 	.word	0x20056794
 801e364:	20000000 	.word	0x20000000
 801e368:	0801c9db 	.word	0x0801c9db
 801e36c:	20000028 	.word	0x20000028
 801e370:	20056798 	.word	0x20056798
 801e374:	0801c9d9 	.word	0x0801c9d9
 801e378:	2000002c 	.word	0x2000002c

0801e37c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801e37c:	b510      	push	{r4, lr}
 801e37e:	4604      	mov	r4, r0
 801e380:	f7ff ff88 	bl	801e294 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801e384:	4620      	mov	r0, r4
 801e386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e38a:	f7ff bfbd 	b.w	801e308 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801e390 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e390:	b538      	push	{r3, r4, r5, lr}
 801e392:	4c15      	ldr	r4, [pc, #84]	; (801e3e8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e394:	4605      	mov	r5, r0
 801e396:	7823      	ldrb	r3, [r4, #0]
 801e398:	f3bf 8f5b 	dmb	ish
 801e39c:	07da      	lsls	r2, r3, #31
 801e39e:	d40b      	bmi.n	801e3b8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e3a0:	4620      	mov	r0, r4
 801e3a2:	f006 fcba 	bl	8024d1a <__cxa_guard_acquire>
 801e3a6:	b138      	cbz	r0, 801e3b8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e3a8:	4620      	mov	r0, r4
 801e3aa:	f006 fcc2 	bl	8024d32 <__cxa_guard_release>
 801e3ae:	4a0f      	ldr	r2, [pc, #60]	; (801e3ec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e3b0:	490f      	ldr	r1, [pc, #60]	; (801e3f0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e3b2:	4810      	ldr	r0, [pc, #64]	; (801e3f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e3b4:	f006 fcaa 	bl	8024d0c <__aeabi_atexit>
 801e3b8:	4c0f      	ldr	r4, [pc, #60]	; (801e3f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e3ba:	7823      	ldrb	r3, [r4, #0]
 801e3bc:	f3bf 8f5b 	dmb	ish
 801e3c0:	07db      	lsls	r3, r3, #31
 801e3c2:	d40b      	bmi.n	801e3dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e3c4:	4620      	mov	r0, r4
 801e3c6:	f006 fca8 	bl	8024d1a <__cxa_guard_acquire>
 801e3ca:	b138      	cbz	r0, 801e3dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e3cc:	4620      	mov	r0, r4
 801e3ce:	f006 fcb0 	bl	8024d32 <__cxa_guard_release>
 801e3d2:	4a06      	ldr	r2, [pc, #24]	; (801e3ec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e3d4:	4909      	ldr	r1, [pc, #36]	; (801e3fc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e3d6:	480a      	ldr	r0, [pc, #40]	; (801e400 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e3d8:	f006 fc98 	bl	8024d0c <__aeabi_atexit>
 801e3dc:	4b05      	ldr	r3, [pc, #20]	; (801e3f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e3de:	642b      	str	r3, [r5, #64]	; 0x40
 801e3e0:	4b07      	ldr	r3, [pc, #28]	; (801e400 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e3e2:	646b      	str	r3, [r5, #68]	; 0x44
 801e3e4:	bd38      	pop	{r3, r4, r5, pc}
 801e3e6:	bf00      	nop
 801e3e8:	200567c4 	.word	0x200567c4
 801e3ec:	20000000 	.word	0x20000000
 801e3f0:	0801c9cf 	.word	0x0801c9cf
 801e3f4:	20000058 	.word	0x20000058
 801e3f8:	200567c8 	.word	0x200567c8
 801e3fc:	0801c9cd 	.word	0x0801c9cd
 801e400:	2000005c 	.word	0x2000005c

0801e404 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e404:	b538      	push	{r3, r4, r5, lr}
 801e406:	4c15      	ldr	r4, [pc, #84]	; (801e45c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e408:	4605      	mov	r5, r0
 801e40a:	7823      	ldrb	r3, [r4, #0]
 801e40c:	f3bf 8f5b 	dmb	ish
 801e410:	07da      	lsls	r2, r3, #31
 801e412:	d40b      	bmi.n	801e42c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e414:	4620      	mov	r0, r4
 801e416:	f006 fc80 	bl	8024d1a <__cxa_guard_acquire>
 801e41a:	b138      	cbz	r0, 801e42c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e41c:	4620      	mov	r0, r4
 801e41e:	f006 fc88 	bl	8024d32 <__cxa_guard_release>
 801e422:	4a0f      	ldr	r2, [pc, #60]	; (801e460 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e424:	490f      	ldr	r1, [pc, #60]	; (801e464 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e426:	4810      	ldr	r0, [pc, #64]	; (801e468 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e428:	f006 fc70 	bl	8024d0c <__aeabi_atexit>
 801e42c:	4c0f      	ldr	r4, [pc, #60]	; (801e46c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e42e:	7823      	ldrb	r3, [r4, #0]
 801e430:	f3bf 8f5b 	dmb	ish
 801e434:	07db      	lsls	r3, r3, #31
 801e436:	d40b      	bmi.n	801e450 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e438:	4620      	mov	r0, r4
 801e43a:	f006 fc6e 	bl	8024d1a <__cxa_guard_acquire>
 801e43e:	b138      	cbz	r0, 801e450 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e440:	4620      	mov	r0, r4
 801e442:	f006 fc76 	bl	8024d32 <__cxa_guard_release>
 801e446:	4a06      	ldr	r2, [pc, #24]	; (801e460 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e448:	4909      	ldr	r1, [pc, #36]	; (801e470 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e44a:	480a      	ldr	r0, [pc, #40]	; (801e474 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e44c:	f006 fc5e 	bl	8024d0c <__aeabi_atexit>
 801e450:	4b05      	ldr	r3, [pc, #20]	; (801e468 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e452:	63ab      	str	r3, [r5, #56]	; 0x38
 801e454:	4b07      	ldr	r3, [pc, #28]	; (801e474 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e456:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e458:	bd38      	pop	{r3, r4, r5, pc}
 801e45a:	bf00      	nop
 801e45c:	200567a4 	.word	0x200567a4
 801e460:	20000000 	.word	0x20000000
 801e464:	0801c9d3 	.word	0x0801c9d3
 801e468:	20000038 	.word	0x20000038
 801e46c:	200567a8 	.word	0x200567a8
 801e470:	0801c9d1 	.word	0x0801c9d1
 801e474:	2000003c 	.word	0x2000003c

0801e478 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801e478:	b510      	push	{r4, lr}
 801e47a:	4604      	mov	r4, r0
 801e47c:	f7ff ff88 	bl	801e390 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e480:	4620      	mov	r0, r4
 801e482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e486:	f7ff bfbd 	b.w	801e404 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e48c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e48c:	b538      	push	{r3, r4, r5, lr}
 801e48e:	4c15      	ldr	r4, [pc, #84]	; (801e4e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e490:	4605      	mov	r5, r0
 801e492:	7823      	ldrb	r3, [r4, #0]
 801e494:	f3bf 8f5b 	dmb	ish
 801e498:	07da      	lsls	r2, r3, #31
 801e49a:	d40b      	bmi.n	801e4b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e49c:	4620      	mov	r0, r4
 801e49e:	f006 fc3c 	bl	8024d1a <__cxa_guard_acquire>
 801e4a2:	b138      	cbz	r0, 801e4b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e4a4:	4620      	mov	r0, r4
 801e4a6:	f006 fc44 	bl	8024d32 <__cxa_guard_release>
 801e4aa:	4a0f      	ldr	r2, [pc, #60]	; (801e4e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e4ac:	490f      	ldr	r1, [pc, #60]	; (801e4ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e4ae:	4810      	ldr	r0, [pc, #64]	; (801e4f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e4b0:	f006 fc2c 	bl	8024d0c <__aeabi_atexit>
 801e4b4:	4c0f      	ldr	r4, [pc, #60]	; (801e4f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e4b6:	7823      	ldrb	r3, [r4, #0]
 801e4b8:	f3bf 8f5b 	dmb	ish
 801e4bc:	07db      	lsls	r3, r3, #31
 801e4be:	d40b      	bmi.n	801e4d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e4c0:	4620      	mov	r0, r4
 801e4c2:	f006 fc2a 	bl	8024d1a <__cxa_guard_acquire>
 801e4c6:	b138      	cbz	r0, 801e4d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e4c8:	4620      	mov	r0, r4
 801e4ca:	f006 fc32 	bl	8024d32 <__cxa_guard_release>
 801e4ce:	4a06      	ldr	r2, [pc, #24]	; (801e4e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e4d0:	4909      	ldr	r1, [pc, #36]	; (801e4f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e4d2:	480a      	ldr	r0, [pc, #40]	; (801e4fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e4d4:	f006 fc1a 	bl	8024d0c <__aeabi_atexit>
 801e4d8:	4b05      	ldr	r3, [pc, #20]	; (801e4f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e4da:	652b      	str	r3, [r5, #80]	; 0x50
 801e4dc:	4b07      	ldr	r3, [pc, #28]	; (801e4fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e4de:	656b      	str	r3, [r5, #84]	; 0x54
 801e4e0:	bd38      	pop	{r3, r4, r5, pc}
 801e4e2:	bf00      	nop
 801e4e4:	2005679c 	.word	0x2005679c
 801e4e8:	20000000 	.word	0x20000000
 801e4ec:	0801c9c7 	.word	0x0801c9c7
 801e4f0:	20000030 	.word	0x20000030
 801e4f4:	200567a0 	.word	0x200567a0
 801e4f8:	0801c9c5 	.word	0x0801c9c5
 801e4fc:	20000034 	.word	0x20000034

0801e500 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e500:	b538      	push	{r3, r4, r5, lr}
 801e502:	4c15      	ldr	r4, [pc, #84]	; (801e558 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e504:	4605      	mov	r5, r0
 801e506:	7823      	ldrb	r3, [r4, #0]
 801e508:	f3bf 8f5b 	dmb	ish
 801e50c:	07da      	lsls	r2, r3, #31
 801e50e:	d40b      	bmi.n	801e528 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e510:	4620      	mov	r0, r4
 801e512:	f006 fc02 	bl	8024d1a <__cxa_guard_acquire>
 801e516:	b138      	cbz	r0, 801e528 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e518:	4620      	mov	r0, r4
 801e51a:	f006 fc0a 	bl	8024d32 <__cxa_guard_release>
 801e51e:	4a0f      	ldr	r2, [pc, #60]	; (801e55c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e520:	490f      	ldr	r1, [pc, #60]	; (801e560 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e522:	4810      	ldr	r0, [pc, #64]	; (801e564 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e524:	f006 fbf2 	bl	8024d0c <__aeabi_atexit>
 801e528:	4c0f      	ldr	r4, [pc, #60]	; (801e568 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e52a:	7823      	ldrb	r3, [r4, #0]
 801e52c:	f3bf 8f5b 	dmb	ish
 801e530:	07db      	lsls	r3, r3, #31
 801e532:	d40b      	bmi.n	801e54c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e534:	4620      	mov	r0, r4
 801e536:	f006 fbf0 	bl	8024d1a <__cxa_guard_acquire>
 801e53a:	b138      	cbz	r0, 801e54c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e53c:	4620      	mov	r0, r4
 801e53e:	f006 fbf8 	bl	8024d32 <__cxa_guard_release>
 801e542:	4a06      	ldr	r2, [pc, #24]	; (801e55c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e544:	4909      	ldr	r1, [pc, #36]	; (801e56c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e546:	480a      	ldr	r0, [pc, #40]	; (801e570 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e548:	f006 fbe0 	bl	8024d0c <__aeabi_atexit>
 801e54c:	4b05      	ldr	r3, [pc, #20]	; (801e564 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e54e:	64ab      	str	r3, [r5, #72]	; 0x48
 801e550:	4b07      	ldr	r3, [pc, #28]	; (801e570 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e552:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e554:	bd38      	pop	{r3, r4, r5, pc}
 801e556:	bf00      	nop
 801e558:	2005678c 	.word	0x2005678c
 801e55c:	20000000 	.word	0x20000000
 801e560:	0801c9cb 	.word	0x0801c9cb
 801e564:	20000020 	.word	0x20000020
 801e568:	20056790 	.word	0x20056790
 801e56c:	0801c9c9 	.word	0x0801c9c9
 801e570:	20000024 	.word	0x20000024

0801e574 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801e574:	b510      	push	{r4, lr}
 801e576:	4604      	mov	r4, r0
 801e578:	f7ff ff88 	bl	801e48c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e57c:	4620      	mov	r0, r4
 801e57e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e582:	f7ff bfbd 	b.w	801e500 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801e586 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801e586:	b510      	push	{r4, lr}
 801e588:	4604      	mov	r4, r0
 801e58a:	f7ff fff3 	bl	801e574 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801e58e:	4620      	mov	r0, r4
 801e590:	f7ff ff72 	bl	801e478 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801e594:	4620      	mov	r0, r4
 801e596:	f7ff fe73 	bl	801e280 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801e59a:	4620      	mov	r0, r4
 801e59c:	f7ff fdf2 	bl	801e184 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801e5a0:	4620      	mov	r0, r4
 801e5a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5a6:	f7ff bee9 	b.w	801e37c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801e5ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801e5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5b0:	b087      	sub	sp, #28
 801e5b2:	7888      	ldrb	r0, [r1, #2]
 801e5b4:	4616      	mov	r6, r2
 801e5b6:	9001      	str	r0, [sp, #4]
 801e5b8:	7848      	ldrb	r0, [r1, #1]
 801e5ba:	9100      	str	r1, [sp, #0]
 801e5bc:	9002      	str	r0, [sp, #8]
 801e5be:	7808      	ldrb	r0, [r1, #0]
 801e5c0:	9901      	ldr	r1, [sp, #4]
 801e5c2:	9003      	str	r0, [sp, #12]
 801e5c4:	9802      	ldr	r0, [sp, #8]
 801e5c6:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801e5ca:	0200      	lsls	r0, r0, #8
 801e5cc:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801e5d0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801e5d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801e5d8:	9903      	ldr	r1, [sp, #12]
 801e5da:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801e5de:	4308      	orrs	r0, r1
 801e5e0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801e5e4:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801e5e8:	9005      	str	r0, [sp, #20]
 801e5ea:	fb05 ca0e 	mla	sl, r5, lr, ip
 801e5ee:	2d00      	cmp	r5, #0
 801e5f0:	eb06 080a 	add.w	r8, r6, sl
 801e5f4:	db4a      	blt.n	801e68c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 801e5f6:	45a9      	cmp	r9, r5
 801e5f8:	dd48      	ble.n	801e68c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 801e5fa:	f1bc 0f00 	cmp.w	ip, #0
 801e5fe:	db43      	blt.n	801e688 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 801e600:	45e6      	cmp	lr, ip
 801e602:	dd41      	ble.n	801e688 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 801e604:	f816 600a 	ldrb.w	r6, [r6, sl]
 801e608:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e60c:	441e      	add	r6, r3
 801e60e:	f11c 0001 	adds.w	r0, ip, #1
 801e612:	d43e      	bmi.n	801e692 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801e614:	4586      	cmp	lr, r0
 801e616:	dd3c      	ble.n	801e692 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801e618:	2a00      	cmp	r2, #0
 801e61a:	d03a      	beq.n	801e692 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801e61c:	f898 0001 	ldrb.w	r0, [r8, #1]
 801e620:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e624:	4418      	add	r0, r3
 801e626:	3501      	adds	r5, #1
 801e628:	d437      	bmi.n	801e69a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801e62a:	45a9      	cmp	r9, r5
 801e62c:	dd35      	ble.n	801e69a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801e62e:	b3a4      	cbz	r4, 801e69a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801e630:	f1bc 0f00 	cmp.w	ip, #0
 801e634:	db2f      	blt.n	801e696 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801e636:	45e6      	cmp	lr, ip
 801e638:	dd2d      	ble.n	801e696 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801e63a:	f818 500e 	ldrb.w	r5, [r8, lr]
 801e63e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e642:	441d      	add	r5, r3
 801e644:	f11c 0c01 	adds.w	ip, ip, #1
 801e648:	d42a      	bmi.n	801e6a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801e64a:	45e6      	cmp	lr, ip
 801e64c:	dd28      	ble.n	801e6a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801e64e:	b33a      	cbz	r2, 801e6a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801e650:	44c6      	add	lr, r8
 801e652:	f89e c001 	ldrb.w	ip, [lr, #1]
 801e656:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e65a:	4463      	add	r3, ip
 801e65c:	ea6f 0c07 	mvn.w	ip, r7
 801e660:	2a0f      	cmp	r2, #15
 801e662:	f896 a000 	ldrb.w	sl, [r6]
 801e666:	fa5f fc8c 	uxtb.w	ip, ip
 801e66a:	f890 b000 	ldrb.w	fp, [r0]
 801e66e:	f895 9000 	ldrb.w	r9, [r5]
 801e672:	7819      	ldrb	r1, [r3, #0]
 801e674:	d801      	bhi.n	801e67a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 801e676:	2c0f      	cmp	r4, #15
 801e678:	d914      	bls.n	801e6a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 801e67a:	4b40      	ldr	r3, [pc, #256]	; (801e77c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 801e67c:	f240 1157 	movw	r1, #343	; 0x157
 801e680:	4a3f      	ldr	r2, [pc, #252]	; (801e780 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801e682:	4840      	ldr	r0, [pc, #256]	; (801e784 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801e684:	f006 fbbe 	bl	8024e04 <__assert_func>
 801e688:	ae05      	add	r6, sp, #20
 801e68a:	e7c0      	b.n	801e60e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 801e68c:	a805      	add	r0, sp, #20
 801e68e:	4606      	mov	r6, r0
 801e690:	e7c9      	b.n	801e626 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 801e692:	a805      	add	r0, sp, #20
 801e694:	e7c7      	b.n	801e626 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 801e696:	ad05      	add	r5, sp, #20
 801e698:	e7d4      	b.n	801e644 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 801e69a:	ab05      	add	r3, sp, #20
 801e69c:	461d      	mov	r5, r3
 801e69e:	e7dd      	b.n	801e65c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 801e6a0:	ab05      	add	r3, sp, #20
 801e6a2:	e7db      	b.n	801e65c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 801e6a4:	b292      	uxth	r2, r2
 801e6a6:	b2a4      	uxth	r4, r4
 801e6a8:	fa1f fc8c 	uxth.w	ip, ip
 801e6ac:	fb02 f804 	mul.w	r8, r2, r4
 801e6b0:	0112      	lsls	r2, r2, #4
 801e6b2:	b2bf      	uxth	r7, r7
 801e6b4:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801e6b8:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801e6bc:	eba2 0208 	sub.w	r2, r2, r8
 801e6c0:	b2a4      	uxth	r4, r4
 801e6c2:	b292      	uxth	r2, r2
 801e6c4:	ebae 0e04 	sub.w	lr, lr, r4
 801e6c8:	fb02 fb0b 	mul.w	fp, r2, fp
 801e6cc:	fa1f fe8e 	uxth.w	lr, lr
 801e6d0:	fb0e ba0a 	mla	sl, lr, sl, fp
 801e6d4:	fb04 aa09 	mla	sl, r4, r9, sl
 801e6d8:	fb08 aa01 	mla	sl, r8, r1, sl
 801e6dc:	9903      	ldr	r1, [sp, #12]
 801e6de:	fb11 f90c 	smulbb	r9, r1, ip
 801e6e2:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801e6e6:	9900      	ldr	r1, [sp, #0]
 801e6e8:	fb0a 9a07 	mla	sl, sl, r7, r9
 801e6ec:	fa1f fa8a 	uxth.w	sl, sl
 801e6f0:	f10a 0901 	add.w	r9, sl, #1
 801e6f4:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801e6f8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e6fc:	f881 a000 	strb.w	sl, [r1]
 801e700:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e704:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e708:	fb02 fa0a 	mul.w	sl, r2, sl
 801e70c:	9902      	ldr	r1, [sp, #8]
 801e70e:	fb0e aa09 	mla	sl, lr, r9, sl
 801e712:	f895 9001 	ldrb.w	r9, [r5, #1]
 801e716:	fb04 aa09 	mla	sl, r4, r9, sl
 801e71a:	f893 9001 	ldrb.w	r9, [r3, #1]
 801e71e:	fb08 a909 	mla	r9, r8, r9, sl
 801e722:	fb11 fa0c 	smulbb	sl, r1, ip
 801e726:	9900      	ldr	r1, [sp, #0]
 801e728:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e72c:	fb09 a907 	mla	r9, r9, r7, sl
 801e730:	fa1f f989 	uxth.w	r9, r9
 801e734:	f109 0a01 	add.w	sl, r9, #1
 801e738:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e73c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e740:	f881 9001 	strb.w	r9, [r1, #1]
 801e744:	7880      	ldrb	r0, [r0, #2]
 801e746:	78b6      	ldrb	r6, [r6, #2]
 801e748:	4342      	muls	r2, r0
 801e74a:	78a8      	ldrb	r0, [r5, #2]
 801e74c:	789b      	ldrb	r3, [r3, #2]
 801e74e:	fb0e 2206 	mla	r2, lr, r6, r2
 801e752:	fb04 2400 	mla	r4, r4, r0, r2
 801e756:	fb08 4803 	mla	r8, r8, r3, r4
 801e75a:	9b01      	ldr	r3, [sp, #4]
 801e75c:	fb13 fc0c 	smulbb	ip, r3, ip
 801e760:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e764:	fb08 c707 	mla	r7, r8, r7, ip
 801e768:	b2bf      	uxth	r7, r7
 801e76a:	f107 0c01 	add.w	ip, r7, #1
 801e76e:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e772:	123f      	asrs	r7, r7, #8
 801e774:	708f      	strb	r7, [r1, #2]
 801e776:	b007      	add	sp, #28
 801e778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e77c:	0802ce1f 	.word	0x0802ce1f
 801e780:	0802d387 	.word	0x0802d387
 801e784:	0802cee8 	.word	0x0802cee8

0801e788 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e78c:	ed2d 8b08 	vpush	{d8-d11}
 801e790:	b093      	sub	sp, #76	; 0x4c
 801e792:	eeb0 aa40 	vmov.f32	s20, s0
 801e796:	eef0 9a60 	vmov.f32	s19, s1
 801e79a:	9210      	str	r2, [sp, #64]	; 0x40
 801e79c:	eeb0 9a41 	vmov.f32	s18, s2
 801e7a0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e7a2:	eeb0 8a62 	vmov.f32	s16, s5
 801e7a6:	9309      	str	r3, [sp, #36]	; 0x24
 801e7a8:	eef0 8a43 	vmov.f32	s17, s6
 801e7ac:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 801e7b0:	eef0 ba44 	vmov.f32	s23, s8
 801e7b4:	9011      	str	r0, [sp, #68]	; 0x44
 801e7b6:	eeb0 ba64 	vmov.f32	s22, s9
 801e7ba:	930e      	str	r3, [sp, #56]	; 0x38
 801e7bc:	eef0 aa45 	vmov.f32	s21, s10
 801e7c0:	6850      	ldr	r0, [r2, #4]
 801e7c2:	910d      	str	r1, [sp, #52]	; 0x34
 801e7c4:	6812      	ldr	r2, [r2, #0]
 801e7c6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801e7ca:	fb00 1303 	mla	r3, r0, r3, r1
 801e7ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e7d2:	18d3      	adds	r3, r2, r3
 801e7d4:	930a      	str	r3, [sp, #40]	; 0x28
 801e7d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e7d8:	681b      	ldr	r3, [r3, #0]
 801e7da:	930c      	str	r3, [sp, #48]	; 0x30
 801e7dc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e7de:	685c      	ldr	r4, [r3, #4]
 801e7e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e7e2:	3404      	adds	r4, #4
 801e7e4:	43db      	mvns	r3, r3
 801e7e6:	b2db      	uxtb	r3, r3
 801e7e8:	930b      	str	r3, [sp, #44]	; 0x2c
 801e7ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e7ec:	2b00      	cmp	r3, #0
 801e7ee:	dc03      	bgt.n	801e7f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e7f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	f340 8250 	ble.w	801ec98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801e7f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e7fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e7fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e802:	1e48      	subs	r0, r1, #1
 801e804:	1e55      	subs	r5, r2, #1
 801e806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e808:	2b00      	cmp	r3, #0
 801e80a:	f340 80ee 	ble.w	801e9ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801e80e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801e810:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e812:	1436      	asrs	r6, r6, #16
 801e814:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e818:	d406      	bmi.n	801e828 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e81a:	4286      	cmp	r6, r0
 801e81c:	da04      	bge.n	801e828 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e81e:	2b00      	cmp	r3, #0
 801e820:	db02      	blt.n	801e828 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e822:	42ab      	cmp	r3, r5
 801e824:	f2c0 80e2 	blt.w	801e9ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801e828:	3601      	adds	r6, #1
 801e82a:	f100 80cf 	bmi.w	801e9cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801e82e:	42b1      	cmp	r1, r6
 801e830:	f2c0 80cc 	blt.w	801e9cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801e834:	3301      	adds	r3, #1
 801e836:	f100 80c9 	bmi.w	801e9cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801e83a:	429a      	cmp	r2, r3
 801e83c:	f2c0 80c6 	blt.w	801e9cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801e840:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801e844:	f1bb 0f00 	cmp.w	fp, #0
 801e848:	f340 80f1 	ble.w	801ea2e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e84c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e84e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e850:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801e852:	141d      	asrs	r5, r3, #16
 801e854:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e856:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e85a:	68c7      	ldr	r7, [r0, #12]
 801e85c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801e85e:	1418      	asrs	r0, r3, #16
 801e860:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801e864:	6892      	ldr	r2, [r2, #8]
 801e866:	f100 8137 	bmi.w	801ead8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801e86a:	f102 3cff 	add.w	ip, r2, #4294967295
 801e86e:	4560      	cmp	r0, ip
 801e870:	f280 8132 	bge.w	801ead8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801e874:	2d00      	cmp	r5, #0
 801e876:	f2c0 812f 	blt.w	801ead8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801e87a:	f107 3cff 	add.w	ip, r7, #4294967295
 801e87e:	4565      	cmp	r5, ip
 801e880:	f280 812a 	bge.w	801ead8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801e884:	b212      	sxth	r2, r2
 801e886:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e888:	fb05 0002 	mla	r0, r5, r2, r0
 801e88c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e88e:	f817 c000 	ldrb.w	ip, [r7, r0]
 801e892:	4405      	add	r5, r0
 801e894:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e898:	eb04 0e0c 	add.w	lr, r4, ip
 801e89c:	f1b8 0f00 	cmp.w	r8, #0
 801e8a0:	f000 810c 	beq.w	801eabc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 801e8a4:	786f      	ldrb	r7, [r5, #1]
 801e8a6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e8aa:	4427      	add	r7, r4
 801e8ac:	2900      	cmp	r1, #0
 801e8ae:	f000 810d 	beq.w	801eacc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e8b2:	18a8      	adds	r0, r5, r2
 801e8b4:	5caa      	ldrb	r2, [r5, r2]
 801e8b6:	7840      	ldrb	r0, [r0, #1]
 801e8b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e8bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e8c0:	4422      	add	r2, r4
 801e8c2:	4420      	add	r0, r4
 801e8c4:	fa1f f388 	uxth.w	r3, r8
 801e8c8:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801e8cc:	b289      	uxth	r1, r1
 801e8ce:	f897 c000 	ldrb.w	ip, [r7]
 801e8d2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801e8d6:	fb03 f901 	mul.w	r9, r3, r1
 801e8da:	011b      	lsls	r3, r3, #4
 801e8dc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e8e0:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801e8e4:	eba3 0309 	sub.w	r3, r3, r9
 801e8e8:	b289      	uxth	r1, r1
 801e8ea:	b29b      	uxth	r3, r3
 801e8ec:	eba8 0801 	sub.w	r8, r8, r1
 801e8f0:	fb03 fc0c 	mul.w	ip, r3, ip
 801e8f4:	fa1f f888 	uxth.w	r8, r8
 801e8f8:	930f      	str	r3, [sp, #60]	; 0x3c
 801e8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e8fc:	fb08 cc0a 	mla	ip, r8, sl, ip
 801e900:	f892 a000 	ldrb.w	sl, [r2]
 801e904:	fb01 cc0a 	mla	ip, r1, sl, ip
 801e908:	f890 a000 	ldrb.w	sl, [r0]
 801e90c:	fb09 cc0a 	mla	ip, r9, sl, ip
 801e910:	f896 a000 	ldrb.w	sl, [r6]
 801e914:	fb1a fa03 	smulbb	sl, sl, r3
 801e918:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801e91c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e91e:	fb0c ac05 	mla	ip, ip, r5, sl
 801e922:	fa1f fc8c 	uxth.w	ip, ip
 801e926:	f10c 0a01 	add.w	sl, ip, #1
 801e92a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801e92e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e932:	f886 a000 	strb.w	sl, [r6]
 801e936:	f897 c001 	ldrb.w	ip, [r7, #1]
 801e93a:	f89e a001 	ldrb.w	sl, [lr, #1]
 801e93e:	fb03 fc0c 	mul.w	ip, r3, ip
 801e942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e944:	fb08 cc0a 	mla	ip, r8, sl, ip
 801e948:	f892 a001 	ldrb.w	sl, [r2, #1]
 801e94c:	fb01 cc0a 	mla	ip, r1, sl, ip
 801e950:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e954:	fb09 cc0a 	mla	ip, r9, sl, ip
 801e958:	f896 a001 	ldrb.w	sl, [r6, #1]
 801e95c:	fb1a fa03 	smulbb	sl, sl, r3
 801e960:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801e964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e966:	fb0c ac05 	mla	ip, ip, r5, sl
 801e96a:	fa1f fc8c 	uxth.w	ip, ip
 801e96e:	f10c 0a01 	add.w	sl, ip, #1
 801e972:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801e976:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e97a:	f886 c001 	strb.w	ip, [r6, #1]
 801e97e:	78bf      	ldrb	r7, [r7, #2]
 801e980:	f89e c002 	ldrb.w	ip, [lr, #2]
 801e984:	437b      	muls	r3, r7
 801e986:	fb08 330c 	mla	r3, r8, ip, r3
 801e98a:	f892 c002 	ldrb.w	ip, [r2, #2]
 801e98e:	7882      	ldrb	r2, [r0, #2]
 801e990:	fb01 310c 	mla	r1, r1, ip, r3
 801e994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e996:	fb09 1902 	mla	r9, r9, r2, r1
 801e99a:	78b1      	ldrb	r1, [r6, #2]
 801e99c:	fb11 f103 	smulbb	r1, r1, r3
 801e9a0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e9a4:	fb09 1505 	mla	r5, r9, r5, r1
 801e9a8:	b2ad      	uxth	r5, r5
 801e9aa:	1c6b      	adds	r3, r5, #1
 801e9ac:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e9b0:	122d      	asrs	r5, r5, #8
 801e9b2:	70b5      	strb	r5, [r6, #2]
 801e9b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e9b6:	3603      	adds	r6, #3
 801e9b8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e9ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e9be:	4413      	add	r3, r2
 801e9c0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801e9c2:	9325      	str	r3, [sp, #148]	; 0x94
 801e9c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e9c6:	4413      	add	r3, r2
 801e9c8:	9326      	str	r3, [sp, #152]	; 0x98
 801e9ca:	e73b      	b.n	801e844 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 801e9cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e9ce:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801e9d0:	4433      	add	r3, r6
 801e9d2:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801e9d4:	9325      	str	r3, [sp, #148]	; 0x94
 801e9d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e9d8:	4433      	add	r3, r6
 801e9da:	9326      	str	r3, [sp, #152]	; 0x98
 801e9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e9de:	3b01      	subs	r3, #1
 801e9e0:	9309      	str	r3, [sp, #36]	; 0x24
 801e9e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e9e4:	3303      	adds	r3, #3
 801e9e6:	930a      	str	r3, [sp, #40]	; 0x28
 801e9e8:	e70d      	b.n	801e806 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e9ea:	d028      	beq.n	801ea3e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e9ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e9ee:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801e9f0:	3b01      	subs	r3, #1
 801e9f2:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801e9f4:	fb00 5003 	mla	r0, r0, r3, r5
 801e9f8:	1400      	asrs	r0, r0, #16
 801e9fa:	f53f af21 	bmi.w	801e840 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801e9fe:	3901      	subs	r1, #1
 801ea00:	4288      	cmp	r0, r1
 801ea02:	f6bf af1d 	bge.w	801e840 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ea06:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ea08:	9826      	ldr	r0, [sp, #152]	; 0x98
 801ea0a:	fb01 0303 	mla	r3, r1, r3, r0
 801ea0e:	141b      	asrs	r3, r3, #16
 801ea10:	f53f af16 	bmi.w	801e840 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ea14:	3a01      	subs	r2, #1
 801ea16:	4293      	cmp	r3, r2
 801ea18:	f6bf af12 	bge.w	801e840 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ea1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea1e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ea22:	1cdf      	adds	r7, r3, #3
 801ea24:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801ea28:	f1b9 0f00 	cmp.w	r9, #0
 801ea2c:	dc73      	bgt.n	801eb16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801ea2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ea32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ea36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea3a:	441a      	add	r2, r3
 801ea3c:	920a      	str	r2, [sp, #40]	; 0x28
 801ea3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ea40:	2b00      	cmp	r3, #0
 801ea42:	f340 8129 	ble.w	801ec98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801ea46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ea4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ea4c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ea50:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ea54:	eef0 6a48 	vmov.f32	s13, s16
 801ea58:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ea5c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ea60:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea64:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801ea68:	eef0 6a68 	vmov.f32	s13, s17
 801ea6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea70:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 801ea74:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ea78:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ea7c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ea80:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ea84:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ea88:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ea8c:	ee18 2a10 	vmov	r2, s16
 801ea90:	eeb0 8a47 	vmov.f32	s16, s14
 801ea94:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea98:	ee18 2a90 	vmov	r2, s17
 801ea9c:	9327      	str	r3, [sp, #156]	; 0x9c
 801ea9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eaa0:	eef0 8a67 	vmov.f32	s17, s15
 801eaa4:	fb92 f3f3 	sdiv	r3, r2, r3
 801eaa8:	9328      	str	r3, [sp, #160]	; 0xa0
 801eaaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eaac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eaae:	3b01      	subs	r3, #1
 801eab0:	930d      	str	r3, [sp, #52]	; 0x34
 801eab2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eab4:	bf08      	it	eq
 801eab6:	4613      	moveq	r3, r2
 801eab8:	9309      	str	r3, [sp, #36]	; 0x24
 801eaba:	e696      	b.n	801e7ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801eabc:	b149      	cbz	r1, 801ead2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801eabe:	5caa      	ldrb	r2, [r5, r2]
 801eac0:	4670      	mov	r0, lr
 801eac2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eac6:	4422      	add	r2, r4
 801eac8:	4677      	mov	r7, lr
 801eaca:	e6fb      	b.n	801e8c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801eacc:	4670      	mov	r0, lr
 801eace:	4672      	mov	r2, lr
 801ead0:	e6f8      	b.n	801e8c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801ead2:	4670      	mov	r0, lr
 801ead4:	4672      	mov	r2, lr
 801ead6:	e7f7      	b.n	801eac8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 801ead8:	f110 0c01 	adds.w	ip, r0, #1
 801eadc:	f53f af6a 	bmi.w	801e9b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801eae0:	4562      	cmp	r2, ip
 801eae2:	f6ff af67 	blt.w	801e9b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801eae6:	f115 0c01 	adds.w	ip, r5, #1
 801eaea:	f53f af63 	bmi.w	801e9b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801eaee:	4567      	cmp	r7, ip
 801eaf0:	f6ff af60 	blt.w	801e9b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801eaf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eaf6:	b23f      	sxth	r7, r7
 801eaf8:	b212      	sxth	r2, r2
 801eafa:	9002      	str	r0, [sp, #8]
 801eafc:	9701      	str	r7, [sp, #4]
 801eafe:	9200      	str	r2, [sp, #0]
 801eb00:	9811      	ldr	r0, [sp, #68]	; 0x44
 801eb02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eb04:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801eb08:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801eb0c:	4623      	mov	r3, r4
 801eb0e:	4631      	mov	r1, r6
 801eb10:	f7ff fd4c 	bl	801e5ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801eb14:	e74e      	b.n	801e9b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801eb16:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801eb18:	9826      	ldr	r0, [sp, #152]	; 0x98
 801eb1a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801eb1e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801eb20:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801eb22:	1400      	asrs	r0, r0, #16
 801eb24:	142d      	asrs	r5, r5, #16
 801eb26:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801eb28:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801eb2c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801eb30:	fb02 5000 	mla	r0, r2, r0, r5
 801eb34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801eb36:	f815 e000 	ldrb.w	lr, [r5, r0]
 801eb3a:	eb05 0c00 	add.w	ip, r5, r0
 801eb3e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801eb42:	eb04 060e 	add.w	r6, r4, lr
 801eb46:	2b00      	cmp	r3, #0
 801eb48:	f000 8097 	beq.w	801ec7a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801eb4c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801eb50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eb54:	4425      	add	r5, r4
 801eb56:	2900      	cmp	r1, #0
 801eb58:	f000 8098 	beq.w	801ec8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801eb5c:	eb0c 0002 	add.w	r0, ip, r2
 801eb60:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801eb64:	7840      	ldrb	r0, [r0, #1]
 801eb66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eb6a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eb6e:	4422      	add	r2, r4
 801eb70:	4420      	add	r0, r4
 801eb72:	b29b      	uxth	r3, r3
 801eb74:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801eb78:	b289      	uxth	r1, r1
 801eb7a:	f895 e000 	ldrb.w	lr, [r5]
 801eb7e:	3703      	adds	r7, #3
 801eb80:	f109 39ff 	add.w	r9, r9, #4294967295
 801eb84:	fb03 f801 	mul.w	r8, r3, r1
 801eb88:	011b      	lsls	r3, r3, #4
 801eb8a:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801eb8e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801eb92:	eba3 0308 	sub.w	r3, r3, r8
 801eb96:	b289      	uxth	r1, r1
 801eb98:	b29b      	uxth	r3, r3
 801eb9a:	ebac 0c01 	sub.w	ip, ip, r1
 801eb9e:	fb03 fe0e 	mul.w	lr, r3, lr
 801eba2:	fa1f fc8c 	uxth.w	ip, ip
 801eba6:	930f      	str	r3, [sp, #60]	; 0x3c
 801eba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ebaa:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ebae:	f892 b000 	ldrb.w	fp, [r2]
 801ebb2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ebb6:	f890 b000 	ldrb.w	fp, [r0]
 801ebba:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ebbe:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801ebc2:	fb1b fb03 	smulbb	fp, fp, r3
 801ebc6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ebca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ebcc:	fb0e be0a 	mla	lr, lr, sl, fp
 801ebd0:	fa1f fe8e 	uxth.w	lr, lr
 801ebd4:	f10e 0b01 	add.w	fp, lr, #1
 801ebd8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ebdc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ebe0:	f807 ec06 	strb.w	lr, [r7, #-6]
 801ebe4:	f895 e001 	ldrb.w	lr, [r5, #1]
 801ebe8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ebec:	fb03 fe0e 	mul.w	lr, r3, lr
 801ebf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ebf2:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ebf6:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ebfa:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ebfe:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ec02:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ec06:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801ec0a:	fb1b fb03 	smulbb	fp, fp, r3
 801ec0e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ec12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ec14:	fb0e be0a 	mla	lr, lr, sl, fp
 801ec18:	fa1f fe8e 	uxth.w	lr, lr
 801ec1c:	f10e 0b01 	add.w	fp, lr, #1
 801ec20:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ec24:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ec28:	f807 ec05 	strb.w	lr, [r7, #-5]
 801ec2c:	78ad      	ldrb	r5, [r5, #2]
 801ec2e:	78b6      	ldrb	r6, [r6, #2]
 801ec30:	436b      	muls	r3, r5
 801ec32:	7895      	ldrb	r5, [r2, #2]
 801ec34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ec36:	fb0c 3306 	mla	r3, ip, r6, r3
 801ec3a:	fb01 3305 	mla	r3, r1, r5, r3
 801ec3e:	7885      	ldrb	r5, [r0, #2]
 801ec40:	fb08 3805 	mla	r8, r8, r5, r3
 801ec44:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801ec48:	fb13 f302 	smulbb	r3, r3, r2
 801ec4c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ec50:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ec52:	fb08 380a 	mla	r8, r8, sl, r3
 801ec56:	fa1f f888 	uxth.w	r8, r8
 801ec5a:	f108 0301 	add.w	r3, r8, #1
 801ec5e:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801ec62:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ec64:	4413      	add	r3, r2
 801ec66:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ec68:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ec6c:	9325      	str	r3, [sp, #148]	; 0x94
 801ec6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ec70:	f807 8c04 	strb.w	r8, [r7, #-4]
 801ec74:	4413      	add	r3, r2
 801ec76:	9326      	str	r3, [sp, #152]	; 0x98
 801ec78:	e6d6      	b.n	801ea28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801ec7a:	b151      	cbz	r1, 801ec92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 801ec7c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ec80:	4630      	mov	r0, r6
 801ec82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ec86:	4422      	add	r2, r4
 801ec88:	4635      	mov	r5, r6
 801ec8a:	e772      	b.n	801eb72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801ec8c:	4630      	mov	r0, r6
 801ec8e:	4632      	mov	r2, r6
 801ec90:	e76f      	b.n	801eb72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801ec92:	4630      	mov	r0, r6
 801ec94:	4632      	mov	r2, r6
 801ec96:	e7f7      	b.n	801ec88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801ec98:	b013      	add	sp, #76	; 0x4c
 801ec9a:	ecbd 8b08 	vpop	{d8-d11}
 801ec9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801eca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801eca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eca8:	784d      	ldrb	r5, [r1, #1]
 801ecaa:	f891 9002 	ldrb.w	r9, [r1, #2]
 801ecae:	022d      	lsls	r5, r5, #8
 801ecb0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801ecb4:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801ecb8:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801ecbc:	f891 9000 	ldrb.w	r9, [r1]
 801ecc0:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801ecc4:	ea45 0509 	orr.w	r5, r5, r9
 801ecc8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801eccc:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801ecd0:	9501      	str	r5, [sp, #4]
 801ecd2:	fb06 470c 	mla	r7, r6, ip, r4
 801ecd6:	2e00      	cmp	r6, #0
 801ecd8:	eb02 0e07 	add.w	lr, r2, r7
 801ecdc:	db46      	blt.n	801ed6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801ecde:	45b0      	cmp	r8, r6
 801ece0:	dd44      	ble.n	801ed6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801ece2:	2c00      	cmp	r4, #0
 801ece4:	db40      	blt.n	801ed68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 801ece6:	45a4      	cmp	ip, r4
 801ece8:	dd3e      	ble.n	801ed68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 801ecea:	5dd7      	ldrb	r7, [r2, r7]
 801ecec:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ecf0:	441f      	add	r7, r3
 801ecf2:	1c62      	adds	r2, r4, #1
 801ecf4:	d43d      	bmi.n	801ed72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801ecf6:	4594      	cmp	ip, r2
 801ecf8:	dd3b      	ble.n	801ed72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801ecfa:	f1ba 0f00 	cmp.w	sl, #0
 801ecfe:	d038      	beq.n	801ed72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801ed00:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801ed04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ed08:	441d      	add	r5, r3
 801ed0a:	3601      	adds	r6, #1
 801ed0c:	d435      	bmi.n	801ed7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801ed0e:	45b0      	cmp	r8, r6
 801ed10:	dd33      	ble.n	801ed7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801ed12:	b390      	cbz	r0, 801ed7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801ed14:	2c00      	cmp	r4, #0
 801ed16:	db2e      	blt.n	801ed76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 801ed18:	45a4      	cmp	ip, r4
 801ed1a:	dd2c      	ble.n	801ed76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 801ed1c:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801ed20:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ed24:	441e      	add	r6, r3
 801ed26:	1c62      	adds	r2, r4, #1
 801ed28:	d42a      	bmi.n	801ed80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801ed2a:	4594      	cmp	ip, r2
 801ed2c:	dd28      	ble.n	801ed80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801ed2e:	f1ba 0f00 	cmp.w	sl, #0
 801ed32:	d025      	beq.n	801ed80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801ed34:	44f4      	add	ip, lr
 801ed36:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801ed3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ed3e:	4413      	add	r3, r2
 801ed40:	f1ba 0f0f 	cmp.w	sl, #15
 801ed44:	f897 8000 	ldrb.w	r8, [r7]
 801ed48:	f895 9000 	ldrb.w	r9, [r5]
 801ed4c:	f896 e000 	ldrb.w	lr, [r6]
 801ed50:	f893 c000 	ldrb.w	ip, [r3]
 801ed54:	d801      	bhi.n	801ed5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 801ed56:	280f      	cmp	r0, #15
 801ed58:	d914      	bls.n	801ed84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 801ed5a:	4b29      	ldr	r3, [pc, #164]	; (801ee00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 801ed5c:	f240 1157 	movw	r1, #343	; 0x157
 801ed60:	4a28      	ldr	r2, [pc, #160]	; (801ee04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801ed62:	4829      	ldr	r0, [pc, #164]	; (801ee08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801ed64:	f006 f84e 	bl	8024e04 <__assert_func>
 801ed68:	af01      	add	r7, sp, #4
 801ed6a:	e7c2      	b.n	801ecf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 801ed6c:	ad01      	add	r5, sp, #4
 801ed6e:	462f      	mov	r7, r5
 801ed70:	e7cb      	b.n	801ed0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 801ed72:	ad01      	add	r5, sp, #4
 801ed74:	e7c9      	b.n	801ed0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 801ed76:	ae01      	add	r6, sp, #4
 801ed78:	e7d5      	b.n	801ed26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 801ed7a:	ab01      	add	r3, sp, #4
 801ed7c:	461e      	mov	r6, r3
 801ed7e:	e7df      	b.n	801ed40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 801ed80:	ab01      	add	r3, sp, #4
 801ed82:	e7dd      	b.n	801ed40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 801ed84:	fa1f f48a 	uxth.w	r4, sl
 801ed88:	b280      	uxth	r0, r0
 801ed8a:	fb04 fa00 	mul.w	sl, r4, r0
 801ed8e:	0124      	lsls	r4, r4, #4
 801ed90:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801ed94:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801ed98:	b282      	uxth	r2, r0
 801ed9a:	eba4 000a 	sub.w	r0, r4, sl
 801ed9e:	ebab 0b02 	sub.w	fp, fp, r2
 801eda2:	b280      	uxth	r0, r0
 801eda4:	fa1f fb8b 	uxth.w	fp, fp
 801eda8:	fb00 f909 	mul.w	r9, r0, r9
 801edac:	fb0b 9808 	mla	r8, fp, r8, r9
 801edb0:	fb02 8e0e 	mla	lr, r2, lr, r8
 801edb4:	fb0a ec0c 	mla	ip, sl, ip, lr
 801edb8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801edbc:	f881 c000 	strb.w	ip, [r1]
 801edc0:	786c      	ldrb	r4, [r5, #1]
 801edc2:	f897 c001 	ldrb.w	ip, [r7, #1]
 801edc6:	4344      	muls	r4, r0
 801edc8:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801edcc:	7874      	ldrb	r4, [r6, #1]
 801edce:	fb02 cc04 	mla	ip, r2, r4, ip
 801edd2:	785c      	ldrb	r4, [r3, #1]
 801edd4:	fb0a c404 	mla	r4, sl, r4, ip
 801edd8:	1224      	asrs	r4, r4, #8
 801edda:	704c      	strb	r4, [r1, #1]
 801eddc:	78ad      	ldrb	r5, [r5, #2]
 801edde:	78bc      	ldrb	r4, [r7, #2]
 801ede0:	4368      	muls	r0, r5
 801ede2:	fb0b 0b04 	mla	fp, fp, r4, r0
 801ede6:	78b0      	ldrb	r0, [r6, #2]
 801ede8:	fb02 b000 	mla	r0, r2, r0, fp
 801edec:	789a      	ldrb	r2, [r3, #2]
 801edee:	fb0a 0a02 	mla	sl, sl, r2, r0
 801edf2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801edf6:	f881 a002 	strb.w	sl, [r1, #2]
 801edfa:	b003      	add	sp, #12
 801edfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee00:	0802ce1f 	.word	0x0802ce1f
 801ee04:	0802d387 	.word	0x0802d387
 801ee08:	0802cee8 	.word	0x0802cee8

0801ee0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ee0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee10:	ed2d 8b0a 	vpush	{d8-d12}
 801ee14:	b08d      	sub	sp, #52	; 0x34
 801ee16:	eeb0 aa40 	vmov.f32	s20, s0
 801ee1a:	eef0 9a60 	vmov.f32	s19, s1
 801ee1e:	900b      	str	r0, [sp, #44]	; 0x2c
 801ee20:	eeb0 9a41 	vmov.f32	s18, s2
 801ee24:	9306      	str	r3, [sp, #24]
 801ee26:	eeb0 8a62 	vmov.f32	s16, s5
 801ee2a:	eef0 8a43 	vmov.f32	s17, s6
 801ee2e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801ee30:	eeb0 ca44 	vmov.f32	s24, s8
 801ee34:	eef0 ba64 	vmov.f32	s23, s9
 801ee38:	eeb0 ba45 	vmov.f32	s22, s10
 801ee3c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801ee40:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801ee44:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ee46:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801ee4a:	6850      	ldr	r0, [r2, #4]
 801ee4c:	6812      	ldr	r2, [r2, #0]
 801ee4e:	fb00 1303 	mla	r3, r0, r3, r1
 801ee52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ee56:	18d3      	adds	r3, r2, r3
 801ee58:	9307      	str	r3, [sp, #28]
 801ee5a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ee5c:	681b      	ldr	r3, [r3, #0]
 801ee5e:	9308      	str	r3, [sp, #32]
 801ee60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ee62:	685d      	ldr	r5, [r3, #4]
 801ee64:	3504      	adds	r5, #4
 801ee66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee68:	2b00      	cmp	r3, #0
 801ee6a:	dc03      	bgt.n	801ee74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ee6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	f340 81e6 	ble.w	801f240 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801ee74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ee76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ee7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ee7e:	1e48      	subs	r0, r1, #1
 801ee80:	1e56      	subs	r6, r2, #1
 801ee82:	9b06      	ldr	r3, [sp, #24]
 801ee84:	2b00      	cmp	r3, #0
 801ee86:	f340 80bd 	ble.w	801f004 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801ee8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ee8c:	1427      	asrs	r7, r4, #16
 801ee8e:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ee92:	d406      	bmi.n	801eea2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ee94:	4287      	cmp	r7, r0
 801ee96:	da04      	bge.n	801eea2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ee98:	2b00      	cmp	r3, #0
 801ee9a:	db02      	blt.n	801eea2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ee9c:	42b3      	cmp	r3, r6
 801ee9e:	f2c0 80b2 	blt.w	801f006 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801eea2:	3701      	adds	r7, #1
 801eea4:	f100 80a1 	bmi.w	801efea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801eea8:	42b9      	cmp	r1, r7
 801eeaa:	f2c0 809e 	blt.w	801efea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801eeae:	3301      	adds	r3, #1
 801eeb0:	f100 809b 	bmi.w	801efea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801eeb4:	429a      	cmp	r2, r3
 801eeb6:	f2c0 8098 	blt.w	801efea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801eeba:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801eebe:	f1bb 0f00 	cmp.w	fp, #0
 801eec2:	f340 80bf 	ble.w	801f044 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801eec6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801eec8:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801eeca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801eecc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801eed0:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801eed4:	1420      	asrs	r0, r4, #16
 801eed6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801eed8:	ea4f 4723 	mov.w	r7, r3, asr #16
 801eedc:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801eee0:	6892      	ldr	r2, [r2, #8]
 801eee2:	f100 8103 	bmi.w	801f0ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801eee6:	f102 3eff 	add.w	lr, r2, #4294967295
 801eeea:	4570      	cmp	r0, lr
 801eeec:	f280 80fe 	bge.w	801f0ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801eef0:	2f00      	cmp	r7, #0
 801eef2:	f2c0 80fb 	blt.w	801f0ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801eef6:	f10c 3eff 	add.w	lr, ip, #4294967295
 801eefa:	4577      	cmp	r7, lr
 801eefc:	f280 80f6 	bge.w	801f0ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801ef00:	b212      	sxth	r2, r2
 801ef02:	fb07 0002 	mla	r0, r7, r2, r0
 801ef06:	9f08      	ldr	r7, [sp, #32]
 801ef08:	f817 8000 	ldrb.w	r8, [r7, r0]
 801ef0c:	eb07 0e00 	add.w	lr, r7, r0
 801ef10:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ef14:	eb05 0c08 	add.w	ip, r5, r8
 801ef18:	2b00      	cmp	r3, #0
 801ef1a:	f000 80d8 	beq.w	801f0ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 801ef1e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801ef22:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ef26:	442f      	add	r7, r5
 801ef28:	2900      	cmp	r1, #0
 801ef2a:	f000 80d9 	beq.w	801f0e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801ef2e:	eb0e 0002 	add.w	r0, lr, r2
 801ef32:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801ef36:	7840      	ldrb	r0, [r0, #1]
 801ef38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ef3c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ef40:	442a      	add	r2, r5
 801ef42:	4428      	add	r0, r5
 801ef44:	b29b      	uxth	r3, r3
 801ef46:	f815 a008 	ldrb.w	sl, [r5, r8]
 801ef4a:	b289      	uxth	r1, r1
 801ef4c:	f897 8000 	ldrb.w	r8, [r7]
 801ef50:	fb03 f901 	mul.w	r9, r3, r1
 801ef54:	011b      	lsls	r3, r3, #4
 801ef56:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ef5a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ef5e:	eba3 0309 	sub.w	r3, r3, r9
 801ef62:	b289      	uxth	r1, r1
 801ef64:	b29b      	uxth	r3, r3
 801ef66:	ebae 0e01 	sub.w	lr, lr, r1
 801ef6a:	fb03 f808 	mul.w	r8, r3, r8
 801ef6e:	fa1f fe8e 	uxth.w	lr, lr
 801ef72:	fb0e 880a 	mla	r8, lr, sl, r8
 801ef76:	f892 a000 	ldrb.w	sl, [r2]
 801ef7a:	fb01 880a 	mla	r8, r1, sl, r8
 801ef7e:	f890 a000 	ldrb.w	sl, [r0]
 801ef82:	fb09 880a 	mla	r8, r9, sl, r8
 801ef86:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ef8a:	f886 8000 	strb.w	r8, [r6]
 801ef8e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ef92:	f89c a001 	ldrb.w	sl, [ip, #1]
 801ef96:	fb03 f808 	mul.w	r8, r3, r8
 801ef9a:	fb0e 880a 	mla	r8, lr, sl, r8
 801ef9e:	f892 a001 	ldrb.w	sl, [r2, #1]
 801efa2:	fb01 880a 	mla	r8, r1, sl, r8
 801efa6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801efaa:	fb09 880a 	mla	r8, r9, sl, r8
 801efae:	ea4f 2828 	mov.w	r8, r8, asr #8
 801efb2:	f886 8001 	strb.w	r8, [r6, #1]
 801efb6:	78bf      	ldrb	r7, [r7, #2]
 801efb8:	f89c c002 	ldrb.w	ip, [ip, #2]
 801efbc:	437b      	muls	r3, r7
 801efbe:	7892      	ldrb	r2, [r2, #2]
 801efc0:	fb0e 330c 	mla	r3, lr, ip, r3
 801efc4:	fb01 3102 	mla	r1, r1, r2, r3
 801efc8:	7882      	ldrb	r2, [r0, #2]
 801efca:	fb09 1902 	mla	r9, r9, r2, r1
 801efce:	ea4f 2929 	mov.w	r9, r9, asr #8
 801efd2:	f886 9002 	strb.w	r9, [r6, #2]
 801efd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801efd8:	3603      	adds	r6, #3
 801efda:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801efdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801efe0:	441c      	add	r4, r3
 801efe2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801efe4:	4413      	add	r3, r2
 801efe6:	9322      	str	r3, [sp, #136]	; 0x88
 801efe8:	e769      	b.n	801eebe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801efea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801efec:	9f24      	ldr	r7, [sp, #144]	; 0x90
 801efee:	441c      	add	r4, r3
 801eff0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801eff2:	443b      	add	r3, r7
 801eff4:	9322      	str	r3, [sp, #136]	; 0x88
 801eff6:	9b06      	ldr	r3, [sp, #24]
 801eff8:	3b01      	subs	r3, #1
 801effa:	9306      	str	r3, [sp, #24]
 801effc:	9b07      	ldr	r3, [sp, #28]
 801effe:	3303      	adds	r3, #3
 801f000:	9307      	str	r3, [sp, #28]
 801f002:	e73e      	b.n	801ee82 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f004:	d026      	beq.n	801f054 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801f006:	9b06      	ldr	r3, [sp, #24]
 801f008:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801f00a:	3b01      	subs	r3, #1
 801f00c:	fb00 4003 	mla	r0, r0, r3, r4
 801f010:	1400      	asrs	r0, r0, #16
 801f012:	f53f af52 	bmi.w	801eeba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f016:	3901      	subs	r1, #1
 801f018:	4288      	cmp	r0, r1
 801f01a:	f6bf af4e 	bge.w	801eeba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f01e:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f020:	9822      	ldr	r0, [sp, #136]	; 0x88
 801f022:	fb01 0303 	mla	r3, r1, r3, r0
 801f026:	141b      	asrs	r3, r3, #16
 801f028:	f53f af47 	bmi.w	801eeba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f02c:	3a01      	subs	r2, #1
 801f02e:	4293      	cmp	r3, r2
 801f030:	f6bf af43 	bge.w	801eeba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f034:	9b07      	ldr	r3, [sp, #28]
 801f036:	f8dd a018 	ldr.w	sl, [sp, #24]
 801f03a:	f103 0803 	add.w	r8, r3, #3
 801f03e:	f1ba 0f00 	cmp.w	sl, #0
 801f042:	dc71      	bgt.n	801f128 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801f044:	9b06      	ldr	r3, [sp, #24]
 801f046:	9a07      	ldr	r2, [sp, #28]
 801f048:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f04c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f050:	441a      	add	r2, r3
 801f052:	9207      	str	r2, [sp, #28]
 801f054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f056:	2b00      	cmp	r3, #0
 801f058:	f340 80f2 	ble.w	801f240 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801f05c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801f060:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f062:	ee79 9aab 	vadd.f32	s19, s19, s23
 801f066:	eef0 6a48 	vmov.f32	s13, s16
 801f06a:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801f06e:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801f072:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f076:	ee16 4a90 	vmov	r4, s13
 801f07a:	eef0 6a68 	vmov.f32	s13, s17
 801f07e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f082:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 801f086:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f08a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f08e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f092:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f096:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f09a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f09e:	ee18 2a10 	vmov	r2, s16
 801f0a2:	eeb0 8a47 	vmov.f32	s16, s14
 801f0a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0aa:	ee18 2a90 	vmov	r2, s17
 801f0ae:	9323      	str	r3, [sp, #140]	; 0x8c
 801f0b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f0b2:	eef0 8a67 	vmov.f32	s17, s15
 801f0b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0ba:	9324      	str	r3, [sp, #144]	; 0x90
 801f0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f0c0:	3b01      	subs	r3, #1
 801f0c2:	9309      	str	r3, [sp, #36]	; 0x24
 801f0c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f0c6:	bf08      	it	eq
 801f0c8:	4613      	moveq	r3, r2
 801f0ca:	9306      	str	r3, [sp, #24]
 801f0cc:	e6cb      	b.n	801ee66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f0ce:	b151      	cbz	r1, 801f0e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801f0d0:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801f0d4:	4660      	mov	r0, ip
 801f0d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f0da:	442a      	add	r2, r5
 801f0dc:	4667      	mov	r7, ip
 801f0de:	e731      	b.n	801ef44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f0e0:	4660      	mov	r0, ip
 801f0e2:	4662      	mov	r2, ip
 801f0e4:	e72e      	b.n	801ef44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f0e6:	4660      	mov	r0, ip
 801f0e8:	4662      	mov	r2, ip
 801f0ea:	e7f7      	b.n	801f0dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801f0ec:	f110 0e01 	adds.w	lr, r0, #1
 801f0f0:	f53f af71 	bmi.w	801efd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f0f4:	4572      	cmp	r2, lr
 801f0f6:	f6ff af6e 	blt.w	801efd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f0fa:	f117 0e01 	adds.w	lr, r7, #1
 801f0fe:	f53f af6a 	bmi.w	801efd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f102:	45f4      	cmp	ip, lr
 801f104:	f6ff af67 	blt.w	801efd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f108:	b212      	sxth	r2, r2
 801f10a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f10e:	fa0f f38c 	sxth.w	r3, ip
 801f112:	9200      	str	r2, [sp, #0]
 801f114:	4631      	mov	r1, r6
 801f116:	9a08      	ldr	r2, [sp, #32]
 801f118:	9301      	str	r3, [sp, #4]
 801f11a:	462b      	mov	r3, r5
 801f11c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801f120:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f122:	f7ff fdbf 	bl	801eca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801f126:	e756      	b.n	801efd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f128:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f12a:	1426      	asrs	r6, r4, #16
 801f12c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801f12e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801f132:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f136:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f138:	1400      	asrs	r0, r0, #16
 801f13a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f13e:	fb02 6000 	mla	r0, r2, r0, r6
 801f142:	9e08      	ldr	r6, [sp, #32]
 801f144:	f816 e000 	ldrb.w	lr, [r6, r0]
 801f148:	eb06 0c00 	add.w	ip, r6, r0
 801f14c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f150:	eb05 070e 	add.w	r7, r5, lr
 801f154:	2b00      	cmp	r3, #0
 801f156:	d064      	beq.n	801f222 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 801f158:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801f15c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f160:	442e      	add	r6, r5
 801f162:	2900      	cmp	r1, #0
 801f164:	d066      	beq.n	801f234 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 801f166:	eb0c 0002 	add.w	r0, ip, r2
 801f16a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f16e:	7840      	ldrb	r0, [r0, #1]
 801f170:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f174:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f178:	442a      	add	r2, r5
 801f17a:	4428      	add	r0, r5
 801f17c:	b29b      	uxth	r3, r3
 801f17e:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801f182:	b289      	uxth	r1, r1
 801f184:	f896 e000 	ldrb.w	lr, [r6]
 801f188:	f108 0803 	add.w	r8, r8, #3
 801f18c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f190:	fb03 f901 	mul.w	r9, r3, r1
 801f194:	011b      	lsls	r3, r3, #4
 801f196:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f19a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801f19e:	eba3 0309 	sub.w	r3, r3, r9
 801f1a2:	b289      	uxth	r1, r1
 801f1a4:	b29b      	uxth	r3, r3
 801f1a6:	ebac 0c01 	sub.w	ip, ip, r1
 801f1aa:	fb03 fe0e 	mul.w	lr, r3, lr
 801f1ae:	fa1f fc8c 	uxth.w	ip, ip
 801f1b2:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f1b6:	f892 b000 	ldrb.w	fp, [r2]
 801f1ba:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f1be:	f890 b000 	ldrb.w	fp, [r0]
 801f1c2:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f1c6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f1ca:	f808 ec06 	strb.w	lr, [r8, #-6]
 801f1ce:	f896 e001 	ldrb.w	lr, [r6, #1]
 801f1d2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f1d6:	fb03 fe0e 	mul.w	lr, r3, lr
 801f1da:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f1de:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f1e2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f1e6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f1ea:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f1ee:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f1f2:	f808 ec05 	strb.w	lr, [r8, #-5]
 801f1f6:	78b6      	ldrb	r6, [r6, #2]
 801f1f8:	78bf      	ldrb	r7, [r7, #2]
 801f1fa:	4373      	muls	r3, r6
 801f1fc:	7896      	ldrb	r6, [r2, #2]
 801f1fe:	7882      	ldrb	r2, [r0, #2]
 801f200:	fb0c 3307 	mla	r3, ip, r7, r3
 801f204:	fb01 3306 	mla	r3, r1, r6, r3
 801f208:	fb09 3902 	mla	r9, r9, r2, r3
 801f20c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f20e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f210:	441c      	add	r4, r3
 801f212:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f214:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f218:	4413      	add	r3, r2
 801f21a:	f808 9c04 	strb.w	r9, [r8, #-4]
 801f21e:	9322      	str	r3, [sp, #136]	; 0x88
 801f220:	e70d      	b.n	801f03e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801f222:	b151      	cbz	r1, 801f23a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 801f224:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f228:	4638      	mov	r0, r7
 801f22a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f22e:	442a      	add	r2, r5
 801f230:	463e      	mov	r6, r7
 801f232:	e7a3      	b.n	801f17c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f234:	4638      	mov	r0, r7
 801f236:	463a      	mov	r2, r7
 801f238:	e7a0      	b.n	801f17c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f23a:	4638      	mov	r0, r7
 801f23c:	463a      	mov	r2, r7
 801f23e:	e7f7      	b.n	801f230 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801f240:	b00d      	add	sp, #52	; 0x34
 801f242:	ecbd 8b0a 	vpop	{d8-d12}
 801f246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f24c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801f24c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f250:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 801f254:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801f258:	2d00      	cmp	r5, #0
 801f25a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801f25e:	fb05 040e 	mla	r4, r5, lr, r0
 801f262:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801f266:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801f26a:	eb02 0804 	add.w	r8, r2, r4
 801f26e:	db40      	blt.n	801f2f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 801f270:	45a9      	cmp	r9, r5
 801f272:	dd3e      	ble.n	801f2f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 801f274:	2800      	cmp	r0, #0
 801f276:	db3a      	blt.n	801f2ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 801f278:	4586      	cmp	lr, r0
 801f27a:	dd38      	ble.n	801f2ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 801f27c:	5d12      	ldrb	r2, [r2, r4]
 801f27e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f282:	1c42      	adds	r2, r0, #1
 801f284:	d438      	bmi.n	801f2f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 801f286:	4596      	cmp	lr, r2
 801f288:	dd36      	ble.n	801f2f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 801f28a:	b3bf      	cbz	r7, 801f2fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 801f28c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f290:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801f294:	3501      	adds	r5, #1
 801f296:	d435      	bmi.n	801f304 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 801f298:	45a9      	cmp	r9, r5
 801f29a:	dd33      	ble.n	801f304 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 801f29c:	f1bc 0f00 	cmp.w	ip, #0
 801f2a0:	d033      	beq.n	801f30a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 801f2a2:	2800      	cmp	r0, #0
 801f2a4:	db2c      	blt.n	801f300 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 801f2a6:	4586      	cmp	lr, r0
 801f2a8:	dd2a      	ble.n	801f300 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 801f2aa:	f818 200e 	ldrb.w	r2, [r8, lr]
 801f2ae:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f2b2:	3001      	adds	r0, #1
 801f2b4:	d42c      	bmi.n	801f310 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 801f2b6:	4586      	cmp	lr, r0
 801f2b8:	dd2a      	ble.n	801f310 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 801f2ba:	b35f      	cbz	r7, 801f314 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 801f2bc:	44c6      	add	lr, r8
 801f2be:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f2c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801f2c6:	2f0f      	cmp	r7, #15
 801f2c8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f2cc:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 801f2d0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f2d4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f2d8:	d802      	bhi.n	801f2e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 801f2da:	f1bc 0f0f 	cmp.w	ip, #15
 801f2de:	d91b      	bls.n	801f318 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 801f2e0:	4b77      	ldr	r3, [pc, #476]	; (801f4c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 801f2e2:	f240 1157 	movw	r1, #343	; 0x157
 801f2e6:	4a77      	ldr	r2, [pc, #476]	; (801f4c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 801f2e8:	4877      	ldr	r0, [pc, #476]	; (801f4c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 801f2ea:	f005 fd8b 	bl	8024e04 <__assert_func>
 801f2ee:	2600      	movs	r6, #0
 801f2f0:	e7c7      	b.n	801f282 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 801f2f2:	2400      	movs	r4, #0
 801f2f4:	4626      	mov	r6, r4
 801f2f6:	e7cd      	b.n	801f294 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 801f2f8:	2400      	movs	r4, #0
 801f2fa:	e7cb      	b.n	801f294 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 801f2fc:	463c      	mov	r4, r7
 801f2fe:	e7c9      	b.n	801f294 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 801f300:	2500      	movs	r5, #0
 801f302:	e7d6      	b.n	801f2b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 801f304:	2200      	movs	r2, #0
 801f306:	4615      	mov	r5, r2
 801f308:	e7dd      	b.n	801f2c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 801f30a:	4662      	mov	r2, ip
 801f30c:	4665      	mov	r5, ip
 801f30e:	e7da      	b.n	801f2c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 801f310:	2200      	movs	r2, #0
 801f312:	e7d8      	b.n	801f2c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 801f314:	463a      	mov	r2, r7
 801f316:	e7d6      	b.n	801f2c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 801f318:	b2bf      	uxth	r7, r7
 801f31a:	fa1f f08c 	uxth.w	r0, ip
 801f31e:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 801f322:	fb00 fe07 	mul.w	lr, r0, r7
 801f326:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801f32a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801f32e:	ebac 070e 	sub.w	r7, ip, lr
 801f332:	b280      	uxth	r0, r0
 801f334:	b2bf      	uxth	r7, r7
 801f336:	1a1b      	subs	r3, r3, r0
 801f338:	fb07 fc0a 	mul.w	ip, r7, sl
 801f33c:	b29b      	uxth	r3, r3
 801f33e:	fb03 cc0b 	mla	ip, r3, fp, ip
 801f342:	9300      	str	r3, [sp, #0]
 801f344:	fb00 cc09 	mla	ip, r0, r9, ip
 801f348:	fb0e cc08 	mla	ip, lr, r8, ip
 801f34c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f350:	9301      	str	r3, [sp, #4]
 801f352:	2b00      	cmp	r3, #0
 801f354:	f000 80b0 	beq.w	801f4b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 801f358:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f35c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f360:	fb0b fc0c 	mul.w	ip, fp, ip
 801f364:	fb0b f606 	mul.w	r6, fp, r6
 801f368:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f36c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f370:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f374:	44dc      	add	ip, fp
 801f376:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f37a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f37e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f382:	fb0a fb0b 	mul.w	fp, sl, fp
 801f386:	fb0a fa04 	mul.w	sl, sl, r4
 801f38a:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801f38e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f392:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 801f396:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f39a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f39e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f3a2:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 801f3a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f3aa:	0a36      	lsrs	r6, r6, #8
 801f3ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f3b0:	44dc      	add	ip, fp
 801f3b2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801f3b6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f3ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f3be:	fb09 fb0b 	mul.w	fp, r9, fp
 801f3c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f3c6:	fb09 f905 	mul.w	r9, r9, r5
 801f3ca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f3ce:	ea4f 241b 	mov.w	r4, fp, lsr #8
 801f3d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f3d6:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801f3da:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f3de:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f3e2:	fb0c fc07 	mul.w	ip, ip, r7
 801f3e6:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801f3ea:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801f3ee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f3f2:	445c      	add	r4, fp
 801f3f4:	fb08 f505 	mul.w	r5, r8, r5
 801f3f8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f3fc:	fb08 f802 	mul.w	r8, r8, r2
 801f400:	0a24      	lsrs	r4, r4, #8
 801f402:	0a2a      	lsrs	r2, r5, #8
 801f404:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801f408:	fb07 f70a 	mul.w	r7, r7, sl
 801f40c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f410:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f414:	4415      	add	r5, r2
 801f416:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801f41a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f41e:	9a00      	ldr	r2, [sp, #0]
 801f420:	0a2d      	lsrs	r5, r5, #8
 801f422:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f426:	fb03 cc02 	mla	ip, r3, r2, ip
 801f42a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f42e:	fb02 7306 	mla	r3, r2, r6, r7
 801f432:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f436:	9a01      	ldr	r2, [sp, #4]
 801f438:	fb05 c50e 	mla	r5, r5, lr, ip
 801f43c:	fb0e 3e08 	mla	lr, lr, r8, r3
 801f440:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 801f444:	fb04 5400 	mla	r4, r4, r0, r5
 801f448:	fb00 e303 	mla	r3, r0, r3, lr
 801f44c:	0a24      	lsrs	r4, r4, #8
 801f44e:	0a1b      	lsrs	r3, r3, #8
 801f450:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f454:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f458:	431c      	orrs	r4, r3
 801f45a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801f45e:	b29b      	uxth	r3, r3
 801f460:	b2e0      	uxtb	r0, r4
 801f462:	435a      	muls	r2, r3
 801f464:	fb10 f003 	smulbb	r0, r0, r3
 801f468:	1c55      	adds	r5, r2, #1
 801f46a:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 801f46e:	780a      	ldrb	r2, [r1, #0]
 801f470:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 801f474:	b2ed      	uxtb	r5, r5
 801f476:	fb02 0205 	mla	r2, r2, r5, r0
 801f47a:	b292      	uxth	r2, r2
 801f47c:	1c50      	adds	r0, r2, #1
 801f47e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f482:	7848      	ldrb	r0, [r1, #1]
 801f484:	fb10 f005 	smulbb	r0, r0, r5
 801f488:	1212      	asrs	r2, r2, #8
 801f48a:	700a      	strb	r2, [r1, #0]
 801f48c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801f490:	0c24      	lsrs	r4, r4, #16
 801f492:	fb02 0203 	mla	r2, r2, r3, r0
 801f496:	b292      	uxth	r2, r2
 801f498:	1c50      	adds	r0, r2, #1
 801f49a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f49e:	1212      	asrs	r2, r2, #8
 801f4a0:	704a      	strb	r2, [r1, #1]
 801f4a2:	788a      	ldrb	r2, [r1, #2]
 801f4a4:	fb12 f505 	smulbb	r5, r2, r5
 801f4a8:	fb04 5303 	mla	r3, r4, r3, r5
 801f4ac:	b29b      	uxth	r3, r3
 801f4ae:	1c5a      	adds	r2, r3, #1
 801f4b0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f4b4:	121b      	asrs	r3, r3, #8
 801f4b6:	708b      	strb	r3, [r1, #2]
 801f4b8:	b003      	add	sp, #12
 801f4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4be:	bf00      	nop
 801f4c0:	0802ce1f 	.word	0x0802ce1f
 801f4c4:	0802d387 	.word	0x0802d387
 801f4c8:	0802cee8 	.word	0x0802cee8

0801f4cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4d0:	ed2d 8b08 	vpush	{d8-d11}
 801f4d4:	b09f      	sub	sp, #124	; 0x7c
 801f4d6:	eeb0 aa40 	vmov.f32	s20, s0
 801f4da:	eef0 9a60 	vmov.f32	s19, s1
 801f4de:	921b      	str	r2, [sp, #108]	; 0x6c
 801f4e0:	eeb0 9a41 	vmov.f32	s18, s2
 801f4e4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801f4e6:	eeb0 8a62 	vmov.f32	s16, s5
 801f4ea:	9309      	str	r3, [sp, #36]	; 0x24
 801f4ec:	eef0 8a43 	vmov.f32	s17, s6
 801f4f0:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801f4f4:	eef0 ba44 	vmov.f32	s23, s8
 801f4f8:	901d      	str	r0, [sp, #116]	; 0x74
 801f4fa:	eeb0 ba64 	vmov.f32	s22, s9
 801f4fe:	931c      	str	r3, [sp, #112]	; 0x70
 801f500:	eef0 aa45 	vmov.f32	s21, s10
 801f504:	6850      	ldr	r0, [r2, #4]
 801f506:	9119      	str	r1, [sp, #100]	; 0x64
 801f508:	6812      	ldr	r2, [r2, #0]
 801f50a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 801f50c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801f510:	fb00 1303 	mla	r3, r0, r3, r1
 801f514:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f518:	18d3      	adds	r3, r2, r3
 801f51a:	930c      	str	r3, [sp, #48]	; 0x30
 801f51c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801f51e:	681b      	ldr	r3, [r3, #0]
 801f520:	9312      	str	r3, [sp, #72]	; 0x48
 801f522:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801f524:	685e      	ldr	r6, [r3, #4]
 801f526:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801f52a:	3604      	adds	r6, #4
 801f52c:	930d      	str	r3, [sp, #52]	; 0x34
 801f52e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f530:	2b00      	cmp	r3, #0
 801f532:	dc03      	bgt.n	801f53c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f536:	2b00      	cmp	r3, #0
 801f538:	f340 8378 	ble.w	801fc2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801f53c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801f53e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f542:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f546:	1e48      	subs	r0, r1, #1
 801f548:	1e57      	subs	r7, r2, #1
 801f54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f54c:	2b00      	cmp	r3, #0
 801f54e:	f340 818c 	ble.w	801f86a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 801f552:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801f554:	142b      	asrs	r3, r5, #16
 801f556:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f55a:	d406      	bmi.n	801f56a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f55c:	4584      	cmp	ip, r0
 801f55e:	da04      	bge.n	801f56a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f560:	2b00      	cmp	r3, #0
 801f562:	db02      	blt.n	801f56a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f564:	42bb      	cmp	r3, r7
 801f566:	f2c0 8181 	blt.w	801f86c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 801f56a:	f11c 0c01 	adds.w	ip, ip, #1
 801f56e:	f100 816f 	bmi.w	801f850 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801f572:	4561      	cmp	r1, ip
 801f574:	f2c0 816c 	blt.w	801f850 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801f578:	3301      	adds	r3, #1
 801f57a:	f100 8169 	bmi.w	801f850 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801f57e:	429a      	cmp	r2, r3
 801f580:	f2c0 8166 	blt.w	801f850 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801f584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f586:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f588:	931a      	str	r3, [sp, #104]	; 0x68
 801f58a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f58c:	2b00      	cmp	r3, #0
 801f58e:	f340 818c 	ble.w	801f8aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801f592:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801f594:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f598:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f59c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f5a0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801f5a2:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801f5a6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801f5a8:	141b      	asrs	r3, r3, #16
 801f5aa:	f100 81d0 	bmi.w	801f94e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801f5ae:	f100 38ff 	add.w	r8, r0, #4294967295
 801f5b2:	4543      	cmp	r3, r8
 801f5b4:	f280 81cb 	bge.w	801f94e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801f5b8:	f1bc 0f00 	cmp.w	ip, #0
 801f5bc:	f2c0 81c7 	blt.w	801f94e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801f5c0:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f5c4:	45c4      	cmp	ip, r8
 801f5c6:	f280 81c2 	bge.w	801f94e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801f5ca:	b200      	sxth	r0, r0
 801f5cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f5ce:	fb0c 3300 	mla	r3, ip, r0, r3
 801f5d2:	eb04 0803 	add.w	r8, r4, r3
 801f5d6:	5ce3      	ldrb	r3, [r4, r3]
 801f5d8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f5dc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801f5e0:	2a00      	cmp	r2, #0
 801f5e2:	f000 81a9 	beq.w	801f938 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 801f5e6:	f898 c001 	ldrb.w	ip, [r8, #1]
 801f5ea:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801f5ee:	940e      	str	r4, [sp, #56]	; 0x38
 801f5f0:	0e24      	lsrs	r4, r4, #24
 801f5f2:	9415      	str	r4, [sp, #84]	; 0x54
 801f5f4:	b179      	cbz	r1, 801f616 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801f5f6:	eb08 0c00 	add.w	ip, r8, r0
 801f5fa:	f818 0000 	ldrb.w	r0, [r8, r0]
 801f5fe:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f602:	900a      	str	r0, [sp, #40]	; 0x28
 801f604:	0e00      	lsrs	r0, r0, #24
 801f606:	9013      	str	r0, [sp, #76]	; 0x4c
 801f608:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801f60c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f610:	900f      	str	r0, [sp, #60]	; 0x3c
 801f612:	0e00      	lsrs	r0, r0, #24
 801f614:	9016      	str	r0, [sp, #88]	; 0x58
 801f616:	b292      	uxth	r2, r2
 801f618:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f61a:	b289      	uxth	r1, r1
 801f61c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f61e:	fb02 f901 	mul.w	r9, r2, r1
 801f622:	0112      	lsls	r2, r2, #4
 801f624:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f628:	eba2 0809 	sub.w	r8, r2, r9
 801f62c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f630:	b289      	uxth	r1, r1
 801f632:	fa1f f888 	uxth.w	r8, r8
 801f636:	1a52      	subs	r2, r2, r1
 801f638:	fb08 f000 	mul.w	r0, r8, r0
 801f63c:	b292      	uxth	r2, r2
 801f63e:	fb02 000e 	mla	r0, r2, lr, r0
 801f642:	fb01 0004 	mla	r0, r1, r4, r0
 801f646:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f648:	fb09 0004 	mla	r0, r9, r4, r0
 801f64c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f650:	2800      	cmp	r0, #0
 801f652:	f000 80f2 	beq.w	801f83a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f656:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f65a:	d01b      	beq.n	801f694 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f65c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f660:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f664:	fb0e fa0a 	mul.w	sl, lr, sl
 801f668:	fb0e fe03 	mul.w	lr, lr, r3
 801f66c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f670:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f674:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f678:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f67c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f680:	4453      	add	r3, sl
 801f682:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f686:	0a1b      	lsrs	r3, r3, #8
 801f688:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f68c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f690:	ea43 030c 	orr.w	r3, r3, ip
 801f694:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f696:	2cff      	cmp	r4, #255	; 0xff
 801f698:	d021      	beq.n	801f6de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801f69a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f69c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f6a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f6a2:	fb04 fb0b 	mul.w	fp, r4, fp
 801f6a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f6a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f6ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f6ae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f6b2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f6b6:	fb04 fa0a 	mul.w	sl, r4, sl
 801f6ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f6be:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f6c2:	44de      	add	lr, fp
 801f6c4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f6c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f6cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f6d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f6d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f6d8:	ea4e 040a 	orr.w	r4, lr, sl
 801f6dc:	940e      	str	r4, [sp, #56]	; 0x38
 801f6de:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f6e0:	2cff      	cmp	r4, #255	; 0xff
 801f6e2:	d021      	beq.n	801f728 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 801f6e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f6e6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f6ea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f6ec:	fb04 fb0b 	mul.w	fp, r4, fp
 801f6f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f6f2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f6f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f6f8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f6fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f700:	fb04 fa0a 	mul.w	sl, r4, sl
 801f704:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f708:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f70c:	44de      	add	lr, fp
 801f70e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f712:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f716:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f71a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f71e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f722:	ea4e 040a 	orr.w	r4, lr, sl
 801f726:	940a      	str	r4, [sp, #40]	; 0x28
 801f728:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f72a:	2cff      	cmp	r4, #255	; 0xff
 801f72c:	d021      	beq.n	801f772 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f72e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f730:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f734:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f736:	fb04 fb0b 	mul.w	fp, r4, fp
 801f73a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f73c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f740:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f742:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f746:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f74a:	fb04 fa0a 	mul.w	sl, r4, sl
 801f74e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f752:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f756:	44de      	add	lr, fp
 801f758:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f75c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f760:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f764:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f768:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f76c:	ea4e 040a 	orr.w	r4, lr, sl
 801f770:	940f      	str	r4, [sp, #60]	; 0x3c
 801f772:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f774:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801f778:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f77c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f780:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f782:	fb08 fc0c 	mul.w	ip, r8, ip
 801f786:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f78a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f78e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f790:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f794:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f798:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f79a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f79e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f7a2:	fb08 f80e 	mul.w	r8, r8, lr
 801f7a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f7aa:	fb02 8303 	mla	r3, r2, r3, r8
 801f7ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f7b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f7b4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801f7b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f7ba:	fb01 330a 	mla	r3, r1, sl, r3
 801f7be:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801f7c2:	fb09 3901 	mla	r9, r9, r1, r3
 801f7c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f7c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 801f7ca:	4343      	muls	r3, r0
 801f7cc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f7d0:	1c58      	adds	r0, r3, #1
 801f7d2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f7d6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f7da:	ea4c 0c09 	orr.w	ip, ip, r9
 801f7de:	783b      	ldrb	r3, [r7, #0]
 801f7e0:	fa5f f28c 	uxtb.w	r2, ip
 801f7e4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f7e8:	fb12 f201 	smulbb	r2, r2, r1
 801f7ec:	b2c0      	uxtb	r0, r0
 801f7ee:	fb03 2300 	mla	r3, r3, r0, r2
 801f7f2:	b29b      	uxth	r3, r3
 801f7f4:	1c5a      	adds	r2, r3, #1
 801f7f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f7fa:	787a      	ldrb	r2, [r7, #1]
 801f7fc:	fb12 f200 	smulbb	r2, r2, r0
 801f800:	121b      	asrs	r3, r3, #8
 801f802:	703b      	strb	r3, [r7, #0]
 801f804:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f808:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f80c:	fb03 2301 	mla	r3, r3, r1, r2
 801f810:	b29b      	uxth	r3, r3
 801f812:	1c5a      	adds	r2, r3, #1
 801f814:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f818:	121b      	asrs	r3, r3, #8
 801f81a:	707b      	strb	r3, [r7, #1]
 801f81c:	78bb      	ldrb	r3, [r7, #2]
 801f81e:	fb13 f000 	smulbb	r0, r3, r0
 801f822:	fb0c 0c01 	mla	ip, ip, r1, r0
 801f826:	fa1f fc8c 	uxth.w	ip, ip
 801f82a:	f10c 0301 	add.w	r3, ip, #1
 801f82e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f832:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f836:	f887 c002 	strb.w	ip, [r7, #2]
 801f83a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801f83c:	3703      	adds	r7, #3
 801f83e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801f840:	441a      	add	r2, r3
 801f842:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f844:	441d      	add	r5, r3
 801f846:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f848:	9231      	str	r2, [sp, #196]	; 0xc4
 801f84a:	3b01      	subs	r3, #1
 801f84c:	931a      	str	r3, [sp, #104]	; 0x68
 801f84e:	e69c      	b.n	801f58a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801f850:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801f852:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801f854:	441c      	add	r4, r3
 801f856:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f858:	441d      	add	r5, r3
 801f85a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f85c:	9431      	str	r4, [sp, #196]	; 0xc4
 801f85e:	3b01      	subs	r3, #1
 801f860:	9309      	str	r3, [sp, #36]	; 0x24
 801f862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f864:	3303      	adds	r3, #3
 801f866:	930c      	str	r3, [sp, #48]	; 0x30
 801f868:	e66f      	b.n	801f54a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f86a:	d026      	beq.n	801f8ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801f86c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f86e:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801f870:	3b01      	subs	r3, #1
 801f872:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801f874:	fb00 4003 	mla	r0, r0, r3, r4
 801f878:	1400      	asrs	r0, r0, #16
 801f87a:	f53f ae83 	bmi.w	801f584 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801f87e:	3901      	subs	r1, #1
 801f880:	4288      	cmp	r0, r1
 801f882:	f6bf ae7f 	bge.w	801f584 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801f886:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801f888:	fb01 5303 	mla	r3, r1, r3, r5
 801f88c:	141b      	asrs	r3, r3, #16
 801f88e:	f53f ae79 	bmi.w	801f584 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801f892:	3a01      	subs	r2, #1
 801f894:	4293      	cmp	r3, r2
 801f896:	f6bf ae75 	bge.w	801f584 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801f89a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f89c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801f8a0:	f103 0e03 	add.w	lr, r3, #3
 801f8a4:	f1bb 0f00 	cmp.w	fp, #0
 801f8a8:	dc71      	bgt.n	801f98e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801f8aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8ac:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f8b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f8b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f8b6:	4423      	add	r3, r4
 801f8b8:	930c      	str	r3, [sp, #48]	; 0x30
 801f8ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f8bc:	2b00      	cmp	r3, #0
 801f8be:	f340 81b5 	ble.w	801fc2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801f8c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f8c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f8c8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f8cc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f8d0:	eef0 6a48 	vmov.f32	s13, s16
 801f8d4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f8d8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f8dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f8e0:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 801f8e4:	eef0 6a68 	vmov.f32	s13, s17
 801f8e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f8ec:	ee16 5a90 	vmov	r5, s13
 801f8f0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f8f4:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f8f8:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f8fc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f900:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f904:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f908:	ee18 2a10 	vmov	r2, s16
 801f90c:	eeb0 8a47 	vmov.f32	s16, s14
 801f910:	fb92 f3f3 	sdiv	r3, r2, r3
 801f914:	ee18 2a90 	vmov	r2, s17
 801f918:	9333      	str	r3, [sp, #204]	; 0xcc
 801f91a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f91c:	eef0 8a67 	vmov.f32	s17, s15
 801f920:	fb92 f3f3 	sdiv	r3, r2, r3
 801f924:	9334      	str	r3, [sp, #208]	; 0xd0
 801f926:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f928:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f92a:	3b01      	subs	r3, #1
 801f92c:	9319      	str	r3, [sp, #100]	; 0x64
 801f92e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f930:	bf08      	it	eq
 801f932:	4613      	moveq	r3, r2
 801f934:	9309      	str	r3, [sp, #36]	; 0x24
 801f936:	e5fa      	b.n	801f52e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f938:	2900      	cmp	r1, #0
 801f93a:	f43f ae6c 	beq.w	801f616 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801f93e:	f818 0000 	ldrb.w	r0, [r8, r0]
 801f942:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f946:	900a      	str	r0, [sp, #40]	; 0x28
 801f948:	0e00      	lsrs	r0, r0, #24
 801f94a:	9013      	str	r0, [sp, #76]	; 0x4c
 801f94c:	e663      	b.n	801f616 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801f94e:	f113 0801 	adds.w	r8, r3, #1
 801f952:	f53f af72 	bmi.w	801f83a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f956:	4540      	cmp	r0, r8
 801f958:	f6ff af6f 	blt.w	801f83a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f95c:	f11c 0801 	adds.w	r8, ip, #1
 801f960:	f53f af6b 	bmi.w	801f83a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f964:	45c6      	cmp	lr, r8
 801f966:	f6ff af68 	blt.w	801f83a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f96a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801f96c:	b200      	sxth	r0, r0
 801f96e:	9302      	str	r3, [sp, #8]
 801f970:	fa0f f38e 	sxth.w	r3, lr
 801f974:	9000      	str	r0, [sp, #0]
 801f976:	9301      	str	r3, [sp, #4]
 801f978:	4633      	mov	r3, r6
 801f97a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801f97c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f980:	e9cd c203 	strd	ip, r2, [sp, #12]
 801f984:	4639      	mov	r1, r7
 801f986:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f988:	f7ff fc60 	bl	801f24c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801f98c:	e755      	b.n	801f83a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f98e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801f990:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f994:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801f996:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f99a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801f99c:	1427      	asrs	r7, r4, #16
 801f99e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f9a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f9a4:	142b      	asrs	r3, r5, #16
 801f9a6:	fb01 7303 	mla	r3, r1, r3, r7
 801f9aa:	18e7      	adds	r7, r4, r3
 801f9ac:	5ce3      	ldrb	r3, [r4, r3]
 801f9ae:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f9b2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f9b6:	2a00      	cmp	r2, #0
 801f9b8:	f000 812e 	beq.w	801fc18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 801f9bc:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f9c0:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801f9c4:	9410      	str	r4, [sp, #64]	; 0x40
 801f9c6:	0e24      	lsrs	r4, r4, #24
 801f9c8:	9417      	str	r4, [sp, #92]	; 0x5c
 801f9ca:	b170      	cbz	r0, 801f9ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801f9cc:	eb07 0801 	add.w	r8, r7, r1
 801f9d0:	5c79      	ldrb	r1, [r7, r1]
 801f9d2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f9d6:	910b      	str	r1, [sp, #44]	; 0x2c
 801f9d8:	0e09      	lsrs	r1, r1, #24
 801f9da:	9114      	str	r1, [sp, #80]	; 0x50
 801f9dc:	f898 1001 	ldrb.w	r1, [r8, #1]
 801f9e0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f9e4:	9111      	str	r1, [sp, #68]	; 0x44
 801f9e6:	0e09      	lsrs	r1, r1, #24
 801f9e8:	9118      	str	r1, [sp, #96]	; 0x60
 801f9ea:	b292      	uxth	r2, r2
 801f9ec:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801f9ee:	b280      	uxth	r0, r0
 801f9f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f9f2:	fb02 f900 	mul.w	r9, r2, r0
 801f9f6:	0112      	lsls	r2, r2, #4
 801f9f8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f9fc:	eba2 0809 	sub.w	r8, r2, r9
 801fa00:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801fa04:	b280      	uxth	r0, r0
 801fa06:	fa1f f888 	uxth.w	r8, r8
 801fa0a:	1a12      	subs	r2, r2, r0
 801fa0c:	fb08 f101 	mul.w	r1, r8, r1
 801fa10:	b292      	uxth	r2, r2
 801fa12:	fb02 110c 	mla	r1, r2, ip, r1
 801fa16:	fb00 1104 	mla	r1, r0, r4, r1
 801fa1a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801fa1c:	fb09 1104 	mla	r1, r9, r4, r1
 801fa20:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fa24:	2900      	cmp	r1, #0
 801fa26:	f000 80ec 	beq.w	801fc02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 801fa2a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fa2e:	d019      	beq.n	801fa64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 801fa30:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801fa34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fa38:	fb0c fa0a 	mul.w	sl, ip, sl
 801fa3c:	fb0c fc03 	mul.w	ip, ip, r3
 801fa40:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fa44:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fa48:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801fa4c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fa50:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fa54:	4453      	add	r3, sl
 801fa56:	0a3f      	lsrs	r7, r7, #8
 801fa58:	0a1b      	lsrs	r3, r3, #8
 801fa5a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fa5e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fa62:	433b      	orrs	r3, r7
 801fa64:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fa66:	2cff      	cmp	r4, #255	; 0xff
 801fa68:	d020      	beq.n	801faac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 801fa6a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fa6c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fa70:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fa72:	4367      	muls	r7, r4
 801fa74:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fa76:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fa7a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fa7e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fa80:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fa84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa88:	fb04 fa0a 	mul.w	sl, r4, sl
 801fa8c:	44bc      	add	ip, r7
 801fa8e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fa92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa96:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fa9a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801faa2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801faa6:	ea4c 040a 	orr.w	r4, ip, sl
 801faaa:	9410      	str	r4, [sp, #64]	; 0x40
 801faac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801faae:	2cff      	cmp	r4, #255	; 0xff
 801fab0:	d020      	beq.n	801faf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 801fab2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fab4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fab8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801faba:	4367      	muls	r7, r4
 801fabc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fabe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fac2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fac6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fac8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801facc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fad0:	fb04 fa0a 	mul.w	sl, r4, sl
 801fad4:	44bc      	add	ip, r7
 801fad6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fada:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fade:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fae2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fae6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801faea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801faee:	ea4c 040a 	orr.w	r4, ip, sl
 801faf2:	940b      	str	r4, [sp, #44]	; 0x2c
 801faf4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801faf6:	2cff      	cmp	r4, #255	; 0xff
 801faf8:	d020      	beq.n	801fb3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 801fafa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fafc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fb00:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801fb02:	4367      	muls	r7, r4
 801fb04:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fb06:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fb0a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fb0e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801fb10:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fb14:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fb18:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb1c:	44bc      	add	ip, r7
 801fb1e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fb22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb26:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fb2a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fb2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb32:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fb36:	ea4c 040a 	orr.w	r4, ip, sl
 801fb3a:	9411      	str	r4, [sp, #68]	; 0x44
 801fb3c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fb3e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fb42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fb46:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fb4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fb4c:	fb08 f707 	mul.w	r7, r8, r7
 801fb50:	fb02 770c 	mla	r7, r2, ip, r7
 801fb54:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fb58:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fb5a:	fb00 770c 	mla	r7, r0, ip, r7
 801fb5e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fb62:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fb64:	fb09 770c 	mla	r7, r9, ip, r7
 801fb68:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801fb6c:	fb08 f80c 	mul.w	r8, r8, ip
 801fb70:	0a3f      	lsrs	r7, r7, #8
 801fb72:	fb02 8303 	mla	r3, r2, r3, r8
 801fb76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fb78:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fb7c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801fb80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fb82:	fb00 330a 	mla	r3, r0, sl, r3
 801fb86:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fb8a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fb8c:	fb09 3c0c 	mla	ip, r9, ip, r3
 801fb90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fb92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb96:	434b      	muls	r3, r1
 801fb98:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fb9c:	1c59      	adds	r1, r3, #1
 801fb9e:	ea47 070c 	orr.w	r7, r7, ip
 801fba2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fba6:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801fbaa:	b2fa      	uxtb	r2, r7
 801fbac:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fbb0:	fb12 f200 	smulbb	r2, r2, r0
 801fbb4:	b2c9      	uxtb	r1, r1
 801fbb6:	fb03 2301 	mla	r3, r3, r1, r2
 801fbba:	b29b      	uxth	r3, r3
 801fbbc:	1c5a      	adds	r2, r3, #1
 801fbbe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fbc2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801fbc6:	fb12 f201 	smulbb	r2, r2, r1
 801fbca:	121b      	asrs	r3, r3, #8
 801fbcc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801fbd0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801fbd4:	0c3f      	lsrs	r7, r7, #16
 801fbd6:	fb03 2300 	mla	r3, r3, r0, r2
 801fbda:	b29b      	uxth	r3, r3
 801fbdc:	1c5a      	adds	r2, r3, #1
 801fbde:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fbe2:	121b      	asrs	r3, r3, #8
 801fbe4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801fbe8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801fbec:	fb13 f101 	smulbb	r1, r3, r1
 801fbf0:	fb07 1700 	mla	r7, r7, r0, r1
 801fbf4:	b2bf      	uxth	r7, r7
 801fbf6:	1c7b      	adds	r3, r7, #1
 801fbf8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801fbfc:	123f      	asrs	r7, r7, #8
 801fbfe:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801fc02:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801fc04:	f10e 0e03 	add.w	lr, lr, #3
 801fc08:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801fc0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fc0e:	441a      	add	r2, r3
 801fc10:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801fc12:	9231      	str	r2, [sp, #196]	; 0xc4
 801fc14:	441d      	add	r5, r3
 801fc16:	e645      	b.n	801f8a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 801fc18:	2800      	cmp	r0, #0
 801fc1a:	f43f aee6 	beq.w	801f9ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801fc1e:	5c79      	ldrb	r1, [r7, r1]
 801fc20:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fc24:	910b      	str	r1, [sp, #44]	; 0x2c
 801fc26:	0e09      	lsrs	r1, r1, #24
 801fc28:	9114      	str	r1, [sp, #80]	; 0x50
 801fc2a:	e6de      	b.n	801f9ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801fc2c:	b01f      	add	sp, #124	; 0x7c
 801fc2e:	ecbd 8b08 	vpop	{d8-d11}
 801fc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fc38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801fc38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc3c:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 801fc40:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801fc44:	2c00      	cmp	r4, #0
 801fc46:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801fc4a:	fb04 060c 	mla	r6, r4, ip, r0
 801fc4e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801fc52:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 801fc56:	eb02 0e06 	add.w	lr, r2, r6
 801fc5a:	db3d      	blt.n	801fcd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 801fc5c:	45a0      	cmp	r8, r4
 801fc5e:	dd3b      	ble.n	801fcd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 801fc60:	2800      	cmp	r0, #0
 801fc62:	db37      	blt.n	801fcd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801fc64:	4584      	cmp	ip, r0
 801fc66:	dd35      	ble.n	801fcd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801fc68:	5d92      	ldrb	r2, [r2, r6]
 801fc6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801fc6e:	1c46      	adds	r6, r0, #1
 801fc70:	d435      	bmi.n	801fcde <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 801fc72:	45b4      	cmp	ip, r6
 801fc74:	dd33      	ble.n	801fcde <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 801fc76:	b3a5      	cbz	r5, 801fce2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 801fc78:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801fc7c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801fc80:	3401      	adds	r4, #1
 801fc82:	d432      	bmi.n	801fcea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801fc84:	45a0      	cmp	r8, r4
 801fc86:	dd30      	ble.n	801fcea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801fc88:	b397      	cbz	r7, 801fcf0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 801fc8a:	2800      	cmp	r0, #0
 801fc8c:	db2b      	blt.n	801fce6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 801fc8e:	4584      	cmp	ip, r0
 801fc90:	dd29      	ble.n	801fce6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 801fc92:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801fc96:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801fc9a:	3001      	adds	r0, #1
 801fc9c:	d42b      	bmi.n	801fcf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 801fc9e:	4584      	cmp	ip, r0
 801fca0:	dd29      	ble.n	801fcf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 801fca2:	b355      	cbz	r5, 801fcfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 801fca4:	44f4      	add	ip, lr
 801fca6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801fcaa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801fcae:	2d0f      	cmp	r5, #15
 801fcb0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801fcb4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fcb8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801fcbc:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801fcc0:	d801      	bhi.n	801fcc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 801fcc2:	2f0f      	cmp	r7, #15
 801fcc4:	d91b      	bls.n	801fcfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 801fcc6:	4b7f      	ldr	r3, [pc, #508]	; (801fec4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801fcc8:	f240 1157 	movw	r1, #343	; 0x157
 801fccc:	4a7e      	ldr	r2, [pc, #504]	; (801fec8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801fcce:	487f      	ldr	r0, [pc, #508]	; (801fecc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801fcd0:	f005 f898 	bl	8024e04 <__assert_func>
 801fcd4:	2200      	movs	r2, #0
 801fcd6:	e7ca      	b.n	801fc6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 801fcd8:	2600      	movs	r6, #0
 801fcda:	4632      	mov	r2, r6
 801fcdc:	e7d0      	b.n	801fc80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801fcde:	2600      	movs	r6, #0
 801fce0:	e7ce      	b.n	801fc80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801fce2:	462e      	mov	r6, r5
 801fce4:	e7cc      	b.n	801fc80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801fce6:	2400      	movs	r4, #0
 801fce8:	e7d7      	b.n	801fc9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 801fcea:	2300      	movs	r3, #0
 801fcec:	461c      	mov	r4, r3
 801fcee:	e7de      	b.n	801fcae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801fcf0:	463b      	mov	r3, r7
 801fcf2:	463c      	mov	r4, r7
 801fcf4:	e7db      	b.n	801fcae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801fcf6:	2300      	movs	r3, #0
 801fcf8:	e7d9      	b.n	801fcae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801fcfa:	462b      	mov	r3, r5
 801fcfc:	e7d7      	b.n	801fcae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801fcfe:	b2a8      	uxth	r0, r5
 801fd00:	b2bf      	uxth	r7, r7
 801fd02:	fb07 fe00 	mul.w	lr, r7, r0
 801fd06:	0100      	lsls	r0, r0, #4
 801fd08:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801fd0c:	eba0 0c0e 	sub.w	ip, r0, lr
 801fd10:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801fd14:	b2bf      	uxth	r7, r7
 801fd16:	fa1f fc8c 	uxth.w	ip, ip
 801fd1a:	1bc5      	subs	r5, r0, r7
 801fd1c:	fb0c f00a 	mul.w	r0, ip, sl
 801fd20:	b2ad      	uxth	r5, r5
 801fd22:	fb05 000b 	mla	r0, r5, fp, r0
 801fd26:	fb07 0009 	mla	r0, r7, r9, r0
 801fd2a:	fb0e 0008 	mla	r0, lr, r8, r0
 801fd2e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fd32:	9001      	str	r0, [sp, #4]
 801fd34:	2800      	cmp	r0, #0
 801fd36:	f000 80c2 	beq.w	801febe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 801fd3a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801fd3e:	d018      	beq.n	801fd72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 801fd40:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801fd44:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fd48:	fb0b f000 	mul.w	r0, fp, r0
 801fd4c:	fb0b fb02 	mul.w	fp, fp, r2
 801fd50:	0a02      	lsrs	r2, r0, #8
 801fd52:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801fd56:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fd5a:	4402      	add	r2, r0
 801fd5c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801fd60:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801fd64:	0a12      	lsrs	r2, r2, #8
 801fd66:	0a00      	lsrs	r0, r0, #8
 801fd68:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fd6c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fd70:	4302      	orrs	r2, r0
 801fd72:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801fd76:	d01a      	beq.n	801fdae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 801fd78:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801fd7c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fd80:	fb0a f000 	mul.w	r0, sl, r0
 801fd84:	fb0a fa06 	mul.w	sl, sl, r6
 801fd88:	0a06      	lsrs	r6, r0, #8
 801fd8a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801fd8e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fd92:	4406      	add	r6, r0
 801fd94:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801fd98:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801fd9c:	0a36      	lsrs	r6, r6, #8
 801fd9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fda2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fda6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fdaa:	ea46 060a 	orr.w	r6, r6, sl
 801fdae:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fdb2:	d01b      	beq.n	801fdec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 801fdb4:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801fdb8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801fdbc:	fb09 fa0a 	mul.w	sl, r9, sl
 801fdc0:	fb09 f004 	mul.w	r0, r9, r4
 801fdc4:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801fdc8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fdcc:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801fdd0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fdd4:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801fdd8:	4454      	add	r4, sl
 801fdda:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fdde:	0a24      	lsrs	r4, r4, #8
 801fde0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fde4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fde8:	ea44 0409 	orr.w	r4, r4, r9
 801fdec:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fdf0:	d01b      	beq.n	801fe2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 801fdf2:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801fdf6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fdfa:	fb08 f909 	mul.w	r9, r8, r9
 801fdfe:	fb08 f003 	mul.w	r0, r8, r3
 801fe02:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801fe06:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801fe0a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801fe0e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fe12:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801fe16:	444b      	add	r3, r9
 801fe18:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fe1c:	0a1b      	lsrs	r3, r3, #8
 801fe1e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801fe22:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fe26:	ea43 0308 	orr.w	r3, r3, r8
 801fe2a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801fe2e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fe32:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801fe36:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fe3a:	fb0c f000 	mul.w	r0, ip, r0
 801fe3e:	fb0c f606 	mul.w	r6, ip, r6
 801fe42:	fb05 0808 	mla	r8, r5, r8, r0
 801fe46:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801fe4a:	fb05 6502 	mla	r5, r5, r2, r6
 801fe4e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801fe52:	fb07 8800 	mla	r8, r7, r0, r8
 801fe56:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801fe5a:	fb07 5704 	mla	r7, r7, r4, r5
 801fe5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fe62:	fb0e 8000 	mla	r0, lr, r0, r8
 801fe66:	780a      	ldrb	r2, [r1, #0]
 801fe68:	fb0e 7e03 	mla	lr, lr, r3, r7
 801fe6c:	9b01      	ldr	r3, [sp, #4]
 801fe6e:	0a00      	lsrs	r0, r0, #8
 801fe70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fe74:	43db      	mvns	r3, r3
 801fe76:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fe7a:	b2db      	uxtb	r3, r3
 801fe7c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801fe80:	ea40 0e0e 	orr.w	lr, r0, lr
 801fe84:	fb02 f003 	mul.w	r0, r2, r3
 801fe88:	1c42      	adds	r2, r0, #1
 801fe8a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801fe8e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801fe92:	700a      	strb	r2, [r1, #0]
 801fe94:	784a      	ldrb	r2, [r1, #1]
 801fe96:	435a      	muls	r2, r3
 801fe98:	1c50      	adds	r0, r2, #1
 801fe9a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801fe9e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801fea2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801fea6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801feaa:	704a      	strb	r2, [r1, #1]
 801feac:	788a      	ldrb	r2, [r1, #2]
 801feae:	4353      	muls	r3, r2
 801feb0:	1c5a      	adds	r2, r3, #1
 801feb2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801feb6:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801feba:	f881 e002 	strb.w	lr, [r1, #2]
 801febe:	b003      	add	sp, #12
 801fec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fec4:	0802ce1f 	.word	0x0802ce1f
 801fec8:	0802d387 	.word	0x0802d387
 801fecc:	0802cee8 	.word	0x0802cee8

0801fed0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fed4:	ed2d 8b0a 	vpush	{d8-d12}
 801fed8:	b09b      	sub	sp, #108	; 0x6c
 801feda:	eeb0 aa40 	vmov.f32	s20, s0
 801fede:	eef0 9a60 	vmov.f32	s19, s1
 801fee2:	9218      	str	r2, [sp, #96]	; 0x60
 801fee4:	eeb0 9a41 	vmov.f32	s18, s2
 801fee8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801feea:	eeb0 8a62 	vmov.f32	s16, s5
 801feee:	9019      	str	r0, [sp, #100]	; 0x64
 801fef0:	eef0 8a43 	vmov.f32	s17, s6
 801fef4:	6850      	ldr	r0, [r2, #4]
 801fef6:	eeb0 ca44 	vmov.f32	s24, s8
 801fefa:	9116      	str	r1, [sp, #88]	; 0x58
 801fefc:	eef0 ba64 	vmov.f32	s23, s9
 801ff00:	9307      	str	r3, [sp, #28]
 801ff02:	eeb0 ba45 	vmov.f32	s22, s10
 801ff06:	6812      	ldr	r2, [r2, #0]
 801ff08:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801ff0c:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801ff0e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801ff12:	fb00 1303 	mla	r3, r0, r3, r1
 801ff16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff1a:	18d3      	adds	r3, r2, r3
 801ff1c:	930a      	str	r3, [sp, #40]	; 0x28
 801ff1e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801ff20:	681b      	ldr	r3, [r3, #0]
 801ff22:	930f      	str	r3, [sp, #60]	; 0x3c
 801ff24:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801ff26:	685e      	ldr	r6, [r3, #4]
 801ff28:	3604      	adds	r6, #4
 801ff2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ff2c:	2b00      	cmp	r3, #0
 801ff2e:	dc03      	bgt.n	801ff38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ff30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ff32:	2b00      	cmp	r3, #0
 801ff34:	f340 834f 	ble.w	80205d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801ff38:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801ff3a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ff3e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ff42:	1e48      	subs	r0, r1, #1
 801ff44:	1e57      	subs	r7, r2, #1
 801ff46:	9b07      	ldr	r3, [sp, #28]
 801ff48:	2b00      	cmp	r3, #0
 801ff4a:	f340 8178 	ble.w	802023e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801ff4e:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801ff50:	142b      	asrs	r3, r5, #16
 801ff52:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801ff56:	d406      	bmi.n	801ff66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ff58:	4584      	cmp	ip, r0
 801ff5a:	da04      	bge.n	801ff66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ff5c:	2b00      	cmp	r3, #0
 801ff5e:	db02      	blt.n	801ff66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ff60:	42bb      	cmp	r3, r7
 801ff62:	f2c0 816d 	blt.w	8020240 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801ff66:	f11c 0c01 	adds.w	ip, ip, #1
 801ff6a:	f100 815b 	bmi.w	8020224 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801ff6e:	4561      	cmp	r1, ip
 801ff70:	f2c0 8158 	blt.w	8020224 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801ff74:	3301      	adds	r3, #1
 801ff76:	f100 8155 	bmi.w	8020224 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801ff7a:	429a      	cmp	r2, r3
 801ff7c:	f2c0 8152 	blt.w	8020224 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801ff80:	9b07      	ldr	r3, [sp, #28]
 801ff82:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ff84:	9317      	str	r3, [sp, #92]	; 0x5c
 801ff86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ff88:	2b00      	cmp	r3, #0
 801ff8a:	f340 8178 	ble.w	802027e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801ff8e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801ff90:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801ff94:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ff98:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ff9c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801ff9e:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801ffa2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801ffa4:	141b      	asrs	r3, r3, #16
 801ffa6:	f100 81ba 	bmi.w	802031e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801ffaa:	f101 38ff 	add.w	r8, r1, #4294967295
 801ffae:	4543      	cmp	r3, r8
 801ffb0:	f280 81b5 	bge.w	802031e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801ffb4:	f1bc 0f00 	cmp.w	ip, #0
 801ffb8:	f2c0 81b1 	blt.w	802031e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801ffbc:	f10e 38ff 	add.w	r8, lr, #4294967295
 801ffc0:	45c4      	cmp	ip, r8
 801ffc2:	f280 81ac 	bge.w	802031e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801ffc6:	b209      	sxth	r1, r1
 801ffc8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ffca:	fb0c 3301 	mla	r3, ip, r1, r3
 801ffce:	eb04 0803 	add.w	r8, r4, r3
 801ffd2:	5ce3      	ldrb	r3, [r4, r3]
 801ffd4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ffd8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ffdc:	2a00      	cmp	r2, #0
 801ffde:	f000 8193 	beq.w	8020308 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801ffe2:	f898 c001 	ldrb.w	ip, [r8, #1]
 801ffe6:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801ffea:	940b      	str	r4, [sp, #44]	; 0x2c
 801ffec:	0e24      	lsrs	r4, r4, #24
 801ffee:	9412      	str	r4, [sp, #72]	; 0x48
 801fff0:	b178      	cbz	r0, 8020012 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801fff2:	eb08 0c01 	add.w	ip, r8, r1
 801fff6:	f818 1001 	ldrb.w	r1, [r8, r1]
 801fffa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fffe:	9108      	str	r1, [sp, #32]
 8020000:	0e09      	lsrs	r1, r1, #24
 8020002:	9110      	str	r1, [sp, #64]	; 0x40
 8020004:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8020008:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802000c:	910c      	str	r1, [sp, #48]	; 0x30
 802000e:	0e09      	lsrs	r1, r1, #24
 8020010:	9113      	str	r1, [sp, #76]	; 0x4c
 8020012:	b292      	uxth	r2, r2
 8020014:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020016:	b280      	uxth	r0, r0
 8020018:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802001a:	fb02 f900 	mul.w	r9, r2, r0
 802001e:	0112      	lsls	r2, r2, #4
 8020020:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020024:	eba2 0809 	sub.w	r8, r2, r9
 8020028:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802002c:	b280      	uxth	r0, r0
 802002e:	fa1f f888 	uxth.w	r8, r8
 8020032:	1a12      	subs	r2, r2, r0
 8020034:	fb08 f101 	mul.w	r1, r8, r1
 8020038:	b292      	uxth	r2, r2
 802003a:	fb02 110e 	mla	r1, r2, lr, r1
 802003e:	fb00 1104 	mla	r1, r0, r4, r1
 8020042:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020044:	fb09 1104 	mla	r1, r9, r4, r1
 8020048:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802004c:	2900      	cmp	r1, #0
 802004e:	f000 80de 	beq.w	802020e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020052:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020056:	d01b      	beq.n	8020090 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8020058:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802005c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020060:	fb0e fa0a 	mul.w	sl, lr, sl
 8020064:	fb0e fe03 	mul.w	lr, lr, r3
 8020068:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802006c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020070:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020074:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020078:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802007c:	4453      	add	r3, sl
 802007e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020082:	0a1b      	lsrs	r3, r3, #8
 8020084:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020088:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802008c:	ea43 030c 	orr.w	r3, r3, ip
 8020090:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020092:	2cff      	cmp	r4, #255	; 0xff
 8020094:	d021      	beq.n	80200da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8020096:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020098:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802009c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802009e:	fb04 fb0b 	mul.w	fp, r4, fp
 80200a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80200a4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80200a8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80200aa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80200ae:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80200b2:	fb04 fa0a 	mul.w	sl, r4, sl
 80200b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80200ba:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80200be:	44de      	add	lr, fp
 80200c0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80200c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80200c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80200cc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80200d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80200d4:	ea4e 040a 	orr.w	r4, lr, sl
 80200d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80200da:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80200dc:	2cff      	cmp	r4, #255	; 0xff
 80200de:	d021      	beq.n	8020124 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80200e0:	9c08      	ldr	r4, [sp, #32]
 80200e2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80200e6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80200e8:	fb04 fb0b 	mul.w	fp, r4, fp
 80200ec:	9c08      	ldr	r4, [sp, #32]
 80200ee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80200f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80200f4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80200f8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80200fc:	fb04 fa0a 	mul.w	sl, r4, sl
 8020100:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020104:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020108:	44de      	add	lr, fp
 802010a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802010e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020112:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020116:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802011a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802011e:	ea4e 040a 	orr.w	r4, lr, sl
 8020122:	9408      	str	r4, [sp, #32]
 8020124:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020126:	2cff      	cmp	r4, #255	; 0xff
 8020128:	d021      	beq.n	802016e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 802012a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802012c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020130:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020132:	fb04 fb0b 	mul.w	fp, r4, fp
 8020136:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020138:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802013c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802013e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020142:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020146:	fb04 fa0a 	mul.w	sl, r4, sl
 802014a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802014e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020152:	44de      	add	lr, fp
 8020154:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020158:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802015c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020160:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020164:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020168:	ea4e 040a 	orr.w	r4, lr, sl
 802016c:	940c      	str	r4, [sp, #48]	; 0x30
 802016e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020170:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020174:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020178:	43c9      	mvns	r1, r1
 802017a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802017e:	9c08      	ldr	r4, [sp, #32]
 8020180:	b2c9      	uxtb	r1, r1
 8020182:	fb08 fc0c 	mul.w	ip, r8, ip
 8020186:	fb02 cc0e 	mla	ip, r2, lr, ip
 802018a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802018e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020190:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020194:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020198:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802019a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802019e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80201a2:	fb08 f80e 	mul.w	r8, r8, lr
 80201a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80201aa:	fb02 8303 	mla	r3, r2, r3, r8
 80201ae:	9a08      	ldr	r2, [sp, #32]
 80201b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80201b4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80201b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80201ba:	fb00 330a 	mla	r3, r0, sl, r3
 80201be:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80201c2:	fb09 3900 	mla	r9, r9, r0, r3
 80201c6:	783b      	ldrb	r3, [r7, #0]
 80201c8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80201cc:	fb03 f201 	mul.w	r2, r3, r1
 80201d0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80201d4:	1c53      	adds	r3, r2, #1
 80201d6:	ea4c 0c09 	orr.w	ip, ip, r9
 80201da:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80201de:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80201e2:	703b      	strb	r3, [r7, #0]
 80201e4:	787b      	ldrb	r3, [r7, #1]
 80201e6:	434b      	muls	r3, r1
 80201e8:	1c5a      	adds	r2, r3, #1
 80201ea:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80201ee:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80201f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80201f6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80201fa:	707b      	strb	r3, [r7, #1]
 80201fc:	78bb      	ldrb	r3, [r7, #2]
 80201fe:	4359      	muls	r1, r3
 8020200:	1c4b      	adds	r3, r1, #1
 8020202:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020206:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802020a:	f887 c002 	strb.w	ip, [r7, #2]
 802020e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020210:	3703      	adds	r7, #3
 8020212:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020214:	441a      	add	r2, r3
 8020216:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020218:	441d      	add	r5, r3
 802021a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802021c:	922f      	str	r2, [sp, #188]	; 0xbc
 802021e:	3b01      	subs	r3, #1
 8020220:	9317      	str	r3, [sp, #92]	; 0x5c
 8020222:	e6b0      	b.n	801ff86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020224:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020226:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8020228:	441c      	add	r4, r3
 802022a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802022c:	441d      	add	r5, r3
 802022e:	9b07      	ldr	r3, [sp, #28]
 8020230:	942f      	str	r4, [sp, #188]	; 0xbc
 8020232:	3b01      	subs	r3, #1
 8020234:	9307      	str	r3, [sp, #28]
 8020236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020238:	3303      	adds	r3, #3
 802023a:	930a      	str	r3, [sp, #40]	; 0x28
 802023c:	e683      	b.n	801ff46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802023e:	d026      	beq.n	802028e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8020240:	9b07      	ldr	r3, [sp, #28]
 8020242:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8020244:	3b01      	subs	r3, #1
 8020246:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8020248:	fb00 4003 	mla	r0, r0, r3, r4
 802024c:	1400      	asrs	r0, r0, #16
 802024e:	f53f ae97 	bmi.w	801ff80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020252:	3901      	subs	r1, #1
 8020254:	4288      	cmp	r0, r1
 8020256:	f6bf ae93 	bge.w	801ff80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802025a:	9932      	ldr	r1, [sp, #200]	; 0xc8
 802025c:	fb01 5303 	mla	r3, r1, r3, r5
 8020260:	141b      	asrs	r3, r3, #16
 8020262:	f53f ae8d 	bmi.w	801ff80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020266:	3a01      	subs	r2, #1
 8020268:	4293      	cmp	r3, r2
 802026a:	f6bf ae89 	bge.w	801ff80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802026e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020270:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020274:	f103 0e03 	add.w	lr, r3, #3
 8020278:	f1bb 0f00 	cmp.w	fp, #0
 802027c:	dc6d      	bgt.n	802035a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 802027e:	9b07      	ldr	r3, [sp, #28]
 8020280:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020286:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802028a:	4423      	add	r3, r4
 802028c:	930a      	str	r3, [sp, #40]	; 0x28
 802028e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020290:	2b00      	cmp	r3, #0
 8020292:	f340 81a0 	ble.w	80205d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8020296:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802029a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802029c:	ee79 9aab 	vadd.f32	s19, s19, s23
 80202a0:	eef0 6a48 	vmov.f32	s13, s16
 80202a4:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80202a8:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80202ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202b0:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 80202b4:	eef0 6a68 	vmov.f32	s13, s17
 80202b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202bc:	ee16 5a90 	vmov	r5, s13
 80202c0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80202c4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80202c8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80202cc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80202d0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80202d4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80202d8:	ee18 2a10 	vmov	r2, s16
 80202dc:	eeb0 8a47 	vmov.f32	s16, s14
 80202e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80202e4:	ee18 2a90 	vmov	r2, s17
 80202e8:	9331      	str	r3, [sp, #196]	; 0xc4
 80202ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80202ec:	eef0 8a67 	vmov.f32	s17, s15
 80202f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80202f4:	9332      	str	r3, [sp, #200]	; 0xc8
 80202f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80202f8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80202fa:	3b01      	subs	r3, #1
 80202fc:	9316      	str	r3, [sp, #88]	; 0x58
 80202fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020300:	bf08      	it	eq
 8020302:	4613      	moveq	r3, r2
 8020304:	9307      	str	r3, [sp, #28]
 8020306:	e610      	b.n	801ff2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020308:	2800      	cmp	r0, #0
 802030a:	f43f ae82 	beq.w	8020012 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802030e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020312:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020316:	9108      	str	r1, [sp, #32]
 8020318:	0e09      	lsrs	r1, r1, #24
 802031a:	9110      	str	r1, [sp, #64]	; 0x40
 802031c:	e679      	b.n	8020012 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802031e:	f113 0801 	adds.w	r8, r3, #1
 8020322:	f53f af74 	bmi.w	802020e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020326:	4541      	cmp	r1, r8
 8020328:	f6ff af71 	blt.w	802020e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802032c:	f11c 0801 	adds.w	r8, ip, #1
 8020330:	f53f af6d 	bmi.w	802020e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020334:	45c6      	cmp	lr, r8
 8020336:	f6ff af6a 	blt.w	802020e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802033a:	b209      	sxth	r1, r1
 802033c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8020340:	fa0f f38e 	sxth.w	r3, lr
 8020344:	9100      	str	r1, [sp, #0]
 8020346:	4639      	mov	r1, r7
 8020348:	9301      	str	r3, [sp, #4]
 802034a:	4633      	mov	r3, r6
 802034c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8020350:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020352:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020354:	f7ff fc70 	bl	801fc38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8020358:	e759      	b.n	802020e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802035a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802035c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020360:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8020362:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020366:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020368:	1427      	asrs	r7, r4, #16
 802036a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802036c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020370:	142b      	asrs	r3, r5, #16
 8020372:	fb01 7303 	mla	r3, r1, r3, r7
 8020376:	18e7      	adds	r7, r4, r3
 8020378:	5ce3      	ldrb	r3, [r4, r3]
 802037a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802037e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020382:	2a00      	cmp	r2, #0
 8020384:	f000 811d 	beq.w	80205c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8020388:	f897 8001 	ldrb.w	r8, [r7, #1]
 802038c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8020390:	940d      	str	r4, [sp, #52]	; 0x34
 8020392:	0e24      	lsrs	r4, r4, #24
 8020394:	9414      	str	r4, [sp, #80]	; 0x50
 8020396:	b170      	cbz	r0, 80203b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8020398:	eb07 0801 	add.w	r8, r7, r1
 802039c:	5c79      	ldrb	r1, [r7, r1]
 802039e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80203a2:	9109      	str	r1, [sp, #36]	; 0x24
 80203a4:	0e09      	lsrs	r1, r1, #24
 80203a6:	9111      	str	r1, [sp, #68]	; 0x44
 80203a8:	f898 1001 	ldrb.w	r1, [r8, #1]
 80203ac:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80203b0:	910e      	str	r1, [sp, #56]	; 0x38
 80203b2:	0e09      	lsrs	r1, r1, #24
 80203b4:	9115      	str	r1, [sp, #84]	; 0x54
 80203b6:	b292      	uxth	r2, r2
 80203b8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80203ba:	b280      	uxth	r0, r0
 80203bc:	fb02 f900 	mul.w	r9, r2, r0
 80203c0:	0112      	lsls	r2, r2, #4
 80203c2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80203c6:	eba2 0809 	sub.w	r8, r2, r9
 80203ca:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80203ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80203d0:	b280      	uxth	r0, r0
 80203d2:	fa1f f888 	uxth.w	r8, r8
 80203d6:	1a09      	subs	r1, r1, r0
 80203d8:	fb08 f202 	mul.w	r2, r8, r2
 80203dc:	b289      	uxth	r1, r1
 80203de:	fb01 220c 	mla	r2, r1, ip, r2
 80203e2:	fb00 2204 	mla	r2, r0, r4, r2
 80203e6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80203e8:	fb09 2204 	mla	r2, r9, r4, r2
 80203ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80203f0:	2a00      	cmp	r2, #0
 80203f2:	f000 80db 	beq.w	80205ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80203f6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80203fa:	d019      	beq.n	8020430 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 80203fc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020400:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020404:	fb0c fa0a 	mul.w	sl, ip, sl
 8020408:	fb0c fc03 	mul.w	ip, ip, r3
 802040c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020410:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020414:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020418:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802041c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020420:	4453      	add	r3, sl
 8020422:	0a3f      	lsrs	r7, r7, #8
 8020424:	0a1b      	lsrs	r3, r3, #8
 8020426:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802042a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802042e:	433b      	orrs	r3, r7
 8020430:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020432:	2cff      	cmp	r4, #255	; 0xff
 8020434:	d020      	beq.n	8020478 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8020436:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020438:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802043c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802043e:	4367      	muls	r7, r4
 8020440:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020442:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020446:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802044a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802044c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020450:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020454:	fb04 fa0a 	mul.w	sl, r4, sl
 8020458:	44bc      	add	ip, r7
 802045a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802045e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020462:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020466:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802046a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802046e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020472:	ea4c 040a 	orr.w	r4, ip, sl
 8020476:	940d      	str	r4, [sp, #52]	; 0x34
 8020478:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802047a:	2cff      	cmp	r4, #255	; 0xff
 802047c:	d020      	beq.n	80204c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 802047e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020480:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020484:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020486:	4367      	muls	r7, r4
 8020488:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802048a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802048e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020492:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020494:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020498:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802049c:	fb04 fa0a 	mul.w	sl, r4, sl
 80204a0:	44bc      	add	ip, r7
 80204a2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80204a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204aa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80204ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80204b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80204b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80204ba:	ea4c 040a 	orr.w	r4, ip, sl
 80204be:	9409      	str	r4, [sp, #36]	; 0x24
 80204c0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80204c2:	2cff      	cmp	r4, #255	; 0xff
 80204c4:	d020      	beq.n	8020508 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 80204c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80204c8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80204cc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80204ce:	4367      	muls	r7, r4
 80204d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80204d2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80204d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80204da:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80204dc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80204e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80204e4:	fb04 fa0a 	mul.w	sl, r4, sl
 80204e8:	44bc      	add	ip, r7
 80204ea:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80204ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80204f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80204fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80204fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020502:	ea4c 040a 	orr.w	r4, ip, sl
 8020506:	940e      	str	r4, [sp, #56]	; 0x38
 8020508:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802050a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802050e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020512:	43d2      	mvns	r2, r2
 8020514:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020518:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802051a:	b2d2      	uxtb	r2, r2
 802051c:	fb08 f707 	mul.w	r7, r8, r7
 8020520:	fb01 770c 	mla	r7, r1, ip, r7
 8020524:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020528:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802052a:	fb00 770c 	mla	r7, r0, ip, r7
 802052e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020532:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020534:	fb09 770c 	mla	r7, r9, ip, r7
 8020538:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802053c:	fb08 f80c 	mul.w	r8, r8, ip
 8020540:	0a3f      	lsrs	r7, r7, #8
 8020542:	fb01 8303 	mla	r3, r1, r3, r8
 8020546:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020548:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802054c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8020550:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020552:	fb00 330a 	mla	r3, r0, sl, r3
 8020556:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802055a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802055e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020562:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020566:	fb03 f102 	mul.w	r1, r3, r2
 802056a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802056e:	1c4b      	adds	r3, r1, #1
 8020570:	ea47 070c 	orr.w	r7, r7, ip
 8020574:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020578:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 802057c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020580:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8020584:	4353      	muls	r3, r2
 8020586:	1c59      	adds	r1, r3, #1
 8020588:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802058c:	0a3b      	lsrs	r3, r7, #8
 802058e:	0c3f      	lsrs	r7, r7, #16
 8020590:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020594:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020598:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802059c:	435a      	muls	r2, r3
 802059e:	1c53      	adds	r3, r2, #1
 80205a0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80205a4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80205a8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80205ac:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80205ae:	f10e 0e03 	add.w	lr, lr, #3
 80205b2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80205b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80205b8:	441a      	add	r2, r3
 80205ba:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80205bc:	922f      	str	r2, [sp, #188]	; 0xbc
 80205be:	441d      	add	r5, r3
 80205c0:	e65a      	b.n	8020278 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80205c2:	2800      	cmp	r0, #0
 80205c4:	f43f aef7 	beq.w	80203b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80205c8:	5c79      	ldrb	r1, [r7, r1]
 80205ca:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80205ce:	9109      	str	r1, [sp, #36]	; 0x24
 80205d0:	0e09      	lsrs	r1, r1, #24
 80205d2:	9111      	str	r1, [sp, #68]	; 0x44
 80205d4:	e6ef      	b.n	80203b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80205d6:	b01b      	add	sp, #108	; 0x6c
 80205d8:	ecbd 8b0a 	vpop	{d8-d12}
 80205dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080205e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80205e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205e4:	b08d      	sub	sp, #52	; 0x34
 80205e6:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 80205ea:	9103      	str	r1, [sp, #12]
 80205ec:	fb07 5803 	mla	r8, r7, r3, r5
 80205f0:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80205f4:	9803      	ldr	r0, [sp, #12]
 80205f6:	2f00      	cmp	r7, #0
 80205f8:	910b      	str	r1, [sp, #44]	; 0x2c
 80205fa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80205fe:	9903      	ldr	r1, [sp, #12]
 8020600:	9c03      	ldr	r4, [sp, #12]
 8020602:	eb02 0608 	add.w	r6, r2, r8
 8020606:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802060a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 802060e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8020612:	7809      	ldrb	r1, [r1, #0]
 8020614:	7840      	ldrb	r0, [r0, #1]
 8020616:	78a4      	ldrb	r4, [r4, #2]
 8020618:	db51      	blt.n	80206be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802061a:	45be      	cmp	lr, r7
 802061c:	dd4f      	ble.n	80206be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802061e:	2d00      	cmp	r5, #0
 8020620:	db49      	blt.n	80206b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8020622:	42ab      	cmp	r3, r5
 8020624:	dd47      	ble.n	80206b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8020626:	f812 2008 	ldrb.w	r2, [r2, r8]
 802062a:	9204      	str	r2, [sp, #16]
 802062c:	7872      	ldrb	r2, [r6, #1]
 802062e:	9205      	str	r2, [sp, #20]
 8020630:	78b2      	ldrb	r2, [r6, #2]
 8020632:	9206      	str	r2, [sp, #24]
 8020634:	1c6a      	adds	r2, r5, #1
 8020636:	d449      	bmi.n	80206cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8020638:	4293      	cmp	r3, r2
 802063a:	dd47      	ble.n	80206cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 802063c:	f1bc 0f00 	cmp.w	ip, #0
 8020640:	d044      	beq.n	80206cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8020642:	7972      	ldrb	r2, [r6, #5]
 8020644:	f896 b003 	ldrb.w	fp, [r6, #3]
 8020648:	f896 a004 	ldrb.w	sl, [r6, #4]
 802064c:	9201      	str	r2, [sp, #4]
 802064e:	3701      	adds	r7, #1
 8020650:	d444      	bmi.n	80206dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8020652:	45be      	cmp	lr, r7
 8020654:	dd42      	ble.n	80206dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8020656:	f1b9 0f00 	cmp.w	r9, #0
 802065a:	f000 80c1 	beq.w	80207e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 802065e:	2d00      	cmp	r5, #0
 8020660:	db38      	blt.n	80206d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8020662:	42ab      	cmp	r3, r5
 8020664:	dd36      	ble.n	80206d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8020666:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802066a:	f816 8002 	ldrb.w	r8, [r6, r2]
 802066e:	2203      	movs	r2, #3
 8020670:	fb03 6702 	mla	r7, r3, r2, r6
 8020674:	fb03 6202 	mla	r2, r3, r2, r6
 8020678:	787f      	ldrb	r7, [r7, #1]
 802067a:	f892 e002 	ldrb.w	lr, [r2, #2]
 802067e:	9702      	str	r7, [sp, #8]
 8020680:	3501      	adds	r5, #1
 8020682:	d432      	bmi.n	80206ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8020684:	42ab      	cmp	r3, r5
 8020686:	dd30      	ble.n	80206ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8020688:	f1bc 0f00 	cmp.w	ip, #0
 802068c:	d031      	beq.n	80206f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 802068e:	2703      	movs	r7, #3
 8020690:	fb13 7207 	smlabb	r2, r3, r7, r7
 8020694:	5cb5      	ldrb	r5, [r6, r2]
 8020696:	fb03 6207 	mla	r2, r3, r7, r6
 802069a:	fb03 6307 	mla	r3, r3, r7, r6
 802069e:	7912      	ldrb	r2, [r2, #4]
 80206a0:	795e      	ldrb	r6, [r3, #5]
 80206a2:	f1bc 0f0f 	cmp.w	ip, #15
 80206a6:	d927      	bls.n	80206f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 80206a8:	4b53      	ldr	r3, [pc, #332]	; (80207f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 80206aa:	f240 1157 	movw	r1, #343	; 0x157
 80206ae:	4a53      	ldr	r2, [pc, #332]	; (80207fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 80206b0:	4853      	ldr	r0, [pc, #332]	; (8020800 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 80206b2:	f004 fba7 	bl	8024e04 <__assert_func>
 80206b6:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80206ba:	9104      	str	r1, [sp, #16]
 80206bc:	e7ba      	b.n	8020634 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 80206be:	9401      	str	r4, [sp, #4]
 80206c0:	4682      	mov	sl, r0
 80206c2:	468b      	mov	fp, r1
 80206c4:	9104      	str	r1, [sp, #16]
 80206c6:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80206ca:	e7c0      	b.n	802064e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80206cc:	9401      	str	r4, [sp, #4]
 80206ce:	4682      	mov	sl, r0
 80206d0:	468b      	mov	fp, r1
 80206d2:	e7bc      	b.n	802064e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80206d4:	46a6      	mov	lr, r4
 80206d6:	9002      	str	r0, [sp, #8]
 80206d8:	4688      	mov	r8, r1
 80206da:	e7d1      	b.n	8020680 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 80206dc:	4626      	mov	r6, r4
 80206de:	4602      	mov	r2, r0
 80206e0:	460d      	mov	r5, r1
 80206e2:	46a6      	mov	lr, r4
 80206e4:	9002      	str	r0, [sp, #8]
 80206e6:	4688      	mov	r8, r1
 80206e8:	e7db      	b.n	80206a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80206ea:	4626      	mov	r6, r4
 80206ec:	4602      	mov	r2, r0
 80206ee:	460d      	mov	r5, r1
 80206f0:	e7d7      	b.n	80206a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80206f2:	4626      	mov	r6, r4
 80206f4:	4602      	mov	r2, r0
 80206f6:	460d      	mov	r5, r1
 80206f8:	f1b9 0f0f 	cmp.w	r9, #15
 80206fc:	d8d4      	bhi.n	80206a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80206fe:	fa1f f38c 	uxth.w	r3, ip
 8020702:	fa1f fc89 	uxth.w	ip, r9
 8020706:	fb03 f70c 	mul.w	r7, r3, ip
 802070a:	011b      	lsls	r3, r3, #4
 802070c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8020710:	9707      	str	r7, [sp, #28]
 8020712:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020716:	fa1f fc8c 	uxth.w	ip, ip
 802071a:	eba7 070c 	sub.w	r7, r7, ip
 802071e:	b2bf      	uxth	r7, r7
 8020720:	9709      	str	r7, [sp, #36]	; 0x24
 8020722:	9f07      	ldr	r7, [sp, #28]
 8020724:	1bdb      	subs	r3, r3, r7
 8020726:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 802072a:	b29b      	uxth	r3, r3
 802072c:	9708      	str	r7, [sp, #32]
 802072e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020730:	930a      	str	r3, [sp, #40]	; 0x28
 8020732:	ea6f 0907 	mvn.w	r9, r7
 8020736:	fb03 fb0b 	mul.w	fp, r3, fp
 802073a:	9f04      	ldr	r7, [sp, #16]
 802073c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802073e:	fa5f f989 	uxtb.w	r9, r9
 8020742:	fb03 bb07 	mla	fp, r3, r7, fp
 8020746:	9f07      	ldr	r7, [sp, #28]
 8020748:	fb11 f109 	smulbb	r1, r1, r9
 802074c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802074e:	fb0c b808 	mla	r8, ip, r8, fp
 8020752:	fb10 f009 	smulbb	r0, r0, r9
 8020756:	fb14 f409 	smulbb	r4, r4, r9
 802075a:	fb07 8805 	mla	r8, r7, r5, r8
 802075e:	9d08      	ldr	r5, [sp, #32]
 8020760:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020762:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8020766:	fb08 1805 	mla	r8, r8, r5, r1
 802076a:	9d05      	ldr	r5, [sp, #20]
 802076c:	fa1f f888 	uxth.w	r8, r8
 8020770:	f108 0101 	add.w	r1, r8, #1
 8020774:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8020778:	9903      	ldr	r1, [sp, #12]
 802077a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802077e:	f881 8000 	strb.w	r8, [r1]
 8020782:	fb03 f10a 	mul.w	r1, r3, sl
 8020786:	fb07 1105 	mla	r1, r7, r5, r1
 802078a:	9d02      	ldr	r5, [sp, #8]
 802078c:	fb0c 1105 	mla	r1, ip, r5, r1
 8020790:	9d07      	ldr	r5, [sp, #28]
 8020792:	fb05 1102 	mla	r1, r5, r2, r1
 8020796:	9a08      	ldr	r2, [sp, #32]
 8020798:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802079c:	fb01 0102 	mla	r1, r1, r2, r0
 80207a0:	9a03      	ldr	r2, [sp, #12]
 80207a2:	b289      	uxth	r1, r1
 80207a4:	1c48      	adds	r0, r1, #1
 80207a6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80207aa:	1209      	asrs	r1, r1, #8
 80207ac:	7051      	strb	r1, [r2, #1]
 80207ae:	9a01      	ldr	r2, [sp, #4]
 80207b0:	4353      	muls	r3, r2
 80207b2:	9a06      	ldr	r2, [sp, #24]
 80207b4:	fb07 3702 	mla	r7, r7, r2, r3
 80207b8:	9b08      	ldr	r3, [sp, #32]
 80207ba:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80207be:	fb05 c606 	mla	r6, r5, r6, ip
 80207c2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80207c6:	fb06 4603 	mla	r6, r6, r3, r4
 80207ca:	9b03      	ldr	r3, [sp, #12]
 80207cc:	b2b6      	uxth	r6, r6
 80207ce:	f106 0e01 	add.w	lr, r6, #1
 80207d2:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80207d6:	1236      	asrs	r6, r6, #8
 80207d8:	709e      	strb	r6, [r3, #2]
 80207da:	b00d      	add	sp, #52	; 0x34
 80207dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207e0:	f1bc 0f0f 	cmp.w	ip, #15
 80207e4:	f63f af60 	bhi.w	80206a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80207e8:	4626      	mov	r6, r4
 80207ea:	4602      	mov	r2, r0
 80207ec:	460d      	mov	r5, r1
 80207ee:	46a6      	mov	lr, r4
 80207f0:	9002      	str	r0, [sp, #8]
 80207f2:	4688      	mov	r8, r1
 80207f4:	e783      	b.n	80206fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 80207f6:	bf00      	nop
 80207f8:	0802ce1f 	.word	0x0802ce1f
 80207fc:	0802d387 	.word	0x0802d387
 8020800:	0802cee8 	.word	0x0802cee8

08020804 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020808:	ed2d 8b08 	vpush	{d8-d11}
 802080c:	b09f      	sub	sp, #124	; 0x7c
 802080e:	eeb0 aa40 	vmov.f32	s20, s0
 8020812:	eef0 9a60 	vmov.f32	s19, s1
 8020816:	920e      	str	r2, [sp, #56]	; 0x38
 8020818:	eeb0 9a41 	vmov.f32	s18, s2
 802081c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802081e:	eeb0 8a62 	vmov.f32	s16, s5
 8020822:	9307      	str	r3, [sp, #28]
 8020824:	eef0 8a43 	vmov.f32	s17, s6
 8020828:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 802082c:	eef0 ba44 	vmov.f32	s23, s8
 8020830:	901d      	str	r0, [sp, #116]	; 0x74
 8020832:	eeb0 ba64 	vmov.f32	s22, s9
 8020836:	930c      	str	r3, [sp, #48]	; 0x30
 8020838:	eef0 aa45 	vmov.f32	s21, s10
 802083c:	6850      	ldr	r0, [r2, #4]
 802083e:	910b      	str	r1, [sp, #44]	; 0x2c
 8020840:	6812      	ldr	r2, [r2, #0]
 8020842:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8020846:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 802084a:	fb00 1303 	mla	r3, r0, r3, r1
 802084e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020852:	18d3      	adds	r3, r2, r3
 8020854:	9308      	str	r3, [sp, #32]
 8020856:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020858:	681b      	ldr	r3, [r3, #0]
 802085a:	930a      	str	r3, [sp, #40]	; 0x28
 802085c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802085e:	43db      	mvns	r3, r3
 8020860:	b2db      	uxtb	r3, r3
 8020862:	9309      	str	r3, [sp, #36]	; 0x24
 8020864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020866:	2b00      	cmp	r3, #0
 8020868:	dc03      	bgt.n	8020872 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802086a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802086c:	2b00      	cmp	r3, #0
 802086e:	f340 81f5 	ble.w	8020c5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8020872:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020874:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020878:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802087c:	1e48      	subs	r0, r1, #1
 802087e:	1e54      	subs	r4, r2, #1
 8020880:	9b07      	ldr	r3, [sp, #28]
 8020882:	2b00      	cmp	r3, #0
 8020884:	f340 80d5 	ble.w	8020a32 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8020888:	ea5f 452a 	movs.w	r5, sl, asr #16
 802088c:	ea4f 4328 	mov.w	r3, r8, asr #16
 8020890:	d406      	bmi.n	80208a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020892:	4285      	cmp	r5, r0
 8020894:	da04      	bge.n	80208a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020896:	2b00      	cmp	r3, #0
 8020898:	db02      	blt.n	80208a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802089a:	42a3      	cmp	r3, r4
 802089c:	f2c0 80ca 	blt.w	8020a34 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80208a0:	3501      	adds	r5, #1
 80208a2:	f100 80bb 	bmi.w	8020a1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80208a6:	42a9      	cmp	r1, r5
 80208a8:	f2c0 80b8 	blt.w	8020a1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80208ac:	3301      	adds	r3, #1
 80208ae:	f100 80b5 	bmi.w	8020a1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80208b2:	429a      	cmp	r2, r3
 80208b4:	f2c0 80b2 	blt.w	8020a1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80208b8:	9b07      	ldr	r3, [sp, #28]
 80208ba:	9d08      	ldr	r5, [sp, #32]
 80208bc:	930d      	str	r3, [sp, #52]	; 0x34
 80208be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80208c0:	2b00      	cmp	r3, #0
 80208c2:	f340 80d6 	ble.w	8020a72 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80208c6:	9838      	ldr	r0, [sp, #224]	; 0xe0
 80208c8:	ea4f 4428 	mov.w	r4, r8, asr #16
 80208cc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80208ce:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80208d2:	68c6      	ldr	r6, [r0, #12]
 80208d4:	ea5f 402a 	movs.w	r0, sl, asr #16
 80208d8:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80208dc:	689b      	ldr	r3, [r3, #8]
 80208de:	f100 810f 	bmi.w	8020b00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80208e2:	1e5f      	subs	r7, r3, #1
 80208e4:	42b8      	cmp	r0, r7
 80208e6:	f280 810b 	bge.w	8020b00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80208ea:	2c00      	cmp	r4, #0
 80208ec:	f2c0 8108 	blt.w	8020b00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80208f0:	1e77      	subs	r7, r6, #1
 80208f2:	42bc      	cmp	r4, r7
 80208f4:	f280 8104 	bge.w	8020b00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80208f8:	b21b      	sxth	r3, r3
 80208fa:	fb04 0003 	mla	r0, r4, r3, r0
 80208fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020900:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020904:	1826      	adds	r6, r4, r0
 8020906:	5c24      	ldrb	r4, [r4, r0]
 8020908:	78b7      	ldrb	r7, [r6, #2]
 802090a:	7870      	ldrb	r0, [r6, #1]
 802090c:	970f      	str	r7, [sp, #60]	; 0x3c
 802090e:	7977      	ldrb	r7, [r6, #5]
 8020910:	f896 e003 	ldrb.w	lr, [r6, #3]
 8020914:	f896 c004 	ldrb.w	ip, [r6, #4]
 8020918:	9710      	str	r7, [sp, #64]	; 0x40
 802091a:	b1c9      	cbz	r1, 8020950 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802091c:	f04f 0b03 	mov.w	fp, #3
 8020920:	f06f 0904 	mvn.w	r9, #4
 8020924:	3605      	adds	r6, #5
 8020926:	fb13 930b 	smlabb	r3, r3, fp, r9
 802092a:	eb06 0b03 	add.w	fp, r6, r3
 802092e:	5cf3      	ldrb	r3, [r6, r3]
 8020930:	9311      	str	r3, [sp, #68]	; 0x44
 8020932:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8020936:	9313      	str	r3, [sp, #76]	; 0x4c
 8020938:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802093c:	9315      	str	r3, [sp, #84]	; 0x54
 802093e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8020942:	9312      	str	r3, [sp, #72]	; 0x48
 8020944:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8020948:	9314      	str	r3, [sp, #80]	; 0x50
 802094a:	f89b 3005 	ldrb.w	r3, [fp, #5]
 802094e:	9316      	str	r3, [sp, #88]	; 0x58
 8020950:	b292      	uxth	r2, r2
 8020952:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8020954:	b289      	uxth	r1, r1
 8020956:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 802095a:	fb02 f601 	mul.w	r6, r2, r1
 802095e:	0112      	lsls	r2, r2, #4
 8020960:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8020964:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8020968:	1b92      	subs	r2, r2, r6
 802096a:	b289      	uxth	r1, r1
 802096c:	b292      	uxth	r2, r2
 802096e:	eba9 0901 	sub.w	r9, r9, r1
 8020972:	fb02 fe0e 	mul.w	lr, r2, lr
 8020976:	fa1f f989 	uxth.w	r9, r9
 802097a:	fb02 fc0c 	mul.w	ip, r2, ip
 802097e:	fb09 e404 	mla	r4, r9, r4, lr
 8020982:	f895 e000 	ldrb.w	lr, [r5]
 8020986:	fb09 c000 	mla	r0, r9, r0, ip
 802098a:	fb01 4407 	mla	r4, r1, r7, r4
 802098e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8020990:	fb06 4407 	mla	r4, r6, r7, r4
 8020994:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020996:	fb1e fe07 	smulbb	lr, lr, r7
 802099a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802099e:	fb04 e403 	mla	r4, r4, r3, lr
 80209a2:	b2a4      	uxth	r4, r4
 80209a4:	f104 0e01 	add.w	lr, r4, #1
 80209a8:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80209ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80209ae:	fb01 0004 	mla	r0, r1, r4, r0
 80209b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80209b4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80209b8:	fb06 0004 	mla	r0, r6, r4, r0
 80209bc:	786c      	ldrb	r4, [r5, #1]
 80209be:	f885 e000 	strb.w	lr, [r5]
 80209c2:	fb14 f407 	smulbb	r4, r4, r7
 80209c6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80209ca:	fb00 4003 	mla	r0, r0, r3, r4
 80209ce:	b280      	uxth	r0, r0
 80209d0:	1c44      	adds	r4, r0, #1
 80209d2:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80209d6:	1200      	asrs	r0, r0, #8
 80209d8:	7068      	strb	r0, [r5, #1]
 80209da:	9810      	ldr	r0, [sp, #64]	; 0x40
 80209dc:	4342      	muls	r2, r0
 80209de:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80209e0:	fb09 2200 	mla	r2, r9, r0, r2
 80209e4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80209e6:	fb01 2100 	mla	r1, r1, r0, r2
 80209ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80209ec:	fb06 1602 	mla	r6, r6, r2, r1
 80209f0:	78a9      	ldrb	r1, [r5, #2]
 80209f2:	fb11 f107 	smulbb	r1, r1, r7
 80209f6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80209fa:	fb06 1303 	mla	r3, r6, r3, r1
 80209fe:	b29b      	uxth	r3, r3
 8020a00:	1c5e      	adds	r6, r3, #1
 8020a02:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020a06:	121b      	asrs	r3, r3, #8
 8020a08:	70ab      	strb	r3, [r5, #2]
 8020a0a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020a0c:	3503      	adds	r5, #3
 8020a0e:	449a      	add	sl, r3
 8020a10:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020a12:	4498      	add	r8, r3
 8020a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020a16:	3b01      	subs	r3, #1
 8020a18:	930d      	str	r3, [sp, #52]	; 0x34
 8020a1a:	e750      	b.n	80208be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8020a1c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020a1e:	449a      	add	sl, r3
 8020a20:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020a22:	4498      	add	r8, r3
 8020a24:	9b07      	ldr	r3, [sp, #28]
 8020a26:	3b01      	subs	r3, #1
 8020a28:	9307      	str	r3, [sp, #28]
 8020a2a:	9b08      	ldr	r3, [sp, #32]
 8020a2c:	3303      	adds	r3, #3
 8020a2e:	9308      	str	r3, [sp, #32]
 8020a30:	e726      	b.n	8020880 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020a32:	d026      	beq.n	8020a82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020a34:	9b07      	ldr	r3, [sp, #28]
 8020a36:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8020a38:	3b01      	subs	r3, #1
 8020a3a:	fb00 a003 	mla	r0, r0, r3, sl
 8020a3e:	1400      	asrs	r0, r0, #16
 8020a40:	f53f af3a 	bmi.w	80208b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8020a44:	3901      	subs	r1, #1
 8020a46:	4288      	cmp	r0, r1
 8020a48:	f6bf af36 	bge.w	80208b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8020a4c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8020a4e:	fb01 8303 	mla	r3, r1, r3, r8
 8020a52:	141b      	asrs	r3, r3, #16
 8020a54:	f53f af30 	bmi.w	80208b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8020a58:	3a01      	subs	r2, #1
 8020a5a:	4293      	cmp	r3, r2
 8020a5c:	f6bf af2c 	bge.w	80208b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8020a60:	9b08      	ldr	r3, [sp, #32]
 8020a62:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8020a66:	1cdd      	adds	r5, r3, #3
 8020a68:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8020a6c:	f1bc 0f00 	cmp.w	ip, #0
 8020a70:	dc5f      	bgt.n	8020b32 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8020a72:	9b07      	ldr	r3, [sp, #28]
 8020a74:	9a08      	ldr	r2, [sp, #32]
 8020a76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020a7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a7e:	441a      	add	r2, r3
 8020a80:	9208      	str	r2, [sp, #32]
 8020a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a84:	2b00      	cmp	r3, #0
 8020a86:	f340 80e9 	ble.w	8020c5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8020a8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020a8e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020a90:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020a94:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020a98:	eef0 6a48 	vmov.f32	s13, s16
 8020a9c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020aa0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020aa4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020aa8:	ee16 aa90 	vmov	sl, s13
 8020aac:	eef0 6a68 	vmov.f32	s13, s17
 8020ab0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ab4:	ee16 8a90 	vmov	r8, s13
 8020ab8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020abc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020ac0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020ac4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020ac8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020acc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020ad0:	ee18 2a10 	vmov	r2, s16
 8020ad4:	eeb0 8a47 	vmov.f32	s16, s14
 8020ad8:	fb92 f3f3 	sdiv	r3, r2, r3
 8020adc:	ee18 2a90 	vmov	r2, s17
 8020ae0:	9333      	str	r3, [sp, #204]	; 0xcc
 8020ae2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020ae4:	eef0 8a67 	vmov.f32	s17, s15
 8020ae8:	fb92 f3f3 	sdiv	r3, r2, r3
 8020aec:	9334      	str	r3, [sp, #208]	; 0xd0
 8020aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020af0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020af2:	3b01      	subs	r3, #1
 8020af4:	930b      	str	r3, [sp, #44]	; 0x2c
 8020af6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020af8:	bf08      	it	eq
 8020afa:	4613      	moveq	r3, r2
 8020afc:	9307      	str	r3, [sp, #28]
 8020afe:	e6b1      	b.n	8020864 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020b00:	1c47      	adds	r7, r0, #1
 8020b02:	d482      	bmi.n	8020a0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020b04:	42bb      	cmp	r3, r7
 8020b06:	db80      	blt.n	8020a0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020b08:	1c67      	adds	r7, r4, #1
 8020b0a:	f53f af7e 	bmi.w	8020a0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020b0e:	42be      	cmp	r6, r7
 8020b10:	f6ff af7b 	blt.w	8020a0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020b14:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020b16:	b236      	sxth	r6, r6
 8020b18:	9001      	str	r0, [sp, #4]
 8020b1a:	b21b      	sxth	r3, r3
 8020b1c:	9600      	str	r6, [sp, #0]
 8020b1e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020b20:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8020b24:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8020b28:	4629      	mov	r1, r5
 8020b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020b2c:	f7ff fd58 	bl	80205e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8020b30:	e76b      	b.n	8020a0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020b32:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8020b34:	ea4f 402a 	mov.w	r0, sl, asr #16
 8020b38:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8020b3c:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8020b40:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8020b44:	ea4f 4128 	mov.w	r1, r8, asr #16
 8020b48:	fb07 0101 	mla	r1, r7, r1, r0
 8020b4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020b4e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020b52:	1844      	adds	r4, r0, r1
 8020b54:	5c40      	ldrb	r0, [r0, r1]
 8020b56:	78a6      	ldrb	r6, [r4, #2]
 8020b58:	7861      	ldrb	r1, [r4, #1]
 8020b5a:	960f      	str	r6, [sp, #60]	; 0x3c
 8020b5c:	78e6      	ldrb	r6, [r4, #3]
 8020b5e:	910d      	str	r1, [sp, #52]	; 0x34
 8020b60:	9610      	str	r6, [sp, #64]	; 0x40
 8020b62:	f894 9004 	ldrb.w	r9, [r4, #4]
 8020b66:	f894 b005 	ldrb.w	fp, [r4, #5]
 8020b6a:	b192      	cbz	r2, 8020b92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8020b6c:	f06f 0604 	mvn.w	r6, #4
 8020b70:	2103      	movs	r1, #3
 8020b72:	3405      	adds	r4, #5
 8020b74:	fb17 6701 	smlabb	r7, r7, r1, r6
 8020b78:	19e6      	adds	r6, r4, r7
 8020b7a:	5de4      	ldrb	r4, [r4, r7]
 8020b7c:	9417      	str	r4, [sp, #92]	; 0x5c
 8020b7e:	7874      	ldrb	r4, [r6, #1]
 8020b80:	9419      	str	r4, [sp, #100]	; 0x64
 8020b82:	78b4      	ldrb	r4, [r6, #2]
 8020b84:	941b      	str	r4, [sp, #108]	; 0x6c
 8020b86:	78f4      	ldrb	r4, [r6, #3]
 8020b88:	9418      	str	r4, [sp, #96]	; 0x60
 8020b8a:	7934      	ldrb	r4, [r6, #4]
 8020b8c:	941a      	str	r4, [sp, #104]	; 0x68
 8020b8e:	7974      	ldrb	r4, [r6, #5]
 8020b90:	941c      	str	r4, [sp, #112]	; 0x70
 8020b92:	b29b      	uxth	r3, r3
 8020b94:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020b96:	b292      	uxth	r2, r2
 8020b98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020b9a:	3503      	adds	r5, #3
 8020b9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020ba0:	fb03 f402 	mul.w	r4, r3, r2
 8020ba4:	011b      	lsls	r3, r3, #4
 8020ba6:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8020baa:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8020bae:	1b1b      	subs	r3, r3, r4
 8020bb0:	b292      	uxth	r2, r2
 8020bb2:	b29b      	uxth	r3, r3
 8020bb4:	1ab6      	subs	r6, r6, r2
 8020bb6:	435f      	muls	r7, r3
 8020bb8:	b2b6      	uxth	r6, r6
 8020bba:	fb03 f909 	mul.w	r9, r3, r9
 8020bbe:	fb03 fb0b 	mul.w	fp, r3, fp
 8020bc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020bc4:	fb06 7000 	mla	r0, r6, r0, r7
 8020bc8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8020bca:	fb06 bb03 	mla	fp, r6, r3, fp
 8020bce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020bd0:	fb02 0007 	mla	r0, r2, r7, r0
 8020bd4:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8020bd6:	fb02 bb03 	mla	fp, r2, r3, fp
 8020bda:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020bdc:	fb04 0007 	mla	r0, r4, r7, r0
 8020be0:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8020be4:	fb17 f701 	smulbb	r7, r7, r1
 8020be8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020bec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020bee:	fb00 700e 	mla	r0, r0, lr, r7
 8020bf2:	fb06 9101 	mla	r1, r6, r1, r9
 8020bf6:	b280      	uxth	r0, r0
 8020bf8:	1c47      	adds	r7, r0, #1
 8020bfa:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8020bfe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020c00:	1200      	asrs	r0, r0, #8
 8020c02:	f805 0c06 	strb.w	r0, [r5, #-6]
 8020c06:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020c08:	fb02 1100 	mla	r1, r2, r0, r1
 8020c0c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8020c0e:	fb04 1100 	mla	r1, r4, r0, r1
 8020c12:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8020c16:	fb04 b403 	mla	r4, r4, r3, fp
 8020c1a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8020c1e:	fb10 f007 	smulbb	r0, r0, r7
 8020c22:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020c26:	fb13 f307 	smulbb	r3, r3, r7
 8020c2a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8020c2e:	fb01 010e 	mla	r1, r1, lr, r0
 8020c32:	fb04 340e 	mla	r4, r4, lr, r3
 8020c36:	b289      	uxth	r1, r1
 8020c38:	b2a4      	uxth	r4, r4
 8020c3a:	1c48      	adds	r0, r1, #1
 8020c3c:	1c63      	adds	r3, r4, #1
 8020c3e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020c42:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8020c46:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020c48:	1209      	asrs	r1, r1, #8
 8020c4a:	1224      	asrs	r4, r4, #8
 8020c4c:	449a      	add	sl, r3
 8020c4e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020c50:	f805 1c05 	strb.w	r1, [r5, #-5]
 8020c54:	f805 4c04 	strb.w	r4, [r5, #-4]
 8020c58:	4498      	add	r8, r3
 8020c5a:	e707      	b.n	8020a6c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8020c5c:	b01f      	add	sp, #124	; 0x7c
 8020c5e:	ecbd 8b08 	vpop	{d8-d11}
 8020c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020c68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8020c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c6c:	b085      	sub	sp, #20
 8020c6e:	784d      	ldrb	r5, [r1, #1]
 8020c70:	788e      	ldrb	r6, [r1, #2]
 8020c72:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8020c76:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8020c7a:	9403      	str	r4, [sp, #12]
 8020c7c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8020c80:	780c      	ldrb	r4, [r1, #0]
 8020c82:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8020c86:	fb07 ce03 	mla	lr, r7, r3, ip
 8020c8a:	2f00      	cmp	r7, #0
 8020c8c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020c90:	eb02 0b0e 	add.w	fp, r2, lr
 8020c94:	db56      	blt.n	8020d44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8020c96:	45b9      	cmp	r9, r7
 8020c98:	dd54      	ble.n	8020d44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8020c9a:	f1bc 0f00 	cmp.w	ip, #0
 8020c9e:	db4d      	blt.n	8020d3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020ca0:	4563      	cmp	r3, ip
 8020ca2:	dd4b      	ble.n	8020d3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020ca4:	f812 200e 	ldrb.w	r2, [r2, lr]
 8020ca8:	9200      	str	r2, [sp, #0]
 8020caa:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8020cae:	9201      	str	r2, [sp, #4]
 8020cb0:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8020cb4:	9202      	str	r2, [sp, #8]
 8020cb6:	f11c 0201 	adds.w	r2, ip, #1
 8020cba:	d44a      	bmi.n	8020d52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020cbc:	4293      	cmp	r3, r2
 8020cbe:	dd48      	ble.n	8020d52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020cc0:	2800      	cmp	r0, #0
 8020cc2:	d046      	beq.n	8020d52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020cc4:	f89b e003 	ldrb.w	lr, [fp, #3]
 8020cc8:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8020ccc:	f89b a005 	ldrb.w	sl, [fp, #5]
 8020cd0:	3701      	adds	r7, #1
 8020cd2:	d446      	bmi.n	8020d62 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8020cd4:	45b9      	cmp	r9, r7
 8020cd6:	dd44      	ble.n	8020d62 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8020cd8:	9a03      	ldr	r2, [sp, #12]
 8020cda:	2a00      	cmp	r2, #0
 8020cdc:	d045      	beq.n	8020d6a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8020cde:	f1bc 0f00 	cmp.w	ip, #0
 8020ce2:	db3a      	blt.n	8020d5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8020ce4:	4563      	cmp	r3, ip
 8020ce6:	dd38      	ble.n	8020d5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8020ce8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020cec:	f04f 0903 	mov.w	r9, #3
 8020cf0:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8020cf4:	fb03 b209 	mla	r2, r3, r9, fp
 8020cf8:	fb03 b909 	mla	r9, r3, r9, fp
 8020cfc:	7852      	ldrb	r2, [r2, #1]
 8020cfe:	f899 9002 	ldrb.w	r9, [r9, #2]
 8020d02:	f11c 0c01 	adds.w	ip, ip, #1
 8020d06:	d40d      	bmi.n	8020d24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020d08:	4563      	cmp	r3, ip
 8020d0a:	dd0b      	ble.n	8020d24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020d0c:	b160      	cbz	r0, 8020d28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8020d0e:	2603      	movs	r6, #3
 8020d10:	fb13 6406 	smlabb	r4, r3, r6, r6
 8020d14:	fb03 b506 	mla	r5, r3, r6, fp
 8020d18:	fb03 b306 	mla	r3, r3, r6, fp
 8020d1c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8020d20:	792d      	ldrb	r5, [r5, #4]
 8020d22:	795e      	ldrb	r6, [r3, #5]
 8020d24:	280f      	cmp	r0, #15
 8020d26:	d802      	bhi.n	8020d2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8020d28:	9b03      	ldr	r3, [sp, #12]
 8020d2a:	2b0f      	cmp	r3, #15
 8020d2c:	d922      	bls.n	8020d74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8020d2e:	4b2f      	ldr	r3, [pc, #188]	; (8020dec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8020d30:	f240 1157 	movw	r1, #343	; 0x157
 8020d34:	4a2e      	ldr	r2, [pc, #184]	; (8020df0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8020d36:	482f      	ldr	r0, [pc, #188]	; (8020df4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8020d38:	f004 f864 	bl	8024e04 <__assert_func>
 8020d3c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8020d40:	9400      	str	r4, [sp, #0]
 8020d42:	e7b8      	b.n	8020cb6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8020d44:	46b2      	mov	sl, r6
 8020d46:	46a8      	mov	r8, r5
 8020d48:	46a6      	mov	lr, r4
 8020d4a:	9400      	str	r4, [sp, #0]
 8020d4c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8020d50:	e7be      	b.n	8020cd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8020d52:	46b2      	mov	sl, r6
 8020d54:	46a8      	mov	r8, r5
 8020d56:	46a6      	mov	lr, r4
 8020d58:	e7ba      	b.n	8020cd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8020d5a:	46b1      	mov	r9, r6
 8020d5c:	462a      	mov	r2, r5
 8020d5e:	4627      	mov	r7, r4
 8020d60:	e7cf      	b.n	8020d02 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8020d62:	46b1      	mov	r9, r6
 8020d64:	462a      	mov	r2, r5
 8020d66:	4627      	mov	r7, r4
 8020d68:	e7dc      	b.n	8020d24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020d6a:	280f      	cmp	r0, #15
 8020d6c:	d8df      	bhi.n	8020d2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8020d6e:	46b1      	mov	r9, r6
 8020d70:	462a      	mov	r2, r5
 8020d72:	4627      	mov	r7, r4
 8020d74:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8020d78:	b280      	uxth	r0, r0
 8020d7a:	fb00 f30b 	mul.w	r3, r0, fp
 8020d7e:	0100      	lsls	r0, r0, #4
 8020d80:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8020d84:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8020d88:	1ac0      	subs	r0, r0, r3
 8020d8a:	fa1f fb8b 	uxth.w	fp, fp
 8020d8e:	b280      	uxth	r0, r0
 8020d90:	ebac 0c0b 	sub.w	ip, ip, fp
 8020d94:	9003      	str	r0, [sp, #12]
 8020d96:	fa1f fc8c 	uxth.w	ip, ip
 8020d9a:	fb00 fe0e 	mul.w	lr, r0, lr
 8020d9e:	9800      	ldr	r0, [sp, #0]
 8020da0:	fb0c ee00 	mla	lr, ip, r0, lr
 8020da4:	9803      	ldr	r0, [sp, #12]
 8020da6:	fb00 f808 	mul.w	r8, r0, r8
 8020daa:	9801      	ldr	r0, [sp, #4]
 8020dac:	fb0b ee07 	mla	lr, fp, r7, lr
 8020db0:	fb0c 8800 	mla	r8, ip, r0, r8
 8020db4:	fb03 ee04 	mla	lr, r3, r4, lr
 8020db8:	fb0b 8202 	mla	r2, fp, r2, r8
 8020dbc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020dc0:	fb03 2505 	mla	r5, r3, r5, r2
 8020dc4:	9a03      	ldr	r2, [sp, #12]
 8020dc6:	f881 e000 	strb.w	lr, [r1]
 8020dca:	fb02 f00a 	mul.w	r0, r2, sl
 8020dce:	9a02      	ldr	r2, [sp, #8]
 8020dd0:	122d      	asrs	r5, r5, #8
 8020dd2:	fb0c 0c02 	mla	ip, ip, r2, r0
 8020dd6:	704d      	strb	r5, [r1, #1]
 8020dd8:	fb0b c909 	mla	r9, fp, r9, ip
 8020ddc:	fb03 9606 	mla	r6, r3, r6, r9
 8020de0:	1236      	asrs	r6, r6, #8
 8020de2:	708e      	strb	r6, [r1, #2]
 8020de4:	b005      	add	sp, #20
 8020de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dea:	bf00      	nop
 8020dec:	0802ce1f 	.word	0x0802ce1f
 8020df0:	0802d387 	.word	0x0802d387
 8020df4:	0802cee8 	.word	0x0802cee8

08020df8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dfc:	ed2d 8b08 	vpush	{d8-d11}
 8020e00:	b09b      	sub	sp, #108	; 0x6c
 8020e02:	eeb0 aa40 	vmov.f32	s20, s0
 8020e06:	eef0 9a60 	vmov.f32	s19, s1
 8020e0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8020e0c:	eeb0 9a41 	vmov.f32	s18, s2
 8020e10:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8020e12:	eeb0 8a62 	vmov.f32	s16, s5
 8020e16:	9019      	str	r0, [sp, #100]	; 0x64
 8020e18:	eef0 8a43 	vmov.f32	s17, s6
 8020e1c:	6850      	ldr	r0, [r2, #4]
 8020e1e:	eef0 ba44 	vmov.f32	s23, s8
 8020e22:	9109      	str	r1, [sp, #36]	; 0x24
 8020e24:	eeb0 ba64 	vmov.f32	s22, s9
 8020e28:	9306      	str	r3, [sp, #24]
 8020e2a:	eef0 aa45 	vmov.f32	s21, s10
 8020e2e:	6812      	ldr	r2, [r2, #0]
 8020e30:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8020e34:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8020e38:	fb00 1303 	mla	r3, r0, r3, r1
 8020e3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020e40:	18d3      	adds	r3, r2, r3
 8020e42:	9307      	str	r3, [sp, #28]
 8020e44:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020e46:	681b      	ldr	r3, [r3, #0]
 8020e48:	9308      	str	r3, [sp, #32]
 8020e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e4c:	2b00      	cmp	r3, #0
 8020e4e:	dc03      	bgt.n	8020e58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e52:	2b00      	cmp	r3, #0
 8020e54:	f340 81ab 	ble.w	80211ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8020e58:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020e5a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020e5e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020e62:	1e48      	subs	r0, r1, #1
 8020e64:	1e55      	subs	r5, r2, #1
 8020e66:	9b06      	ldr	r3, [sp, #24]
 8020e68:	2b00      	cmp	r3, #0
 8020e6a:	f340 80b1 	ble.w	8020fd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8020e6e:	ea5f 462b 	movs.w	r6, fp, asr #16
 8020e72:	ea4f 4324 	mov.w	r3, r4, asr #16
 8020e76:	d406      	bmi.n	8020e86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020e78:	4286      	cmp	r6, r0
 8020e7a:	da04      	bge.n	8020e86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020e7c:	2b00      	cmp	r3, #0
 8020e7e:	db02      	blt.n	8020e86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020e80:	42ab      	cmp	r3, r5
 8020e82:	f2c0 80a6 	blt.w	8020fd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8020e86:	3601      	adds	r6, #1
 8020e88:	f100 8097 	bmi.w	8020fba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8020e8c:	42b1      	cmp	r1, r6
 8020e8e:	f2c0 8094 	blt.w	8020fba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8020e92:	3301      	adds	r3, #1
 8020e94:	f100 8091 	bmi.w	8020fba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8020e98:	429a      	cmp	r2, r3
 8020e9a:	f2c0 808e 	blt.w	8020fba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8020e9e:	9b06      	ldr	r3, [sp, #24]
 8020ea0:	9e07      	ldr	r6, [sp, #28]
 8020ea2:	930a      	str	r3, [sp, #40]	; 0x28
 8020ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	f340 80b0 	ble.w	802100c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020eac:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8020eae:	1425      	asrs	r5, r4, #16
 8020eb0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020eb2:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8020eb6:	68c7      	ldr	r7, [r0, #12]
 8020eb8:	ea5f 402b 	movs.w	r0, fp, asr #16
 8020ebc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8020ec0:	689b      	ldr	r3, [r3, #8]
 8020ec2:	f100 80ea 	bmi.w	802109a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020ec6:	f103 3cff 	add.w	ip, r3, #4294967295
 8020eca:	4560      	cmp	r0, ip
 8020ecc:	f280 80e5 	bge.w	802109a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020ed0:	2d00      	cmp	r5, #0
 8020ed2:	f2c0 80e2 	blt.w	802109a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020ed6:	f107 3cff 	add.w	ip, r7, #4294967295
 8020eda:	4565      	cmp	r5, ip
 8020edc:	f280 80dd 	bge.w	802109a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020ee0:	b21b      	sxth	r3, r3
 8020ee2:	fb05 0003 	mla	r0, r5, r3, r0
 8020ee6:	9d08      	ldr	r5, [sp, #32]
 8020ee8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020eec:	182f      	adds	r7, r5, r0
 8020eee:	5c2d      	ldrb	r5, [r5, r0]
 8020ef0:	7878      	ldrb	r0, [r7, #1]
 8020ef2:	f897 e002 	ldrb.w	lr, [r7, #2]
 8020ef6:	900c      	str	r0, [sp, #48]	; 0x30
 8020ef8:	f897 9003 	ldrb.w	r9, [r7, #3]
 8020efc:	f897 8004 	ldrb.w	r8, [r7, #4]
 8020f00:	f897 a005 	ldrb.w	sl, [r7, #5]
 8020f04:	b1c9      	cbz	r1, 8020f3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020f06:	f04f 0c03 	mov.w	ip, #3
 8020f0a:	f06f 0004 	mvn.w	r0, #4
 8020f0e:	3705      	adds	r7, #5
 8020f10:	fb13 030c 	smlabb	r3, r3, ip, r0
 8020f14:	eb07 0c03 	add.w	ip, r7, r3
 8020f18:	5cfb      	ldrb	r3, [r7, r3]
 8020f1a:	930d      	str	r3, [sp, #52]	; 0x34
 8020f1c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8020f20:	930f      	str	r3, [sp, #60]	; 0x3c
 8020f22:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8020f26:	9311      	str	r3, [sp, #68]	; 0x44
 8020f28:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8020f2c:	930e      	str	r3, [sp, #56]	; 0x38
 8020f2e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8020f32:	9310      	str	r3, [sp, #64]	; 0x40
 8020f34:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8020f38:	9312      	str	r3, [sp, #72]	; 0x48
 8020f3a:	b292      	uxth	r2, r2
 8020f3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020f3e:	b289      	uxth	r1, r1
 8020f40:	fb02 f301 	mul.w	r3, r2, r1
 8020f44:	0112      	lsls	r2, r2, #4
 8020f46:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8020f4a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8020f4e:	1ad2      	subs	r2, r2, r3
 8020f50:	b289      	uxth	r1, r1
 8020f52:	b292      	uxth	r2, r2
 8020f54:	1a7f      	subs	r7, r7, r1
 8020f56:	fb02 f909 	mul.w	r9, r2, r9
 8020f5a:	b2bf      	uxth	r7, r7
 8020f5c:	fb02 f808 	mul.w	r8, r2, r8
 8020f60:	fb02 fa0a 	mul.w	sl, r2, sl
 8020f64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020f66:	fb07 9905 	mla	r9, r7, r5, r9
 8020f6a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020f6c:	fb07 8800 	mla	r8, r7, r0, r8
 8020f70:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020f72:	fb07 aa0e 	mla	sl, r7, lr, sl
 8020f76:	fb01 9905 	mla	r9, r1, r5, r9
 8020f7a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020f7c:	fb01 8800 	mla	r8, r1, r0, r8
 8020f80:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020f82:	fb01 a102 	mla	r1, r1, r2, sl
 8020f86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020f88:	fb03 9905 	mla	r9, r3, r5, r9
 8020f8c:	fb03 8800 	mla	r8, r3, r0, r8
 8020f90:	fb03 1302 	mla	r3, r3, r2, r1
 8020f94:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020f98:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020f9c:	121b      	asrs	r3, r3, #8
 8020f9e:	f886 9000 	strb.w	r9, [r6]
 8020fa2:	f886 8001 	strb.w	r8, [r6, #1]
 8020fa6:	70b3      	strb	r3, [r6, #2]
 8020fa8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8020faa:	3603      	adds	r6, #3
 8020fac:	449b      	add	fp, r3
 8020fae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020fb0:	441c      	add	r4, r3
 8020fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020fb4:	3b01      	subs	r3, #1
 8020fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8020fb8:	e774      	b.n	8020ea4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8020fba:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8020fbc:	449b      	add	fp, r3
 8020fbe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020fc0:	441c      	add	r4, r3
 8020fc2:	9b06      	ldr	r3, [sp, #24]
 8020fc4:	3b01      	subs	r3, #1
 8020fc6:	9306      	str	r3, [sp, #24]
 8020fc8:	9b07      	ldr	r3, [sp, #28]
 8020fca:	3303      	adds	r3, #3
 8020fcc:	9307      	str	r3, [sp, #28]
 8020fce:	e74a      	b.n	8020e66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020fd0:	d024      	beq.n	802101c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8020fd2:	9b06      	ldr	r3, [sp, #24]
 8020fd4:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8020fd6:	3b01      	subs	r3, #1
 8020fd8:	fb00 b003 	mla	r0, r0, r3, fp
 8020fdc:	1400      	asrs	r0, r0, #16
 8020fde:	f53f af5e 	bmi.w	8020e9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020fe2:	3901      	subs	r1, #1
 8020fe4:	4288      	cmp	r0, r1
 8020fe6:	f6bf af5a 	bge.w	8020e9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020fea:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8020fec:	fb01 4303 	mla	r3, r1, r3, r4
 8020ff0:	141b      	asrs	r3, r3, #16
 8020ff2:	f53f af54 	bmi.w	8020e9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020ff6:	3a01      	subs	r2, #1
 8020ff8:	4293      	cmp	r3, r2
 8020ffa:	f6bf af50 	bge.w	8020e9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020ffe:	9b07      	ldr	r3, [sp, #28]
 8021000:	f8dd e018 	ldr.w	lr, [sp, #24]
 8021004:	1cde      	adds	r6, r3, #3
 8021006:	f1be 0f00 	cmp.w	lr, #0
 802100a:	dc5f      	bgt.n	80210cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802100c:	9b06      	ldr	r3, [sp, #24]
 802100e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021012:	9b07      	ldr	r3, [sp, #28]
 8021014:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021018:	4423      	add	r3, r4
 802101a:	9307      	str	r3, [sp, #28]
 802101c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802101e:	2b00      	cmp	r3, #0
 8021020:	f340 80c5 	ble.w	80211ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8021024:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021028:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802102a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802102e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021032:	eef0 6a48 	vmov.f32	s13, s16
 8021036:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802103a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802103e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021042:	ee16 ba90 	vmov	fp, s13
 8021046:	eef0 6a68 	vmov.f32	s13, s17
 802104a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802104e:	ee16 4a90 	vmov	r4, s13
 8021052:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021056:	ee69 7a27 	vmul.f32	s15, s18, s15
 802105a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802105e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021062:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021066:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802106a:	ee18 2a10 	vmov	r2, s16
 802106e:	eeb0 8a47 	vmov.f32	s16, s14
 8021072:	fb92 f3f3 	sdiv	r3, r2, r3
 8021076:	ee18 2a90 	vmov	r2, s17
 802107a:	932f      	str	r3, [sp, #188]	; 0xbc
 802107c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802107e:	eef0 8a67 	vmov.f32	s17, s15
 8021082:	fb92 f3f3 	sdiv	r3, r2, r3
 8021086:	9330      	str	r3, [sp, #192]	; 0xc0
 8021088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802108a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802108c:	3b01      	subs	r3, #1
 802108e:	9309      	str	r3, [sp, #36]	; 0x24
 8021090:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021092:	bf08      	it	eq
 8021094:	4613      	moveq	r3, r2
 8021096:	9306      	str	r3, [sp, #24]
 8021098:	e6d7      	b.n	8020e4a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802109a:	f110 0c01 	adds.w	ip, r0, #1
 802109e:	d483      	bmi.n	8020fa8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80210a0:	4563      	cmp	r3, ip
 80210a2:	db81      	blt.n	8020fa8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80210a4:	f115 0c01 	adds.w	ip, r5, #1
 80210a8:	f53f af7e 	bmi.w	8020fa8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80210ac:	4567      	cmp	r7, ip
 80210ae:	f6ff af7b 	blt.w	8020fa8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80210b2:	b23f      	sxth	r7, r7
 80210b4:	b21b      	sxth	r3, r3
 80210b6:	9700      	str	r7, [sp, #0]
 80210b8:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80210bc:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80210c0:	9a08      	ldr	r2, [sp, #32]
 80210c2:	4631      	mov	r1, r6
 80210c4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80210c6:	f7ff fdcf 	bl	8020c68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80210ca:	e76d      	b.n	8020fa8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80210cc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80210ce:	ea4f 402b 	mov.w	r0, fp, asr #16
 80210d2:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80210d6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80210da:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 80210de:	1421      	asrs	r1, r4, #16
 80210e0:	930a      	str	r3, [sp, #40]	; 0x28
 80210e2:	fb0c 0101 	mla	r1, ip, r1, r0
 80210e6:	9808      	ldr	r0, [sp, #32]
 80210e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80210ec:	1845      	adds	r5, r0, r1
 80210ee:	5c40      	ldrb	r0, [r0, r1]
 80210f0:	796f      	ldrb	r7, [r5, #5]
 80210f2:	7869      	ldrb	r1, [r5, #1]
 80210f4:	f895 8002 	ldrb.w	r8, [r5, #2]
 80210f8:	f895 a003 	ldrb.w	sl, [r5, #3]
 80210fc:	f895 9004 	ldrb.w	r9, [r5, #4]
 8021100:	970c      	str	r7, [sp, #48]	; 0x30
 8021102:	b1a2      	cbz	r2, 802112e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8021104:	2703      	movs	r7, #3
 8021106:	f06f 0304 	mvn.w	r3, #4
 802110a:	3505      	adds	r5, #5
 802110c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8021110:	eb05 070c 	add.w	r7, r5, ip
 8021114:	f815 500c 	ldrb.w	r5, [r5, ip]
 8021118:	9513      	str	r5, [sp, #76]	; 0x4c
 802111a:	787d      	ldrb	r5, [r7, #1]
 802111c:	9515      	str	r5, [sp, #84]	; 0x54
 802111e:	78bd      	ldrb	r5, [r7, #2]
 8021120:	9517      	str	r5, [sp, #92]	; 0x5c
 8021122:	78fd      	ldrb	r5, [r7, #3]
 8021124:	9514      	str	r5, [sp, #80]	; 0x50
 8021126:	793d      	ldrb	r5, [r7, #4]
 8021128:	9516      	str	r5, [sp, #88]	; 0x58
 802112a:	797d      	ldrb	r5, [r7, #5]
 802112c:	9518      	str	r5, [sp, #96]	; 0x60
 802112e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8021132:	b292      	uxth	r2, r2
 8021134:	3603      	adds	r6, #3
 8021136:	f10e 3eff 	add.w	lr, lr, #4294967295
 802113a:	fb03 f502 	mul.w	r5, r3, r2
 802113e:	011b      	lsls	r3, r3, #4
 8021140:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8021144:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021148:	1b5b      	subs	r3, r3, r5
 802114a:	b292      	uxth	r2, r2
 802114c:	b29b      	uxth	r3, r3
 802114e:	1abf      	subs	r7, r7, r2
 8021150:	fb03 f909 	mul.w	r9, r3, r9
 8021154:	b2bf      	uxth	r7, r7
 8021156:	fb03 fa0a 	mul.w	sl, r3, sl
 802115a:	fb07 9901 	mla	r9, r7, r1, r9
 802115e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021160:	fb07 aa00 	mla	sl, r7, r0, sl
 8021164:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021166:	fb02 9901 	mla	r9, r2, r1, r9
 802116a:	9916      	ldr	r1, [sp, #88]	; 0x58
 802116c:	fb02 aa00 	mla	sl, r2, r0, sl
 8021170:	9814      	ldr	r0, [sp, #80]	; 0x50
 8021172:	fb05 9901 	mla	r9, r5, r1, r9
 8021176:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021178:	fb05 aa00 	mla	sl, r5, r0, sl
 802117c:	434b      	muls	r3, r1
 802117e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8021180:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021184:	fb07 3308 	mla	r3, r7, r8, r3
 8021188:	ea4f 2929 	mov.w	r9, r9, asr #8
 802118c:	f806 ac06 	strb.w	sl, [r6, #-6]
 8021190:	fb02 3201 	mla	r2, r2, r1, r3
 8021194:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021196:	f806 9c05 	strb.w	r9, [r6, #-5]
 802119a:	fb05 2503 	mla	r5, r5, r3, r2
 802119e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80211a0:	122d      	asrs	r5, r5, #8
 80211a2:	449b      	add	fp, r3
 80211a4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80211a6:	f806 5c04 	strb.w	r5, [r6, #-4]
 80211aa:	441c      	add	r4, r3
 80211ac:	e72b      	b.n	8021006 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80211ae:	b01b      	add	sp, #108	; 0x6c
 80211b0:	ecbd 8b08 	vpop	{d8-d11}
 80211b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080211b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80211b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211bc:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80211c0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80211c4:	fb04 5603 	mla	r6, r4, r3, r5
 80211c8:	2c00      	cmp	r4, #0
 80211ca:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80211ce:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80211d2:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80211d6:	db36      	blt.n	8021246 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 80211d8:	45a6      	cmp	lr, r4
 80211da:	dd34      	ble.n	8021246 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 80211dc:	2d00      	cmp	r5, #0
 80211de:	db30      	blt.n	8021242 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 80211e0:	42ab      	cmp	r3, r5
 80211e2:	dd2e      	ble.n	8021242 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 80211e4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80211e8:	1c6e      	adds	r6, r5, #1
 80211ea:	d42f      	bmi.n	802124c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 80211ec:	42b3      	cmp	r3, r6
 80211ee:	dd2d      	ble.n	802124c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 80211f0:	b370      	cbz	r0, 8021250 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 80211f2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80211f6:	3401      	adds	r4, #1
 80211f8:	d42e      	bmi.n	8021258 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 80211fa:	45a6      	cmp	lr, r4
 80211fc:	dd2c      	ble.n	8021258 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 80211fe:	b377      	cbz	r7, 802125e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8021200:	2d00      	cmp	r5, #0
 8021202:	db27      	blt.n	8021254 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8021204:	42ab      	cmp	r3, r5
 8021206:	dd25      	ble.n	8021254 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8021208:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802120c:	3501      	adds	r5, #1
 802120e:	d429      	bmi.n	8021264 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8021210:	42ab      	cmp	r3, r5
 8021212:	dd27      	ble.n	8021264 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8021214:	b340      	cbz	r0, 8021268 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8021216:	3301      	adds	r3, #1
 8021218:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 802121c:	280f      	cmp	r0, #15
 802121e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021222:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021226:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802122a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802122e:	d801      	bhi.n	8021234 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8021230:	2f0f      	cmp	r7, #15
 8021232:	d91b      	bls.n	802126c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8021234:	4b89      	ldr	r3, [pc, #548]	; (802145c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8021236:	f240 1157 	movw	r1, #343	; 0x157
 802123a:	4a89      	ldr	r2, [pc, #548]	; (8021460 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 802123c:	4889      	ldr	r0, [pc, #548]	; (8021464 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 802123e:	f003 fde1 	bl	8024e04 <__assert_func>
 8021242:	2200      	movs	r2, #0
 8021244:	e7d0      	b.n	80211e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 8021246:	2600      	movs	r6, #0
 8021248:	4632      	mov	r2, r6
 802124a:	e7d4      	b.n	80211f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 802124c:	2600      	movs	r6, #0
 802124e:	e7d2      	b.n	80211f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8021250:	4606      	mov	r6, r0
 8021252:	e7d0      	b.n	80211f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8021254:	2400      	movs	r4, #0
 8021256:	e7d9      	b.n	802120c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8021258:	2300      	movs	r3, #0
 802125a:	461c      	mov	r4, r3
 802125c:	e7de      	b.n	802121c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 802125e:	463b      	mov	r3, r7
 8021260:	463c      	mov	r4, r7
 8021262:	e7db      	b.n	802121c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8021264:	2300      	movs	r3, #0
 8021266:	e7d9      	b.n	802121c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8021268:	4603      	mov	r3, r0
 802126a:	e7d7      	b.n	802121c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 802126c:	b280      	uxth	r0, r0
 802126e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021272:	b2bf      	uxth	r7, r7
 8021274:	fb00 fe07 	mul.w	lr, r0, r7
 8021278:	ea4f 1000 	mov.w	r0, r0, lsl #4
 802127c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021280:	eba0 0c0e 	sub.w	ip, r0, lr
 8021284:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8021288:	b2bf      	uxth	r7, r7
 802128a:	fa1f fc8c 	uxth.w	ip, ip
 802128e:	eba5 0507 	sub.w	r5, r5, r7
 8021292:	fb0c f00a 	mul.w	r0, ip, sl
 8021296:	b2ad      	uxth	r5, r5
 8021298:	fb05 000b 	mla	r0, r5, fp, r0
 802129c:	fb07 0009 	mla	r0, r7, r9, r0
 80212a0:	fb0e 0008 	mla	r0, lr, r8, r0
 80212a4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80212a8:	9001      	str	r0, [sp, #4]
 80212aa:	d018      	beq.n	80212de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 80212ac:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80212b0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80212b4:	fb0b f000 	mul.w	r0, fp, r0
 80212b8:	fb0b fb02 	mul.w	fp, fp, r2
 80212bc:	0a02      	lsrs	r2, r0, #8
 80212be:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80212c2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80212c6:	4402      	add	r2, r0
 80212c8:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80212cc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80212d0:	0a12      	lsrs	r2, r2, #8
 80212d2:	0a00      	lsrs	r0, r0, #8
 80212d4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80212d8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80212dc:	4302      	orrs	r2, r0
 80212de:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80212e2:	d01a      	beq.n	802131a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 80212e4:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80212e8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80212ec:	fb0a f000 	mul.w	r0, sl, r0
 80212f0:	fb0a fa06 	mul.w	sl, sl, r6
 80212f4:	0a06      	lsrs	r6, r0, #8
 80212f6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80212fa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80212fe:	4406      	add	r6, r0
 8021300:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8021304:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8021308:	0a36      	lsrs	r6, r6, #8
 802130a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802130e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021312:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021316:	ea46 060a 	orr.w	r6, r6, sl
 802131a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802131e:	d01b      	beq.n	8021358 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8021320:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021324:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021328:	fb09 fa0a 	mul.w	sl, r9, sl
 802132c:	fb09 f004 	mul.w	r0, r9, r4
 8021330:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021334:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021338:	f500 7980 	add.w	r9, r0, #256	; 0x100
 802133c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021340:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021344:	4454      	add	r4, sl
 8021346:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802134a:	0a24      	lsrs	r4, r4, #8
 802134c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021350:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021354:	ea44 0409 	orr.w	r4, r4, r9
 8021358:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802135c:	d01b      	beq.n	8021396 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 802135e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8021362:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021366:	fb08 f909 	mul.w	r9, r8, r9
 802136a:	fb08 f003 	mul.w	r0, r8, r3
 802136e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8021372:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021376:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802137a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802137e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8021382:	444b      	add	r3, r9
 8021384:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021388:	0a1b      	lsrs	r3, r3, #8
 802138a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802138e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021392:	ea43 0308 	orr.w	r3, r3, r8
 8021396:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802139a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802139e:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80213a2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80213a6:	fb0c f000 	mul.w	r0, ip, r0
 80213aa:	fb0c f606 	mul.w	r6, ip, r6
 80213ae:	fb05 0808 	mla	r8, r5, r8, r0
 80213b2:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80213b6:	fb05 6502 	mla	r5, r5, r2, r6
 80213ba:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80213be:	fb07 8800 	mla	r8, r7, r0, r8
 80213c2:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80213c6:	fb07 5704 	mla	r7, r7, r4, r5
 80213ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80213ce:	fb0e 8000 	mla	r0, lr, r0, r8
 80213d2:	fb0e 7e03 	mla	lr, lr, r3, r7
 80213d6:	9b01      	ldr	r3, [sp, #4]
 80213d8:	0a00      	lsrs	r0, r0, #8
 80213da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80213de:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80213e2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80213e6:	ea40 0e0e 	orr.w	lr, r0, lr
 80213ea:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80213ee:	b280      	uxth	r0, r0
 80213f0:	fa5f f48e 	uxtb.w	r4, lr
 80213f4:	4343      	muls	r3, r0
 80213f6:	fb14 f400 	smulbb	r4, r4, r0
 80213fa:	1c5a      	adds	r2, r3, #1
 80213fc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021400:	780b      	ldrb	r3, [r1, #0]
 8021402:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8021406:	b2d2      	uxtb	r2, r2
 8021408:	fb03 4302 	mla	r3, r3, r2, r4
 802140c:	b29b      	uxth	r3, r3
 802140e:	1c5c      	adds	r4, r3, #1
 8021410:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8021414:	784c      	ldrb	r4, [r1, #1]
 8021416:	fb14 f402 	smulbb	r4, r4, r2
 802141a:	121b      	asrs	r3, r3, #8
 802141c:	700b      	strb	r3, [r1, #0]
 802141e:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8021422:	fb03 4300 	mla	r3, r3, r0, r4
 8021426:	b29b      	uxth	r3, r3
 8021428:	1c5c      	adds	r4, r3, #1
 802142a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802142e:	121b      	asrs	r3, r3, #8
 8021430:	704b      	strb	r3, [r1, #1]
 8021432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8021436:	f891 e002 	ldrb.w	lr, [r1, #2]
 802143a:	fb1e fe02 	smulbb	lr, lr, r2
 802143e:	fb03 ee00 	mla	lr, r3, r0, lr
 8021442:	fa1f fe8e 	uxth.w	lr, lr
 8021446:	f10e 0301 	add.w	r3, lr, #1
 802144a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 802144e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021452:	f881 e002 	strb.w	lr, [r1, #2]
 8021456:	b003      	add	sp, #12
 8021458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802145c:	0802ce1f 	.word	0x0802ce1f
 8021460:	0802d387 	.word	0x0802d387
 8021464:	0802cee8 	.word	0x0802cee8

08021468 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802146c:	ed2d 8b08 	vpush	{d8-d11}
 8021470:	b09d      	sub	sp, #116	; 0x74
 8021472:	eeb0 aa40 	vmov.f32	s20, s0
 8021476:	eef0 9a60 	vmov.f32	s19, s1
 802147a:	9219      	str	r2, [sp, #100]	; 0x64
 802147c:	eeb0 9a41 	vmov.f32	s18, s2
 8021480:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8021482:	eeb0 8a62 	vmov.f32	s16, s5
 8021486:	9307      	str	r3, [sp, #28]
 8021488:	eef0 8a43 	vmov.f32	s17, s6
 802148c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8021490:	eef0 ba44 	vmov.f32	s23, s8
 8021494:	901b      	str	r0, [sp, #108]	; 0x6c
 8021496:	eeb0 ba64 	vmov.f32	s22, s9
 802149a:	931a      	str	r3, [sp, #104]	; 0x68
 802149c:	eef0 aa45 	vmov.f32	s21, s10
 80214a0:	6850      	ldr	r0, [r2, #4]
 80214a2:	9117      	str	r1, [sp, #92]	; 0x5c
 80214a4:	6812      	ldr	r2, [r2, #0]
 80214a6:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 80214aa:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 80214ae:	fb00 1303 	mla	r3, r0, r3, r1
 80214b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80214b6:	18d3      	adds	r3, r2, r3
 80214b8:	930a      	str	r3, [sp, #40]	; 0x28
 80214ba:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80214bc:	681b      	ldr	r3, [r3, #0]
 80214be:	9310      	str	r3, [sp, #64]	; 0x40
 80214c0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80214c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80214c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80214c8:	2b00      	cmp	r3, #0
 80214ca:	dc03      	bgt.n	80214d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80214cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80214ce:	2b00      	cmp	r3, #0
 80214d0:	f340 8368 	ble.w	8021ba4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80214d4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80214d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80214da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80214de:	1e48      	subs	r0, r1, #1
 80214e0:	1e57      	subs	r7, r2, #1
 80214e2:	9b07      	ldr	r3, [sp, #28]
 80214e4:	2b00      	cmp	r3, #0
 80214e6:	f340 8187 	ble.w	80217f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 80214ea:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80214ee:	ea4f 4326 	mov.w	r3, r6, asr #16
 80214f2:	d406      	bmi.n	8021502 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80214f4:	4584      	cmp	ip, r0
 80214f6:	da04      	bge.n	8021502 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80214f8:	2b00      	cmp	r3, #0
 80214fa:	db02      	blt.n	8021502 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80214fc:	42bb      	cmp	r3, r7
 80214fe:	f2c0 817c 	blt.w	80217fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8021502:	f11c 0c01 	adds.w	ip, ip, #1
 8021506:	f100 816c 	bmi.w	80217e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802150a:	4561      	cmp	r1, ip
 802150c:	f2c0 8169 	blt.w	80217e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8021510:	3301      	adds	r3, #1
 8021512:	f100 8166 	bmi.w	80217e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8021516:	429a      	cmp	r2, r3
 8021518:	f2c0 8163 	blt.w	80217e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802151c:	9b07      	ldr	r3, [sp, #28]
 802151e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021520:	9318      	str	r3, [sp, #96]	; 0x60
 8021522:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021524:	2b00      	cmp	r3, #0
 8021526:	f340 8186 	ble.w	8021836 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 802152a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802152c:	142a      	asrs	r2, r5, #16
 802152e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8021532:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021536:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802153a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802153e:	f100 81cb 	bmi.w	80218d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8021542:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021546:	4542      	cmp	r2, r8
 8021548:	f280 81c6 	bge.w	80218d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802154c:	2800      	cmp	r0, #0
 802154e:	f2c0 81c3 	blt.w	80218d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8021552:	f103 38ff 	add.w	r8, r3, #4294967295
 8021556:	4540      	cmp	r0, r8
 8021558:	f280 81be 	bge.w	80218d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802155c:	fa0f f38e 	sxth.w	r3, lr
 8021560:	fb00 2203 	mla	r2, r0, r3, r2
 8021564:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021566:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 802156a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 802156e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021572:	2900      	cmp	r1, #0
 8021574:	f000 81a6 	beq.w	80218c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 8021578:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802157c:	900c      	str	r0, [sp, #48]	; 0x30
 802157e:	0e00      	lsrs	r0, r0, #24
 8021580:	9013      	str	r0, [sp, #76]	; 0x4c
 8021582:	f1bc 0f00 	cmp.w	ip, #0
 8021586:	d00f      	beq.n	80215a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8021588:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802158c:	3b01      	subs	r3, #1
 802158e:	009b      	lsls	r3, r3, #2
 8021590:	3304      	adds	r3, #4
 8021592:	eb08 0003 	add.w	r0, r8, r3
 8021596:	f858 3003 	ldr.w	r3, [r8, r3]
 802159a:	9308      	str	r3, [sp, #32]
 802159c:	0e1b      	lsrs	r3, r3, #24
 802159e:	9311      	str	r3, [sp, #68]	; 0x44
 80215a0:	6843      	ldr	r3, [r0, #4]
 80215a2:	930d      	str	r3, [sp, #52]	; 0x34
 80215a4:	0e1b      	lsrs	r3, r3, #24
 80215a6:	9314      	str	r3, [sp, #80]	; 0x50
 80215a8:	b289      	uxth	r1, r1
 80215aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80215ac:	fa1f fc8c 	uxth.w	ip, ip
 80215b0:	0108      	lsls	r0, r1, #4
 80215b2:	fb01 f90c 	mul.w	r9, r1, ip
 80215b6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80215ba:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80215be:	eba0 0809 	sub.w	r8, r0, r9
 80215c2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80215c4:	fa1f f18c 	uxth.w	r1, ip
 80215c8:	fa1f f888 	uxth.w	r8, r8
 80215cc:	1a5b      	subs	r3, r3, r1
 80215ce:	fb08 f000 	mul.w	r0, r8, r0
 80215d2:	b29b      	uxth	r3, r3
 80215d4:	fb03 000e 	mla	r0, r3, lr, r0
 80215d8:	fb01 0004 	mla	r0, r1, r4, r0
 80215dc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80215de:	fb09 0004 	mla	r0, r9, r4, r0
 80215e2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80215e6:	2800      	cmp	r0, #0
 80215e8:	f000 80f2 	beq.w	80217d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80215ec:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80215f0:	d01b      	beq.n	802162a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80215f2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80215f6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80215fa:	fb0e fa0a 	mul.w	sl, lr, sl
 80215fe:	fb0e fe02 	mul.w	lr, lr, r2
 8021602:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021606:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802160a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802160e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021612:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021616:	4452      	add	r2, sl
 8021618:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802161c:	0a12      	lsrs	r2, r2, #8
 802161e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021622:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021626:	ea42 020c 	orr.w	r2, r2, ip
 802162a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802162c:	2cff      	cmp	r4, #255	; 0xff
 802162e:	d021      	beq.n	8021674 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8021630:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021632:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021636:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021638:	fb04 fb0b 	mul.w	fp, r4, fp
 802163c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802163e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021642:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021644:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021648:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802164c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021650:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021654:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021658:	44de      	add	lr, fp
 802165a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802165e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021662:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021666:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802166a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802166e:	ea4e 040a 	orr.w	r4, lr, sl
 8021672:	940c      	str	r4, [sp, #48]	; 0x30
 8021674:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021676:	2cff      	cmp	r4, #255	; 0xff
 8021678:	d021      	beq.n	80216be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 802167a:	9c08      	ldr	r4, [sp, #32]
 802167c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021680:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021682:	fb04 fb0b 	mul.w	fp, r4, fp
 8021686:	9c08      	ldr	r4, [sp, #32]
 8021688:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802168c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802168e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021692:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021696:	fb04 fa0a 	mul.w	sl, r4, sl
 802169a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802169e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80216a2:	44de      	add	lr, fp
 80216a4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80216a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80216ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80216b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80216b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80216b8:	ea4e 040a 	orr.w	r4, lr, sl
 80216bc:	9408      	str	r4, [sp, #32]
 80216be:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80216c0:	2cff      	cmp	r4, #255	; 0xff
 80216c2:	d021      	beq.n	8021708 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80216c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80216c6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80216ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80216cc:	fb04 fb0b 	mul.w	fp, r4, fp
 80216d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80216d2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80216d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80216d8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80216dc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80216e0:	fb04 fa0a 	mul.w	sl, r4, sl
 80216e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80216e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80216ec:	44de      	add	lr, fp
 80216ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80216f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80216f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80216fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80216fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021702:	ea4e 040a 	orr.w	r4, lr, sl
 8021706:	940d      	str	r4, [sp, #52]	; 0x34
 8021708:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802170a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802170e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021712:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021716:	9c08      	ldr	r4, [sp, #32]
 8021718:	fb08 fc0c 	mul.w	ip, r8, ip
 802171c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8021720:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021724:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021726:	fb01 cc0e 	mla	ip, r1, lr, ip
 802172a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802172e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021730:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021734:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021738:	fb08 f80e 	mul.w	r8, r8, lr
 802173c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021740:	fb03 8202 	mla	r2, r3, r2, r8
 8021744:	9b08      	ldr	r3, [sp, #32]
 8021746:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802174a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802174e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021750:	fb01 220a 	mla	r2, r1, sl, r2
 8021754:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8021758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802175a:	fb09 2901 	mla	r9, r9, r1, r2
 802175e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021760:	4343      	muls	r3, r0
 8021762:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021766:	1c58      	adds	r0, r3, #1
 8021768:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802176c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021770:	783b      	ldrb	r3, [r7, #0]
 8021772:	ea4c 0c09 	orr.w	ip, ip, r9
 8021776:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802177a:	fa5f f28c 	uxtb.w	r2, ip
 802177e:	b2c0      	uxtb	r0, r0
 8021780:	fb12 f201 	smulbb	r2, r2, r1
 8021784:	fb03 2300 	mla	r3, r3, r0, r2
 8021788:	b29b      	uxth	r3, r3
 802178a:	1c5a      	adds	r2, r3, #1
 802178c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021790:	787a      	ldrb	r2, [r7, #1]
 8021792:	fb12 f200 	smulbb	r2, r2, r0
 8021796:	121b      	asrs	r3, r3, #8
 8021798:	703b      	strb	r3, [r7, #0]
 802179a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802179e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80217a2:	fb03 2301 	mla	r3, r3, r1, r2
 80217a6:	b29b      	uxth	r3, r3
 80217a8:	1c5a      	adds	r2, r3, #1
 80217aa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80217ae:	121b      	asrs	r3, r3, #8
 80217b0:	707b      	strb	r3, [r7, #1]
 80217b2:	78bb      	ldrb	r3, [r7, #2]
 80217b4:	fb13 f000 	smulbb	r0, r3, r0
 80217b8:	fb0c 0c01 	mla	ip, ip, r1, r0
 80217bc:	fa1f fc8c 	uxth.w	ip, ip
 80217c0:	f10c 0301 	add.w	r3, ip, #1
 80217c4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80217c8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80217cc:	f887 c002 	strb.w	ip, [r7, #2]
 80217d0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80217d2:	3703      	adds	r7, #3
 80217d4:	441d      	add	r5, r3
 80217d6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80217d8:	441e      	add	r6, r3
 80217da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80217dc:	3b01      	subs	r3, #1
 80217de:	9318      	str	r3, [sp, #96]	; 0x60
 80217e0:	e69f      	b.n	8021522 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80217e2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80217e4:	441d      	add	r5, r3
 80217e6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80217e8:	441e      	add	r6, r3
 80217ea:	9b07      	ldr	r3, [sp, #28]
 80217ec:	3b01      	subs	r3, #1
 80217ee:	9307      	str	r3, [sp, #28]
 80217f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217f2:	3303      	adds	r3, #3
 80217f4:	930a      	str	r3, [sp, #40]	; 0x28
 80217f6:	e674      	b.n	80214e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80217f8:	d025      	beq.n	8021846 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80217fa:	9b07      	ldr	r3, [sp, #28]
 80217fc:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80217fe:	3b01      	subs	r3, #1
 8021800:	fb00 5003 	mla	r0, r0, r3, r5
 8021804:	1400      	asrs	r0, r0, #16
 8021806:	f53f ae89 	bmi.w	802151c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802180a:	3901      	subs	r1, #1
 802180c:	4288      	cmp	r0, r1
 802180e:	f6bf ae85 	bge.w	802151c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021812:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8021814:	fb01 6303 	mla	r3, r1, r3, r6
 8021818:	141b      	asrs	r3, r3, #16
 802181a:	f53f ae7f 	bmi.w	802151c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802181e:	3a01      	subs	r2, #1
 8021820:	4293      	cmp	r3, r2
 8021822:	f6bf ae7b 	bge.w	802151c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021828:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802182c:	f103 0e03 	add.w	lr, r3, #3
 8021830:	f1bb 0f00 	cmp.w	fp, #0
 8021834:	dc6e      	bgt.n	8021914 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8021836:	9b07      	ldr	r3, [sp, #28]
 8021838:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802183c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802183e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021842:	4423      	add	r3, r4
 8021844:	930a      	str	r3, [sp, #40]	; 0x28
 8021846:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021848:	2b00      	cmp	r3, #0
 802184a:	f340 81ab 	ble.w	8021ba4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802184e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021852:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021854:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021858:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802185c:	eef0 6a48 	vmov.f32	s13, s16
 8021860:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021864:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021868:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802186c:	ee16 5a90 	vmov	r5, s13
 8021870:	eef0 6a68 	vmov.f32	s13, s17
 8021874:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021878:	ee16 6a90 	vmov	r6, s13
 802187c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021880:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021884:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021888:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802188c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021890:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021894:	ee18 2a10 	vmov	r2, s16
 8021898:	eeb0 8a47 	vmov.f32	s16, s14
 802189c:	fb92 f3f3 	sdiv	r3, r2, r3
 80218a0:	ee18 2a90 	vmov	r2, s17
 80218a4:	9331      	str	r3, [sp, #196]	; 0xc4
 80218a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80218a8:	eef0 8a67 	vmov.f32	s17, s15
 80218ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80218b0:	9332      	str	r3, [sp, #200]	; 0xc8
 80218b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80218b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80218b6:	3b01      	subs	r3, #1
 80218b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80218ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80218bc:	bf08      	it	eq
 80218be:	4613      	moveq	r3, r2
 80218c0:	9307      	str	r3, [sp, #28]
 80218c2:	e600      	b.n	80214c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80218c4:	f1bc 0f00 	cmp.w	ip, #0
 80218c8:	f43f ae6e 	beq.w	80215a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80218cc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80218d0:	9308      	str	r3, [sp, #32]
 80218d2:	0e1b      	lsrs	r3, r3, #24
 80218d4:	9311      	str	r3, [sp, #68]	; 0x44
 80218d6:	e667      	b.n	80215a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80218d8:	f112 0801 	adds.w	r8, r2, #1
 80218dc:	f53f af78 	bmi.w	80217d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80218e0:	45c6      	cmp	lr, r8
 80218e2:	f6ff af75 	blt.w	80217d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80218e6:	f110 0801 	adds.w	r8, r0, #1
 80218ea:	f53f af71 	bmi.w	80217d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80218ee:	4543      	cmp	r3, r8
 80218f0:	f6ff af6e 	blt.w	80217d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80218f4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80218f6:	b21b      	sxth	r3, r3
 80218f8:	9201      	str	r2, [sp, #4]
 80218fa:	9300      	str	r3, [sp, #0]
 80218fc:	fa0f f38e 	sxth.w	r3, lr
 8021900:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021902:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021906:	e9cd c404 	strd	ip, r4, [sp, #16]
 802190a:	4639      	mov	r1, r7
 802190c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802190e:	f7ff fc53 	bl	80211b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8021912:	e75d      	b.n	80217d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8021914:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021916:	142f      	asrs	r7, r5, #16
 8021918:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802191a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802191e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8021922:	1433      	asrs	r3, r6, #16
 8021924:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021928:	fb02 7303 	mla	r3, r2, r3, r7
 802192c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8021930:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8021934:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021938:	2900      	cmp	r1, #0
 802193a:	f000 812a 	beq.w	8021b92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 802193e:	687c      	ldr	r4, [r7, #4]
 8021940:	940e      	str	r4, [sp, #56]	; 0x38
 8021942:	0e24      	lsrs	r4, r4, #24
 8021944:	9415      	str	r4, [sp, #84]	; 0x54
 8021946:	b178      	cbz	r0, 8021968 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8021948:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 802194c:	3a01      	subs	r2, #1
 802194e:	0092      	lsls	r2, r2, #2
 8021950:	3204      	adds	r2, #4
 8021952:	eb07 0802 	add.w	r8, r7, r2
 8021956:	58ba      	ldr	r2, [r7, r2]
 8021958:	9209      	str	r2, [sp, #36]	; 0x24
 802195a:	0e12      	lsrs	r2, r2, #24
 802195c:	9212      	str	r2, [sp, #72]	; 0x48
 802195e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8021962:	920f      	str	r2, [sp, #60]	; 0x3c
 8021964:	0e12      	lsrs	r2, r2, #24
 8021966:	9216      	str	r2, [sp, #88]	; 0x58
 8021968:	b289      	uxth	r1, r1
 802196a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802196c:	b280      	uxth	r0, r0
 802196e:	fb01 f900 	mul.w	r9, r1, r0
 8021972:	0109      	lsls	r1, r1, #4
 8021974:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021978:	eba1 0809 	sub.w	r8, r1, r9
 802197c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8021980:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021982:	b280      	uxth	r0, r0
 8021984:	fa1f f888 	uxth.w	r8, r8
 8021988:	1a12      	subs	r2, r2, r0
 802198a:	fb08 f101 	mul.w	r1, r8, r1
 802198e:	b292      	uxth	r2, r2
 8021990:	fb02 110c 	mla	r1, r2, ip, r1
 8021994:	fb00 1104 	mla	r1, r0, r4, r1
 8021998:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802199a:	fb09 1104 	mla	r1, r9, r4, r1
 802199e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80219a2:	2900      	cmp	r1, #0
 80219a4:	f000 80ec 	beq.w	8021b80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80219a8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80219ac:	d019      	beq.n	80219e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 80219ae:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80219b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80219b6:	fb0c fa0a 	mul.w	sl, ip, sl
 80219ba:	fb0c fc03 	mul.w	ip, ip, r3
 80219be:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80219c2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80219c6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80219ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80219ce:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80219d2:	4453      	add	r3, sl
 80219d4:	0a3f      	lsrs	r7, r7, #8
 80219d6:	0a1b      	lsrs	r3, r3, #8
 80219d8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80219dc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80219e0:	433b      	orrs	r3, r7
 80219e2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80219e4:	2cff      	cmp	r4, #255	; 0xff
 80219e6:	d020      	beq.n	8021a2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 80219e8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80219ea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80219ee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80219f0:	4367      	muls	r7, r4
 80219f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80219f4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80219f8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80219fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80219fe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021a02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a06:	fb04 fa0a 	mul.w	sl, r4, sl
 8021a0a:	44bc      	add	ip, r7
 8021a0c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021a10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a14:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021a18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021a20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021a24:	ea4c 040a 	orr.w	r4, ip, sl
 8021a28:	940e      	str	r4, [sp, #56]	; 0x38
 8021a2a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021a2c:	2cff      	cmp	r4, #255	; 0xff
 8021a2e:	d020      	beq.n	8021a72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 8021a30:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021a32:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021a36:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021a38:	4367      	muls	r7, r4
 8021a3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021a3c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021a40:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021a44:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021a46:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021a4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a4e:	fb04 fa0a 	mul.w	sl, r4, sl
 8021a52:	44bc      	add	ip, r7
 8021a54:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021a58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a5c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021a60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021a68:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021a6c:	ea4c 040a 	orr.w	r4, ip, sl
 8021a70:	9409      	str	r4, [sp, #36]	; 0x24
 8021a72:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021a74:	2cff      	cmp	r4, #255	; 0xff
 8021a76:	d020      	beq.n	8021aba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 8021a78:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021a7a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021a7e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021a80:	4367      	muls	r7, r4
 8021a82:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021a84:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021a88:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021a8c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021a8e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021a92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a96:	fb04 fa0a 	mul.w	sl, r4, sl
 8021a9a:	44bc      	add	ip, r7
 8021a9c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021aa0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021aa4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021aa8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021aac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021ab0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021ab4:	ea4c 040a 	orr.w	r4, ip, sl
 8021ab8:	940f      	str	r4, [sp, #60]	; 0x3c
 8021aba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021abc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021ac0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021ac4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021ac8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021aca:	fb08 f707 	mul.w	r7, r8, r7
 8021ace:	fb02 770c 	mla	r7, r2, ip, r7
 8021ad2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021ad6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021ad8:	fb00 770c 	mla	r7, r0, ip, r7
 8021adc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021ae0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021ae2:	fb09 770c 	mla	r7, r9, ip, r7
 8021ae6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021aea:	fb08 f80c 	mul.w	r8, r8, ip
 8021aee:	0a3f      	lsrs	r7, r7, #8
 8021af0:	fb02 8303 	mla	r3, r2, r3, r8
 8021af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021af6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021afa:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021afe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021b00:	fb00 330a 	mla	r3, r0, sl, r3
 8021b04:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021b08:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021b0a:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021b10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021b14:	434b      	muls	r3, r1
 8021b16:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021b1a:	1c59      	adds	r1, r3, #1
 8021b1c:	ea47 070c 	orr.w	r7, r7, ip
 8021b20:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021b24:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021b28:	b2fa      	uxtb	r2, r7
 8021b2a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021b2e:	fb12 f200 	smulbb	r2, r2, r0
 8021b32:	b2c9      	uxtb	r1, r1
 8021b34:	fb03 2301 	mla	r3, r3, r1, r2
 8021b38:	b29b      	uxth	r3, r3
 8021b3a:	1c5a      	adds	r2, r3, #1
 8021b3c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021b40:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021b44:	fb12 f201 	smulbb	r2, r2, r1
 8021b48:	121b      	asrs	r3, r3, #8
 8021b4a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021b4e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8021b52:	0c3f      	lsrs	r7, r7, #16
 8021b54:	fb03 2300 	mla	r3, r3, r0, r2
 8021b58:	b29b      	uxth	r3, r3
 8021b5a:	1c5a      	adds	r2, r3, #1
 8021b5c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021b60:	121b      	asrs	r3, r3, #8
 8021b62:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021b66:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021b6a:	fb13 f101 	smulbb	r1, r3, r1
 8021b6e:	fb07 1700 	mla	r7, r7, r0, r1
 8021b72:	b2bf      	uxth	r7, r7
 8021b74:	1c79      	adds	r1, r7, #1
 8021b76:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8021b7a:	123f      	asrs	r7, r7, #8
 8021b7c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8021b80:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021b82:	f10e 0e03 	add.w	lr, lr, #3
 8021b86:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021b8a:	441d      	add	r5, r3
 8021b8c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021b8e:	441e      	add	r6, r3
 8021b90:	e64e      	b.n	8021830 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8021b92:	2800      	cmp	r0, #0
 8021b94:	f43f aee8 	beq.w	8021968 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8021b98:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8021b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8021b9e:	0e12      	lsrs	r2, r2, #24
 8021ba0:	9212      	str	r2, [sp, #72]	; 0x48
 8021ba2:	e6e1      	b.n	8021968 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8021ba4:	b01d      	add	sp, #116	; 0x74
 8021ba6:	ecbd 8b08 	vpop	{d8-d11}
 8021baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021bb0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8021bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bb4:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8021bb8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8021bbc:	fb04 5603 	mla	r6, r4, r3, r5
 8021bc0:	2c00      	cmp	r4, #0
 8021bc2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8021bc6:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8021bca:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8021bce:	db36      	blt.n	8021c3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8021bd0:	45a6      	cmp	lr, r4
 8021bd2:	dd34      	ble.n	8021c3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8021bd4:	2d00      	cmp	r5, #0
 8021bd6:	db30      	blt.n	8021c3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8021bd8:	42ab      	cmp	r3, r5
 8021bda:	dd2e      	ble.n	8021c3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8021bdc:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8021be0:	1c6e      	adds	r6, r5, #1
 8021be2:	d42f      	bmi.n	8021c44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8021be4:	42b3      	cmp	r3, r6
 8021be6:	dd2d      	ble.n	8021c44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8021be8:	b370      	cbz	r0, 8021c48 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 8021bea:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8021bee:	3401      	adds	r4, #1
 8021bf0:	d42e      	bmi.n	8021c50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8021bf2:	45a6      	cmp	lr, r4
 8021bf4:	dd2c      	ble.n	8021c50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8021bf6:	b377      	cbz	r7, 8021c56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 8021bf8:	2d00      	cmp	r5, #0
 8021bfa:	db27      	blt.n	8021c4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8021bfc:	42ab      	cmp	r3, r5
 8021bfe:	dd25      	ble.n	8021c4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8021c00:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8021c04:	3501      	adds	r5, #1
 8021c06:	d429      	bmi.n	8021c5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8021c08:	42ab      	cmp	r3, r5
 8021c0a:	dd27      	ble.n	8021c5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8021c0c:	b340      	cbz	r0, 8021c60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 8021c0e:	3301      	adds	r3, #1
 8021c10:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8021c14:	280f      	cmp	r0, #15
 8021c16:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021c1a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021c1e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021c22:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8021c26:	d801      	bhi.n	8021c2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 8021c28:	2f0f      	cmp	r7, #15
 8021c2a:	d91b      	bls.n	8021c64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 8021c2c:	4b7e      	ldr	r3, [pc, #504]	; (8021e28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 8021c2e:	f240 1157 	movw	r1, #343	; 0x157
 8021c32:	4a7e      	ldr	r2, [pc, #504]	; (8021e2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 8021c34:	487e      	ldr	r0, [pc, #504]	; (8021e30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 8021c36:	f003 f8e5 	bl	8024e04 <__assert_func>
 8021c3a:	2200      	movs	r2, #0
 8021c3c:	e7d0      	b.n	8021be0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 8021c3e:	2600      	movs	r6, #0
 8021c40:	4632      	mov	r2, r6
 8021c42:	e7d4      	b.n	8021bee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8021c44:	2600      	movs	r6, #0
 8021c46:	e7d2      	b.n	8021bee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8021c48:	4606      	mov	r6, r0
 8021c4a:	e7d0      	b.n	8021bee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8021c4c:	2400      	movs	r4, #0
 8021c4e:	e7d9      	b.n	8021c04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 8021c50:	2300      	movs	r3, #0
 8021c52:	461c      	mov	r4, r3
 8021c54:	e7de      	b.n	8021c14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8021c56:	463b      	mov	r3, r7
 8021c58:	463c      	mov	r4, r7
 8021c5a:	e7db      	b.n	8021c14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8021c5c:	2300      	movs	r3, #0
 8021c5e:	e7d9      	b.n	8021c14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8021c60:	4603      	mov	r3, r0
 8021c62:	e7d7      	b.n	8021c14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8021c64:	b280      	uxth	r0, r0
 8021c66:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021c6a:	b2bf      	uxth	r7, r7
 8021c6c:	fb00 fe07 	mul.w	lr, r0, r7
 8021c70:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8021c74:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021c78:	eba0 0c0e 	sub.w	ip, r0, lr
 8021c7c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8021c80:	b2bf      	uxth	r7, r7
 8021c82:	fa1f fc8c 	uxth.w	ip, ip
 8021c86:	eba0 0507 	sub.w	r5, r0, r7
 8021c8a:	fb0c f00a 	mul.w	r0, ip, sl
 8021c8e:	b2ad      	uxth	r5, r5
 8021c90:	fb05 000b 	mla	r0, r5, fp, r0
 8021c94:	fb07 0009 	mla	r0, r7, r9, r0
 8021c98:	fb0e 0008 	mla	r0, lr, r8, r0
 8021c9c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021ca0:	9001      	str	r0, [sp, #4]
 8021ca2:	d018      	beq.n	8021cd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 8021ca4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8021ca8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021cac:	fb0b f000 	mul.w	r0, fp, r0
 8021cb0:	fb0b fb02 	mul.w	fp, fp, r2
 8021cb4:	0a02      	lsrs	r2, r0, #8
 8021cb6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021cba:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021cbe:	4402      	add	r2, r0
 8021cc0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8021cc4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021cc8:	0a12      	lsrs	r2, r2, #8
 8021cca:	0a00      	lsrs	r0, r0, #8
 8021ccc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021cd0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021cd4:	4302      	orrs	r2, r0
 8021cd6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021cda:	d01a      	beq.n	8021d12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 8021cdc:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8021ce0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021ce4:	fb0a f000 	mul.w	r0, sl, r0
 8021ce8:	fb0a fa06 	mul.w	sl, sl, r6
 8021cec:	0a06      	lsrs	r6, r0, #8
 8021cee:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021cf2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021cf6:	4406      	add	r6, r0
 8021cf8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8021cfc:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8021d00:	0a36      	lsrs	r6, r6, #8
 8021d02:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021d06:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021d0a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021d0e:	ea46 060a 	orr.w	r6, r6, sl
 8021d12:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021d16:	d01b      	beq.n	8021d50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 8021d18:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021d1c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021d20:	fb09 fa0a 	mul.w	sl, r9, sl
 8021d24:	fb09 f004 	mul.w	r0, r9, r4
 8021d28:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021d2c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021d30:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8021d34:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021d38:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021d3c:	4454      	add	r4, sl
 8021d3e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021d42:	0a24      	lsrs	r4, r4, #8
 8021d44:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021d48:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021d4c:	ea44 0409 	orr.w	r4, r4, r9
 8021d50:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021d54:	d01b      	beq.n	8021d8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 8021d56:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8021d5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d5e:	fb08 f909 	mul.w	r9, r8, r9
 8021d62:	fb08 f003 	mul.w	r0, r8, r3
 8021d66:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8021d6a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021d6e:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8021d72:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021d76:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8021d7a:	444b      	add	r3, r9
 8021d7c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021d80:	0a1b      	lsrs	r3, r3, #8
 8021d82:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021d86:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021d8a:	ea43 0308 	orr.w	r3, r3, r8
 8021d8e:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8021d92:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021d96:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8021d9a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021d9e:	fb0c f000 	mul.w	r0, ip, r0
 8021da2:	fb0c f606 	mul.w	r6, ip, r6
 8021da6:	fb05 0808 	mla	r8, r5, r8, r0
 8021daa:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8021dae:	fb05 6502 	mla	r5, r5, r2, r6
 8021db2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021db6:	fb07 8800 	mla	r8, r7, r0, r8
 8021dba:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8021dbe:	fb07 5704 	mla	r7, r7, r4, r5
 8021dc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021dc6:	fb0e 8000 	mla	r0, lr, r0, r8
 8021dca:	780a      	ldrb	r2, [r1, #0]
 8021dcc:	fb0e 7e03 	mla	lr, lr, r3, r7
 8021dd0:	9b01      	ldr	r3, [sp, #4]
 8021dd2:	0a00      	lsrs	r0, r0, #8
 8021dd4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021dd8:	43db      	mvns	r3, r3
 8021dda:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021dde:	b2db      	uxtb	r3, r3
 8021de0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021de4:	ea40 0e0e 	orr.w	lr, r0, lr
 8021de8:	fb02 f003 	mul.w	r0, r2, r3
 8021dec:	1c42      	adds	r2, r0, #1
 8021dee:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021df2:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021df6:	700a      	strb	r2, [r1, #0]
 8021df8:	784a      	ldrb	r2, [r1, #1]
 8021dfa:	435a      	muls	r2, r3
 8021dfc:	1c50      	adds	r0, r2, #1
 8021dfe:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021e02:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8021e06:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021e0a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021e0e:	704a      	strb	r2, [r1, #1]
 8021e10:	788a      	ldrb	r2, [r1, #2]
 8021e12:	4353      	muls	r3, r2
 8021e14:	1c5a      	adds	r2, r3, #1
 8021e16:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021e1a:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021e1e:	f881 e002 	strb.w	lr, [r1, #2]
 8021e22:	b003      	add	sp, #12
 8021e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e28:	0802ce1f 	.word	0x0802ce1f
 8021e2c:	0802d387 	.word	0x0802d387
 8021e30:	0802cee8 	.word	0x0802cee8

08021e34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e38:	ed2d 8b08 	vpush	{d8-d11}
 8021e3c:	b099      	sub	sp, #100	; 0x64
 8021e3e:	eeb0 aa40 	vmov.f32	s20, s0
 8021e42:	eef0 9a60 	vmov.f32	s19, s1
 8021e46:	9017      	str	r0, [sp, #92]	; 0x5c
 8021e48:	eeb0 9a41 	vmov.f32	s18, s2
 8021e4c:	9306      	str	r3, [sp, #24]
 8021e4e:	eeb0 8a62 	vmov.f32	s16, s5
 8021e52:	eef0 8a43 	vmov.f32	s17, s6
 8021e56:	eef0 ba44 	vmov.f32	s23, s8
 8021e5a:	eeb0 ba64 	vmov.f32	s22, s9
 8021e5e:	eef0 aa45 	vmov.f32	s21, s10
 8021e62:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8021e66:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021e68:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8021e6c:	6850      	ldr	r0, [r2, #4]
 8021e6e:	6812      	ldr	r2, [r2, #0]
 8021e70:	fb00 1303 	mla	r3, r0, r3, r1
 8021e74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021e78:	18d3      	adds	r3, r2, r3
 8021e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8021e7c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021e7e:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 8021e82:	681b      	ldr	r3, [r3, #0]
 8021e84:	930e      	str	r3, [sp, #56]	; 0x38
 8021e86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021e88:	2b00      	cmp	r3, #0
 8021e8a:	dc03      	bgt.n	8021e94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021e8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021e8e:	2b00      	cmp	r3, #0
 8021e90:	f340 8360 	ble.w	8022554 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8021e94:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021e96:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021e9a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021e9e:	1e48      	subs	r0, r1, #1
 8021ea0:	1e57      	subs	r7, r2, #1
 8021ea2:	9b06      	ldr	r3, [sp, #24]
 8021ea4:	2b00      	cmp	r3, #0
 8021ea6:	f340 817b 	ble.w	80221a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021eaa:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8021eae:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021eb2:	d406      	bmi.n	8021ec2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021eb4:	4584      	cmp	ip, r0
 8021eb6:	da04      	bge.n	8021ec2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021eb8:	2b00      	cmp	r3, #0
 8021eba:	db02      	blt.n	8021ec2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021ebc:	42bb      	cmp	r3, r7
 8021ebe:	f2c0 8170 	blt.w	80221a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8021ec2:	f11c 0c01 	adds.w	ip, ip, #1
 8021ec6:	f100 8160 	bmi.w	802218a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021eca:	4561      	cmp	r1, ip
 8021ecc:	f2c0 815d 	blt.w	802218a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021ed0:	3301      	adds	r3, #1
 8021ed2:	f100 815a 	bmi.w	802218a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021ed6:	429a      	cmp	r2, r3
 8021ed8:	f2c0 8157 	blt.w	802218a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021edc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8021ee0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021ee2:	f1b8 0f00 	cmp.w	r8, #0
 8021ee6:	f340 8179 	ble.w	80221dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8021eea:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8021eec:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021ef0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021ef2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021ef6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021efa:	142a      	asrs	r2, r5, #16
 8021efc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021f00:	689b      	ldr	r3, [r3, #8]
 8021f02:	f100 81be 	bmi.w	8022282 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8021f06:	f103 39ff 	add.w	r9, r3, #4294967295
 8021f0a:	454a      	cmp	r2, r9
 8021f0c:	f280 81b9 	bge.w	8022282 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8021f10:	f1bc 0f00 	cmp.w	ip, #0
 8021f14:	f2c0 81b5 	blt.w	8022282 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8021f18:	f10e 39ff 	add.w	r9, lr, #4294967295
 8021f1c:	45cc      	cmp	ip, r9
 8021f1e:	f280 81b0 	bge.w	8022282 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8021f22:	b21b      	sxth	r3, r3
 8021f24:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021f26:	fb0c 2203 	mla	r2, ip, r3, r2
 8021f2a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8021f2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021f32:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021f36:	2900      	cmp	r1, #0
 8021f38:	f000 8197 	beq.w	802226a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 8021f3c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8021f40:	940a      	str	r4, [sp, #40]	; 0x28
 8021f42:	0e24      	lsrs	r4, r4, #24
 8021f44:	9411      	str	r4, [sp, #68]	; 0x44
 8021f46:	b180      	cbz	r0, 8021f6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8021f48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021f4c:	3b01      	subs	r3, #1
 8021f4e:	009b      	lsls	r3, r3, #2
 8021f50:	3304      	adds	r3, #4
 8021f52:	eb09 0c03 	add.w	ip, r9, r3
 8021f56:	f859 3003 	ldr.w	r3, [r9, r3]
 8021f5a:	9307      	str	r3, [sp, #28]
 8021f5c:	0e1b      	lsrs	r3, r3, #24
 8021f5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8021f60:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8021f64:	930b      	str	r3, [sp, #44]	; 0x2c
 8021f66:	0e1b      	lsrs	r3, r3, #24
 8021f68:	9312      	str	r3, [sp, #72]	; 0x48
 8021f6a:	b289      	uxth	r1, r1
 8021f6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021f6e:	b280      	uxth	r0, r0
 8021f70:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021f72:	fb01 fa00 	mul.w	sl, r1, r0
 8021f76:	0109      	lsls	r1, r1, #4
 8021f78:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021f7c:	eba1 090a 	sub.w	r9, r1, sl
 8021f80:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8021f84:	b280      	uxth	r0, r0
 8021f86:	fa1f f989 	uxth.w	r9, r9
 8021f8a:	1a09      	subs	r1, r1, r0
 8021f8c:	fb09 f303 	mul.w	r3, r9, r3
 8021f90:	b289      	uxth	r1, r1
 8021f92:	fb01 330e 	mla	r3, r1, lr, r3
 8021f96:	fb00 3304 	mla	r3, r0, r4, r3
 8021f9a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021f9c:	fb0a 3304 	mla	r3, sl, r4, r3
 8021fa0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021fa4:	2b00      	cmp	r3, #0
 8021fa6:	f000 80e8 	beq.w	802217a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8021faa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021fae:	d01b      	beq.n	8021fe8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8021fb0:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8021fb4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021fb8:	fb0e fb0b 	mul.w	fp, lr, fp
 8021fbc:	fb0e fe02 	mul.w	lr, lr, r2
 8021fc0:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8021fc4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021fc8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021fcc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021fd0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021fd4:	445a      	add	r2, fp
 8021fd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021fda:	0a12      	lsrs	r2, r2, #8
 8021fdc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021fe0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021fe4:	ea42 020c 	orr.w	r2, r2, ip
 8021fe8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021fea:	2cff      	cmp	r4, #255	; 0xff
 8021fec:	d021      	beq.n	8022032 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8021fee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021ff0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021ff4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021ff6:	fb04 fc0c 	mul.w	ip, r4, ip
 8021ffa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021ffc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022000:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8022004:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022006:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802200a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802200e:	fb04 fb0b 	mul.w	fp, r4, fp
 8022012:	44e6      	add	lr, ip
 8022014:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8022018:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802201c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022020:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022024:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022028:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802202c:	ea4e 040b 	orr.w	r4, lr, fp
 8022030:	940a      	str	r4, [sp, #40]	; 0x28
 8022032:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022034:	2cff      	cmp	r4, #255	; 0xff
 8022036:	d021      	beq.n	802207c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022038:	9c07      	ldr	r4, [sp, #28]
 802203a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802203e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022040:	fb04 fc0c 	mul.w	ip, r4, ip
 8022044:	9c07      	ldr	r4, [sp, #28]
 8022046:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802204a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802204e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022050:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022054:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022058:	fb04 fb0b 	mul.w	fp, r4, fp
 802205c:	44e6      	add	lr, ip
 802205e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8022062:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022066:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802206a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802206e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022072:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022076:	ea4e 040b 	orr.w	r4, lr, fp
 802207a:	9407      	str	r4, [sp, #28]
 802207c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802207e:	2cff      	cmp	r4, #255	; 0xff
 8022080:	d021      	beq.n	80220c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8022082:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022084:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022088:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802208a:	fb04 fc0c 	mul.w	ip, r4, ip
 802208e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022090:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022094:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8022098:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802209a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802209e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80220a2:	fb04 fb0b 	mul.w	fp, r4, fp
 80220a6:	44e6      	add	lr, ip
 80220a8:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80220ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80220b0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80220b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80220b8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80220bc:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80220c0:	ea4e 040b 	orr.w	r4, lr, fp
 80220c4:	940b      	str	r4, [sp, #44]	; 0x2c
 80220c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80220c8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80220cc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80220d0:	2bff      	cmp	r3, #255	; 0xff
 80220d2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80220d6:	9c07      	ldr	r4, [sp, #28]
 80220d8:	fb09 fc0c 	mul.w	ip, r9, ip
 80220dc:	fb01 cc0e 	mla	ip, r1, lr, ip
 80220e0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80220e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80220e6:	fb00 cc0e 	mla	ip, r0, lr, ip
 80220ea:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80220ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80220f0:	fb0a cc0e 	mla	ip, sl, lr, ip
 80220f4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80220f8:	fb09 f90e 	mul.w	r9, r9, lr
 80220fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022100:	fb01 9202 	mla	r2, r1, r2, r9
 8022104:	9907      	ldr	r1, [sp, #28]
 8022106:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802210a:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 802210e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022110:	fb00 220b 	mla	r2, r0, fp, r2
 8022114:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8022118:	fb0a 2a00 	mla	sl, sl, r0, r2
 802211c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022120:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022124:	ea4c 0c0a 	orr.w	ip, ip, sl
 8022128:	fa5f f08c 	uxtb.w	r0, ip
 802212c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8022130:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022134:	f000 80a2 	beq.w	802227c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8022138:	43db      	mvns	r3, r3
 802213a:	783a      	ldrb	r2, [r7, #0]
 802213c:	f897 a002 	ldrb.w	sl, [r7, #2]
 8022140:	b2db      	uxtb	r3, r3
 8022142:	fb02 fe03 	mul.w	lr, r2, r3
 8022146:	fb0a fa03 	mul.w	sl, sl, r3
 802214a:	f10e 0201 	add.w	r2, lr, #1
 802214e:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8022152:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022156:	703a      	strb	r2, [r7, #0]
 8022158:	787a      	ldrb	r2, [r7, #1]
 802215a:	fb02 f003 	mul.w	r0, r2, r3
 802215e:	f10a 0301 	add.w	r3, sl, #1
 8022162:	1c42      	adds	r2, r0, #1
 8022164:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022168:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802216c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022170:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022174:	707a      	strb	r2, [r7, #1]
 8022176:	f887 c002 	strb.w	ip, [r7, #2]
 802217a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802217c:	3703      	adds	r7, #3
 802217e:	f108 38ff 	add.w	r8, r8, #4294967295
 8022182:	441d      	add	r5, r3
 8022184:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022186:	441e      	add	r6, r3
 8022188:	e6ab      	b.n	8021ee2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802218a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802218c:	441d      	add	r5, r3
 802218e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022190:	441e      	add	r6, r3
 8022192:	9b06      	ldr	r3, [sp, #24]
 8022194:	3b01      	subs	r3, #1
 8022196:	9306      	str	r3, [sp, #24]
 8022198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802219a:	3303      	adds	r3, #3
 802219c:	9309      	str	r3, [sp, #36]	; 0x24
 802219e:	e680      	b.n	8021ea2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80221a0:	d024      	beq.n	80221ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 80221a2:	9b06      	ldr	r3, [sp, #24]
 80221a4:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80221a6:	3b01      	subs	r3, #1
 80221a8:	fb00 5003 	mla	r0, r0, r3, r5
 80221ac:	1400      	asrs	r0, r0, #16
 80221ae:	f53f ae95 	bmi.w	8021edc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80221b2:	3901      	subs	r1, #1
 80221b4:	4288      	cmp	r0, r1
 80221b6:	f6bf ae91 	bge.w	8021edc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80221ba:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80221bc:	fb01 6303 	mla	r3, r1, r3, r6
 80221c0:	141b      	asrs	r3, r3, #16
 80221c2:	f53f ae8b 	bmi.w	8021edc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80221c6:	3a01      	subs	r2, #1
 80221c8:	4293      	cmp	r3, r2
 80221ca:	f6bf ae87 	bge.w	8021edc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80221ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221d0:	f8dd b018 	ldr.w	fp, [sp, #24]
 80221d4:	1cdf      	adds	r7, r3, #3
 80221d6:	f1bb 0f00 	cmp.w	fp, #0
 80221da:	dc6e      	bgt.n	80222ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 80221dc:	9b06      	ldr	r3, [sp, #24]
 80221de:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80221e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80221e8:	4423      	add	r3, r4
 80221ea:	9309      	str	r3, [sp, #36]	; 0x24
 80221ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80221ee:	2b00      	cmp	r3, #0
 80221f0:	f340 81b0 	ble.w	8022554 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 80221f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80221f8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80221fa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80221fe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022202:	eef0 6a48 	vmov.f32	s13, s16
 8022206:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802220a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802220e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022212:	ee16 5a90 	vmov	r5, s13
 8022216:	eef0 6a68 	vmov.f32	s13, s17
 802221a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802221e:	ee16 6a90 	vmov	r6, s13
 8022222:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022226:	ee69 7a27 	vmul.f32	s15, s18, s15
 802222a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802222e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022232:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022236:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802223a:	ee18 2a10 	vmov	r2, s16
 802223e:	eeb0 8a47 	vmov.f32	s16, s14
 8022242:	fb92 f3f3 	sdiv	r3, r2, r3
 8022246:	ee18 2a90 	vmov	r2, s17
 802224a:	932d      	str	r3, [sp, #180]	; 0xb4
 802224c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802224e:	eef0 8a67 	vmov.f32	s17, s15
 8022252:	fb92 f3f3 	sdiv	r3, r2, r3
 8022256:	932e      	str	r3, [sp, #184]	; 0xb8
 8022258:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802225a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802225c:	3b01      	subs	r3, #1
 802225e:	9315      	str	r3, [sp, #84]	; 0x54
 8022260:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022262:	bf08      	it	eq
 8022264:	4613      	moveq	r3, r2
 8022266:	9306      	str	r3, [sp, #24]
 8022268:	e60d      	b.n	8021e86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802226a:	2800      	cmp	r0, #0
 802226c:	f43f ae7d 	beq.w	8021f6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8022270:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8022274:	9307      	str	r3, [sp, #28]
 8022276:	0e1b      	lsrs	r3, r3, #24
 8022278:	930f      	str	r3, [sp, #60]	; 0x3c
 802227a:	e676      	b.n	8021f6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 802227c:	7038      	strb	r0, [r7, #0]
 802227e:	7079      	strb	r1, [r7, #1]
 8022280:	e779      	b.n	8022176 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8022282:	f112 0901 	adds.w	r9, r2, #1
 8022286:	f53f af78 	bmi.w	802217a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802228a:	454b      	cmp	r3, r9
 802228c:	f6ff af75 	blt.w	802217a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8022290:	f11c 0901 	adds.w	r9, ip, #1
 8022294:	f53f af71 	bmi.w	802217a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8022298:	45ce      	cmp	lr, r9
 802229a:	f6ff af6e 	blt.w	802217a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802229e:	b21b      	sxth	r3, r3
 80222a0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80222a4:	fa0f f28e 	sxth.w	r2, lr
 80222a8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80222ac:	9200      	str	r2, [sp, #0]
 80222ae:	4639      	mov	r1, r7
 80222b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80222b2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80222b4:	f7ff fc7c 	bl	8021bb0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80222b8:	e75f      	b.n	802217a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80222ba:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80222bc:	1429      	asrs	r1, r5, #16
 80222be:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80222c0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80222c4:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80222c8:	1433      	asrs	r3, r6, #16
 80222ca:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80222ce:	fb0c 1303 	mla	r3, ip, r3, r1
 80222d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80222d4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80222d8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80222dc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80222e0:	2a00      	cmp	r2, #0
 80222e2:	f000 8129 	beq.w	8022538 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80222e6:	684c      	ldr	r4, [r1, #4]
 80222e8:	940c      	str	r4, [sp, #48]	; 0x30
 80222ea:	0e24      	lsrs	r4, r4, #24
 80222ec:	9413      	str	r4, [sp, #76]	; 0x4c
 80222ee:	b198      	cbz	r0, 8022318 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80222f0:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80222f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80222f8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80222fc:	f10c 0c04 	add.w	ip, ip, #4
 8022300:	eb01 080c 	add.w	r8, r1, ip
 8022304:	f851 100c 	ldr.w	r1, [r1, ip]
 8022308:	9108      	str	r1, [sp, #32]
 802230a:	0e09      	lsrs	r1, r1, #24
 802230c:	9110      	str	r1, [sp, #64]	; 0x40
 802230e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022312:	910d      	str	r1, [sp, #52]	; 0x34
 8022314:	0e09      	lsrs	r1, r1, #24
 8022316:	9114      	str	r1, [sp, #80]	; 0x50
 8022318:	b292      	uxth	r2, r2
 802231a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802231c:	b280      	uxth	r0, r0
 802231e:	fb02 f900 	mul.w	r9, r2, r0
 8022322:	0112      	lsls	r2, r2, #4
 8022324:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022328:	eba2 0809 	sub.w	r8, r2, r9
 802232c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022330:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022332:	b280      	uxth	r0, r0
 8022334:	fa1f f888 	uxth.w	r8, r8
 8022338:	1a09      	subs	r1, r1, r0
 802233a:	fb08 f202 	mul.w	r2, r8, r2
 802233e:	b289      	uxth	r1, r1
 8022340:	fb01 220e 	mla	r2, r1, lr, r2
 8022344:	fb00 2204 	mla	r2, r0, r4, r2
 8022348:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802234a:	fb09 2204 	mla	r2, r9, r4, r2
 802234e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022352:	2a00      	cmp	r2, #0
 8022354:	f000 80e8 	beq.w	8022528 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8022358:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802235c:	d01b      	beq.n	8022396 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 802235e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022362:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022366:	fb0e fa0a 	mul.w	sl, lr, sl
 802236a:	fb0e fe03 	mul.w	lr, lr, r3
 802236e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022372:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022376:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802237a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802237e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022382:	4453      	add	r3, sl
 8022384:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022388:	0a1b      	lsrs	r3, r3, #8
 802238a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802238e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022392:	ea43 030c 	orr.w	r3, r3, ip
 8022396:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022398:	2cff      	cmp	r4, #255	; 0xff
 802239a:	d021      	beq.n	80223e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 802239c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802239e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80223a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80223a4:	fb04 fc0c 	mul.w	ip, r4, ip
 80223a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80223aa:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80223ae:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80223b2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80223b4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80223b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80223bc:	fb04 fa0a 	mul.w	sl, r4, sl
 80223c0:	44e6      	add	lr, ip
 80223c2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80223c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80223ca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80223ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80223d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80223d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80223da:	ea4e 040a 	orr.w	r4, lr, sl
 80223de:	940c      	str	r4, [sp, #48]	; 0x30
 80223e0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80223e2:	2cff      	cmp	r4, #255	; 0xff
 80223e4:	d021      	beq.n	802242a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 80223e6:	9c08      	ldr	r4, [sp, #32]
 80223e8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80223ec:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80223ee:	fb04 fc0c 	mul.w	ip, r4, ip
 80223f2:	9c08      	ldr	r4, [sp, #32]
 80223f4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80223f8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80223fa:	fb04 fa0e 	mul.w	sl, r4, lr
 80223fe:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022402:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022406:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802240a:	44e6      	add	lr, ip
 802240c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022410:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022414:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022418:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802241c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022420:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022424:	ea4e 040a 	orr.w	r4, lr, sl
 8022428:	9408      	str	r4, [sp, #32]
 802242a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802242c:	2cff      	cmp	r4, #255	; 0xff
 802242e:	d021      	beq.n	8022474 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 8022430:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022432:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022436:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022438:	fb04 fc0c 	mul.w	ip, r4, ip
 802243c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802243e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022442:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022446:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022448:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802244c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022450:	fb04 fa0a 	mul.w	sl, r4, sl
 8022454:	44e6      	add	lr, ip
 8022456:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802245a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802245e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022462:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022466:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802246a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802246e:	ea4e 040a 	orr.w	r4, lr, sl
 8022472:	940d      	str	r4, [sp, #52]	; 0x34
 8022474:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022476:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802247a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802247e:	2aff      	cmp	r2, #255	; 0xff
 8022480:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022484:	9c08      	ldr	r4, [sp, #32]
 8022486:	fb08 fc0c 	mul.w	ip, r8, ip
 802248a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802248e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022492:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022494:	fb00 cc0e 	mla	ip, r0, lr, ip
 8022498:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802249c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802249e:	fb09 cc0e 	mla	ip, r9, lr, ip
 80224a2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80224a6:	fb08 f80e 	mul.w	r8, r8, lr
 80224aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80224ae:	fb01 8303 	mla	r3, r1, r3, r8
 80224b2:	9908      	ldr	r1, [sp, #32]
 80224b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80224b8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80224bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80224be:	fb00 330a 	mla	r3, r0, sl, r3
 80224c2:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80224c6:	fb09 3e0e 	mla	lr, r9, lr, r3
 80224ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80224ce:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80224d2:	ea4c 0c0e 	orr.w	ip, ip, lr
 80224d6:	fa5f f08c 	uxtb.w	r0, ip
 80224da:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80224de:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80224e2:	d032      	beq.n	802254a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 80224e4:	43d2      	mvns	r2, r2
 80224e6:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 80224ea:	b2d2      	uxtb	r2, r2
 80224ec:	fb0e fe02 	mul.w	lr, lr, r2
 80224f0:	f10e 0301 	add.w	r3, lr, #1
 80224f4:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80224f8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80224fc:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8022500:	4350      	muls	r0, r2
 8022502:	f807 3c03 	strb.w	r3, [r7, #-3]
 8022506:	1c43      	adds	r3, r0, #1
 8022508:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802250c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022510:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8022514:	4353      	muls	r3, r2
 8022516:	f807 1c02 	strb.w	r1, [r7, #-2]
 802251a:	1c5a      	adds	r2, r3, #1
 802251c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022520:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8022524:	f807 cc01 	strb.w	ip, [r7, #-1]
 8022528:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802252a:	3703      	adds	r7, #3
 802252c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022530:	441d      	add	r5, r3
 8022532:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022534:	441e      	add	r6, r3
 8022536:	e64e      	b.n	80221d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8022538:	2800      	cmp	r0, #0
 802253a:	f43f aeed 	beq.w	8022318 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802253e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8022542:	9108      	str	r1, [sp, #32]
 8022544:	0e09      	lsrs	r1, r1, #24
 8022546:	9110      	str	r1, [sp, #64]	; 0x40
 8022548:	e6e6      	b.n	8022318 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802254a:	f807 0c03 	strb.w	r0, [r7, #-3]
 802254e:	f807 1c02 	strb.w	r1, [r7, #-2]
 8022552:	e7e7      	b.n	8022524 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 8022554:	b019      	add	sp, #100	; 0x64
 8022556:	ecbd 8b08 	vpop	{d8-d11}
 802255a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022560 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8022560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022564:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022568:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802256c:	2800      	cmp	r0, #0
 802256e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8022572:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022576:	fb0c 0e03 	mla	lr, ip, r3, r0
 802257a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802257e:	db6b      	blt.n	8022658 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022580:	4580      	cmp	r8, r0
 8022582:	dd69      	ble.n	8022658 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022584:	f1bc 0f00 	cmp.w	ip, #0
 8022588:	db66      	blt.n	8022658 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802258a:	45e1      	cmp	r9, ip
 802258c:	dd64      	ble.n	8022658 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802258e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022592:	f01e 0f01 	tst.w	lr, #1
 8022596:	5d16      	ldrb	r6, [r2, r4]
 8022598:	bf0c      	ite	eq
 802259a:	f006 060f 	andeq.w	r6, r6, #15
 802259e:	1136      	asrne	r6, r6, #4
 80225a0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80225a4:	b2f6      	uxtb	r6, r6
 80225a6:	f110 0a01 	adds.w	sl, r0, #1
 80225aa:	d457      	bmi.n	802265c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80225ac:	45d0      	cmp	r8, sl
 80225ae:	dd55      	ble.n	802265c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80225b0:	f1bc 0f00 	cmp.w	ip, #0
 80225b4:	db52      	blt.n	802265c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80225b6:	45e1      	cmp	r9, ip
 80225b8:	dd50      	ble.n	802265c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80225ba:	2f00      	cmp	r7, #0
 80225bc:	f000 80ac 	beq.w	8022718 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 80225c0:	f10e 0b01 	add.w	fp, lr, #1
 80225c4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80225c8:	f01b 0f01 	tst.w	fp, #1
 80225cc:	5d14      	ldrb	r4, [r2, r4]
 80225ce:	bf0c      	ite	eq
 80225d0:	f004 040f 	andeq.w	r4, r4, #15
 80225d4:	1124      	asrne	r4, r4, #4
 80225d6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80225da:	b2e4      	uxtb	r4, r4
 80225dc:	2d00      	cmp	r5, #0
 80225de:	f000 8096 	beq.w	802270e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 80225e2:	2800      	cmp	r0, #0
 80225e4:	f10c 0c01 	add.w	ip, ip, #1
 80225e8:	db3c      	blt.n	8022664 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80225ea:	4580      	cmp	r8, r0
 80225ec:	dd3a      	ble.n	8022664 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80225ee:	f1bc 0f00 	cmp.w	ip, #0
 80225f2:	db37      	blt.n	8022664 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80225f4:	45e1      	cmp	r9, ip
 80225f6:	dd35      	ble.n	8022664 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80225f8:	eb03 0b0e 	add.w	fp, r3, lr
 80225fc:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8022600:	f01b 0f01 	tst.w	fp, #1
 8022604:	5c10      	ldrb	r0, [r2, r0]
 8022606:	bf0c      	ite	eq
 8022608:	f000 000f 	andeq.w	r0, r0, #15
 802260c:	1100      	asrne	r0, r0, #4
 802260e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022612:	b2c0      	uxtb	r0, r0
 8022614:	f1ba 0f00 	cmp.w	sl, #0
 8022618:	db26      	blt.n	8022668 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802261a:	45d0      	cmp	r8, sl
 802261c:	dd24      	ble.n	8022668 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802261e:	f1bc 0f00 	cmp.w	ip, #0
 8022622:	db21      	blt.n	8022668 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022624:	45e1      	cmp	r9, ip
 8022626:	dd1f      	ble.n	8022668 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022628:	b307      	cbz	r7, 802266c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 802262a:	3301      	adds	r3, #1
 802262c:	449e      	add	lr, r3
 802262e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022632:	f01e 0f01 	tst.w	lr, #1
 8022636:	5cd3      	ldrb	r3, [r2, r3]
 8022638:	bf0c      	ite	eq
 802263a:	f003 030f 	andeq.w	r3, r3, #15
 802263e:	111b      	asrne	r3, r3, #4
 8022640:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022644:	b2db      	uxtb	r3, r3
 8022646:	2f0f      	cmp	r7, #15
 8022648:	d911      	bls.n	802266e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 802264a:	4b35      	ldr	r3, [pc, #212]	; (8022720 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 802264c:	f240 1157 	movw	r1, #343	; 0x157
 8022650:	4a34      	ldr	r2, [pc, #208]	; (8022724 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8022652:	4835      	ldr	r0, [pc, #212]	; (8022728 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8022654:	f002 fbd6 	bl	8024e04 <__assert_func>
 8022658:	2600      	movs	r6, #0
 802265a:	e7a4      	b.n	80225a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 802265c:	2400      	movs	r4, #0
 802265e:	e7bd      	b.n	80225dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8022660:	463c      	mov	r4, r7
 8022662:	e7be      	b.n	80225e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8022664:	2000      	movs	r0, #0
 8022666:	e7d5      	b.n	8022614 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8022668:	2300      	movs	r3, #0
 802266a:	e7ec      	b.n	8022646 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 802266c:	463b      	mov	r3, r7
 802266e:	2d0f      	cmp	r5, #15
 8022670:	d8eb      	bhi.n	802264a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8022672:	b2bf      	uxth	r7, r7
 8022674:	b2ad      	uxth	r5, r5
 8022676:	fb07 f205 	mul.w	r2, r7, r5
 802267a:	013f      	lsls	r7, r7, #4
 802267c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022680:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8022684:	1abf      	subs	r7, r7, r2
 8022686:	b2ad      	uxth	r5, r5
 8022688:	b2bf      	uxth	r7, r7
 802268a:	ebac 0c05 	sub.w	ip, ip, r5
 802268e:	437c      	muls	r4, r7
 8022690:	fa1f fc8c 	uxth.w	ip, ip
 8022694:	fb06 440c 	mla	r4, r6, ip, r4
 8022698:	fb05 4400 	mla	r4, r5, r0, r4
 802269c:	fb02 4203 	mla	r2, r2, r3, r4
 80226a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80226a4:	b38a      	cbz	r2, 802270a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 80226a6:	4b21      	ldr	r3, [pc, #132]	; (802272c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 80226a8:	681c      	ldr	r4, [r3, #0]
 80226aa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80226ae:	b2e5      	uxtb	r5, r4
 80226b0:	4353      	muls	r3, r2
 80226b2:	1c5a      	adds	r2, r3, #1
 80226b4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80226b8:	1212      	asrs	r2, r2, #8
 80226ba:	b290      	uxth	r0, r2
 80226bc:	43d2      	mvns	r2, r2
 80226be:	fb15 f500 	smulbb	r5, r5, r0
 80226c2:	b2d3      	uxtb	r3, r2
 80226c4:	780a      	ldrb	r2, [r1, #0]
 80226c6:	fb02 5203 	mla	r2, r2, r3, r5
 80226ca:	b292      	uxth	r2, r2
 80226cc:	1c55      	adds	r5, r2, #1
 80226ce:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80226d2:	784d      	ldrb	r5, [r1, #1]
 80226d4:	fb15 f503 	smulbb	r5, r5, r3
 80226d8:	1212      	asrs	r2, r2, #8
 80226da:	700a      	strb	r2, [r1, #0]
 80226dc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80226e0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80226e4:	fb02 5200 	mla	r2, r2, r0, r5
 80226e8:	b292      	uxth	r2, r2
 80226ea:	1c55      	adds	r5, r2, #1
 80226ec:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80226f0:	1212      	asrs	r2, r2, #8
 80226f2:	704a      	strb	r2, [r1, #1]
 80226f4:	788a      	ldrb	r2, [r1, #2]
 80226f6:	fb12 f303 	smulbb	r3, r2, r3
 80226fa:	fb04 3300 	mla	r3, r4, r0, r3
 80226fe:	b29b      	uxth	r3, r3
 8022700:	1c5a      	adds	r2, r3, #1
 8022702:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022706:	121b      	asrs	r3, r3, #8
 8022708:	708b      	strb	r3, [r1, #2]
 802270a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802270e:	2f0f      	cmp	r7, #15
 8022710:	d89b      	bhi.n	802264a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8022712:	462b      	mov	r3, r5
 8022714:	4628      	mov	r0, r5
 8022716:	e7ac      	b.n	8022672 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8022718:	2d00      	cmp	r5, #0
 802271a:	d1a1      	bne.n	8022660 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 802271c:	462c      	mov	r4, r5
 802271e:	e7f8      	b.n	8022712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8022720:	0802ce1f 	.word	0x0802ce1f
 8022724:	0802d387 	.word	0x0802d387
 8022728:	0802cee8 	.word	0x0802cee8
 802272c:	20056708 	.word	0x20056708

08022730 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022734:	ed2d 8b08 	vpush	{d8-d11}
 8022738:	b097      	sub	sp, #92	; 0x5c
 802273a:	eeb0 aa40 	vmov.f32	s20, s0
 802273e:	eef0 9a60 	vmov.f32	s19, s1
 8022742:	9214      	str	r2, [sp, #80]	; 0x50
 8022744:	eeb0 9a41 	vmov.f32	s18, s2
 8022748:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802274a:	eeb0 8a62 	vmov.f32	s16, s5
 802274e:	9309      	str	r3, [sp, #36]	; 0x24
 8022750:	eef0 8a43 	vmov.f32	s17, s6
 8022754:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8022758:	eef0 ba44 	vmov.f32	s23, s8
 802275c:	9015      	str	r0, [sp, #84]	; 0x54
 802275e:	eeb0 ba64 	vmov.f32	s22, s9
 8022762:	6850      	ldr	r0, [r2, #4]
 8022764:	eef0 aa45 	vmov.f32	s21, s10
 8022768:	910c      	str	r1, [sp, #48]	; 0x30
 802276a:	930e      	str	r3, [sp, #56]	; 0x38
 802276c:	6812      	ldr	r2, [r2, #0]
 802276e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8022772:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8022776:	fb00 1303 	mla	r3, r0, r3, r1
 802277a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802277e:	eb02 0a03 	add.w	sl, r2, r3
 8022782:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022784:	689b      	ldr	r3, [r3, #8]
 8022786:	3301      	adds	r3, #1
 8022788:	f023 0301 	bic.w	r3, r3, #1
 802278c:	930f      	str	r3, [sp, #60]	; 0x3c
 802278e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022790:	681f      	ldr	r7, [r3, #0]
 8022792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022794:	2b00      	cmp	r3, #0
 8022796:	dc03      	bgt.n	80227a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022798:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802279a:	2b00      	cmp	r3, #0
 802279c:	f340 8247 	ble.w	8022c2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 80227a0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80227a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80227a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80227aa:	1e48      	subs	r0, r1, #1
 80227ac:	f102 3cff 	add.w	ip, r2, #4294967295
 80227b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227b2:	2b00      	cmp	r3, #0
 80227b4:	f340 80e5 	ble.w	8022982 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80227b8:	ea5f 4e25 	movs.w	lr, r5, asr #16
 80227bc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80227c0:	d406      	bmi.n	80227d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80227c2:	4586      	cmp	lr, r0
 80227c4:	da04      	bge.n	80227d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80227c6:	2b00      	cmp	r3, #0
 80227c8:	db02      	blt.n	80227d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80227ca:	4563      	cmp	r3, ip
 80227cc:	f2c0 80da 	blt.w	8022984 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80227d0:	f11e 0e01 	adds.w	lr, lr, #1
 80227d4:	f100 80cb 	bmi.w	802296e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80227d8:	4571      	cmp	r1, lr
 80227da:	f2c0 80c8 	blt.w	802296e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80227de:	3301      	adds	r3, #1
 80227e0:	f100 80c5 	bmi.w	802296e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80227e4:	429a      	cmp	r2, r3
 80227e6:	f2c0 80c2 	blt.w	802296e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80227ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227ec:	46d0      	mov	r8, sl
 80227ee:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80227f2:	930d      	str	r3, [sp, #52]	; 0x34
 80227f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80227f6:	2b00      	cmp	r3, #0
 80227f8:	f340 80e3 	ble.w	80229c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80227fc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80227fe:	1430      	asrs	r0, r6, #16
 8022800:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022804:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022808:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802280c:	142b      	asrs	r3, r5, #16
 802280e:	f100 812e 	bmi.w	8022a6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022812:	f10c 3bff 	add.w	fp, ip, #4294967295
 8022816:	455b      	cmp	r3, fp
 8022818:	f280 8129 	bge.w	8022a6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802281c:	2800      	cmp	r0, #0
 802281e:	f2c0 8126 	blt.w	8022a6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022822:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022826:	4558      	cmp	r0, fp
 8022828:	f280 8121 	bge.w	8022a6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802282c:	fb00 3309 	mla	r3, r0, r9, r3
 8022830:	0858      	lsrs	r0, r3, #1
 8022832:	07dc      	lsls	r4, r3, #31
 8022834:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022838:	bf54      	ite	pl
 802283a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802283e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022842:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022846:	fa5f fc8c 	uxtb.w	ip, ip
 802284a:	2a00      	cmp	r2, #0
 802284c:	f000 80fe 	beq.w	8022a4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8022850:	1c58      	adds	r0, r3, #1
 8022852:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022856:	07c0      	lsls	r0, r0, #31
 8022858:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802285c:	bf54      	ite	pl
 802285e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022862:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022866:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802286a:	fa5f f08e 	uxtb.w	r0, lr
 802286e:	9010      	str	r0, [sp, #64]	; 0x40
 8022870:	b1d9      	cbz	r1, 80228aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8022872:	444b      	add	r3, r9
 8022874:	0858      	lsrs	r0, r3, #1
 8022876:	07dc      	lsls	r4, r3, #31
 8022878:	f103 0301 	add.w	r3, r3, #1
 802287c:	5c38      	ldrb	r0, [r7, r0]
 802287e:	bf54      	ite	pl
 8022880:	f000 000f 	andpl.w	r0, r0, #15
 8022884:	1100      	asrmi	r0, r0, #4
 8022886:	07dc      	lsls	r4, r3, #31
 8022888:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802288c:	b2c0      	uxtb	r0, r0
 802288e:	900a      	str	r0, [sp, #40]	; 0x28
 8022890:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8022894:	f817 e000 	ldrb.w	lr, [r7, r0]
 8022898:	bf54      	ite	pl
 802289a:	f00e 030f 	andpl.w	r3, lr, #15
 802289e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80228a2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80228a6:	b2db      	uxtb	r3, r3
 80228a8:	9311      	str	r3, [sp, #68]	; 0x44
 80228aa:	b292      	uxth	r2, r2
 80228ac:	b289      	uxth	r1, r1
 80228ae:	0113      	lsls	r3, r2, #4
 80228b0:	fb02 f001 	mul.w	r0, r2, r1
 80228b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80228b6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80228ba:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 80228be:	1a1b      	subs	r3, r3, r0
 80228c0:	b289      	uxth	r1, r1
 80228c2:	b29b      	uxth	r3, r3
 80228c4:	ebae 0e01 	sub.w	lr, lr, r1
 80228c8:	4353      	muls	r3, r2
 80228ca:	fa1f fe8e 	uxth.w	lr, lr
 80228ce:	fb0c 320e 	mla	r2, ip, lr, r3
 80228d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80228d4:	fb01 2203 	mla	r2, r1, r3, r2
 80228d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80228da:	fb00 2203 	mla	r2, r0, r3, r2
 80228de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80228e2:	2a00      	cmp	r2, #0
 80228e4:	d039      	beq.n	802295a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80228e6:	4bc7      	ldr	r3, [pc, #796]	; (8022c04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 80228e8:	6819      	ldr	r1, [r3, #0]
 80228ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80228ec:	fa5f fc81 	uxtb.w	ip, r1
 80228f0:	435a      	muls	r2, r3
 80228f2:	1c53      	adds	r3, r2, #1
 80228f4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80228f8:	1212      	asrs	r2, r2, #8
 80228fa:	b290      	uxth	r0, r2
 80228fc:	43d2      	mvns	r2, r2
 80228fe:	fb1c fc00 	smulbb	ip, ip, r0
 8022902:	b2d3      	uxtb	r3, r2
 8022904:	f898 2000 	ldrb.w	r2, [r8]
 8022908:	fb02 c203 	mla	r2, r2, r3, ip
 802290c:	b292      	uxth	r2, r2
 802290e:	f102 0c01 	add.w	ip, r2, #1
 8022912:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022916:	f898 c001 	ldrb.w	ip, [r8, #1]
 802291a:	fb1c fc03 	smulbb	ip, ip, r3
 802291e:	1212      	asrs	r2, r2, #8
 8022920:	f888 2000 	strb.w	r2, [r8]
 8022924:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8022928:	f3c1 4107 	ubfx	r1, r1, #16, #8
 802292c:	fb02 c200 	mla	r2, r2, r0, ip
 8022930:	b292      	uxth	r2, r2
 8022932:	f102 0c01 	add.w	ip, r2, #1
 8022936:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802293a:	1212      	asrs	r2, r2, #8
 802293c:	f888 2001 	strb.w	r2, [r8, #1]
 8022940:	f898 2002 	ldrb.w	r2, [r8, #2]
 8022944:	fb12 f303 	smulbb	r3, r2, r3
 8022948:	fb01 3300 	mla	r3, r1, r0, r3
 802294c:	b29b      	uxth	r3, r3
 802294e:	1c5a      	adds	r2, r3, #1
 8022950:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022954:	121b      	asrs	r3, r3, #8
 8022956:	f888 3002 	strb.w	r3, [r8, #2]
 802295a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802295c:	f108 0803 	add.w	r8, r8, #3
 8022960:	441d      	add	r5, r3
 8022962:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022964:	441e      	add	r6, r3
 8022966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022968:	3b01      	subs	r3, #1
 802296a:	930d      	str	r3, [sp, #52]	; 0x34
 802296c:	e742      	b.n	80227f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 802296e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022970:	f10a 0a03 	add.w	sl, sl, #3
 8022974:	441d      	add	r5, r3
 8022976:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022978:	441e      	add	r6, r3
 802297a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802297c:	3b01      	subs	r3, #1
 802297e:	9309      	str	r3, [sp, #36]	; 0x24
 8022980:	e716      	b.n	80227b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8022982:	d024      	beq.n	80229ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8022984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022986:	982b      	ldr	r0, [sp, #172]	; 0xac
 8022988:	3b01      	subs	r3, #1
 802298a:	fb00 5003 	mla	r0, r0, r3, r5
 802298e:	1400      	asrs	r0, r0, #16
 8022990:	f53f af2b 	bmi.w	80227ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8022994:	3901      	subs	r1, #1
 8022996:	4288      	cmp	r0, r1
 8022998:	f6bf af27 	bge.w	80227ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802299c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802299e:	fb01 6303 	mla	r3, r1, r3, r6
 80229a2:	141b      	asrs	r3, r3, #16
 80229a4:	f53f af21 	bmi.w	80227ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80229a8:	3a01      	subs	r2, #1
 80229aa:	4293      	cmp	r3, r2
 80229ac:	f6bf af1d 	bge.w	80227ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80229b0:	f10a 0e03 	add.w	lr, sl, #3
 80229b4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80229b8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80229bc:	f1b8 0f00 	cmp.w	r8, #0
 80229c0:	dc76      	bgt.n	8022ab0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80229c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229c4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80229c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80229cc:	44a2      	add	sl, r4
 80229ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80229d0:	2b00      	cmp	r3, #0
 80229d2:	f340 812c 	ble.w	8022c2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 80229d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80229da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80229dc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80229e0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80229e4:	eef0 6a48 	vmov.f32	s13, s16
 80229e8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80229ec:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80229f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229f4:	ee16 5a90 	vmov	r5, s13
 80229f8:	eef0 6a68 	vmov.f32	s13, s17
 80229fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a00:	ee16 6a90 	vmov	r6, s13
 8022a04:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022a08:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022a0c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022a10:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022a14:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022a18:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022a1c:	ee18 2a10 	vmov	r2, s16
 8022a20:	eeb0 8a47 	vmov.f32	s16, s14
 8022a24:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a28:	ee18 2a90 	vmov	r2, s17
 8022a2c:	932b      	str	r3, [sp, #172]	; 0xac
 8022a2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022a30:	eef0 8a67 	vmov.f32	s17, s15
 8022a34:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a38:	932c      	str	r3, [sp, #176]	; 0xb0
 8022a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022a3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022a3e:	3b01      	subs	r3, #1
 8022a40:	930c      	str	r3, [sp, #48]	; 0x30
 8022a42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022a44:	bf08      	it	eq
 8022a46:	4613      	moveq	r3, r2
 8022a48:	9309      	str	r3, [sp, #36]	; 0x24
 8022a4a:	e6a2      	b.n	8022792 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022a4c:	2900      	cmp	r1, #0
 8022a4e:	f43f af2c 	beq.w	80228aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8022a52:	eb09 0003 	add.w	r0, r9, r3
 8022a56:	0843      	lsrs	r3, r0, #1
 8022a58:	07c0      	lsls	r0, r0, #31
 8022a5a:	5cfb      	ldrb	r3, [r7, r3]
 8022a5c:	bf54      	ite	pl
 8022a5e:	f003 030f 	andpl.w	r3, r3, #15
 8022a62:	111b      	asrmi	r3, r3, #4
 8022a64:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022a68:	b2db      	uxtb	r3, r3
 8022a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8022a6c:	e71d      	b.n	80228aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8022a6e:	f113 0b01 	adds.w	fp, r3, #1
 8022a72:	f53f af72 	bmi.w	802295a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022a76:	45dc      	cmp	ip, fp
 8022a78:	f6ff af6f 	blt.w	802295a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022a7c:	f110 0b01 	adds.w	fp, r0, #1
 8022a80:	f53f af6b 	bmi.w	802295a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022a84:	45de      	cmp	lr, fp
 8022a86:	f6ff af68 	blt.w	802295a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022a8a:	9302      	str	r3, [sp, #8]
 8022a8c:	fa0f f38e 	sxth.w	r3, lr
 8022a90:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022a92:	9301      	str	r3, [sp, #4]
 8022a94:	fa0f f38c 	sxth.w	r3, ip
 8022a98:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022a9c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022aa0:	9300      	str	r3, [sp, #0]
 8022aa2:	463a      	mov	r2, r7
 8022aa4:	464b      	mov	r3, r9
 8022aa6:	4641      	mov	r1, r8
 8022aa8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022aaa:	f7ff fd59 	bl	8022560 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8022aae:	e754      	b.n	802295a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022ab0:	142a      	asrs	r2, r5, #16
 8022ab2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022ab6:	1433      	asrs	r3, r6, #16
 8022ab8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022abc:	fb09 2303 	mla	r3, r9, r3, r2
 8022ac0:	085a      	lsrs	r2, r3, #1
 8022ac2:	07dc      	lsls	r4, r3, #31
 8022ac4:	5cba      	ldrb	r2, [r7, r2]
 8022ac6:	bf54      	ite	pl
 8022ac8:	f002 020f 	andpl.w	r2, r2, #15
 8022acc:	1112      	asrmi	r2, r2, #4
 8022ace:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022ad2:	b2d2      	uxtb	r2, r2
 8022ad4:	2900      	cmp	r1, #0
 8022ad6:	f000 8097 	beq.w	8022c08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8022ada:	f103 0b01 	add.w	fp, r3, #1
 8022ade:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8022ae2:	f01b 0f01 	tst.w	fp, #1
 8022ae6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022aea:	bf0c      	ite	eq
 8022aec:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022af0:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022af4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022af8:	fa5f f48c 	uxtb.w	r4, ip
 8022afc:	9412      	str	r4, [sp, #72]	; 0x48
 8022afe:	b300      	cbz	r0, 8022b42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8022b00:	444b      	add	r3, r9
 8022b02:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022b06:	07dc      	lsls	r4, r3, #31
 8022b08:	f103 0301 	add.w	r3, r3, #1
 8022b0c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022b10:	bf54      	ite	pl
 8022b12:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022b16:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022b1a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022b1e:	fa5f f48c 	uxtb.w	r4, ip
 8022b22:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022b26:	940b      	str	r4, [sp, #44]	; 0x2c
 8022b28:	07dc      	lsls	r4, r3, #31
 8022b2a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022b2e:	bf54      	ite	pl
 8022b30:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022b34:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022b38:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022b3c:	fa5f f38c 	uxtb.w	r3, ip
 8022b40:	9313      	str	r3, [sp, #76]	; 0x4c
 8022b42:	b289      	uxth	r1, r1
 8022b44:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022b46:	b280      	uxth	r0, r0
 8022b48:	fb01 f300 	mul.w	r3, r1, r0
 8022b4c:	0109      	lsls	r1, r1, #4
 8022b4e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8022b52:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8022b56:	1ac9      	subs	r1, r1, r3
 8022b58:	b280      	uxth	r0, r0
 8022b5a:	b289      	uxth	r1, r1
 8022b5c:	ebac 0c00 	sub.w	ip, ip, r0
 8022b60:	4361      	muls	r1, r4
 8022b62:	fa1f fc8c 	uxth.w	ip, ip
 8022b66:	fb02 120c 	mla	r2, r2, ip, r1
 8022b6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022b6c:	fb00 2001 	mla	r0, r0, r1, r2
 8022b70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022b72:	fb03 0302 	mla	r3, r3, r2, r0
 8022b76:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022b7a:	2b00      	cmp	r3, #0
 8022b7c:	d039      	beq.n	8022bf2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8022b7e:	4a21      	ldr	r2, [pc, #132]	; (8022c04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8022b80:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8022b84:	6810      	ldr	r0, [r2, #0]
 8022b86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022b88:	fa5f fc80 	uxtb.w	ip, r0
 8022b8c:	4353      	muls	r3, r2
 8022b8e:	1c5a      	adds	r2, r3, #1
 8022b90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022b94:	121b      	asrs	r3, r3, #8
 8022b96:	b29a      	uxth	r2, r3
 8022b98:	43db      	mvns	r3, r3
 8022b9a:	fb1c fc02 	smulbb	ip, ip, r2
 8022b9e:	b2db      	uxtb	r3, r3
 8022ba0:	fb01 c103 	mla	r1, r1, r3, ip
 8022ba4:	b289      	uxth	r1, r1
 8022ba6:	f101 0c01 	add.w	ip, r1, #1
 8022baa:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022bae:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8022bb2:	fb1c fc03 	smulbb	ip, ip, r3
 8022bb6:	1209      	asrs	r1, r1, #8
 8022bb8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8022bbc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8022bc0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8022bc4:	fb01 c102 	mla	r1, r1, r2, ip
 8022bc8:	b289      	uxth	r1, r1
 8022bca:	f101 0c01 	add.w	ip, r1, #1
 8022bce:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022bd2:	1209      	asrs	r1, r1, #8
 8022bd4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8022bd8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8022bdc:	fb11 f303 	smulbb	r3, r1, r3
 8022be0:	fb00 3002 	mla	r0, r0, r2, r3
 8022be4:	b280      	uxth	r0, r0
 8022be6:	1c42      	adds	r2, r0, #1
 8022be8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022bec:	1200      	asrs	r0, r0, #8
 8022bee:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8022bf2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022bf4:	f10e 0e03 	add.w	lr, lr, #3
 8022bf8:	f108 38ff 	add.w	r8, r8, #4294967295
 8022bfc:	441d      	add	r5, r3
 8022bfe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022c00:	441e      	add	r6, r3
 8022c02:	e6db      	b.n	80229bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8022c04:	20056708 	.word	0x20056708
 8022c08:	2800      	cmp	r0, #0
 8022c0a:	d09a      	beq.n	8022b42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8022c0c:	444b      	add	r3, r9
 8022c0e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022c12:	07db      	lsls	r3, r3, #31
 8022c14:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022c18:	bf54      	ite	pl
 8022c1a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022c1e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022c22:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022c26:	fa5f f38c 	uxtb.w	r3, ip
 8022c2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8022c2c:	e789      	b.n	8022b42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8022c2e:	b017      	add	sp, #92	; 0x5c
 8022c30:	ecbd 8b08 	vpop	{d8-d11}
 8022c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022c38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8022c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c3c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022c40:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022c44:	2800      	cmp	r0, #0
 8022c46:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8022c4a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022c4e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8022c52:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8022c56:	db6b      	blt.n	8022d30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022c58:	4580      	cmp	r8, r0
 8022c5a:	dd69      	ble.n	8022d30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022c5c:	f1bc 0f00 	cmp.w	ip, #0
 8022c60:	db66      	blt.n	8022d30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022c62:	45e1      	cmp	r9, ip
 8022c64:	dd64      	ble.n	8022d30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022c66:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022c6a:	f01e 0f01 	tst.w	lr, #1
 8022c6e:	5d16      	ldrb	r6, [r2, r4]
 8022c70:	bf0c      	ite	eq
 8022c72:	f006 060f 	andeq.w	r6, r6, #15
 8022c76:	1136      	asrne	r6, r6, #4
 8022c78:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022c7c:	b2f6      	uxtb	r6, r6
 8022c7e:	f110 0a01 	adds.w	sl, r0, #1
 8022c82:	d457      	bmi.n	8022d34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022c84:	45d0      	cmp	r8, sl
 8022c86:	dd55      	ble.n	8022d34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022c88:	f1bc 0f00 	cmp.w	ip, #0
 8022c8c:	db52      	blt.n	8022d34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022c8e:	45e1      	cmp	r9, ip
 8022c90:	dd50      	ble.n	8022d34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022c92:	2f00      	cmp	r7, #0
 8022c94:	f000 80a5 	beq.w	8022de2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8022c98:	f10e 0b01 	add.w	fp, lr, #1
 8022c9c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022ca0:	f01b 0f01 	tst.w	fp, #1
 8022ca4:	5d14      	ldrb	r4, [r2, r4]
 8022ca6:	bf0c      	ite	eq
 8022ca8:	f004 040f 	andeq.w	r4, r4, #15
 8022cac:	1124      	asrne	r4, r4, #4
 8022cae:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022cb2:	b2e4      	uxtb	r4, r4
 8022cb4:	2d00      	cmp	r5, #0
 8022cb6:	f000 808f 	beq.w	8022dd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8022cba:	2800      	cmp	r0, #0
 8022cbc:	f10c 0c01 	add.w	ip, ip, #1
 8022cc0:	db3c      	blt.n	8022d3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022cc2:	4580      	cmp	r8, r0
 8022cc4:	dd3a      	ble.n	8022d3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022cc6:	f1bc 0f00 	cmp.w	ip, #0
 8022cca:	db37      	blt.n	8022d3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022ccc:	45e1      	cmp	r9, ip
 8022cce:	dd35      	ble.n	8022d3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022cd0:	eb03 0b0e 	add.w	fp, r3, lr
 8022cd4:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8022cd8:	f01b 0f01 	tst.w	fp, #1
 8022cdc:	5c10      	ldrb	r0, [r2, r0]
 8022cde:	bf0c      	ite	eq
 8022ce0:	f000 000f 	andeq.w	r0, r0, #15
 8022ce4:	1100      	asrne	r0, r0, #4
 8022ce6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022cea:	b2c0      	uxtb	r0, r0
 8022cec:	f1ba 0f00 	cmp.w	sl, #0
 8022cf0:	db26      	blt.n	8022d40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022cf2:	45d0      	cmp	r8, sl
 8022cf4:	dd24      	ble.n	8022d40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022cf6:	f1bc 0f00 	cmp.w	ip, #0
 8022cfa:	db21      	blt.n	8022d40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022cfc:	45e1      	cmp	r9, ip
 8022cfe:	dd1f      	ble.n	8022d40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022d00:	b307      	cbz	r7, 8022d44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8022d02:	3301      	adds	r3, #1
 8022d04:	449e      	add	lr, r3
 8022d06:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022d0a:	f01e 0f01 	tst.w	lr, #1
 8022d0e:	5cd3      	ldrb	r3, [r2, r3]
 8022d10:	bf0c      	ite	eq
 8022d12:	f003 030f 	andeq.w	r3, r3, #15
 8022d16:	111b      	asrne	r3, r3, #4
 8022d18:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022d1c:	b2db      	uxtb	r3, r3
 8022d1e:	2f0f      	cmp	r7, #15
 8022d20:	d911      	bls.n	8022d46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8022d22:	4b32      	ldr	r3, [pc, #200]	; (8022dec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8022d24:	f240 1157 	movw	r1, #343	; 0x157
 8022d28:	4a31      	ldr	r2, [pc, #196]	; (8022df0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8022d2a:	4832      	ldr	r0, [pc, #200]	; (8022df4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8022d2c:	f002 f86a 	bl	8024e04 <__assert_func>
 8022d30:	2600      	movs	r6, #0
 8022d32:	e7a4      	b.n	8022c7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8022d34:	2400      	movs	r4, #0
 8022d36:	e7bd      	b.n	8022cb4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8022d38:	463c      	mov	r4, r7
 8022d3a:	e7be      	b.n	8022cba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8022d3c:	2000      	movs	r0, #0
 8022d3e:	e7d5      	b.n	8022cec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8022d40:	2300      	movs	r3, #0
 8022d42:	e7ec      	b.n	8022d1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8022d44:	463b      	mov	r3, r7
 8022d46:	2d0f      	cmp	r5, #15
 8022d48:	d8eb      	bhi.n	8022d22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022d4a:	b2bf      	uxth	r7, r7
 8022d4c:	b2ad      	uxth	r5, r5
 8022d4e:	fb07 f205 	mul.w	r2, r7, r5
 8022d52:	013f      	lsls	r7, r7, #4
 8022d54:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022d58:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8022d5c:	1abf      	subs	r7, r7, r2
 8022d5e:	b2ad      	uxth	r5, r5
 8022d60:	b2bf      	uxth	r7, r7
 8022d62:	ebac 0c05 	sub.w	ip, ip, r5
 8022d66:	437c      	muls	r4, r7
 8022d68:	fa1f fc8c 	uxth.w	ip, ip
 8022d6c:	fb06 440c 	mla	r4, r6, ip, r4
 8022d70:	fb05 4400 	mla	r4, r5, r0, r4
 8022d74:	fb02 4303 	mla	r3, r2, r3, r4
 8022d78:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022d7c:	b353      	cbz	r3, 8022dd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8022d7e:	4a1e      	ldr	r2, [pc, #120]	; (8022df8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8022d80:	7808      	ldrb	r0, [r1, #0]
 8022d82:	6814      	ldr	r4, [r2, #0]
 8022d84:	b29a      	uxth	r2, r3
 8022d86:	43db      	mvns	r3, r3
 8022d88:	b2e5      	uxtb	r5, r4
 8022d8a:	b2db      	uxtb	r3, r3
 8022d8c:	fb15 f502 	smulbb	r5, r5, r2
 8022d90:	fb00 5003 	mla	r0, r0, r3, r5
 8022d94:	b280      	uxth	r0, r0
 8022d96:	1c45      	adds	r5, r0, #1
 8022d98:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022d9c:	784d      	ldrb	r5, [r1, #1]
 8022d9e:	fb15 f503 	smulbb	r5, r5, r3
 8022da2:	1200      	asrs	r0, r0, #8
 8022da4:	7008      	strb	r0, [r1, #0]
 8022da6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8022daa:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022dae:	fb00 5002 	mla	r0, r0, r2, r5
 8022db2:	b280      	uxth	r0, r0
 8022db4:	1c45      	adds	r5, r0, #1
 8022db6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022dba:	1200      	asrs	r0, r0, #8
 8022dbc:	7048      	strb	r0, [r1, #1]
 8022dbe:	7888      	ldrb	r0, [r1, #2]
 8022dc0:	fb10 f303 	smulbb	r3, r0, r3
 8022dc4:	fb04 3202 	mla	r2, r4, r2, r3
 8022dc8:	b292      	uxth	r2, r2
 8022dca:	1c53      	adds	r3, r2, #1
 8022dcc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022dd0:	1212      	asrs	r2, r2, #8
 8022dd2:	708a      	strb	r2, [r1, #2]
 8022dd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022dd8:	2f0f      	cmp	r7, #15
 8022dda:	d8a2      	bhi.n	8022d22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022ddc:	462b      	mov	r3, r5
 8022dde:	4628      	mov	r0, r5
 8022de0:	e7b3      	b.n	8022d4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8022de2:	2d00      	cmp	r5, #0
 8022de4:	d1a8      	bne.n	8022d38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8022de6:	462c      	mov	r4, r5
 8022de8:	e7f8      	b.n	8022ddc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8022dea:	bf00      	nop
 8022dec:	0802ce1f 	.word	0x0802ce1f
 8022df0:	0802d387 	.word	0x0802d387
 8022df4:	0802cee8 	.word	0x0802cee8
 8022df8:	20056708 	.word	0x20056708

08022dfc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e00:	ed2d 8b08 	vpush	{d8-d11}
 8022e04:	b093      	sub	sp, #76	; 0x4c
 8022e06:	461c      	mov	r4, r3
 8022e08:	eeb0 aa40 	vmov.f32	s20, s0
 8022e0c:	920c      	str	r2, [sp, #48]	; 0x30
 8022e0e:	eef0 9a60 	vmov.f32	s19, s1
 8022e12:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022e14:	eeb0 9a41 	vmov.f32	s18, s2
 8022e18:	9011      	str	r0, [sp, #68]	; 0x44
 8022e1a:	eeb0 8a62 	vmov.f32	s16, s5
 8022e1e:	6850      	ldr	r0, [r2, #4]
 8022e20:	eef0 8a43 	vmov.f32	s17, s6
 8022e24:	9107      	str	r1, [sp, #28]
 8022e26:	eef0 ba44 	vmov.f32	s23, s8
 8022e2a:	6812      	ldr	r2, [r2, #0]
 8022e2c:	eeb0 ba64 	vmov.f32	s22, s9
 8022e30:	eef0 aa45 	vmov.f32	s21, s10
 8022e34:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8022e38:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 8022e3c:	fb00 1303 	mla	r3, r0, r3, r1
 8022e40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022e44:	eb02 0b03 	add.w	fp, r2, r3
 8022e48:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022e4a:	689b      	ldr	r3, [r3, #8]
 8022e4c:	3301      	adds	r3, #1
 8022e4e:	f023 0301 	bic.w	r3, r3, #1
 8022e52:	9309      	str	r3, [sp, #36]	; 0x24
 8022e54:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022e56:	f8d3 8000 	ldr.w	r8, [r3]
 8022e5a:	9b07      	ldr	r3, [sp, #28]
 8022e5c:	2b00      	cmp	r3, #0
 8022e5e:	dc03      	bgt.n	8022e68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e62:	2b00      	cmp	r3, #0
 8022e64:	f340 822b 	ble.w	80232be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8022e68:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022e6a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022e6e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022e72:	1e48      	subs	r0, r1, #1
 8022e74:	1e57      	subs	r7, r2, #1
 8022e76:	2c00      	cmp	r4, #0
 8022e78:	f340 80d7 	ble.w	802302a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8022e7c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022e80:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022e84:	d406      	bmi.n	8022e94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8022e86:	4584      	cmp	ip, r0
 8022e88:	da04      	bge.n	8022e94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8022e8a:	2b00      	cmp	r3, #0
 8022e8c:	db02      	blt.n	8022e94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8022e8e:	42bb      	cmp	r3, r7
 8022e90:	f2c0 80cc 	blt.w	802302c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8022e94:	f11c 0c01 	adds.w	ip, ip, #1
 8022e98:	f100 80bf 	bmi.w	802301a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8022e9c:	4561      	cmp	r1, ip
 8022e9e:	f2c0 80bc 	blt.w	802301a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8022ea2:	3301      	adds	r3, #1
 8022ea4:	f100 80b9 	bmi.w	802301a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8022ea8:	429a      	cmp	r2, r3
 8022eaa:	f2c0 80b6 	blt.w	802301a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8022eae:	46a2      	mov	sl, r4
 8022eb0:	465f      	mov	r7, fp
 8022eb2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022eb6:	f1ba 0f00 	cmp.w	sl, #0
 8022eba:	f340 80d4 	ble.w	8023066 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8022ebe:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8022ec2:	1430      	asrs	r0, r6, #16
 8022ec4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022ec8:	9308      	str	r3, [sp, #32]
 8022eca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022ecc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022ed0:	142b      	asrs	r3, r5, #16
 8022ed2:	f100 8124 	bmi.w	802311e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022ed6:	f10c 32ff 	add.w	r2, ip, #4294967295
 8022eda:	4293      	cmp	r3, r2
 8022edc:	f280 811f 	bge.w	802311e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022ee0:	2800      	cmp	r0, #0
 8022ee2:	f2c0 811c 	blt.w	802311e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022ee6:	f10e 32ff 	add.w	r2, lr, #4294967295
 8022eea:	4290      	cmp	r0, r2
 8022eec:	f280 8117 	bge.w	802311e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022ef0:	fb00 3309 	mla	r3, r0, r9, r3
 8022ef4:	0858      	lsrs	r0, r3, #1
 8022ef6:	07da      	lsls	r2, r3, #31
 8022ef8:	9a08      	ldr	r2, [sp, #32]
 8022efa:	f818 c000 	ldrb.w	ip, [r8, r0]
 8022efe:	bf54      	ite	pl
 8022f00:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022f04:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022f08:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022f0c:	fa5f fc8c 	uxtb.w	ip, ip
 8022f10:	2a00      	cmp	r2, #0
 8022f12:	f000 80ed 	beq.w	80230f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022f16:	1c58      	adds	r0, r3, #1
 8022f18:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022f1c:	07c0      	lsls	r0, r0, #31
 8022f1e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8022f22:	bf54      	ite	pl
 8022f24:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022f28:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022f2c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022f30:	fa5f fe8e 	uxtb.w	lr, lr
 8022f34:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8022f38:	b1c9      	cbz	r1, 8022f6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8022f3a:	444b      	add	r3, r9
 8022f3c:	0858      	lsrs	r0, r3, #1
 8022f3e:	07da      	lsls	r2, r3, #31
 8022f40:	f818 0000 	ldrb.w	r0, [r8, r0]
 8022f44:	bf54      	ite	pl
 8022f46:	f000 000f 	andpl.w	r0, r0, #15
 8022f4a:	1100      	asrmi	r0, r0, #4
 8022f4c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022f50:	b2c0      	uxtb	r0, r0
 8022f52:	900a      	str	r0, [sp, #40]	; 0x28
 8022f54:	1c58      	adds	r0, r3, #1
 8022f56:	0843      	lsrs	r3, r0, #1
 8022f58:	07c2      	lsls	r2, r0, #31
 8022f5a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8022f5e:	bf54      	ite	pl
 8022f60:	f003 030f 	andpl.w	r3, r3, #15
 8022f64:	111b      	asrmi	r3, r3, #4
 8022f66:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022f6a:	b2db      	uxtb	r3, r3
 8022f6c:	930e      	str	r3, [sp, #56]	; 0x38
 8022f6e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022f72:	b289      	uxth	r1, r1
 8022f74:	fb02 f301 	mul.w	r3, r2, r1
 8022f78:	0112      	lsls	r2, r2, #4
 8022f7a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022f7e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8022f82:	1ad2      	subs	r2, r2, r3
 8022f84:	b289      	uxth	r1, r1
 8022f86:	b292      	uxth	r2, r2
 8022f88:	1a40      	subs	r0, r0, r1
 8022f8a:	fa1f fe80 	uxth.w	lr, r0
 8022f8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022f90:	4342      	muls	r2, r0
 8022f92:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8022f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022f98:	fb01 c102 	mla	r1, r1, r2, ip
 8022f9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022f9e:	fb03 1302 	mla	r3, r3, r2, r1
 8022fa2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022fa6:	b383      	cbz	r3, 802300a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8022fa8:	4ac7      	ldr	r2, [pc, #796]	; (80232c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 8022faa:	2bff      	cmp	r3, #255	; 0xff
 8022fac:	6812      	ldr	r2, [r2, #0]
 8022fae:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8022fb2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8022fb6:	b2d2      	uxtb	r2, r2
 8022fb8:	f000 80ac 	beq.w	8023114 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8022fbc:	b299      	uxth	r1, r3
 8022fbe:	43db      	mvns	r3, r3
 8022fc0:	f897 c000 	ldrb.w	ip, [r7]
 8022fc4:	fb12 f201 	smulbb	r2, r2, r1
 8022fc8:	b2db      	uxtb	r3, r3
 8022fca:	fb10 f001 	smulbb	r0, r0, r1
 8022fce:	fb0c 2203 	mla	r2, ip, r3, r2
 8022fd2:	fb1e f101 	smulbb	r1, lr, r1
 8022fd6:	b292      	uxth	r2, r2
 8022fd8:	f102 0c01 	add.w	ip, r2, #1
 8022fdc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022fe0:	1212      	asrs	r2, r2, #8
 8022fe2:	703a      	strb	r2, [r7, #0]
 8022fe4:	787a      	ldrb	r2, [r7, #1]
 8022fe6:	fb02 0003 	mla	r0, r2, r3, r0
 8022fea:	b280      	uxth	r0, r0
 8022fec:	1c42      	adds	r2, r0, #1
 8022fee:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022ff2:	78ba      	ldrb	r2, [r7, #2]
 8022ff4:	fb02 1303 	mla	r3, r2, r3, r1
 8022ff8:	1200      	asrs	r0, r0, #8
 8022ffa:	b29b      	uxth	r3, r3
 8022ffc:	7078      	strb	r0, [r7, #1]
 8022ffe:	f103 0e01 	add.w	lr, r3, #1
 8023002:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8023006:	121b      	asrs	r3, r3, #8
 8023008:	70bb      	strb	r3, [r7, #2]
 802300a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802300c:	3703      	adds	r7, #3
 802300e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023012:	441d      	add	r5, r3
 8023014:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023016:	441e      	add	r6, r3
 8023018:	e74d      	b.n	8022eb6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802301a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802301c:	3c01      	subs	r4, #1
 802301e:	f10b 0b03 	add.w	fp, fp, #3
 8023022:	441d      	add	r5, r3
 8023024:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023026:	441e      	add	r6, r3
 8023028:	e725      	b.n	8022e76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802302a:	d021      	beq.n	8023070 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802302c:	1e63      	subs	r3, r4, #1
 802302e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023030:	fb00 5003 	mla	r0, r0, r3, r5
 8023034:	1400      	asrs	r0, r0, #16
 8023036:	f53f af3a 	bmi.w	8022eae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802303a:	3901      	subs	r1, #1
 802303c:	4288      	cmp	r0, r1
 802303e:	f6bf af36 	bge.w	8022eae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023042:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023044:	fb01 6303 	mla	r3, r1, r3, r6
 8023048:	141b      	asrs	r3, r3, #16
 802304a:	f53f af30 	bmi.w	8022eae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802304e:	3a01      	subs	r2, #1
 8023050:	4293      	cmp	r3, r2
 8023052:	f6bf af2c 	bge.w	8022eae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023056:	f10b 0c03 	add.w	ip, fp, #3
 802305a:	46a6      	mov	lr, r4
 802305c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023060:	f1be 0f00 	cmp.w	lr, #0
 8023064:	dc79      	bgt.n	802315a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8023066:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802306a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802306e:	44a3      	add	fp, r4
 8023070:	9b07      	ldr	r3, [sp, #28]
 8023072:	2b00      	cmp	r3, #0
 8023074:	f340 8123 	ble.w	80232be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8023078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802307c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802307e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023082:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023086:	eef0 6a48 	vmov.f32	s13, s16
 802308a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802308e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023092:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023096:	ee16 5a90 	vmov	r5, s13
 802309a:	eef0 6a68 	vmov.f32	s13, s17
 802309e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80230a2:	ee16 6a90 	vmov	r6, s13
 80230a6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80230aa:	ee69 7a27 	vmul.f32	s15, s18, s15
 80230ae:	ee37 8a48 	vsub.f32	s16, s14, s16
 80230b2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80230b6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80230ba:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80230be:	ee18 2a10 	vmov	r2, s16
 80230c2:	eeb0 8a47 	vmov.f32	s16, s14
 80230c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80230ca:	ee18 2a90 	vmov	r2, s17
 80230ce:	9327      	str	r3, [sp, #156]	; 0x9c
 80230d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80230d2:	eef0 8a67 	vmov.f32	s17, s15
 80230d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80230da:	9328      	str	r3, [sp, #160]	; 0xa0
 80230dc:	9b07      	ldr	r3, [sp, #28]
 80230de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80230e0:	3b01      	subs	r3, #1
 80230e2:	9307      	str	r3, [sp, #28]
 80230e4:	bf08      	it	eq
 80230e6:	4614      	moveq	r4, r2
 80230e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80230ea:	bf18      	it	ne
 80230ec:	461c      	movne	r4, r3
 80230ee:	e6b4      	b.n	8022e5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80230f0:	2900      	cmp	r1, #0
 80230f2:	f43f af3c 	beq.w	8022f6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 80230f6:	eb09 0003 	add.w	r0, r9, r3
 80230fa:	0843      	lsrs	r3, r0, #1
 80230fc:	07c0      	lsls	r0, r0, #31
 80230fe:	f818 3003 	ldrb.w	r3, [r8, r3]
 8023102:	bf54      	ite	pl
 8023104:	f003 030f 	andpl.w	r3, r3, #15
 8023108:	111b      	asrmi	r3, r3, #4
 802310a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802310e:	b2db      	uxtb	r3, r3
 8023110:	930a      	str	r3, [sp, #40]	; 0x28
 8023112:	e72c      	b.n	8022f6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8023114:	703a      	strb	r2, [r7, #0]
 8023116:	7078      	strb	r0, [r7, #1]
 8023118:	f887 e002 	strb.w	lr, [r7, #2]
 802311c:	e775      	b.n	802300a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802311e:	1c5a      	adds	r2, r3, #1
 8023120:	f53f af73 	bmi.w	802300a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023124:	4594      	cmp	ip, r2
 8023126:	f6ff af70 	blt.w	802300a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802312a:	1c42      	adds	r2, r0, #1
 802312c:	f53f af6d 	bmi.w	802300a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023130:	4596      	cmp	lr, r2
 8023132:	f6ff af6a 	blt.w	802300a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023136:	9302      	str	r3, [sp, #8]
 8023138:	fa0f f38e 	sxth.w	r3, lr
 802313c:	9a08      	ldr	r2, [sp, #32]
 802313e:	9301      	str	r3, [sp, #4]
 8023140:	fa0f f38c 	sxth.w	r3, ip
 8023144:	9105      	str	r1, [sp, #20]
 8023146:	4639      	mov	r1, r7
 8023148:	9300      	str	r3, [sp, #0]
 802314a:	464b      	mov	r3, r9
 802314c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8023150:	4642      	mov	r2, r8
 8023152:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023154:	f7ff fd70 	bl	8022c38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023158:	e757      	b.n	802300a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802315a:	142a      	asrs	r2, r5, #16
 802315c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023160:	1433      	asrs	r3, r6, #16
 8023162:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8023166:	fb09 2303 	mla	r3, r9, r3, r2
 802316a:	085a      	lsrs	r2, r3, #1
 802316c:	07d9      	lsls	r1, r3, #31
 802316e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8023172:	bf54      	ite	pl
 8023174:	f002 020f 	andpl.w	r2, r2, #15
 8023178:	1112      	asrmi	r2, r2, #4
 802317a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802317e:	b2d2      	uxtb	r2, r2
 8023180:	2800      	cmp	r0, #0
 8023182:	f000 8085 	beq.w	8023290 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8023186:	f103 0a01 	add.w	sl, r3, #1
 802318a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802318e:	f01a 0f01 	tst.w	sl, #1
 8023192:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023196:	bf0c      	ite	eq
 8023198:	f001 010f 	andeq.w	r1, r1, #15
 802319c:	1109      	asrne	r1, r1, #4
 802319e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80231a2:	b2c9      	uxtb	r1, r1
 80231a4:	910f      	str	r1, [sp, #60]	; 0x3c
 80231a6:	b1df      	cbz	r7, 80231e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80231a8:	444b      	add	r3, r9
 80231aa:	0859      	lsrs	r1, r3, #1
 80231ac:	f013 0f01 	tst.w	r3, #1
 80231b0:	f103 0301 	add.w	r3, r3, #1
 80231b4:	f818 1001 	ldrb.w	r1, [r8, r1]
 80231b8:	bf0c      	ite	eq
 80231ba:	f001 010f 	andeq.w	r1, r1, #15
 80231be:	1109      	asrne	r1, r1, #4
 80231c0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80231c4:	b2c9      	uxtb	r1, r1
 80231c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80231c8:	0859      	lsrs	r1, r3, #1
 80231ca:	07db      	lsls	r3, r3, #31
 80231cc:	f818 1001 	ldrb.w	r1, [r8, r1]
 80231d0:	bf54      	ite	pl
 80231d2:	f001 010f 	andpl.w	r1, r1, #15
 80231d6:	1109      	asrmi	r1, r1, #4
 80231d8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80231dc:	b2c9      	uxtb	r1, r1
 80231de:	9110      	str	r1, [sp, #64]	; 0x40
 80231e0:	b280      	uxth	r0, r0
 80231e2:	b2bf      	uxth	r7, r7
 80231e4:	fb00 f307 	mul.w	r3, r0, r7
 80231e8:	0100      	lsls	r0, r0, #4
 80231ea:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80231ee:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80231f2:	1ac0      	subs	r0, r0, r3
 80231f4:	b2bf      	uxth	r7, r7
 80231f6:	b280      	uxth	r0, r0
 80231f8:	1bc9      	subs	r1, r1, r7
 80231fa:	fa1f fa81 	uxth.w	sl, r1
 80231fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023200:	4348      	muls	r0, r1
 8023202:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023204:	fb02 020a 	mla	r2, r2, sl, r0
 8023208:	fb07 2701 	mla	r7, r7, r1, r2
 802320c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802320e:	fb03 7302 	mla	r3, r3, r2, r7
 8023212:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023216:	b393      	cbz	r3, 802327e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8023218:	4a2b      	ldr	r2, [pc, #172]	; (80232c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 802321a:	2bff      	cmp	r3, #255	; 0xff
 802321c:	6811      	ldr	r1, [r2, #0]
 802321e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8023222:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8023226:	b2c9      	uxtb	r1, r1
 8023228:	d042      	beq.n	80232b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802322a:	b298      	uxth	r0, r3
 802322c:	43db      	mvns	r3, r3
 802322e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8023232:	fb11 f100 	smulbb	r1, r1, r0
 8023236:	b2db      	uxtb	r3, r3
 8023238:	fb17 f700 	smulbb	r7, r7, r0
 802323c:	fb02 1103 	mla	r1, r2, r3, r1
 8023240:	fb1a f000 	smulbb	r0, sl, r0
 8023244:	b289      	uxth	r1, r1
 8023246:	1c4a      	adds	r2, r1, #1
 8023248:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802324c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8023250:	fb02 7703 	mla	r7, r2, r3, r7
 8023254:	1209      	asrs	r1, r1, #8
 8023256:	b2bf      	uxth	r7, r7
 8023258:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802325c:	1c7a      	adds	r2, r7, #1
 802325e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8023262:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8023266:	fb02 0303 	mla	r3, r2, r3, r0
 802326a:	123f      	asrs	r7, r7, #8
 802326c:	b29b      	uxth	r3, r3
 802326e:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8023272:	1c5a      	adds	r2, r3, #1
 8023274:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023278:	121b      	asrs	r3, r3, #8
 802327a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 802327e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023280:	f10c 0c03 	add.w	ip, ip, #3
 8023284:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023288:	441d      	add	r5, r3
 802328a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802328c:	441e      	add	r6, r3
 802328e:	e6e7      	b.n	8023060 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8023290:	2f00      	cmp	r7, #0
 8023292:	d0a5      	beq.n	80231e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8023294:	444b      	add	r3, r9
 8023296:	0859      	lsrs	r1, r3, #1
 8023298:	07db      	lsls	r3, r3, #31
 802329a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802329e:	bf54      	ite	pl
 80232a0:	f001 010f 	andpl.w	r1, r1, #15
 80232a4:	1109      	asrmi	r1, r1, #4
 80232a6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80232aa:	b2c9      	uxtb	r1, r1
 80232ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80232ae:	e797      	b.n	80231e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80232b0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80232b4:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80232b8:	f80c ac01 	strb.w	sl, [ip, #-1]
 80232bc:	e7df      	b.n	802327e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80232be:	b013      	add	sp, #76	; 0x4c
 80232c0:	ecbd 8b08 	vpop	{d8-d11}
 80232c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232c8:	20056708 	.word	0x20056708

080232cc <CRC_Lock>:
 80232cc:	4a20      	ldr	r2, [pc, #128]	; (8023350 <CRC_Lock+0x84>)
 80232ce:	b530      	push	{r4, r5, lr}
 80232d0:	6813      	ldr	r3, [r2, #0]
 80232d2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80232d6:	f24c 2540 	movw	r5, #49728	; 0xc240
 80232da:	f023 0301 	bic.w	r3, r3, #1
 80232de:	6013      	str	r3, [r2, #0]
 80232e0:	4b1c      	ldr	r3, [pc, #112]	; (8023354 <CRC_Lock+0x88>)
 80232e2:	681a      	ldr	r2, [r3, #0]
 80232e4:	4022      	ands	r2, r4
 80232e6:	42aa      	cmp	r2, r5
 80232e8:	d005      	beq.n	80232f6 <CRC_Lock+0x2a>
 80232ea:	681b      	ldr	r3, [r3, #0]
 80232ec:	f24c 2270 	movw	r2, #49776	; 0xc270
 80232f0:	4023      	ands	r3, r4
 80232f2:	4293      	cmp	r3, r2
 80232f4:	d124      	bne.n	8023340 <CRC_Lock+0x74>
 80232f6:	4b18      	ldr	r3, [pc, #96]	; (8023358 <CRC_Lock+0x8c>)
 80232f8:	681b      	ldr	r3, [r3, #0]
 80232fa:	bb0b      	cbnz	r3, 8023340 <CRC_Lock+0x74>
 80232fc:	4b17      	ldr	r3, [pc, #92]	; (802335c <CRC_Lock+0x90>)
 80232fe:	681a      	ldr	r2, [r3, #0]
 8023300:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023304:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8023308:	d00d      	beq.n	8023326 <CRC_Lock+0x5a>
 802330a:	681a      	ldr	r2, [r3, #0]
 802330c:	f240 4483 	movw	r4, #1155	; 0x483
 8023310:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023314:	42a2      	cmp	r2, r4
 8023316:	d006      	beq.n	8023326 <CRC_Lock+0x5a>
 8023318:	681b      	ldr	r3, [r3, #0]
 802331a:	f240 4285 	movw	r2, #1157	; 0x485
 802331e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023322:	4293      	cmp	r3, r2
 8023324:	d10c      	bne.n	8023340 <CRC_Lock+0x74>
 8023326:	4b0e      	ldr	r3, [pc, #56]	; (8023360 <CRC_Lock+0x94>)
 8023328:	2201      	movs	r2, #1
 802332a:	601a      	str	r2, [r3, #0]
 802332c:	681a      	ldr	r2, [r3, #0]
 802332e:	2a00      	cmp	r2, #0
 8023330:	d1fc      	bne.n	802332c <CRC_Lock+0x60>
 8023332:	4b0c      	ldr	r3, [pc, #48]	; (8023364 <CRC_Lock+0x98>)
 8023334:	6018      	str	r0, [r3, #0]
 8023336:	6818      	ldr	r0, [r3, #0]
 8023338:	1a43      	subs	r3, r0, r1
 802333a:	4258      	negs	r0, r3
 802333c:	4158      	adcs	r0, r3
 802333e:	bd30      	pop	{r4, r5, pc}
 8023340:	4b09      	ldr	r3, [pc, #36]	; (8023368 <CRC_Lock+0x9c>)
 8023342:	2201      	movs	r2, #1
 8023344:	601a      	str	r2, [r3, #0]
 8023346:	681a      	ldr	r2, [r3, #0]
 8023348:	2a00      	cmp	r2, #0
 802334a:	d1fc      	bne.n	8023346 <CRC_Lock+0x7a>
 802334c:	4b07      	ldr	r3, [pc, #28]	; (802336c <CRC_Lock+0xa0>)
 802334e:	e7f1      	b.n	8023334 <CRC_Lock+0x68>
 8023350:	e0002000 	.word	0xe0002000
 8023354:	e000ed00 	.word	0xe000ed00
 8023358:	e0042000 	.word	0xe0042000
 802335c:	5c001000 	.word	0x5c001000
 8023360:	58024c08 	.word	0x58024c08
 8023364:	58024c00 	.word	0x58024c00
 8023368:	40023008 	.word	0x40023008
 802336c:	40023000 	.word	0x40023000

08023370 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023370:	6101      	str	r1, [r0, #16]
 8023372:	4770      	bx	lr

08023374 <_ZN8touchgfx8Gestures4tickEv>:
 8023374:	7b83      	ldrb	r3, [r0, #14]
 8023376:	b14b      	cbz	r3, 802338c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023378:	8903      	ldrh	r3, [r0, #8]
 802337a:	3301      	adds	r3, #1
 802337c:	b29b      	uxth	r3, r3
 802337e:	2b07      	cmp	r3, #7
 8023380:	8103      	strh	r3, [r0, #8]
 8023382:	bf81      	itttt	hi
 8023384:	2300      	movhi	r3, #0
 8023386:	8143      	strhhi	r3, [r0, #10]
 8023388:	8183      	strhhi	r3, [r0, #12]
 802338a:	7383      	strbhi	r3, [r0, #14]
 802338c:	4770      	bx	lr
	...

08023390 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023390:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023394:	4604      	mov	r4, r0
 8023396:	4698      	mov	r8, r3
 8023398:	8880      	ldrh	r0, [r0, #4]
 802339a:	4617      	mov	r7, r2
 802339c:	4b1d      	ldr	r3, [pc, #116]	; (8023414 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802339e:	460e      	mov	r6, r1
 80233a0:	f8ad 0006 	strh.w	r0, [sp, #6]
 80233a4:	eba8 0000 	sub.w	r0, r8, r0
 80233a8:	9300      	str	r3, [sp, #0]
 80233aa:	2300      	movs	r3, #0
 80233ac:	b280      	uxth	r0, r0
 80233ae:	8aa2      	ldrh	r2, [r4, #20]
 80233b0:	f88d 3004 	strb.w	r3, [sp, #4]
 80233b4:	b203      	sxth	r3, r0
 80233b6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80233ba:	88e1      	ldrh	r1, [r4, #6]
 80233bc:	2b00      	cmp	r3, #0
 80233be:	f8ad 800a 	strh.w	r8, [sp, #10]
 80233c2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80233c6:	bfb8      	it	lt
 80233c8:	4240      	neglt	r0, r0
 80233ca:	f8ad 500c 	strh.w	r5, [sp, #12]
 80233ce:	bfb8      	it	lt
 80233d0:	b203      	sxthlt	r3, r0
 80233d2:	4293      	cmp	r3, r2
 80233d4:	dc08      	bgt.n	80233e8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 80233d6:	1a69      	subs	r1, r5, r1
 80233d8:	b289      	uxth	r1, r1
 80233da:	b20b      	sxth	r3, r1
 80233dc:	2b00      	cmp	r3, #0
 80233de:	bfbc      	itt	lt
 80233e0:	4249      	neglt	r1, r1
 80233e2:	b20b      	sxthlt	r3, r1
 80233e4:	429a      	cmp	r2, r3
 80233e6:	da13      	bge.n	8023410 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 80233e8:	6920      	ldr	r0, [r4, #16]
 80233ea:	4669      	mov	r1, sp
 80233ec:	eba8 0606 	sub.w	r6, r8, r6
 80233f0:	1bef      	subs	r7, r5, r7
 80233f2:	6803      	ldr	r3, [r0, #0]
 80233f4:	685b      	ldr	r3, [r3, #4]
 80233f6:	4798      	blx	r3
 80233f8:	2300      	movs	r3, #0
 80233fa:	2001      	movs	r0, #1
 80233fc:	8166      	strh	r6, [r4, #10]
 80233fe:	8123      	strh	r3, [r4, #8]
 8023400:	81a7      	strh	r7, [r4, #12]
 8023402:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023406:	80e5      	strh	r5, [r4, #6]
 8023408:	73a0      	strb	r0, [r4, #14]
 802340a:	b004      	add	sp, #16
 802340c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023410:	2000      	movs	r0, #0
 8023412:	e7fa      	b.n	802340a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8023414:	0802c27c 	.word	0x0802c27c

08023418 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023418:	b5f0      	push	{r4, r5, r6, r7, lr}
 802341a:	461e      	mov	r6, r3
 802341c:	1e4b      	subs	r3, r1, #1
 802341e:	b085      	sub	sp, #20
 8023420:	4604      	mov	r4, r0
 8023422:	2b01      	cmp	r3, #1
 8023424:	460d      	mov	r5, r1
 8023426:	4617      	mov	r7, r2
 8023428:	d84b      	bhi.n	80234c2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802342a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802342e:	1cd3      	adds	r3, r2, #3
 8023430:	b29b      	uxth	r3, r3
 8023432:	2b06      	cmp	r3, #6
 8023434:	d916      	bls.n	8023464 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023436:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80234d8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802343a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802343e:	f8cd c004 	str.w	ip, [sp, #4]
 8023442:	f04f 0c00 	mov.w	ip, #0
 8023446:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802344a:	6900      	ldr	r0, [r0, #16]
 802344c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023450:	a901      	add	r1, sp, #4
 8023452:	f88d c008 	strb.w	ip, [sp, #8]
 8023456:	f8ad 200a 	strh.w	r2, [sp, #10]
 802345a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802345e:	6803      	ldr	r3, [r0, #0]
 8023460:	689b      	ldr	r3, [r3, #8]
 8023462:	4798      	blx	r3
 8023464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023468:	1cd3      	adds	r3, r2, #3
 802346a:	b29b      	uxth	r3, r3
 802346c:	2b06      	cmp	r3, #6
 802346e:	d916      	bls.n	802349e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023470:	f8df c064 	ldr.w	ip, [pc, #100]	; 80234d8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8023474:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023478:	f8cd c004 	str.w	ip, [sp, #4]
 802347c:	f04f 0c01 	mov.w	ip, #1
 8023480:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023484:	6920      	ldr	r0, [r4, #16]
 8023486:	f8ad 100c 	strh.w	r1, [sp, #12]
 802348a:	a901      	add	r1, sp, #4
 802348c:	f88d c008 	strb.w	ip, [sp, #8]
 8023490:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023494:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023498:	6803      	ldr	r3, [r0, #0]
 802349a:	689b      	ldr	r3, [r3, #8]
 802349c:	4798      	blx	r3
 802349e:	4b0d      	ldr	r3, [pc, #52]	; (80234d4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80234a0:	a901      	add	r1, sp, #4
 80234a2:	6920      	ldr	r0, [r4, #16]
 80234a4:	9301      	str	r3, [sp, #4]
 80234a6:	2300      	movs	r3, #0
 80234a8:	f88d 5008 	strb.w	r5, [sp, #8]
 80234ac:	f8ad 700a 	strh.w	r7, [sp, #10]
 80234b0:	f8ad 600c 	strh.w	r6, [sp, #12]
 80234b4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80234b8:	6803      	ldr	r3, [r0, #0]
 80234ba:	681b      	ldr	r3, [r3, #0]
 80234bc:	4798      	blx	r3
 80234be:	b005      	add	sp, #20
 80234c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80234c2:	2900      	cmp	r1, #0
 80234c4:	d1eb      	bne.n	802349e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80234c6:	80a2      	strh	r2, [r4, #4]
 80234c8:	80c6      	strh	r6, [r0, #6]
 80234ca:	60a1      	str	r1, [r4, #8]
 80234cc:	81a1      	strh	r1, [r4, #12]
 80234ce:	73a1      	strb	r1, [r4, #14]
 80234d0:	e7e5      	b.n	802349e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80234d2:	bf00      	nop
 80234d4:	0802c268 	.word	0x0802c268
 80234d8:	0802c290 	.word	0x0802c290

080234dc <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 80234dc:	10c9      	asrs	r1, r1, #3
 80234de:	2900      	cmp	r1, #0
 80234e0:	bfb8      	it	lt
 80234e2:	4249      	neglt	r1, r1
 80234e4:	2801      	cmp	r0, #1
 80234e6:	d108      	bne.n	80234fa <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 80234e8:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80234ec:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80234f0:	4601      	mov	r1, r0
 80234f2:	dd02      	ble.n	80234fa <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 80234f4:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80234f8:	4770      	bx	lr
 80234fa:	29ff      	cmp	r1, #255	; 0xff
 80234fc:	bfa8      	it	ge
 80234fe:	21ff      	movge	r1, #255	; 0xff
 8023500:	4608      	mov	r0, r1
 8023502:	4770      	bx	lr

08023504 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8023504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023508:	688c      	ldr	r4, [r1, #8]
 802350a:	b087      	sub	sp, #28
 802350c:	4607      	mov	r7, r0
 802350e:	2c00      	cmp	r4, #0
 8023510:	db2b      	blt.n	802356a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023512:	6803      	ldr	r3, [r0, #0]
 8023514:	691a      	ldr	r2, [r3, #16]
 8023516:	42a2      	cmp	r2, r4
 8023518:	dd27      	ble.n	802356a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802351a:	685a      	ldr	r2, [r3, #4]
 802351c:	695e      	ldr	r6, [r3, #20]
 802351e:	68cd      	ldr	r5, [r1, #12]
 8023520:	fb06 2604 	mla	r6, r6, r4, r2
 8023524:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8023528:	698a      	ldr	r2, [r1, #24]
 802352a:	f893 a008 	ldrb.w	sl, [r3, #8]
 802352e:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8023532:	9205      	str	r2, [sp, #20]
 8023534:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8023538:	9b05      	ldr	r3, [sp, #20]
 802353a:	6839      	ldr	r1, [r7, #0]
 802353c:	eb03 0c02 	add.w	ip, r3, r2
 8023540:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8023544:	68c9      	ldr	r1, [r1, #12]
 8023546:	1898      	adds	r0, r3, r2
 8023548:	4288      	cmp	r0, r1
 802354a:	db02      	blt.n	8023552 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 802354c:	1a8b      	subs	r3, r1, r2
 802354e:	2b00      	cmp	r3, #0
 8023550:	dd09      	ble.n	8023566 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8023552:	6878      	ldr	r0, [r7, #4]
 8023554:	6801      	ldr	r1, [r0, #0]
 8023556:	9400      	str	r4, [sp, #0]
 8023558:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 802355c:	4653      	mov	r3, sl
 802355e:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8023562:	4631      	mov	r1, r6
 8023564:	47d8      	blx	fp
 8023566:	3d01      	subs	r5, #1
 8023568:	d1e4      	bne.n	8023534 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802356a:	b007      	add	sp, #28
 802356c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023570 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8023570:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8023574:	b90b      	cbnz	r3, 802357a <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8023576:	f001 b991 	b.w	802489c <_ZN8touchgfx7Outline6lineToEii>
 802357a:	4770      	bx	lr

0802357c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802357c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023580:	4604      	mov	r4, r0
 8023582:	2600      	movs	r6, #0
 8023584:	4b8f      	ldr	r3, [pc, #572]	; (80237c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8023586:	f100 0518 	add.w	r5, r0, #24
 802358a:	f104 0730 	add.w	r7, r4, #48	; 0x30
 802358e:	b086      	sub	sp, #24
 8023590:	4690      	mov	r8, r2
 8023592:	e9c0 3100 	strd	r3, r1, [r0]
 8023596:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802359a:	e9c0 6604 	strd	r6, r6, [r0, #16]
 802359e:	4628      	mov	r0, r5
 80235a0:	f001 fba0 	bl	8024ce4 <_ZN8touchgfx15RenderingBufferC1Ev>
 80235a4:	4638      	mov	r0, r7
 80235a6:	f000 fb45 	bl	8023c34 <_ZN8touchgfx7OutlineC1Ev>
 80235aa:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80235ae:	f001 fb41 	bl	8024c34 <_ZN8touchgfx8ScanlineC1Ev>
 80235b2:	2301      	movs	r3, #1
 80235b4:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 80235b8:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 80235bc:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 80235c0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80235c4:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 80235c8:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 80235cc:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 80235d0:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 80235d4:	f7f2 ff36 	bl	8016444 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 80235d8:	b928      	cbnz	r0, 80235e6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 80235da:	4b7b      	ldr	r3, [pc, #492]	; (80237c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80235dc:	212d      	movs	r1, #45	; 0x2d
 80235de:	4a7b      	ldr	r2, [pc, #492]	; (80237cc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 80235e0:	487b      	ldr	r0, [pc, #492]	; (80237d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 80235e2:	f001 fc0f 	bl	8024e04 <__assert_func>
 80235e6:	f9b8 2000 	ldrsh.w	r2, [r8]
 80235ea:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80235ee:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80235f2:	4410      	add	r0, r2
 80235f4:	9602      	str	r6, [sp, #8]
 80235f6:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80235fa:	b280      	uxth	r0, r0
 80235fc:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8023600:	fa0f fa80 	sxth.w	sl, r0
 8023604:	f1ba 0f00 	cmp.w	sl, #0
 8023608:	dd70      	ble.n	80236ec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802360a:	4591      	cmp	r9, r2
 802360c:	dd6e      	ble.n	80236ec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802360e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8023612:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8023616:	440b      	add	r3, r1
 8023618:	b29b      	uxth	r3, r3
 802361a:	b21e      	sxth	r6, r3
 802361c:	2e00      	cmp	r6, #0
 802361e:	dd65      	ble.n	80236ec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8023620:	458e      	cmp	lr, r1
 8023622:	dd63      	ble.n	80236ec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8023624:	45d1      	cmp	r9, sl
 8023626:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802362a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802362e:	bfb8      	it	lt
 8023630:	fa1f f089 	uxthlt.w	r0, r9
 8023634:	45b6      	cmp	lr, r6
 8023636:	f8ad 2008 	strh.w	r2, [sp, #8]
 802363a:	bfb8      	it	lt
 802363c:	fa1f f38e 	uxthlt.w	r3, lr
 8023640:	1a80      	subs	r0, r0, r2
 8023642:	f8ad 100a 	strh.w	r1, [sp, #10]
 8023646:	1a5b      	subs	r3, r3, r1
 8023648:	f8ad 000c 	strh.w	r0, [sp, #12]
 802364c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023650:	f10d 0808 	add.w	r8, sp, #8
 8023654:	ae04      	add	r6, sp, #16
 8023656:	e898 0003 	ldmia.w	r8, {r0, r1}
 802365a:	e886 0003 	stmia.w	r6, {r0, r1}
 802365e:	f8dc 3000 	ldr.w	r3, [ip]
 8023662:	4660      	mov	r0, ip
 8023664:	4631      	mov	r1, r6
 8023666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023668:	4798      	blx	r3
 802366a:	6861      	ldr	r1, [r4, #4]
 802366c:	4640      	mov	r0, r8
 802366e:	3104      	adds	r1, #4
 8023670:	f7f4 fa02 	bl	8017a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023674:	4630      	mov	r0, r6
 8023676:	f7f4 fa17 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802367a:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802367e:	f7f2 fe71 	bl	8016364 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8023682:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 8023686:	4638      	mov	r0, r7
 8023688:	f000 fab0 	bl	8023bec <_ZN8touchgfx7Outline5resetEv>
 802368c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8023690:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8023694:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8023698:	015b      	lsls	r3, r3, #5
 802369a:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 802369e:	0152      	lsls	r2, r2, #5
 80236a0:	60e3      	str	r3, [r4, #12]
 80236a2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80236a6:	60a2      	str	r2, [r4, #8]
 80236a8:	015b      	lsls	r3, r3, #5
 80236aa:	6123      	str	r3, [r4, #16]
 80236ac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80236b0:	015b      	lsls	r3, r3, #5
 80236b2:	6163      	str	r3, [r4, #20]
 80236b4:	4b47      	ldr	r3, [pc, #284]	; (80237d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 80236b6:	6818      	ldr	r0, [r3, #0]
 80236b8:	6803      	ldr	r3, [r0, #0]
 80236ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80236bc:	4798      	blx	r3
 80236be:	4606      	mov	r6, r0
 80236c0:	f7e1 ff5a 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 80236c4:	6803      	ldr	r3, [r0, #0]
 80236c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80236c8:	4798      	blx	r3
 80236ca:	4607      	mov	r7, r0
 80236cc:	f7e1 ff54 	bl	8005578 <_ZN8touchgfx3HAL3lcdEv>
 80236d0:	6803      	ldr	r3, [r0, #0]
 80236d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80236d4:	4798      	blx	r3
 80236d6:	280d      	cmp	r0, #13
 80236d8:	d854      	bhi.n	8023784 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 80236da:	e8df f000 	tbb	[pc, r0]
 80236de:	554b      	.short	0x554b
 80236e0:	2b6e0a66 	.word	0x2b6e0a66
 80236e4:	5f5f5f3b 	.word	0x5f5f5f3b
 80236e8:	6e6e5f5f 	.word	0x6e6e5f5f
 80236ec:	2300      	movs	r3, #0
 80236ee:	9303      	str	r3, [sp, #12]
 80236f0:	e7ae      	b.n	8023650 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 80236f2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80236f6:	2108      	movs	r1, #8
 80236f8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80236fc:	fb92 f1f1 	sdiv	r1, r2, r1
 8023700:	fb07 1303 	mla	r3, r7, r3, r1
 8023704:	441e      	add	r6, r3
 8023706:	4253      	negs	r3, r2
 8023708:	f002 0207 	and.w	r2, r2, #7
 802370c:	f003 0307 	and.w	r3, r3, #7
 8023710:	bf58      	it	pl
 8023712:	425a      	negpl	r2, r3
 8023714:	b2d2      	uxtb	r2, r2
 8023716:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802371a:	4628      	mov	r0, r5
 802371c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8023720:	6721      	str	r1, [r4, #112]	; 0x70
 8023722:	e9cd 1700 	strd	r1, r7, [sp]
 8023726:	4631      	mov	r1, r6
 8023728:	f001 fae8 	bl	8024cfc <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802372c:	4620      	mov	r0, r4
 802372e:	b006      	add	sp, #24
 8023730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023734:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023738:	2104      	movs	r1, #4
 802373a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802373e:	fb92 f1f1 	sdiv	r1, r2, r1
 8023742:	fb07 1303 	mla	r3, r7, r3, r1
 8023746:	441e      	add	r6, r3
 8023748:	4253      	negs	r3, r2
 802374a:	f002 0203 	and.w	r2, r2, #3
 802374e:	f003 0303 	and.w	r3, r3, #3
 8023752:	e7dd      	b.n	8023710 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8023754:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023758:	2102      	movs	r1, #2
 802375a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802375e:	2a00      	cmp	r2, #0
 8023760:	fb92 f1f1 	sdiv	r1, r2, r1
 8023764:	f002 0201 	and.w	r2, r2, #1
 8023768:	fb07 1303 	mla	r3, r7, r3, r1
 802376c:	bfb8      	it	lt
 802376e:	4252      	neglt	r2, r2
 8023770:	441e      	add	r6, r3
 8023772:	e7cf      	b.n	8023714 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 8023774:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023778:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802377c:	437b      	muls	r3, r7
 802377e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8023782:	441e      	add	r6, r3
 8023784:	2200      	movs	r2, #0
 8023786:	e7c6      	b.n	8023716 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 8023788:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802378c:	2103      	movs	r1, #3
 802378e:	fb07 f203 	mul.w	r2, r7, r3
 8023792:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8023796:	fb13 2301 	smlabb	r3, r3, r1, r2
 802379a:	e7f2      	b.n	8023782 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 802379c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80237a0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80237a4:	fb07 2303 	mla	r3, r7, r3, r2
 80237a8:	e7eb      	b.n	8023782 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 80237aa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80237ae:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80237b2:	437b      	muls	r3, r7
 80237b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80237b8:	e7e3      	b.n	8023782 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 80237ba:	4b07      	ldr	r3, [pc, #28]	; (80237d8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 80237bc:	216c      	movs	r1, #108	; 0x6c
 80237be:	4a03      	ldr	r2, [pc, #12]	; (80237cc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 80237c0:	e70e      	b.n	80235e0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 80237c2:	bf00      	nop
 80237c4:	0802d6ac 	.word	0x0802d6ac
 80237c8:	0802d5f7 	.word	0x0802d5f7
 80237cc:	0802d6b4 	.word	0x0802d6b4
 80237d0:	0802d653 	.word	0x0802d653
 80237d4:	200566e0 	.word	0x200566e0
 80237d8:	0802d687 	.word	0x0802d687

080237dc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80237dc:	6812      	ldr	r2, [r2, #0]
 80237de:	2a00      	cmp	r2, #0
 80237e0:	db0b      	blt.n	80237fa <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80237e2:	9800      	ldr	r0, [sp, #0]
 80237e4:	6800      	ldr	r0, [r0, #0]
 80237e6:	4290      	cmp	r0, r2
 80237e8:	bfd4      	ite	le
 80237ea:	2002      	movle	r0, #2
 80237ec:	2000      	movgt	r0, #0
 80237ee:	680a      	ldr	r2, [r1, #0]
 80237f0:	2a00      	cmp	r2, #0
 80237f2:	da04      	bge.n	80237fe <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80237f4:	f040 0004 	orr.w	r0, r0, #4
 80237f8:	4770      	bx	lr
 80237fa:	2001      	movs	r0, #1
 80237fc:	e7f7      	b.n	80237ee <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80237fe:	681b      	ldr	r3, [r3, #0]
 8023800:	4293      	cmp	r3, r2
 8023802:	bfd8      	it	le
 8023804:	f040 0008 	orrle.w	r0, r0, #8
 8023808:	4770      	bx	lr
	...

0802380c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802380c:	4b07      	ldr	r3, [pc, #28]	; (802382c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802380e:	b510      	push	{r4, lr}
 8023810:	781b      	ldrb	r3, [r3, #0]
 8023812:	2b01      	cmp	r3, #1
 8023814:	d108      	bne.n	8023828 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8023816:	6843      	ldr	r3, [r0, #4]
 8023818:	6814      	ldr	r4, [r2, #0]
 802381a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802381e:	680b      	ldr	r3, [r1, #0]
 8023820:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8023824:	6013      	str	r3, [r2, #0]
 8023826:	600c      	str	r4, [r1, #0]
 8023828:	bd10      	pop	{r4, pc}
 802382a:	bf00      	nop
 802382c:	200566d8 	.word	0x200566d8

08023830 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8023830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023832:	b085      	sub	sp, #20
 8023834:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8023838:	4604      	mov	r4, r0
 802383a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802383e:	b33b      	cbz	r3, 8023890 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8023840:	aa02      	add	r2, sp, #8
 8023842:	a903      	add	r1, sp, #12
 8023844:	f7ff ffe2 	bl	802380c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8023848:	68a3      	ldr	r3, [r4, #8]
 802384a:	9e03      	ldr	r6, [sp, #12]
 802384c:	aa02      	add	r2, sp, #8
 802384e:	9f02      	ldr	r7, [sp, #8]
 8023850:	a903      	add	r1, sp, #12
 8023852:	1af6      	subs	r6, r6, r3
 8023854:	68e3      	ldr	r3, [r4, #12]
 8023856:	4620      	mov	r0, r4
 8023858:	1aff      	subs	r7, r7, r3
 802385a:	f104 0314 	add.w	r3, r4, #20
 802385e:	9603      	str	r6, [sp, #12]
 8023860:	9300      	str	r3, [sp, #0]
 8023862:	f104 0310 	add.w	r3, r4, #16
 8023866:	9702      	str	r7, [sp, #8]
 8023868:	f7ff ffb8 	bl	80237dc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802386c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8023870:	4605      	mov	r5, r0
 8023872:	b97b      	cbnz	r3, 8023894 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8023874:	463a      	mov	r2, r7
 8023876:	4631      	mov	r1, r6
 8023878:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802387c:	f7ff fe78 	bl	8023570 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023880:	9b03      	ldr	r3, [sp, #12]
 8023882:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8023886:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802388a:	9b02      	ldr	r3, [sp, #8]
 802388c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8023890:	b005      	add	sp, #20
 8023892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023894:	b110      	cbz	r0, 802389c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8023896:	ea13 0200 	ands.w	r2, r3, r0
 802389a:	d11c      	bne.n	80238d6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 802389c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 80238a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80238a4:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 80238a8:	b188      	cbz	r0, 80238ce <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 80238aa:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 80238ae:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80238b2:	b913      	cbnz	r3, 80238ba <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 80238b4:	4630      	mov	r0, r6
 80238b6:	f001 f821 	bl	80248fc <_ZN8touchgfx7Outline6moveToEii>
 80238ba:	2300      	movs	r3, #0
 80238bc:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80238c0:	2301      	movs	r3, #1
 80238c2:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80238c6:	4630      	mov	r0, r6
 80238c8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80238cc:	e7d6      	b.n	802387c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 80238ce:	4630      	mov	r0, r6
 80238d0:	f7ff fe4e 	bl	8023570 <_ZN8touchgfx10Rasterizer6lineToEii>
 80238d4:	e7f7      	b.n	80238c6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 80238d6:	4615      	mov	r5, r2
 80238d8:	e7d2      	b.n	8023880 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

080238da <_ZN8touchgfx6Canvas5closeEv>:
 80238da:	b538      	push	{r3, r4, r5, lr}
 80238dc:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 80238e0:	4604      	mov	r4, r0
 80238e2:	b993      	cbnz	r3, 802390a <_ZN8touchgfx6Canvas5closeEv+0x30>
 80238e4:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 80238e8:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 80238ec:	4213      	tst	r3, r2
 80238ee:	d10c      	bne.n	802390a <_ZN8touchgfx6Canvas5closeEv+0x30>
 80238f0:	f100 0530 	add.w	r5, r0, #48	; 0x30
 80238f4:	b123      	cbz	r3, 8023900 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80238f6:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 80238fa:	4628      	mov	r0, r5
 80238fc:	f7ff fe38 	bl	8023570 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023900:	4628      	mov	r0, r5
 8023902:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 8023906:	f7ff fe33 	bl	8023570 <_ZN8touchgfx10Rasterizer6lineToEii>
 802390a:	2300      	movs	r3, #0
 802390c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8023910:	bd38      	pop	{r3, r4, r5, pc}

08023912 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8023912:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023914:	b085      	sub	sp, #20
 8023916:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802391a:	4604      	mov	r4, r0
 802391c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8023920:	b353      	cbz	r3, 8023978 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8023922:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8023926:	b90b      	cbnz	r3, 802392c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8023928:	f7ff ffd7 	bl	80238da <_ZN8touchgfx6Canvas5closeEv>
 802392c:	aa02      	add	r2, sp, #8
 802392e:	a903      	add	r1, sp, #12
 8023930:	4620      	mov	r0, r4
 8023932:	f7ff ff6b 	bl	802380c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8023936:	68a3      	ldr	r3, [r4, #8]
 8023938:	9d03      	ldr	r5, [sp, #12]
 802393a:	aa02      	add	r2, sp, #8
 802393c:	9e02      	ldr	r6, [sp, #8]
 802393e:	a903      	add	r1, sp, #12
 8023940:	1aed      	subs	r5, r5, r3
 8023942:	68e3      	ldr	r3, [r4, #12]
 8023944:	4620      	mov	r0, r4
 8023946:	1af6      	subs	r6, r6, r3
 8023948:	f104 0314 	add.w	r3, r4, #20
 802394c:	9503      	str	r5, [sp, #12]
 802394e:	9300      	str	r3, [sp, #0]
 8023950:	f104 0310 	add.w	r3, r4, #16
 8023954:	9602      	str	r6, [sp, #8]
 8023956:	f7ff ff41 	bl	80237dc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802395a:	4607      	mov	r7, r0
 802395c:	b170      	cbz	r0, 802397c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802395e:	2301      	movs	r3, #1
 8023960:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8023964:	9a03      	ldr	r2, [sp, #12]
 8023966:	9b02      	ldr	r3, [sp, #8]
 8023968:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 802396c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8023970:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 8023974:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 8023978:	b005      	add	sp, #20
 802397a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802397c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8023980:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 8023984:	b92b      	cbnz	r3, 8023992 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8023986:	4632      	mov	r2, r6
 8023988:	4629      	mov	r1, r5
 802398a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802398e:	f000 ffb5 	bl	80248fc <_ZN8touchgfx7Outline6moveToEii>
 8023992:	2300      	movs	r3, #0
 8023994:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8023998:	2301      	movs	r3, #1
 802399a:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802399e:	e7e1      	b.n	8023964 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

080239a0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 80239a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239a4:	4604      	mov	r4, r0
 80239a6:	b087      	sub	sp, #28
 80239a8:	9105      	str	r1, [sp, #20]
 80239aa:	f001 f8ec 	bl	8024b86 <_ZN8touchgfx7Outline8getCellsEv>
 80239ae:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80239b2:	4605      	mov	r5, r0
 80239b4:	f1b9 0f00 	cmp.w	r9, #0
 80239b8:	d103      	bne.n	80239c2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 80239ba:	2001      	movs	r0, #1
 80239bc:	b007      	add	sp, #28
 80239be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80239c2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 80239c6:	2e00      	cmp	r6, #0
 80239c8:	d139      	bne.n	8023a3e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 80239ca:	f104 0848 	add.w	r8, r4, #72	; 0x48
 80239ce:	f105 0708 	add.w	r7, r5, #8
 80239d2:	4640      	mov	r0, r8
 80239d4:	f001 f919 	bl	8024c0a <_ZN8touchgfx8Scanline5resetEv>
 80239d8:	f109 33ff 	add.w	r3, r9, #4294967295
 80239dc:	9303      	str	r3, [sp, #12]
 80239de:	f9b5 b000 	ldrsh.w	fp, [r5]
 80239e2:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 80239e6:	46da      	mov	sl, fp
 80239e8:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80239ec:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80239f0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80239f4:	9b03      	ldr	r3, [sp, #12]
 80239f6:	4416      	add	r6, r2
 80239f8:	9504      	str	r5, [sp, #16]
 80239fa:	463d      	mov	r5, r7
 80239fc:	3b01      	subs	r3, #1
 80239fe:	9303      	str	r3, [sp, #12]
 8023a00:	3301      	adds	r3, #1
 8023a02:	d01e      	beq.n	8023a42 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8023a04:	3708      	adds	r7, #8
 8023a06:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8023a0a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8023a0e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8023a12:	4290      	cmp	r0, r2
 8023a14:	d11e      	bne.n	8023a54 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8023a16:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8023a1a:	4411      	add	r1, r2
 8023a1c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8023a20:	e7e8      	b.n	80239f4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8023a22:	1c91      	adds	r1, r2, #2
 8023a24:	f04f 0301 	mov.w	r3, #1
 8023a28:	65e1      	str	r1, [r4, #92]	; 0x5c
 8023a2a:	8053      	strh	r3, [r2, #2]
 8023a2c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8023a2e:	1c91      	adds	r1, r2, #2
 8023a30:	65a1      	str	r1, [r4, #88]	; 0x58
 8023a32:	f8a2 b002 	strh.w	fp, [r2, #2]
 8023a36:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8023a38:	3201      	adds	r2, #1
 8023a3a:	6562      	str	r2, [r4, #84]	; 0x54
 8023a3c:	e03a      	b.n	8023ab4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8023a3e:	2000      	movs	r0, #0
 8023a40:	e7bc      	b.n	80239bc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8023a42:	b951      	cbnz	r1, 8023a5a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8023a44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8023a46:	2b00      	cmp	r3, #0
 8023a48:	d0b7      	beq.n	80239ba <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8023a4a:	4641      	mov	r1, r8
 8023a4c:	9805      	ldr	r0, [sp, #20]
 8023a4e:	f7ff fd59 	bl	8023504 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023a52:	e7b2      	b.n	80239ba <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8023a54:	2900      	cmp	r1, #0
 8023a56:	d035      	beq.n	8023ac4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8023a58:	9504      	str	r5, [sp, #16]
 8023a5a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8023a5e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8023a62:	f7ff fd3b 	bl	80234dc <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 8023a66:	4605      	mov	r5, r0
 8023a68:	b330      	cbz	r0, 8023ab8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023a6a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8023a6c:	b182      	cbz	r2, 8023a90 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8023a6e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8023a70:	4591      	cmp	r9, r2
 8023a72:	d00d      	beq.n	8023a90 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8023a74:	4641      	mov	r1, r8
 8023a76:	9805      	ldr	r0, [sp, #20]
 8023a78:	f7ff fd44 	bl	8023504 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023a7c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023a80:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8023a82:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8023a86:	65e2      	str	r2, [r4, #92]	; 0x5c
 8023a88:	2300      	movs	r3, #0
 8023a8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023a8c:	6563      	str	r3, [r4, #84]	; 0x54
 8023a8e:	65a2      	str	r2, [r4, #88]	; 0x58
 8023a90:	f1bb 0f00 	cmp.w	fp, #0
 8023a94:	db10      	blt.n	8023ab8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023a96:	f7f2 fce3 	bl	8016460 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8023a9a:	4583      	cmp	fp, r0
 8023a9c:	da0c      	bge.n	8023ab8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023a9e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8023aa0:	f802 500b 	strb.w	r5, [r2, fp]
 8023aa4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8023aa6:	3201      	adds	r2, #1
 8023aa8:	4593      	cmp	fp, r2
 8023aaa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8023aac:	d1b9      	bne.n	8023a22 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8023aae:	8811      	ldrh	r1, [r2, #0]
 8023ab0:	3101      	adds	r1, #1
 8023ab2:	8011      	strh	r1, [r2, #0]
 8023ab4:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8023ab8:	9b03      	ldr	r3, [sp, #12]
 8023aba:	3301      	adds	r3, #1
 8023abc:	d0c2      	beq.n	8023a44 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8023abe:	f10b 0a01 	add.w	sl, fp, #1
 8023ac2:	9d04      	ldr	r5, [sp, #16]
 8023ac4:	f9b5 3000 	ldrsh.w	r3, [r5]
 8023ac8:	4553      	cmp	r3, sl
 8023aca:	dd88      	ble.n	80239de <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8023acc:	01b1      	lsls	r1, r6, #6
 8023ace:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8023ad2:	f7ff fd03 	bl	80234dc <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 8023ad6:	4683      	mov	fp, r0
 8023ad8:	2800      	cmp	r0, #0
 8023ada:	d080      	beq.n	80239de <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8023adc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8023ade:	b183      	cbz	r3, 8023b02 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8023ae0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8023ae2:	4599      	cmp	r9, r3
 8023ae4:	d00d      	beq.n	8023b02 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8023ae6:	4641      	mov	r1, r8
 8023ae8:	9805      	ldr	r0, [sp, #20]
 8023aea:	f7ff fd0b 	bl	8023504 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023aee:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023af2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8023af6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8023af8:	65e3      	str	r3, [r4, #92]	; 0x5c
 8023afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023afc:	65a3      	str	r3, [r4, #88]	; 0x58
 8023afe:	2300      	movs	r3, #0
 8023b00:	6563      	str	r3, [r4, #84]	; 0x54
 8023b02:	f9b5 3000 	ldrsh.w	r3, [r5]
 8023b06:	464a      	mov	r2, r9
 8023b08:	f8cd b000 	str.w	fp, [sp]
 8023b0c:	4651      	mov	r1, sl
 8023b0e:	eba3 030a 	sub.w	r3, r3, sl
 8023b12:	4640      	mov	r0, r8
 8023b14:	f001 f8a4 	bl	8024c60 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8023b18:	e761      	b.n	80239de <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08023b1a <_ZN8touchgfx6Canvas6renderEh>:
 8023b1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023b1c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8023b20:	4604      	mov	r4, r0
 8023b22:	460d      	mov	r5, r1
 8023b24:	b913      	cbnz	r3, 8023b2c <_ZN8touchgfx6Canvas6renderEh+0x12>
 8023b26:	2001      	movs	r0, #1
 8023b28:	b003      	add	sp, #12
 8023b2a:	bd30      	pop	{r4, r5, pc}
 8023b2c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8023b30:	2b00      	cmp	r3, #0
 8023b32:	d12f      	bne.n	8023b94 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 8023b34:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 8023b38:	2b00      	cmp	r3, #0
 8023b3a:	d0f4      	beq.n	8023b26 <_ZN8touchgfx6Canvas6renderEh+0xc>
 8023b3c:	6840      	ldr	r0, [r0, #4]
 8023b3e:	6803      	ldr	r3, [r0, #0]
 8023b40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023b42:	4798      	blx	r3
 8023b44:	fb10 f105 	smulbb	r1, r0, r5
 8023b48:	b288      	uxth	r0, r1
 8023b4a:	1c41      	adds	r1, r0, #1
 8023b4c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8023b50:	120d      	asrs	r5, r1, #8
 8023b52:	d0e8      	beq.n	8023b26 <_ZN8touchgfx6Canvas6renderEh+0xc>
 8023b54:	4620      	mov	r0, r4
 8023b56:	f7ff fec0 	bl	80238da <_ZN8touchgfx6Canvas5closeEv>
 8023b5a:	6860      	ldr	r0, [r4, #4]
 8023b5c:	6803      	ldr	r3, [r0, #0]
 8023b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023b60:	4798      	blx	r3
 8023b62:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 8023b66:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 8023b6a:	8082      	strh	r2, [r0, #4]
 8023b6c:	80c3      	strh	r3, [r0, #6]
 8023b6e:	6860      	ldr	r0, [r4, #4]
 8023b70:	6803      	ldr	r3, [r0, #0]
 8023b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023b74:	4798      	blx	r3
 8023b76:	7205      	strb	r5, [r0, #8]
 8023b78:	6860      	ldr	r0, [r4, #4]
 8023b7a:	6803      	ldr	r3, [r0, #0]
 8023b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023b7e:	4798      	blx	r3
 8023b80:	f104 0318 	add.w	r3, r4, #24
 8023b84:	4669      	mov	r1, sp
 8023b86:	e9cd 3000 	strd	r3, r0, [sp]
 8023b8a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8023b8e:	f7ff ff07 	bl	80239a0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8023b92:	e7c9      	b.n	8023b28 <_ZN8touchgfx6Canvas6renderEh+0xe>
 8023b94:	2000      	movs	r0, #0
 8023b96:	e7c7      	b.n	8023b28 <_ZN8touchgfx6Canvas6renderEh+0xe>

08023b98 <_ZN8touchgfx6CanvasD1Ev>:
 8023b98:	b538      	push	{r3, r4, r5, lr}
 8023b9a:	4605      	mov	r5, r0
 8023b9c:	4b08      	ldr	r3, [pc, #32]	; (8023bc0 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8023b9e:	4604      	mov	r4, r0
 8023ba0:	f845 3b30 	str.w	r3, [r5], #48
 8023ba4:	4b07      	ldr	r3, [pc, #28]	; (8023bc4 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8023ba6:	6818      	ldr	r0, [r3, #0]
 8023ba8:	6803      	ldr	r3, [r0, #0]
 8023baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023bac:	4798      	blx	r3
 8023bae:	4628      	mov	r0, r5
 8023bb0:	f000 f814 	bl	8023bdc <_ZN8touchgfx7OutlineD1Ev>
 8023bb4:	f104 0018 	add.w	r0, r4, #24
 8023bb8:	f001 f88b 	bl	8024cd2 <_ZN8touchgfx15RenderingBufferD1Ev>
 8023bbc:	4620      	mov	r0, r4
 8023bbe:	bd38      	pop	{r3, r4, r5, pc}
 8023bc0:	0802d6ac 	.word	0x0802d6ac
 8023bc4:	200566e0 	.word	0x200566e0

08023bc8 <_ZN8touchgfx6CanvasD0Ev>:
 8023bc8:	b510      	push	{r4, lr}
 8023bca:	4604      	mov	r4, r0
 8023bcc:	f7ff ffe4 	bl	8023b98 <_ZN8touchgfx6CanvasD1Ev>
 8023bd0:	21bc      	movs	r1, #188	; 0xbc
 8023bd2:	4620      	mov	r0, r4
 8023bd4:	f001 f89f 	bl	8024d16 <_ZdlPvj>
 8023bd8:	4620      	mov	r0, r4
 8023bda:	bd10      	pop	{r4, pc}

08023bdc <_ZN8touchgfx7OutlineD1Ev>:
 8023bdc:	4770      	bx	lr

08023bde <_ZN8touchgfx7OutlineD0Ev>:
 8023bde:	b510      	push	{r4, lr}
 8023be0:	4604      	mov	r4, r0
 8023be2:	2148      	movs	r1, #72	; 0x48
 8023be4:	f001 f897 	bl	8024d16 <_ZdlPvj>
 8023be8:	4620      	mov	r0, r4
 8023bea:	bd10      	pop	{r4, pc}

08023bec <_ZN8touchgfx7Outline5resetEv>:
 8023bec:	b510      	push	{r4, lr}
 8023bee:	4604      	mov	r4, r0
 8023bf0:	f7f2 fc4e 	bl	8016490 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8023bf4:	60e0      	str	r0, [r4, #12]
 8023bf6:	f7f2 fc51 	bl	801649c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8023bfa:	68e3      	ldr	r3, [r4, #12]
 8023bfc:	2200      	movs	r2, #0
 8023bfe:	08c0      	lsrs	r0, r0, #3
 8023c00:	6123      	str	r3, [r4, #16]
 8023c02:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023c06:	6060      	str	r0, [r4, #4]
 8023c08:	82a3      	strh	r3, [r4, #20]
 8023c0a:	82e3      	strh	r3, [r4, #22]
 8023c0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023c0e:	60a2      	str	r2, [r4, #8]
 8023c10:	f023 0301 	bic.w	r3, r3, #1
 8023c14:	8322      	strh	r2, [r4, #24]
 8023c16:	8362      	strh	r2, [r4, #26]
 8023c18:	f043 0302 	orr.w	r3, r3, #2
 8023c1c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023c20:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023c22:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023c26:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8023c2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8023c2e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8023c32:	bd10      	pop	{r4, pc}

08023c34 <_ZN8touchgfx7OutlineC1Ev>:
 8023c34:	4b0f      	ldr	r3, [pc, #60]	; (8023c74 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8023c36:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023c3a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8023c3e:	b510      	push	{r4, lr}
 8023c40:	6003      	str	r3, [r0, #0]
 8023c42:	2300      	movs	r3, #0
 8023c44:	4604      	mov	r4, r0
 8023c46:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8023c4a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8023c4e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023c52:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8023c56:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8023c5a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8023c5e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8023c62:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8023c66:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8023c6a:	f7ff ffbf 	bl	8023bec <_ZN8touchgfx7Outline5resetEv>
 8023c6e:	4620      	mov	r0, r4
 8023c70:	bd10      	pop	{r4, pc}
 8023c72:	bf00      	nop
 8023c74:	0802d77c 	.word	0x0802d77c

08023c78 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8023c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c7c:	b095      	sub	sp, #84	; 0x54
 8023c7e:	4604      	mov	r4, r0
 8023c80:	1155      	asrs	r5, r2, #5
 8023c82:	f002 061f 	and.w	r6, r2, #31
 8023c86:	981e      	ldr	r0, [sp, #120]	; 0x78
 8023c88:	1157      	asrs	r7, r2, #5
 8023c8a:	9304      	str	r3, [sp, #16]
 8023c8c:	1153      	asrs	r3, r2, #5
 8023c8e:	9300      	str	r3, [sp, #0]
 8023c90:	1143      	asrs	r3, r0, #5
 8023c92:	930c      	str	r3, [sp, #48]	; 0x30
 8023c94:	f000 031f 	and.w	r3, r0, #31
 8023c98:	9303      	str	r3, [sp, #12]
 8023c9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023c9c:	42ab      	cmp	r3, r5
 8023c9e:	bfc8      	it	gt
 8023ca0:	462b      	movgt	r3, r5
 8023ca2:	ea4f 1562 	mov.w	r5, r2, asr #5
 8023ca6:	bfc8      	it	gt
 8023ca8:	6323      	strgt	r3, [r4, #48]	; 0x30
 8023caa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023cac:	42ab      	cmp	r3, r5
 8023cae:	bfd8      	it	le
 8023cb0:	462b      	movle	r3, r5
 8023cb2:	ea4f 1560 	mov.w	r5, r0, asr #5
 8023cb6:	bfdc      	itt	le
 8023cb8:	3301      	addle	r3, #1
 8023cba:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023cbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023cbe:	42ab      	cmp	r3, r5
 8023cc0:	bfc8      	it	gt
 8023cc2:	462b      	movgt	r3, r5
 8023cc4:	ea4f 1560 	mov.w	r5, r0, asr #5
 8023cc8:	bfc8      	it	gt
 8023cca:	6323      	strgt	r3, [r4, #48]	; 0x30
 8023ccc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023cce:	42ab      	cmp	r3, r5
 8023cd0:	bfd8      	it	le
 8023cd2:	462b      	movle	r3, r5
 8023cd4:	ea4f 1561 	mov.w	r5, r1, asr #5
 8023cd8:	bfdc      	itt	le
 8023cda:	3301      	addle	r3, #1
 8023cdc:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023cde:	9b04      	ldr	r3, [sp, #16]
 8023ce0:	eba3 0a01 	sub.w	sl, r3, r1
 8023ce4:	1143      	asrs	r3, r0, #5
 8023ce6:	429f      	cmp	r7, r3
 8023ce8:	f040 811d 	bne.w	8023f26 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ae>
 8023cec:	9b04      	ldr	r3, [sp, #16]
 8023cee:	ea4f 1b63 	mov.w	fp, r3, asr #5
 8023cf2:	9b03      	ldr	r3, [sp, #12]
 8023cf4:	429e      	cmp	r6, r3
 8023cf6:	d131      	bne.n	8023d5c <_ZN8touchgfx7Outline10renderLineEiiii+0xe4>
 8023cf8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023cfc:	fa0f fb8b 	sxth.w	fp, fp
 8023d00:	f9bd 2000 	ldrsh.w	r2, [sp]
 8023d04:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8023d08:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 8023d0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023d10:	4281      	cmp	r1, r0
 8023d12:	f000 80e6 	beq.w	8023ee2 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8023d16:	8b60      	ldrh	r0, [r4, #26]
 8023d18:	8b21      	ldrh	r1, [r4, #24]
 8023d1a:	4301      	orrs	r1, r0
 8023d1c:	d00b      	beq.n	8023d36 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8023d1e:	2b00      	cmp	r3, #0
 8023d20:	db09      	blt.n	8023d36 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8023d22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023d24:	428b      	cmp	r3, r1
 8023d26:	da06      	bge.n	8023d36 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8023d28:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023d2c:	4299      	cmp	r1, r3
 8023d2e:	d308      	bcc.n	8023d42 <_ZN8touchgfx7Outline10renderLineEiiii+0xca>
 8023d30:	2301      	movs	r3, #1
 8023d32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023d36:	f8a4 b014 	strh.w	fp, [r4, #20]
 8023d3a:	2300      	movs	r3, #0
 8023d3c:	82e2      	strh	r2, [r4, #22]
 8023d3e:	8323      	strh	r3, [r4, #24]
 8023d40:	e01f      	b.n	8023d82 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 8023d42:	f104 0314 	add.w	r3, r4, #20
 8023d46:	6925      	ldr	r5, [r4, #16]
 8023d48:	cb03      	ldmia	r3!, {r0, r1}
 8023d4a:	6028      	str	r0, [r5, #0]
 8023d4c:	6069      	str	r1, [r5, #4]
 8023d4e:	6923      	ldr	r3, [r4, #16]
 8023d50:	3308      	adds	r3, #8
 8023d52:	6123      	str	r3, [r4, #16]
 8023d54:	68a3      	ldr	r3, [r4, #8]
 8023d56:	3301      	adds	r3, #1
 8023d58:	60a3      	str	r3, [r4, #8]
 8023d5a:	e7ec      	b.n	8023d36 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8023d5c:	9b04      	ldr	r3, [sp, #16]
 8023d5e:	45ab      	cmp	fp, r5
 8023d60:	f001 011f 	and.w	r1, r1, #31
 8023d64:	8b20      	ldrh	r0, [r4, #24]
 8023d66:	f003 031f 	and.w	r3, r3, #31
 8023d6a:	8b62      	ldrh	r2, [r4, #26]
 8023d6c:	9305      	str	r3, [sp, #20]
 8023d6e:	9b03      	ldr	r3, [sp, #12]
 8023d70:	eba3 0306 	sub.w	r3, r3, r6
 8023d74:	d107      	bne.n	8023d86 <_ZN8touchgfx7Outline10renderLineEiiii+0x10e>
 8023d76:	4418      	add	r0, r3
 8023d78:	8320      	strh	r0, [r4, #24]
 8023d7a:	9805      	ldr	r0, [sp, #20]
 8023d7c:	4401      	add	r1, r0
 8023d7e:	fb03 2301 	mla	r3, r3, r1, r2
 8023d82:	8363      	strh	r3, [r4, #26]
 8023d84:	e0ad      	b.n	8023ee2 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8023d86:	f1ba 0f00 	cmp.w	sl, #0
 8023d8a:	db33      	blt.n	8023df4 <_ZN8touchgfx7Outline10renderLineEiiii+0x17c>
 8023d8c:	2701      	movs	r7, #1
 8023d8e:	f1c1 0c20 	rsb	ip, r1, #32
 8023d92:	9702      	str	r7, [sp, #8]
 8023d94:	2720      	movs	r7, #32
 8023d96:	fb03 f30c 	mul.w	r3, r3, ip
 8023d9a:	9701      	str	r7, [sp, #4]
 8023d9c:	9f01      	ldr	r7, [sp, #4]
 8023d9e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023da2:	4439      	add	r1, r7
 8023da4:	fb93 fcfa 	sdiv	ip, r3, sl
 8023da8:	fb0a 331c 	mls	r3, sl, ip, r3
 8023dac:	2b00      	cmp	r3, #0
 8023dae:	bfbc      	itt	lt
 8023db0:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8023db4:	4453      	addlt	r3, sl
 8023db6:	fb0c 2101 	mla	r1, ip, r1, r2
 8023dba:	9a02      	ldr	r2, [sp, #8]
 8023dbc:	4460      	add	r0, ip
 8023dbe:	4415      	add	r5, r2
 8023dc0:	f9bd 2000 	ldrsh.w	r2, [sp]
 8023dc4:	b200      	sxth	r0, r0
 8023dc6:	0417      	lsls	r7, r2, #16
 8023dc8:	9200      	str	r2, [sp, #0]
 8023dca:	fa0f fe85 	sxth.w	lr, r5
 8023dce:	8320      	strh	r0, [r4, #24]
 8023dd0:	9704      	str	r7, [sp, #16]
 8023dd2:	b209      	sxth	r1, r1
 8023dd4:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 8023dd8:	9a04      	ldr	r2, [sp, #16]
 8023dda:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 8023dde:	8361      	strh	r1, [r4, #26]
 8023de0:	eb0e 0902 	add.w	r9, lr, r2
 8023de4:	454f      	cmp	r7, r9
 8023de6:	d10d      	bne.n	8023e04 <_ZN8touchgfx7Outline10renderLineEiiii+0x18c>
 8023de8:	4ba0      	ldr	r3, [pc, #640]	; (802406c <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 8023dea:	2177      	movs	r1, #119	; 0x77
 8023dec:	4aa0      	ldr	r2, [pc, #640]	; (8024070 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>)
 8023dee:	48a1      	ldr	r0, [pc, #644]	; (8024074 <_ZN8touchgfx7Outline10renderLineEiiii+0x3fc>)
 8023df0:	f001 f808 	bl	8024e04 <__assert_func>
 8023df4:	f04f 37ff 	mov.w	r7, #4294967295
 8023df8:	434b      	muls	r3, r1
 8023dfa:	f1ca 0a00 	rsb	sl, sl, #0
 8023dfe:	9702      	str	r7, [sp, #8]
 8023e00:	2700      	movs	r7, #0
 8023e02:	e7ca      	b.n	8023d9a <_ZN8touchgfx7Outline10renderLineEiiii+0x122>
 8023e04:	ea50 0201 	orrs.w	r2, r0, r1
 8023e08:	d00c      	beq.n	8023e24 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8023e0a:	f1b8 0f00 	cmp.w	r8, #0
 8023e0e:	db09      	blt.n	8023e24 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8023e10:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023e12:	4588      	cmp	r8, r1
 8023e14:	da06      	bge.n	8023e24 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8023e16:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023e1a:	4288      	cmp	r0, r1
 8023e1c:	d364      	bcc.n	8023ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8023e1e:	2101      	movs	r1, #1
 8023e20:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023e24:	2100      	movs	r1, #0
 8023e26:	9a00      	ldr	r2, [sp, #0]
 8023e28:	45ab      	cmp	fp, r5
 8023e2a:	f8a4 e014 	strh.w	lr, [r4, #20]
 8023e2e:	82e2      	strh	r2, [r4, #22]
 8023e30:	4466      	add	r6, ip
 8023e32:	8321      	strh	r1, [r4, #24]
 8023e34:	8361      	strh	r1, [r4, #26]
 8023e36:	d04b      	beq.n	8023ed0 <_ZN8touchgfx7Outline10renderLineEiiii+0x258>
 8023e38:	9a03      	ldr	r2, [sp, #12]
 8023e3a:	eba3 030a 	sub.w	r3, r3, sl
 8023e3e:	f04f 0800 	mov.w	r8, #0
 8023e42:	1b91      	subs	r1, r2, r6
 8023e44:	448c      	add	ip, r1
 8023e46:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8023e4a:	fb9c f7fa 	sdiv	r7, ip, sl
 8023e4e:	fb0a cc17 	mls	ip, sl, r7, ip
 8023e52:	f1bc 0f00 	cmp.w	ip, #0
 8023e56:	bfbc      	itt	lt
 8023e58:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8023e5c:	44d4      	addlt	ip, sl
 8023e5e:	1c7a      	adds	r2, r7, #1
 8023e60:	9207      	str	r2, [sp, #28]
 8023e62:	eb13 030c 	adds.w	r3, r3, ip
 8023e66:	9a02      	ldr	r2, [sp, #8]
 8023e68:	bf54      	ite	pl
 8023e6a:	9807      	ldrpl	r0, [sp, #28]
 8023e6c:	4638      	movmi	r0, r7
 8023e6e:	4415      	add	r5, r2
 8023e70:	9a04      	ldr	r2, [sp, #16]
 8023e72:	fa0f fe80 	sxth.w	lr, r0
 8023e76:	4406      	add	r6, r0
 8023e78:	ea4f 1140 	mov.w	r1, r0, lsl #5
 8023e7c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8023e80:	fa0f f985 	sxth.w	r9, r5
 8023e84:	bf58      	it	pl
 8023e86:	eba3 030a 	subpl.w	r3, r3, sl
 8023e8a:	4410      	add	r0, r2
 8023e8c:	b209      	sxth	r1, r1
 8023e8e:	444a      	add	r2, r9
 8023e90:	f8a4 e018 	strh.w	lr, [r4, #24]
 8023e94:	8361      	strh	r1, [r4, #26]
 8023e96:	4290      	cmp	r0, r2
 8023e98:	d0a6      	beq.n	8023de8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8023e9a:	ea5e 0201 	orrs.w	r2, lr, r1
 8023e9e:	d00d      	beq.n	8023ebc <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8023ea0:	9a00      	ldr	r2, [sp, #0]
 8023ea2:	2a00      	cmp	r2, #0
 8023ea4:	db0a      	blt.n	8023ebc <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8023ea6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023ea8:	428a      	cmp	r2, r1
 8023eaa:	da07      	bge.n	8023ebc <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8023eac:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023eb0:	4288      	cmp	r0, r1
 8023eb2:	d329      	bcc.n	8023f08 <_ZN8touchgfx7Outline10renderLineEiiii+0x290>
 8023eb4:	f04f 0201 	mov.w	r2, #1
 8023eb8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023ebc:	9a00      	ldr	r2, [sp, #0]
 8023ebe:	45ab      	cmp	fp, r5
 8023ec0:	f8a4 9014 	strh.w	r9, [r4, #20]
 8023ec4:	82e2      	strh	r2, [r4, #22]
 8023ec6:	f8a4 8018 	strh.w	r8, [r4, #24]
 8023eca:	f8a4 801a 	strh.w	r8, [r4, #26]
 8023ece:	d1c8      	bne.n	8023e62 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ea>
 8023ed0:	9b03      	ldr	r3, [sp, #12]
 8023ed2:	9a01      	ldr	r2, [sp, #4]
 8023ed4:	1b9e      	subs	r6, r3, r6
 8023ed6:	9b05      	ldr	r3, [sp, #20]
 8023ed8:	3320      	adds	r3, #32
 8023eda:	8326      	strh	r6, [r4, #24]
 8023edc:	1a9b      	subs	r3, r3, r2
 8023ede:	435e      	muls	r6, r3
 8023ee0:	8366      	strh	r6, [r4, #26]
 8023ee2:	b015      	add	sp, #84	; 0x54
 8023ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ee8:	f104 0714 	add.w	r7, r4, #20
 8023eec:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8023ef0:	cf03      	ldmia	r7!, {r0, r1}
 8023ef2:	f8c8 0000 	str.w	r0, [r8]
 8023ef6:	f8c8 1004 	str.w	r1, [r8, #4]
 8023efa:	6921      	ldr	r1, [r4, #16]
 8023efc:	3108      	adds	r1, #8
 8023efe:	6121      	str	r1, [r4, #16]
 8023f00:	68a1      	ldr	r1, [r4, #8]
 8023f02:	3101      	adds	r1, #1
 8023f04:	60a1      	str	r1, [r4, #8]
 8023f06:	e78d      	b.n	8023e24 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8023f08:	f104 0e14 	add.w	lr, r4, #20
 8023f0c:	6922      	ldr	r2, [r4, #16]
 8023f0e:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8023f12:	9206      	str	r2, [sp, #24]
 8023f14:	6010      	str	r0, [r2, #0]
 8023f16:	6051      	str	r1, [r2, #4]
 8023f18:	6921      	ldr	r1, [r4, #16]
 8023f1a:	3108      	adds	r1, #8
 8023f1c:	6121      	str	r1, [r4, #16]
 8023f1e:	68a1      	ldr	r1, [r4, #8]
 8023f20:	3101      	adds	r1, #1
 8023f22:	60a1      	str	r1, [r4, #8]
 8023f24:	e7ca      	b.n	8023ebc <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8023f26:	eba0 0b02 	sub.w	fp, r0, r2
 8023f2a:	f1ba 0f00 	cmp.w	sl, #0
 8023f2e:	f040 80a3 	bne.w	8024078 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8023f32:	f1bb 0f00 	cmp.w	fp, #0
 8023f36:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8023f3a:	8b62      	ldrh	r2, [r4, #26]
 8023f3c:	b22d      	sxth	r5, r5
 8023f3e:	bfa8      	it	ge
 8023f40:	f04f 0a20 	movge.w	sl, #32
 8023f44:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8023f48:	8b21      	ldrh	r1, [r4, #24]
 8023f4a:	bfb8      	it	lt
 8023f4c:	f04f 39ff 	movlt.w	r9, #4294967295
 8023f50:	ebaa 0606 	sub.w	r6, sl, r6
 8023f54:	bfa8      	it	ge
 8023f56:	f04f 0901 	movge.w	r9, #1
 8023f5a:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8023f5e:	4431      	add	r1, r6
 8023f60:	fb06 2603 	mla	r6, r6, r3, r2
 8023f64:	9a00      	ldr	r2, [sp, #0]
 8023f66:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 8023f6a:	b209      	sxth	r1, r1
 8023f6c:	444a      	add	r2, r9
 8023f6e:	b236      	sxth	r6, r6
 8023f70:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 8023f74:	8321      	strh	r1, [r4, #24]
 8023f76:	b217      	sxth	r7, r2
 8023f78:	8366      	strh	r6, [r4, #26]
 8023f7a:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 8023f7e:	45f4      	cmp	ip, lr
 8023f80:	f43f af32 	beq.w	8023de8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8023f84:	4331      	orrs	r1, r6
 8023f86:	d00b      	beq.n	8023fa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8023f88:	2800      	cmp	r0, #0
 8023f8a:	db09      	blt.n	8023fa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8023f8c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023f8e:	4288      	cmp	r0, r1
 8023f90:	da06      	bge.n	8023fa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8023f92:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023f96:	4288      	cmp	r0, r1
 8023f98:	d33b      	bcc.n	8024012 <_ZN8touchgfx7Outline10renderLineEiiii+0x39a>
 8023f9a:	2101      	movs	r1, #1
 8023f9c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023fa0:	f1aa 0610 	sub.w	r6, sl, #16
 8023fa4:	82e7      	strh	r7, [r4, #22]
 8023fa6:	2700      	movs	r7, #0
 8023fa8:	82a5      	strh	r5, [r4, #20]
 8023faa:	0076      	lsls	r6, r6, #1
 8023fac:	8327      	strh	r7, [r4, #24]
 8023fae:	fb06 fc03 	mul.w	ip, r6, r3
 8023fb2:	b236      	sxth	r6, r6
 8023fb4:	8367      	strh	r7, [r4, #26]
 8023fb6:	fa0f fc8c 	sxth.w	ip, ip
 8023fba:	ea46 010c 	orr.w	r1, r6, ip
 8023fbe:	9100      	str	r1, [sp, #0]
 8023fc0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023fc2:	428a      	cmp	r2, r1
 8023fc4:	d046      	beq.n	8024054 <_ZN8touchgfx7Outline10renderLineEiiii+0x3dc>
 8023fc6:	444a      	add	r2, r9
 8023fc8:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8023fcc:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8023fd0:	fa0f f882 	sxth.w	r8, r2
 8023fd4:	8326      	strh	r6, [r4, #24]
 8023fd6:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8023fda:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8023fde:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 8023fe2:	4570      	cmp	r0, lr
 8023fe4:	f43f af00 	beq.w	8023de8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8023fe8:	9800      	ldr	r0, [sp, #0]
 8023fea:	b160      	cbz	r0, 8024006 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8023fec:	2900      	cmp	r1, #0
 8023fee:	db0a      	blt.n	8024006 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8023ff0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8023ff2:	4281      	cmp	r1, r0
 8023ff4:	da07      	bge.n	8024006 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8023ff6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023ffa:	4288      	cmp	r0, r1
 8023ffc:	d319      	bcc.n	8024032 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ba>
 8023ffe:	f04f 0101 	mov.w	r1, #1
 8024002:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024006:	82a5      	strh	r5, [r4, #20]
 8024008:	f8a4 8016 	strh.w	r8, [r4, #22]
 802400c:	8327      	strh	r7, [r4, #24]
 802400e:	8367      	strh	r7, [r4, #26]
 8024010:	e7d6      	b.n	8023fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x348>
 8024012:	f104 0614 	add.w	r6, r4, #20
 8024016:	f8d4 c010 	ldr.w	ip, [r4, #16]
 802401a:	ce03      	ldmia	r6!, {r0, r1}
 802401c:	f8cc 0000 	str.w	r0, [ip]
 8024020:	f8cc 1004 	str.w	r1, [ip, #4]
 8024024:	6921      	ldr	r1, [r4, #16]
 8024026:	3108      	adds	r1, #8
 8024028:	6121      	str	r1, [r4, #16]
 802402a:	68a1      	ldr	r1, [r4, #8]
 802402c:	3101      	adds	r1, #1
 802402e:	60a1      	str	r1, [r4, #8]
 8024030:	e7b6      	b.n	8023fa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8024032:	f104 0e14 	add.w	lr, r4, #20
 8024036:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802403a:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802403e:	f8cb 0000 	str.w	r0, [fp]
 8024042:	f8cb 1004 	str.w	r1, [fp, #4]
 8024046:	6921      	ldr	r1, [r4, #16]
 8024048:	3108      	adds	r1, #8
 802404a:	6121      	str	r1, [r4, #16]
 802404c:	68a1      	ldr	r1, [r4, #8]
 802404e:	3101      	adds	r1, #1
 8024050:	60a1      	str	r1, [r4, #8]
 8024052:	e7d8      	b.n	8024006 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024054:	9a03      	ldr	r2, [sp, #12]
 8024056:	8b61      	ldrh	r1, [r4, #26]
 8024058:	f1a2 0e20 	sub.w	lr, r2, #32
 802405c:	8b22      	ldrh	r2, [r4, #24]
 802405e:	44d6      	add	lr, sl
 8024060:	4472      	add	r2, lr
 8024062:	fb0e 1303 	mla	r3, lr, r3, r1
 8024066:	8322      	strh	r2, [r4, #24]
 8024068:	e68b      	b.n	8023d82 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 802406a:	bf00      	nop
 802406c:	0802d703 	.word	0x0802d703
 8024070:	0802d784 	.word	0x0802d784
 8024074:	0802d734 	.word	0x0802d734
 8024078:	f1bb 0f00 	cmp.w	fp, #0
 802407c:	f2c0 8124 	blt.w	80242c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x650>
 8024080:	2201      	movs	r2, #1
 8024082:	f1c6 0320 	rsb	r3, r6, #32
 8024086:	920b      	str	r2, [sp, #44]	; 0x2c
 8024088:	2220      	movs	r2, #32
 802408a:	fb0a f303 	mul.w	r3, sl, r3
 802408e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024092:	9202      	str	r2, [sp, #8]
 8024094:	fb93 fcfb 	sdiv	ip, r3, fp
 8024098:	fb0b 331c 	mls	r3, fp, ip, r3
 802409c:	2b00      	cmp	r3, #0
 802409e:	9308      	str	r3, [sp, #32]
 80240a0:	bfbe      	ittt	lt
 80240a2:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80240a6:	445b      	addlt	r3, fp
 80240a8:	9308      	strlt	r3, [sp, #32]
 80240aa:	eb0c 0301 	add.w	r3, ip, r1
 80240ae:	9301      	str	r3, [sp, #4]
 80240b0:	115b      	asrs	r3, r3, #5
 80240b2:	9305      	str	r3, [sp, #20]
 80240b4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80240b8:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 80240bc:	461f      	mov	r7, r3
 80240be:	9b02      	ldr	r3, [sp, #8]
 80240c0:	42b3      	cmp	r3, r6
 80240c2:	f040 8117 	bne.w	80242f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 80240c6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80240ca:	f9bd 3000 	ldrsh.w	r3, [sp]
 80240ce:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 80240d2:	42b9      	cmp	r1, r7
 80240d4:	d016      	beq.n	8024104 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 80240d6:	8b60      	ldrh	r0, [r4, #26]
 80240d8:	8b21      	ldrh	r1, [r4, #24]
 80240da:	4301      	orrs	r1, r0
 80240dc:	d00d      	beq.n	80240fa <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 80240de:	f1b8 0f00 	cmp.w	r8, #0
 80240e2:	db0a      	blt.n	80240fa <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 80240e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80240e6:	4541      	cmp	r1, r8
 80240e8:	dd07      	ble.n	80240fa <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 80240ea:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80240ee:	4288      	cmp	r0, r1
 80240f0:	f0c0 80f3 	bcc.w	80242da <_ZN8touchgfx7Outline10renderLineEiiii+0x662>
 80240f4:	2101      	movs	r1, #1
 80240f6:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80240fa:	82e3      	strh	r3, [r4, #22]
 80240fc:	2300      	movs	r3, #0
 80240fe:	82a2      	strh	r2, [r4, #20]
 8024100:	8323      	strh	r3, [r4, #24]
 8024102:	8363      	strh	r3, [r4, #26]
 8024104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024106:	9a00      	ldr	r2, [sp, #0]
 8024108:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802410c:	441a      	add	r2, r3
 802410e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8024112:	4691      	mov	r9, r2
 8024114:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8024118:	fa0f f589 	sxth.w	r5, r9
 802411c:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8024120:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8024124:	4281      	cmp	r1, r0
 8024126:	d015      	beq.n	8024154 <_ZN8touchgfx7Outline10renderLineEiiii+0x4dc>
 8024128:	8b60      	ldrh	r0, [r4, #26]
 802412a:	8b21      	ldrh	r1, [r4, #24]
 802412c:	4301      	orrs	r1, r0
 802412e:	d00c      	beq.n	802414a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8024130:	2a00      	cmp	r2, #0
 8024132:	db0a      	blt.n	802414a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8024134:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024136:	428a      	cmp	r2, r1
 8024138:	da07      	bge.n	802414a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802413a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802413e:	4291      	cmp	r1, r2
 8024140:	f0c0 81ae 	bcc.w	80244a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x828>
 8024144:	2201      	movs	r2, #1
 8024146:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802414a:	82a3      	strh	r3, [r4, #20]
 802414c:	2300      	movs	r3, #0
 802414e:	82e5      	strh	r5, [r4, #22]
 8024150:	8323      	strh	r3, [r4, #24]
 8024152:	8363      	strh	r3, [r4, #26]
 8024154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024156:	454b      	cmp	r3, r9
 8024158:	f000 808a 	beq.w	8024270 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f8>
 802415c:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8024160:	fb93 f2fb 	sdiv	r2, r3, fp
 8024164:	fb0b 3312 	mls	r3, fp, r2, r3
 8024168:	9205      	str	r2, [sp, #20]
 802416a:	2b00      	cmp	r3, #0
 802416c:	9307      	str	r3, [sp, #28]
 802416e:	da04      	bge.n	802417a <_ZN8touchgfx7Outline10renderLineEiiii+0x502>
 8024170:	1e53      	subs	r3, r2, #1
 8024172:	9305      	str	r3, [sp, #20]
 8024174:	9b07      	ldr	r3, [sp, #28]
 8024176:	445b      	add	r3, fp
 8024178:	9307      	str	r3, [sp, #28]
 802417a:	9b08      	ldr	r3, [sp, #32]
 802417c:	f04f 0a00 	mov.w	sl, #0
 8024180:	eba3 030b 	sub.w	r3, r3, fp
 8024184:	9308      	str	r3, [sp, #32]
 8024186:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 802418a:	f1c3 0320 	rsb	r3, r3, #32
 802418e:	930a      	str	r3, [sp, #40]	; 0x28
 8024190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024192:	9b02      	ldr	r3, [sp, #8]
 8024194:	1a9b      	subs	r3, r3, r2
 8024196:	9309      	str	r3, [sp, #36]	; 0x24
 8024198:	9902      	ldr	r1, [sp, #8]
 802419a:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802419e:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80241a2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80241a6:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 80241aa:	189b      	adds	r3, r3, r2
 80241ac:	9308      	str	r3, [sp, #32]
 80241ae:	bf57      	itett	pl
 80241b0:	eba3 030b 	subpl.w	r3, r3, fp
 80241b4:	9b05      	ldrmi	r3, [sp, #20]
 80241b6:	9308      	strpl	r3, [sp, #32]
 80241b8:	9b05      	ldrpl	r3, [sp, #20]
 80241ba:	bf58      	it	pl
 80241bc:	3301      	addpl	r3, #1
 80241be:	9300      	str	r3, [sp, #0]
 80241c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80241c4:	4413      	add	r3, r2
 80241c6:	9301      	str	r3, [sp, #4]
 80241c8:	115b      	asrs	r3, r3, #5
 80241ca:	9306      	str	r3, [sp, #24]
 80241cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80241ce:	428b      	cmp	r3, r1
 80241d0:	f040 8180 	bne.w	80244d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 80241d4:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80241d8:	fa0f f389 	sxth.w	r3, r9
 80241dc:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 80241e0:	4541      	cmp	r1, r8
 80241e2:	d017      	beq.n	8024214 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 80241e4:	8b60      	ldrh	r0, [r4, #26]
 80241e6:	8b21      	ldrh	r1, [r4, #24]
 80241e8:	4301      	orrs	r1, r0
 80241ea:	d00d      	beq.n	8024208 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 80241ec:	2e00      	cmp	r6, #0
 80241ee:	db0b      	blt.n	8024208 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 80241f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80241f2:	42b1      	cmp	r1, r6
 80241f4:	dd08      	ble.n	8024208 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 80241f6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80241fa:	4288      	cmp	r0, r1
 80241fc:	f0c0 815d 	bcc.w	80244ba <_ZN8touchgfx7Outline10renderLineEiiii+0x842>
 8024200:	f04f 0101 	mov.w	r1, #1
 8024204:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024208:	82a2      	strh	r2, [r4, #20]
 802420a:	82e3      	strh	r3, [r4, #22]
 802420c:	f8a4 a018 	strh.w	sl, [r4, #24]
 8024210:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8024214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024216:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802421a:	4499      	add	r9, r3
 802421c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024220:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8024224:	fa0f f589 	sxth.w	r5, r9
 8024228:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802422c:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8024230:	4281      	cmp	r1, r0
 8024232:	f43f add9 	beq.w	8023de8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024236:	8b60      	ldrh	r0, [r4, #26]
 8024238:	8b21      	ldrh	r1, [r4, #24]
 802423a:	4301      	orrs	r1, r0
 802423c:	d00d      	beq.n	802425a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802423e:	2a00      	cmp	r2, #0
 8024240:	db0b      	blt.n	802425a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8024242:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024244:	428a      	cmp	r2, r1
 8024246:	da08      	bge.n	802425a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8024248:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802424c:	4291      	cmp	r1, r2
 802424e:	f0c0 8228 	bcc.w	80246a2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa2a>
 8024252:	f04f 0201 	mov.w	r2, #1
 8024256:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802425a:	82a3      	strh	r3, [r4, #20]
 802425c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802425e:	82e5      	strh	r5, [r4, #22]
 8024260:	454b      	cmp	r3, r9
 8024262:	f8a4 a018 	strh.w	sl, [r4, #24]
 8024266:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802426a:	f8dd c004 	ldr.w	ip, [sp, #4]
 802426e:	d193      	bne.n	8024198 <_ZN8touchgfx7Outline10renderLineEiiii+0x520>
 8024270:	9b02      	ldr	r3, [sp, #8]
 8024272:	f1c3 0e20 	rsb	lr, r3, #32
 8024276:	9b04      	ldr	r3, [sp, #16]
 8024278:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802427c:	9b03      	ldr	r3, [sp, #12]
 802427e:	459e      	cmp	lr, r3
 8024280:	f040 8229 	bne.w	80246d6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa5e>
 8024284:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024288:	fa0f f58b 	sxth.w	r5, fp
 802428c:	fa0f f289 	sxth.w	r2, r9
 8024290:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024294:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 8024298:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802429c:	4281      	cmp	r1, r0
 802429e:	f43f ae20 	beq.w	8023ee2 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 80242a2:	8b60      	ldrh	r0, [r4, #26]
 80242a4:	8b21      	ldrh	r1, [r4, #24]
 80242a6:	4301      	orrs	r1, r0
 80242a8:	d00c      	beq.n	80242c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80242aa:	2b00      	cmp	r3, #0
 80242ac:	db0a      	blt.n	80242c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80242ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80242b0:	428b      	cmp	r3, r1
 80242b2:	da07      	bge.n	80242c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80242b4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80242b8:	4299      	cmp	r1, r3
 80242ba:	f0c0 81ff 	bcc.w	80246bc <_ZN8touchgfx7Outline10renderLineEiiii+0xa44>
 80242be:	2301      	movs	r3, #1
 80242c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80242c4:	82a5      	strh	r5, [r4, #20]
 80242c6:	e538      	b.n	8023d3a <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 80242c8:	f04f 32ff 	mov.w	r2, #4294967295
 80242cc:	fb0a f306 	mul.w	r3, sl, r6
 80242d0:	f1cb 0b00 	rsb	fp, fp, #0
 80242d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80242d6:	2200      	movs	r2, #0
 80242d8:	e6d9      	b.n	802408e <_ZN8touchgfx7Outline10renderLineEiiii+0x416>
 80242da:	f104 0514 	add.w	r5, r4, #20
 80242de:	6926      	ldr	r6, [r4, #16]
 80242e0:	cd03      	ldmia	r5!, {r0, r1}
 80242e2:	6030      	str	r0, [r6, #0]
 80242e4:	6071      	str	r1, [r6, #4]
 80242e6:	6921      	ldr	r1, [r4, #16]
 80242e8:	3108      	adds	r1, #8
 80242ea:	6121      	str	r1, [r4, #16]
 80242ec:	68a1      	ldr	r1, [r4, #8]
 80242ee:	3101      	adds	r1, #1
 80242f0:	60a1      	str	r1, [r4, #8]
 80242f2:	e702      	b.n	80240fa <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 80242f4:	9b01      	ldr	r3, [sp, #4]
 80242f6:	f001 011f 	and.w	r1, r1, #31
 80242fa:	8b20      	ldrh	r0, [r4, #24]
 80242fc:	f003 031f 	and.w	r3, r3, #31
 8024300:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8024304:	930d      	str	r3, [sp, #52]	; 0x34
 8024306:	9b02      	ldr	r3, [sp, #8]
 8024308:	1b9a      	subs	r2, r3, r6
 802430a:	9b05      	ldr	r3, [sp, #20]
 802430c:	42ab      	cmp	r3, r5
 802430e:	d107      	bne.n	8024320 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a8>
 8024310:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024312:	4410      	add	r0, r2
 8024314:	4419      	add	r1, r3
 8024316:	8320      	strh	r0, [r4, #24]
 8024318:	fb02 9201 	mla	r2, r2, r1, r9
 802431c:	8362      	strh	r2, [r4, #26]
 802431e:	e6f1      	b.n	8024104 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8024320:	f1bc 0f00 	cmp.w	ip, #0
 8024324:	f2c0 8093 	blt.w	802444e <_ZN8touchgfx7Outline10renderLineEiiii+0x7d6>
 8024328:	f1c1 0320 	rsb	r3, r1, #32
 802432c:	435a      	muls	r2, r3
 802432e:	2301      	movs	r3, #1
 8024330:	9309      	str	r3, [sp, #36]	; 0x24
 8024332:	2320      	movs	r3, #32
 8024334:	9307      	str	r3, [sp, #28]
 8024336:	9b07      	ldr	r3, [sp, #28]
 8024338:	fb92 fefc 	sdiv	lr, r2, ip
 802433c:	fb0c 221e 	mls	r2, ip, lr, r2
 8024340:	4419      	add	r1, r3
 8024342:	2a00      	cmp	r2, #0
 8024344:	bfbc      	itt	lt
 8024346:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802434a:	4462      	addlt	r2, ip
 802434c:	fb0e 9101 	mla	r1, lr, r1, r9
 8024350:	4470      	add	r0, lr
 8024352:	b20b      	sxth	r3, r1
 8024354:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024356:	b200      	sxth	r0, r0
 8024358:	440d      	add	r5, r1
 802435a:	f9bd 1000 	ldrsh.w	r1, [sp]
 802435e:	8320      	strh	r0, [r4, #24]
 8024360:	fa0f f985 	sxth.w	r9, r5
 8024364:	9106      	str	r1, [sp, #24]
 8024366:	0409      	lsls	r1, r1, #16
 8024368:	8363      	strh	r3, [r4, #26]
 802436a:	910a      	str	r1, [sp, #40]	; 0x28
 802436c:	4449      	add	r1, r9
 802436e:	42b9      	cmp	r1, r7
 8024370:	f43f ad3a 	beq.w	8023de8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024374:	4303      	orrs	r3, r0
 8024376:	d00c      	beq.n	8024392 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8024378:	f1b8 0f00 	cmp.w	r8, #0
 802437c:	db09      	blt.n	8024392 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 802437e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024380:	4543      	cmp	r3, r8
 8024382:	dd06      	ble.n	8024392 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8024384:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024388:	4299      	cmp	r1, r3
 802438a:	d368      	bcc.n	802445e <_ZN8touchgfx7Outline10renderLineEiiii+0x7e6>
 802438c:	2301      	movs	r3, #1
 802438e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024392:	9b06      	ldr	r3, [sp, #24]
 8024394:	4476      	add	r6, lr
 8024396:	f8a4 9014 	strh.w	r9, [r4, #20]
 802439a:	82e3      	strh	r3, [r4, #22]
 802439c:	2300      	movs	r3, #0
 802439e:	8323      	strh	r3, [r4, #24]
 80243a0:	8363      	strh	r3, [r4, #26]
 80243a2:	9b05      	ldr	r3, [sp, #20]
 80243a4:	42ab      	cmp	r3, r5
 80243a6:	d048      	beq.n	802443a <_ZN8touchgfx7Outline10renderLineEiiii+0x7c2>
 80243a8:	9b02      	ldr	r3, [sp, #8]
 80243aa:	eba2 020c 	sub.w	r2, r2, ip
 80243ae:	1b9b      	subs	r3, r3, r6
 80243b0:	4473      	add	r3, lr
 80243b2:	015b      	lsls	r3, r3, #5
 80243b4:	fb93 f8fc 	sdiv	r8, r3, ip
 80243b8:	fb0c 3318 	mls	r3, ip, r8, r3
 80243bc:	2b00      	cmp	r3, #0
 80243be:	bfbc      	itt	lt
 80243c0:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80243c4:	4463      	addlt	r3, ip
 80243c6:	f108 0101 	add.w	r1, r8, #1
 80243ca:	910f      	str	r1, [sp, #60]	; 0x3c
 80243cc:	18d2      	adds	r2, r2, r3
 80243ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80243d0:	bf56      	itet	pl
 80243d2:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 80243d4:	4640      	movmi	r0, r8
 80243d6:	eba2 020c 	subpl.w	r2, r2, ip
 80243da:	fa0f fe80 	sxth.w	lr, r0
 80243de:	4406      	add	r6, r0
 80243e0:	0141      	lsls	r1, r0, #5
 80243e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80243e4:	f8a4 e018 	strh.w	lr, [r4, #24]
 80243e8:	4405      	add	r5, r0
 80243ea:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80243ee:	b209      	sxth	r1, r1
 80243f0:	fa0f f985 	sxth.w	r9, r5
 80243f4:	4438      	add	r0, r7
 80243f6:	8361      	strh	r1, [r4, #26]
 80243f8:	444f      	add	r7, r9
 80243fa:	42b8      	cmp	r0, r7
 80243fc:	f43f acf4 	beq.w	8023de8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024400:	ea5e 0101 	orrs.w	r1, lr, r1
 8024404:	d00e      	beq.n	8024424 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8024406:	9906      	ldr	r1, [sp, #24]
 8024408:	2900      	cmp	r1, #0
 802440a:	db0b      	blt.n	8024424 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802440c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802440e:	9806      	ldr	r0, [sp, #24]
 8024410:	4288      	cmp	r0, r1
 8024412:	da07      	bge.n	8024424 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8024414:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024418:	4288      	cmp	r0, r1
 802441a:	d330      	bcc.n	802447e <_ZN8touchgfx7Outline10renderLineEiiii+0x806>
 802441c:	f04f 0101 	mov.w	r1, #1
 8024420:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024424:	9906      	ldr	r1, [sp, #24]
 8024426:	f8a4 9014 	strh.w	r9, [r4, #20]
 802442a:	82e1      	strh	r1, [r4, #22]
 802442c:	f04f 0100 	mov.w	r1, #0
 8024430:	8321      	strh	r1, [r4, #24]
 8024432:	8361      	strh	r1, [r4, #26]
 8024434:	9905      	ldr	r1, [sp, #20]
 8024436:	42a9      	cmp	r1, r5
 8024438:	d1c8      	bne.n	80243cc <_ZN8touchgfx7Outline10renderLineEiiii+0x754>
 802443a:	9b02      	ldr	r3, [sp, #8]
 802443c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802443e:	1b9e      	subs	r6, r3, r6
 8024440:	9b07      	ldr	r3, [sp, #28]
 8024442:	3120      	adds	r1, #32
 8024444:	8326      	strh	r6, [r4, #24]
 8024446:	1ac9      	subs	r1, r1, r3
 8024448:	434e      	muls	r6, r1
 802444a:	8366      	strh	r6, [r4, #26]
 802444c:	e65a      	b.n	8024104 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 802444e:	f04f 33ff 	mov.w	r3, #4294967295
 8024452:	434a      	muls	r2, r1
 8024454:	f1cc 0c00 	rsb	ip, ip, #0
 8024458:	9309      	str	r3, [sp, #36]	; 0x24
 802445a:	2300      	movs	r3, #0
 802445c:	e76a      	b.n	8024334 <_ZN8touchgfx7Outline10renderLineEiiii+0x6bc>
 802445e:	f104 0314 	add.w	r3, r4, #20
 8024462:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024466:	cb03      	ldmia	r3!, {r0, r1}
 8024468:	f8c8 0000 	str.w	r0, [r8]
 802446c:	f8c8 1004 	str.w	r1, [r8, #4]
 8024470:	6923      	ldr	r3, [r4, #16]
 8024472:	3308      	adds	r3, #8
 8024474:	6123      	str	r3, [r4, #16]
 8024476:	68a3      	ldr	r3, [r4, #8]
 8024478:	3301      	adds	r3, #1
 802447a:	60a3      	str	r3, [r4, #8]
 802447c:	e789      	b.n	8024392 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 802447e:	6921      	ldr	r1, [r4, #16]
 8024480:	f104 0e14 	add.w	lr, r4, #20
 8024484:	910e      	str	r1, [sp, #56]	; 0x38
 8024486:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8024488:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802448c:	6038      	str	r0, [r7, #0]
 802448e:	4638      	mov	r0, r7
 8024490:	6079      	str	r1, [r7, #4]
 8024492:	6921      	ldr	r1, [r4, #16]
 8024494:	3108      	adds	r1, #8
 8024496:	6121      	str	r1, [r4, #16]
 8024498:	68a1      	ldr	r1, [r4, #8]
 802449a:	3101      	adds	r1, #1
 802449c:	60a1      	str	r1, [r4, #8]
 802449e:	e7c1      	b.n	8024424 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 80244a0:	f104 0214 	add.w	r2, r4, #20
 80244a4:	6926      	ldr	r6, [r4, #16]
 80244a6:	ca03      	ldmia	r2!, {r0, r1}
 80244a8:	6030      	str	r0, [r6, #0]
 80244aa:	6071      	str	r1, [r6, #4]
 80244ac:	6922      	ldr	r2, [r4, #16]
 80244ae:	3208      	adds	r2, #8
 80244b0:	6122      	str	r2, [r4, #16]
 80244b2:	68a2      	ldr	r2, [r4, #8]
 80244b4:	3201      	adds	r2, #1
 80244b6:	60a2      	str	r2, [r4, #8]
 80244b8:	e647      	b.n	802414a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 80244ba:	f104 0514 	add.w	r5, r4, #20
 80244be:	6926      	ldr	r6, [r4, #16]
 80244c0:	cd03      	ldmia	r5!, {r0, r1}
 80244c2:	6030      	str	r0, [r6, #0]
 80244c4:	6071      	str	r1, [r6, #4]
 80244c6:	6921      	ldr	r1, [r4, #16]
 80244c8:	3108      	adds	r1, #8
 80244ca:	6121      	str	r1, [r4, #16]
 80244cc:	68a1      	ldr	r1, [r4, #8]
 80244ce:	3101      	adds	r1, #1
 80244d0:	60a1      	str	r1, [r4, #8]
 80244d2:	e699      	b.n	8024208 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 80244d4:	9b01      	ldr	r3, [sp, #4]
 80244d6:	ea4f 176c 	mov.w	r7, ip, asr #5
 80244da:	8b20      	ldrh	r0, [r4, #24]
 80244dc:	f00c 0c1f 	and.w	ip, ip, #31
 80244e0:	f003 031f 	and.w	r3, r3, #31
 80244e4:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 80244e8:	9310      	str	r3, [sp, #64]	; 0x40
 80244ea:	9b06      	ldr	r3, [sp, #24]
 80244ec:	429f      	cmp	r7, r3
 80244ee:	d10a      	bne.n	8024506 <_ZN8touchgfx7Outline10renderLineEiiii+0x88e>
 80244f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80244f2:	4418      	add	r0, r3
 80244f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80244f6:	449c      	add	ip, r3
 80244f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80244fa:	8320      	strh	r0, [r4, #24]
 80244fc:	fb03 ee0c 	mla	lr, r3, ip, lr
 8024500:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024504:	e686      	b.n	8024214 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8024506:	9b00      	ldr	r3, [sp, #0]
 8024508:	2b00      	cmp	r3, #0
 802450a:	f2c0 80a0 	blt.w	802464e <_ZN8touchgfx7Outline10renderLineEiiii+0x9d6>
 802450e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024510:	f1cc 0320 	rsb	r3, ip, #32
 8024514:	434b      	muls	r3, r1
 8024516:	2101      	movs	r1, #1
 8024518:	910e      	str	r1, [sp, #56]	; 0x38
 802451a:	2120      	movs	r1, #32
 802451c:	9a00      	ldr	r2, [sp, #0]
 802451e:	910d      	str	r1, [sp, #52]	; 0x34
 8024520:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024522:	fb93 f5f2 	sdiv	r5, r3, r2
 8024526:	fb02 3315 	mls	r3, r2, r5, r3
 802452a:	448c      	add	ip, r1
 802452c:	2b00      	cmp	r3, #0
 802452e:	bfbc      	itt	lt
 8024530:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8024534:	189b      	addlt	r3, r3, r2
 8024536:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024538:	fb05 ec0c 	mla	ip, r5, ip, lr
 802453c:	4428      	add	r0, r5
 802453e:	4417      	add	r7, r2
 8024540:	fa0f f18c 	sxth.w	r1, ip
 8024544:	fa0f fc89 	sxth.w	ip, r9
 8024548:	fa0f fe87 	sxth.w	lr, r7
 802454c:	8361      	strh	r1, [r4, #26]
 802454e:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8024552:	b200      	sxth	r0, r0
 8024554:	920f      	str	r2, [sp, #60]	; 0x3c
 8024556:	4472      	add	r2, lr
 8024558:	8320      	strh	r0, [r4, #24]
 802455a:	4542      	cmp	r2, r8
 802455c:	f43f ac44 	beq.w	8023de8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024560:	ea50 0201 	orrs.w	r2, r0, r1
 8024564:	d00c      	beq.n	8024580 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8024566:	2e00      	cmp	r6, #0
 8024568:	db0a      	blt.n	8024580 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802456a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802456c:	42b1      	cmp	r1, r6
 802456e:	dd07      	ble.n	8024580 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8024570:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024574:	4288      	cmp	r0, r1
 8024576:	d375      	bcc.n	8024664 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8024578:	f04f 0201 	mov.w	r2, #1
 802457c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024582:	f8a4 e014 	strh.w	lr, [r4, #20]
 8024586:	1956      	adds	r6, r2, r5
 8024588:	9a06      	ldr	r2, [sp, #24]
 802458a:	f8a4 c016 	strh.w	ip, [r4, #22]
 802458e:	42ba      	cmp	r2, r7
 8024590:	f8a4 a018 	strh.w	sl, [r4, #24]
 8024594:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8024598:	d04c      	beq.n	8024634 <_ZN8touchgfx7Outline10renderLineEiiii+0x9bc>
 802459a:	9a02      	ldr	r2, [sp, #8]
 802459c:	1b91      	subs	r1, r2, r6
 802459e:	9a00      	ldr	r2, [sp, #0]
 80245a0:	440d      	add	r5, r1
 80245a2:	016d      	lsls	r5, r5, #5
 80245a4:	fb95 fef2 	sdiv	lr, r5, r2
 80245a8:	fb02 551e 	mls	r5, r2, lr, r5
 80245ac:	2d00      	cmp	r5, #0
 80245ae:	bfbc      	itt	lt
 80245b0:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80245b4:	18ad      	addlt	r5, r5, r2
 80245b6:	9a00      	ldr	r2, [sp, #0]
 80245b8:	1a9b      	subs	r3, r3, r2
 80245ba:	f10e 0201 	add.w	r2, lr, #1
 80245be:	9213      	str	r2, [sp, #76]	; 0x4c
 80245c0:	195b      	adds	r3, r3, r5
 80245c2:	bf57      	itett	pl
 80245c4:	9a00      	ldrpl	r2, [sp, #0]
 80245c6:	4670      	movmi	r0, lr
 80245c8:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 80245ca:	1a9b      	subpl	r3, r3, r2
 80245cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80245ce:	fa0f f880 	sxth.w	r8, r0
 80245d2:	4406      	add	r6, r0
 80245d4:	4417      	add	r7, r2
 80245d6:	0141      	lsls	r1, r0, #5
 80245d8:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80245dc:	b23a      	sxth	r2, r7
 80245de:	f8a4 8018 	strh.w	r8, [r4, #24]
 80245e2:	b209      	sxth	r1, r1
 80245e4:	9211      	str	r2, [sp, #68]	; 0x44
 80245e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80245e8:	8361      	strh	r1, [r4, #26]
 80245ea:	1882      	adds	r2, r0, r2
 80245ec:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80245ee:	9212      	str	r2, [sp, #72]	; 0x48
 80245f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80245f2:	4402      	add	r2, r0
 80245f4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80245f6:	4290      	cmp	r0, r2
 80245f8:	f43f abf6 	beq.w	8023de8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80245fc:	ea58 0201 	orrs.w	r2, r8, r1
 8024600:	d00d      	beq.n	802461e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8024602:	f1bc 0f00 	cmp.w	ip, #0
 8024606:	db0a      	blt.n	802461e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8024608:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802460a:	458c      	cmp	ip, r1
 802460c:	da07      	bge.n	802461e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 802460e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024612:	4288      	cmp	r0, r1
 8024614:	d336      	bcc.n	8024684 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0c>
 8024616:	f04f 0201 	mov.w	r2, #1
 802461a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802461e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024620:	f8a4 c016 	strh.w	ip, [r4, #22]
 8024624:	82a2      	strh	r2, [r4, #20]
 8024626:	9a06      	ldr	r2, [sp, #24]
 8024628:	f8a4 a018 	strh.w	sl, [r4, #24]
 802462c:	42ba      	cmp	r2, r7
 802462e:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8024632:	d1c5      	bne.n	80245c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x948>
 8024634:	9b02      	ldr	r3, [sp, #8]
 8024636:	1b9e      	subs	r6, r3, r6
 8024638:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802463a:	f103 0c20 	add.w	ip, r3, #32
 802463e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024640:	8326      	strh	r6, [r4, #24]
 8024642:	ebac 0c03 	sub.w	ip, ip, r3
 8024646:	fb06 f60c 	mul.w	r6, r6, ip
 802464a:	8366      	strh	r6, [r4, #26]
 802464c:	e5e2      	b.n	8024214 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 802464e:	9a00      	ldr	r2, [sp, #0]
 8024650:	f04f 31ff 	mov.w	r1, #4294967295
 8024654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024656:	4252      	negs	r2, r2
 8024658:	910e      	str	r1, [sp, #56]	; 0x38
 802465a:	fb03 f30c 	mul.w	r3, r3, ip
 802465e:	2100      	movs	r1, #0
 8024660:	9200      	str	r2, [sp, #0]
 8024662:	e75b      	b.n	802451c <_ZN8touchgfx7Outline10renderLineEiiii+0x8a4>
 8024664:	f104 0614 	add.w	r6, r4, #20
 8024668:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802466c:	ce03      	ldmia	r6!, {r0, r1}
 802466e:	f8c8 0000 	str.w	r0, [r8]
 8024672:	f8c8 1004 	str.w	r1, [r8, #4]
 8024676:	6921      	ldr	r1, [r4, #16]
 8024678:	3108      	adds	r1, #8
 802467a:	6121      	str	r1, [r4, #16]
 802467c:	68a1      	ldr	r1, [r4, #8]
 802467e:	3101      	adds	r1, #1
 8024680:	60a1      	str	r1, [r4, #8]
 8024682:	e77d      	b.n	8024580 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8024684:	f104 0814 	add.w	r8, r4, #20
 8024688:	6922      	ldr	r2, [r4, #16]
 802468a:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802468e:	9212      	str	r2, [sp, #72]	; 0x48
 8024690:	6010      	str	r0, [r2, #0]
 8024692:	6051      	str	r1, [r2, #4]
 8024694:	6921      	ldr	r1, [r4, #16]
 8024696:	3108      	adds	r1, #8
 8024698:	6121      	str	r1, [r4, #16]
 802469a:	68a1      	ldr	r1, [r4, #8]
 802469c:	3101      	adds	r1, #1
 802469e:	60a1      	str	r1, [r4, #8]
 80246a0:	e7bd      	b.n	802461e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 80246a2:	f104 0214 	add.w	r2, r4, #20
 80246a6:	6926      	ldr	r6, [r4, #16]
 80246a8:	ca03      	ldmia	r2!, {r0, r1}
 80246aa:	6030      	str	r0, [r6, #0]
 80246ac:	6071      	str	r1, [r6, #4]
 80246ae:	6922      	ldr	r2, [r4, #16]
 80246b0:	3208      	adds	r2, #8
 80246b2:	6122      	str	r2, [r4, #16]
 80246b4:	68a2      	ldr	r2, [r4, #8]
 80246b6:	3201      	adds	r2, #1
 80246b8:	60a2      	str	r2, [r4, #8]
 80246ba:	e5ce      	b.n	802425a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 80246bc:	f104 0314 	add.w	r3, r4, #20
 80246c0:	6926      	ldr	r6, [r4, #16]
 80246c2:	cb03      	ldmia	r3!, {r0, r1}
 80246c4:	6030      	str	r0, [r6, #0]
 80246c6:	6071      	str	r1, [r6, #4]
 80246c8:	6923      	ldr	r3, [r4, #16]
 80246ca:	3308      	adds	r3, #8
 80246cc:	6123      	str	r3, [r4, #16]
 80246ce:	68a3      	ldr	r3, [r4, #8]
 80246d0:	3301      	adds	r3, #1
 80246d2:	60a3      	str	r3, [r4, #8]
 80246d4:	e5f6      	b.n	80242c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80246d6:	9b01      	ldr	r3, [sp, #4]
 80246d8:	8b20      	ldrh	r0, [r4, #24]
 80246da:	ea4f 1c63 	mov.w	ip, r3, asr #5
 80246de:	f003 021f 	and.w	r2, r3, #31
 80246e2:	9b04      	ldr	r3, [sp, #16]
 80246e4:	45dc      	cmp	ip, fp
 80246e6:	8b66      	ldrh	r6, [r4, #26]
 80246e8:	f003 031f 	and.w	r3, r3, #31
 80246ec:	9305      	str	r3, [sp, #20]
 80246ee:	9b03      	ldr	r3, [sp, #12]
 80246f0:	eba3 050e 	sub.w	r5, r3, lr
 80246f4:	d108      	bne.n	8024708 <_ZN8touchgfx7Outline10renderLineEiiii+0xa90>
 80246f6:	9b05      	ldr	r3, [sp, #20]
 80246f8:	4428      	add	r0, r5
 80246fa:	441a      	add	r2, r3
 80246fc:	8320      	strh	r0, [r4, #24]
 80246fe:	fb05 6502 	mla	r5, r5, r2, r6
 8024702:	8365      	strh	r5, [r4, #26]
 8024704:	f7ff bbed 	b.w	8023ee2 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8024708:	9b04      	ldr	r3, [sp, #16]
 802470a:	9901      	ldr	r1, [sp, #4]
 802470c:	1a5b      	subs	r3, r3, r1
 802470e:	9300      	str	r3, [sp, #0]
 8024710:	f100 809c 	bmi.w	802484c <_ZN8touchgfx7Outline10renderLineEiiii+0xbd4>
 8024714:	f1c2 0120 	rsb	r1, r2, #32
 8024718:	434d      	muls	r5, r1
 802471a:	2101      	movs	r1, #1
 802471c:	9102      	str	r1, [sp, #8]
 802471e:	2120      	movs	r1, #32
 8024720:	9b00      	ldr	r3, [sp, #0]
 8024722:	9101      	str	r1, [sp, #4]
 8024724:	9901      	ldr	r1, [sp, #4]
 8024726:	fb95 f7f3 	sdiv	r7, r5, r3
 802472a:	fb03 5517 	mls	r5, r3, r7, r5
 802472e:	440a      	add	r2, r1
 8024730:	2d00      	cmp	r5, #0
 8024732:	bfbc      	itt	lt
 8024734:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024738:	18ed      	addlt	r5, r5, r3
 802473a:	fb07 6202 	mla	r2, r7, r2, r6
 802473e:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 8024742:	4438      	add	r0, r7
 8024744:	b211      	sxth	r1, r2
 8024746:	9a02      	ldr	r2, [sp, #8]
 8024748:	b200      	sxth	r0, r0
 802474a:	4494      	add	ip, r2
 802474c:	fa0f f289 	sxth.w	r2, r9
 8024750:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024754:	0413      	lsls	r3, r2, #16
 8024756:	8320      	strh	r0, [r4, #24]
 8024758:	fa0f f88c 	sxth.w	r8, ip
 802475c:	8361      	strh	r1, [r4, #26]
 802475e:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 8024762:	9304      	str	r3, [sp, #16]
 8024764:	eb08 0a03 	add.w	sl, r8, r3
 8024768:	45d1      	cmp	r9, sl
 802476a:	f43f ab3d 	beq.w	8023de8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802476e:	ea50 0301 	orrs.w	r3, r0, r1
 8024772:	d00b      	beq.n	802478c <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8024774:	2e00      	cmp	r6, #0
 8024776:	db09      	blt.n	802478c <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8024778:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802477a:	428e      	cmp	r6, r1
 802477c:	da06      	bge.n	802478c <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 802477e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024782:	4288      	cmp	r0, r1
 8024784:	d36b      	bcc.n	802485e <_ZN8touchgfx7Outline10renderLineEiiii+0xbe6>
 8024786:	2101      	movs	r1, #1
 8024788:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802478c:	2100      	movs	r1, #0
 802478e:	45e3      	cmp	fp, ip
 8024790:	f8a4 8014 	strh.w	r8, [r4, #20]
 8024794:	44be      	add	lr, r7
 8024796:	82e2      	strh	r2, [r4, #22]
 8024798:	8321      	strh	r1, [r4, #24]
 802479a:	8361      	strh	r1, [r4, #26]
 802479c:	d047      	beq.n	802482e <_ZN8touchgfx7Outline10renderLineEiiii+0xbb6>
 802479e:	9b03      	ldr	r3, [sp, #12]
 80247a0:	f04f 0900 	mov.w	r9, #0
 80247a4:	eba3 060e 	sub.w	r6, r3, lr
 80247a8:	9b00      	ldr	r3, [sp, #0]
 80247aa:	443e      	add	r6, r7
 80247ac:	0176      	lsls	r6, r6, #5
 80247ae:	fb96 f7f3 	sdiv	r7, r6, r3
 80247b2:	fb03 6617 	mls	r6, r3, r7, r6
 80247b6:	428e      	cmp	r6, r1
 80247b8:	bfbc      	itt	lt
 80247ba:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80247be:	18f6      	addlt	r6, r6, r3
 80247c0:	9b00      	ldr	r3, [sp, #0]
 80247c2:	1aed      	subs	r5, r5, r3
 80247c4:	1c7b      	adds	r3, r7, #1
 80247c6:	9307      	str	r3, [sp, #28]
 80247c8:	19ad      	adds	r5, r5, r6
 80247ca:	bf57      	itett	pl
 80247cc:	9b00      	ldrpl	r3, [sp, #0]
 80247ce:	4638      	movmi	r0, r7
 80247d0:	9807      	ldrpl	r0, [sp, #28]
 80247d2:	1aed      	subpl	r5, r5, r3
 80247d4:	9b02      	ldr	r3, [sp, #8]
 80247d6:	fa0f f880 	sxth.w	r8, r0
 80247da:	4486      	add	lr, r0
 80247dc:	449c      	add	ip, r3
 80247de:	0141      	lsls	r1, r0, #5
 80247e0:	9b04      	ldr	r3, [sp, #16]
 80247e2:	fa0f fa8c 	sxth.w	sl, ip
 80247e6:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80247ea:	b209      	sxth	r1, r1
 80247ec:	f8a4 8018 	strh.w	r8, [r4, #24]
 80247f0:	4418      	add	r0, r3
 80247f2:	4453      	add	r3, sl
 80247f4:	8361      	strh	r1, [r4, #26]
 80247f6:	4298      	cmp	r0, r3
 80247f8:	f43f aaf6 	beq.w	8023de8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80247fc:	ea58 0301 	orrs.w	r3, r8, r1
 8024800:	d00c      	beq.n	802481c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8024802:	2a00      	cmp	r2, #0
 8024804:	db0a      	blt.n	802481c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8024806:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024808:	428a      	cmp	r2, r1
 802480a:	da07      	bge.n	802481c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 802480c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024810:	4288      	cmp	r0, r1
 8024812:	d334      	bcc.n	802487e <_ZN8touchgfx7Outline10renderLineEiiii+0xc06>
 8024814:	f04f 0301 	mov.w	r3, #1
 8024818:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802481c:	45e3      	cmp	fp, ip
 802481e:	f8a4 a014 	strh.w	sl, [r4, #20]
 8024822:	82e2      	strh	r2, [r4, #22]
 8024824:	f8a4 9018 	strh.w	r9, [r4, #24]
 8024828:	f8a4 901a 	strh.w	r9, [r4, #26]
 802482c:	d1cc      	bne.n	80247c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb50>
 802482e:	9b03      	ldr	r3, [sp, #12]
 8024830:	9e05      	ldr	r6, [sp, #20]
 8024832:	eba3 0e0e 	sub.w	lr, r3, lr
 8024836:	9b01      	ldr	r3, [sp, #4]
 8024838:	3620      	adds	r6, #32
 802483a:	f8a4 e018 	strh.w	lr, [r4, #24]
 802483e:	1af6      	subs	r6, r6, r3
 8024840:	fb0e fe06 	mul.w	lr, lr, r6
 8024844:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024848:	f7ff bb4b 	b.w	8023ee2 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 802484c:	9b00      	ldr	r3, [sp, #0]
 802484e:	f04f 31ff 	mov.w	r1, #4294967295
 8024852:	4355      	muls	r5, r2
 8024854:	425b      	negs	r3, r3
 8024856:	9102      	str	r1, [sp, #8]
 8024858:	2100      	movs	r1, #0
 802485a:	9300      	str	r3, [sp, #0]
 802485c:	e760      	b.n	8024720 <_ZN8touchgfx7Outline10renderLineEiiii+0xaa8>
 802485e:	f104 0614 	add.w	r6, r4, #20
 8024862:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024866:	ce03      	ldmia	r6!, {r0, r1}
 8024868:	f8c9 0000 	str.w	r0, [r9]
 802486c:	f8c9 1004 	str.w	r1, [r9, #4]
 8024870:	6921      	ldr	r1, [r4, #16]
 8024872:	3108      	adds	r1, #8
 8024874:	6121      	str	r1, [r4, #16]
 8024876:	68a1      	ldr	r1, [r4, #8]
 8024878:	3101      	adds	r1, #1
 802487a:	60a1      	str	r1, [r4, #8]
 802487c:	e786      	b.n	802478c <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 802487e:	f104 0814 	add.w	r8, r4, #20
 8024882:	6923      	ldr	r3, [r4, #16]
 8024884:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024888:	9306      	str	r3, [sp, #24]
 802488a:	6018      	str	r0, [r3, #0]
 802488c:	6059      	str	r1, [r3, #4]
 802488e:	6921      	ldr	r1, [r4, #16]
 8024890:	3108      	adds	r1, #8
 8024892:	6121      	str	r1, [r4, #16]
 8024894:	68a1      	ldr	r1, [r4, #8]
 8024896:	3101      	adds	r1, #1
 8024898:	60a1      	str	r1, [r4, #8]
 802489a:	e7bf      	b.n	802481c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>

0802489c <_ZN8touchgfx7Outline6lineToEii>:
 802489c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802489e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80248a0:	4604      	mov	r4, r0
 80248a2:	460d      	mov	r5, r1
 80248a4:	4616      	mov	r6, r2
 80248a6:	079b      	lsls	r3, r3, #30
 80248a8:	d526      	bpl.n	80248f8 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80248aa:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80248ae:	ea85 0001 	eor.w	r0, r5, r1
 80248b2:	ea86 0302 	eor.w	r3, r6, r2
 80248b6:	4303      	orrs	r3, r0
 80248b8:	d01e      	beq.n	80248f8 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80248ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80248bc:	114b      	asrs	r3, r1, #5
 80248be:	9600      	str	r6, [sp, #0]
 80248c0:	4283      	cmp	r3, r0
 80248c2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80248c4:	bfb8      	it	lt
 80248c6:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 80248c8:	3301      	adds	r3, #1
 80248ca:	4283      	cmp	r3, r0
 80248cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80248ce:	bfc8      	it	gt
 80248d0:	6363      	strgt	r3, [r4, #52]	; 0x34
 80248d2:	116b      	asrs	r3, r5, #5
 80248d4:	4283      	cmp	r3, r0
 80248d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80248d8:	bfb8      	it	lt
 80248da:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 80248dc:	3301      	adds	r3, #1
 80248de:	4283      	cmp	r3, r0
 80248e0:	4620      	mov	r0, r4
 80248e2:	bfc8      	it	gt
 80248e4:	6363      	strgt	r3, [r4, #52]	; 0x34
 80248e6:	462b      	mov	r3, r5
 80248e8:	f7ff f9c6 	bl	8023c78 <_ZN8touchgfx7Outline10renderLineEiiii>
 80248ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80248ee:	f043 0301 	orr.w	r3, r3, #1
 80248f2:	e9c4 5607 	strd	r5, r6, [r4, #28]
 80248f6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80248f8:	b002      	add	sp, #8
 80248fa:	bd70      	pop	{r4, r5, r6, pc}

080248fc <_ZN8touchgfx7Outline6moveToEii>:
 80248fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80248fe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024900:	4615      	mov	r5, r2
 8024902:	4604      	mov	r4, r0
 8024904:	460e      	mov	r6, r1
 8024906:	079a      	lsls	r2, r3, #30
 8024908:	d401      	bmi.n	802490e <_ZN8touchgfx7Outline6moveToEii+0x12>
 802490a:	f7ff f96f 	bl	8023bec <_ZN8touchgfx7Outline5resetEv>
 802490e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024910:	07db      	lsls	r3, r3, #31
 8024912:	d504      	bpl.n	802491e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8024914:	4620      	mov	r0, r4
 8024916:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802491a:	f7ff ffbf 	bl	802489c <_ZN8touchgfx7Outline6lineToEii>
 802491e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024922:	f346 1c4f 	sbfx	ip, r6, #5, #16
 8024926:	f345 174f 	sbfx	r7, r5, #5, #16
 802492a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802492e:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8024932:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8024936:	428a      	cmp	r2, r1
 8024938:	d015      	beq.n	8024966 <_ZN8touchgfx7Outline6moveToEii+0x6a>
 802493a:	8b61      	ldrh	r1, [r4, #26]
 802493c:	8b22      	ldrh	r2, [r4, #24]
 802493e:	430a      	orrs	r2, r1
 8024940:	d00b      	beq.n	802495a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8024942:	2b00      	cmp	r3, #0
 8024944:	db09      	blt.n	802495a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8024946:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024948:	4293      	cmp	r3, r2
 802494a:	da06      	bge.n	802495a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802494c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024950:	429a      	cmp	r2, r3
 8024952:	d30d      	bcc.n	8024970 <_ZN8touchgfx7Outline6moveToEii+0x74>
 8024954:	2301      	movs	r3, #1
 8024956:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802495a:	2300      	movs	r3, #0
 802495c:	f8a4 c014 	strh.w	ip, [r4, #20]
 8024960:	82e7      	strh	r7, [r4, #22]
 8024962:	8323      	strh	r3, [r4, #24]
 8024964:	8363      	strh	r3, [r4, #26]
 8024966:	61e6      	str	r6, [r4, #28]
 8024968:	62a5      	str	r5, [r4, #40]	; 0x28
 802496a:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802496e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024970:	f104 0314 	add.w	r3, r4, #20
 8024974:	6922      	ldr	r2, [r4, #16]
 8024976:	cb03      	ldmia	r3!, {r0, r1}
 8024978:	6010      	str	r0, [r2, #0]
 802497a:	6051      	str	r1, [r2, #4]
 802497c:	6923      	ldr	r3, [r4, #16]
 802497e:	3308      	adds	r3, #8
 8024980:	6123      	str	r3, [r4, #16]
 8024982:	68a3      	ldr	r3, [r4, #8]
 8024984:	3301      	adds	r3, #1
 8024986:	60a3      	str	r3, [r4, #8]
 8024988:	e7e7      	b.n	802495a <_ZN8touchgfx7Outline6moveToEii+0x5e>

0802498a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802498a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802498e:	b0d1      	sub	sp, #324	; 0x144
 8024990:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8024994:	466c      	mov	r4, sp
 8024996:	1a0d      	subs	r5, r1, r0
 8024998:	f100 0208 	add.w	r2, r0, #8
 802499c:	2d48      	cmp	r5, #72	; 0x48
 802499e:	f340 80ba 	ble.w	8024b16 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80249a2:	112d      	asrs	r5, r5, #4
 80249a4:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 80249a8:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80249ac:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 80249b0:	f9b0 8000 	ldrsh.w	r8, [r0]
 80249b4:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 80249b8:	681e      	ldr	r6, [r3, #0]
 80249ba:	6006      	str	r6, [r0, #0]
 80249bc:	685e      	ldr	r6, [r3, #4]
 80249be:	6046      	str	r6, [r0, #4]
 80249c0:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 80249c4:	f8a3 e002 	strh.w	lr, [r3, #2]
 80249c8:	f8a3 c004 	strh.w	ip, [r3, #4]
 80249cc:	80df      	strh	r7, [r3, #6]
 80249ce:	f1a1 0308 	sub.w	r3, r1, #8
 80249d2:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 80249d6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80249da:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 80249de:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80249e2:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80249e6:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80249ea:	4565      	cmp	r5, ip
 80249ec:	da0f      	bge.n	8024a0e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 80249ee:	681d      	ldr	r5, [r3, #0]
 80249f0:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 80249f4:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80249f8:	6015      	str	r5, [r2, #0]
 80249fa:	685d      	ldr	r5, [r3, #4]
 80249fc:	6055      	str	r5, [r2, #4]
 80249fe:	f821 7c08 	strh.w	r7, [r1, #-8]
 8024a02:	f821 6c06 	strh.w	r6, [r1, #-6]
 8024a06:	f821 ec04 	strh.w	lr, [r1, #-4]
 8024a0a:	f821 cc02 	strh.w	ip, [r1, #-2]
 8024a0e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8024a12:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8024a16:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8024a1a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8024a1e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024a22:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8024a26:	45ac      	cmp	ip, r5
 8024a28:	da0d      	bge.n	8024a46 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8024a2a:	6815      	ldr	r5, [r2, #0]
 8024a2c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024a30:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8024a34:	6005      	str	r5, [r0, #0]
 8024a36:	6855      	ldr	r5, [r2, #4]
 8024a38:	8107      	strh	r7, [r0, #8]
 8024a3a:	6045      	str	r5, [r0, #4]
 8024a3c:	8146      	strh	r6, [r0, #10]
 8024a3e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8024a42:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8024a46:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 8024a4a:	f9b0 7000 	ldrsh.w	r7, [r0]
 8024a4e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8024a52:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8024a56:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8024a5a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024a5e:	4565      	cmp	r5, ip
 8024a60:	da0f      	bge.n	8024a82 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8024a62:	681d      	ldr	r5, [r3, #0]
 8024a64:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024a68:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8024a6c:	6005      	str	r5, [r0, #0]
 8024a6e:	685d      	ldr	r5, [r3, #4]
 8024a70:	6045      	str	r5, [r0, #4]
 8024a72:	f821 7c08 	strh.w	r7, [r1, #-8]
 8024a76:	f821 6c06 	strh.w	r6, [r1, #-6]
 8024a7a:	f821 ec04 	strh.w	lr, [r1, #-4]
 8024a7e:	f821 cc02 	strh.w	ip, [r1, #-2]
 8024a82:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8024a86:	f102 0508 	add.w	r5, r2, #8
 8024a8a:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8024a8e:	f9b0 e000 	ldrsh.w	lr, [r0]
 8024a92:	462f      	mov	r7, r5
 8024a94:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8024a98:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8024a9c:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8024aa0:	4556      	cmp	r6, sl
 8024aa2:	db18      	blt.n	8024ad6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8024aa4:	3b08      	subs	r3, #8
 8024aa6:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8024aaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8024aae:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8024ab2:	45b2      	cmp	sl, r6
 8024ab4:	dbf6      	blt.n	8024aa4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8024ab6:	42ab      	cmp	r3, r5
 8024ab8:	681e      	ldr	r6, [r3, #0]
 8024aba:	d30e      	bcc.n	8024ada <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8024abc:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8024ac0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8024ac4:	602e      	str	r6, [r5, #0]
 8024ac6:	685e      	ldr	r6, [r3, #4]
 8024ac8:	606e      	str	r6, [r5, #4]
 8024aca:	f8a3 9000 	strh.w	r9, [r3]
 8024ace:	f8a3 8002 	strh.w	r8, [r3, #2]
 8024ad2:	809f      	strh	r7, [r3, #4]
 8024ad4:	80da      	strh	r2, [r3, #6]
 8024ad6:	462a      	mov	r2, r5
 8024ad8:	e7d3      	b.n	8024a82 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8024ada:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8024ade:	6006      	str	r6, [r0, #0]
 8024ae0:	685e      	ldr	r6, [r3, #4]
 8024ae2:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8024ae6:	6046      	str	r6, [r0, #4]
 8024ae8:	1a1e      	subs	r6, r3, r0
 8024aea:	80da      	strh	r2, [r3, #6]
 8024aec:	1b4a      	subs	r2, r1, r5
 8024aee:	f8a3 e000 	strh.w	lr, [r3]
 8024af2:	10d2      	asrs	r2, r2, #3
 8024af4:	f8a3 c002 	strh.w	ip, [r3, #2]
 8024af8:	f8a3 8004 	strh.w	r8, [r3, #4]
 8024afc:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8024b00:	bfb5      	itete	lt
 8024b02:	e9c4 0300 	strdlt	r0, r3, [r4]
 8024b06:	4607      	movge	r7, r0
 8024b08:	460b      	movlt	r3, r1
 8024b0a:	e9c4 5100 	strdge	r5, r1, [r4]
 8024b0e:	4638      	mov	r0, r7
 8024b10:	3408      	adds	r4, #8
 8024b12:	4619      	mov	r1, r3
 8024b14:	e73f      	b.n	8024996 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024b16:	4291      	cmp	r1, r2
 8024b18:	d925      	bls.n	8024b66 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8024b1a:	f1a2 0310 	sub.w	r3, r2, #16
 8024b1e:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8024b22:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8024b26:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 8024b2a:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8024b2e:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8024b32:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8024b36:	42ae      	cmp	r6, r5
 8024b38:	da13      	bge.n	8024b62 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8024b3a:	461d      	mov	r5, r3
 8024b3c:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8024b40:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8024b44:	3b08      	subs	r3, #8
 8024b46:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8024b4a:	619e      	str	r6, [r3, #24]
 8024b4c:	42a8      	cmp	r0, r5
 8024b4e:	686e      	ldr	r6, [r5, #4]
 8024b50:	f8a3 c010 	strh.w	ip, [r3, #16]
 8024b54:	61de      	str	r6, [r3, #28]
 8024b56:	825f      	strh	r7, [r3, #18]
 8024b58:	f8a3 8014 	strh.w	r8, [r3, #20]
 8024b5c:	f8a3 e016 	strh.w	lr, [r3, #22]
 8024b60:	d1dd      	bne.n	8024b1e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8024b62:	3208      	adds	r2, #8
 8024b64:	e7d7      	b.n	8024b16 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024b66:	466b      	mov	r3, sp
 8024b68:	429c      	cmp	r4, r3
 8024b6a:	d903      	bls.n	8024b74 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8024b6c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8024b70:	3c08      	subs	r4, #8
 8024b72:	e710      	b.n	8024996 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024b74:	b051      	add	sp, #324	; 0x144
 8024b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024b7a <_ZN8touchgfx7Outline9sortCellsEv>:
 8024b7a:	6881      	ldr	r1, [r0, #8]
 8024b7c:	b111      	cbz	r1, 8024b84 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8024b7e:	68c0      	ldr	r0, [r0, #12]
 8024b80:	f7ff bf03 	b.w	802498a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8024b84:	4770      	bx	lr

08024b86 <_ZN8touchgfx7Outline8getCellsEv>:
 8024b86:	b510      	push	{r4, lr}
 8024b88:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024b8a:	4604      	mov	r4, r0
 8024b8c:	07da      	lsls	r2, r3, #31
 8024b8e:	d507      	bpl.n	8024ba0 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8024b90:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8024b94:	f7ff fe82 	bl	802489c <_ZN8touchgfx7Outline6lineToEii>
 8024b98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024b9a:	f023 0301 	bic.w	r3, r3, #1
 8024b9e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024ba0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024ba2:	079b      	lsls	r3, r3, #30
 8024ba4:	d51a      	bpl.n	8024bdc <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8024ba6:	8b62      	ldrh	r2, [r4, #26]
 8024ba8:	8b23      	ldrh	r3, [r4, #24]
 8024baa:	4313      	orrs	r3, r2
 8024bac:	d00d      	beq.n	8024bca <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024bae:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024bb2:	2b00      	cmp	r3, #0
 8024bb4:	db09      	blt.n	8024bca <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024bb6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024bb8:	4293      	cmp	r3, r2
 8024bba:	da06      	bge.n	8024bca <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024bbc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8024bc0:	429a      	cmp	r2, r3
 8024bc2:	d80d      	bhi.n	8024be0 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8024bc4:	2301      	movs	r3, #1
 8024bc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024bca:	68a0      	ldr	r0, [r4, #8]
 8024bcc:	b138      	cbz	r0, 8024bde <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8024bce:	4620      	mov	r0, r4
 8024bd0:	f7ff ffd3 	bl	8024b7a <_ZN8touchgfx7Outline9sortCellsEv>
 8024bd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024bd6:	f023 0302 	bic.w	r3, r3, #2
 8024bda:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024bdc:	68e0      	ldr	r0, [r4, #12]
 8024bde:	bd10      	pop	{r4, pc}
 8024be0:	f104 0314 	add.w	r3, r4, #20
 8024be4:	6922      	ldr	r2, [r4, #16]
 8024be6:	cb03      	ldmia	r3!, {r0, r1}
 8024be8:	6010      	str	r0, [r2, #0]
 8024bea:	6051      	str	r1, [r2, #4]
 8024bec:	6923      	ldr	r3, [r4, #16]
 8024bee:	3308      	adds	r3, #8
 8024bf0:	6123      	str	r3, [r4, #16]
 8024bf2:	68a3      	ldr	r3, [r4, #8]
 8024bf4:	3301      	adds	r3, #1
 8024bf6:	60a3      	str	r3, [r4, #8]
 8024bf8:	e7e7      	b.n	8024bca <_ZN8touchgfx7Outline8getCellsEv+0x44>

08024bfa <_ZN8touchgfx8ScanlineD1Ev>:
 8024bfa:	4770      	bx	lr

08024bfc <_ZN8touchgfx8ScanlineD0Ev>:
 8024bfc:	b510      	push	{r4, lr}
 8024bfe:	4604      	mov	r4, r0
 8024c00:	2124      	movs	r1, #36	; 0x24
 8024c02:	f000 f888 	bl	8024d16 <_ZdlPvj>
 8024c06:	4620      	mov	r0, r4
 8024c08:	bd10      	pop	{r4, pc}

08024c0a <_ZN8touchgfx8Scanline5resetEv>:
 8024c0a:	b510      	push	{r4, lr}
 8024c0c:	4604      	mov	r4, r0
 8024c0e:	f7f1 fc2d 	bl	801646c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8024c12:	61a0      	str	r0, [r4, #24]
 8024c14:	f7f1 fc30 	bl	8016478 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8024c18:	61e0      	str	r0, [r4, #28]
 8024c1a:	f7f1 fc33 	bl	8016484 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8024c1e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024c22:	6220      	str	r0, [r4, #32]
 8024c24:	6160      	str	r0, [r4, #20]
 8024c26:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8024c2a:	69e3      	ldr	r3, [r4, #28]
 8024c2c:	6123      	str	r3, [r4, #16]
 8024c2e:	2300      	movs	r3, #0
 8024c30:	60e3      	str	r3, [r4, #12]
 8024c32:	bd10      	pop	{r4, pc}

08024c34 <_ZN8touchgfx8ScanlineC1Ev>:
 8024c34:	4b09      	ldr	r3, [pc, #36]	; (8024c5c <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 8024c36:	b510      	push	{r4, lr}
 8024c38:	6003      	str	r3, [r0, #0]
 8024c3a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024c3e:	4604      	mov	r4, r0
 8024c40:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8024c44:	2300      	movs	r3, #0
 8024c46:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024c4a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8024c4e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8024c52:	f7ff ffda 	bl	8024c0a <_ZN8touchgfx8Scanline5resetEv>
 8024c56:	4620      	mov	r0, r4
 8024c58:	bd10      	pop	{r4, pc}
 8024c5a:	bf00      	nop
 8024c5c:	0802d7bc 	.word	0x0802d7bc

08024c60 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8024c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c64:	1e0c      	subs	r4, r1, #0
 8024c66:	4605      	mov	r5, r0
 8024c68:	4617      	mov	r7, r2
 8024c6a:	461e      	mov	r6, r3
 8024c6c:	da03      	bge.n	8024c76 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8024c6e:	4426      	add	r6, r4
 8024c70:	2e01      	cmp	r6, #1
 8024c72:	d421      	bmi.n	8024cb8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024c74:	2400      	movs	r4, #0
 8024c76:	f7f1 fbf3 	bl	8016460 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024c7a:	42a0      	cmp	r0, r4
 8024c7c:	dd1c      	ble.n	8024cb8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024c7e:	eb04 0806 	add.w	r8, r4, r6
 8024c82:	f7f1 fbed 	bl	8016460 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024c86:	4580      	cmp	r8, r0
 8024c88:	d902      	bls.n	8024c90 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8024c8a:	f7f1 fbe9 	bl	8016460 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024c8e:	1b06      	subs	r6, r0, r4
 8024c90:	69a8      	ldr	r0, [r5, #24]
 8024c92:	4632      	mov	r2, r6
 8024c94:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8024c98:	4420      	add	r0, r4
 8024c9a:	f7f4 f92f 	bl	8018efc <_ZN8touchgfx6memsetEPvhm>
 8024c9e:	686b      	ldr	r3, [r5, #4]
 8024ca0:	b2b2      	uxth	r2, r6
 8024ca2:	3301      	adds	r3, #1
 8024ca4:	42a3      	cmp	r3, r4
 8024ca6:	696b      	ldr	r3, [r5, #20]
 8024ca8:	d108      	bne.n	8024cbc <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8024caa:	8819      	ldrh	r1, [r3, #0]
 8024cac:	440a      	add	r2, r1
 8024cae:	801a      	strh	r2, [r3, #0]
 8024cb0:	3c01      	subs	r4, #1
 8024cb2:	4434      	add	r4, r6
 8024cb4:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8024cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024cbc:	1c99      	adds	r1, r3, #2
 8024cbe:	6169      	str	r1, [r5, #20]
 8024cc0:	805a      	strh	r2, [r3, #2]
 8024cc2:	692b      	ldr	r3, [r5, #16]
 8024cc4:	1c9a      	adds	r2, r3, #2
 8024cc6:	612a      	str	r2, [r5, #16]
 8024cc8:	805c      	strh	r4, [r3, #2]
 8024cca:	68eb      	ldr	r3, [r5, #12]
 8024ccc:	3301      	adds	r3, #1
 8024cce:	60eb      	str	r3, [r5, #12]
 8024cd0:	e7ee      	b.n	8024cb0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08024cd2 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8024cd2:	4770      	bx	lr

08024cd4 <_ZN8touchgfx15RenderingBufferD0Ev>:
 8024cd4:	b510      	push	{r4, lr}
 8024cd6:	4604      	mov	r4, r0
 8024cd8:	2118      	movs	r1, #24
 8024cda:	f000 f81c 	bl	8024d16 <_ZdlPvj>
 8024cde:	4620      	mov	r0, r4
 8024ce0:	bd10      	pop	{r4, pc}
	...

08024ce4 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8024ce4:	4a04      	ldr	r2, [pc, #16]	; (8024cf8 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 8024ce6:	6002      	str	r2, [r0, #0]
 8024ce8:	2200      	movs	r2, #0
 8024cea:	6042      	str	r2, [r0, #4]
 8024cec:	7202      	strb	r2, [r0, #8]
 8024cee:	6142      	str	r2, [r0, #20]
 8024cf0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8024cf4:	4770      	bx	lr
 8024cf6:	bf00      	nop
 8024cf8:	0802d7cc 	.word	0x0802d7cc

08024cfc <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8024cfc:	60c3      	str	r3, [r0, #12]
 8024cfe:	9b00      	ldr	r3, [sp, #0]
 8024d00:	6041      	str	r1, [r0, #4]
 8024d02:	6103      	str	r3, [r0, #16]
 8024d04:	9b01      	ldr	r3, [sp, #4]
 8024d06:	7202      	strb	r2, [r0, #8]
 8024d08:	6143      	str	r3, [r0, #20]
 8024d0a:	4770      	bx	lr

08024d0c <__aeabi_atexit>:
 8024d0c:	460b      	mov	r3, r1
 8024d0e:	4601      	mov	r1, r0
 8024d10:	4618      	mov	r0, r3
 8024d12:	f000 b89b 	b.w	8024e4c <__cxa_atexit>

08024d16 <_ZdlPvj>:
 8024d16:	f000 b812 	b.w	8024d3e <_ZdlPv>

08024d1a <__cxa_guard_acquire>:
 8024d1a:	6803      	ldr	r3, [r0, #0]
 8024d1c:	07db      	lsls	r3, r3, #31
 8024d1e:	d406      	bmi.n	8024d2e <__cxa_guard_acquire+0x14>
 8024d20:	7843      	ldrb	r3, [r0, #1]
 8024d22:	b103      	cbz	r3, 8024d26 <__cxa_guard_acquire+0xc>
 8024d24:	deff      	udf	#255	; 0xff
 8024d26:	2301      	movs	r3, #1
 8024d28:	7043      	strb	r3, [r0, #1]
 8024d2a:	4618      	mov	r0, r3
 8024d2c:	4770      	bx	lr
 8024d2e:	2000      	movs	r0, #0
 8024d30:	4770      	bx	lr

08024d32 <__cxa_guard_release>:
 8024d32:	2301      	movs	r3, #1
 8024d34:	6003      	str	r3, [r0, #0]
 8024d36:	4770      	bx	lr

08024d38 <__cxa_pure_virtual>:
 8024d38:	b508      	push	{r3, lr}
 8024d3a:	f000 f80f 	bl	8024d5c <_ZSt9terminatev>

08024d3e <_ZdlPv>:
 8024d3e:	f000 b8d7 	b.w	8024ef0 <free>

08024d42 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024d42:	b508      	push	{r3, lr}
 8024d44:	4780      	blx	r0
 8024d46:	f000 f855 	bl	8024df4 <abort>
	...

08024d4c <_ZSt13get_terminatev>:
 8024d4c:	4b02      	ldr	r3, [pc, #8]	; (8024d58 <_ZSt13get_terminatev+0xc>)
 8024d4e:	6818      	ldr	r0, [r3, #0]
 8024d50:	f3bf 8f5b 	dmb	ish
 8024d54:	4770      	bx	lr
 8024d56:	bf00      	nop
 8024d58:	20000070 	.word	0x20000070

08024d5c <_ZSt9terminatev>:
 8024d5c:	b508      	push	{r3, lr}
 8024d5e:	f7ff fff5 	bl	8024d4c <_ZSt13get_terminatev>
 8024d62:	f7ff ffee 	bl	8024d42 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08024d68 <round>:
 8024d68:	ee10 1a90 	vmov	r1, s1
 8024d6c:	f3c1 500a 	ubfx	r0, r1, #20, #11
 8024d70:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 8024d74:	2a13      	cmp	r2, #19
 8024d76:	b510      	push	{r4, lr}
 8024d78:	ee10 3a10 	vmov	r3, s0
 8024d7c:	dc19      	bgt.n	8024db2 <round+0x4a>
 8024d7e:	2a00      	cmp	r2, #0
 8024d80:	da09      	bge.n	8024d96 <round+0x2e>
 8024d82:	3201      	adds	r2, #1
 8024d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8024d88:	d103      	bne.n	8024d92 <round+0x2a>
 8024d8a:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8024d8e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8024d92:	2000      	movs	r0, #0
 8024d94:	e027      	b.n	8024de6 <round+0x7e>
 8024d96:	4816      	ldr	r0, [pc, #88]	; (8024df0 <round+0x88>)
 8024d98:	4110      	asrs	r0, r2
 8024d9a:	ea01 0400 	and.w	r4, r1, r0
 8024d9e:	4323      	orrs	r3, r4
 8024da0:	d00e      	beq.n	8024dc0 <round+0x58>
 8024da2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8024da6:	fa43 f202 	asr.w	r2, r3, r2
 8024daa:	4411      	add	r1, r2
 8024dac:	ea21 0100 	bic.w	r1, r1, r0
 8024db0:	e7ef      	b.n	8024d92 <round+0x2a>
 8024db2:	2a33      	cmp	r2, #51	; 0x33
 8024db4:	dd05      	ble.n	8024dc2 <round+0x5a>
 8024db6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8024dba:	d101      	bne.n	8024dc0 <round+0x58>
 8024dbc:	ee30 0b00 	vadd.f64	d0, d0, d0
 8024dc0:	bd10      	pop	{r4, pc}
 8024dc2:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8024dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8024dca:	fa20 f404 	lsr.w	r4, r0, r4
 8024dce:	4223      	tst	r3, r4
 8024dd0:	d0f6      	beq.n	8024dc0 <round+0x58>
 8024dd2:	2001      	movs	r0, #1
 8024dd4:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8024dd8:	fa00 f202 	lsl.w	r2, r0, r2
 8024ddc:	189b      	adds	r3, r3, r2
 8024dde:	bf28      	it	cs
 8024de0:	1809      	addcs	r1, r1, r0
 8024de2:	ea23 0004 	bic.w	r0, r3, r4
 8024de6:	460b      	mov	r3, r1
 8024de8:	4602      	mov	r2, r0
 8024dea:	ec43 2b10 	vmov	d0, r2, r3
 8024dee:	e7e7      	b.n	8024dc0 <round+0x58>
 8024df0:	000fffff 	.word	0x000fffff

08024df4 <abort>:
 8024df4:	b508      	push	{r3, lr}
 8024df6:	2006      	movs	r0, #6
 8024df8:	f001 f922 	bl	8026040 <raise>
 8024dfc:	2001      	movs	r0, #1
 8024dfe:	f7dd fb3d 	bl	800247c <_exit>
	...

08024e04 <__assert_func>:
 8024e04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024e06:	4614      	mov	r4, r2
 8024e08:	461a      	mov	r2, r3
 8024e0a:	4b09      	ldr	r3, [pc, #36]	; (8024e30 <__assert_func+0x2c>)
 8024e0c:	681b      	ldr	r3, [r3, #0]
 8024e0e:	4605      	mov	r5, r0
 8024e10:	68d8      	ldr	r0, [r3, #12]
 8024e12:	b14c      	cbz	r4, 8024e28 <__assert_func+0x24>
 8024e14:	4b07      	ldr	r3, [pc, #28]	; (8024e34 <__assert_func+0x30>)
 8024e16:	9100      	str	r1, [sp, #0]
 8024e18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024e1c:	4906      	ldr	r1, [pc, #24]	; (8024e38 <__assert_func+0x34>)
 8024e1e:	462b      	mov	r3, r5
 8024e20:	f000 f828 	bl	8024e74 <fiprintf>
 8024e24:	f7ff ffe6 	bl	8024df4 <abort>
 8024e28:	4b04      	ldr	r3, [pc, #16]	; (8024e3c <__assert_func+0x38>)
 8024e2a:	461c      	mov	r4, r3
 8024e2c:	e7f3      	b.n	8024e16 <__assert_func+0x12>
 8024e2e:	bf00      	nop
 8024e30:	20000074 	.word	0x20000074
 8024e34:	0802d7d4 	.word	0x0802d7d4
 8024e38:	0802d7e1 	.word	0x0802d7e1
 8024e3c:	0802d80f 	.word	0x0802d80f

08024e40 <atexit>:
 8024e40:	2300      	movs	r3, #0
 8024e42:	4601      	mov	r1, r0
 8024e44:	461a      	mov	r2, r3
 8024e46:	4618      	mov	r0, r3
 8024e48:	f002 b874 	b.w	8026f34 <__register_exitproc>

08024e4c <__cxa_atexit>:
 8024e4c:	b510      	push	{r4, lr}
 8024e4e:	4c05      	ldr	r4, [pc, #20]	; (8024e64 <__cxa_atexit+0x18>)
 8024e50:	4613      	mov	r3, r2
 8024e52:	b12c      	cbz	r4, 8024e60 <__cxa_atexit+0x14>
 8024e54:	460a      	mov	r2, r1
 8024e56:	4601      	mov	r1, r0
 8024e58:	2002      	movs	r0, #2
 8024e5a:	f002 f86b 	bl	8026f34 <__register_exitproc>
 8024e5e:	bd10      	pop	{r4, pc}
 8024e60:	4620      	mov	r0, r4
 8024e62:	e7fc      	b.n	8024e5e <__cxa_atexit+0x12>
 8024e64:	08026f35 	.word	0x08026f35

08024e68 <__errno>:
 8024e68:	4b01      	ldr	r3, [pc, #4]	; (8024e70 <__errno+0x8>)
 8024e6a:	6818      	ldr	r0, [r3, #0]
 8024e6c:	4770      	bx	lr
 8024e6e:	bf00      	nop
 8024e70:	20000074 	.word	0x20000074

08024e74 <fiprintf>:
 8024e74:	b40e      	push	{r1, r2, r3}
 8024e76:	b503      	push	{r0, r1, lr}
 8024e78:	4601      	mov	r1, r0
 8024e7a:	ab03      	add	r3, sp, #12
 8024e7c:	4805      	ldr	r0, [pc, #20]	; (8024e94 <fiprintf+0x20>)
 8024e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8024e82:	6800      	ldr	r0, [r0, #0]
 8024e84:	9301      	str	r3, [sp, #4]
 8024e86:	f000 f925 	bl	80250d4 <_vfiprintf_r>
 8024e8a:	b002      	add	sp, #8
 8024e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8024e90:	b003      	add	sp, #12
 8024e92:	4770      	bx	lr
 8024e94:	20000074 	.word	0x20000074

08024e98 <__libc_init_array>:
 8024e98:	b570      	push	{r4, r5, r6, lr}
 8024e9a:	4d0d      	ldr	r5, [pc, #52]	; (8024ed0 <__libc_init_array+0x38>)
 8024e9c:	4c0d      	ldr	r4, [pc, #52]	; (8024ed4 <__libc_init_array+0x3c>)
 8024e9e:	1b64      	subs	r4, r4, r5
 8024ea0:	10a4      	asrs	r4, r4, #2
 8024ea2:	2600      	movs	r6, #0
 8024ea4:	42a6      	cmp	r6, r4
 8024ea6:	d109      	bne.n	8024ebc <__libc_init_array+0x24>
 8024ea8:	4d0b      	ldr	r5, [pc, #44]	; (8024ed8 <__libc_init_array+0x40>)
 8024eaa:	4c0c      	ldr	r4, [pc, #48]	; (8024edc <__libc_init_array+0x44>)
 8024eac:	f004 fba2 	bl	80295f4 <_init>
 8024eb0:	1b64      	subs	r4, r4, r5
 8024eb2:	10a4      	asrs	r4, r4, #2
 8024eb4:	2600      	movs	r6, #0
 8024eb6:	42a6      	cmp	r6, r4
 8024eb8:	d105      	bne.n	8024ec6 <__libc_init_array+0x2e>
 8024eba:	bd70      	pop	{r4, r5, r6, pc}
 8024ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8024ec0:	4798      	blx	r3
 8024ec2:	3601      	adds	r6, #1
 8024ec4:	e7ee      	b.n	8024ea4 <__libc_init_array+0xc>
 8024ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8024eca:	4798      	blx	r3
 8024ecc:	3601      	adds	r6, #1
 8024ece:	e7f2      	b.n	8024eb6 <__libc_init_array+0x1e>
 8024ed0:	080d3214 	.word	0x080d3214
 8024ed4:	080d3214 	.word	0x080d3214
 8024ed8:	080d3214 	.word	0x080d3214
 8024edc:	080d3244 	.word	0x080d3244

08024ee0 <malloc>:
 8024ee0:	4b02      	ldr	r3, [pc, #8]	; (8024eec <malloc+0xc>)
 8024ee2:	4601      	mov	r1, r0
 8024ee4:	6818      	ldr	r0, [r3, #0]
 8024ee6:	f000 b871 	b.w	8024fcc <_malloc_r>
 8024eea:	bf00      	nop
 8024eec:	20000074 	.word	0x20000074

08024ef0 <free>:
 8024ef0:	4b02      	ldr	r3, [pc, #8]	; (8024efc <free+0xc>)
 8024ef2:	4601      	mov	r1, r0
 8024ef4:	6818      	ldr	r0, [r3, #0]
 8024ef6:	f000 b819 	b.w	8024f2c <_free_r>
 8024efa:	bf00      	nop
 8024efc:	20000074 	.word	0x20000074

08024f00 <memcpy>:
 8024f00:	440a      	add	r2, r1
 8024f02:	4291      	cmp	r1, r2
 8024f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8024f08:	d100      	bne.n	8024f0c <memcpy+0xc>
 8024f0a:	4770      	bx	lr
 8024f0c:	b510      	push	{r4, lr}
 8024f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024f12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024f16:	4291      	cmp	r1, r2
 8024f18:	d1f9      	bne.n	8024f0e <memcpy+0xe>
 8024f1a:	bd10      	pop	{r4, pc}

08024f1c <memset>:
 8024f1c:	4402      	add	r2, r0
 8024f1e:	4603      	mov	r3, r0
 8024f20:	4293      	cmp	r3, r2
 8024f22:	d100      	bne.n	8024f26 <memset+0xa>
 8024f24:	4770      	bx	lr
 8024f26:	f803 1b01 	strb.w	r1, [r3], #1
 8024f2a:	e7f9      	b.n	8024f20 <memset+0x4>

08024f2c <_free_r>:
 8024f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024f2e:	2900      	cmp	r1, #0
 8024f30:	d048      	beq.n	8024fc4 <_free_r+0x98>
 8024f32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024f36:	9001      	str	r0, [sp, #4]
 8024f38:	2b00      	cmp	r3, #0
 8024f3a:	f1a1 0404 	sub.w	r4, r1, #4
 8024f3e:	bfb8      	it	lt
 8024f40:	18e4      	addlt	r4, r4, r3
 8024f42:	f003 fc25 	bl	8028790 <__malloc_lock>
 8024f46:	4a20      	ldr	r2, [pc, #128]	; (8024fc8 <_free_r+0x9c>)
 8024f48:	9801      	ldr	r0, [sp, #4]
 8024f4a:	6813      	ldr	r3, [r2, #0]
 8024f4c:	4615      	mov	r5, r2
 8024f4e:	b933      	cbnz	r3, 8024f5e <_free_r+0x32>
 8024f50:	6063      	str	r3, [r4, #4]
 8024f52:	6014      	str	r4, [r2, #0]
 8024f54:	b003      	add	sp, #12
 8024f56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024f5a:	f003 bc1f 	b.w	802879c <__malloc_unlock>
 8024f5e:	42a3      	cmp	r3, r4
 8024f60:	d90b      	bls.n	8024f7a <_free_r+0x4e>
 8024f62:	6821      	ldr	r1, [r4, #0]
 8024f64:	1862      	adds	r2, r4, r1
 8024f66:	4293      	cmp	r3, r2
 8024f68:	bf04      	itt	eq
 8024f6a:	681a      	ldreq	r2, [r3, #0]
 8024f6c:	685b      	ldreq	r3, [r3, #4]
 8024f6e:	6063      	str	r3, [r4, #4]
 8024f70:	bf04      	itt	eq
 8024f72:	1852      	addeq	r2, r2, r1
 8024f74:	6022      	streq	r2, [r4, #0]
 8024f76:	602c      	str	r4, [r5, #0]
 8024f78:	e7ec      	b.n	8024f54 <_free_r+0x28>
 8024f7a:	461a      	mov	r2, r3
 8024f7c:	685b      	ldr	r3, [r3, #4]
 8024f7e:	b10b      	cbz	r3, 8024f84 <_free_r+0x58>
 8024f80:	42a3      	cmp	r3, r4
 8024f82:	d9fa      	bls.n	8024f7a <_free_r+0x4e>
 8024f84:	6811      	ldr	r1, [r2, #0]
 8024f86:	1855      	adds	r5, r2, r1
 8024f88:	42a5      	cmp	r5, r4
 8024f8a:	d10b      	bne.n	8024fa4 <_free_r+0x78>
 8024f8c:	6824      	ldr	r4, [r4, #0]
 8024f8e:	4421      	add	r1, r4
 8024f90:	1854      	adds	r4, r2, r1
 8024f92:	42a3      	cmp	r3, r4
 8024f94:	6011      	str	r1, [r2, #0]
 8024f96:	d1dd      	bne.n	8024f54 <_free_r+0x28>
 8024f98:	681c      	ldr	r4, [r3, #0]
 8024f9a:	685b      	ldr	r3, [r3, #4]
 8024f9c:	6053      	str	r3, [r2, #4]
 8024f9e:	4421      	add	r1, r4
 8024fa0:	6011      	str	r1, [r2, #0]
 8024fa2:	e7d7      	b.n	8024f54 <_free_r+0x28>
 8024fa4:	d902      	bls.n	8024fac <_free_r+0x80>
 8024fa6:	230c      	movs	r3, #12
 8024fa8:	6003      	str	r3, [r0, #0]
 8024faa:	e7d3      	b.n	8024f54 <_free_r+0x28>
 8024fac:	6825      	ldr	r5, [r4, #0]
 8024fae:	1961      	adds	r1, r4, r5
 8024fb0:	428b      	cmp	r3, r1
 8024fb2:	bf04      	itt	eq
 8024fb4:	6819      	ldreq	r1, [r3, #0]
 8024fb6:	685b      	ldreq	r3, [r3, #4]
 8024fb8:	6063      	str	r3, [r4, #4]
 8024fba:	bf04      	itt	eq
 8024fbc:	1949      	addeq	r1, r1, r5
 8024fbe:	6021      	streq	r1, [r4, #0]
 8024fc0:	6054      	str	r4, [r2, #4]
 8024fc2:	e7c7      	b.n	8024f54 <_free_r+0x28>
 8024fc4:	b003      	add	sp, #12
 8024fc6:	bd30      	pop	{r4, r5, pc}
 8024fc8:	200567dc 	.word	0x200567dc

08024fcc <_malloc_r>:
 8024fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024fce:	1ccd      	adds	r5, r1, #3
 8024fd0:	f025 0503 	bic.w	r5, r5, #3
 8024fd4:	3508      	adds	r5, #8
 8024fd6:	2d0c      	cmp	r5, #12
 8024fd8:	bf38      	it	cc
 8024fda:	250c      	movcc	r5, #12
 8024fdc:	2d00      	cmp	r5, #0
 8024fde:	4606      	mov	r6, r0
 8024fe0:	db01      	blt.n	8024fe6 <_malloc_r+0x1a>
 8024fe2:	42a9      	cmp	r1, r5
 8024fe4:	d903      	bls.n	8024fee <_malloc_r+0x22>
 8024fe6:	230c      	movs	r3, #12
 8024fe8:	6033      	str	r3, [r6, #0]
 8024fea:	2000      	movs	r0, #0
 8024fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024fee:	f003 fbcf 	bl	8028790 <__malloc_lock>
 8024ff2:	4921      	ldr	r1, [pc, #132]	; (8025078 <_malloc_r+0xac>)
 8024ff4:	680a      	ldr	r2, [r1, #0]
 8024ff6:	4614      	mov	r4, r2
 8024ff8:	b99c      	cbnz	r4, 8025022 <_malloc_r+0x56>
 8024ffa:	4f20      	ldr	r7, [pc, #128]	; (802507c <_malloc_r+0xb0>)
 8024ffc:	683b      	ldr	r3, [r7, #0]
 8024ffe:	b923      	cbnz	r3, 802500a <_malloc_r+0x3e>
 8025000:	4621      	mov	r1, r4
 8025002:	4630      	mov	r0, r6
 8025004:	f000 ffde 	bl	8025fc4 <_sbrk_r>
 8025008:	6038      	str	r0, [r7, #0]
 802500a:	4629      	mov	r1, r5
 802500c:	4630      	mov	r0, r6
 802500e:	f000 ffd9 	bl	8025fc4 <_sbrk_r>
 8025012:	1c43      	adds	r3, r0, #1
 8025014:	d123      	bne.n	802505e <_malloc_r+0x92>
 8025016:	230c      	movs	r3, #12
 8025018:	6033      	str	r3, [r6, #0]
 802501a:	4630      	mov	r0, r6
 802501c:	f003 fbbe 	bl	802879c <__malloc_unlock>
 8025020:	e7e3      	b.n	8024fea <_malloc_r+0x1e>
 8025022:	6823      	ldr	r3, [r4, #0]
 8025024:	1b5b      	subs	r3, r3, r5
 8025026:	d417      	bmi.n	8025058 <_malloc_r+0x8c>
 8025028:	2b0b      	cmp	r3, #11
 802502a:	d903      	bls.n	8025034 <_malloc_r+0x68>
 802502c:	6023      	str	r3, [r4, #0]
 802502e:	441c      	add	r4, r3
 8025030:	6025      	str	r5, [r4, #0]
 8025032:	e004      	b.n	802503e <_malloc_r+0x72>
 8025034:	6863      	ldr	r3, [r4, #4]
 8025036:	42a2      	cmp	r2, r4
 8025038:	bf0c      	ite	eq
 802503a:	600b      	streq	r3, [r1, #0]
 802503c:	6053      	strne	r3, [r2, #4]
 802503e:	4630      	mov	r0, r6
 8025040:	f003 fbac 	bl	802879c <__malloc_unlock>
 8025044:	f104 000b 	add.w	r0, r4, #11
 8025048:	1d23      	adds	r3, r4, #4
 802504a:	f020 0007 	bic.w	r0, r0, #7
 802504e:	1ac2      	subs	r2, r0, r3
 8025050:	d0cc      	beq.n	8024fec <_malloc_r+0x20>
 8025052:	1a1b      	subs	r3, r3, r0
 8025054:	50a3      	str	r3, [r4, r2]
 8025056:	e7c9      	b.n	8024fec <_malloc_r+0x20>
 8025058:	4622      	mov	r2, r4
 802505a:	6864      	ldr	r4, [r4, #4]
 802505c:	e7cc      	b.n	8024ff8 <_malloc_r+0x2c>
 802505e:	1cc4      	adds	r4, r0, #3
 8025060:	f024 0403 	bic.w	r4, r4, #3
 8025064:	42a0      	cmp	r0, r4
 8025066:	d0e3      	beq.n	8025030 <_malloc_r+0x64>
 8025068:	1a21      	subs	r1, r4, r0
 802506a:	4630      	mov	r0, r6
 802506c:	f000 ffaa 	bl	8025fc4 <_sbrk_r>
 8025070:	3001      	adds	r0, #1
 8025072:	d1dd      	bne.n	8025030 <_malloc_r+0x64>
 8025074:	e7cf      	b.n	8025016 <_malloc_r+0x4a>
 8025076:	bf00      	nop
 8025078:	200567dc 	.word	0x200567dc
 802507c:	200567e0 	.word	0x200567e0

08025080 <__sfputc_r>:
 8025080:	6893      	ldr	r3, [r2, #8]
 8025082:	3b01      	subs	r3, #1
 8025084:	2b00      	cmp	r3, #0
 8025086:	b410      	push	{r4}
 8025088:	6093      	str	r3, [r2, #8]
 802508a:	da08      	bge.n	802509e <__sfputc_r+0x1e>
 802508c:	6994      	ldr	r4, [r2, #24]
 802508e:	42a3      	cmp	r3, r4
 8025090:	db01      	blt.n	8025096 <__sfputc_r+0x16>
 8025092:	290a      	cmp	r1, #10
 8025094:	d103      	bne.n	802509e <__sfputc_r+0x1e>
 8025096:	f85d 4b04 	ldr.w	r4, [sp], #4
 802509a:	f001 be8b 	b.w	8026db4 <__swbuf_r>
 802509e:	6813      	ldr	r3, [r2, #0]
 80250a0:	1c58      	adds	r0, r3, #1
 80250a2:	6010      	str	r0, [r2, #0]
 80250a4:	7019      	strb	r1, [r3, #0]
 80250a6:	4608      	mov	r0, r1
 80250a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80250ac:	4770      	bx	lr

080250ae <__sfputs_r>:
 80250ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80250b0:	4606      	mov	r6, r0
 80250b2:	460f      	mov	r7, r1
 80250b4:	4614      	mov	r4, r2
 80250b6:	18d5      	adds	r5, r2, r3
 80250b8:	42ac      	cmp	r4, r5
 80250ba:	d101      	bne.n	80250c0 <__sfputs_r+0x12>
 80250bc:	2000      	movs	r0, #0
 80250be:	e007      	b.n	80250d0 <__sfputs_r+0x22>
 80250c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80250c4:	463a      	mov	r2, r7
 80250c6:	4630      	mov	r0, r6
 80250c8:	f7ff ffda 	bl	8025080 <__sfputc_r>
 80250cc:	1c43      	adds	r3, r0, #1
 80250ce:	d1f3      	bne.n	80250b8 <__sfputs_r+0xa>
 80250d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080250d4 <_vfiprintf_r>:
 80250d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250d8:	460d      	mov	r5, r1
 80250da:	b09d      	sub	sp, #116	; 0x74
 80250dc:	4614      	mov	r4, r2
 80250de:	4698      	mov	r8, r3
 80250e0:	4606      	mov	r6, r0
 80250e2:	b118      	cbz	r0, 80250ec <_vfiprintf_r+0x18>
 80250e4:	6983      	ldr	r3, [r0, #24]
 80250e6:	b90b      	cbnz	r3, 80250ec <_vfiprintf_r+0x18>
 80250e8:	f002 feae 	bl	8027e48 <__sinit>
 80250ec:	4b89      	ldr	r3, [pc, #548]	; (8025314 <_vfiprintf_r+0x240>)
 80250ee:	429d      	cmp	r5, r3
 80250f0:	d11b      	bne.n	802512a <_vfiprintf_r+0x56>
 80250f2:	6875      	ldr	r5, [r6, #4]
 80250f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80250f6:	07d9      	lsls	r1, r3, #31
 80250f8:	d405      	bmi.n	8025106 <_vfiprintf_r+0x32>
 80250fa:	89ab      	ldrh	r3, [r5, #12]
 80250fc:	059a      	lsls	r2, r3, #22
 80250fe:	d402      	bmi.n	8025106 <_vfiprintf_r+0x32>
 8025100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025102:	f003 fab2 	bl	802866a <__retarget_lock_acquire_recursive>
 8025106:	89ab      	ldrh	r3, [r5, #12]
 8025108:	071b      	lsls	r3, r3, #28
 802510a:	d501      	bpl.n	8025110 <_vfiprintf_r+0x3c>
 802510c:	692b      	ldr	r3, [r5, #16]
 802510e:	b9eb      	cbnz	r3, 802514c <_vfiprintf_r+0x78>
 8025110:	4629      	mov	r1, r5
 8025112:	4630      	mov	r0, r6
 8025114:	f001 fea0 	bl	8026e58 <__swsetup_r>
 8025118:	b1c0      	cbz	r0, 802514c <_vfiprintf_r+0x78>
 802511a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802511c:	07dc      	lsls	r4, r3, #31
 802511e:	d50e      	bpl.n	802513e <_vfiprintf_r+0x6a>
 8025120:	f04f 30ff 	mov.w	r0, #4294967295
 8025124:	b01d      	add	sp, #116	; 0x74
 8025126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802512a:	4b7b      	ldr	r3, [pc, #492]	; (8025318 <_vfiprintf_r+0x244>)
 802512c:	429d      	cmp	r5, r3
 802512e:	d101      	bne.n	8025134 <_vfiprintf_r+0x60>
 8025130:	68b5      	ldr	r5, [r6, #8]
 8025132:	e7df      	b.n	80250f4 <_vfiprintf_r+0x20>
 8025134:	4b79      	ldr	r3, [pc, #484]	; (802531c <_vfiprintf_r+0x248>)
 8025136:	429d      	cmp	r5, r3
 8025138:	bf08      	it	eq
 802513a:	68f5      	ldreq	r5, [r6, #12]
 802513c:	e7da      	b.n	80250f4 <_vfiprintf_r+0x20>
 802513e:	89ab      	ldrh	r3, [r5, #12]
 8025140:	0598      	lsls	r0, r3, #22
 8025142:	d4ed      	bmi.n	8025120 <_vfiprintf_r+0x4c>
 8025144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025146:	f003 fa92 	bl	802866e <__retarget_lock_release_recursive>
 802514a:	e7e9      	b.n	8025120 <_vfiprintf_r+0x4c>
 802514c:	2300      	movs	r3, #0
 802514e:	9309      	str	r3, [sp, #36]	; 0x24
 8025150:	2320      	movs	r3, #32
 8025152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025156:	f8cd 800c 	str.w	r8, [sp, #12]
 802515a:	2330      	movs	r3, #48	; 0x30
 802515c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8025320 <_vfiprintf_r+0x24c>
 8025160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025164:	f04f 0901 	mov.w	r9, #1
 8025168:	4623      	mov	r3, r4
 802516a:	469a      	mov	sl, r3
 802516c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025170:	b10a      	cbz	r2, 8025176 <_vfiprintf_r+0xa2>
 8025172:	2a25      	cmp	r2, #37	; 0x25
 8025174:	d1f9      	bne.n	802516a <_vfiprintf_r+0x96>
 8025176:	ebba 0b04 	subs.w	fp, sl, r4
 802517a:	d00b      	beq.n	8025194 <_vfiprintf_r+0xc0>
 802517c:	465b      	mov	r3, fp
 802517e:	4622      	mov	r2, r4
 8025180:	4629      	mov	r1, r5
 8025182:	4630      	mov	r0, r6
 8025184:	f7ff ff93 	bl	80250ae <__sfputs_r>
 8025188:	3001      	adds	r0, #1
 802518a:	f000 80aa 	beq.w	80252e2 <_vfiprintf_r+0x20e>
 802518e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025190:	445a      	add	r2, fp
 8025192:	9209      	str	r2, [sp, #36]	; 0x24
 8025194:	f89a 3000 	ldrb.w	r3, [sl]
 8025198:	2b00      	cmp	r3, #0
 802519a:	f000 80a2 	beq.w	80252e2 <_vfiprintf_r+0x20e>
 802519e:	2300      	movs	r3, #0
 80251a0:	f04f 32ff 	mov.w	r2, #4294967295
 80251a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80251a8:	f10a 0a01 	add.w	sl, sl, #1
 80251ac:	9304      	str	r3, [sp, #16]
 80251ae:	9307      	str	r3, [sp, #28]
 80251b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80251b4:	931a      	str	r3, [sp, #104]	; 0x68
 80251b6:	4654      	mov	r4, sl
 80251b8:	2205      	movs	r2, #5
 80251ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80251be:	4858      	ldr	r0, [pc, #352]	; (8025320 <_vfiprintf_r+0x24c>)
 80251c0:	f7db f846 	bl	8000250 <memchr>
 80251c4:	9a04      	ldr	r2, [sp, #16]
 80251c6:	b9d8      	cbnz	r0, 8025200 <_vfiprintf_r+0x12c>
 80251c8:	06d1      	lsls	r1, r2, #27
 80251ca:	bf44      	itt	mi
 80251cc:	2320      	movmi	r3, #32
 80251ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80251d2:	0713      	lsls	r3, r2, #28
 80251d4:	bf44      	itt	mi
 80251d6:	232b      	movmi	r3, #43	; 0x2b
 80251d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80251dc:	f89a 3000 	ldrb.w	r3, [sl]
 80251e0:	2b2a      	cmp	r3, #42	; 0x2a
 80251e2:	d015      	beq.n	8025210 <_vfiprintf_r+0x13c>
 80251e4:	9a07      	ldr	r2, [sp, #28]
 80251e6:	4654      	mov	r4, sl
 80251e8:	2000      	movs	r0, #0
 80251ea:	f04f 0c0a 	mov.w	ip, #10
 80251ee:	4621      	mov	r1, r4
 80251f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80251f4:	3b30      	subs	r3, #48	; 0x30
 80251f6:	2b09      	cmp	r3, #9
 80251f8:	d94e      	bls.n	8025298 <_vfiprintf_r+0x1c4>
 80251fa:	b1b0      	cbz	r0, 802522a <_vfiprintf_r+0x156>
 80251fc:	9207      	str	r2, [sp, #28]
 80251fe:	e014      	b.n	802522a <_vfiprintf_r+0x156>
 8025200:	eba0 0308 	sub.w	r3, r0, r8
 8025204:	fa09 f303 	lsl.w	r3, r9, r3
 8025208:	4313      	orrs	r3, r2
 802520a:	9304      	str	r3, [sp, #16]
 802520c:	46a2      	mov	sl, r4
 802520e:	e7d2      	b.n	80251b6 <_vfiprintf_r+0xe2>
 8025210:	9b03      	ldr	r3, [sp, #12]
 8025212:	1d19      	adds	r1, r3, #4
 8025214:	681b      	ldr	r3, [r3, #0]
 8025216:	9103      	str	r1, [sp, #12]
 8025218:	2b00      	cmp	r3, #0
 802521a:	bfbb      	ittet	lt
 802521c:	425b      	neglt	r3, r3
 802521e:	f042 0202 	orrlt.w	r2, r2, #2
 8025222:	9307      	strge	r3, [sp, #28]
 8025224:	9307      	strlt	r3, [sp, #28]
 8025226:	bfb8      	it	lt
 8025228:	9204      	strlt	r2, [sp, #16]
 802522a:	7823      	ldrb	r3, [r4, #0]
 802522c:	2b2e      	cmp	r3, #46	; 0x2e
 802522e:	d10c      	bne.n	802524a <_vfiprintf_r+0x176>
 8025230:	7863      	ldrb	r3, [r4, #1]
 8025232:	2b2a      	cmp	r3, #42	; 0x2a
 8025234:	d135      	bne.n	80252a2 <_vfiprintf_r+0x1ce>
 8025236:	9b03      	ldr	r3, [sp, #12]
 8025238:	1d1a      	adds	r2, r3, #4
 802523a:	681b      	ldr	r3, [r3, #0]
 802523c:	9203      	str	r2, [sp, #12]
 802523e:	2b00      	cmp	r3, #0
 8025240:	bfb8      	it	lt
 8025242:	f04f 33ff 	movlt.w	r3, #4294967295
 8025246:	3402      	adds	r4, #2
 8025248:	9305      	str	r3, [sp, #20]
 802524a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8025330 <_vfiprintf_r+0x25c>
 802524e:	7821      	ldrb	r1, [r4, #0]
 8025250:	2203      	movs	r2, #3
 8025252:	4650      	mov	r0, sl
 8025254:	f7da fffc 	bl	8000250 <memchr>
 8025258:	b140      	cbz	r0, 802526c <_vfiprintf_r+0x198>
 802525a:	2340      	movs	r3, #64	; 0x40
 802525c:	eba0 000a 	sub.w	r0, r0, sl
 8025260:	fa03 f000 	lsl.w	r0, r3, r0
 8025264:	9b04      	ldr	r3, [sp, #16]
 8025266:	4303      	orrs	r3, r0
 8025268:	3401      	adds	r4, #1
 802526a:	9304      	str	r3, [sp, #16]
 802526c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025270:	482c      	ldr	r0, [pc, #176]	; (8025324 <_vfiprintf_r+0x250>)
 8025272:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025276:	2206      	movs	r2, #6
 8025278:	f7da ffea 	bl	8000250 <memchr>
 802527c:	2800      	cmp	r0, #0
 802527e:	d03f      	beq.n	8025300 <_vfiprintf_r+0x22c>
 8025280:	4b29      	ldr	r3, [pc, #164]	; (8025328 <_vfiprintf_r+0x254>)
 8025282:	bb1b      	cbnz	r3, 80252cc <_vfiprintf_r+0x1f8>
 8025284:	9b03      	ldr	r3, [sp, #12]
 8025286:	3307      	adds	r3, #7
 8025288:	f023 0307 	bic.w	r3, r3, #7
 802528c:	3308      	adds	r3, #8
 802528e:	9303      	str	r3, [sp, #12]
 8025290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025292:	443b      	add	r3, r7
 8025294:	9309      	str	r3, [sp, #36]	; 0x24
 8025296:	e767      	b.n	8025168 <_vfiprintf_r+0x94>
 8025298:	fb0c 3202 	mla	r2, ip, r2, r3
 802529c:	460c      	mov	r4, r1
 802529e:	2001      	movs	r0, #1
 80252a0:	e7a5      	b.n	80251ee <_vfiprintf_r+0x11a>
 80252a2:	2300      	movs	r3, #0
 80252a4:	3401      	adds	r4, #1
 80252a6:	9305      	str	r3, [sp, #20]
 80252a8:	4619      	mov	r1, r3
 80252aa:	f04f 0c0a 	mov.w	ip, #10
 80252ae:	4620      	mov	r0, r4
 80252b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80252b4:	3a30      	subs	r2, #48	; 0x30
 80252b6:	2a09      	cmp	r2, #9
 80252b8:	d903      	bls.n	80252c2 <_vfiprintf_r+0x1ee>
 80252ba:	2b00      	cmp	r3, #0
 80252bc:	d0c5      	beq.n	802524a <_vfiprintf_r+0x176>
 80252be:	9105      	str	r1, [sp, #20]
 80252c0:	e7c3      	b.n	802524a <_vfiprintf_r+0x176>
 80252c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80252c6:	4604      	mov	r4, r0
 80252c8:	2301      	movs	r3, #1
 80252ca:	e7f0      	b.n	80252ae <_vfiprintf_r+0x1da>
 80252cc:	ab03      	add	r3, sp, #12
 80252ce:	9300      	str	r3, [sp, #0]
 80252d0:	462a      	mov	r2, r5
 80252d2:	4b16      	ldr	r3, [pc, #88]	; (802532c <_vfiprintf_r+0x258>)
 80252d4:	a904      	add	r1, sp, #16
 80252d6:	4630      	mov	r0, r6
 80252d8:	f000 f8be 	bl	8025458 <_printf_float>
 80252dc:	4607      	mov	r7, r0
 80252de:	1c78      	adds	r0, r7, #1
 80252e0:	d1d6      	bne.n	8025290 <_vfiprintf_r+0x1bc>
 80252e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80252e4:	07d9      	lsls	r1, r3, #31
 80252e6:	d405      	bmi.n	80252f4 <_vfiprintf_r+0x220>
 80252e8:	89ab      	ldrh	r3, [r5, #12]
 80252ea:	059a      	lsls	r2, r3, #22
 80252ec:	d402      	bmi.n	80252f4 <_vfiprintf_r+0x220>
 80252ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80252f0:	f003 f9bd 	bl	802866e <__retarget_lock_release_recursive>
 80252f4:	89ab      	ldrh	r3, [r5, #12]
 80252f6:	065b      	lsls	r3, r3, #25
 80252f8:	f53f af12 	bmi.w	8025120 <_vfiprintf_r+0x4c>
 80252fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80252fe:	e711      	b.n	8025124 <_vfiprintf_r+0x50>
 8025300:	ab03      	add	r3, sp, #12
 8025302:	9300      	str	r3, [sp, #0]
 8025304:	462a      	mov	r2, r5
 8025306:	4b09      	ldr	r3, [pc, #36]	; (802532c <_vfiprintf_r+0x258>)
 8025308:	a904      	add	r1, sp, #16
 802530a:	4630      	mov	r0, r6
 802530c:	f000 fb30 	bl	8025970 <_printf_i>
 8025310:	e7e4      	b.n	80252dc <_vfiprintf_r+0x208>
 8025312:	bf00      	nop
 8025314:	0802da68 	.word	0x0802da68
 8025318:	0802da88 	.word	0x0802da88
 802531c:	0802da48 	.word	0x0802da48
 8025320:	0802d814 	.word	0x0802d814
 8025324:	0802d81e 	.word	0x0802d81e
 8025328:	08025459 	.word	0x08025459
 802532c:	080250af 	.word	0x080250af
 8025330:	0802d81a 	.word	0x0802d81a

08025334 <__cvt>:
 8025334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025336:	ed2d 8b02 	vpush	{d8}
 802533a:	eeb0 8b40 	vmov.f64	d8, d0
 802533e:	b085      	sub	sp, #20
 8025340:	4617      	mov	r7, r2
 8025342:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025344:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025346:	ee18 2a90 	vmov	r2, s17
 802534a:	f025 0520 	bic.w	r5, r5, #32
 802534e:	2a00      	cmp	r2, #0
 8025350:	bfb6      	itet	lt
 8025352:	222d      	movlt	r2, #45	; 0x2d
 8025354:	2200      	movge	r2, #0
 8025356:	eeb1 8b40 	vneglt.f64	d8, d0
 802535a:	2d46      	cmp	r5, #70	; 0x46
 802535c:	460c      	mov	r4, r1
 802535e:	701a      	strb	r2, [r3, #0]
 8025360:	d004      	beq.n	802536c <__cvt+0x38>
 8025362:	2d45      	cmp	r5, #69	; 0x45
 8025364:	d100      	bne.n	8025368 <__cvt+0x34>
 8025366:	3401      	adds	r4, #1
 8025368:	2102      	movs	r1, #2
 802536a:	e000      	b.n	802536e <__cvt+0x3a>
 802536c:	2103      	movs	r1, #3
 802536e:	ab03      	add	r3, sp, #12
 8025370:	9301      	str	r3, [sp, #4]
 8025372:	ab02      	add	r3, sp, #8
 8025374:	9300      	str	r3, [sp, #0]
 8025376:	4622      	mov	r2, r4
 8025378:	4633      	mov	r3, r6
 802537a:	eeb0 0b48 	vmov.f64	d0, d8
 802537e:	f001 fec7 	bl	8027110 <_dtoa_r>
 8025382:	2d47      	cmp	r5, #71	; 0x47
 8025384:	d109      	bne.n	802539a <__cvt+0x66>
 8025386:	07fb      	lsls	r3, r7, #31
 8025388:	d407      	bmi.n	802539a <__cvt+0x66>
 802538a:	9b03      	ldr	r3, [sp, #12]
 802538c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802538e:	1a1b      	subs	r3, r3, r0
 8025390:	6013      	str	r3, [r2, #0]
 8025392:	b005      	add	sp, #20
 8025394:	ecbd 8b02 	vpop	{d8}
 8025398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802539a:	2d46      	cmp	r5, #70	; 0x46
 802539c:	eb00 0204 	add.w	r2, r0, r4
 80253a0:	d10c      	bne.n	80253bc <__cvt+0x88>
 80253a2:	7803      	ldrb	r3, [r0, #0]
 80253a4:	2b30      	cmp	r3, #48	; 0x30
 80253a6:	d107      	bne.n	80253b8 <__cvt+0x84>
 80253a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80253ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80253b0:	bf1c      	itt	ne
 80253b2:	f1c4 0401 	rsbne	r4, r4, #1
 80253b6:	6034      	strne	r4, [r6, #0]
 80253b8:	6833      	ldr	r3, [r6, #0]
 80253ba:	441a      	add	r2, r3
 80253bc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80253c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80253c4:	bf08      	it	eq
 80253c6:	9203      	streq	r2, [sp, #12]
 80253c8:	2130      	movs	r1, #48	; 0x30
 80253ca:	9b03      	ldr	r3, [sp, #12]
 80253cc:	4293      	cmp	r3, r2
 80253ce:	d2dc      	bcs.n	802538a <__cvt+0x56>
 80253d0:	1c5c      	adds	r4, r3, #1
 80253d2:	9403      	str	r4, [sp, #12]
 80253d4:	7019      	strb	r1, [r3, #0]
 80253d6:	e7f8      	b.n	80253ca <__cvt+0x96>

080253d8 <__exponent>:
 80253d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80253da:	4603      	mov	r3, r0
 80253dc:	2900      	cmp	r1, #0
 80253de:	bfb8      	it	lt
 80253e0:	4249      	neglt	r1, r1
 80253e2:	f803 2b02 	strb.w	r2, [r3], #2
 80253e6:	bfb4      	ite	lt
 80253e8:	222d      	movlt	r2, #45	; 0x2d
 80253ea:	222b      	movge	r2, #43	; 0x2b
 80253ec:	2909      	cmp	r1, #9
 80253ee:	7042      	strb	r2, [r0, #1]
 80253f0:	dd2a      	ble.n	8025448 <__exponent+0x70>
 80253f2:	f10d 0407 	add.w	r4, sp, #7
 80253f6:	46a4      	mov	ip, r4
 80253f8:	270a      	movs	r7, #10
 80253fa:	46a6      	mov	lr, r4
 80253fc:	460a      	mov	r2, r1
 80253fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8025402:	fb07 1516 	mls	r5, r7, r6, r1
 8025406:	3530      	adds	r5, #48	; 0x30
 8025408:	2a63      	cmp	r2, #99	; 0x63
 802540a:	f104 34ff 	add.w	r4, r4, #4294967295
 802540e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8025412:	4631      	mov	r1, r6
 8025414:	dcf1      	bgt.n	80253fa <__exponent+0x22>
 8025416:	3130      	adds	r1, #48	; 0x30
 8025418:	f1ae 0502 	sub.w	r5, lr, #2
 802541c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8025420:	1c44      	adds	r4, r0, #1
 8025422:	4629      	mov	r1, r5
 8025424:	4561      	cmp	r1, ip
 8025426:	d30a      	bcc.n	802543e <__exponent+0x66>
 8025428:	f10d 0209 	add.w	r2, sp, #9
 802542c:	eba2 020e 	sub.w	r2, r2, lr
 8025430:	4565      	cmp	r5, ip
 8025432:	bf88      	it	hi
 8025434:	2200      	movhi	r2, #0
 8025436:	4413      	add	r3, r2
 8025438:	1a18      	subs	r0, r3, r0
 802543a:	b003      	add	sp, #12
 802543c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802543e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025442:	f804 2f01 	strb.w	r2, [r4, #1]!
 8025446:	e7ed      	b.n	8025424 <__exponent+0x4c>
 8025448:	2330      	movs	r3, #48	; 0x30
 802544a:	3130      	adds	r1, #48	; 0x30
 802544c:	7083      	strb	r3, [r0, #2]
 802544e:	70c1      	strb	r1, [r0, #3]
 8025450:	1d03      	adds	r3, r0, #4
 8025452:	e7f1      	b.n	8025438 <__exponent+0x60>
 8025454:	0000      	movs	r0, r0
	...

08025458 <_printf_float>:
 8025458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802545c:	b08b      	sub	sp, #44	; 0x2c
 802545e:	460c      	mov	r4, r1
 8025460:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8025464:	4616      	mov	r6, r2
 8025466:	461f      	mov	r7, r3
 8025468:	4605      	mov	r5, r0
 802546a:	f003 f8f9 	bl	8028660 <_localeconv_r>
 802546e:	f8d0 b000 	ldr.w	fp, [r0]
 8025472:	4658      	mov	r0, fp
 8025474:	f7da fee4 	bl	8000240 <strlen>
 8025478:	2300      	movs	r3, #0
 802547a:	9308      	str	r3, [sp, #32]
 802547c:	f8d8 3000 	ldr.w	r3, [r8]
 8025480:	f894 9018 	ldrb.w	r9, [r4, #24]
 8025484:	6822      	ldr	r2, [r4, #0]
 8025486:	3307      	adds	r3, #7
 8025488:	f023 0307 	bic.w	r3, r3, #7
 802548c:	f103 0108 	add.w	r1, r3, #8
 8025490:	f8c8 1000 	str.w	r1, [r8]
 8025494:	4682      	mov	sl, r0
 8025496:	e9d3 0100 	ldrd	r0, r1, [r3]
 802549a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 802549e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8025700 <_printf_float+0x2a8>
 80254a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80254a6:	eeb0 6bc0 	vabs.f64	d6, d0
 80254aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80254ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80254b2:	dd24      	ble.n	80254fe <_printf_float+0xa6>
 80254b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80254b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80254bc:	d502      	bpl.n	80254c4 <_printf_float+0x6c>
 80254be:	232d      	movs	r3, #45	; 0x2d
 80254c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80254c4:	4b90      	ldr	r3, [pc, #576]	; (8025708 <_printf_float+0x2b0>)
 80254c6:	4891      	ldr	r0, [pc, #580]	; (802570c <_printf_float+0x2b4>)
 80254c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80254cc:	bf94      	ite	ls
 80254ce:	4698      	movls	r8, r3
 80254d0:	4680      	movhi	r8, r0
 80254d2:	2303      	movs	r3, #3
 80254d4:	6123      	str	r3, [r4, #16]
 80254d6:	f022 0204 	bic.w	r2, r2, #4
 80254da:	2300      	movs	r3, #0
 80254dc:	6022      	str	r2, [r4, #0]
 80254de:	9304      	str	r3, [sp, #16]
 80254e0:	9700      	str	r7, [sp, #0]
 80254e2:	4633      	mov	r3, r6
 80254e4:	aa09      	add	r2, sp, #36	; 0x24
 80254e6:	4621      	mov	r1, r4
 80254e8:	4628      	mov	r0, r5
 80254ea:	f000 f9d3 	bl	8025894 <_printf_common>
 80254ee:	3001      	adds	r0, #1
 80254f0:	f040 808a 	bne.w	8025608 <_printf_float+0x1b0>
 80254f4:	f04f 30ff 	mov.w	r0, #4294967295
 80254f8:	b00b      	add	sp, #44	; 0x2c
 80254fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80254fe:	eeb4 0b40 	vcmp.f64	d0, d0
 8025502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025506:	d709      	bvc.n	802551c <_printf_float+0xc4>
 8025508:	ee10 3a90 	vmov	r3, s1
 802550c:	2b00      	cmp	r3, #0
 802550e:	bfbc      	itt	lt
 8025510:	232d      	movlt	r3, #45	; 0x2d
 8025512:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8025516:	487e      	ldr	r0, [pc, #504]	; (8025710 <_printf_float+0x2b8>)
 8025518:	4b7e      	ldr	r3, [pc, #504]	; (8025714 <_printf_float+0x2bc>)
 802551a:	e7d5      	b.n	80254c8 <_printf_float+0x70>
 802551c:	6863      	ldr	r3, [r4, #4]
 802551e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8025522:	9104      	str	r1, [sp, #16]
 8025524:	1c59      	adds	r1, r3, #1
 8025526:	d13c      	bne.n	80255a2 <_printf_float+0x14a>
 8025528:	2306      	movs	r3, #6
 802552a:	6063      	str	r3, [r4, #4]
 802552c:	2300      	movs	r3, #0
 802552e:	9303      	str	r3, [sp, #12]
 8025530:	ab08      	add	r3, sp, #32
 8025532:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8025536:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802553a:	ab07      	add	r3, sp, #28
 802553c:	6861      	ldr	r1, [r4, #4]
 802553e:	9300      	str	r3, [sp, #0]
 8025540:	6022      	str	r2, [r4, #0]
 8025542:	f10d 031b 	add.w	r3, sp, #27
 8025546:	4628      	mov	r0, r5
 8025548:	f7ff fef4 	bl	8025334 <__cvt>
 802554c:	9b04      	ldr	r3, [sp, #16]
 802554e:	9907      	ldr	r1, [sp, #28]
 8025550:	2b47      	cmp	r3, #71	; 0x47
 8025552:	4680      	mov	r8, r0
 8025554:	d108      	bne.n	8025568 <_printf_float+0x110>
 8025556:	1cc8      	adds	r0, r1, #3
 8025558:	db02      	blt.n	8025560 <_printf_float+0x108>
 802555a:	6863      	ldr	r3, [r4, #4]
 802555c:	4299      	cmp	r1, r3
 802555e:	dd41      	ble.n	80255e4 <_printf_float+0x18c>
 8025560:	f1a9 0902 	sub.w	r9, r9, #2
 8025564:	fa5f f989 	uxtb.w	r9, r9
 8025568:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 802556c:	d820      	bhi.n	80255b0 <_printf_float+0x158>
 802556e:	3901      	subs	r1, #1
 8025570:	464a      	mov	r2, r9
 8025572:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8025576:	9107      	str	r1, [sp, #28]
 8025578:	f7ff ff2e 	bl	80253d8 <__exponent>
 802557c:	9a08      	ldr	r2, [sp, #32]
 802557e:	9004      	str	r0, [sp, #16]
 8025580:	1813      	adds	r3, r2, r0
 8025582:	2a01      	cmp	r2, #1
 8025584:	6123      	str	r3, [r4, #16]
 8025586:	dc02      	bgt.n	802558e <_printf_float+0x136>
 8025588:	6822      	ldr	r2, [r4, #0]
 802558a:	07d2      	lsls	r2, r2, #31
 802558c:	d501      	bpl.n	8025592 <_printf_float+0x13a>
 802558e:	3301      	adds	r3, #1
 8025590:	6123      	str	r3, [r4, #16]
 8025592:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8025596:	2b00      	cmp	r3, #0
 8025598:	d0a2      	beq.n	80254e0 <_printf_float+0x88>
 802559a:	232d      	movs	r3, #45	; 0x2d
 802559c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80255a0:	e79e      	b.n	80254e0 <_printf_float+0x88>
 80255a2:	9904      	ldr	r1, [sp, #16]
 80255a4:	2947      	cmp	r1, #71	; 0x47
 80255a6:	d1c1      	bne.n	802552c <_printf_float+0xd4>
 80255a8:	2b00      	cmp	r3, #0
 80255aa:	d1bf      	bne.n	802552c <_printf_float+0xd4>
 80255ac:	2301      	movs	r3, #1
 80255ae:	e7bc      	b.n	802552a <_printf_float+0xd2>
 80255b0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80255b4:	d118      	bne.n	80255e8 <_printf_float+0x190>
 80255b6:	2900      	cmp	r1, #0
 80255b8:	6863      	ldr	r3, [r4, #4]
 80255ba:	dd0b      	ble.n	80255d4 <_printf_float+0x17c>
 80255bc:	6121      	str	r1, [r4, #16]
 80255be:	b913      	cbnz	r3, 80255c6 <_printf_float+0x16e>
 80255c0:	6822      	ldr	r2, [r4, #0]
 80255c2:	07d0      	lsls	r0, r2, #31
 80255c4:	d502      	bpl.n	80255cc <_printf_float+0x174>
 80255c6:	3301      	adds	r3, #1
 80255c8:	440b      	add	r3, r1
 80255ca:	6123      	str	r3, [r4, #16]
 80255cc:	2300      	movs	r3, #0
 80255ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80255d0:	9304      	str	r3, [sp, #16]
 80255d2:	e7de      	b.n	8025592 <_printf_float+0x13a>
 80255d4:	b913      	cbnz	r3, 80255dc <_printf_float+0x184>
 80255d6:	6822      	ldr	r2, [r4, #0]
 80255d8:	07d2      	lsls	r2, r2, #31
 80255da:	d501      	bpl.n	80255e0 <_printf_float+0x188>
 80255dc:	3302      	adds	r3, #2
 80255de:	e7f4      	b.n	80255ca <_printf_float+0x172>
 80255e0:	2301      	movs	r3, #1
 80255e2:	e7f2      	b.n	80255ca <_printf_float+0x172>
 80255e4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80255e8:	9b08      	ldr	r3, [sp, #32]
 80255ea:	4299      	cmp	r1, r3
 80255ec:	db05      	blt.n	80255fa <_printf_float+0x1a2>
 80255ee:	6823      	ldr	r3, [r4, #0]
 80255f0:	6121      	str	r1, [r4, #16]
 80255f2:	07d8      	lsls	r0, r3, #31
 80255f4:	d5ea      	bpl.n	80255cc <_printf_float+0x174>
 80255f6:	1c4b      	adds	r3, r1, #1
 80255f8:	e7e7      	b.n	80255ca <_printf_float+0x172>
 80255fa:	2900      	cmp	r1, #0
 80255fc:	bfd4      	ite	le
 80255fe:	f1c1 0202 	rsble	r2, r1, #2
 8025602:	2201      	movgt	r2, #1
 8025604:	4413      	add	r3, r2
 8025606:	e7e0      	b.n	80255ca <_printf_float+0x172>
 8025608:	6823      	ldr	r3, [r4, #0]
 802560a:	055a      	lsls	r2, r3, #21
 802560c:	d407      	bmi.n	802561e <_printf_float+0x1c6>
 802560e:	6923      	ldr	r3, [r4, #16]
 8025610:	4642      	mov	r2, r8
 8025612:	4631      	mov	r1, r6
 8025614:	4628      	mov	r0, r5
 8025616:	47b8      	blx	r7
 8025618:	3001      	adds	r0, #1
 802561a:	d12a      	bne.n	8025672 <_printf_float+0x21a>
 802561c:	e76a      	b.n	80254f4 <_printf_float+0x9c>
 802561e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8025622:	f240 80e2 	bls.w	80257ea <_printf_float+0x392>
 8025626:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 802562a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802562e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025632:	d133      	bne.n	802569c <_printf_float+0x244>
 8025634:	4a38      	ldr	r2, [pc, #224]	; (8025718 <_printf_float+0x2c0>)
 8025636:	2301      	movs	r3, #1
 8025638:	4631      	mov	r1, r6
 802563a:	4628      	mov	r0, r5
 802563c:	47b8      	blx	r7
 802563e:	3001      	adds	r0, #1
 8025640:	f43f af58 	beq.w	80254f4 <_printf_float+0x9c>
 8025644:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8025648:	429a      	cmp	r2, r3
 802564a:	db02      	blt.n	8025652 <_printf_float+0x1fa>
 802564c:	6823      	ldr	r3, [r4, #0]
 802564e:	07d8      	lsls	r0, r3, #31
 8025650:	d50f      	bpl.n	8025672 <_printf_float+0x21a>
 8025652:	4653      	mov	r3, sl
 8025654:	465a      	mov	r2, fp
 8025656:	4631      	mov	r1, r6
 8025658:	4628      	mov	r0, r5
 802565a:	47b8      	blx	r7
 802565c:	3001      	adds	r0, #1
 802565e:	f43f af49 	beq.w	80254f4 <_printf_float+0x9c>
 8025662:	f04f 0800 	mov.w	r8, #0
 8025666:	f104 091a 	add.w	r9, r4, #26
 802566a:	9b08      	ldr	r3, [sp, #32]
 802566c:	3b01      	subs	r3, #1
 802566e:	4543      	cmp	r3, r8
 8025670:	dc09      	bgt.n	8025686 <_printf_float+0x22e>
 8025672:	6823      	ldr	r3, [r4, #0]
 8025674:	079b      	lsls	r3, r3, #30
 8025676:	f100 8108 	bmi.w	802588a <_printf_float+0x432>
 802567a:	68e0      	ldr	r0, [r4, #12]
 802567c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802567e:	4298      	cmp	r0, r3
 8025680:	bfb8      	it	lt
 8025682:	4618      	movlt	r0, r3
 8025684:	e738      	b.n	80254f8 <_printf_float+0xa0>
 8025686:	2301      	movs	r3, #1
 8025688:	464a      	mov	r2, r9
 802568a:	4631      	mov	r1, r6
 802568c:	4628      	mov	r0, r5
 802568e:	47b8      	blx	r7
 8025690:	3001      	adds	r0, #1
 8025692:	f43f af2f 	beq.w	80254f4 <_printf_float+0x9c>
 8025696:	f108 0801 	add.w	r8, r8, #1
 802569a:	e7e6      	b.n	802566a <_printf_float+0x212>
 802569c:	9b07      	ldr	r3, [sp, #28]
 802569e:	2b00      	cmp	r3, #0
 80256a0:	dc3c      	bgt.n	802571c <_printf_float+0x2c4>
 80256a2:	4a1d      	ldr	r2, [pc, #116]	; (8025718 <_printf_float+0x2c0>)
 80256a4:	2301      	movs	r3, #1
 80256a6:	4631      	mov	r1, r6
 80256a8:	4628      	mov	r0, r5
 80256aa:	47b8      	blx	r7
 80256ac:	3001      	adds	r0, #1
 80256ae:	f43f af21 	beq.w	80254f4 <_printf_float+0x9c>
 80256b2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80256b6:	4313      	orrs	r3, r2
 80256b8:	d102      	bne.n	80256c0 <_printf_float+0x268>
 80256ba:	6823      	ldr	r3, [r4, #0]
 80256bc:	07d9      	lsls	r1, r3, #31
 80256be:	d5d8      	bpl.n	8025672 <_printf_float+0x21a>
 80256c0:	4653      	mov	r3, sl
 80256c2:	465a      	mov	r2, fp
 80256c4:	4631      	mov	r1, r6
 80256c6:	4628      	mov	r0, r5
 80256c8:	47b8      	blx	r7
 80256ca:	3001      	adds	r0, #1
 80256cc:	f43f af12 	beq.w	80254f4 <_printf_float+0x9c>
 80256d0:	f04f 0900 	mov.w	r9, #0
 80256d4:	f104 0a1a 	add.w	sl, r4, #26
 80256d8:	9b07      	ldr	r3, [sp, #28]
 80256da:	425b      	negs	r3, r3
 80256dc:	454b      	cmp	r3, r9
 80256de:	dc01      	bgt.n	80256e4 <_printf_float+0x28c>
 80256e0:	9b08      	ldr	r3, [sp, #32]
 80256e2:	e795      	b.n	8025610 <_printf_float+0x1b8>
 80256e4:	2301      	movs	r3, #1
 80256e6:	4652      	mov	r2, sl
 80256e8:	4631      	mov	r1, r6
 80256ea:	4628      	mov	r0, r5
 80256ec:	47b8      	blx	r7
 80256ee:	3001      	adds	r0, #1
 80256f0:	f43f af00 	beq.w	80254f4 <_printf_float+0x9c>
 80256f4:	f109 0901 	add.w	r9, r9, #1
 80256f8:	e7ee      	b.n	80256d8 <_printf_float+0x280>
 80256fa:	bf00      	nop
 80256fc:	f3af 8000 	nop.w
 8025700:	ffffffff 	.word	0xffffffff
 8025704:	7fefffff 	.word	0x7fefffff
 8025708:	0802d825 	.word	0x0802d825
 802570c:	0802d829 	.word	0x0802d829
 8025710:	0802d831 	.word	0x0802d831
 8025714:	0802d82d 	.word	0x0802d82d
 8025718:	0802cb3a 	.word	0x0802cb3a
 802571c:	9a08      	ldr	r2, [sp, #32]
 802571e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025720:	429a      	cmp	r2, r3
 8025722:	bfa8      	it	ge
 8025724:	461a      	movge	r2, r3
 8025726:	2a00      	cmp	r2, #0
 8025728:	4691      	mov	r9, r2
 802572a:	dc38      	bgt.n	802579e <_printf_float+0x346>
 802572c:	2300      	movs	r3, #0
 802572e:	9305      	str	r3, [sp, #20]
 8025730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025734:	f104 021a 	add.w	r2, r4, #26
 8025738:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802573a:	9905      	ldr	r1, [sp, #20]
 802573c:	9304      	str	r3, [sp, #16]
 802573e:	eba3 0309 	sub.w	r3, r3, r9
 8025742:	428b      	cmp	r3, r1
 8025744:	dc33      	bgt.n	80257ae <_printf_float+0x356>
 8025746:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802574a:	429a      	cmp	r2, r3
 802574c:	db3c      	blt.n	80257c8 <_printf_float+0x370>
 802574e:	6823      	ldr	r3, [r4, #0]
 8025750:	07da      	lsls	r2, r3, #31
 8025752:	d439      	bmi.n	80257c8 <_printf_float+0x370>
 8025754:	9a08      	ldr	r2, [sp, #32]
 8025756:	9b04      	ldr	r3, [sp, #16]
 8025758:	9907      	ldr	r1, [sp, #28]
 802575a:	1ad3      	subs	r3, r2, r3
 802575c:	eba2 0901 	sub.w	r9, r2, r1
 8025760:	4599      	cmp	r9, r3
 8025762:	bfa8      	it	ge
 8025764:	4699      	movge	r9, r3
 8025766:	f1b9 0f00 	cmp.w	r9, #0
 802576a:	dc35      	bgt.n	80257d8 <_printf_float+0x380>
 802576c:	f04f 0800 	mov.w	r8, #0
 8025770:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025774:	f104 0a1a 	add.w	sl, r4, #26
 8025778:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802577c:	1a9b      	subs	r3, r3, r2
 802577e:	eba3 0309 	sub.w	r3, r3, r9
 8025782:	4543      	cmp	r3, r8
 8025784:	f77f af75 	ble.w	8025672 <_printf_float+0x21a>
 8025788:	2301      	movs	r3, #1
 802578a:	4652      	mov	r2, sl
 802578c:	4631      	mov	r1, r6
 802578e:	4628      	mov	r0, r5
 8025790:	47b8      	blx	r7
 8025792:	3001      	adds	r0, #1
 8025794:	f43f aeae 	beq.w	80254f4 <_printf_float+0x9c>
 8025798:	f108 0801 	add.w	r8, r8, #1
 802579c:	e7ec      	b.n	8025778 <_printf_float+0x320>
 802579e:	4613      	mov	r3, r2
 80257a0:	4631      	mov	r1, r6
 80257a2:	4642      	mov	r2, r8
 80257a4:	4628      	mov	r0, r5
 80257a6:	47b8      	blx	r7
 80257a8:	3001      	adds	r0, #1
 80257aa:	d1bf      	bne.n	802572c <_printf_float+0x2d4>
 80257ac:	e6a2      	b.n	80254f4 <_printf_float+0x9c>
 80257ae:	2301      	movs	r3, #1
 80257b0:	4631      	mov	r1, r6
 80257b2:	4628      	mov	r0, r5
 80257b4:	9204      	str	r2, [sp, #16]
 80257b6:	47b8      	blx	r7
 80257b8:	3001      	adds	r0, #1
 80257ba:	f43f ae9b 	beq.w	80254f4 <_printf_float+0x9c>
 80257be:	9b05      	ldr	r3, [sp, #20]
 80257c0:	9a04      	ldr	r2, [sp, #16]
 80257c2:	3301      	adds	r3, #1
 80257c4:	9305      	str	r3, [sp, #20]
 80257c6:	e7b7      	b.n	8025738 <_printf_float+0x2e0>
 80257c8:	4653      	mov	r3, sl
 80257ca:	465a      	mov	r2, fp
 80257cc:	4631      	mov	r1, r6
 80257ce:	4628      	mov	r0, r5
 80257d0:	47b8      	blx	r7
 80257d2:	3001      	adds	r0, #1
 80257d4:	d1be      	bne.n	8025754 <_printf_float+0x2fc>
 80257d6:	e68d      	b.n	80254f4 <_printf_float+0x9c>
 80257d8:	9a04      	ldr	r2, [sp, #16]
 80257da:	464b      	mov	r3, r9
 80257dc:	4442      	add	r2, r8
 80257de:	4631      	mov	r1, r6
 80257e0:	4628      	mov	r0, r5
 80257e2:	47b8      	blx	r7
 80257e4:	3001      	adds	r0, #1
 80257e6:	d1c1      	bne.n	802576c <_printf_float+0x314>
 80257e8:	e684      	b.n	80254f4 <_printf_float+0x9c>
 80257ea:	9a08      	ldr	r2, [sp, #32]
 80257ec:	2a01      	cmp	r2, #1
 80257ee:	dc01      	bgt.n	80257f4 <_printf_float+0x39c>
 80257f0:	07db      	lsls	r3, r3, #31
 80257f2:	d537      	bpl.n	8025864 <_printf_float+0x40c>
 80257f4:	2301      	movs	r3, #1
 80257f6:	4642      	mov	r2, r8
 80257f8:	4631      	mov	r1, r6
 80257fa:	4628      	mov	r0, r5
 80257fc:	47b8      	blx	r7
 80257fe:	3001      	adds	r0, #1
 8025800:	f43f ae78 	beq.w	80254f4 <_printf_float+0x9c>
 8025804:	4653      	mov	r3, sl
 8025806:	465a      	mov	r2, fp
 8025808:	4631      	mov	r1, r6
 802580a:	4628      	mov	r0, r5
 802580c:	47b8      	blx	r7
 802580e:	3001      	adds	r0, #1
 8025810:	f43f ae70 	beq.w	80254f4 <_printf_float+0x9c>
 8025814:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8025818:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802581c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025820:	d01b      	beq.n	802585a <_printf_float+0x402>
 8025822:	9b08      	ldr	r3, [sp, #32]
 8025824:	f108 0201 	add.w	r2, r8, #1
 8025828:	3b01      	subs	r3, #1
 802582a:	4631      	mov	r1, r6
 802582c:	4628      	mov	r0, r5
 802582e:	47b8      	blx	r7
 8025830:	3001      	adds	r0, #1
 8025832:	d10e      	bne.n	8025852 <_printf_float+0x3fa>
 8025834:	e65e      	b.n	80254f4 <_printf_float+0x9c>
 8025836:	2301      	movs	r3, #1
 8025838:	464a      	mov	r2, r9
 802583a:	4631      	mov	r1, r6
 802583c:	4628      	mov	r0, r5
 802583e:	47b8      	blx	r7
 8025840:	3001      	adds	r0, #1
 8025842:	f43f ae57 	beq.w	80254f4 <_printf_float+0x9c>
 8025846:	f108 0801 	add.w	r8, r8, #1
 802584a:	9b08      	ldr	r3, [sp, #32]
 802584c:	3b01      	subs	r3, #1
 802584e:	4543      	cmp	r3, r8
 8025850:	dcf1      	bgt.n	8025836 <_printf_float+0x3de>
 8025852:	9b04      	ldr	r3, [sp, #16]
 8025854:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8025858:	e6db      	b.n	8025612 <_printf_float+0x1ba>
 802585a:	f04f 0800 	mov.w	r8, #0
 802585e:	f104 091a 	add.w	r9, r4, #26
 8025862:	e7f2      	b.n	802584a <_printf_float+0x3f2>
 8025864:	2301      	movs	r3, #1
 8025866:	4642      	mov	r2, r8
 8025868:	e7df      	b.n	802582a <_printf_float+0x3d2>
 802586a:	2301      	movs	r3, #1
 802586c:	464a      	mov	r2, r9
 802586e:	4631      	mov	r1, r6
 8025870:	4628      	mov	r0, r5
 8025872:	47b8      	blx	r7
 8025874:	3001      	adds	r0, #1
 8025876:	f43f ae3d 	beq.w	80254f4 <_printf_float+0x9c>
 802587a:	f108 0801 	add.w	r8, r8, #1
 802587e:	68e3      	ldr	r3, [r4, #12]
 8025880:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025882:	1a5b      	subs	r3, r3, r1
 8025884:	4543      	cmp	r3, r8
 8025886:	dcf0      	bgt.n	802586a <_printf_float+0x412>
 8025888:	e6f7      	b.n	802567a <_printf_float+0x222>
 802588a:	f04f 0800 	mov.w	r8, #0
 802588e:	f104 0919 	add.w	r9, r4, #25
 8025892:	e7f4      	b.n	802587e <_printf_float+0x426>

08025894 <_printf_common>:
 8025894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025898:	4616      	mov	r6, r2
 802589a:	4699      	mov	r9, r3
 802589c:	688a      	ldr	r2, [r1, #8]
 802589e:	690b      	ldr	r3, [r1, #16]
 80258a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80258a4:	4293      	cmp	r3, r2
 80258a6:	bfb8      	it	lt
 80258a8:	4613      	movlt	r3, r2
 80258aa:	6033      	str	r3, [r6, #0]
 80258ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80258b0:	4607      	mov	r7, r0
 80258b2:	460c      	mov	r4, r1
 80258b4:	b10a      	cbz	r2, 80258ba <_printf_common+0x26>
 80258b6:	3301      	adds	r3, #1
 80258b8:	6033      	str	r3, [r6, #0]
 80258ba:	6823      	ldr	r3, [r4, #0]
 80258bc:	0699      	lsls	r1, r3, #26
 80258be:	bf42      	ittt	mi
 80258c0:	6833      	ldrmi	r3, [r6, #0]
 80258c2:	3302      	addmi	r3, #2
 80258c4:	6033      	strmi	r3, [r6, #0]
 80258c6:	6825      	ldr	r5, [r4, #0]
 80258c8:	f015 0506 	ands.w	r5, r5, #6
 80258cc:	d106      	bne.n	80258dc <_printf_common+0x48>
 80258ce:	f104 0a19 	add.w	sl, r4, #25
 80258d2:	68e3      	ldr	r3, [r4, #12]
 80258d4:	6832      	ldr	r2, [r6, #0]
 80258d6:	1a9b      	subs	r3, r3, r2
 80258d8:	42ab      	cmp	r3, r5
 80258da:	dc26      	bgt.n	802592a <_printf_common+0x96>
 80258dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80258e0:	1e13      	subs	r3, r2, #0
 80258e2:	6822      	ldr	r2, [r4, #0]
 80258e4:	bf18      	it	ne
 80258e6:	2301      	movne	r3, #1
 80258e8:	0692      	lsls	r2, r2, #26
 80258ea:	d42b      	bmi.n	8025944 <_printf_common+0xb0>
 80258ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80258f0:	4649      	mov	r1, r9
 80258f2:	4638      	mov	r0, r7
 80258f4:	47c0      	blx	r8
 80258f6:	3001      	adds	r0, #1
 80258f8:	d01e      	beq.n	8025938 <_printf_common+0xa4>
 80258fa:	6823      	ldr	r3, [r4, #0]
 80258fc:	68e5      	ldr	r5, [r4, #12]
 80258fe:	6832      	ldr	r2, [r6, #0]
 8025900:	f003 0306 	and.w	r3, r3, #6
 8025904:	2b04      	cmp	r3, #4
 8025906:	bf08      	it	eq
 8025908:	1aad      	subeq	r5, r5, r2
 802590a:	68a3      	ldr	r3, [r4, #8]
 802590c:	6922      	ldr	r2, [r4, #16]
 802590e:	bf0c      	ite	eq
 8025910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025914:	2500      	movne	r5, #0
 8025916:	4293      	cmp	r3, r2
 8025918:	bfc4      	itt	gt
 802591a:	1a9b      	subgt	r3, r3, r2
 802591c:	18ed      	addgt	r5, r5, r3
 802591e:	2600      	movs	r6, #0
 8025920:	341a      	adds	r4, #26
 8025922:	42b5      	cmp	r5, r6
 8025924:	d11a      	bne.n	802595c <_printf_common+0xc8>
 8025926:	2000      	movs	r0, #0
 8025928:	e008      	b.n	802593c <_printf_common+0xa8>
 802592a:	2301      	movs	r3, #1
 802592c:	4652      	mov	r2, sl
 802592e:	4649      	mov	r1, r9
 8025930:	4638      	mov	r0, r7
 8025932:	47c0      	blx	r8
 8025934:	3001      	adds	r0, #1
 8025936:	d103      	bne.n	8025940 <_printf_common+0xac>
 8025938:	f04f 30ff 	mov.w	r0, #4294967295
 802593c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025940:	3501      	adds	r5, #1
 8025942:	e7c6      	b.n	80258d2 <_printf_common+0x3e>
 8025944:	18e1      	adds	r1, r4, r3
 8025946:	1c5a      	adds	r2, r3, #1
 8025948:	2030      	movs	r0, #48	; 0x30
 802594a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802594e:	4422      	add	r2, r4
 8025950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025958:	3302      	adds	r3, #2
 802595a:	e7c7      	b.n	80258ec <_printf_common+0x58>
 802595c:	2301      	movs	r3, #1
 802595e:	4622      	mov	r2, r4
 8025960:	4649      	mov	r1, r9
 8025962:	4638      	mov	r0, r7
 8025964:	47c0      	blx	r8
 8025966:	3001      	adds	r0, #1
 8025968:	d0e6      	beq.n	8025938 <_printf_common+0xa4>
 802596a:	3601      	adds	r6, #1
 802596c:	e7d9      	b.n	8025922 <_printf_common+0x8e>
	...

08025970 <_printf_i>:
 8025970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025974:	460c      	mov	r4, r1
 8025976:	4691      	mov	r9, r2
 8025978:	7e27      	ldrb	r7, [r4, #24]
 802597a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802597c:	2f78      	cmp	r7, #120	; 0x78
 802597e:	4680      	mov	r8, r0
 8025980:	469a      	mov	sl, r3
 8025982:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025986:	d807      	bhi.n	8025998 <_printf_i+0x28>
 8025988:	2f62      	cmp	r7, #98	; 0x62
 802598a:	d80a      	bhi.n	80259a2 <_printf_i+0x32>
 802598c:	2f00      	cmp	r7, #0
 802598e:	f000 80d8 	beq.w	8025b42 <_printf_i+0x1d2>
 8025992:	2f58      	cmp	r7, #88	; 0x58
 8025994:	f000 80a3 	beq.w	8025ade <_printf_i+0x16e>
 8025998:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802599c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80259a0:	e03a      	b.n	8025a18 <_printf_i+0xa8>
 80259a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80259a6:	2b15      	cmp	r3, #21
 80259a8:	d8f6      	bhi.n	8025998 <_printf_i+0x28>
 80259aa:	a001      	add	r0, pc, #4	; (adr r0, 80259b0 <_printf_i+0x40>)
 80259ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80259b0:	08025a09 	.word	0x08025a09
 80259b4:	08025a1d 	.word	0x08025a1d
 80259b8:	08025999 	.word	0x08025999
 80259bc:	08025999 	.word	0x08025999
 80259c0:	08025999 	.word	0x08025999
 80259c4:	08025999 	.word	0x08025999
 80259c8:	08025a1d 	.word	0x08025a1d
 80259cc:	08025999 	.word	0x08025999
 80259d0:	08025999 	.word	0x08025999
 80259d4:	08025999 	.word	0x08025999
 80259d8:	08025999 	.word	0x08025999
 80259dc:	08025b29 	.word	0x08025b29
 80259e0:	08025a4d 	.word	0x08025a4d
 80259e4:	08025b0b 	.word	0x08025b0b
 80259e8:	08025999 	.word	0x08025999
 80259ec:	08025999 	.word	0x08025999
 80259f0:	08025b4b 	.word	0x08025b4b
 80259f4:	08025999 	.word	0x08025999
 80259f8:	08025a4d 	.word	0x08025a4d
 80259fc:	08025999 	.word	0x08025999
 8025a00:	08025999 	.word	0x08025999
 8025a04:	08025b13 	.word	0x08025b13
 8025a08:	680b      	ldr	r3, [r1, #0]
 8025a0a:	1d1a      	adds	r2, r3, #4
 8025a0c:	681b      	ldr	r3, [r3, #0]
 8025a0e:	600a      	str	r2, [r1, #0]
 8025a10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8025a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025a18:	2301      	movs	r3, #1
 8025a1a:	e0a3      	b.n	8025b64 <_printf_i+0x1f4>
 8025a1c:	6825      	ldr	r5, [r4, #0]
 8025a1e:	6808      	ldr	r0, [r1, #0]
 8025a20:	062e      	lsls	r6, r5, #24
 8025a22:	f100 0304 	add.w	r3, r0, #4
 8025a26:	d50a      	bpl.n	8025a3e <_printf_i+0xce>
 8025a28:	6805      	ldr	r5, [r0, #0]
 8025a2a:	600b      	str	r3, [r1, #0]
 8025a2c:	2d00      	cmp	r5, #0
 8025a2e:	da03      	bge.n	8025a38 <_printf_i+0xc8>
 8025a30:	232d      	movs	r3, #45	; 0x2d
 8025a32:	426d      	negs	r5, r5
 8025a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025a38:	485e      	ldr	r0, [pc, #376]	; (8025bb4 <_printf_i+0x244>)
 8025a3a:	230a      	movs	r3, #10
 8025a3c:	e019      	b.n	8025a72 <_printf_i+0x102>
 8025a3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8025a42:	6805      	ldr	r5, [r0, #0]
 8025a44:	600b      	str	r3, [r1, #0]
 8025a46:	bf18      	it	ne
 8025a48:	b22d      	sxthne	r5, r5
 8025a4a:	e7ef      	b.n	8025a2c <_printf_i+0xbc>
 8025a4c:	680b      	ldr	r3, [r1, #0]
 8025a4e:	6825      	ldr	r5, [r4, #0]
 8025a50:	1d18      	adds	r0, r3, #4
 8025a52:	6008      	str	r0, [r1, #0]
 8025a54:	0628      	lsls	r0, r5, #24
 8025a56:	d501      	bpl.n	8025a5c <_printf_i+0xec>
 8025a58:	681d      	ldr	r5, [r3, #0]
 8025a5a:	e002      	b.n	8025a62 <_printf_i+0xf2>
 8025a5c:	0669      	lsls	r1, r5, #25
 8025a5e:	d5fb      	bpl.n	8025a58 <_printf_i+0xe8>
 8025a60:	881d      	ldrh	r5, [r3, #0]
 8025a62:	4854      	ldr	r0, [pc, #336]	; (8025bb4 <_printf_i+0x244>)
 8025a64:	2f6f      	cmp	r7, #111	; 0x6f
 8025a66:	bf0c      	ite	eq
 8025a68:	2308      	moveq	r3, #8
 8025a6a:	230a      	movne	r3, #10
 8025a6c:	2100      	movs	r1, #0
 8025a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025a72:	6866      	ldr	r6, [r4, #4]
 8025a74:	60a6      	str	r6, [r4, #8]
 8025a76:	2e00      	cmp	r6, #0
 8025a78:	bfa2      	ittt	ge
 8025a7a:	6821      	ldrge	r1, [r4, #0]
 8025a7c:	f021 0104 	bicge.w	r1, r1, #4
 8025a80:	6021      	strge	r1, [r4, #0]
 8025a82:	b90d      	cbnz	r5, 8025a88 <_printf_i+0x118>
 8025a84:	2e00      	cmp	r6, #0
 8025a86:	d04d      	beq.n	8025b24 <_printf_i+0x1b4>
 8025a88:	4616      	mov	r6, r2
 8025a8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8025a8e:	fb03 5711 	mls	r7, r3, r1, r5
 8025a92:	5dc7      	ldrb	r7, [r0, r7]
 8025a94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025a98:	462f      	mov	r7, r5
 8025a9a:	42bb      	cmp	r3, r7
 8025a9c:	460d      	mov	r5, r1
 8025a9e:	d9f4      	bls.n	8025a8a <_printf_i+0x11a>
 8025aa0:	2b08      	cmp	r3, #8
 8025aa2:	d10b      	bne.n	8025abc <_printf_i+0x14c>
 8025aa4:	6823      	ldr	r3, [r4, #0]
 8025aa6:	07df      	lsls	r7, r3, #31
 8025aa8:	d508      	bpl.n	8025abc <_printf_i+0x14c>
 8025aaa:	6923      	ldr	r3, [r4, #16]
 8025aac:	6861      	ldr	r1, [r4, #4]
 8025aae:	4299      	cmp	r1, r3
 8025ab0:	bfde      	ittt	le
 8025ab2:	2330      	movle	r3, #48	; 0x30
 8025ab4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025ab8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8025abc:	1b92      	subs	r2, r2, r6
 8025abe:	6122      	str	r2, [r4, #16]
 8025ac0:	f8cd a000 	str.w	sl, [sp]
 8025ac4:	464b      	mov	r3, r9
 8025ac6:	aa03      	add	r2, sp, #12
 8025ac8:	4621      	mov	r1, r4
 8025aca:	4640      	mov	r0, r8
 8025acc:	f7ff fee2 	bl	8025894 <_printf_common>
 8025ad0:	3001      	adds	r0, #1
 8025ad2:	d14c      	bne.n	8025b6e <_printf_i+0x1fe>
 8025ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8025ad8:	b004      	add	sp, #16
 8025ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025ade:	4835      	ldr	r0, [pc, #212]	; (8025bb4 <_printf_i+0x244>)
 8025ae0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8025ae4:	6823      	ldr	r3, [r4, #0]
 8025ae6:	680e      	ldr	r6, [r1, #0]
 8025ae8:	061f      	lsls	r7, r3, #24
 8025aea:	f856 5b04 	ldr.w	r5, [r6], #4
 8025aee:	600e      	str	r6, [r1, #0]
 8025af0:	d514      	bpl.n	8025b1c <_printf_i+0x1ac>
 8025af2:	07d9      	lsls	r1, r3, #31
 8025af4:	bf44      	itt	mi
 8025af6:	f043 0320 	orrmi.w	r3, r3, #32
 8025afa:	6023      	strmi	r3, [r4, #0]
 8025afc:	b91d      	cbnz	r5, 8025b06 <_printf_i+0x196>
 8025afe:	6823      	ldr	r3, [r4, #0]
 8025b00:	f023 0320 	bic.w	r3, r3, #32
 8025b04:	6023      	str	r3, [r4, #0]
 8025b06:	2310      	movs	r3, #16
 8025b08:	e7b0      	b.n	8025a6c <_printf_i+0xfc>
 8025b0a:	6823      	ldr	r3, [r4, #0]
 8025b0c:	f043 0320 	orr.w	r3, r3, #32
 8025b10:	6023      	str	r3, [r4, #0]
 8025b12:	2378      	movs	r3, #120	; 0x78
 8025b14:	4828      	ldr	r0, [pc, #160]	; (8025bb8 <_printf_i+0x248>)
 8025b16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025b1a:	e7e3      	b.n	8025ae4 <_printf_i+0x174>
 8025b1c:	065e      	lsls	r6, r3, #25
 8025b1e:	bf48      	it	mi
 8025b20:	b2ad      	uxthmi	r5, r5
 8025b22:	e7e6      	b.n	8025af2 <_printf_i+0x182>
 8025b24:	4616      	mov	r6, r2
 8025b26:	e7bb      	b.n	8025aa0 <_printf_i+0x130>
 8025b28:	680b      	ldr	r3, [r1, #0]
 8025b2a:	6826      	ldr	r6, [r4, #0]
 8025b2c:	6960      	ldr	r0, [r4, #20]
 8025b2e:	1d1d      	adds	r5, r3, #4
 8025b30:	600d      	str	r5, [r1, #0]
 8025b32:	0635      	lsls	r5, r6, #24
 8025b34:	681b      	ldr	r3, [r3, #0]
 8025b36:	d501      	bpl.n	8025b3c <_printf_i+0x1cc>
 8025b38:	6018      	str	r0, [r3, #0]
 8025b3a:	e002      	b.n	8025b42 <_printf_i+0x1d2>
 8025b3c:	0671      	lsls	r1, r6, #25
 8025b3e:	d5fb      	bpl.n	8025b38 <_printf_i+0x1c8>
 8025b40:	8018      	strh	r0, [r3, #0]
 8025b42:	2300      	movs	r3, #0
 8025b44:	6123      	str	r3, [r4, #16]
 8025b46:	4616      	mov	r6, r2
 8025b48:	e7ba      	b.n	8025ac0 <_printf_i+0x150>
 8025b4a:	680b      	ldr	r3, [r1, #0]
 8025b4c:	1d1a      	adds	r2, r3, #4
 8025b4e:	600a      	str	r2, [r1, #0]
 8025b50:	681e      	ldr	r6, [r3, #0]
 8025b52:	6862      	ldr	r2, [r4, #4]
 8025b54:	2100      	movs	r1, #0
 8025b56:	4630      	mov	r0, r6
 8025b58:	f7da fb7a 	bl	8000250 <memchr>
 8025b5c:	b108      	cbz	r0, 8025b62 <_printf_i+0x1f2>
 8025b5e:	1b80      	subs	r0, r0, r6
 8025b60:	6060      	str	r0, [r4, #4]
 8025b62:	6863      	ldr	r3, [r4, #4]
 8025b64:	6123      	str	r3, [r4, #16]
 8025b66:	2300      	movs	r3, #0
 8025b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025b6c:	e7a8      	b.n	8025ac0 <_printf_i+0x150>
 8025b6e:	6923      	ldr	r3, [r4, #16]
 8025b70:	4632      	mov	r2, r6
 8025b72:	4649      	mov	r1, r9
 8025b74:	4640      	mov	r0, r8
 8025b76:	47d0      	blx	sl
 8025b78:	3001      	adds	r0, #1
 8025b7a:	d0ab      	beq.n	8025ad4 <_printf_i+0x164>
 8025b7c:	6823      	ldr	r3, [r4, #0]
 8025b7e:	079b      	lsls	r3, r3, #30
 8025b80:	d413      	bmi.n	8025baa <_printf_i+0x23a>
 8025b82:	68e0      	ldr	r0, [r4, #12]
 8025b84:	9b03      	ldr	r3, [sp, #12]
 8025b86:	4298      	cmp	r0, r3
 8025b88:	bfb8      	it	lt
 8025b8a:	4618      	movlt	r0, r3
 8025b8c:	e7a4      	b.n	8025ad8 <_printf_i+0x168>
 8025b8e:	2301      	movs	r3, #1
 8025b90:	4632      	mov	r2, r6
 8025b92:	4649      	mov	r1, r9
 8025b94:	4640      	mov	r0, r8
 8025b96:	47d0      	blx	sl
 8025b98:	3001      	adds	r0, #1
 8025b9a:	d09b      	beq.n	8025ad4 <_printf_i+0x164>
 8025b9c:	3501      	adds	r5, #1
 8025b9e:	68e3      	ldr	r3, [r4, #12]
 8025ba0:	9903      	ldr	r1, [sp, #12]
 8025ba2:	1a5b      	subs	r3, r3, r1
 8025ba4:	42ab      	cmp	r3, r5
 8025ba6:	dcf2      	bgt.n	8025b8e <_printf_i+0x21e>
 8025ba8:	e7eb      	b.n	8025b82 <_printf_i+0x212>
 8025baa:	2500      	movs	r5, #0
 8025bac:	f104 0619 	add.w	r6, r4, #25
 8025bb0:	e7f5      	b.n	8025b9e <_printf_i+0x22e>
 8025bb2:	bf00      	nop
 8025bb4:	0802d835 	.word	0x0802d835
 8025bb8:	0802d846 	.word	0x0802d846

08025bbc <_scanf_float>:
 8025bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025bc0:	b087      	sub	sp, #28
 8025bc2:	4617      	mov	r7, r2
 8025bc4:	9303      	str	r3, [sp, #12]
 8025bc6:	688b      	ldr	r3, [r1, #8]
 8025bc8:	1e5a      	subs	r2, r3, #1
 8025bca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8025bce:	bf83      	ittte	hi
 8025bd0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8025bd4:	195b      	addhi	r3, r3, r5
 8025bd6:	9302      	strhi	r3, [sp, #8]
 8025bd8:	2300      	movls	r3, #0
 8025bda:	bf86      	itte	hi
 8025bdc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8025be0:	608b      	strhi	r3, [r1, #8]
 8025be2:	9302      	strls	r3, [sp, #8]
 8025be4:	680b      	ldr	r3, [r1, #0]
 8025be6:	468b      	mov	fp, r1
 8025be8:	2500      	movs	r5, #0
 8025bea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8025bee:	f84b 3b1c 	str.w	r3, [fp], #28
 8025bf2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8025bf6:	4680      	mov	r8, r0
 8025bf8:	460c      	mov	r4, r1
 8025bfa:	465e      	mov	r6, fp
 8025bfc:	46aa      	mov	sl, r5
 8025bfe:	46a9      	mov	r9, r5
 8025c00:	9501      	str	r5, [sp, #4]
 8025c02:	68a2      	ldr	r2, [r4, #8]
 8025c04:	b152      	cbz	r2, 8025c1c <_scanf_float+0x60>
 8025c06:	683b      	ldr	r3, [r7, #0]
 8025c08:	781b      	ldrb	r3, [r3, #0]
 8025c0a:	2b4e      	cmp	r3, #78	; 0x4e
 8025c0c:	d864      	bhi.n	8025cd8 <_scanf_float+0x11c>
 8025c0e:	2b40      	cmp	r3, #64	; 0x40
 8025c10:	d83c      	bhi.n	8025c8c <_scanf_float+0xd0>
 8025c12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8025c16:	b2c8      	uxtb	r0, r1
 8025c18:	280e      	cmp	r0, #14
 8025c1a:	d93a      	bls.n	8025c92 <_scanf_float+0xd6>
 8025c1c:	f1b9 0f00 	cmp.w	r9, #0
 8025c20:	d003      	beq.n	8025c2a <_scanf_float+0x6e>
 8025c22:	6823      	ldr	r3, [r4, #0]
 8025c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8025c28:	6023      	str	r3, [r4, #0]
 8025c2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025c2e:	f1ba 0f01 	cmp.w	sl, #1
 8025c32:	f200 8113 	bhi.w	8025e5c <_scanf_float+0x2a0>
 8025c36:	455e      	cmp	r6, fp
 8025c38:	f200 8105 	bhi.w	8025e46 <_scanf_float+0x28a>
 8025c3c:	2501      	movs	r5, #1
 8025c3e:	4628      	mov	r0, r5
 8025c40:	b007      	add	sp, #28
 8025c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8025c4a:	2a0d      	cmp	r2, #13
 8025c4c:	d8e6      	bhi.n	8025c1c <_scanf_float+0x60>
 8025c4e:	a101      	add	r1, pc, #4	; (adr r1, 8025c54 <_scanf_float+0x98>)
 8025c50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8025c54:	08025d93 	.word	0x08025d93
 8025c58:	08025c1d 	.word	0x08025c1d
 8025c5c:	08025c1d 	.word	0x08025c1d
 8025c60:	08025c1d 	.word	0x08025c1d
 8025c64:	08025df3 	.word	0x08025df3
 8025c68:	08025dcb 	.word	0x08025dcb
 8025c6c:	08025c1d 	.word	0x08025c1d
 8025c70:	08025c1d 	.word	0x08025c1d
 8025c74:	08025da1 	.word	0x08025da1
 8025c78:	08025c1d 	.word	0x08025c1d
 8025c7c:	08025c1d 	.word	0x08025c1d
 8025c80:	08025c1d 	.word	0x08025c1d
 8025c84:	08025c1d 	.word	0x08025c1d
 8025c88:	08025d59 	.word	0x08025d59
 8025c8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8025c90:	e7db      	b.n	8025c4a <_scanf_float+0x8e>
 8025c92:	290e      	cmp	r1, #14
 8025c94:	d8c2      	bhi.n	8025c1c <_scanf_float+0x60>
 8025c96:	a001      	add	r0, pc, #4	; (adr r0, 8025c9c <_scanf_float+0xe0>)
 8025c98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8025c9c:	08025d4b 	.word	0x08025d4b
 8025ca0:	08025c1d 	.word	0x08025c1d
 8025ca4:	08025d4b 	.word	0x08025d4b
 8025ca8:	08025ddf 	.word	0x08025ddf
 8025cac:	08025c1d 	.word	0x08025c1d
 8025cb0:	08025cf9 	.word	0x08025cf9
 8025cb4:	08025d35 	.word	0x08025d35
 8025cb8:	08025d35 	.word	0x08025d35
 8025cbc:	08025d35 	.word	0x08025d35
 8025cc0:	08025d35 	.word	0x08025d35
 8025cc4:	08025d35 	.word	0x08025d35
 8025cc8:	08025d35 	.word	0x08025d35
 8025ccc:	08025d35 	.word	0x08025d35
 8025cd0:	08025d35 	.word	0x08025d35
 8025cd4:	08025d35 	.word	0x08025d35
 8025cd8:	2b6e      	cmp	r3, #110	; 0x6e
 8025cda:	d809      	bhi.n	8025cf0 <_scanf_float+0x134>
 8025cdc:	2b60      	cmp	r3, #96	; 0x60
 8025cde:	d8b2      	bhi.n	8025c46 <_scanf_float+0x8a>
 8025ce0:	2b54      	cmp	r3, #84	; 0x54
 8025ce2:	d077      	beq.n	8025dd4 <_scanf_float+0x218>
 8025ce4:	2b59      	cmp	r3, #89	; 0x59
 8025ce6:	d199      	bne.n	8025c1c <_scanf_float+0x60>
 8025ce8:	2d07      	cmp	r5, #7
 8025cea:	d197      	bne.n	8025c1c <_scanf_float+0x60>
 8025cec:	2508      	movs	r5, #8
 8025cee:	e029      	b.n	8025d44 <_scanf_float+0x188>
 8025cf0:	2b74      	cmp	r3, #116	; 0x74
 8025cf2:	d06f      	beq.n	8025dd4 <_scanf_float+0x218>
 8025cf4:	2b79      	cmp	r3, #121	; 0x79
 8025cf6:	e7f6      	b.n	8025ce6 <_scanf_float+0x12a>
 8025cf8:	6821      	ldr	r1, [r4, #0]
 8025cfa:	05c8      	lsls	r0, r1, #23
 8025cfc:	d51a      	bpl.n	8025d34 <_scanf_float+0x178>
 8025cfe:	9b02      	ldr	r3, [sp, #8]
 8025d00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8025d04:	6021      	str	r1, [r4, #0]
 8025d06:	f109 0901 	add.w	r9, r9, #1
 8025d0a:	b11b      	cbz	r3, 8025d14 <_scanf_float+0x158>
 8025d0c:	3b01      	subs	r3, #1
 8025d0e:	3201      	adds	r2, #1
 8025d10:	9302      	str	r3, [sp, #8]
 8025d12:	60a2      	str	r2, [r4, #8]
 8025d14:	68a3      	ldr	r3, [r4, #8]
 8025d16:	3b01      	subs	r3, #1
 8025d18:	60a3      	str	r3, [r4, #8]
 8025d1a:	6923      	ldr	r3, [r4, #16]
 8025d1c:	3301      	adds	r3, #1
 8025d1e:	6123      	str	r3, [r4, #16]
 8025d20:	687b      	ldr	r3, [r7, #4]
 8025d22:	3b01      	subs	r3, #1
 8025d24:	2b00      	cmp	r3, #0
 8025d26:	607b      	str	r3, [r7, #4]
 8025d28:	f340 8084 	ble.w	8025e34 <_scanf_float+0x278>
 8025d2c:	683b      	ldr	r3, [r7, #0]
 8025d2e:	3301      	adds	r3, #1
 8025d30:	603b      	str	r3, [r7, #0]
 8025d32:	e766      	b.n	8025c02 <_scanf_float+0x46>
 8025d34:	eb1a 0f05 	cmn.w	sl, r5
 8025d38:	f47f af70 	bne.w	8025c1c <_scanf_float+0x60>
 8025d3c:	6822      	ldr	r2, [r4, #0]
 8025d3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8025d42:	6022      	str	r2, [r4, #0]
 8025d44:	f806 3b01 	strb.w	r3, [r6], #1
 8025d48:	e7e4      	b.n	8025d14 <_scanf_float+0x158>
 8025d4a:	6822      	ldr	r2, [r4, #0]
 8025d4c:	0610      	lsls	r0, r2, #24
 8025d4e:	f57f af65 	bpl.w	8025c1c <_scanf_float+0x60>
 8025d52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8025d56:	e7f4      	b.n	8025d42 <_scanf_float+0x186>
 8025d58:	f1ba 0f00 	cmp.w	sl, #0
 8025d5c:	d10e      	bne.n	8025d7c <_scanf_float+0x1c0>
 8025d5e:	f1b9 0f00 	cmp.w	r9, #0
 8025d62:	d10e      	bne.n	8025d82 <_scanf_float+0x1c6>
 8025d64:	6822      	ldr	r2, [r4, #0]
 8025d66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8025d6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8025d6e:	d108      	bne.n	8025d82 <_scanf_float+0x1c6>
 8025d70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8025d74:	6022      	str	r2, [r4, #0]
 8025d76:	f04f 0a01 	mov.w	sl, #1
 8025d7a:	e7e3      	b.n	8025d44 <_scanf_float+0x188>
 8025d7c:	f1ba 0f02 	cmp.w	sl, #2
 8025d80:	d055      	beq.n	8025e2e <_scanf_float+0x272>
 8025d82:	2d01      	cmp	r5, #1
 8025d84:	d002      	beq.n	8025d8c <_scanf_float+0x1d0>
 8025d86:	2d04      	cmp	r5, #4
 8025d88:	f47f af48 	bne.w	8025c1c <_scanf_float+0x60>
 8025d8c:	3501      	adds	r5, #1
 8025d8e:	b2ed      	uxtb	r5, r5
 8025d90:	e7d8      	b.n	8025d44 <_scanf_float+0x188>
 8025d92:	f1ba 0f01 	cmp.w	sl, #1
 8025d96:	f47f af41 	bne.w	8025c1c <_scanf_float+0x60>
 8025d9a:	f04f 0a02 	mov.w	sl, #2
 8025d9e:	e7d1      	b.n	8025d44 <_scanf_float+0x188>
 8025da0:	b97d      	cbnz	r5, 8025dc2 <_scanf_float+0x206>
 8025da2:	f1b9 0f00 	cmp.w	r9, #0
 8025da6:	f47f af3c 	bne.w	8025c22 <_scanf_float+0x66>
 8025daa:	6822      	ldr	r2, [r4, #0]
 8025dac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8025db0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8025db4:	f47f af39 	bne.w	8025c2a <_scanf_float+0x6e>
 8025db8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8025dbc:	6022      	str	r2, [r4, #0]
 8025dbe:	2501      	movs	r5, #1
 8025dc0:	e7c0      	b.n	8025d44 <_scanf_float+0x188>
 8025dc2:	2d03      	cmp	r5, #3
 8025dc4:	d0e2      	beq.n	8025d8c <_scanf_float+0x1d0>
 8025dc6:	2d05      	cmp	r5, #5
 8025dc8:	e7de      	b.n	8025d88 <_scanf_float+0x1cc>
 8025dca:	2d02      	cmp	r5, #2
 8025dcc:	f47f af26 	bne.w	8025c1c <_scanf_float+0x60>
 8025dd0:	2503      	movs	r5, #3
 8025dd2:	e7b7      	b.n	8025d44 <_scanf_float+0x188>
 8025dd4:	2d06      	cmp	r5, #6
 8025dd6:	f47f af21 	bne.w	8025c1c <_scanf_float+0x60>
 8025dda:	2507      	movs	r5, #7
 8025ddc:	e7b2      	b.n	8025d44 <_scanf_float+0x188>
 8025dde:	6822      	ldr	r2, [r4, #0]
 8025de0:	0591      	lsls	r1, r2, #22
 8025de2:	f57f af1b 	bpl.w	8025c1c <_scanf_float+0x60>
 8025de6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8025dea:	6022      	str	r2, [r4, #0]
 8025dec:	f8cd 9004 	str.w	r9, [sp, #4]
 8025df0:	e7a8      	b.n	8025d44 <_scanf_float+0x188>
 8025df2:	6822      	ldr	r2, [r4, #0]
 8025df4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8025df8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8025dfc:	d006      	beq.n	8025e0c <_scanf_float+0x250>
 8025dfe:	0550      	lsls	r0, r2, #21
 8025e00:	f57f af0c 	bpl.w	8025c1c <_scanf_float+0x60>
 8025e04:	f1b9 0f00 	cmp.w	r9, #0
 8025e08:	f43f af0f 	beq.w	8025c2a <_scanf_float+0x6e>
 8025e0c:	0591      	lsls	r1, r2, #22
 8025e0e:	bf58      	it	pl
 8025e10:	9901      	ldrpl	r1, [sp, #4]
 8025e12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8025e16:	bf58      	it	pl
 8025e18:	eba9 0101 	subpl.w	r1, r9, r1
 8025e1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8025e20:	bf58      	it	pl
 8025e22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8025e26:	6022      	str	r2, [r4, #0]
 8025e28:	f04f 0900 	mov.w	r9, #0
 8025e2c:	e78a      	b.n	8025d44 <_scanf_float+0x188>
 8025e2e:	f04f 0a03 	mov.w	sl, #3
 8025e32:	e787      	b.n	8025d44 <_scanf_float+0x188>
 8025e34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8025e38:	4639      	mov	r1, r7
 8025e3a:	4640      	mov	r0, r8
 8025e3c:	4798      	blx	r3
 8025e3e:	2800      	cmp	r0, #0
 8025e40:	f43f aedf 	beq.w	8025c02 <_scanf_float+0x46>
 8025e44:	e6ea      	b.n	8025c1c <_scanf_float+0x60>
 8025e46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8025e4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8025e4e:	463a      	mov	r2, r7
 8025e50:	4640      	mov	r0, r8
 8025e52:	4798      	blx	r3
 8025e54:	6923      	ldr	r3, [r4, #16]
 8025e56:	3b01      	subs	r3, #1
 8025e58:	6123      	str	r3, [r4, #16]
 8025e5a:	e6ec      	b.n	8025c36 <_scanf_float+0x7a>
 8025e5c:	1e6b      	subs	r3, r5, #1
 8025e5e:	2b06      	cmp	r3, #6
 8025e60:	d825      	bhi.n	8025eae <_scanf_float+0x2f2>
 8025e62:	2d02      	cmp	r5, #2
 8025e64:	d836      	bhi.n	8025ed4 <_scanf_float+0x318>
 8025e66:	455e      	cmp	r6, fp
 8025e68:	f67f aee8 	bls.w	8025c3c <_scanf_float+0x80>
 8025e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8025e70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8025e74:	463a      	mov	r2, r7
 8025e76:	4640      	mov	r0, r8
 8025e78:	4798      	blx	r3
 8025e7a:	6923      	ldr	r3, [r4, #16]
 8025e7c:	3b01      	subs	r3, #1
 8025e7e:	6123      	str	r3, [r4, #16]
 8025e80:	e7f1      	b.n	8025e66 <_scanf_float+0x2aa>
 8025e82:	9802      	ldr	r0, [sp, #8]
 8025e84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8025e88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8025e8c:	9002      	str	r0, [sp, #8]
 8025e8e:	463a      	mov	r2, r7
 8025e90:	4640      	mov	r0, r8
 8025e92:	4798      	blx	r3
 8025e94:	6923      	ldr	r3, [r4, #16]
 8025e96:	3b01      	subs	r3, #1
 8025e98:	6123      	str	r3, [r4, #16]
 8025e9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025e9e:	fa5f fa8a 	uxtb.w	sl, sl
 8025ea2:	f1ba 0f02 	cmp.w	sl, #2
 8025ea6:	d1ec      	bne.n	8025e82 <_scanf_float+0x2c6>
 8025ea8:	3d03      	subs	r5, #3
 8025eaa:	b2ed      	uxtb	r5, r5
 8025eac:	1b76      	subs	r6, r6, r5
 8025eae:	6823      	ldr	r3, [r4, #0]
 8025eb0:	05da      	lsls	r2, r3, #23
 8025eb2:	d52f      	bpl.n	8025f14 <_scanf_float+0x358>
 8025eb4:	055b      	lsls	r3, r3, #21
 8025eb6:	d510      	bpl.n	8025eda <_scanf_float+0x31e>
 8025eb8:	455e      	cmp	r6, fp
 8025eba:	f67f aebf 	bls.w	8025c3c <_scanf_float+0x80>
 8025ebe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8025ec2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8025ec6:	463a      	mov	r2, r7
 8025ec8:	4640      	mov	r0, r8
 8025eca:	4798      	blx	r3
 8025ecc:	6923      	ldr	r3, [r4, #16]
 8025ece:	3b01      	subs	r3, #1
 8025ed0:	6123      	str	r3, [r4, #16]
 8025ed2:	e7f1      	b.n	8025eb8 <_scanf_float+0x2fc>
 8025ed4:	46aa      	mov	sl, r5
 8025ed6:	9602      	str	r6, [sp, #8]
 8025ed8:	e7df      	b.n	8025e9a <_scanf_float+0x2de>
 8025eda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8025ede:	6923      	ldr	r3, [r4, #16]
 8025ee0:	2965      	cmp	r1, #101	; 0x65
 8025ee2:	f103 33ff 	add.w	r3, r3, #4294967295
 8025ee6:	f106 35ff 	add.w	r5, r6, #4294967295
 8025eea:	6123      	str	r3, [r4, #16]
 8025eec:	d00c      	beq.n	8025f08 <_scanf_float+0x34c>
 8025eee:	2945      	cmp	r1, #69	; 0x45
 8025ef0:	d00a      	beq.n	8025f08 <_scanf_float+0x34c>
 8025ef2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8025ef6:	463a      	mov	r2, r7
 8025ef8:	4640      	mov	r0, r8
 8025efa:	4798      	blx	r3
 8025efc:	6923      	ldr	r3, [r4, #16]
 8025efe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8025f02:	3b01      	subs	r3, #1
 8025f04:	1eb5      	subs	r5, r6, #2
 8025f06:	6123      	str	r3, [r4, #16]
 8025f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8025f0c:	463a      	mov	r2, r7
 8025f0e:	4640      	mov	r0, r8
 8025f10:	4798      	blx	r3
 8025f12:	462e      	mov	r6, r5
 8025f14:	6825      	ldr	r5, [r4, #0]
 8025f16:	f015 0510 	ands.w	r5, r5, #16
 8025f1a:	d14d      	bne.n	8025fb8 <_scanf_float+0x3fc>
 8025f1c:	7035      	strb	r5, [r6, #0]
 8025f1e:	6823      	ldr	r3, [r4, #0]
 8025f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8025f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025f28:	d11a      	bne.n	8025f60 <_scanf_float+0x3a4>
 8025f2a:	9b01      	ldr	r3, [sp, #4]
 8025f2c:	454b      	cmp	r3, r9
 8025f2e:	eba3 0209 	sub.w	r2, r3, r9
 8025f32:	d122      	bne.n	8025f7a <_scanf_float+0x3be>
 8025f34:	2200      	movs	r2, #0
 8025f36:	4659      	mov	r1, fp
 8025f38:	4640      	mov	r0, r8
 8025f3a:	f000 feaf 	bl	8026c9c <_strtod_r>
 8025f3e:	9b03      	ldr	r3, [sp, #12]
 8025f40:	6821      	ldr	r1, [r4, #0]
 8025f42:	681b      	ldr	r3, [r3, #0]
 8025f44:	f011 0f02 	tst.w	r1, #2
 8025f48:	f103 0204 	add.w	r2, r3, #4
 8025f4c:	d020      	beq.n	8025f90 <_scanf_float+0x3d4>
 8025f4e:	9903      	ldr	r1, [sp, #12]
 8025f50:	600a      	str	r2, [r1, #0]
 8025f52:	681b      	ldr	r3, [r3, #0]
 8025f54:	ed83 0b00 	vstr	d0, [r3]
 8025f58:	68e3      	ldr	r3, [r4, #12]
 8025f5a:	3301      	adds	r3, #1
 8025f5c:	60e3      	str	r3, [r4, #12]
 8025f5e:	e66e      	b.n	8025c3e <_scanf_float+0x82>
 8025f60:	9b04      	ldr	r3, [sp, #16]
 8025f62:	2b00      	cmp	r3, #0
 8025f64:	d0e6      	beq.n	8025f34 <_scanf_float+0x378>
 8025f66:	9905      	ldr	r1, [sp, #20]
 8025f68:	230a      	movs	r3, #10
 8025f6a:	462a      	mov	r2, r5
 8025f6c:	3101      	adds	r1, #1
 8025f6e:	4640      	mov	r0, r8
 8025f70:	f000 ff1e 	bl	8026db0 <_strtol_r>
 8025f74:	9b04      	ldr	r3, [sp, #16]
 8025f76:	9e05      	ldr	r6, [sp, #20]
 8025f78:	1ac2      	subs	r2, r0, r3
 8025f7a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8025f7e:	429e      	cmp	r6, r3
 8025f80:	bf28      	it	cs
 8025f82:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8025f86:	490d      	ldr	r1, [pc, #52]	; (8025fbc <_scanf_float+0x400>)
 8025f88:	4630      	mov	r0, r6
 8025f8a:	f000 f875 	bl	8026078 <siprintf>
 8025f8e:	e7d1      	b.n	8025f34 <_scanf_float+0x378>
 8025f90:	f011 0f04 	tst.w	r1, #4
 8025f94:	9903      	ldr	r1, [sp, #12]
 8025f96:	600a      	str	r2, [r1, #0]
 8025f98:	d1db      	bne.n	8025f52 <_scanf_float+0x396>
 8025f9a:	eeb4 0b40 	vcmp.f64	d0, d0
 8025f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025fa2:	681e      	ldr	r6, [r3, #0]
 8025fa4:	d705      	bvc.n	8025fb2 <_scanf_float+0x3f6>
 8025fa6:	4806      	ldr	r0, [pc, #24]	; (8025fc0 <_scanf_float+0x404>)
 8025fa8:	f000 f81c 	bl	8025fe4 <nanf>
 8025fac:	ed86 0a00 	vstr	s0, [r6]
 8025fb0:	e7d2      	b.n	8025f58 <_scanf_float+0x39c>
 8025fb2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8025fb6:	e7f9      	b.n	8025fac <_scanf_float+0x3f0>
 8025fb8:	2500      	movs	r5, #0
 8025fba:	e640      	b.n	8025c3e <_scanf_float+0x82>
 8025fbc:	0802d857 	.word	0x0802d857
 8025fc0:	0802d80f 	.word	0x0802d80f

08025fc4 <_sbrk_r>:
 8025fc4:	b538      	push	{r3, r4, r5, lr}
 8025fc6:	4d06      	ldr	r5, [pc, #24]	; (8025fe0 <_sbrk_r+0x1c>)
 8025fc8:	2300      	movs	r3, #0
 8025fca:	4604      	mov	r4, r0
 8025fcc:	4608      	mov	r0, r1
 8025fce:	602b      	str	r3, [r5, #0]
 8025fd0:	f7dc facc 	bl	800256c <_sbrk>
 8025fd4:	1c43      	adds	r3, r0, #1
 8025fd6:	d102      	bne.n	8025fde <_sbrk_r+0x1a>
 8025fd8:	682b      	ldr	r3, [r5, #0]
 8025fda:	b103      	cbz	r3, 8025fde <_sbrk_r+0x1a>
 8025fdc:	6023      	str	r3, [r4, #0]
 8025fde:	bd38      	pop	{r3, r4, r5, pc}
 8025fe0:	20056dcc 	.word	0x20056dcc

08025fe4 <nanf>:
 8025fe4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025fec <nanf+0x8>
 8025fe8:	4770      	bx	lr
 8025fea:	bf00      	nop
 8025fec:	7fc00000 	.word	0x7fc00000

08025ff0 <_raise_r>:
 8025ff0:	291f      	cmp	r1, #31
 8025ff2:	b538      	push	{r3, r4, r5, lr}
 8025ff4:	4604      	mov	r4, r0
 8025ff6:	460d      	mov	r5, r1
 8025ff8:	d904      	bls.n	8026004 <_raise_r+0x14>
 8025ffa:	2316      	movs	r3, #22
 8025ffc:	6003      	str	r3, [r0, #0]
 8025ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8026002:	bd38      	pop	{r3, r4, r5, pc}
 8026004:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026006:	b112      	cbz	r2, 802600e <_raise_r+0x1e>
 8026008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802600c:	b94b      	cbnz	r3, 8026022 <_raise_r+0x32>
 802600e:	4620      	mov	r0, r4
 8026010:	f000 f830 	bl	8026074 <_getpid_r>
 8026014:	462a      	mov	r2, r5
 8026016:	4601      	mov	r1, r0
 8026018:	4620      	mov	r0, r4
 802601a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802601e:	f000 b817 	b.w	8026050 <_kill_r>
 8026022:	2b01      	cmp	r3, #1
 8026024:	d00a      	beq.n	802603c <_raise_r+0x4c>
 8026026:	1c59      	adds	r1, r3, #1
 8026028:	d103      	bne.n	8026032 <_raise_r+0x42>
 802602a:	2316      	movs	r3, #22
 802602c:	6003      	str	r3, [r0, #0]
 802602e:	2001      	movs	r0, #1
 8026030:	e7e7      	b.n	8026002 <_raise_r+0x12>
 8026032:	2400      	movs	r4, #0
 8026034:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026038:	4628      	mov	r0, r5
 802603a:	4798      	blx	r3
 802603c:	2000      	movs	r0, #0
 802603e:	e7e0      	b.n	8026002 <_raise_r+0x12>

08026040 <raise>:
 8026040:	4b02      	ldr	r3, [pc, #8]	; (802604c <raise+0xc>)
 8026042:	4601      	mov	r1, r0
 8026044:	6818      	ldr	r0, [r3, #0]
 8026046:	f7ff bfd3 	b.w	8025ff0 <_raise_r>
 802604a:	bf00      	nop
 802604c:	20000074 	.word	0x20000074

08026050 <_kill_r>:
 8026050:	b538      	push	{r3, r4, r5, lr}
 8026052:	4d07      	ldr	r5, [pc, #28]	; (8026070 <_kill_r+0x20>)
 8026054:	2300      	movs	r3, #0
 8026056:	4604      	mov	r4, r0
 8026058:	4608      	mov	r0, r1
 802605a:	4611      	mov	r1, r2
 802605c:	602b      	str	r3, [r5, #0]
 802605e:	f7dc f9fd 	bl	800245c <_kill>
 8026062:	1c43      	adds	r3, r0, #1
 8026064:	d102      	bne.n	802606c <_kill_r+0x1c>
 8026066:	682b      	ldr	r3, [r5, #0]
 8026068:	b103      	cbz	r3, 802606c <_kill_r+0x1c>
 802606a:	6023      	str	r3, [r4, #0]
 802606c:	bd38      	pop	{r3, r4, r5, pc}
 802606e:	bf00      	nop
 8026070:	20056dcc 	.word	0x20056dcc

08026074 <_getpid_r>:
 8026074:	f7dc b9ea 	b.w	800244c <_getpid>

08026078 <siprintf>:
 8026078:	b40e      	push	{r1, r2, r3}
 802607a:	b500      	push	{lr}
 802607c:	b09c      	sub	sp, #112	; 0x70
 802607e:	ab1d      	add	r3, sp, #116	; 0x74
 8026080:	9002      	str	r0, [sp, #8]
 8026082:	9006      	str	r0, [sp, #24]
 8026084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8026088:	4809      	ldr	r0, [pc, #36]	; (80260b0 <siprintf+0x38>)
 802608a:	9107      	str	r1, [sp, #28]
 802608c:	9104      	str	r1, [sp, #16]
 802608e:	4909      	ldr	r1, [pc, #36]	; (80260b4 <siprintf+0x3c>)
 8026090:	f853 2b04 	ldr.w	r2, [r3], #4
 8026094:	9105      	str	r1, [sp, #20]
 8026096:	6800      	ldr	r0, [r0, #0]
 8026098:	9301      	str	r3, [sp, #4]
 802609a:	a902      	add	r1, sp, #8
 802609c:	f003 f8d0 	bl	8029240 <_svfiprintf_r>
 80260a0:	9b02      	ldr	r3, [sp, #8]
 80260a2:	2200      	movs	r2, #0
 80260a4:	701a      	strb	r2, [r3, #0]
 80260a6:	b01c      	add	sp, #112	; 0x70
 80260a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80260ac:	b003      	add	sp, #12
 80260ae:	4770      	bx	lr
 80260b0:	20000074 	.word	0x20000074
 80260b4:	ffff0208 	.word	0xffff0208

080260b8 <sulp>:
 80260b8:	b570      	push	{r4, r5, r6, lr}
 80260ba:	4604      	mov	r4, r0
 80260bc:	460d      	mov	r5, r1
 80260be:	4616      	mov	r6, r2
 80260c0:	ec45 4b10 	vmov	d0, r4, r5
 80260c4:	f002 fedc 	bl	8028e80 <__ulp>
 80260c8:	b17e      	cbz	r6, 80260ea <sulp+0x32>
 80260ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80260ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80260d2:	2b00      	cmp	r3, #0
 80260d4:	dd09      	ble.n	80260ea <sulp+0x32>
 80260d6:	051b      	lsls	r3, r3, #20
 80260d8:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80260dc:	2000      	movs	r0, #0
 80260de:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80260e2:	ec41 0b17 	vmov	d7, r0, r1
 80260e6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80260ea:	bd70      	pop	{r4, r5, r6, pc}
 80260ec:	0000      	movs	r0, r0
	...

080260f0 <_strtod_l>:
 80260f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80260f4:	ed2d 8b0c 	vpush	{d8-d13}
 80260f8:	b09d      	sub	sp, #116	; 0x74
 80260fa:	461f      	mov	r7, r3
 80260fc:	2300      	movs	r3, #0
 80260fe:	9318      	str	r3, [sp, #96]	; 0x60
 8026100:	4ba6      	ldr	r3, [pc, #664]	; (802639c <_strtod_l+0x2ac>)
 8026102:	9213      	str	r2, [sp, #76]	; 0x4c
 8026104:	681b      	ldr	r3, [r3, #0]
 8026106:	9308      	str	r3, [sp, #32]
 8026108:	4604      	mov	r4, r0
 802610a:	4618      	mov	r0, r3
 802610c:	468a      	mov	sl, r1
 802610e:	f7da f897 	bl	8000240 <strlen>
 8026112:	f04f 0800 	mov.w	r8, #0
 8026116:	4605      	mov	r5, r0
 8026118:	f04f 0900 	mov.w	r9, #0
 802611c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8026120:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026122:	781a      	ldrb	r2, [r3, #0]
 8026124:	2a2b      	cmp	r2, #43	; 0x2b
 8026126:	d04d      	beq.n	80261c4 <_strtod_l+0xd4>
 8026128:	d83a      	bhi.n	80261a0 <_strtod_l+0xb0>
 802612a:	2a0d      	cmp	r2, #13
 802612c:	d833      	bhi.n	8026196 <_strtod_l+0xa6>
 802612e:	2a08      	cmp	r2, #8
 8026130:	d833      	bhi.n	802619a <_strtod_l+0xaa>
 8026132:	2a00      	cmp	r2, #0
 8026134:	d03d      	beq.n	80261b2 <_strtod_l+0xc2>
 8026136:	2300      	movs	r3, #0
 8026138:	930b      	str	r3, [sp, #44]	; 0x2c
 802613a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 802613c:	7833      	ldrb	r3, [r6, #0]
 802613e:	2b30      	cmp	r3, #48	; 0x30
 8026140:	f040 80b6 	bne.w	80262b0 <_strtod_l+0x1c0>
 8026144:	7873      	ldrb	r3, [r6, #1]
 8026146:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802614a:	2b58      	cmp	r3, #88	; 0x58
 802614c:	d16d      	bne.n	802622a <_strtod_l+0x13a>
 802614e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026150:	9301      	str	r3, [sp, #4]
 8026152:	ab18      	add	r3, sp, #96	; 0x60
 8026154:	9702      	str	r7, [sp, #8]
 8026156:	9300      	str	r3, [sp, #0]
 8026158:	4a91      	ldr	r2, [pc, #580]	; (80263a0 <_strtod_l+0x2b0>)
 802615a:	ab19      	add	r3, sp, #100	; 0x64
 802615c:	a917      	add	r1, sp, #92	; 0x5c
 802615e:	4620      	mov	r0, r4
 8026160:	f001 ff76 	bl	8028050 <__gethex>
 8026164:	f010 0507 	ands.w	r5, r0, #7
 8026168:	4607      	mov	r7, r0
 802616a:	d005      	beq.n	8026178 <_strtod_l+0x88>
 802616c:	2d06      	cmp	r5, #6
 802616e:	d12b      	bne.n	80261c8 <_strtod_l+0xd8>
 8026170:	3601      	adds	r6, #1
 8026172:	2300      	movs	r3, #0
 8026174:	9617      	str	r6, [sp, #92]	; 0x5c
 8026176:	930b      	str	r3, [sp, #44]	; 0x2c
 8026178:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802617a:	2b00      	cmp	r3, #0
 802617c:	f040 856e 	bne.w	8026c5c <_strtod_l+0xb6c>
 8026180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026182:	b1e3      	cbz	r3, 80261be <_strtod_l+0xce>
 8026184:	ec49 8b17 	vmov	d7, r8, r9
 8026188:	eeb1 0b47 	vneg.f64	d0, d7
 802618c:	b01d      	add	sp, #116	; 0x74
 802618e:	ecbd 8b0c 	vpop	{d8-d13}
 8026192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026196:	2a20      	cmp	r2, #32
 8026198:	d1cd      	bne.n	8026136 <_strtod_l+0x46>
 802619a:	3301      	adds	r3, #1
 802619c:	9317      	str	r3, [sp, #92]	; 0x5c
 802619e:	e7bf      	b.n	8026120 <_strtod_l+0x30>
 80261a0:	2a2d      	cmp	r2, #45	; 0x2d
 80261a2:	d1c8      	bne.n	8026136 <_strtod_l+0x46>
 80261a4:	2201      	movs	r2, #1
 80261a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80261a8:	1c5a      	adds	r2, r3, #1
 80261aa:	9217      	str	r2, [sp, #92]	; 0x5c
 80261ac:	785b      	ldrb	r3, [r3, #1]
 80261ae:	2b00      	cmp	r3, #0
 80261b0:	d1c3      	bne.n	802613a <_strtod_l+0x4a>
 80261b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80261b4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80261b8:	2b00      	cmp	r3, #0
 80261ba:	f040 854d 	bne.w	8026c58 <_strtod_l+0xb68>
 80261be:	ec49 8b10 	vmov	d0, r8, r9
 80261c2:	e7e3      	b.n	802618c <_strtod_l+0x9c>
 80261c4:	2200      	movs	r2, #0
 80261c6:	e7ee      	b.n	80261a6 <_strtod_l+0xb6>
 80261c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80261ca:	b13a      	cbz	r2, 80261dc <_strtod_l+0xec>
 80261cc:	2135      	movs	r1, #53	; 0x35
 80261ce:	a81a      	add	r0, sp, #104	; 0x68
 80261d0:	f002 ff62 	bl	8029098 <__copybits>
 80261d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80261d6:	4620      	mov	r0, r4
 80261d8:	f002 fb26 	bl	8028828 <_Bfree>
 80261dc:	3d01      	subs	r5, #1
 80261de:	2d05      	cmp	r5, #5
 80261e0:	d807      	bhi.n	80261f2 <_strtod_l+0x102>
 80261e2:	e8df f005 	tbb	[pc, r5]
 80261e6:	0b0e      	.short	0x0b0e
 80261e8:	030e1d18 	.word	0x030e1d18
 80261ec:	f04f 0900 	mov.w	r9, #0
 80261f0:	46c8      	mov	r8, r9
 80261f2:	073b      	lsls	r3, r7, #28
 80261f4:	d5c0      	bpl.n	8026178 <_strtod_l+0x88>
 80261f6:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80261fa:	e7bd      	b.n	8026178 <_strtod_l+0x88>
 80261fc:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8026200:	e7f7      	b.n	80261f2 <_strtod_l+0x102>
 8026202:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8026206:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8026208:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 802620c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8026210:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8026214:	e7ed      	b.n	80261f2 <_strtod_l+0x102>
 8026216:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80263a4 <_strtod_l+0x2b4>
 802621a:	f04f 0800 	mov.w	r8, #0
 802621e:	e7e8      	b.n	80261f2 <_strtod_l+0x102>
 8026220:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8026224:	f04f 38ff 	mov.w	r8, #4294967295
 8026228:	e7e3      	b.n	80261f2 <_strtod_l+0x102>
 802622a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802622c:	1c5a      	adds	r2, r3, #1
 802622e:	9217      	str	r2, [sp, #92]	; 0x5c
 8026230:	785b      	ldrb	r3, [r3, #1]
 8026232:	2b30      	cmp	r3, #48	; 0x30
 8026234:	d0f9      	beq.n	802622a <_strtod_l+0x13a>
 8026236:	2b00      	cmp	r3, #0
 8026238:	d09e      	beq.n	8026178 <_strtod_l+0x88>
 802623a:	2301      	movs	r3, #1
 802623c:	9306      	str	r3, [sp, #24]
 802623e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026240:	930c      	str	r3, [sp, #48]	; 0x30
 8026242:	2300      	movs	r3, #0
 8026244:	9304      	str	r3, [sp, #16]
 8026246:	930a      	str	r3, [sp, #40]	; 0x28
 8026248:	461e      	mov	r6, r3
 802624a:	220a      	movs	r2, #10
 802624c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802624e:	f890 b000 	ldrb.w	fp, [r0]
 8026252:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8026256:	b2d9      	uxtb	r1, r3
 8026258:	2909      	cmp	r1, #9
 802625a:	d92b      	bls.n	80262b4 <_strtod_l+0x1c4>
 802625c:	9908      	ldr	r1, [sp, #32]
 802625e:	462a      	mov	r2, r5
 8026260:	f003 f939 	bl	80294d6 <strncmp>
 8026264:	2800      	cmp	r0, #0
 8026266:	d035      	beq.n	80262d4 <_strtod_l+0x1e4>
 8026268:	2000      	movs	r0, #0
 802626a:	465a      	mov	r2, fp
 802626c:	4633      	mov	r3, r6
 802626e:	4683      	mov	fp, r0
 8026270:	4601      	mov	r1, r0
 8026272:	2a65      	cmp	r2, #101	; 0x65
 8026274:	d001      	beq.n	802627a <_strtod_l+0x18a>
 8026276:	2a45      	cmp	r2, #69	; 0x45
 8026278:	d118      	bne.n	80262ac <_strtod_l+0x1bc>
 802627a:	b91b      	cbnz	r3, 8026284 <_strtod_l+0x194>
 802627c:	9b06      	ldr	r3, [sp, #24]
 802627e:	4303      	orrs	r3, r0
 8026280:	d097      	beq.n	80261b2 <_strtod_l+0xc2>
 8026282:	2300      	movs	r3, #0
 8026284:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8026288:	f10a 0201 	add.w	r2, sl, #1
 802628c:	9217      	str	r2, [sp, #92]	; 0x5c
 802628e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8026292:	2a2b      	cmp	r2, #43	; 0x2b
 8026294:	d077      	beq.n	8026386 <_strtod_l+0x296>
 8026296:	2a2d      	cmp	r2, #45	; 0x2d
 8026298:	d07d      	beq.n	8026396 <_strtod_l+0x2a6>
 802629a:	f04f 0e00 	mov.w	lr, #0
 802629e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80262a2:	2d09      	cmp	r5, #9
 80262a4:	f240 8084 	bls.w	80263b0 <_strtod_l+0x2c0>
 80262a8:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80262ac:	2500      	movs	r5, #0
 80262ae:	e09f      	b.n	80263f0 <_strtod_l+0x300>
 80262b0:	2300      	movs	r3, #0
 80262b2:	e7c3      	b.n	802623c <_strtod_l+0x14c>
 80262b4:	2e08      	cmp	r6, #8
 80262b6:	bfd5      	itete	le
 80262b8:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80262ba:	9904      	ldrgt	r1, [sp, #16]
 80262bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80262c0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80262c4:	f100 0001 	add.w	r0, r0, #1
 80262c8:	bfd4      	ite	le
 80262ca:	930a      	strle	r3, [sp, #40]	; 0x28
 80262cc:	9304      	strgt	r3, [sp, #16]
 80262ce:	3601      	adds	r6, #1
 80262d0:	9017      	str	r0, [sp, #92]	; 0x5c
 80262d2:	e7bb      	b.n	802624c <_strtod_l+0x15c>
 80262d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80262d6:	195a      	adds	r2, r3, r5
 80262d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80262da:	5d5a      	ldrb	r2, [r3, r5]
 80262dc:	b3ae      	cbz	r6, 802634a <_strtod_l+0x25a>
 80262de:	4683      	mov	fp, r0
 80262e0:	4633      	mov	r3, r6
 80262e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80262e6:	2909      	cmp	r1, #9
 80262e8:	d912      	bls.n	8026310 <_strtod_l+0x220>
 80262ea:	2101      	movs	r1, #1
 80262ec:	e7c1      	b.n	8026272 <_strtod_l+0x182>
 80262ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80262f0:	1c5a      	adds	r2, r3, #1
 80262f2:	9217      	str	r2, [sp, #92]	; 0x5c
 80262f4:	785a      	ldrb	r2, [r3, #1]
 80262f6:	3001      	adds	r0, #1
 80262f8:	2a30      	cmp	r2, #48	; 0x30
 80262fa:	d0f8      	beq.n	80262ee <_strtod_l+0x1fe>
 80262fc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8026300:	2b08      	cmp	r3, #8
 8026302:	f200 84b0 	bhi.w	8026c66 <_strtod_l+0xb76>
 8026306:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026308:	930c      	str	r3, [sp, #48]	; 0x30
 802630a:	4683      	mov	fp, r0
 802630c:	2000      	movs	r0, #0
 802630e:	4603      	mov	r3, r0
 8026310:	3a30      	subs	r2, #48	; 0x30
 8026312:	f100 0101 	add.w	r1, r0, #1
 8026316:	d012      	beq.n	802633e <_strtod_l+0x24e>
 8026318:	448b      	add	fp, r1
 802631a:	eb00 0c03 	add.w	ip, r0, r3
 802631e:	4619      	mov	r1, r3
 8026320:	250a      	movs	r5, #10
 8026322:	4561      	cmp	r1, ip
 8026324:	d113      	bne.n	802634e <_strtod_l+0x25e>
 8026326:	1819      	adds	r1, r3, r0
 8026328:	2908      	cmp	r1, #8
 802632a:	f103 0301 	add.w	r3, r3, #1
 802632e:	4403      	add	r3, r0
 8026330:	dc1d      	bgt.n	802636e <_strtod_l+0x27e>
 8026332:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026334:	210a      	movs	r1, #10
 8026336:	fb01 2200 	mla	r2, r1, r0, r2
 802633a:	920a      	str	r2, [sp, #40]	; 0x28
 802633c:	2100      	movs	r1, #0
 802633e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8026340:	1c50      	adds	r0, r2, #1
 8026342:	9017      	str	r0, [sp, #92]	; 0x5c
 8026344:	7852      	ldrb	r2, [r2, #1]
 8026346:	4608      	mov	r0, r1
 8026348:	e7cb      	b.n	80262e2 <_strtod_l+0x1f2>
 802634a:	4630      	mov	r0, r6
 802634c:	e7d4      	b.n	80262f8 <_strtod_l+0x208>
 802634e:	2908      	cmp	r1, #8
 8026350:	dc04      	bgt.n	802635c <_strtod_l+0x26c>
 8026352:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026354:	436f      	muls	r7, r5
 8026356:	970a      	str	r7, [sp, #40]	; 0x28
 8026358:	3101      	adds	r1, #1
 802635a:	e7e2      	b.n	8026322 <_strtod_l+0x232>
 802635c:	f101 0e01 	add.w	lr, r1, #1
 8026360:	f1be 0f10 	cmp.w	lr, #16
 8026364:	bfde      	ittt	le
 8026366:	9f04      	ldrle	r7, [sp, #16]
 8026368:	436f      	mulle	r7, r5
 802636a:	9704      	strle	r7, [sp, #16]
 802636c:	e7f4      	b.n	8026358 <_strtod_l+0x268>
 802636e:	2b10      	cmp	r3, #16
 8026370:	bfdf      	itttt	le
 8026372:	9804      	ldrle	r0, [sp, #16]
 8026374:	210a      	movle	r1, #10
 8026376:	fb01 2200 	mlale	r2, r1, r0, r2
 802637a:	9204      	strle	r2, [sp, #16]
 802637c:	e7de      	b.n	802633c <_strtod_l+0x24c>
 802637e:	f04f 0b00 	mov.w	fp, #0
 8026382:	2101      	movs	r1, #1
 8026384:	e77a      	b.n	802627c <_strtod_l+0x18c>
 8026386:	f04f 0e00 	mov.w	lr, #0
 802638a:	f10a 0202 	add.w	r2, sl, #2
 802638e:	9217      	str	r2, [sp, #92]	; 0x5c
 8026390:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8026394:	e783      	b.n	802629e <_strtod_l+0x1ae>
 8026396:	f04f 0e01 	mov.w	lr, #1
 802639a:	e7f6      	b.n	802638a <_strtod_l+0x29a>
 802639c:	0802db14 	.word	0x0802db14
 80263a0:	0802d860 	.word	0x0802d860
 80263a4:	7ff00000 	.word	0x7ff00000
 80263a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80263aa:	1c55      	adds	r5, r2, #1
 80263ac:	9517      	str	r5, [sp, #92]	; 0x5c
 80263ae:	7852      	ldrb	r2, [r2, #1]
 80263b0:	2a30      	cmp	r2, #48	; 0x30
 80263b2:	d0f9      	beq.n	80263a8 <_strtod_l+0x2b8>
 80263b4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80263b8:	2d08      	cmp	r5, #8
 80263ba:	f63f af77 	bhi.w	80262ac <_strtod_l+0x1bc>
 80263be:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80263c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80263c4:	9208      	str	r2, [sp, #32]
 80263c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80263c8:	1c55      	adds	r5, r2, #1
 80263ca:	9517      	str	r5, [sp, #92]	; 0x5c
 80263cc:	7852      	ldrb	r2, [r2, #1]
 80263ce:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80263d2:	2f09      	cmp	r7, #9
 80263d4:	d937      	bls.n	8026446 <_strtod_l+0x356>
 80263d6:	9f08      	ldr	r7, [sp, #32]
 80263d8:	1bed      	subs	r5, r5, r7
 80263da:	2d08      	cmp	r5, #8
 80263dc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80263e0:	dc02      	bgt.n	80263e8 <_strtod_l+0x2f8>
 80263e2:	4565      	cmp	r5, ip
 80263e4:	bfa8      	it	ge
 80263e6:	4665      	movge	r5, ip
 80263e8:	f1be 0f00 	cmp.w	lr, #0
 80263ec:	d000      	beq.n	80263f0 <_strtod_l+0x300>
 80263ee:	426d      	negs	r5, r5
 80263f0:	2b00      	cmp	r3, #0
 80263f2:	d14f      	bne.n	8026494 <_strtod_l+0x3a4>
 80263f4:	9b06      	ldr	r3, [sp, #24]
 80263f6:	4303      	orrs	r3, r0
 80263f8:	f47f aebe 	bne.w	8026178 <_strtod_l+0x88>
 80263fc:	2900      	cmp	r1, #0
 80263fe:	f47f aed8 	bne.w	80261b2 <_strtod_l+0xc2>
 8026402:	2a69      	cmp	r2, #105	; 0x69
 8026404:	d027      	beq.n	8026456 <_strtod_l+0x366>
 8026406:	dc24      	bgt.n	8026452 <_strtod_l+0x362>
 8026408:	2a49      	cmp	r2, #73	; 0x49
 802640a:	d024      	beq.n	8026456 <_strtod_l+0x366>
 802640c:	2a4e      	cmp	r2, #78	; 0x4e
 802640e:	f47f aed0 	bne.w	80261b2 <_strtod_l+0xc2>
 8026412:	499b      	ldr	r1, [pc, #620]	; (8026680 <_strtod_l+0x590>)
 8026414:	a817      	add	r0, sp, #92	; 0x5c
 8026416:	f002 f873 	bl	8028500 <__match>
 802641a:	2800      	cmp	r0, #0
 802641c:	f43f aec9 	beq.w	80261b2 <_strtod_l+0xc2>
 8026420:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026422:	781b      	ldrb	r3, [r3, #0]
 8026424:	2b28      	cmp	r3, #40	; 0x28
 8026426:	d12d      	bne.n	8026484 <_strtod_l+0x394>
 8026428:	4996      	ldr	r1, [pc, #600]	; (8026684 <_strtod_l+0x594>)
 802642a:	aa1a      	add	r2, sp, #104	; 0x68
 802642c:	a817      	add	r0, sp, #92	; 0x5c
 802642e:	f002 f87b 	bl	8028528 <__hexnan>
 8026432:	2805      	cmp	r0, #5
 8026434:	d126      	bne.n	8026484 <_strtod_l+0x394>
 8026436:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026438:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 802643c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8026440:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8026444:	e698      	b.n	8026178 <_strtod_l+0x88>
 8026446:	250a      	movs	r5, #10
 8026448:	fb05 250c 	mla	r5, r5, ip, r2
 802644c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8026450:	e7b9      	b.n	80263c6 <_strtod_l+0x2d6>
 8026452:	2a6e      	cmp	r2, #110	; 0x6e
 8026454:	e7db      	b.n	802640e <_strtod_l+0x31e>
 8026456:	498c      	ldr	r1, [pc, #560]	; (8026688 <_strtod_l+0x598>)
 8026458:	a817      	add	r0, sp, #92	; 0x5c
 802645a:	f002 f851 	bl	8028500 <__match>
 802645e:	2800      	cmp	r0, #0
 8026460:	f43f aea7 	beq.w	80261b2 <_strtod_l+0xc2>
 8026464:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026466:	4989      	ldr	r1, [pc, #548]	; (802668c <_strtod_l+0x59c>)
 8026468:	3b01      	subs	r3, #1
 802646a:	a817      	add	r0, sp, #92	; 0x5c
 802646c:	9317      	str	r3, [sp, #92]	; 0x5c
 802646e:	f002 f847 	bl	8028500 <__match>
 8026472:	b910      	cbnz	r0, 802647a <_strtod_l+0x38a>
 8026474:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026476:	3301      	adds	r3, #1
 8026478:	9317      	str	r3, [sp, #92]	; 0x5c
 802647a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80266a0 <_strtod_l+0x5b0>
 802647e:	f04f 0800 	mov.w	r8, #0
 8026482:	e679      	b.n	8026178 <_strtod_l+0x88>
 8026484:	4882      	ldr	r0, [pc, #520]	; (8026690 <_strtod_l+0x5a0>)
 8026486:	f002 ffdb 	bl	8029440 <nan>
 802648a:	ed8d 0b04 	vstr	d0, [sp, #16]
 802648e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8026492:	e671      	b.n	8026178 <_strtod_l+0x88>
 8026494:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8026498:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802649c:	eba5 020b 	sub.w	r2, r5, fp
 80264a0:	2e00      	cmp	r6, #0
 80264a2:	bf08      	it	eq
 80264a4:	461e      	moveq	r6, r3
 80264a6:	2b10      	cmp	r3, #16
 80264a8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80264ac:	9206      	str	r2, [sp, #24]
 80264ae:	461a      	mov	r2, r3
 80264b0:	bfa8      	it	ge
 80264b2:	2210      	movge	r2, #16
 80264b4:	2b09      	cmp	r3, #9
 80264b6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80264ba:	dd0e      	ble.n	80264da <_strtod_l+0x3ea>
 80264bc:	4975      	ldr	r1, [pc, #468]	; (8026694 <_strtod_l+0x5a4>)
 80264be:	eddd 7a04 	vldr	s15, [sp, #16]
 80264c2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80264c6:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80264ca:	ed9d 5b08 	vldr	d5, [sp, #32]
 80264ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80264d2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80264d6:	ec59 8b17 	vmov	r8, r9, d7
 80264da:	2b0f      	cmp	r3, #15
 80264dc:	dc37      	bgt.n	802654e <_strtod_l+0x45e>
 80264de:	9906      	ldr	r1, [sp, #24]
 80264e0:	2900      	cmp	r1, #0
 80264e2:	f43f ae49 	beq.w	8026178 <_strtod_l+0x88>
 80264e6:	dd23      	ble.n	8026530 <_strtod_l+0x440>
 80264e8:	2916      	cmp	r1, #22
 80264ea:	dc0b      	bgt.n	8026504 <_strtod_l+0x414>
 80264ec:	4b69      	ldr	r3, [pc, #420]	; (8026694 <_strtod_l+0x5a4>)
 80264ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80264f2:	ed93 7b00 	vldr	d7, [r3]
 80264f6:	ec49 8b16 	vmov	d6, r8, r9
 80264fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80264fe:	ec59 8b17 	vmov	r8, r9, d7
 8026502:	e639      	b.n	8026178 <_strtod_l+0x88>
 8026504:	9806      	ldr	r0, [sp, #24]
 8026506:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 802650a:	4281      	cmp	r1, r0
 802650c:	db1f      	blt.n	802654e <_strtod_l+0x45e>
 802650e:	4a61      	ldr	r2, [pc, #388]	; (8026694 <_strtod_l+0x5a4>)
 8026510:	f1c3 030f 	rsb	r3, r3, #15
 8026514:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8026518:	ed91 7b00 	vldr	d7, [r1]
 802651c:	ec49 8b16 	vmov	d6, r8, r9
 8026520:	1ac3      	subs	r3, r0, r3
 8026522:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8026526:	ee27 7b06 	vmul.f64	d7, d7, d6
 802652a:	ed92 6b00 	vldr	d6, [r2]
 802652e:	e7e4      	b.n	80264fa <_strtod_l+0x40a>
 8026530:	9906      	ldr	r1, [sp, #24]
 8026532:	3116      	adds	r1, #22
 8026534:	db0b      	blt.n	802654e <_strtod_l+0x45e>
 8026536:	4b57      	ldr	r3, [pc, #348]	; (8026694 <_strtod_l+0x5a4>)
 8026538:	ebab 0505 	sub.w	r5, fp, r5
 802653c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8026540:	ed95 7b00 	vldr	d7, [r5]
 8026544:	ec49 8b16 	vmov	d6, r8, r9
 8026548:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802654c:	e7d7      	b.n	80264fe <_strtod_l+0x40e>
 802654e:	9906      	ldr	r1, [sp, #24]
 8026550:	1a9a      	subs	r2, r3, r2
 8026552:	440a      	add	r2, r1
 8026554:	2a00      	cmp	r2, #0
 8026556:	dd74      	ble.n	8026642 <_strtod_l+0x552>
 8026558:	f012 000f 	ands.w	r0, r2, #15
 802655c:	d00a      	beq.n	8026574 <_strtod_l+0x484>
 802655e:	494d      	ldr	r1, [pc, #308]	; (8026694 <_strtod_l+0x5a4>)
 8026560:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8026564:	ed91 7b00 	vldr	d7, [r1]
 8026568:	ec49 8b16 	vmov	d6, r8, r9
 802656c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026570:	ec59 8b17 	vmov	r8, r9, d7
 8026574:	f032 020f 	bics.w	r2, r2, #15
 8026578:	d04f      	beq.n	802661a <_strtod_l+0x52a>
 802657a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 802657e:	dd22      	ble.n	80265c6 <_strtod_l+0x4d6>
 8026580:	2500      	movs	r5, #0
 8026582:	462e      	mov	r6, r5
 8026584:	950a      	str	r5, [sp, #40]	; 0x28
 8026586:	462f      	mov	r7, r5
 8026588:	2322      	movs	r3, #34	; 0x22
 802658a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80266a0 <_strtod_l+0x5b0>
 802658e:	6023      	str	r3, [r4, #0]
 8026590:	f04f 0800 	mov.w	r8, #0
 8026594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026596:	2b00      	cmp	r3, #0
 8026598:	f43f adee 	beq.w	8026178 <_strtod_l+0x88>
 802659c:	9918      	ldr	r1, [sp, #96]	; 0x60
 802659e:	4620      	mov	r0, r4
 80265a0:	f002 f942 	bl	8028828 <_Bfree>
 80265a4:	4639      	mov	r1, r7
 80265a6:	4620      	mov	r0, r4
 80265a8:	f002 f93e 	bl	8028828 <_Bfree>
 80265ac:	4631      	mov	r1, r6
 80265ae:	4620      	mov	r0, r4
 80265b0:	f002 f93a 	bl	8028828 <_Bfree>
 80265b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80265b6:	4620      	mov	r0, r4
 80265b8:	f002 f936 	bl	8028828 <_Bfree>
 80265bc:	4629      	mov	r1, r5
 80265be:	4620      	mov	r0, r4
 80265c0:	f002 f932 	bl	8028828 <_Bfree>
 80265c4:	e5d8      	b.n	8026178 <_strtod_l+0x88>
 80265c6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80265ca:	2000      	movs	r0, #0
 80265cc:	4f32      	ldr	r7, [pc, #200]	; (8026698 <_strtod_l+0x5a8>)
 80265ce:	1112      	asrs	r2, r2, #4
 80265d0:	4601      	mov	r1, r0
 80265d2:	2a01      	cmp	r2, #1
 80265d4:	dc24      	bgt.n	8026620 <_strtod_l+0x530>
 80265d6:	b108      	cbz	r0, 80265dc <_strtod_l+0x4ec>
 80265d8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80265dc:	4a2e      	ldr	r2, [pc, #184]	; (8026698 <_strtod_l+0x5a8>)
 80265de:	482f      	ldr	r0, [pc, #188]	; (802669c <_strtod_l+0x5ac>)
 80265e0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80265e4:	ed91 7b00 	vldr	d7, [r1]
 80265e8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80265ec:	ec49 8b16 	vmov	d6, r8, r9
 80265f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80265f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80265f8:	9905      	ldr	r1, [sp, #20]
 80265fa:	4a29      	ldr	r2, [pc, #164]	; (80266a0 <_strtod_l+0x5b0>)
 80265fc:	400a      	ands	r2, r1
 80265fe:	4282      	cmp	r2, r0
 8026600:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8026604:	d8bc      	bhi.n	8026580 <_strtod_l+0x490>
 8026606:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 802660a:	4282      	cmp	r2, r0
 802660c:	bf86      	itte	hi
 802660e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80266a4 <_strtod_l+0x5b4>
 8026612:	f04f 38ff 	movhi.w	r8, #4294967295
 8026616:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 802661a:	2200      	movs	r2, #0
 802661c:	9204      	str	r2, [sp, #16]
 802661e:	e07f      	b.n	8026720 <_strtod_l+0x630>
 8026620:	f012 0f01 	tst.w	r2, #1
 8026624:	d00a      	beq.n	802663c <_strtod_l+0x54c>
 8026626:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 802662a:	ed90 7b00 	vldr	d7, [r0]
 802662e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8026632:	ee26 7b07 	vmul.f64	d7, d6, d7
 8026636:	ed8d 7b04 	vstr	d7, [sp, #16]
 802663a:	2001      	movs	r0, #1
 802663c:	3101      	adds	r1, #1
 802663e:	1052      	asrs	r2, r2, #1
 8026640:	e7c7      	b.n	80265d2 <_strtod_l+0x4e2>
 8026642:	d0ea      	beq.n	802661a <_strtod_l+0x52a>
 8026644:	4252      	negs	r2, r2
 8026646:	f012 000f 	ands.w	r0, r2, #15
 802664a:	d00a      	beq.n	8026662 <_strtod_l+0x572>
 802664c:	4911      	ldr	r1, [pc, #68]	; (8026694 <_strtod_l+0x5a4>)
 802664e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8026652:	ed91 7b00 	vldr	d7, [r1]
 8026656:	ec49 8b16 	vmov	d6, r8, r9
 802665a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802665e:	ec59 8b17 	vmov	r8, r9, d7
 8026662:	1112      	asrs	r2, r2, #4
 8026664:	d0d9      	beq.n	802661a <_strtod_l+0x52a>
 8026666:	2a1f      	cmp	r2, #31
 8026668:	dd1e      	ble.n	80266a8 <_strtod_l+0x5b8>
 802666a:	2500      	movs	r5, #0
 802666c:	462e      	mov	r6, r5
 802666e:	950a      	str	r5, [sp, #40]	; 0x28
 8026670:	462f      	mov	r7, r5
 8026672:	2322      	movs	r3, #34	; 0x22
 8026674:	f04f 0800 	mov.w	r8, #0
 8026678:	f04f 0900 	mov.w	r9, #0
 802667c:	6023      	str	r3, [r4, #0]
 802667e:	e789      	b.n	8026594 <_strtod_l+0x4a4>
 8026680:	0802d832 	.word	0x0802d832
 8026684:	0802d874 	.word	0x0802d874
 8026688:	0802d82a 	.word	0x0802d82a
 802668c:	0802d9b4 	.word	0x0802d9b4
 8026690:	0802d80f 	.word	0x0802d80f
 8026694:	0802dbb0 	.word	0x0802dbb0
 8026698:	0802db88 	.word	0x0802db88
 802669c:	7ca00000 	.word	0x7ca00000
 80266a0:	7ff00000 	.word	0x7ff00000
 80266a4:	7fefffff 	.word	0x7fefffff
 80266a8:	f012 0110 	ands.w	r1, r2, #16
 80266ac:	bf18      	it	ne
 80266ae:	216a      	movne	r1, #106	; 0x6a
 80266b0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80266b4:	9104      	str	r1, [sp, #16]
 80266b6:	49c0      	ldr	r1, [pc, #768]	; (80269b8 <_strtod_l+0x8c8>)
 80266b8:	2000      	movs	r0, #0
 80266ba:	07d7      	lsls	r7, r2, #31
 80266bc:	d508      	bpl.n	80266d0 <_strtod_l+0x5e0>
 80266be:	ed9d 6b08 	vldr	d6, [sp, #32]
 80266c2:	ed91 7b00 	vldr	d7, [r1]
 80266c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80266ca:	ed8d 7b08 	vstr	d7, [sp, #32]
 80266ce:	2001      	movs	r0, #1
 80266d0:	1052      	asrs	r2, r2, #1
 80266d2:	f101 0108 	add.w	r1, r1, #8
 80266d6:	d1f0      	bne.n	80266ba <_strtod_l+0x5ca>
 80266d8:	b108      	cbz	r0, 80266de <_strtod_l+0x5ee>
 80266da:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80266de:	9a04      	ldr	r2, [sp, #16]
 80266e0:	b1ba      	cbz	r2, 8026712 <_strtod_l+0x622>
 80266e2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80266e6:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80266ea:	2a00      	cmp	r2, #0
 80266ec:	4649      	mov	r1, r9
 80266ee:	dd10      	ble.n	8026712 <_strtod_l+0x622>
 80266f0:	2a1f      	cmp	r2, #31
 80266f2:	f340 8132 	ble.w	802695a <_strtod_l+0x86a>
 80266f6:	2a34      	cmp	r2, #52	; 0x34
 80266f8:	bfde      	ittt	le
 80266fa:	3a20      	suble	r2, #32
 80266fc:	f04f 30ff 	movle.w	r0, #4294967295
 8026700:	fa00 f202 	lslle.w	r2, r0, r2
 8026704:	f04f 0800 	mov.w	r8, #0
 8026708:	bfcc      	ite	gt
 802670a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 802670e:	ea02 0901 	andle.w	r9, r2, r1
 8026712:	ec49 8b17 	vmov	d7, r8, r9
 8026716:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802671a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802671e:	d0a4      	beq.n	802666a <_strtod_l+0x57a>
 8026720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026722:	9200      	str	r2, [sp, #0]
 8026724:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026726:	4632      	mov	r2, r6
 8026728:	4620      	mov	r0, r4
 802672a:	f002 f8e9 	bl	8028900 <__s2b>
 802672e:	900a      	str	r0, [sp, #40]	; 0x28
 8026730:	2800      	cmp	r0, #0
 8026732:	f43f af25 	beq.w	8026580 <_strtod_l+0x490>
 8026736:	9b06      	ldr	r3, [sp, #24]
 8026738:	ebab 0505 	sub.w	r5, fp, r5
 802673c:	2b00      	cmp	r3, #0
 802673e:	bfb4      	ite	lt
 8026740:	462b      	movlt	r3, r5
 8026742:	2300      	movge	r3, #0
 8026744:	930c      	str	r3, [sp, #48]	; 0x30
 8026746:	9b06      	ldr	r3, [sp, #24]
 8026748:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80269a0 <_strtod_l+0x8b0>
 802674c:	ed9f ab96 	vldr	d10, [pc, #600]	; 80269a8 <_strtod_l+0x8b8>
 8026750:	ed9f bb97 	vldr	d11, [pc, #604]	; 80269b0 <_strtod_l+0x8c0>
 8026754:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026758:	2500      	movs	r5, #0
 802675a:	9312      	str	r3, [sp, #72]	; 0x48
 802675c:	462e      	mov	r6, r5
 802675e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026760:	4620      	mov	r0, r4
 8026762:	6859      	ldr	r1, [r3, #4]
 8026764:	f002 f820 	bl	80287a8 <_Balloc>
 8026768:	4607      	mov	r7, r0
 802676a:	2800      	cmp	r0, #0
 802676c:	f43f af0c 	beq.w	8026588 <_strtod_l+0x498>
 8026770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026772:	691a      	ldr	r2, [r3, #16]
 8026774:	3202      	adds	r2, #2
 8026776:	f103 010c 	add.w	r1, r3, #12
 802677a:	0092      	lsls	r2, r2, #2
 802677c:	300c      	adds	r0, #12
 802677e:	f7fe fbbf 	bl	8024f00 <memcpy>
 8026782:	ec49 8b10 	vmov	d0, r8, r9
 8026786:	aa1a      	add	r2, sp, #104	; 0x68
 8026788:	a919      	add	r1, sp, #100	; 0x64
 802678a:	4620      	mov	r0, r4
 802678c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8026790:	f002 fbf2 	bl	8028f78 <__d2b>
 8026794:	9018      	str	r0, [sp, #96]	; 0x60
 8026796:	2800      	cmp	r0, #0
 8026798:	f43f aef6 	beq.w	8026588 <_strtod_l+0x498>
 802679c:	2101      	movs	r1, #1
 802679e:	4620      	mov	r0, r4
 80267a0:	f002 f948 	bl	8028a34 <__i2b>
 80267a4:	4606      	mov	r6, r0
 80267a6:	2800      	cmp	r0, #0
 80267a8:	f43f aeee 	beq.w	8026588 <_strtod_l+0x498>
 80267ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80267ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80267b0:	2b00      	cmp	r3, #0
 80267b2:	bfab      	itete	ge
 80267b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80267b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80267b8:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 80267bc:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80267c0:	bfac      	ite	ge
 80267c2:	eb03 0b02 	addge.w	fp, r3, r2
 80267c6:	eba2 0a03 	sublt.w	sl, r2, r3
 80267ca:	9a04      	ldr	r2, [sp, #16]
 80267cc:	1a9b      	subs	r3, r3, r2
 80267ce:	440b      	add	r3, r1
 80267d0:	4a7a      	ldr	r2, [pc, #488]	; (80269bc <_strtod_l+0x8cc>)
 80267d2:	3b01      	subs	r3, #1
 80267d4:	4293      	cmp	r3, r2
 80267d6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80267da:	f280 80d1 	bge.w	8026980 <_strtod_l+0x890>
 80267de:	1ad2      	subs	r2, r2, r3
 80267e0:	2a1f      	cmp	r2, #31
 80267e2:	eba1 0102 	sub.w	r1, r1, r2
 80267e6:	f04f 0001 	mov.w	r0, #1
 80267ea:	f300 80bd 	bgt.w	8026968 <_strtod_l+0x878>
 80267ee:	fa00 f302 	lsl.w	r3, r0, r2
 80267f2:	930e      	str	r3, [sp, #56]	; 0x38
 80267f4:	2300      	movs	r3, #0
 80267f6:	930d      	str	r3, [sp, #52]	; 0x34
 80267f8:	eb0b 0301 	add.w	r3, fp, r1
 80267fc:	9a04      	ldr	r2, [sp, #16]
 80267fe:	459b      	cmp	fp, r3
 8026800:	448a      	add	sl, r1
 8026802:	4492      	add	sl, r2
 8026804:	465a      	mov	r2, fp
 8026806:	bfa8      	it	ge
 8026808:	461a      	movge	r2, r3
 802680a:	4552      	cmp	r2, sl
 802680c:	bfa8      	it	ge
 802680e:	4652      	movge	r2, sl
 8026810:	2a00      	cmp	r2, #0
 8026812:	bfc2      	ittt	gt
 8026814:	1a9b      	subgt	r3, r3, r2
 8026816:	ebaa 0a02 	subgt.w	sl, sl, r2
 802681a:	ebab 0b02 	subgt.w	fp, fp, r2
 802681e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026820:	2a00      	cmp	r2, #0
 8026822:	dd18      	ble.n	8026856 <_strtod_l+0x766>
 8026824:	4631      	mov	r1, r6
 8026826:	4620      	mov	r0, r4
 8026828:	9315      	str	r3, [sp, #84]	; 0x54
 802682a:	f002 f9bf 	bl	8028bac <__pow5mult>
 802682e:	4606      	mov	r6, r0
 8026830:	2800      	cmp	r0, #0
 8026832:	f43f aea9 	beq.w	8026588 <_strtod_l+0x498>
 8026836:	4601      	mov	r1, r0
 8026838:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802683a:	4620      	mov	r0, r4
 802683c:	f002 f910 	bl	8028a60 <__multiply>
 8026840:	9014      	str	r0, [sp, #80]	; 0x50
 8026842:	2800      	cmp	r0, #0
 8026844:	f43f aea0 	beq.w	8026588 <_strtod_l+0x498>
 8026848:	9918      	ldr	r1, [sp, #96]	; 0x60
 802684a:	4620      	mov	r0, r4
 802684c:	f001 ffec 	bl	8028828 <_Bfree>
 8026850:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026852:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026854:	9218      	str	r2, [sp, #96]	; 0x60
 8026856:	2b00      	cmp	r3, #0
 8026858:	f300 8097 	bgt.w	802698a <_strtod_l+0x89a>
 802685c:	9b06      	ldr	r3, [sp, #24]
 802685e:	2b00      	cmp	r3, #0
 8026860:	dd08      	ble.n	8026874 <_strtod_l+0x784>
 8026862:	4639      	mov	r1, r7
 8026864:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026866:	4620      	mov	r0, r4
 8026868:	f002 f9a0 	bl	8028bac <__pow5mult>
 802686c:	4607      	mov	r7, r0
 802686e:	2800      	cmp	r0, #0
 8026870:	f43f ae8a 	beq.w	8026588 <_strtod_l+0x498>
 8026874:	f1ba 0f00 	cmp.w	sl, #0
 8026878:	dd08      	ble.n	802688c <_strtod_l+0x79c>
 802687a:	4639      	mov	r1, r7
 802687c:	4652      	mov	r2, sl
 802687e:	4620      	mov	r0, r4
 8026880:	f002 f9ee 	bl	8028c60 <__lshift>
 8026884:	4607      	mov	r7, r0
 8026886:	2800      	cmp	r0, #0
 8026888:	f43f ae7e 	beq.w	8026588 <_strtod_l+0x498>
 802688c:	f1bb 0f00 	cmp.w	fp, #0
 8026890:	dd08      	ble.n	80268a4 <_strtod_l+0x7b4>
 8026892:	4631      	mov	r1, r6
 8026894:	465a      	mov	r2, fp
 8026896:	4620      	mov	r0, r4
 8026898:	f002 f9e2 	bl	8028c60 <__lshift>
 802689c:	4606      	mov	r6, r0
 802689e:	2800      	cmp	r0, #0
 80268a0:	f43f ae72 	beq.w	8026588 <_strtod_l+0x498>
 80268a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80268a6:	463a      	mov	r2, r7
 80268a8:	4620      	mov	r0, r4
 80268aa:	f002 fa61 	bl	8028d70 <__mdiff>
 80268ae:	4605      	mov	r5, r0
 80268b0:	2800      	cmp	r0, #0
 80268b2:	f43f ae69 	beq.w	8026588 <_strtod_l+0x498>
 80268b6:	2300      	movs	r3, #0
 80268b8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80268bc:	60c3      	str	r3, [r0, #12]
 80268be:	4631      	mov	r1, r6
 80268c0:	f002 fa3a 	bl	8028d38 <__mcmp>
 80268c4:	2800      	cmp	r0, #0
 80268c6:	da7f      	bge.n	80269c8 <_strtod_l+0x8d8>
 80268c8:	ea5a 0308 	orrs.w	r3, sl, r8
 80268cc:	f040 80a5 	bne.w	8026a1a <_strtod_l+0x92a>
 80268d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80268d4:	2b00      	cmp	r3, #0
 80268d6:	f040 80a0 	bne.w	8026a1a <_strtod_l+0x92a>
 80268da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80268de:	0d1b      	lsrs	r3, r3, #20
 80268e0:	051b      	lsls	r3, r3, #20
 80268e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80268e6:	f240 8098 	bls.w	8026a1a <_strtod_l+0x92a>
 80268ea:	696b      	ldr	r3, [r5, #20]
 80268ec:	b91b      	cbnz	r3, 80268f6 <_strtod_l+0x806>
 80268ee:	692b      	ldr	r3, [r5, #16]
 80268f0:	2b01      	cmp	r3, #1
 80268f2:	f340 8092 	ble.w	8026a1a <_strtod_l+0x92a>
 80268f6:	4629      	mov	r1, r5
 80268f8:	2201      	movs	r2, #1
 80268fa:	4620      	mov	r0, r4
 80268fc:	f002 f9b0 	bl	8028c60 <__lshift>
 8026900:	4631      	mov	r1, r6
 8026902:	4605      	mov	r5, r0
 8026904:	f002 fa18 	bl	8028d38 <__mcmp>
 8026908:	2800      	cmp	r0, #0
 802690a:	f340 8086 	ble.w	8026a1a <_strtod_l+0x92a>
 802690e:	9904      	ldr	r1, [sp, #16]
 8026910:	4a2b      	ldr	r2, [pc, #172]	; (80269c0 <_strtod_l+0x8d0>)
 8026912:	464b      	mov	r3, r9
 8026914:	2900      	cmp	r1, #0
 8026916:	f000 80a1 	beq.w	8026a5c <_strtod_l+0x96c>
 802691a:	ea02 0109 	and.w	r1, r2, r9
 802691e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8026922:	f300 809b 	bgt.w	8026a5c <_strtod_l+0x96c>
 8026926:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802692a:	f77f aea2 	ble.w	8026672 <_strtod_l+0x582>
 802692e:	4a25      	ldr	r2, [pc, #148]	; (80269c4 <_strtod_l+0x8d4>)
 8026930:	2300      	movs	r3, #0
 8026932:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8026936:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 802693a:	ec49 8b17 	vmov	d7, r8, r9
 802693e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026942:	ed8d 7b04 	vstr	d7, [sp, #16]
 8026946:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 802694a:	4313      	orrs	r3, r2
 802694c:	bf08      	it	eq
 802694e:	2322      	moveq	r3, #34	; 0x22
 8026950:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8026954:	bf08      	it	eq
 8026956:	6023      	streq	r3, [r4, #0]
 8026958:	e620      	b.n	802659c <_strtod_l+0x4ac>
 802695a:	f04f 31ff 	mov.w	r1, #4294967295
 802695e:	fa01 f202 	lsl.w	r2, r1, r2
 8026962:	ea02 0808 	and.w	r8, r2, r8
 8026966:	e6d4      	b.n	8026712 <_strtod_l+0x622>
 8026968:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 802696c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8026970:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8026974:	33e2      	adds	r3, #226	; 0xe2
 8026976:	fa00 f303 	lsl.w	r3, r0, r3
 802697a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 802697e:	e73b      	b.n	80267f8 <_strtod_l+0x708>
 8026980:	2000      	movs	r0, #0
 8026982:	2301      	movs	r3, #1
 8026984:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8026988:	e736      	b.n	80267f8 <_strtod_l+0x708>
 802698a:	9918      	ldr	r1, [sp, #96]	; 0x60
 802698c:	461a      	mov	r2, r3
 802698e:	4620      	mov	r0, r4
 8026990:	f002 f966 	bl	8028c60 <__lshift>
 8026994:	9018      	str	r0, [sp, #96]	; 0x60
 8026996:	2800      	cmp	r0, #0
 8026998:	f47f af60 	bne.w	802685c <_strtod_l+0x76c>
 802699c:	e5f4      	b.n	8026588 <_strtod_l+0x498>
 802699e:	bf00      	nop
 80269a0:	94a03595 	.word	0x94a03595
 80269a4:	3fcfffff 	.word	0x3fcfffff
 80269a8:	94a03595 	.word	0x94a03595
 80269ac:	3fdfffff 	.word	0x3fdfffff
 80269b0:	35afe535 	.word	0x35afe535
 80269b4:	3fe00000 	.word	0x3fe00000
 80269b8:	0802d888 	.word	0x0802d888
 80269bc:	fffffc02 	.word	0xfffffc02
 80269c0:	7ff00000 	.word	0x7ff00000
 80269c4:	39500000 	.word	0x39500000
 80269c8:	46cb      	mov	fp, r9
 80269ca:	d165      	bne.n	8026a98 <_strtod_l+0x9a8>
 80269cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80269d0:	f1ba 0f00 	cmp.w	sl, #0
 80269d4:	d02a      	beq.n	8026a2c <_strtod_l+0x93c>
 80269d6:	4aaa      	ldr	r2, [pc, #680]	; (8026c80 <_strtod_l+0xb90>)
 80269d8:	4293      	cmp	r3, r2
 80269da:	d12b      	bne.n	8026a34 <_strtod_l+0x944>
 80269dc:	9b04      	ldr	r3, [sp, #16]
 80269de:	4641      	mov	r1, r8
 80269e0:	b1fb      	cbz	r3, 8026a22 <_strtod_l+0x932>
 80269e2:	4aa8      	ldr	r2, [pc, #672]	; (8026c84 <_strtod_l+0xb94>)
 80269e4:	ea09 0202 	and.w	r2, r9, r2
 80269e8:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80269ec:	f04f 30ff 	mov.w	r0, #4294967295
 80269f0:	d81a      	bhi.n	8026a28 <_strtod_l+0x938>
 80269f2:	0d12      	lsrs	r2, r2, #20
 80269f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80269f8:	fa00 f303 	lsl.w	r3, r0, r3
 80269fc:	4299      	cmp	r1, r3
 80269fe:	d119      	bne.n	8026a34 <_strtod_l+0x944>
 8026a00:	4ba1      	ldr	r3, [pc, #644]	; (8026c88 <_strtod_l+0xb98>)
 8026a02:	459b      	cmp	fp, r3
 8026a04:	d102      	bne.n	8026a0c <_strtod_l+0x91c>
 8026a06:	3101      	adds	r1, #1
 8026a08:	f43f adbe 	beq.w	8026588 <_strtod_l+0x498>
 8026a0c:	4b9d      	ldr	r3, [pc, #628]	; (8026c84 <_strtod_l+0xb94>)
 8026a0e:	ea0b 0303 	and.w	r3, fp, r3
 8026a12:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8026a16:	f04f 0800 	mov.w	r8, #0
 8026a1a:	9b04      	ldr	r3, [sp, #16]
 8026a1c:	2b00      	cmp	r3, #0
 8026a1e:	d186      	bne.n	802692e <_strtod_l+0x83e>
 8026a20:	e5bc      	b.n	802659c <_strtod_l+0x4ac>
 8026a22:	f04f 33ff 	mov.w	r3, #4294967295
 8026a26:	e7e9      	b.n	80269fc <_strtod_l+0x90c>
 8026a28:	4603      	mov	r3, r0
 8026a2a:	e7e7      	b.n	80269fc <_strtod_l+0x90c>
 8026a2c:	ea53 0308 	orrs.w	r3, r3, r8
 8026a30:	f43f af6d 	beq.w	802690e <_strtod_l+0x81e>
 8026a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026a36:	b1db      	cbz	r3, 8026a70 <_strtod_l+0x980>
 8026a38:	ea13 0f0b 	tst.w	r3, fp
 8026a3c:	d0ed      	beq.n	8026a1a <_strtod_l+0x92a>
 8026a3e:	9a04      	ldr	r2, [sp, #16]
 8026a40:	4640      	mov	r0, r8
 8026a42:	4649      	mov	r1, r9
 8026a44:	f1ba 0f00 	cmp.w	sl, #0
 8026a48:	d016      	beq.n	8026a78 <_strtod_l+0x988>
 8026a4a:	f7ff fb35 	bl	80260b8 <sulp>
 8026a4e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8026a52:	ee37 7b00 	vadd.f64	d7, d7, d0
 8026a56:	ec59 8b17 	vmov	r8, r9, d7
 8026a5a:	e7de      	b.n	8026a1a <_strtod_l+0x92a>
 8026a5c:	4013      	ands	r3, r2
 8026a5e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8026a62:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8026a66:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8026a6a:	f04f 38ff 	mov.w	r8, #4294967295
 8026a6e:	e7d4      	b.n	8026a1a <_strtod_l+0x92a>
 8026a70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026a72:	ea13 0f08 	tst.w	r3, r8
 8026a76:	e7e1      	b.n	8026a3c <_strtod_l+0x94c>
 8026a78:	f7ff fb1e 	bl	80260b8 <sulp>
 8026a7c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8026a80:	ee37 7b40 	vsub.f64	d7, d7, d0
 8026a84:	ed8d 7b06 	vstr	d7, [sp, #24]
 8026a88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a90:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8026a94:	d1c1      	bne.n	8026a1a <_strtod_l+0x92a>
 8026a96:	e5ec      	b.n	8026672 <_strtod_l+0x582>
 8026a98:	4631      	mov	r1, r6
 8026a9a:	4628      	mov	r0, r5
 8026a9c:	f002 fac8 	bl	8029030 <__ratio>
 8026aa0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8026aa4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8026aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026aac:	d867      	bhi.n	8026b7e <_strtod_l+0xa8e>
 8026aae:	f1ba 0f00 	cmp.w	sl, #0
 8026ab2:	d044      	beq.n	8026b3e <_strtod_l+0xa4e>
 8026ab4:	4b75      	ldr	r3, [pc, #468]	; (8026c8c <_strtod_l+0xb9c>)
 8026ab6:	2200      	movs	r2, #0
 8026ab8:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8026abc:	4971      	ldr	r1, [pc, #452]	; (8026c84 <_strtod_l+0xb94>)
 8026abe:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8026c98 <_strtod_l+0xba8>
 8026ac2:	ea0b 0001 	and.w	r0, fp, r1
 8026ac6:	4560      	cmp	r0, ip
 8026ac8:	900d      	str	r0, [sp, #52]	; 0x34
 8026aca:	f040 808b 	bne.w	8026be4 <_strtod_l+0xaf4>
 8026ace:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8026ad2:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8026ad6:	ec49 8b10 	vmov	d0, r8, r9
 8026ada:	ec43 2b1c 	vmov	d12, r2, r3
 8026ade:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8026ae2:	f002 f9cd 	bl	8028e80 <__ulp>
 8026ae6:	ec49 8b1d 	vmov	d13, r8, r9
 8026aea:	eeac db00 	vfma.f64	d13, d12, d0
 8026aee:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8026af2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026af4:	4963      	ldr	r1, [pc, #396]	; (8026c84 <_strtod_l+0xb94>)
 8026af6:	4a66      	ldr	r2, [pc, #408]	; (8026c90 <_strtod_l+0xba0>)
 8026af8:	4019      	ands	r1, r3
 8026afa:	4291      	cmp	r1, r2
 8026afc:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8026b00:	d947      	bls.n	8026b92 <_strtod_l+0xaa2>
 8026b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026b04:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8026b08:	4293      	cmp	r3, r2
 8026b0a:	d103      	bne.n	8026b14 <_strtod_l+0xa24>
 8026b0c:	9b08      	ldr	r3, [sp, #32]
 8026b0e:	3301      	adds	r3, #1
 8026b10:	f43f ad3a 	beq.w	8026588 <_strtod_l+0x498>
 8026b14:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8026c88 <_strtod_l+0xb98>
 8026b18:	f04f 38ff 	mov.w	r8, #4294967295
 8026b1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8026b1e:	4620      	mov	r0, r4
 8026b20:	f001 fe82 	bl	8028828 <_Bfree>
 8026b24:	4639      	mov	r1, r7
 8026b26:	4620      	mov	r0, r4
 8026b28:	f001 fe7e 	bl	8028828 <_Bfree>
 8026b2c:	4631      	mov	r1, r6
 8026b2e:	4620      	mov	r0, r4
 8026b30:	f001 fe7a 	bl	8028828 <_Bfree>
 8026b34:	4629      	mov	r1, r5
 8026b36:	4620      	mov	r0, r4
 8026b38:	f001 fe76 	bl	8028828 <_Bfree>
 8026b3c:	e60f      	b.n	802675e <_strtod_l+0x66e>
 8026b3e:	f1b8 0f00 	cmp.w	r8, #0
 8026b42:	d112      	bne.n	8026b6a <_strtod_l+0xa7a>
 8026b44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8026b48:	b9b3      	cbnz	r3, 8026b78 <_strtod_l+0xa88>
 8026b4a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8026b4e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8026b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b56:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8026b5a:	d401      	bmi.n	8026b60 <_strtod_l+0xa70>
 8026b5c:	ee20 8b08 	vmul.f64	d8, d0, d8
 8026b60:	eeb1 7b48 	vneg.f64	d7, d8
 8026b64:	ec53 2b17 	vmov	r2, r3, d7
 8026b68:	e7a8      	b.n	8026abc <_strtod_l+0x9cc>
 8026b6a:	f1b8 0f01 	cmp.w	r8, #1
 8026b6e:	d103      	bne.n	8026b78 <_strtod_l+0xa88>
 8026b70:	f1b9 0f00 	cmp.w	r9, #0
 8026b74:	f43f ad7d 	beq.w	8026672 <_strtod_l+0x582>
 8026b78:	4b46      	ldr	r3, [pc, #280]	; (8026c94 <_strtod_l+0xba4>)
 8026b7a:	2200      	movs	r2, #0
 8026b7c:	e79c      	b.n	8026ab8 <_strtod_l+0x9c8>
 8026b7e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8026b82:	ee20 8b08 	vmul.f64	d8, d0, d8
 8026b86:	f1ba 0f00 	cmp.w	sl, #0
 8026b8a:	d0e9      	beq.n	8026b60 <_strtod_l+0xa70>
 8026b8c:	ec53 2b18 	vmov	r2, r3, d8
 8026b90:	e794      	b.n	8026abc <_strtod_l+0x9cc>
 8026b92:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8026b96:	9b04      	ldr	r3, [sp, #16]
 8026b98:	2b00      	cmp	r3, #0
 8026b9a:	d1bf      	bne.n	8026b1c <_strtod_l+0xa2c>
 8026b9c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8026ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026ba2:	0d1b      	lsrs	r3, r3, #20
 8026ba4:	051b      	lsls	r3, r3, #20
 8026ba6:	429a      	cmp	r2, r3
 8026ba8:	d1b8      	bne.n	8026b1c <_strtod_l+0xa2c>
 8026baa:	ec51 0b18 	vmov	r0, r1, d8
 8026bae:	f7d9 fd73 	bl	8000698 <__aeabi_d2lz>
 8026bb2:	f7d9 fd2b 	bl	800060c <__aeabi_l2d>
 8026bb6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8026bba:	ec41 0b17 	vmov	d7, r0, r1
 8026bbe:	ea43 0308 	orr.w	r3, r3, r8
 8026bc2:	ea53 030a 	orrs.w	r3, r3, sl
 8026bc6:	ee38 8b47 	vsub.f64	d8, d8, d7
 8026bca:	d03e      	beq.n	8026c4a <_strtod_l+0xb5a>
 8026bcc:	eeb4 8bca 	vcmpe.f64	d8, d10
 8026bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bd4:	f53f ace2 	bmi.w	802659c <_strtod_l+0x4ac>
 8026bd8:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8026bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026be0:	dd9c      	ble.n	8026b1c <_strtod_l+0xa2c>
 8026be2:	e4db      	b.n	802659c <_strtod_l+0x4ac>
 8026be4:	9904      	ldr	r1, [sp, #16]
 8026be6:	b301      	cbz	r1, 8026c2a <_strtod_l+0xb3a>
 8026be8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8026bea:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8026bee:	d81c      	bhi.n	8026c2a <_strtod_l+0xb3a>
 8026bf0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8026c78 <_strtod_l+0xb88>
 8026bf4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8026bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bfc:	d811      	bhi.n	8026c22 <_strtod_l+0xb32>
 8026bfe:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8026c02:	ee18 3a10 	vmov	r3, s16
 8026c06:	2b01      	cmp	r3, #1
 8026c08:	bf38      	it	cc
 8026c0a:	2301      	movcc	r3, #1
 8026c0c:	ee08 3a10 	vmov	s16, r3
 8026c10:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8026c14:	f1ba 0f00 	cmp.w	sl, #0
 8026c18:	d114      	bne.n	8026c44 <_strtod_l+0xb54>
 8026c1a:	eeb1 7b48 	vneg.f64	d7, d8
 8026c1e:	ec53 2b17 	vmov	r2, r3, d7
 8026c22:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026c24:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8026c28:	1a0b      	subs	r3, r1, r0
 8026c2a:	ed9d 0b08 	vldr	d0, [sp, #32]
 8026c2e:	ec43 2b1c 	vmov	d12, r2, r3
 8026c32:	f002 f925 	bl	8028e80 <__ulp>
 8026c36:	ed9d 7b08 	vldr	d7, [sp, #32]
 8026c3a:	eeac 7b00 	vfma.f64	d7, d12, d0
 8026c3e:	ec59 8b17 	vmov	r8, r9, d7
 8026c42:	e7a8      	b.n	8026b96 <_strtod_l+0xaa6>
 8026c44:	ec53 2b18 	vmov	r2, r3, d8
 8026c48:	e7eb      	b.n	8026c22 <_strtod_l+0xb32>
 8026c4a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8026c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c52:	f57f af63 	bpl.w	8026b1c <_strtod_l+0xa2c>
 8026c56:	e4a1      	b.n	802659c <_strtod_l+0x4ac>
 8026c58:	2300      	movs	r3, #0
 8026c5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8026c5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8026c5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026c60:	6013      	str	r3, [r2, #0]
 8026c62:	f7ff ba8d 	b.w	8026180 <_strtod_l+0x90>
 8026c66:	2a65      	cmp	r2, #101	; 0x65
 8026c68:	f43f ab89 	beq.w	802637e <_strtod_l+0x28e>
 8026c6c:	2a45      	cmp	r2, #69	; 0x45
 8026c6e:	f43f ab86 	beq.w	802637e <_strtod_l+0x28e>
 8026c72:	2101      	movs	r1, #1
 8026c74:	f7ff bbbe 	b.w	80263f4 <_strtod_l+0x304>
 8026c78:	ffc00000 	.word	0xffc00000
 8026c7c:	41dfffff 	.word	0x41dfffff
 8026c80:	000fffff 	.word	0x000fffff
 8026c84:	7ff00000 	.word	0x7ff00000
 8026c88:	7fefffff 	.word	0x7fefffff
 8026c8c:	3ff00000 	.word	0x3ff00000
 8026c90:	7c9fffff 	.word	0x7c9fffff
 8026c94:	bff00000 	.word	0xbff00000
 8026c98:	7fe00000 	.word	0x7fe00000

08026c9c <_strtod_r>:
 8026c9c:	4b01      	ldr	r3, [pc, #4]	; (8026ca4 <_strtod_r+0x8>)
 8026c9e:	f7ff ba27 	b.w	80260f0 <_strtod_l>
 8026ca2:	bf00      	nop
 8026ca4:	200000e0 	.word	0x200000e0

08026ca8 <_strtol_l.isra.0>:
 8026ca8:	2b01      	cmp	r3, #1
 8026caa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026cae:	d001      	beq.n	8026cb4 <_strtol_l.isra.0+0xc>
 8026cb0:	2b24      	cmp	r3, #36	; 0x24
 8026cb2:	d906      	bls.n	8026cc2 <_strtol_l.isra.0+0x1a>
 8026cb4:	f7fe f8d8 	bl	8024e68 <__errno>
 8026cb8:	2316      	movs	r3, #22
 8026cba:	6003      	str	r3, [r0, #0]
 8026cbc:	2000      	movs	r0, #0
 8026cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026cc2:	4f3a      	ldr	r7, [pc, #232]	; (8026dac <_strtol_l.isra.0+0x104>)
 8026cc4:	468e      	mov	lr, r1
 8026cc6:	4676      	mov	r6, lr
 8026cc8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8026ccc:	5de5      	ldrb	r5, [r4, r7]
 8026cce:	f015 0508 	ands.w	r5, r5, #8
 8026cd2:	d1f8      	bne.n	8026cc6 <_strtol_l.isra.0+0x1e>
 8026cd4:	2c2d      	cmp	r4, #45	; 0x2d
 8026cd6:	d134      	bne.n	8026d42 <_strtol_l.isra.0+0x9a>
 8026cd8:	f89e 4000 	ldrb.w	r4, [lr]
 8026cdc:	f04f 0801 	mov.w	r8, #1
 8026ce0:	f106 0e02 	add.w	lr, r6, #2
 8026ce4:	2b00      	cmp	r3, #0
 8026ce6:	d05c      	beq.n	8026da2 <_strtol_l.isra.0+0xfa>
 8026ce8:	2b10      	cmp	r3, #16
 8026cea:	d10c      	bne.n	8026d06 <_strtol_l.isra.0+0x5e>
 8026cec:	2c30      	cmp	r4, #48	; 0x30
 8026cee:	d10a      	bne.n	8026d06 <_strtol_l.isra.0+0x5e>
 8026cf0:	f89e 4000 	ldrb.w	r4, [lr]
 8026cf4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8026cf8:	2c58      	cmp	r4, #88	; 0x58
 8026cfa:	d14d      	bne.n	8026d98 <_strtol_l.isra.0+0xf0>
 8026cfc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8026d00:	2310      	movs	r3, #16
 8026d02:	f10e 0e02 	add.w	lr, lr, #2
 8026d06:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8026d0a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8026d0e:	2600      	movs	r6, #0
 8026d10:	fbbc f9f3 	udiv	r9, ip, r3
 8026d14:	4635      	mov	r5, r6
 8026d16:	fb03 ca19 	mls	sl, r3, r9, ip
 8026d1a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8026d1e:	2f09      	cmp	r7, #9
 8026d20:	d818      	bhi.n	8026d54 <_strtol_l.isra.0+0xac>
 8026d22:	463c      	mov	r4, r7
 8026d24:	42a3      	cmp	r3, r4
 8026d26:	dd24      	ble.n	8026d72 <_strtol_l.isra.0+0xca>
 8026d28:	2e00      	cmp	r6, #0
 8026d2a:	db1f      	blt.n	8026d6c <_strtol_l.isra.0+0xc4>
 8026d2c:	45a9      	cmp	r9, r5
 8026d2e:	d31d      	bcc.n	8026d6c <_strtol_l.isra.0+0xc4>
 8026d30:	d101      	bne.n	8026d36 <_strtol_l.isra.0+0x8e>
 8026d32:	45a2      	cmp	sl, r4
 8026d34:	db1a      	blt.n	8026d6c <_strtol_l.isra.0+0xc4>
 8026d36:	fb05 4503 	mla	r5, r5, r3, r4
 8026d3a:	2601      	movs	r6, #1
 8026d3c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8026d40:	e7eb      	b.n	8026d1a <_strtol_l.isra.0+0x72>
 8026d42:	2c2b      	cmp	r4, #43	; 0x2b
 8026d44:	bf08      	it	eq
 8026d46:	f89e 4000 	ldrbeq.w	r4, [lr]
 8026d4a:	46a8      	mov	r8, r5
 8026d4c:	bf08      	it	eq
 8026d4e:	f106 0e02 	addeq.w	lr, r6, #2
 8026d52:	e7c7      	b.n	8026ce4 <_strtol_l.isra.0+0x3c>
 8026d54:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8026d58:	2f19      	cmp	r7, #25
 8026d5a:	d801      	bhi.n	8026d60 <_strtol_l.isra.0+0xb8>
 8026d5c:	3c37      	subs	r4, #55	; 0x37
 8026d5e:	e7e1      	b.n	8026d24 <_strtol_l.isra.0+0x7c>
 8026d60:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8026d64:	2f19      	cmp	r7, #25
 8026d66:	d804      	bhi.n	8026d72 <_strtol_l.isra.0+0xca>
 8026d68:	3c57      	subs	r4, #87	; 0x57
 8026d6a:	e7db      	b.n	8026d24 <_strtol_l.isra.0+0x7c>
 8026d6c:	f04f 36ff 	mov.w	r6, #4294967295
 8026d70:	e7e4      	b.n	8026d3c <_strtol_l.isra.0+0x94>
 8026d72:	2e00      	cmp	r6, #0
 8026d74:	da05      	bge.n	8026d82 <_strtol_l.isra.0+0xda>
 8026d76:	2322      	movs	r3, #34	; 0x22
 8026d78:	6003      	str	r3, [r0, #0]
 8026d7a:	4665      	mov	r5, ip
 8026d7c:	b942      	cbnz	r2, 8026d90 <_strtol_l.isra.0+0xe8>
 8026d7e:	4628      	mov	r0, r5
 8026d80:	e79d      	b.n	8026cbe <_strtol_l.isra.0+0x16>
 8026d82:	f1b8 0f00 	cmp.w	r8, #0
 8026d86:	d000      	beq.n	8026d8a <_strtol_l.isra.0+0xe2>
 8026d88:	426d      	negs	r5, r5
 8026d8a:	2a00      	cmp	r2, #0
 8026d8c:	d0f7      	beq.n	8026d7e <_strtol_l.isra.0+0xd6>
 8026d8e:	b10e      	cbz	r6, 8026d94 <_strtol_l.isra.0+0xec>
 8026d90:	f10e 31ff 	add.w	r1, lr, #4294967295
 8026d94:	6011      	str	r1, [r2, #0]
 8026d96:	e7f2      	b.n	8026d7e <_strtol_l.isra.0+0xd6>
 8026d98:	2430      	movs	r4, #48	; 0x30
 8026d9a:	2b00      	cmp	r3, #0
 8026d9c:	d1b3      	bne.n	8026d06 <_strtol_l.isra.0+0x5e>
 8026d9e:	2308      	movs	r3, #8
 8026da0:	e7b1      	b.n	8026d06 <_strtol_l.isra.0+0x5e>
 8026da2:	2c30      	cmp	r4, #48	; 0x30
 8026da4:	d0a4      	beq.n	8026cf0 <_strtol_l.isra.0+0x48>
 8026da6:	230a      	movs	r3, #10
 8026da8:	e7ad      	b.n	8026d06 <_strtol_l.isra.0+0x5e>
 8026daa:	bf00      	nop
 8026dac:	0802d8b1 	.word	0x0802d8b1

08026db0 <_strtol_r>:
 8026db0:	f7ff bf7a 	b.w	8026ca8 <_strtol_l.isra.0>

08026db4 <__swbuf_r>:
 8026db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026db6:	460e      	mov	r6, r1
 8026db8:	4614      	mov	r4, r2
 8026dba:	4605      	mov	r5, r0
 8026dbc:	b118      	cbz	r0, 8026dc6 <__swbuf_r+0x12>
 8026dbe:	6983      	ldr	r3, [r0, #24]
 8026dc0:	b90b      	cbnz	r3, 8026dc6 <__swbuf_r+0x12>
 8026dc2:	f001 f841 	bl	8027e48 <__sinit>
 8026dc6:	4b21      	ldr	r3, [pc, #132]	; (8026e4c <__swbuf_r+0x98>)
 8026dc8:	429c      	cmp	r4, r3
 8026dca:	d12b      	bne.n	8026e24 <__swbuf_r+0x70>
 8026dcc:	686c      	ldr	r4, [r5, #4]
 8026dce:	69a3      	ldr	r3, [r4, #24]
 8026dd0:	60a3      	str	r3, [r4, #8]
 8026dd2:	89a3      	ldrh	r3, [r4, #12]
 8026dd4:	071a      	lsls	r2, r3, #28
 8026dd6:	d52f      	bpl.n	8026e38 <__swbuf_r+0x84>
 8026dd8:	6923      	ldr	r3, [r4, #16]
 8026dda:	b36b      	cbz	r3, 8026e38 <__swbuf_r+0x84>
 8026ddc:	6923      	ldr	r3, [r4, #16]
 8026dde:	6820      	ldr	r0, [r4, #0]
 8026de0:	1ac0      	subs	r0, r0, r3
 8026de2:	6963      	ldr	r3, [r4, #20]
 8026de4:	b2f6      	uxtb	r6, r6
 8026de6:	4283      	cmp	r3, r0
 8026de8:	4637      	mov	r7, r6
 8026dea:	dc04      	bgt.n	8026df6 <__swbuf_r+0x42>
 8026dec:	4621      	mov	r1, r4
 8026dee:	4628      	mov	r0, r5
 8026df0:	f000 ff96 	bl	8027d20 <_fflush_r>
 8026df4:	bb30      	cbnz	r0, 8026e44 <__swbuf_r+0x90>
 8026df6:	68a3      	ldr	r3, [r4, #8]
 8026df8:	3b01      	subs	r3, #1
 8026dfa:	60a3      	str	r3, [r4, #8]
 8026dfc:	6823      	ldr	r3, [r4, #0]
 8026dfe:	1c5a      	adds	r2, r3, #1
 8026e00:	6022      	str	r2, [r4, #0]
 8026e02:	701e      	strb	r6, [r3, #0]
 8026e04:	6963      	ldr	r3, [r4, #20]
 8026e06:	3001      	adds	r0, #1
 8026e08:	4283      	cmp	r3, r0
 8026e0a:	d004      	beq.n	8026e16 <__swbuf_r+0x62>
 8026e0c:	89a3      	ldrh	r3, [r4, #12]
 8026e0e:	07db      	lsls	r3, r3, #31
 8026e10:	d506      	bpl.n	8026e20 <__swbuf_r+0x6c>
 8026e12:	2e0a      	cmp	r6, #10
 8026e14:	d104      	bne.n	8026e20 <__swbuf_r+0x6c>
 8026e16:	4621      	mov	r1, r4
 8026e18:	4628      	mov	r0, r5
 8026e1a:	f000 ff81 	bl	8027d20 <_fflush_r>
 8026e1e:	b988      	cbnz	r0, 8026e44 <__swbuf_r+0x90>
 8026e20:	4638      	mov	r0, r7
 8026e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026e24:	4b0a      	ldr	r3, [pc, #40]	; (8026e50 <__swbuf_r+0x9c>)
 8026e26:	429c      	cmp	r4, r3
 8026e28:	d101      	bne.n	8026e2e <__swbuf_r+0x7a>
 8026e2a:	68ac      	ldr	r4, [r5, #8]
 8026e2c:	e7cf      	b.n	8026dce <__swbuf_r+0x1a>
 8026e2e:	4b09      	ldr	r3, [pc, #36]	; (8026e54 <__swbuf_r+0xa0>)
 8026e30:	429c      	cmp	r4, r3
 8026e32:	bf08      	it	eq
 8026e34:	68ec      	ldreq	r4, [r5, #12]
 8026e36:	e7ca      	b.n	8026dce <__swbuf_r+0x1a>
 8026e38:	4621      	mov	r1, r4
 8026e3a:	4628      	mov	r0, r5
 8026e3c:	f000 f80c 	bl	8026e58 <__swsetup_r>
 8026e40:	2800      	cmp	r0, #0
 8026e42:	d0cb      	beq.n	8026ddc <__swbuf_r+0x28>
 8026e44:	f04f 37ff 	mov.w	r7, #4294967295
 8026e48:	e7ea      	b.n	8026e20 <__swbuf_r+0x6c>
 8026e4a:	bf00      	nop
 8026e4c:	0802da68 	.word	0x0802da68
 8026e50:	0802da88 	.word	0x0802da88
 8026e54:	0802da48 	.word	0x0802da48

08026e58 <__swsetup_r>:
 8026e58:	4b32      	ldr	r3, [pc, #200]	; (8026f24 <__swsetup_r+0xcc>)
 8026e5a:	b570      	push	{r4, r5, r6, lr}
 8026e5c:	681d      	ldr	r5, [r3, #0]
 8026e5e:	4606      	mov	r6, r0
 8026e60:	460c      	mov	r4, r1
 8026e62:	b125      	cbz	r5, 8026e6e <__swsetup_r+0x16>
 8026e64:	69ab      	ldr	r3, [r5, #24]
 8026e66:	b913      	cbnz	r3, 8026e6e <__swsetup_r+0x16>
 8026e68:	4628      	mov	r0, r5
 8026e6a:	f000 ffed 	bl	8027e48 <__sinit>
 8026e6e:	4b2e      	ldr	r3, [pc, #184]	; (8026f28 <__swsetup_r+0xd0>)
 8026e70:	429c      	cmp	r4, r3
 8026e72:	d10f      	bne.n	8026e94 <__swsetup_r+0x3c>
 8026e74:	686c      	ldr	r4, [r5, #4]
 8026e76:	89a3      	ldrh	r3, [r4, #12]
 8026e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026e7c:	0719      	lsls	r1, r3, #28
 8026e7e:	d42c      	bmi.n	8026eda <__swsetup_r+0x82>
 8026e80:	06dd      	lsls	r5, r3, #27
 8026e82:	d411      	bmi.n	8026ea8 <__swsetup_r+0x50>
 8026e84:	2309      	movs	r3, #9
 8026e86:	6033      	str	r3, [r6, #0]
 8026e88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026e8c:	81a3      	strh	r3, [r4, #12]
 8026e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8026e92:	e03e      	b.n	8026f12 <__swsetup_r+0xba>
 8026e94:	4b25      	ldr	r3, [pc, #148]	; (8026f2c <__swsetup_r+0xd4>)
 8026e96:	429c      	cmp	r4, r3
 8026e98:	d101      	bne.n	8026e9e <__swsetup_r+0x46>
 8026e9a:	68ac      	ldr	r4, [r5, #8]
 8026e9c:	e7eb      	b.n	8026e76 <__swsetup_r+0x1e>
 8026e9e:	4b24      	ldr	r3, [pc, #144]	; (8026f30 <__swsetup_r+0xd8>)
 8026ea0:	429c      	cmp	r4, r3
 8026ea2:	bf08      	it	eq
 8026ea4:	68ec      	ldreq	r4, [r5, #12]
 8026ea6:	e7e6      	b.n	8026e76 <__swsetup_r+0x1e>
 8026ea8:	0758      	lsls	r0, r3, #29
 8026eaa:	d512      	bpl.n	8026ed2 <__swsetup_r+0x7a>
 8026eac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026eae:	b141      	cbz	r1, 8026ec2 <__swsetup_r+0x6a>
 8026eb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026eb4:	4299      	cmp	r1, r3
 8026eb6:	d002      	beq.n	8026ebe <__swsetup_r+0x66>
 8026eb8:	4630      	mov	r0, r6
 8026eba:	f7fe f837 	bl	8024f2c <_free_r>
 8026ebe:	2300      	movs	r3, #0
 8026ec0:	6363      	str	r3, [r4, #52]	; 0x34
 8026ec2:	89a3      	ldrh	r3, [r4, #12]
 8026ec4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8026ec8:	81a3      	strh	r3, [r4, #12]
 8026eca:	2300      	movs	r3, #0
 8026ecc:	6063      	str	r3, [r4, #4]
 8026ece:	6923      	ldr	r3, [r4, #16]
 8026ed0:	6023      	str	r3, [r4, #0]
 8026ed2:	89a3      	ldrh	r3, [r4, #12]
 8026ed4:	f043 0308 	orr.w	r3, r3, #8
 8026ed8:	81a3      	strh	r3, [r4, #12]
 8026eda:	6923      	ldr	r3, [r4, #16]
 8026edc:	b94b      	cbnz	r3, 8026ef2 <__swsetup_r+0x9a>
 8026ede:	89a3      	ldrh	r3, [r4, #12]
 8026ee0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026ee8:	d003      	beq.n	8026ef2 <__swsetup_r+0x9a>
 8026eea:	4621      	mov	r1, r4
 8026eec:	4630      	mov	r0, r6
 8026eee:	f001 fbe3 	bl	80286b8 <__smakebuf_r>
 8026ef2:	89a0      	ldrh	r0, [r4, #12]
 8026ef4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026ef8:	f010 0301 	ands.w	r3, r0, #1
 8026efc:	d00a      	beq.n	8026f14 <__swsetup_r+0xbc>
 8026efe:	2300      	movs	r3, #0
 8026f00:	60a3      	str	r3, [r4, #8]
 8026f02:	6963      	ldr	r3, [r4, #20]
 8026f04:	425b      	negs	r3, r3
 8026f06:	61a3      	str	r3, [r4, #24]
 8026f08:	6923      	ldr	r3, [r4, #16]
 8026f0a:	b943      	cbnz	r3, 8026f1e <__swsetup_r+0xc6>
 8026f0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026f10:	d1ba      	bne.n	8026e88 <__swsetup_r+0x30>
 8026f12:	bd70      	pop	{r4, r5, r6, pc}
 8026f14:	0781      	lsls	r1, r0, #30
 8026f16:	bf58      	it	pl
 8026f18:	6963      	ldrpl	r3, [r4, #20]
 8026f1a:	60a3      	str	r3, [r4, #8]
 8026f1c:	e7f4      	b.n	8026f08 <__swsetup_r+0xb0>
 8026f1e:	2000      	movs	r0, #0
 8026f20:	e7f7      	b.n	8026f12 <__swsetup_r+0xba>
 8026f22:	bf00      	nop
 8026f24:	20000074 	.word	0x20000074
 8026f28:	0802da68 	.word	0x0802da68
 8026f2c:	0802da88 	.word	0x0802da88
 8026f30:	0802da48 	.word	0x0802da48

08026f34 <__register_exitproc>:
 8026f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026f38:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8026ff4 <__register_exitproc+0xc0>
 8026f3c:	4606      	mov	r6, r0
 8026f3e:	f8d8 0000 	ldr.w	r0, [r8]
 8026f42:	461f      	mov	r7, r3
 8026f44:	460d      	mov	r5, r1
 8026f46:	4691      	mov	r9, r2
 8026f48:	f001 fb8f 	bl	802866a <__retarget_lock_acquire_recursive>
 8026f4c:	4b25      	ldr	r3, [pc, #148]	; (8026fe4 <__register_exitproc+0xb0>)
 8026f4e:	681c      	ldr	r4, [r3, #0]
 8026f50:	b934      	cbnz	r4, 8026f60 <__register_exitproc+0x2c>
 8026f52:	4c25      	ldr	r4, [pc, #148]	; (8026fe8 <__register_exitproc+0xb4>)
 8026f54:	601c      	str	r4, [r3, #0]
 8026f56:	4b25      	ldr	r3, [pc, #148]	; (8026fec <__register_exitproc+0xb8>)
 8026f58:	b113      	cbz	r3, 8026f60 <__register_exitproc+0x2c>
 8026f5a:	681b      	ldr	r3, [r3, #0]
 8026f5c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026f60:	6863      	ldr	r3, [r4, #4]
 8026f62:	2b1f      	cmp	r3, #31
 8026f64:	dd07      	ble.n	8026f76 <__register_exitproc+0x42>
 8026f66:	f8d8 0000 	ldr.w	r0, [r8]
 8026f6a:	f001 fb80 	bl	802866e <__retarget_lock_release_recursive>
 8026f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8026f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026f76:	b34e      	cbz	r6, 8026fcc <__register_exitproc+0x98>
 8026f78:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026f7c:	b988      	cbnz	r0, 8026fa2 <__register_exitproc+0x6e>
 8026f7e:	4b1c      	ldr	r3, [pc, #112]	; (8026ff0 <__register_exitproc+0xbc>)
 8026f80:	b923      	cbnz	r3, 8026f8c <__register_exitproc+0x58>
 8026f82:	f8d8 0000 	ldr.w	r0, [r8]
 8026f86:	f001 fb71 	bl	802866c <__retarget_lock_release>
 8026f8a:	e7f0      	b.n	8026f6e <__register_exitproc+0x3a>
 8026f8c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026f90:	f7fd ffa6 	bl	8024ee0 <malloc>
 8026f94:	2800      	cmp	r0, #0
 8026f96:	d0f4      	beq.n	8026f82 <__register_exitproc+0x4e>
 8026f98:	2300      	movs	r3, #0
 8026f9a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8026f9e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026fa2:	6863      	ldr	r3, [r4, #4]
 8026fa4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8026fa8:	2201      	movs	r2, #1
 8026faa:	409a      	lsls	r2, r3
 8026fac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026fb0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8026fb4:	4313      	orrs	r3, r2
 8026fb6:	2e02      	cmp	r6, #2
 8026fb8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026fbc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8026fc0:	bf02      	ittt	eq
 8026fc2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8026fc6:	431a      	orreq	r2, r3
 8026fc8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8026fcc:	6863      	ldr	r3, [r4, #4]
 8026fce:	f8d8 0000 	ldr.w	r0, [r8]
 8026fd2:	1c5a      	adds	r2, r3, #1
 8026fd4:	3302      	adds	r3, #2
 8026fd6:	6062      	str	r2, [r4, #4]
 8026fd8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8026fdc:	f001 fb47 	bl	802866e <__retarget_lock_release_recursive>
 8026fe0:	2000      	movs	r0, #0
 8026fe2:	e7c6      	b.n	8026f72 <__register_exitproc+0x3e>
 8026fe4:	20056978 	.word	0x20056978
 8026fe8:	200568ec 	.word	0x200568ec
 8026fec:	0802d85c 	.word	0x0802d85c
 8026ff0:	08024ee1 	.word	0x08024ee1
 8026ff4:	200000d8 	.word	0x200000d8

08026ff8 <quorem>:
 8026ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ffc:	6903      	ldr	r3, [r0, #16]
 8026ffe:	690c      	ldr	r4, [r1, #16]
 8027000:	42a3      	cmp	r3, r4
 8027002:	4607      	mov	r7, r0
 8027004:	f2c0 8081 	blt.w	802710a <quorem+0x112>
 8027008:	3c01      	subs	r4, #1
 802700a:	f101 0814 	add.w	r8, r1, #20
 802700e:	f100 0514 	add.w	r5, r0, #20
 8027012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8027016:	9301      	str	r3, [sp, #4]
 8027018:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802701c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8027020:	3301      	adds	r3, #1
 8027022:	429a      	cmp	r2, r3
 8027024:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8027028:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802702c:	fbb2 f6f3 	udiv	r6, r2, r3
 8027030:	d331      	bcc.n	8027096 <quorem+0x9e>
 8027032:	f04f 0e00 	mov.w	lr, #0
 8027036:	4640      	mov	r0, r8
 8027038:	46ac      	mov	ip, r5
 802703a:	46f2      	mov	sl, lr
 802703c:	f850 2b04 	ldr.w	r2, [r0], #4
 8027040:	b293      	uxth	r3, r2
 8027042:	fb06 e303 	mla	r3, r6, r3, lr
 8027046:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802704a:	b29b      	uxth	r3, r3
 802704c:	ebaa 0303 	sub.w	r3, sl, r3
 8027050:	0c12      	lsrs	r2, r2, #16
 8027052:	f8dc a000 	ldr.w	sl, [ip]
 8027056:	fb06 e202 	mla	r2, r6, r2, lr
 802705a:	fa13 f38a 	uxtah	r3, r3, sl
 802705e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8027062:	fa1f fa82 	uxth.w	sl, r2
 8027066:	f8dc 2000 	ldr.w	r2, [ip]
 802706a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 802706e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8027072:	b29b      	uxth	r3, r3
 8027074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027078:	4581      	cmp	r9, r0
 802707a:	f84c 3b04 	str.w	r3, [ip], #4
 802707e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8027082:	d2db      	bcs.n	802703c <quorem+0x44>
 8027084:	f855 300b 	ldr.w	r3, [r5, fp]
 8027088:	b92b      	cbnz	r3, 8027096 <quorem+0x9e>
 802708a:	9b01      	ldr	r3, [sp, #4]
 802708c:	3b04      	subs	r3, #4
 802708e:	429d      	cmp	r5, r3
 8027090:	461a      	mov	r2, r3
 8027092:	d32e      	bcc.n	80270f2 <quorem+0xfa>
 8027094:	613c      	str	r4, [r7, #16]
 8027096:	4638      	mov	r0, r7
 8027098:	f001 fe4e 	bl	8028d38 <__mcmp>
 802709c:	2800      	cmp	r0, #0
 802709e:	db24      	blt.n	80270ea <quorem+0xf2>
 80270a0:	3601      	adds	r6, #1
 80270a2:	4628      	mov	r0, r5
 80270a4:	f04f 0c00 	mov.w	ip, #0
 80270a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80270ac:	f8d0 e000 	ldr.w	lr, [r0]
 80270b0:	b293      	uxth	r3, r2
 80270b2:	ebac 0303 	sub.w	r3, ip, r3
 80270b6:	0c12      	lsrs	r2, r2, #16
 80270b8:	fa13 f38e 	uxtah	r3, r3, lr
 80270bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80270c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80270c4:	b29b      	uxth	r3, r3
 80270c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80270ca:	45c1      	cmp	r9, r8
 80270cc:	f840 3b04 	str.w	r3, [r0], #4
 80270d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80270d4:	d2e8      	bcs.n	80270a8 <quorem+0xb0>
 80270d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80270da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80270de:	b922      	cbnz	r2, 80270ea <quorem+0xf2>
 80270e0:	3b04      	subs	r3, #4
 80270e2:	429d      	cmp	r5, r3
 80270e4:	461a      	mov	r2, r3
 80270e6:	d30a      	bcc.n	80270fe <quorem+0x106>
 80270e8:	613c      	str	r4, [r7, #16]
 80270ea:	4630      	mov	r0, r6
 80270ec:	b003      	add	sp, #12
 80270ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80270f2:	6812      	ldr	r2, [r2, #0]
 80270f4:	3b04      	subs	r3, #4
 80270f6:	2a00      	cmp	r2, #0
 80270f8:	d1cc      	bne.n	8027094 <quorem+0x9c>
 80270fa:	3c01      	subs	r4, #1
 80270fc:	e7c7      	b.n	802708e <quorem+0x96>
 80270fe:	6812      	ldr	r2, [r2, #0]
 8027100:	3b04      	subs	r3, #4
 8027102:	2a00      	cmp	r2, #0
 8027104:	d1f0      	bne.n	80270e8 <quorem+0xf0>
 8027106:	3c01      	subs	r4, #1
 8027108:	e7eb      	b.n	80270e2 <quorem+0xea>
 802710a:	2000      	movs	r0, #0
 802710c:	e7ee      	b.n	80270ec <quorem+0xf4>
	...

08027110 <_dtoa_r>:
 8027110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027114:	ec59 8b10 	vmov	r8, r9, d0
 8027118:	b095      	sub	sp, #84	; 0x54
 802711a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802711c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 802711e:	9107      	str	r1, [sp, #28]
 8027120:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8027124:	4606      	mov	r6, r0
 8027126:	9209      	str	r2, [sp, #36]	; 0x24
 8027128:	9310      	str	r3, [sp, #64]	; 0x40
 802712a:	b975      	cbnz	r5, 802714a <_dtoa_r+0x3a>
 802712c:	2010      	movs	r0, #16
 802712e:	f7fd fed7 	bl	8024ee0 <malloc>
 8027132:	4602      	mov	r2, r0
 8027134:	6270      	str	r0, [r6, #36]	; 0x24
 8027136:	b920      	cbnz	r0, 8027142 <_dtoa_r+0x32>
 8027138:	4bab      	ldr	r3, [pc, #684]	; (80273e8 <_dtoa_r+0x2d8>)
 802713a:	21ea      	movs	r1, #234	; 0xea
 802713c:	48ab      	ldr	r0, [pc, #684]	; (80273ec <_dtoa_r+0x2dc>)
 802713e:	f7fd fe61 	bl	8024e04 <__assert_func>
 8027142:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8027146:	6005      	str	r5, [r0, #0]
 8027148:	60c5      	str	r5, [r0, #12]
 802714a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802714c:	6819      	ldr	r1, [r3, #0]
 802714e:	b151      	cbz	r1, 8027166 <_dtoa_r+0x56>
 8027150:	685a      	ldr	r2, [r3, #4]
 8027152:	604a      	str	r2, [r1, #4]
 8027154:	2301      	movs	r3, #1
 8027156:	4093      	lsls	r3, r2
 8027158:	608b      	str	r3, [r1, #8]
 802715a:	4630      	mov	r0, r6
 802715c:	f001 fb64 	bl	8028828 <_Bfree>
 8027160:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8027162:	2200      	movs	r2, #0
 8027164:	601a      	str	r2, [r3, #0]
 8027166:	f1b9 0300 	subs.w	r3, r9, #0
 802716a:	bfbb      	ittet	lt
 802716c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8027170:	9303      	strlt	r3, [sp, #12]
 8027172:	2300      	movge	r3, #0
 8027174:	2201      	movlt	r2, #1
 8027176:	bfac      	ite	ge
 8027178:	6023      	strge	r3, [r4, #0]
 802717a:	6022      	strlt	r2, [r4, #0]
 802717c:	4b9c      	ldr	r3, [pc, #624]	; (80273f0 <_dtoa_r+0x2e0>)
 802717e:	9c03      	ldr	r4, [sp, #12]
 8027180:	43a3      	bics	r3, r4
 8027182:	d11a      	bne.n	80271ba <_dtoa_r+0xaa>
 8027184:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027186:	f242 730f 	movw	r3, #9999	; 0x270f
 802718a:	6013      	str	r3, [r2, #0]
 802718c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8027190:	ea53 0308 	orrs.w	r3, r3, r8
 8027194:	f000 8512 	beq.w	8027bbc <_dtoa_r+0xaac>
 8027198:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802719a:	b953      	cbnz	r3, 80271b2 <_dtoa_r+0xa2>
 802719c:	4b95      	ldr	r3, [pc, #596]	; (80273f4 <_dtoa_r+0x2e4>)
 802719e:	e01f      	b.n	80271e0 <_dtoa_r+0xd0>
 80271a0:	4b95      	ldr	r3, [pc, #596]	; (80273f8 <_dtoa_r+0x2e8>)
 80271a2:	9300      	str	r3, [sp, #0]
 80271a4:	3308      	adds	r3, #8
 80271a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80271a8:	6013      	str	r3, [r2, #0]
 80271aa:	9800      	ldr	r0, [sp, #0]
 80271ac:	b015      	add	sp, #84	; 0x54
 80271ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80271b2:	4b90      	ldr	r3, [pc, #576]	; (80273f4 <_dtoa_r+0x2e4>)
 80271b4:	9300      	str	r3, [sp, #0]
 80271b6:	3303      	adds	r3, #3
 80271b8:	e7f5      	b.n	80271a6 <_dtoa_r+0x96>
 80271ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80271be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80271c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80271c6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80271ca:	d10b      	bne.n	80271e4 <_dtoa_r+0xd4>
 80271cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80271ce:	2301      	movs	r3, #1
 80271d0:	6013      	str	r3, [r2, #0]
 80271d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80271d4:	2b00      	cmp	r3, #0
 80271d6:	f000 84ee 	beq.w	8027bb6 <_dtoa_r+0xaa6>
 80271da:	4888      	ldr	r0, [pc, #544]	; (80273fc <_dtoa_r+0x2ec>)
 80271dc:	6018      	str	r0, [r3, #0]
 80271de:	1e43      	subs	r3, r0, #1
 80271e0:	9300      	str	r3, [sp, #0]
 80271e2:	e7e2      	b.n	80271aa <_dtoa_r+0x9a>
 80271e4:	a913      	add	r1, sp, #76	; 0x4c
 80271e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80271ea:	aa12      	add	r2, sp, #72	; 0x48
 80271ec:	4630      	mov	r0, r6
 80271ee:	f001 fec3 	bl	8028f78 <__d2b>
 80271f2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80271f6:	4605      	mov	r5, r0
 80271f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80271fa:	2900      	cmp	r1, #0
 80271fc:	d047      	beq.n	802728e <_dtoa_r+0x17e>
 80271fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027200:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8027204:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8027208:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 802720c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8027210:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8027214:	2400      	movs	r4, #0
 8027216:	ec43 2b16 	vmov	d6, r2, r3
 802721a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802721e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80273d0 <_dtoa_r+0x2c0>
 8027222:	ee36 7b47 	vsub.f64	d7, d6, d7
 8027226:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80273d8 <_dtoa_r+0x2c8>
 802722a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802722e:	eeb0 7b46 	vmov.f64	d7, d6
 8027232:	ee06 1a90 	vmov	s13, r1
 8027236:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 802723a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80273e0 <_dtoa_r+0x2d0>
 802723e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8027242:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8027246:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802724a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802724e:	ee16 ba90 	vmov	fp, s13
 8027252:	9411      	str	r4, [sp, #68]	; 0x44
 8027254:	d508      	bpl.n	8027268 <_dtoa_r+0x158>
 8027256:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 802725a:	eeb4 6b47 	vcmp.f64	d6, d7
 802725e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027262:	bf18      	it	ne
 8027264:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8027268:	f1bb 0f16 	cmp.w	fp, #22
 802726c:	d832      	bhi.n	80272d4 <_dtoa_r+0x1c4>
 802726e:	4b64      	ldr	r3, [pc, #400]	; (8027400 <_dtoa_r+0x2f0>)
 8027270:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8027274:	ed93 7b00 	vldr	d7, [r3]
 8027278:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 802727c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027284:	d501      	bpl.n	802728a <_dtoa_r+0x17a>
 8027286:	f10b 3bff 	add.w	fp, fp, #4294967295
 802728a:	2300      	movs	r3, #0
 802728c:	e023      	b.n	80272d6 <_dtoa_r+0x1c6>
 802728e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8027290:	4401      	add	r1, r0
 8027292:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8027296:	2b20      	cmp	r3, #32
 8027298:	bfc3      	ittte	gt
 802729a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802729e:	fa04 f303 	lslgt.w	r3, r4, r3
 80272a2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80272a6:	f1c3 0320 	rsble	r3, r3, #32
 80272aa:	bfc6      	itte	gt
 80272ac:	fa28 f804 	lsrgt.w	r8, r8, r4
 80272b0:	ea43 0308 	orrgt.w	r3, r3, r8
 80272b4:	fa08 f303 	lslle.w	r3, r8, r3
 80272b8:	ee07 3a90 	vmov	s15, r3
 80272bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80272c0:	3901      	subs	r1, #1
 80272c2:	ed8d 7b00 	vstr	d7, [sp]
 80272c6:	9c01      	ldr	r4, [sp, #4]
 80272c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80272cc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80272d0:	2401      	movs	r4, #1
 80272d2:	e7a0      	b.n	8027216 <_dtoa_r+0x106>
 80272d4:	2301      	movs	r3, #1
 80272d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80272d8:	1a43      	subs	r3, r0, r1
 80272da:	1e5a      	subs	r2, r3, #1
 80272dc:	bf45      	ittet	mi
 80272de:	f1c3 0301 	rsbmi	r3, r3, #1
 80272e2:	9305      	strmi	r3, [sp, #20]
 80272e4:	2300      	movpl	r3, #0
 80272e6:	2300      	movmi	r3, #0
 80272e8:	9206      	str	r2, [sp, #24]
 80272ea:	bf54      	ite	pl
 80272ec:	9305      	strpl	r3, [sp, #20]
 80272ee:	9306      	strmi	r3, [sp, #24]
 80272f0:	f1bb 0f00 	cmp.w	fp, #0
 80272f4:	db18      	blt.n	8027328 <_dtoa_r+0x218>
 80272f6:	9b06      	ldr	r3, [sp, #24]
 80272f8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80272fc:	445b      	add	r3, fp
 80272fe:	9306      	str	r3, [sp, #24]
 8027300:	2300      	movs	r3, #0
 8027302:	9a07      	ldr	r2, [sp, #28]
 8027304:	2a09      	cmp	r2, #9
 8027306:	d849      	bhi.n	802739c <_dtoa_r+0x28c>
 8027308:	2a05      	cmp	r2, #5
 802730a:	bfc4      	itt	gt
 802730c:	3a04      	subgt	r2, #4
 802730e:	9207      	strgt	r2, [sp, #28]
 8027310:	9a07      	ldr	r2, [sp, #28]
 8027312:	f1a2 0202 	sub.w	r2, r2, #2
 8027316:	bfcc      	ite	gt
 8027318:	2400      	movgt	r4, #0
 802731a:	2401      	movle	r4, #1
 802731c:	2a03      	cmp	r2, #3
 802731e:	d848      	bhi.n	80273b2 <_dtoa_r+0x2a2>
 8027320:	e8df f002 	tbb	[pc, r2]
 8027324:	3a2c2e0b 	.word	0x3a2c2e0b
 8027328:	9b05      	ldr	r3, [sp, #20]
 802732a:	2200      	movs	r2, #0
 802732c:	eba3 030b 	sub.w	r3, r3, fp
 8027330:	9305      	str	r3, [sp, #20]
 8027332:	920e      	str	r2, [sp, #56]	; 0x38
 8027334:	f1cb 0300 	rsb	r3, fp, #0
 8027338:	e7e3      	b.n	8027302 <_dtoa_r+0x1f2>
 802733a:	2200      	movs	r2, #0
 802733c:	9208      	str	r2, [sp, #32]
 802733e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027340:	2a00      	cmp	r2, #0
 8027342:	dc39      	bgt.n	80273b8 <_dtoa_r+0x2a8>
 8027344:	f04f 0a01 	mov.w	sl, #1
 8027348:	46d1      	mov	r9, sl
 802734a:	4652      	mov	r2, sl
 802734c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8027350:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8027352:	2100      	movs	r1, #0
 8027354:	6079      	str	r1, [r7, #4]
 8027356:	2004      	movs	r0, #4
 8027358:	f100 0c14 	add.w	ip, r0, #20
 802735c:	4594      	cmp	ip, r2
 802735e:	6879      	ldr	r1, [r7, #4]
 8027360:	d92f      	bls.n	80273c2 <_dtoa_r+0x2b2>
 8027362:	4630      	mov	r0, r6
 8027364:	930c      	str	r3, [sp, #48]	; 0x30
 8027366:	f001 fa1f 	bl	80287a8 <_Balloc>
 802736a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802736c:	9000      	str	r0, [sp, #0]
 802736e:	4602      	mov	r2, r0
 8027370:	2800      	cmp	r0, #0
 8027372:	d149      	bne.n	8027408 <_dtoa_r+0x2f8>
 8027374:	4b23      	ldr	r3, [pc, #140]	; (8027404 <_dtoa_r+0x2f4>)
 8027376:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802737a:	e6df      	b.n	802713c <_dtoa_r+0x2c>
 802737c:	2201      	movs	r2, #1
 802737e:	e7dd      	b.n	802733c <_dtoa_r+0x22c>
 8027380:	2200      	movs	r2, #0
 8027382:	9208      	str	r2, [sp, #32]
 8027384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027386:	eb0b 0a02 	add.w	sl, fp, r2
 802738a:	f10a 0901 	add.w	r9, sl, #1
 802738e:	464a      	mov	r2, r9
 8027390:	2a01      	cmp	r2, #1
 8027392:	bfb8      	it	lt
 8027394:	2201      	movlt	r2, #1
 8027396:	e7db      	b.n	8027350 <_dtoa_r+0x240>
 8027398:	2201      	movs	r2, #1
 802739a:	e7f2      	b.n	8027382 <_dtoa_r+0x272>
 802739c:	2401      	movs	r4, #1
 802739e:	2200      	movs	r2, #0
 80273a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80273a4:	f04f 3aff 	mov.w	sl, #4294967295
 80273a8:	2100      	movs	r1, #0
 80273aa:	46d1      	mov	r9, sl
 80273ac:	2212      	movs	r2, #18
 80273ae:	9109      	str	r1, [sp, #36]	; 0x24
 80273b0:	e7ce      	b.n	8027350 <_dtoa_r+0x240>
 80273b2:	2201      	movs	r2, #1
 80273b4:	9208      	str	r2, [sp, #32]
 80273b6:	e7f5      	b.n	80273a4 <_dtoa_r+0x294>
 80273b8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80273bc:	46d1      	mov	r9, sl
 80273be:	4652      	mov	r2, sl
 80273c0:	e7c6      	b.n	8027350 <_dtoa_r+0x240>
 80273c2:	3101      	adds	r1, #1
 80273c4:	6079      	str	r1, [r7, #4]
 80273c6:	0040      	lsls	r0, r0, #1
 80273c8:	e7c6      	b.n	8027358 <_dtoa_r+0x248>
 80273ca:	bf00      	nop
 80273cc:	f3af 8000 	nop.w
 80273d0:	636f4361 	.word	0x636f4361
 80273d4:	3fd287a7 	.word	0x3fd287a7
 80273d8:	8b60c8b3 	.word	0x8b60c8b3
 80273dc:	3fc68a28 	.word	0x3fc68a28
 80273e0:	509f79fb 	.word	0x509f79fb
 80273e4:	3fd34413 	.word	0x3fd34413
 80273e8:	0802d9be 	.word	0x0802d9be
 80273ec:	0802d9d5 	.word	0x0802d9d5
 80273f0:	7ff00000 	.word	0x7ff00000
 80273f4:	0802d9ba 	.word	0x0802d9ba
 80273f8:	0802d9b1 	.word	0x0802d9b1
 80273fc:	0802cb3b 	.word	0x0802cb3b
 8027400:	0802dbb0 	.word	0x0802dbb0
 8027404:	0802da34 	.word	0x0802da34
 8027408:	6a72      	ldr	r2, [r6, #36]	; 0x24
 802740a:	9900      	ldr	r1, [sp, #0]
 802740c:	6011      	str	r1, [r2, #0]
 802740e:	f1b9 0f0e 	cmp.w	r9, #14
 8027412:	d872      	bhi.n	80274fa <_dtoa_r+0x3ea>
 8027414:	2c00      	cmp	r4, #0
 8027416:	d070      	beq.n	80274fa <_dtoa_r+0x3ea>
 8027418:	f1bb 0f00 	cmp.w	fp, #0
 802741c:	f340 80a6 	ble.w	802756c <_dtoa_r+0x45c>
 8027420:	49ca      	ldr	r1, [pc, #808]	; (802774c <_dtoa_r+0x63c>)
 8027422:	f00b 020f 	and.w	r2, fp, #15
 8027426:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 802742a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802742e:	ed92 7b00 	vldr	d7, [r2]
 8027432:	ea4f 112b 	mov.w	r1, fp, asr #4
 8027436:	f000 808d 	beq.w	8027554 <_dtoa_r+0x444>
 802743a:	4ac5      	ldr	r2, [pc, #788]	; (8027750 <_dtoa_r+0x640>)
 802743c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8027440:	ed92 6b08 	vldr	d6, [r2, #32]
 8027444:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8027448:	ed8d 6b02 	vstr	d6, [sp, #8]
 802744c:	f001 010f 	and.w	r1, r1, #15
 8027450:	2203      	movs	r2, #3
 8027452:	48bf      	ldr	r0, [pc, #764]	; (8027750 <_dtoa_r+0x640>)
 8027454:	2900      	cmp	r1, #0
 8027456:	d17f      	bne.n	8027558 <_dtoa_r+0x448>
 8027458:	ed9d 6b02 	vldr	d6, [sp, #8]
 802745c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027460:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027464:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027466:	2900      	cmp	r1, #0
 8027468:	f000 80b2 	beq.w	80275d0 <_dtoa_r+0x4c0>
 802746c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8027470:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027474:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802747c:	f140 80a8 	bpl.w	80275d0 <_dtoa_r+0x4c0>
 8027480:	f1b9 0f00 	cmp.w	r9, #0
 8027484:	f000 80a4 	beq.w	80275d0 <_dtoa_r+0x4c0>
 8027488:	f1ba 0f00 	cmp.w	sl, #0
 802748c:	dd31      	ble.n	80274f2 <_dtoa_r+0x3e2>
 802748e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8027492:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027496:	ed8d 7b02 	vstr	d7, [sp, #8]
 802749a:	f10b 37ff 	add.w	r7, fp, #4294967295
 802749e:	3201      	adds	r2, #1
 80274a0:	4650      	mov	r0, sl
 80274a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80274a6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80274aa:	ee07 2a90 	vmov	s15, r2
 80274ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80274b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80274b6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80274ba:	9c03      	ldr	r4, [sp, #12]
 80274bc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80274c0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80274c4:	2800      	cmp	r0, #0
 80274c6:	f040 8086 	bne.w	80275d6 <_dtoa_r+0x4c6>
 80274ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80274ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80274d2:	ec42 1b17 	vmov	d7, r1, r2
 80274d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80274da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80274de:	f300 8272 	bgt.w	80279c6 <_dtoa_r+0x8b6>
 80274e2:	eeb1 7b47 	vneg.f64	d7, d7
 80274e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80274ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80274ee:	f100 8267 	bmi.w	80279c0 <_dtoa_r+0x8b0>
 80274f2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80274f6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80274fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80274fc:	2a00      	cmp	r2, #0
 80274fe:	f2c0 8129 	blt.w	8027754 <_dtoa_r+0x644>
 8027502:	f1bb 0f0e 	cmp.w	fp, #14
 8027506:	f300 8125 	bgt.w	8027754 <_dtoa_r+0x644>
 802750a:	4b90      	ldr	r3, [pc, #576]	; (802774c <_dtoa_r+0x63c>)
 802750c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8027510:	ed93 6b00 	vldr	d6, [r3]
 8027514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027516:	2b00      	cmp	r3, #0
 8027518:	f280 80c3 	bge.w	80276a2 <_dtoa_r+0x592>
 802751c:	f1b9 0f00 	cmp.w	r9, #0
 8027520:	f300 80bf 	bgt.w	80276a2 <_dtoa_r+0x592>
 8027524:	f040 824c 	bne.w	80279c0 <_dtoa_r+0x8b0>
 8027528:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802752c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8027530:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027534:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802753c:	464c      	mov	r4, r9
 802753e:	464f      	mov	r7, r9
 8027540:	f280 8222 	bge.w	8027988 <_dtoa_r+0x878>
 8027544:	f8dd 8000 	ldr.w	r8, [sp]
 8027548:	2331      	movs	r3, #49	; 0x31
 802754a:	f808 3b01 	strb.w	r3, [r8], #1
 802754e:	f10b 0b01 	add.w	fp, fp, #1
 8027552:	e21e      	b.n	8027992 <_dtoa_r+0x882>
 8027554:	2202      	movs	r2, #2
 8027556:	e77c      	b.n	8027452 <_dtoa_r+0x342>
 8027558:	07cc      	lsls	r4, r1, #31
 802755a:	d504      	bpl.n	8027566 <_dtoa_r+0x456>
 802755c:	ed90 6b00 	vldr	d6, [r0]
 8027560:	3201      	adds	r2, #1
 8027562:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027566:	1049      	asrs	r1, r1, #1
 8027568:	3008      	adds	r0, #8
 802756a:	e773      	b.n	8027454 <_dtoa_r+0x344>
 802756c:	d02e      	beq.n	80275cc <_dtoa_r+0x4bc>
 802756e:	f1cb 0100 	rsb	r1, fp, #0
 8027572:	4a76      	ldr	r2, [pc, #472]	; (802774c <_dtoa_r+0x63c>)
 8027574:	f001 000f 	and.w	r0, r1, #15
 8027578:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 802757c:	ed92 7b00 	vldr	d7, [r2]
 8027580:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8027584:	ee26 7b07 	vmul.f64	d7, d6, d7
 8027588:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 802758c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8027590:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8027594:	486e      	ldr	r0, [pc, #440]	; (8027750 <_dtoa_r+0x640>)
 8027596:	1109      	asrs	r1, r1, #4
 8027598:	2400      	movs	r4, #0
 802759a:	2202      	movs	r2, #2
 802759c:	b939      	cbnz	r1, 80275ae <_dtoa_r+0x49e>
 802759e:	2c00      	cmp	r4, #0
 80275a0:	f43f af60 	beq.w	8027464 <_dtoa_r+0x354>
 80275a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80275a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80275ac:	e75a      	b.n	8027464 <_dtoa_r+0x354>
 80275ae:	07cf      	lsls	r7, r1, #31
 80275b0:	d509      	bpl.n	80275c6 <_dtoa_r+0x4b6>
 80275b2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80275b6:	ed90 7b00 	vldr	d7, [r0]
 80275ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80275be:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80275c2:	3201      	adds	r2, #1
 80275c4:	2401      	movs	r4, #1
 80275c6:	1049      	asrs	r1, r1, #1
 80275c8:	3008      	adds	r0, #8
 80275ca:	e7e7      	b.n	802759c <_dtoa_r+0x48c>
 80275cc:	2202      	movs	r2, #2
 80275ce:	e749      	b.n	8027464 <_dtoa_r+0x354>
 80275d0:	465f      	mov	r7, fp
 80275d2:	4648      	mov	r0, r9
 80275d4:	e765      	b.n	80274a2 <_dtoa_r+0x392>
 80275d6:	ec42 1b17 	vmov	d7, r1, r2
 80275da:	4a5c      	ldr	r2, [pc, #368]	; (802774c <_dtoa_r+0x63c>)
 80275dc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80275e0:	ed12 4b02 	vldr	d4, [r2, #-8]
 80275e4:	9a00      	ldr	r2, [sp, #0]
 80275e6:	1814      	adds	r4, r2, r0
 80275e8:	9a08      	ldr	r2, [sp, #32]
 80275ea:	b352      	cbz	r2, 8027642 <_dtoa_r+0x532>
 80275ec:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80275f0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80275f4:	f8dd 8000 	ldr.w	r8, [sp]
 80275f8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80275fc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8027600:	ee35 7b47 	vsub.f64	d7, d5, d7
 8027604:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8027608:	ee14 2a90 	vmov	r2, s9
 802760c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8027610:	3230      	adds	r2, #48	; 0x30
 8027612:	ee36 6b45 	vsub.f64	d6, d6, d5
 8027616:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802761a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802761e:	f808 2b01 	strb.w	r2, [r8], #1
 8027622:	d439      	bmi.n	8027698 <_dtoa_r+0x588>
 8027624:	ee32 5b46 	vsub.f64	d5, d2, d6
 8027628:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802762c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027630:	d472      	bmi.n	8027718 <_dtoa_r+0x608>
 8027632:	45a0      	cmp	r8, r4
 8027634:	f43f af5d 	beq.w	80274f2 <_dtoa_r+0x3e2>
 8027638:	ee27 7b03 	vmul.f64	d7, d7, d3
 802763c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8027640:	e7e0      	b.n	8027604 <_dtoa_r+0x4f4>
 8027642:	f8dd 8000 	ldr.w	r8, [sp]
 8027646:	ee27 7b04 	vmul.f64	d7, d7, d4
 802764a:	4621      	mov	r1, r4
 802764c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8027650:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8027654:	ee14 2a90 	vmov	r2, s9
 8027658:	3230      	adds	r2, #48	; 0x30
 802765a:	f808 2b01 	strb.w	r2, [r8], #1
 802765e:	45a0      	cmp	r8, r4
 8027660:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8027664:	ee36 6b45 	vsub.f64	d6, d6, d5
 8027668:	d118      	bne.n	802769c <_dtoa_r+0x58c>
 802766a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 802766e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8027672:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8027676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802767a:	dc4d      	bgt.n	8027718 <_dtoa_r+0x608>
 802767c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8027680:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027688:	f57f af33 	bpl.w	80274f2 <_dtoa_r+0x3e2>
 802768c:	4688      	mov	r8, r1
 802768e:	3901      	subs	r1, #1
 8027690:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8027694:	2b30      	cmp	r3, #48	; 0x30
 8027696:	d0f9      	beq.n	802768c <_dtoa_r+0x57c>
 8027698:	46bb      	mov	fp, r7
 802769a:	e02a      	b.n	80276f2 <_dtoa_r+0x5e2>
 802769c:	ee26 6b03 	vmul.f64	d6, d6, d3
 80276a0:	e7d6      	b.n	8027650 <_dtoa_r+0x540>
 80276a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80276a6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80276aa:	f8dd 8000 	ldr.w	r8, [sp]
 80276ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80276b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80276b6:	ee15 3a10 	vmov	r3, s10
 80276ba:	3330      	adds	r3, #48	; 0x30
 80276bc:	f808 3b01 	strb.w	r3, [r8], #1
 80276c0:	9b00      	ldr	r3, [sp, #0]
 80276c2:	eba8 0303 	sub.w	r3, r8, r3
 80276c6:	4599      	cmp	r9, r3
 80276c8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80276cc:	eea3 7b46 	vfms.f64	d7, d3, d6
 80276d0:	d133      	bne.n	802773a <_dtoa_r+0x62a>
 80276d2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80276d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80276da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80276de:	dc1a      	bgt.n	8027716 <_dtoa_r+0x606>
 80276e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80276e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80276e8:	d103      	bne.n	80276f2 <_dtoa_r+0x5e2>
 80276ea:	ee15 3a10 	vmov	r3, s10
 80276ee:	07d9      	lsls	r1, r3, #31
 80276f0:	d411      	bmi.n	8027716 <_dtoa_r+0x606>
 80276f2:	4629      	mov	r1, r5
 80276f4:	4630      	mov	r0, r6
 80276f6:	f001 f897 	bl	8028828 <_Bfree>
 80276fa:	2300      	movs	r3, #0
 80276fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80276fe:	f888 3000 	strb.w	r3, [r8]
 8027702:	f10b 0301 	add.w	r3, fp, #1
 8027706:	6013      	str	r3, [r2, #0]
 8027708:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802770a:	2b00      	cmp	r3, #0
 802770c:	f43f ad4d 	beq.w	80271aa <_dtoa_r+0x9a>
 8027710:	f8c3 8000 	str.w	r8, [r3]
 8027714:	e549      	b.n	80271aa <_dtoa_r+0x9a>
 8027716:	465f      	mov	r7, fp
 8027718:	4643      	mov	r3, r8
 802771a:	4698      	mov	r8, r3
 802771c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8027720:	2a39      	cmp	r2, #57	; 0x39
 8027722:	d106      	bne.n	8027732 <_dtoa_r+0x622>
 8027724:	9a00      	ldr	r2, [sp, #0]
 8027726:	429a      	cmp	r2, r3
 8027728:	d1f7      	bne.n	802771a <_dtoa_r+0x60a>
 802772a:	9900      	ldr	r1, [sp, #0]
 802772c:	2230      	movs	r2, #48	; 0x30
 802772e:	3701      	adds	r7, #1
 8027730:	700a      	strb	r2, [r1, #0]
 8027732:	781a      	ldrb	r2, [r3, #0]
 8027734:	3201      	adds	r2, #1
 8027736:	701a      	strb	r2, [r3, #0]
 8027738:	e7ae      	b.n	8027698 <_dtoa_r+0x588>
 802773a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802773e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8027742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027746:	d1b2      	bne.n	80276ae <_dtoa_r+0x59e>
 8027748:	e7d3      	b.n	80276f2 <_dtoa_r+0x5e2>
 802774a:	bf00      	nop
 802774c:	0802dbb0 	.word	0x0802dbb0
 8027750:	0802db88 	.word	0x0802db88
 8027754:	9908      	ldr	r1, [sp, #32]
 8027756:	2900      	cmp	r1, #0
 8027758:	f000 80d1 	beq.w	80278fe <_dtoa_r+0x7ee>
 802775c:	9907      	ldr	r1, [sp, #28]
 802775e:	2901      	cmp	r1, #1
 8027760:	f300 80b4 	bgt.w	80278cc <_dtoa_r+0x7bc>
 8027764:	9911      	ldr	r1, [sp, #68]	; 0x44
 8027766:	2900      	cmp	r1, #0
 8027768:	f000 80ac 	beq.w	80278c4 <_dtoa_r+0x7b4>
 802776c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8027770:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8027774:	461c      	mov	r4, r3
 8027776:	930a      	str	r3, [sp, #40]	; 0x28
 8027778:	9b05      	ldr	r3, [sp, #20]
 802777a:	4413      	add	r3, r2
 802777c:	9305      	str	r3, [sp, #20]
 802777e:	9b06      	ldr	r3, [sp, #24]
 8027780:	2101      	movs	r1, #1
 8027782:	4413      	add	r3, r2
 8027784:	4630      	mov	r0, r6
 8027786:	9306      	str	r3, [sp, #24]
 8027788:	f001 f954 	bl	8028a34 <__i2b>
 802778c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802778e:	4607      	mov	r7, r0
 8027790:	f1b8 0f00 	cmp.w	r8, #0
 8027794:	dd0d      	ble.n	80277b2 <_dtoa_r+0x6a2>
 8027796:	9a06      	ldr	r2, [sp, #24]
 8027798:	2a00      	cmp	r2, #0
 802779a:	dd0a      	ble.n	80277b2 <_dtoa_r+0x6a2>
 802779c:	4542      	cmp	r2, r8
 802779e:	9905      	ldr	r1, [sp, #20]
 80277a0:	bfa8      	it	ge
 80277a2:	4642      	movge	r2, r8
 80277a4:	1a89      	subs	r1, r1, r2
 80277a6:	9105      	str	r1, [sp, #20]
 80277a8:	9906      	ldr	r1, [sp, #24]
 80277aa:	eba8 0802 	sub.w	r8, r8, r2
 80277ae:	1a8a      	subs	r2, r1, r2
 80277b0:	9206      	str	r2, [sp, #24]
 80277b2:	b303      	cbz	r3, 80277f6 <_dtoa_r+0x6e6>
 80277b4:	9a08      	ldr	r2, [sp, #32]
 80277b6:	2a00      	cmp	r2, #0
 80277b8:	f000 80a6 	beq.w	8027908 <_dtoa_r+0x7f8>
 80277bc:	2c00      	cmp	r4, #0
 80277be:	dd13      	ble.n	80277e8 <_dtoa_r+0x6d8>
 80277c0:	4639      	mov	r1, r7
 80277c2:	4622      	mov	r2, r4
 80277c4:	4630      	mov	r0, r6
 80277c6:	930c      	str	r3, [sp, #48]	; 0x30
 80277c8:	f001 f9f0 	bl	8028bac <__pow5mult>
 80277cc:	462a      	mov	r2, r5
 80277ce:	4601      	mov	r1, r0
 80277d0:	4607      	mov	r7, r0
 80277d2:	4630      	mov	r0, r6
 80277d4:	f001 f944 	bl	8028a60 <__multiply>
 80277d8:	4629      	mov	r1, r5
 80277da:	900a      	str	r0, [sp, #40]	; 0x28
 80277dc:	4630      	mov	r0, r6
 80277de:	f001 f823 	bl	8028828 <_Bfree>
 80277e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80277e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80277e6:	4615      	mov	r5, r2
 80277e8:	1b1a      	subs	r2, r3, r4
 80277ea:	d004      	beq.n	80277f6 <_dtoa_r+0x6e6>
 80277ec:	4629      	mov	r1, r5
 80277ee:	4630      	mov	r0, r6
 80277f0:	f001 f9dc 	bl	8028bac <__pow5mult>
 80277f4:	4605      	mov	r5, r0
 80277f6:	2101      	movs	r1, #1
 80277f8:	4630      	mov	r0, r6
 80277fa:	f001 f91b 	bl	8028a34 <__i2b>
 80277fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027800:	2b00      	cmp	r3, #0
 8027802:	4604      	mov	r4, r0
 8027804:	f340 8082 	ble.w	802790c <_dtoa_r+0x7fc>
 8027808:	461a      	mov	r2, r3
 802780a:	4601      	mov	r1, r0
 802780c:	4630      	mov	r0, r6
 802780e:	f001 f9cd 	bl	8028bac <__pow5mult>
 8027812:	9b07      	ldr	r3, [sp, #28]
 8027814:	2b01      	cmp	r3, #1
 8027816:	4604      	mov	r4, r0
 8027818:	dd7b      	ble.n	8027912 <_dtoa_r+0x802>
 802781a:	2300      	movs	r3, #0
 802781c:	930a      	str	r3, [sp, #40]	; 0x28
 802781e:	6922      	ldr	r2, [r4, #16]
 8027820:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8027824:	6910      	ldr	r0, [r2, #16]
 8027826:	f001 f8b5 	bl	8028994 <__hi0bits>
 802782a:	f1c0 0020 	rsb	r0, r0, #32
 802782e:	9b06      	ldr	r3, [sp, #24]
 8027830:	4418      	add	r0, r3
 8027832:	f010 001f 	ands.w	r0, r0, #31
 8027836:	f000 808d 	beq.w	8027954 <_dtoa_r+0x844>
 802783a:	f1c0 0220 	rsb	r2, r0, #32
 802783e:	2a04      	cmp	r2, #4
 8027840:	f340 8086 	ble.w	8027950 <_dtoa_r+0x840>
 8027844:	f1c0 001c 	rsb	r0, r0, #28
 8027848:	9b05      	ldr	r3, [sp, #20]
 802784a:	4403      	add	r3, r0
 802784c:	9305      	str	r3, [sp, #20]
 802784e:	9b06      	ldr	r3, [sp, #24]
 8027850:	4403      	add	r3, r0
 8027852:	4480      	add	r8, r0
 8027854:	9306      	str	r3, [sp, #24]
 8027856:	9b05      	ldr	r3, [sp, #20]
 8027858:	2b00      	cmp	r3, #0
 802785a:	dd05      	ble.n	8027868 <_dtoa_r+0x758>
 802785c:	4629      	mov	r1, r5
 802785e:	461a      	mov	r2, r3
 8027860:	4630      	mov	r0, r6
 8027862:	f001 f9fd 	bl	8028c60 <__lshift>
 8027866:	4605      	mov	r5, r0
 8027868:	9b06      	ldr	r3, [sp, #24]
 802786a:	2b00      	cmp	r3, #0
 802786c:	dd05      	ble.n	802787a <_dtoa_r+0x76a>
 802786e:	4621      	mov	r1, r4
 8027870:	461a      	mov	r2, r3
 8027872:	4630      	mov	r0, r6
 8027874:	f001 f9f4 	bl	8028c60 <__lshift>
 8027878:	4604      	mov	r4, r0
 802787a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802787c:	2b00      	cmp	r3, #0
 802787e:	d06b      	beq.n	8027958 <_dtoa_r+0x848>
 8027880:	4621      	mov	r1, r4
 8027882:	4628      	mov	r0, r5
 8027884:	f001 fa58 	bl	8028d38 <__mcmp>
 8027888:	2800      	cmp	r0, #0
 802788a:	da65      	bge.n	8027958 <_dtoa_r+0x848>
 802788c:	2300      	movs	r3, #0
 802788e:	4629      	mov	r1, r5
 8027890:	220a      	movs	r2, #10
 8027892:	4630      	mov	r0, r6
 8027894:	f000 ffea 	bl	802886c <__multadd>
 8027898:	9b08      	ldr	r3, [sp, #32]
 802789a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802789e:	4605      	mov	r5, r0
 80278a0:	2b00      	cmp	r3, #0
 80278a2:	f000 8192 	beq.w	8027bca <_dtoa_r+0xaba>
 80278a6:	4639      	mov	r1, r7
 80278a8:	2300      	movs	r3, #0
 80278aa:	220a      	movs	r2, #10
 80278ac:	4630      	mov	r0, r6
 80278ae:	f000 ffdd 	bl	802886c <__multadd>
 80278b2:	f1ba 0f00 	cmp.w	sl, #0
 80278b6:	4607      	mov	r7, r0
 80278b8:	f300 808e 	bgt.w	80279d8 <_dtoa_r+0x8c8>
 80278bc:	9b07      	ldr	r3, [sp, #28]
 80278be:	2b02      	cmp	r3, #2
 80278c0:	dc51      	bgt.n	8027966 <_dtoa_r+0x856>
 80278c2:	e089      	b.n	80279d8 <_dtoa_r+0x8c8>
 80278c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80278c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80278ca:	e751      	b.n	8027770 <_dtoa_r+0x660>
 80278cc:	f109 34ff 	add.w	r4, r9, #4294967295
 80278d0:	42a3      	cmp	r3, r4
 80278d2:	bfbf      	itttt	lt
 80278d4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80278d6:	1ae3      	sublt	r3, r4, r3
 80278d8:	18d2      	addlt	r2, r2, r3
 80278da:	4613      	movlt	r3, r2
 80278dc:	bfb7      	itett	lt
 80278de:	930e      	strlt	r3, [sp, #56]	; 0x38
 80278e0:	1b1c      	subge	r4, r3, r4
 80278e2:	4623      	movlt	r3, r4
 80278e4:	2400      	movlt	r4, #0
 80278e6:	f1b9 0f00 	cmp.w	r9, #0
 80278ea:	bfb5      	itete	lt
 80278ec:	9a05      	ldrlt	r2, [sp, #20]
 80278ee:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80278f2:	eba2 0809 	sublt.w	r8, r2, r9
 80278f6:	464a      	movge	r2, r9
 80278f8:	bfb8      	it	lt
 80278fa:	2200      	movlt	r2, #0
 80278fc:	e73b      	b.n	8027776 <_dtoa_r+0x666>
 80278fe:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8027902:	9f08      	ldr	r7, [sp, #32]
 8027904:	461c      	mov	r4, r3
 8027906:	e743      	b.n	8027790 <_dtoa_r+0x680>
 8027908:	461a      	mov	r2, r3
 802790a:	e76f      	b.n	80277ec <_dtoa_r+0x6dc>
 802790c:	9b07      	ldr	r3, [sp, #28]
 802790e:	2b01      	cmp	r3, #1
 8027910:	dc18      	bgt.n	8027944 <_dtoa_r+0x834>
 8027912:	9b02      	ldr	r3, [sp, #8]
 8027914:	b9b3      	cbnz	r3, 8027944 <_dtoa_r+0x834>
 8027916:	9b03      	ldr	r3, [sp, #12]
 8027918:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802791c:	b9a2      	cbnz	r2, 8027948 <_dtoa_r+0x838>
 802791e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8027922:	0d12      	lsrs	r2, r2, #20
 8027924:	0512      	lsls	r2, r2, #20
 8027926:	b18a      	cbz	r2, 802794c <_dtoa_r+0x83c>
 8027928:	9b05      	ldr	r3, [sp, #20]
 802792a:	3301      	adds	r3, #1
 802792c:	9305      	str	r3, [sp, #20]
 802792e:	9b06      	ldr	r3, [sp, #24]
 8027930:	3301      	adds	r3, #1
 8027932:	9306      	str	r3, [sp, #24]
 8027934:	2301      	movs	r3, #1
 8027936:	930a      	str	r3, [sp, #40]	; 0x28
 8027938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802793a:	2b00      	cmp	r3, #0
 802793c:	f47f af6f 	bne.w	802781e <_dtoa_r+0x70e>
 8027940:	2001      	movs	r0, #1
 8027942:	e774      	b.n	802782e <_dtoa_r+0x71e>
 8027944:	2300      	movs	r3, #0
 8027946:	e7f6      	b.n	8027936 <_dtoa_r+0x826>
 8027948:	9b02      	ldr	r3, [sp, #8]
 802794a:	e7f4      	b.n	8027936 <_dtoa_r+0x826>
 802794c:	920a      	str	r2, [sp, #40]	; 0x28
 802794e:	e7f3      	b.n	8027938 <_dtoa_r+0x828>
 8027950:	d081      	beq.n	8027856 <_dtoa_r+0x746>
 8027952:	4610      	mov	r0, r2
 8027954:	301c      	adds	r0, #28
 8027956:	e777      	b.n	8027848 <_dtoa_r+0x738>
 8027958:	f1b9 0f00 	cmp.w	r9, #0
 802795c:	dc37      	bgt.n	80279ce <_dtoa_r+0x8be>
 802795e:	9b07      	ldr	r3, [sp, #28]
 8027960:	2b02      	cmp	r3, #2
 8027962:	dd34      	ble.n	80279ce <_dtoa_r+0x8be>
 8027964:	46ca      	mov	sl, r9
 8027966:	f1ba 0f00 	cmp.w	sl, #0
 802796a:	d10d      	bne.n	8027988 <_dtoa_r+0x878>
 802796c:	4621      	mov	r1, r4
 802796e:	4653      	mov	r3, sl
 8027970:	2205      	movs	r2, #5
 8027972:	4630      	mov	r0, r6
 8027974:	f000 ff7a 	bl	802886c <__multadd>
 8027978:	4601      	mov	r1, r0
 802797a:	4604      	mov	r4, r0
 802797c:	4628      	mov	r0, r5
 802797e:	f001 f9db 	bl	8028d38 <__mcmp>
 8027982:	2800      	cmp	r0, #0
 8027984:	f73f adde 	bgt.w	8027544 <_dtoa_r+0x434>
 8027988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802798a:	f8dd 8000 	ldr.w	r8, [sp]
 802798e:	ea6f 0b03 	mvn.w	fp, r3
 8027992:	f04f 0900 	mov.w	r9, #0
 8027996:	4621      	mov	r1, r4
 8027998:	4630      	mov	r0, r6
 802799a:	f000 ff45 	bl	8028828 <_Bfree>
 802799e:	2f00      	cmp	r7, #0
 80279a0:	f43f aea7 	beq.w	80276f2 <_dtoa_r+0x5e2>
 80279a4:	f1b9 0f00 	cmp.w	r9, #0
 80279a8:	d005      	beq.n	80279b6 <_dtoa_r+0x8a6>
 80279aa:	45b9      	cmp	r9, r7
 80279ac:	d003      	beq.n	80279b6 <_dtoa_r+0x8a6>
 80279ae:	4649      	mov	r1, r9
 80279b0:	4630      	mov	r0, r6
 80279b2:	f000 ff39 	bl	8028828 <_Bfree>
 80279b6:	4639      	mov	r1, r7
 80279b8:	4630      	mov	r0, r6
 80279ba:	f000 ff35 	bl	8028828 <_Bfree>
 80279be:	e698      	b.n	80276f2 <_dtoa_r+0x5e2>
 80279c0:	2400      	movs	r4, #0
 80279c2:	4627      	mov	r7, r4
 80279c4:	e7e0      	b.n	8027988 <_dtoa_r+0x878>
 80279c6:	46bb      	mov	fp, r7
 80279c8:	4604      	mov	r4, r0
 80279ca:	4607      	mov	r7, r0
 80279cc:	e5ba      	b.n	8027544 <_dtoa_r+0x434>
 80279ce:	9b08      	ldr	r3, [sp, #32]
 80279d0:	46ca      	mov	sl, r9
 80279d2:	2b00      	cmp	r3, #0
 80279d4:	f000 8100 	beq.w	8027bd8 <_dtoa_r+0xac8>
 80279d8:	f1b8 0f00 	cmp.w	r8, #0
 80279dc:	dd05      	ble.n	80279ea <_dtoa_r+0x8da>
 80279de:	4639      	mov	r1, r7
 80279e0:	4642      	mov	r2, r8
 80279e2:	4630      	mov	r0, r6
 80279e4:	f001 f93c 	bl	8028c60 <__lshift>
 80279e8:	4607      	mov	r7, r0
 80279ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80279ec:	2b00      	cmp	r3, #0
 80279ee:	d05d      	beq.n	8027aac <_dtoa_r+0x99c>
 80279f0:	6879      	ldr	r1, [r7, #4]
 80279f2:	4630      	mov	r0, r6
 80279f4:	f000 fed8 	bl	80287a8 <_Balloc>
 80279f8:	4680      	mov	r8, r0
 80279fa:	b928      	cbnz	r0, 8027a08 <_dtoa_r+0x8f8>
 80279fc:	4b82      	ldr	r3, [pc, #520]	; (8027c08 <_dtoa_r+0xaf8>)
 80279fe:	4602      	mov	r2, r0
 8027a00:	f240 21ea 	movw	r1, #746	; 0x2ea
 8027a04:	f7ff bb9a 	b.w	802713c <_dtoa_r+0x2c>
 8027a08:	693a      	ldr	r2, [r7, #16]
 8027a0a:	3202      	adds	r2, #2
 8027a0c:	0092      	lsls	r2, r2, #2
 8027a0e:	f107 010c 	add.w	r1, r7, #12
 8027a12:	300c      	adds	r0, #12
 8027a14:	f7fd fa74 	bl	8024f00 <memcpy>
 8027a18:	2201      	movs	r2, #1
 8027a1a:	4641      	mov	r1, r8
 8027a1c:	4630      	mov	r0, r6
 8027a1e:	f001 f91f 	bl	8028c60 <__lshift>
 8027a22:	9b00      	ldr	r3, [sp, #0]
 8027a24:	3301      	adds	r3, #1
 8027a26:	9305      	str	r3, [sp, #20]
 8027a28:	9b00      	ldr	r3, [sp, #0]
 8027a2a:	4453      	add	r3, sl
 8027a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8027a2e:	9b02      	ldr	r3, [sp, #8]
 8027a30:	f003 0301 	and.w	r3, r3, #1
 8027a34:	46b9      	mov	r9, r7
 8027a36:	9308      	str	r3, [sp, #32]
 8027a38:	4607      	mov	r7, r0
 8027a3a:	9b05      	ldr	r3, [sp, #20]
 8027a3c:	4621      	mov	r1, r4
 8027a3e:	3b01      	subs	r3, #1
 8027a40:	4628      	mov	r0, r5
 8027a42:	9302      	str	r3, [sp, #8]
 8027a44:	f7ff fad8 	bl	8026ff8 <quorem>
 8027a48:	4603      	mov	r3, r0
 8027a4a:	3330      	adds	r3, #48	; 0x30
 8027a4c:	9006      	str	r0, [sp, #24]
 8027a4e:	4649      	mov	r1, r9
 8027a50:	4628      	mov	r0, r5
 8027a52:	930a      	str	r3, [sp, #40]	; 0x28
 8027a54:	f001 f970 	bl	8028d38 <__mcmp>
 8027a58:	463a      	mov	r2, r7
 8027a5a:	4682      	mov	sl, r0
 8027a5c:	4621      	mov	r1, r4
 8027a5e:	4630      	mov	r0, r6
 8027a60:	f001 f986 	bl	8028d70 <__mdiff>
 8027a64:	68c2      	ldr	r2, [r0, #12]
 8027a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027a68:	4680      	mov	r8, r0
 8027a6a:	bb0a      	cbnz	r2, 8027ab0 <_dtoa_r+0x9a0>
 8027a6c:	4601      	mov	r1, r0
 8027a6e:	4628      	mov	r0, r5
 8027a70:	f001 f962 	bl	8028d38 <__mcmp>
 8027a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027a76:	4602      	mov	r2, r0
 8027a78:	4641      	mov	r1, r8
 8027a7a:	4630      	mov	r0, r6
 8027a7c:	920e      	str	r2, [sp, #56]	; 0x38
 8027a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8027a80:	f000 fed2 	bl	8028828 <_Bfree>
 8027a84:	9b07      	ldr	r3, [sp, #28]
 8027a86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027a88:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8027a8c:	ea43 0102 	orr.w	r1, r3, r2
 8027a90:	9b08      	ldr	r3, [sp, #32]
 8027a92:	430b      	orrs	r3, r1
 8027a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027a96:	d10d      	bne.n	8027ab4 <_dtoa_r+0x9a4>
 8027a98:	2b39      	cmp	r3, #57	; 0x39
 8027a9a:	d029      	beq.n	8027af0 <_dtoa_r+0x9e0>
 8027a9c:	f1ba 0f00 	cmp.w	sl, #0
 8027aa0:	dd01      	ble.n	8027aa6 <_dtoa_r+0x996>
 8027aa2:	9b06      	ldr	r3, [sp, #24]
 8027aa4:	3331      	adds	r3, #49	; 0x31
 8027aa6:	9a02      	ldr	r2, [sp, #8]
 8027aa8:	7013      	strb	r3, [r2, #0]
 8027aaa:	e774      	b.n	8027996 <_dtoa_r+0x886>
 8027aac:	4638      	mov	r0, r7
 8027aae:	e7b8      	b.n	8027a22 <_dtoa_r+0x912>
 8027ab0:	2201      	movs	r2, #1
 8027ab2:	e7e1      	b.n	8027a78 <_dtoa_r+0x968>
 8027ab4:	f1ba 0f00 	cmp.w	sl, #0
 8027ab8:	db06      	blt.n	8027ac8 <_dtoa_r+0x9b8>
 8027aba:	9907      	ldr	r1, [sp, #28]
 8027abc:	ea41 0a0a 	orr.w	sl, r1, sl
 8027ac0:	9908      	ldr	r1, [sp, #32]
 8027ac2:	ea5a 0101 	orrs.w	r1, sl, r1
 8027ac6:	d120      	bne.n	8027b0a <_dtoa_r+0x9fa>
 8027ac8:	2a00      	cmp	r2, #0
 8027aca:	ddec      	ble.n	8027aa6 <_dtoa_r+0x996>
 8027acc:	4629      	mov	r1, r5
 8027ace:	2201      	movs	r2, #1
 8027ad0:	4630      	mov	r0, r6
 8027ad2:	9305      	str	r3, [sp, #20]
 8027ad4:	f001 f8c4 	bl	8028c60 <__lshift>
 8027ad8:	4621      	mov	r1, r4
 8027ada:	4605      	mov	r5, r0
 8027adc:	f001 f92c 	bl	8028d38 <__mcmp>
 8027ae0:	2800      	cmp	r0, #0
 8027ae2:	9b05      	ldr	r3, [sp, #20]
 8027ae4:	dc02      	bgt.n	8027aec <_dtoa_r+0x9dc>
 8027ae6:	d1de      	bne.n	8027aa6 <_dtoa_r+0x996>
 8027ae8:	07da      	lsls	r2, r3, #31
 8027aea:	d5dc      	bpl.n	8027aa6 <_dtoa_r+0x996>
 8027aec:	2b39      	cmp	r3, #57	; 0x39
 8027aee:	d1d8      	bne.n	8027aa2 <_dtoa_r+0x992>
 8027af0:	9a02      	ldr	r2, [sp, #8]
 8027af2:	2339      	movs	r3, #57	; 0x39
 8027af4:	7013      	strb	r3, [r2, #0]
 8027af6:	4643      	mov	r3, r8
 8027af8:	4698      	mov	r8, r3
 8027afa:	3b01      	subs	r3, #1
 8027afc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8027b00:	2a39      	cmp	r2, #57	; 0x39
 8027b02:	d051      	beq.n	8027ba8 <_dtoa_r+0xa98>
 8027b04:	3201      	adds	r2, #1
 8027b06:	701a      	strb	r2, [r3, #0]
 8027b08:	e745      	b.n	8027996 <_dtoa_r+0x886>
 8027b0a:	2a00      	cmp	r2, #0
 8027b0c:	dd03      	ble.n	8027b16 <_dtoa_r+0xa06>
 8027b0e:	2b39      	cmp	r3, #57	; 0x39
 8027b10:	d0ee      	beq.n	8027af0 <_dtoa_r+0x9e0>
 8027b12:	3301      	adds	r3, #1
 8027b14:	e7c7      	b.n	8027aa6 <_dtoa_r+0x996>
 8027b16:	9a05      	ldr	r2, [sp, #20]
 8027b18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027b1a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8027b1e:	428a      	cmp	r2, r1
 8027b20:	d02b      	beq.n	8027b7a <_dtoa_r+0xa6a>
 8027b22:	4629      	mov	r1, r5
 8027b24:	2300      	movs	r3, #0
 8027b26:	220a      	movs	r2, #10
 8027b28:	4630      	mov	r0, r6
 8027b2a:	f000 fe9f 	bl	802886c <__multadd>
 8027b2e:	45b9      	cmp	r9, r7
 8027b30:	4605      	mov	r5, r0
 8027b32:	f04f 0300 	mov.w	r3, #0
 8027b36:	f04f 020a 	mov.w	r2, #10
 8027b3a:	4649      	mov	r1, r9
 8027b3c:	4630      	mov	r0, r6
 8027b3e:	d107      	bne.n	8027b50 <_dtoa_r+0xa40>
 8027b40:	f000 fe94 	bl	802886c <__multadd>
 8027b44:	4681      	mov	r9, r0
 8027b46:	4607      	mov	r7, r0
 8027b48:	9b05      	ldr	r3, [sp, #20]
 8027b4a:	3301      	adds	r3, #1
 8027b4c:	9305      	str	r3, [sp, #20]
 8027b4e:	e774      	b.n	8027a3a <_dtoa_r+0x92a>
 8027b50:	f000 fe8c 	bl	802886c <__multadd>
 8027b54:	4639      	mov	r1, r7
 8027b56:	4681      	mov	r9, r0
 8027b58:	2300      	movs	r3, #0
 8027b5a:	220a      	movs	r2, #10
 8027b5c:	4630      	mov	r0, r6
 8027b5e:	f000 fe85 	bl	802886c <__multadd>
 8027b62:	4607      	mov	r7, r0
 8027b64:	e7f0      	b.n	8027b48 <_dtoa_r+0xa38>
 8027b66:	f1ba 0f00 	cmp.w	sl, #0
 8027b6a:	9a00      	ldr	r2, [sp, #0]
 8027b6c:	bfcc      	ite	gt
 8027b6e:	46d0      	movgt	r8, sl
 8027b70:	f04f 0801 	movle.w	r8, #1
 8027b74:	4490      	add	r8, r2
 8027b76:	f04f 0900 	mov.w	r9, #0
 8027b7a:	4629      	mov	r1, r5
 8027b7c:	2201      	movs	r2, #1
 8027b7e:	4630      	mov	r0, r6
 8027b80:	9302      	str	r3, [sp, #8]
 8027b82:	f001 f86d 	bl	8028c60 <__lshift>
 8027b86:	4621      	mov	r1, r4
 8027b88:	4605      	mov	r5, r0
 8027b8a:	f001 f8d5 	bl	8028d38 <__mcmp>
 8027b8e:	2800      	cmp	r0, #0
 8027b90:	dcb1      	bgt.n	8027af6 <_dtoa_r+0x9e6>
 8027b92:	d102      	bne.n	8027b9a <_dtoa_r+0xa8a>
 8027b94:	9b02      	ldr	r3, [sp, #8]
 8027b96:	07db      	lsls	r3, r3, #31
 8027b98:	d4ad      	bmi.n	8027af6 <_dtoa_r+0x9e6>
 8027b9a:	4643      	mov	r3, r8
 8027b9c:	4698      	mov	r8, r3
 8027b9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8027ba2:	2a30      	cmp	r2, #48	; 0x30
 8027ba4:	d0fa      	beq.n	8027b9c <_dtoa_r+0xa8c>
 8027ba6:	e6f6      	b.n	8027996 <_dtoa_r+0x886>
 8027ba8:	9a00      	ldr	r2, [sp, #0]
 8027baa:	429a      	cmp	r2, r3
 8027bac:	d1a4      	bne.n	8027af8 <_dtoa_r+0x9e8>
 8027bae:	f10b 0b01 	add.w	fp, fp, #1
 8027bb2:	2331      	movs	r3, #49	; 0x31
 8027bb4:	e778      	b.n	8027aa8 <_dtoa_r+0x998>
 8027bb6:	4b15      	ldr	r3, [pc, #84]	; (8027c0c <_dtoa_r+0xafc>)
 8027bb8:	f7ff bb12 	b.w	80271e0 <_dtoa_r+0xd0>
 8027bbc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027bbe:	2b00      	cmp	r3, #0
 8027bc0:	f47f aaee 	bne.w	80271a0 <_dtoa_r+0x90>
 8027bc4:	4b12      	ldr	r3, [pc, #72]	; (8027c10 <_dtoa_r+0xb00>)
 8027bc6:	f7ff bb0b 	b.w	80271e0 <_dtoa_r+0xd0>
 8027bca:	f1ba 0f00 	cmp.w	sl, #0
 8027bce:	dc03      	bgt.n	8027bd8 <_dtoa_r+0xac8>
 8027bd0:	9b07      	ldr	r3, [sp, #28]
 8027bd2:	2b02      	cmp	r3, #2
 8027bd4:	f73f aec7 	bgt.w	8027966 <_dtoa_r+0x856>
 8027bd8:	f8dd 8000 	ldr.w	r8, [sp]
 8027bdc:	4621      	mov	r1, r4
 8027bde:	4628      	mov	r0, r5
 8027be0:	f7ff fa0a 	bl	8026ff8 <quorem>
 8027be4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8027be8:	f808 3b01 	strb.w	r3, [r8], #1
 8027bec:	9a00      	ldr	r2, [sp, #0]
 8027bee:	eba8 0202 	sub.w	r2, r8, r2
 8027bf2:	4592      	cmp	sl, r2
 8027bf4:	ddb7      	ble.n	8027b66 <_dtoa_r+0xa56>
 8027bf6:	4629      	mov	r1, r5
 8027bf8:	2300      	movs	r3, #0
 8027bfa:	220a      	movs	r2, #10
 8027bfc:	4630      	mov	r0, r6
 8027bfe:	f000 fe35 	bl	802886c <__multadd>
 8027c02:	4605      	mov	r5, r0
 8027c04:	e7ea      	b.n	8027bdc <_dtoa_r+0xacc>
 8027c06:	bf00      	nop
 8027c08:	0802da34 	.word	0x0802da34
 8027c0c:	0802cb3a 	.word	0x0802cb3a
 8027c10:	0802d9b1 	.word	0x0802d9b1

08027c14 <__sflush_r>:
 8027c14:	898a      	ldrh	r2, [r1, #12]
 8027c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027c1a:	4605      	mov	r5, r0
 8027c1c:	0710      	lsls	r0, r2, #28
 8027c1e:	460c      	mov	r4, r1
 8027c20:	d458      	bmi.n	8027cd4 <__sflush_r+0xc0>
 8027c22:	684b      	ldr	r3, [r1, #4]
 8027c24:	2b00      	cmp	r3, #0
 8027c26:	dc05      	bgt.n	8027c34 <__sflush_r+0x20>
 8027c28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8027c2a:	2b00      	cmp	r3, #0
 8027c2c:	dc02      	bgt.n	8027c34 <__sflush_r+0x20>
 8027c2e:	2000      	movs	r0, #0
 8027c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027c36:	2e00      	cmp	r6, #0
 8027c38:	d0f9      	beq.n	8027c2e <__sflush_r+0x1a>
 8027c3a:	2300      	movs	r3, #0
 8027c3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027c40:	682f      	ldr	r7, [r5, #0]
 8027c42:	602b      	str	r3, [r5, #0]
 8027c44:	d032      	beq.n	8027cac <__sflush_r+0x98>
 8027c46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8027c48:	89a3      	ldrh	r3, [r4, #12]
 8027c4a:	075a      	lsls	r2, r3, #29
 8027c4c:	d505      	bpl.n	8027c5a <__sflush_r+0x46>
 8027c4e:	6863      	ldr	r3, [r4, #4]
 8027c50:	1ac0      	subs	r0, r0, r3
 8027c52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027c54:	b10b      	cbz	r3, 8027c5a <__sflush_r+0x46>
 8027c56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027c58:	1ac0      	subs	r0, r0, r3
 8027c5a:	2300      	movs	r3, #0
 8027c5c:	4602      	mov	r2, r0
 8027c5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027c60:	6a21      	ldr	r1, [r4, #32]
 8027c62:	4628      	mov	r0, r5
 8027c64:	47b0      	blx	r6
 8027c66:	1c43      	adds	r3, r0, #1
 8027c68:	89a3      	ldrh	r3, [r4, #12]
 8027c6a:	d106      	bne.n	8027c7a <__sflush_r+0x66>
 8027c6c:	6829      	ldr	r1, [r5, #0]
 8027c6e:	291d      	cmp	r1, #29
 8027c70:	d82c      	bhi.n	8027ccc <__sflush_r+0xb8>
 8027c72:	4a2a      	ldr	r2, [pc, #168]	; (8027d1c <__sflush_r+0x108>)
 8027c74:	40ca      	lsrs	r2, r1
 8027c76:	07d6      	lsls	r6, r2, #31
 8027c78:	d528      	bpl.n	8027ccc <__sflush_r+0xb8>
 8027c7a:	2200      	movs	r2, #0
 8027c7c:	6062      	str	r2, [r4, #4]
 8027c7e:	04d9      	lsls	r1, r3, #19
 8027c80:	6922      	ldr	r2, [r4, #16]
 8027c82:	6022      	str	r2, [r4, #0]
 8027c84:	d504      	bpl.n	8027c90 <__sflush_r+0x7c>
 8027c86:	1c42      	adds	r2, r0, #1
 8027c88:	d101      	bne.n	8027c8e <__sflush_r+0x7a>
 8027c8a:	682b      	ldr	r3, [r5, #0]
 8027c8c:	b903      	cbnz	r3, 8027c90 <__sflush_r+0x7c>
 8027c8e:	6560      	str	r0, [r4, #84]	; 0x54
 8027c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027c92:	602f      	str	r7, [r5, #0]
 8027c94:	2900      	cmp	r1, #0
 8027c96:	d0ca      	beq.n	8027c2e <__sflush_r+0x1a>
 8027c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027c9c:	4299      	cmp	r1, r3
 8027c9e:	d002      	beq.n	8027ca6 <__sflush_r+0x92>
 8027ca0:	4628      	mov	r0, r5
 8027ca2:	f7fd f943 	bl	8024f2c <_free_r>
 8027ca6:	2000      	movs	r0, #0
 8027ca8:	6360      	str	r0, [r4, #52]	; 0x34
 8027caa:	e7c1      	b.n	8027c30 <__sflush_r+0x1c>
 8027cac:	6a21      	ldr	r1, [r4, #32]
 8027cae:	2301      	movs	r3, #1
 8027cb0:	4628      	mov	r0, r5
 8027cb2:	47b0      	blx	r6
 8027cb4:	1c41      	adds	r1, r0, #1
 8027cb6:	d1c7      	bne.n	8027c48 <__sflush_r+0x34>
 8027cb8:	682b      	ldr	r3, [r5, #0]
 8027cba:	2b00      	cmp	r3, #0
 8027cbc:	d0c4      	beq.n	8027c48 <__sflush_r+0x34>
 8027cbe:	2b1d      	cmp	r3, #29
 8027cc0:	d001      	beq.n	8027cc6 <__sflush_r+0xb2>
 8027cc2:	2b16      	cmp	r3, #22
 8027cc4:	d101      	bne.n	8027cca <__sflush_r+0xb6>
 8027cc6:	602f      	str	r7, [r5, #0]
 8027cc8:	e7b1      	b.n	8027c2e <__sflush_r+0x1a>
 8027cca:	89a3      	ldrh	r3, [r4, #12]
 8027ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027cd0:	81a3      	strh	r3, [r4, #12]
 8027cd2:	e7ad      	b.n	8027c30 <__sflush_r+0x1c>
 8027cd4:	690f      	ldr	r7, [r1, #16]
 8027cd6:	2f00      	cmp	r7, #0
 8027cd8:	d0a9      	beq.n	8027c2e <__sflush_r+0x1a>
 8027cda:	0793      	lsls	r3, r2, #30
 8027cdc:	680e      	ldr	r6, [r1, #0]
 8027cde:	bf08      	it	eq
 8027ce0:	694b      	ldreq	r3, [r1, #20]
 8027ce2:	600f      	str	r7, [r1, #0]
 8027ce4:	bf18      	it	ne
 8027ce6:	2300      	movne	r3, #0
 8027ce8:	eba6 0807 	sub.w	r8, r6, r7
 8027cec:	608b      	str	r3, [r1, #8]
 8027cee:	f1b8 0f00 	cmp.w	r8, #0
 8027cf2:	dd9c      	ble.n	8027c2e <__sflush_r+0x1a>
 8027cf4:	6a21      	ldr	r1, [r4, #32]
 8027cf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8027cf8:	4643      	mov	r3, r8
 8027cfa:	463a      	mov	r2, r7
 8027cfc:	4628      	mov	r0, r5
 8027cfe:	47b0      	blx	r6
 8027d00:	2800      	cmp	r0, #0
 8027d02:	dc06      	bgt.n	8027d12 <__sflush_r+0xfe>
 8027d04:	89a3      	ldrh	r3, [r4, #12]
 8027d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027d0a:	81a3      	strh	r3, [r4, #12]
 8027d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8027d10:	e78e      	b.n	8027c30 <__sflush_r+0x1c>
 8027d12:	4407      	add	r7, r0
 8027d14:	eba8 0800 	sub.w	r8, r8, r0
 8027d18:	e7e9      	b.n	8027cee <__sflush_r+0xda>
 8027d1a:	bf00      	nop
 8027d1c:	20400001 	.word	0x20400001

08027d20 <_fflush_r>:
 8027d20:	b538      	push	{r3, r4, r5, lr}
 8027d22:	690b      	ldr	r3, [r1, #16]
 8027d24:	4605      	mov	r5, r0
 8027d26:	460c      	mov	r4, r1
 8027d28:	b913      	cbnz	r3, 8027d30 <_fflush_r+0x10>
 8027d2a:	2500      	movs	r5, #0
 8027d2c:	4628      	mov	r0, r5
 8027d2e:	bd38      	pop	{r3, r4, r5, pc}
 8027d30:	b118      	cbz	r0, 8027d3a <_fflush_r+0x1a>
 8027d32:	6983      	ldr	r3, [r0, #24]
 8027d34:	b90b      	cbnz	r3, 8027d3a <_fflush_r+0x1a>
 8027d36:	f000 f887 	bl	8027e48 <__sinit>
 8027d3a:	4b14      	ldr	r3, [pc, #80]	; (8027d8c <_fflush_r+0x6c>)
 8027d3c:	429c      	cmp	r4, r3
 8027d3e:	d11b      	bne.n	8027d78 <_fflush_r+0x58>
 8027d40:	686c      	ldr	r4, [r5, #4]
 8027d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027d46:	2b00      	cmp	r3, #0
 8027d48:	d0ef      	beq.n	8027d2a <_fflush_r+0xa>
 8027d4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027d4c:	07d0      	lsls	r0, r2, #31
 8027d4e:	d404      	bmi.n	8027d5a <_fflush_r+0x3a>
 8027d50:	0599      	lsls	r1, r3, #22
 8027d52:	d402      	bmi.n	8027d5a <_fflush_r+0x3a>
 8027d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027d56:	f000 fc88 	bl	802866a <__retarget_lock_acquire_recursive>
 8027d5a:	4628      	mov	r0, r5
 8027d5c:	4621      	mov	r1, r4
 8027d5e:	f7ff ff59 	bl	8027c14 <__sflush_r>
 8027d62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027d64:	07da      	lsls	r2, r3, #31
 8027d66:	4605      	mov	r5, r0
 8027d68:	d4e0      	bmi.n	8027d2c <_fflush_r+0xc>
 8027d6a:	89a3      	ldrh	r3, [r4, #12]
 8027d6c:	059b      	lsls	r3, r3, #22
 8027d6e:	d4dd      	bmi.n	8027d2c <_fflush_r+0xc>
 8027d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027d72:	f000 fc7c 	bl	802866e <__retarget_lock_release_recursive>
 8027d76:	e7d9      	b.n	8027d2c <_fflush_r+0xc>
 8027d78:	4b05      	ldr	r3, [pc, #20]	; (8027d90 <_fflush_r+0x70>)
 8027d7a:	429c      	cmp	r4, r3
 8027d7c:	d101      	bne.n	8027d82 <_fflush_r+0x62>
 8027d7e:	68ac      	ldr	r4, [r5, #8]
 8027d80:	e7df      	b.n	8027d42 <_fflush_r+0x22>
 8027d82:	4b04      	ldr	r3, [pc, #16]	; (8027d94 <_fflush_r+0x74>)
 8027d84:	429c      	cmp	r4, r3
 8027d86:	bf08      	it	eq
 8027d88:	68ec      	ldreq	r4, [r5, #12]
 8027d8a:	e7da      	b.n	8027d42 <_fflush_r+0x22>
 8027d8c:	0802da68 	.word	0x0802da68
 8027d90:	0802da88 	.word	0x0802da88
 8027d94:	0802da48 	.word	0x0802da48

08027d98 <std>:
 8027d98:	2300      	movs	r3, #0
 8027d9a:	b510      	push	{r4, lr}
 8027d9c:	4604      	mov	r4, r0
 8027d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8027da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8027da6:	6083      	str	r3, [r0, #8]
 8027da8:	8181      	strh	r1, [r0, #12]
 8027daa:	6643      	str	r3, [r0, #100]	; 0x64
 8027dac:	81c2      	strh	r2, [r0, #14]
 8027dae:	6183      	str	r3, [r0, #24]
 8027db0:	4619      	mov	r1, r3
 8027db2:	2208      	movs	r2, #8
 8027db4:	305c      	adds	r0, #92	; 0x5c
 8027db6:	f7fd f8b1 	bl	8024f1c <memset>
 8027dba:	4b05      	ldr	r3, [pc, #20]	; (8027dd0 <std+0x38>)
 8027dbc:	6263      	str	r3, [r4, #36]	; 0x24
 8027dbe:	4b05      	ldr	r3, [pc, #20]	; (8027dd4 <std+0x3c>)
 8027dc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8027dc2:	4b05      	ldr	r3, [pc, #20]	; (8027dd8 <std+0x40>)
 8027dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8027dc6:	4b05      	ldr	r3, [pc, #20]	; (8027ddc <std+0x44>)
 8027dc8:	6224      	str	r4, [r4, #32]
 8027dca:	6323      	str	r3, [r4, #48]	; 0x30
 8027dcc:	bd10      	pop	{r4, pc}
 8027dce:	bf00      	nop
 8027dd0:	08029451 	.word	0x08029451
 8027dd4:	08029473 	.word	0x08029473
 8027dd8:	080294ab 	.word	0x080294ab
 8027ddc:	080294cf 	.word	0x080294cf

08027de0 <_cleanup_r>:
 8027de0:	4901      	ldr	r1, [pc, #4]	; (8027de8 <_cleanup_r+0x8>)
 8027de2:	f000 b8af 	b.w	8027f44 <_fwalk_reent>
 8027de6:	bf00      	nop
 8027de8:	08027d21 	.word	0x08027d21

08027dec <__sfmoreglue>:
 8027dec:	b570      	push	{r4, r5, r6, lr}
 8027dee:	1e4a      	subs	r2, r1, #1
 8027df0:	2568      	movs	r5, #104	; 0x68
 8027df2:	4355      	muls	r5, r2
 8027df4:	460e      	mov	r6, r1
 8027df6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8027dfa:	f7fd f8e7 	bl	8024fcc <_malloc_r>
 8027dfe:	4604      	mov	r4, r0
 8027e00:	b140      	cbz	r0, 8027e14 <__sfmoreglue+0x28>
 8027e02:	2100      	movs	r1, #0
 8027e04:	e9c0 1600 	strd	r1, r6, [r0]
 8027e08:	300c      	adds	r0, #12
 8027e0a:	60a0      	str	r0, [r4, #8]
 8027e0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8027e10:	f7fd f884 	bl	8024f1c <memset>
 8027e14:	4620      	mov	r0, r4
 8027e16:	bd70      	pop	{r4, r5, r6, pc}

08027e18 <__sfp_lock_acquire>:
 8027e18:	4801      	ldr	r0, [pc, #4]	; (8027e20 <__sfp_lock_acquire+0x8>)
 8027e1a:	f000 bc26 	b.w	802866a <__retarget_lock_acquire_recursive>
 8027e1e:	bf00      	nop
 8027e20:	20056dc8 	.word	0x20056dc8

08027e24 <__sfp_lock_release>:
 8027e24:	4801      	ldr	r0, [pc, #4]	; (8027e2c <__sfp_lock_release+0x8>)
 8027e26:	f000 bc22 	b.w	802866e <__retarget_lock_release_recursive>
 8027e2a:	bf00      	nop
 8027e2c:	20056dc8 	.word	0x20056dc8

08027e30 <__sinit_lock_acquire>:
 8027e30:	4801      	ldr	r0, [pc, #4]	; (8027e38 <__sinit_lock_acquire+0x8>)
 8027e32:	f000 bc1a 	b.w	802866a <__retarget_lock_acquire_recursive>
 8027e36:	bf00      	nop
 8027e38:	20056dc3 	.word	0x20056dc3

08027e3c <__sinit_lock_release>:
 8027e3c:	4801      	ldr	r0, [pc, #4]	; (8027e44 <__sinit_lock_release+0x8>)
 8027e3e:	f000 bc16 	b.w	802866e <__retarget_lock_release_recursive>
 8027e42:	bf00      	nop
 8027e44:	20056dc3 	.word	0x20056dc3

08027e48 <__sinit>:
 8027e48:	b510      	push	{r4, lr}
 8027e4a:	4604      	mov	r4, r0
 8027e4c:	f7ff fff0 	bl	8027e30 <__sinit_lock_acquire>
 8027e50:	69a3      	ldr	r3, [r4, #24]
 8027e52:	b11b      	cbz	r3, 8027e5c <__sinit+0x14>
 8027e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027e58:	f7ff bff0 	b.w	8027e3c <__sinit_lock_release>
 8027e5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8027e60:	6523      	str	r3, [r4, #80]	; 0x50
 8027e62:	4b13      	ldr	r3, [pc, #76]	; (8027eb0 <__sinit+0x68>)
 8027e64:	4a13      	ldr	r2, [pc, #76]	; (8027eb4 <__sinit+0x6c>)
 8027e66:	681b      	ldr	r3, [r3, #0]
 8027e68:	62a2      	str	r2, [r4, #40]	; 0x28
 8027e6a:	42a3      	cmp	r3, r4
 8027e6c:	bf04      	itt	eq
 8027e6e:	2301      	moveq	r3, #1
 8027e70:	61a3      	streq	r3, [r4, #24]
 8027e72:	4620      	mov	r0, r4
 8027e74:	f000 f820 	bl	8027eb8 <__sfp>
 8027e78:	6060      	str	r0, [r4, #4]
 8027e7a:	4620      	mov	r0, r4
 8027e7c:	f000 f81c 	bl	8027eb8 <__sfp>
 8027e80:	60a0      	str	r0, [r4, #8]
 8027e82:	4620      	mov	r0, r4
 8027e84:	f000 f818 	bl	8027eb8 <__sfp>
 8027e88:	2200      	movs	r2, #0
 8027e8a:	60e0      	str	r0, [r4, #12]
 8027e8c:	2104      	movs	r1, #4
 8027e8e:	6860      	ldr	r0, [r4, #4]
 8027e90:	f7ff ff82 	bl	8027d98 <std>
 8027e94:	68a0      	ldr	r0, [r4, #8]
 8027e96:	2201      	movs	r2, #1
 8027e98:	2109      	movs	r1, #9
 8027e9a:	f7ff ff7d 	bl	8027d98 <std>
 8027e9e:	68e0      	ldr	r0, [r4, #12]
 8027ea0:	2202      	movs	r2, #2
 8027ea2:	2112      	movs	r1, #18
 8027ea4:	f7ff ff78 	bl	8027d98 <std>
 8027ea8:	2301      	movs	r3, #1
 8027eaa:	61a3      	str	r3, [r4, #24]
 8027eac:	e7d2      	b.n	8027e54 <__sinit+0xc>
 8027eae:	bf00      	nop
 8027eb0:	0802d810 	.word	0x0802d810
 8027eb4:	08027de1 	.word	0x08027de1

08027eb8 <__sfp>:
 8027eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027eba:	4607      	mov	r7, r0
 8027ebc:	f7ff ffac 	bl	8027e18 <__sfp_lock_acquire>
 8027ec0:	4b1e      	ldr	r3, [pc, #120]	; (8027f3c <__sfp+0x84>)
 8027ec2:	681e      	ldr	r6, [r3, #0]
 8027ec4:	69b3      	ldr	r3, [r6, #24]
 8027ec6:	b913      	cbnz	r3, 8027ece <__sfp+0x16>
 8027ec8:	4630      	mov	r0, r6
 8027eca:	f7ff ffbd 	bl	8027e48 <__sinit>
 8027ece:	3648      	adds	r6, #72	; 0x48
 8027ed0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8027ed4:	3b01      	subs	r3, #1
 8027ed6:	d503      	bpl.n	8027ee0 <__sfp+0x28>
 8027ed8:	6833      	ldr	r3, [r6, #0]
 8027eda:	b30b      	cbz	r3, 8027f20 <__sfp+0x68>
 8027edc:	6836      	ldr	r6, [r6, #0]
 8027ede:	e7f7      	b.n	8027ed0 <__sfp+0x18>
 8027ee0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8027ee4:	b9d5      	cbnz	r5, 8027f1c <__sfp+0x64>
 8027ee6:	4b16      	ldr	r3, [pc, #88]	; (8027f40 <__sfp+0x88>)
 8027ee8:	60e3      	str	r3, [r4, #12]
 8027eea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8027eee:	6665      	str	r5, [r4, #100]	; 0x64
 8027ef0:	f000 fbba 	bl	8028668 <__retarget_lock_init_recursive>
 8027ef4:	f7ff ff96 	bl	8027e24 <__sfp_lock_release>
 8027ef8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8027efc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8027f00:	6025      	str	r5, [r4, #0]
 8027f02:	61a5      	str	r5, [r4, #24]
 8027f04:	2208      	movs	r2, #8
 8027f06:	4629      	mov	r1, r5
 8027f08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8027f0c:	f7fd f806 	bl	8024f1c <memset>
 8027f10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8027f14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8027f18:	4620      	mov	r0, r4
 8027f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027f1c:	3468      	adds	r4, #104	; 0x68
 8027f1e:	e7d9      	b.n	8027ed4 <__sfp+0x1c>
 8027f20:	2104      	movs	r1, #4
 8027f22:	4638      	mov	r0, r7
 8027f24:	f7ff ff62 	bl	8027dec <__sfmoreglue>
 8027f28:	4604      	mov	r4, r0
 8027f2a:	6030      	str	r0, [r6, #0]
 8027f2c:	2800      	cmp	r0, #0
 8027f2e:	d1d5      	bne.n	8027edc <__sfp+0x24>
 8027f30:	f7ff ff78 	bl	8027e24 <__sfp_lock_release>
 8027f34:	230c      	movs	r3, #12
 8027f36:	603b      	str	r3, [r7, #0]
 8027f38:	e7ee      	b.n	8027f18 <__sfp+0x60>
 8027f3a:	bf00      	nop
 8027f3c:	0802d810 	.word	0x0802d810
 8027f40:	ffff0001 	.word	0xffff0001

08027f44 <_fwalk_reent>:
 8027f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027f48:	4606      	mov	r6, r0
 8027f4a:	4688      	mov	r8, r1
 8027f4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8027f50:	2700      	movs	r7, #0
 8027f52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8027f56:	f1b9 0901 	subs.w	r9, r9, #1
 8027f5a:	d505      	bpl.n	8027f68 <_fwalk_reent+0x24>
 8027f5c:	6824      	ldr	r4, [r4, #0]
 8027f5e:	2c00      	cmp	r4, #0
 8027f60:	d1f7      	bne.n	8027f52 <_fwalk_reent+0xe>
 8027f62:	4638      	mov	r0, r7
 8027f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027f68:	89ab      	ldrh	r3, [r5, #12]
 8027f6a:	2b01      	cmp	r3, #1
 8027f6c:	d907      	bls.n	8027f7e <_fwalk_reent+0x3a>
 8027f6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8027f72:	3301      	adds	r3, #1
 8027f74:	d003      	beq.n	8027f7e <_fwalk_reent+0x3a>
 8027f76:	4629      	mov	r1, r5
 8027f78:	4630      	mov	r0, r6
 8027f7a:	47c0      	blx	r8
 8027f7c:	4307      	orrs	r7, r0
 8027f7e:	3568      	adds	r5, #104	; 0x68
 8027f80:	e7e9      	b.n	8027f56 <_fwalk_reent+0x12>

08027f82 <rshift>:
 8027f82:	6903      	ldr	r3, [r0, #16]
 8027f84:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8027f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027f8c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8027f90:	f100 0414 	add.w	r4, r0, #20
 8027f94:	dd45      	ble.n	8028022 <rshift+0xa0>
 8027f96:	f011 011f 	ands.w	r1, r1, #31
 8027f9a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8027f9e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8027fa2:	d10c      	bne.n	8027fbe <rshift+0x3c>
 8027fa4:	f100 0710 	add.w	r7, r0, #16
 8027fa8:	4629      	mov	r1, r5
 8027faa:	42b1      	cmp	r1, r6
 8027fac:	d334      	bcc.n	8028018 <rshift+0x96>
 8027fae:	1a9b      	subs	r3, r3, r2
 8027fb0:	009b      	lsls	r3, r3, #2
 8027fb2:	1eea      	subs	r2, r5, #3
 8027fb4:	4296      	cmp	r6, r2
 8027fb6:	bf38      	it	cc
 8027fb8:	2300      	movcc	r3, #0
 8027fba:	4423      	add	r3, r4
 8027fbc:	e015      	b.n	8027fea <rshift+0x68>
 8027fbe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8027fc2:	f1c1 0820 	rsb	r8, r1, #32
 8027fc6:	40cf      	lsrs	r7, r1
 8027fc8:	f105 0e04 	add.w	lr, r5, #4
 8027fcc:	46a1      	mov	r9, r4
 8027fce:	4576      	cmp	r6, lr
 8027fd0:	46f4      	mov	ip, lr
 8027fd2:	d815      	bhi.n	8028000 <rshift+0x7e>
 8027fd4:	1a9b      	subs	r3, r3, r2
 8027fd6:	009a      	lsls	r2, r3, #2
 8027fd8:	3a04      	subs	r2, #4
 8027fda:	3501      	adds	r5, #1
 8027fdc:	42ae      	cmp	r6, r5
 8027fde:	bf38      	it	cc
 8027fe0:	2200      	movcc	r2, #0
 8027fe2:	18a3      	adds	r3, r4, r2
 8027fe4:	50a7      	str	r7, [r4, r2]
 8027fe6:	b107      	cbz	r7, 8027fea <rshift+0x68>
 8027fe8:	3304      	adds	r3, #4
 8027fea:	1b1a      	subs	r2, r3, r4
 8027fec:	42a3      	cmp	r3, r4
 8027fee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8027ff2:	bf08      	it	eq
 8027ff4:	2300      	moveq	r3, #0
 8027ff6:	6102      	str	r2, [r0, #16]
 8027ff8:	bf08      	it	eq
 8027ffa:	6143      	streq	r3, [r0, #20]
 8027ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028000:	f8dc c000 	ldr.w	ip, [ip]
 8028004:	fa0c fc08 	lsl.w	ip, ip, r8
 8028008:	ea4c 0707 	orr.w	r7, ip, r7
 802800c:	f849 7b04 	str.w	r7, [r9], #4
 8028010:	f85e 7b04 	ldr.w	r7, [lr], #4
 8028014:	40cf      	lsrs	r7, r1
 8028016:	e7da      	b.n	8027fce <rshift+0x4c>
 8028018:	f851 cb04 	ldr.w	ip, [r1], #4
 802801c:	f847 cf04 	str.w	ip, [r7, #4]!
 8028020:	e7c3      	b.n	8027faa <rshift+0x28>
 8028022:	4623      	mov	r3, r4
 8028024:	e7e1      	b.n	8027fea <rshift+0x68>

08028026 <__hexdig_fun>:
 8028026:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802802a:	2b09      	cmp	r3, #9
 802802c:	d802      	bhi.n	8028034 <__hexdig_fun+0xe>
 802802e:	3820      	subs	r0, #32
 8028030:	b2c0      	uxtb	r0, r0
 8028032:	4770      	bx	lr
 8028034:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8028038:	2b05      	cmp	r3, #5
 802803a:	d801      	bhi.n	8028040 <__hexdig_fun+0x1a>
 802803c:	3847      	subs	r0, #71	; 0x47
 802803e:	e7f7      	b.n	8028030 <__hexdig_fun+0xa>
 8028040:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8028044:	2b05      	cmp	r3, #5
 8028046:	d801      	bhi.n	802804c <__hexdig_fun+0x26>
 8028048:	3827      	subs	r0, #39	; 0x27
 802804a:	e7f1      	b.n	8028030 <__hexdig_fun+0xa>
 802804c:	2000      	movs	r0, #0
 802804e:	4770      	bx	lr

08028050 <__gethex>:
 8028050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028054:	ed2d 8b02 	vpush	{d8}
 8028058:	b089      	sub	sp, #36	; 0x24
 802805a:	ee08 0a10 	vmov	s16, r0
 802805e:	9304      	str	r3, [sp, #16]
 8028060:	4bbc      	ldr	r3, [pc, #752]	; (8028354 <__gethex+0x304>)
 8028062:	681b      	ldr	r3, [r3, #0]
 8028064:	9301      	str	r3, [sp, #4]
 8028066:	4618      	mov	r0, r3
 8028068:	468b      	mov	fp, r1
 802806a:	4690      	mov	r8, r2
 802806c:	f7d8 f8e8 	bl	8000240 <strlen>
 8028070:	9b01      	ldr	r3, [sp, #4]
 8028072:	f8db 2000 	ldr.w	r2, [fp]
 8028076:	4403      	add	r3, r0
 8028078:	4682      	mov	sl, r0
 802807a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802807e:	9305      	str	r3, [sp, #20]
 8028080:	1c93      	adds	r3, r2, #2
 8028082:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8028086:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802808a:	32fe      	adds	r2, #254	; 0xfe
 802808c:	18d1      	adds	r1, r2, r3
 802808e:	461f      	mov	r7, r3
 8028090:	f813 0b01 	ldrb.w	r0, [r3], #1
 8028094:	9100      	str	r1, [sp, #0]
 8028096:	2830      	cmp	r0, #48	; 0x30
 8028098:	d0f8      	beq.n	802808c <__gethex+0x3c>
 802809a:	f7ff ffc4 	bl	8028026 <__hexdig_fun>
 802809e:	4604      	mov	r4, r0
 80280a0:	2800      	cmp	r0, #0
 80280a2:	d13a      	bne.n	802811a <__gethex+0xca>
 80280a4:	9901      	ldr	r1, [sp, #4]
 80280a6:	4652      	mov	r2, sl
 80280a8:	4638      	mov	r0, r7
 80280aa:	f001 fa14 	bl	80294d6 <strncmp>
 80280ae:	4605      	mov	r5, r0
 80280b0:	2800      	cmp	r0, #0
 80280b2:	d168      	bne.n	8028186 <__gethex+0x136>
 80280b4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80280b8:	eb07 060a 	add.w	r6, r7, sl
 80280bc:	f7ff ffb3 	bl	8028026 <__hexdig_fun>
 80280c0:	2800      	cmp	r0, #0
 80280c2:	d062      	beq.n	802818a <__gethex+0x13a>
 80280c4:	4633      	mov	r3, r6
 80280c6:	7818      	ldrb	r0, [r3, #0]
 80280c8:	2830      	cmp	r0, #48	; 0x30
 80280ca:	461f      	mov	r7, r3
 80280cc:	f103 0301 	add.w	r3, r3, #1
 80280d0:	d0f9      	beq.n	80280c6 <__gethex+0x76>
 80280d2:	f7ff ffa8 	bl	8028026 <__hexdig_fun>
 80280d6:	2301      	movs	r3, #1
 80280d8:	fab0 f480 	clz	r4, r0
 80280dc:	0964      	lsrs	r4, r4, #5
 80280de:	4635      	mov	r5, r6
 80280e0:	9300      	str	r3, [sp, #0]
 80280e2:	463a      	mov	r2, r7
 80280e4:	4616      	mov	r6, r2
 80280e6:	3201      	adds	r2, #1
 80280e8:	7830      	ldrb	r0, [r6, #0]
 80280ea:	f7ff ff9c 	bl	8028026 <__hexdig_fun>
 80280ee:	2800      	cmp	r0, #0
 80280f0:	d1f8      	bne.n	80280e4 <__gethex+0x94>
 80280f2:	9901      	ldr	r1, [sp, #4]
 80280f4:	4652      	mov	r2, sl
 80280f6:	4630      	mov	r0, r6
 80280f8:	f001 f9ed 	bl	80294d6 <strncmp>
 80280fc:	b980      	cbnz	r0, 8028120 <__gethex+0xd0>
 80280fe:	b94d      	cbnz	r5, 8028114 <__gethex+0xc4>
 8028100:	eb06 050a 	add.w	r5, r6, sl
 8028104:	462a      	mov	r2, r5
 8028106:	4616      	mov	r6, r2
 8028108:	3201      	adds	r2, #1
 802810a:	7830      	ldrb	r0, [r6, #0]
 802810c:	f7ff ff8b 	bl	8028026 <__hexdig_fun>
 8028110:	2800      	cmp	r0, #0
 8028112:	d1f8      	bne.n	8028106 <__gethex+0xb6>
 8028114:	1bad      	subs	r5, r5, r6
 8028116:	00ad      	lsls	r5, r5, #2
 8028118:	e004      	b.n	8028124 <__gethex+0xd4>
 802811a:	2400      	movs	r4, #0
 802811c:	4625      	mov	r5, r4
 802811e:	e7e0      	b.n	80280e2 <__gethex+0x92>
 8028120:	2d00      	cmp	r5, #0
 8028122:	d1f7      	bne.n	8028114 <__gethex+0xc4>
 8028124:	7833      	ldrb	r3, [r6, #0]
 8028126:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802812a:	2b50      	cmp	r3, #80	; 0x50
 802812c:	d13b      	bne.n	80281a6 <__gethex+0x156>
 802812e:	7873      	ldrb	r3, [r6, #1]
 8028130:	2b2b      	cmp	r3, #43	; 0x2b
 8028132:	d02c      	beq.n	802818e <__gethex+0x13e>
 8028134:	2b2d      	cmp	r3, #45	; 0x2d
 8028136:	d02e      	beq.n	8028196 <__gethex+0x146>
 8028138:	1c71      	adds	r1, r6, #1
 802813a:	f04f 0900 	mov.w	r9, #0
 802813e:	7808      	ldrb	r0, [r1, #0]
 8028140:	f7ff ff71 	bl	8028026 <__hexdig_fun>
 8028144:	1e43      	subs	r3, r0, #1
 8028146:	b2db      	uxtb	r3, r3
 8028148:	2b18      	cmp	r3, #24
 802814a:	d82c      	bhi.n	80281a6 <__gethex+0x156>
 802814c:	f1a0 0210 	sub.w	r2, r0, #16
 8028150:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8028154:	f7ff ff67 	bl	8028026 <__hexdig_fun>
 8028158:	1e43      	subs	r3, r0, #1
 802815a:	b2db      	uxtb	r3, r3
 802815c:	2b18      	cmp	r3, #24
 802815e:	d91d      	bls.n	802819c <__gethex+0x14c>
 8028160:	f1b9 0f00 	cmp.w	r9, #0
 8028164:	d000      	beq.n	8028168 <__gethex+0x118>
 8028166:	4252      	negs	r2, r2
 8028168:	4415      	add	r5, r2
 802816a:	f8cb 1000 	str.w	r1, [fp]
 802816e:	b1e4      	cbz	r4, 80281aa <__gethex+0x15a>
 8028170:	9b00      	ldr	r3, [sp, #0]
 8028172:	2b00      	cmp	r3, #0
 8028174:	bf14      	ite	ne
 8028176:	2700      	movne	r7, #0
 8028178:	2706      	moveq	r7, #6
 802817a:	4638      	mov	r0, r7
 802817c:	b009      	add	sp, #36	; 0x24
 802817e:	ecbd 8b02 	vpop	{d8}
 8028182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028186:	463e      	mov	r6, r7
 8028188:	4625      	mov	r5, r4
 802818a:	2401      	movs	r4, #1
 802818c:	e7ca      	b.n	8028124 <__gethex+0xd4>
 802818e:	f04f 0900 	mov.w	r9, #0
 8028192:	1cb1      	adds	r1, r6, #2
 8028194:	e7d3      	b.n	802813e <__gethex+0xee>
 8028196:	f04f 0901 	mov.w	r9, #1
 802819a:	e7fa      	b.n	8028192 <__gethex+0x142>
 802819c:	230a      	movs	r3, #10
 802819e:	fb03 0202 	mla	r2, r3, r2, r0
 80281a2:	3a10      	subs	r2, #16
 80281a4:	e7d4      	b.n	8028150 <__gethex+0x100>
 80281a6:	4631      	mov	r1, r6
 80281a8:	e7df      	b.n	802816a <__gethex+0x11a>
 80281aa:	1bf3      	subs	r3, r6, r7
 80281ac:	3b01      	subs	r3, #1
 80281ae:	4621      	mov	r1, r4
 80281b0:	2b07      	cmp	r3, #7
 80281b2:	dc0b      	bgt.n	80281cc <__gethex+0x17c>
 80281b4:	ee18 0a10 	vmov	r0, s16
 80281b8:	f000 faf6 	bl	80287a8 <_Balloc>
 80281bc:	4604      	mov	r4, r0
 80281be:	b940      	cbnz	r0, 80281d2 <__gethex+0x182>
 80281c0:	4b65      	ldr	r3, [pc, #404]	; (8028358 <__gethex+0x308>)
 80281c2:	4602      	mov	r2, r0
 80281c4:	21de      	movs	r1, #222	; 0xde
 80281c6:	4865      	ldr	r0, [pc, #404]	; (802835c <__gethex+0x30c>)
 80281c8:	f7fc fe1c 	bl	8024e04 <__assert_func>
 80281cc:	3101      	adds	r1, #1
 80281ce:	105b      	asrs	r3, r3, #1
 80281d0:	e7ee      	b.n	80281b0 <__gethex+0x160>
 80281d2:	f100 0914 	add.w	r9, r0, #20
 80281d6:	f04f 0b00 	mov.w	fp, #0
 80281da:	f1ca 0301 	rsb	r3, sl, #1
 80281de:	f8cd 9008 	str.w	r9, [sp, #8]
 80281e2:	f8cd b000 	str.w	fp, [sp]
 80281e6:	9306      	str	r3, [sp, #24]
 80281e8:	42b7      	cmp	r7, r6
 80281ea:	d340      	bcc.n	802826e <__gethex+0x21e>
 80281ec:	9802      	ldr	r0, [sp, #8]
 80281ee:	9b00      	ldr	r3, [sp, #0]
 80281f0:	f840 3b04 	str.w	r3, [r0], #4
 80281f4:	eba0 0009 	sub.w	r0, r0, r9
 80281f8:	1080      	asrs	r0, r0, #2
 80281fa:	0146      	lsls	r6, r0, #5
 80281fc:	6120      	str	r0, [r4, #16]
 80281fe:	4618      	mov	r0, r3
 8028200:	f000 fbc8 	bl	8028994 <__hi0bits>
 8028204:	1a30      	subs	r0, r6, r0
 8028206:	f8d8 6000 	ldr.w	r6, [r8]
 802820a:	42b0      	cmp	r0, r6
 802820c:	dd63      	ble.n	80282d6 <__gethex+0x286>
 802820e:	1b87      	subs	r7, r0, r6
 8028210:	4639      	mov	r1, r7
 8028212:	4620      	mov	r0, r4
 8028214:	f000 ff63 	bl	80290de <__any_on>
 8028218:	4682      	mov	sl, r0
 802821a:	b1a8      	cbz	r0, 8028248 <__gethex+0x1f8>
 802821c:	1e7b      	subs	r3, r7, #1
 802821e:	1159      	asrs	r1, r3, #5
 8028220:	f003 021f 	and.w	r2, r3, #31
 8028224:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8028228:	f04f 0a01 	mov.w	sl, #1
 802822c:	fa0a f202 	lsl.w	r2, sl, r2
 8028230:	420a      	tst	r2, r1
 8028232:	d009      	beq.n	8028248 <__gethex+0x1f8>
 8028234:	4553      	cmp	r3, sl
 8028236:	dd05      	ble.n	8028244 <__gethex+0x1f4>
 8028238:	1eb9      	subs	r1, r7, #2
 802823a:	4620      	mov	r0, r4
 802823c:	f000 ff4f 	bl	80290de <__any_on>
 8028240:	2800      	cmp	r0, #0
 8028242:	d145      	bne.n	80282d0 <__gethex+0x280>
 8028244:	f04f 0a02 	mov.w	sl, #2
 8028248:	4639      	mov	r1, r7
 802824a:	4620      	mov	r0, r4
 802824c:	f7ff fe99 	bl	8027f82 <rshift>
 8028250:	443d      	add	r5, r7
 8028252:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028256:	42ab      	cmp	r3, r5
 8028258:	da4c      	bge.n	80282f4 <__gethex+0x2a4>
 802825a:	ee18 0a10 	vmov	r0, s16
 802825e:	4621      	mov	r1, r4
 8028260:	f000 fae2 	bl	8028828 <_Bfree>
 8028264:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028266:	2300      	movs	r3, #0
 8028268:	6013      	str	r3, [r2, #0]
 802826a:	27a3      	movs	r7, #163	; 0xa3
 802826c:	e785      	b.n	802817a <__gethex+0x12a>
 802826e:	1e73      	subs	r3, r6, #1
 8028270:	9a05      	ldr	r2, [sp, #20]
 8028272:	9303      	str	r3, [sp, #12]
 8028274:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8028278:	4293      	cmp	r3, r2
 802827a:	d019      	beq.n	80282b0 <__gethex+0x260>
 802827c:	f1bb 0f20 	cmp.w	fp, #32
 8028280:	d107      	bne.n	8028292 <__gethex+0x242>
 8028282:	9b02      	ldr	r3, [sp, #8]
 8028284:	9a00      	ldr	r2, [sp, #0]
 8028286:	f843 2b04 	str.w	r2, [r3], #4
 802828a:	9302      	str	r3, [sp, #8]
 802828c:	2300      	movs	r3, #0
 802828e:	9300      	str	r3, [sp, #0]
 8028290:	469b      	mov	fp, r3
 8028292:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8028296:	f7ff fec6 	bl	8028026 <__hexdig_fun>
 802829a:	9b00      	ldr	r3, [sp, #0]
 802829c:	f000 000f 	and.w	r0, r0, #15
 80282a0:	fa00 f00b 	lsl.w	r0, r0, fp
 80282a4:	4303      	orrs	r3, r0
 80282a6:	9300      	str	r3, [sp, #0]
 80282a8:	f10b 0b04 	add.w	fp, fp, #4
 80282ac:	9b03      	ldr	r3, [sp, #12]
 80282ae:	e00d      	b.n	80282cc <__gethex+0x27c>
 80282b0:	9b03      	ldr	r3, [sp, #12]
 80282b2:	9a06      	ldr	r2, [sp, #24]
 80282b4:	4413      	add	r3, r2
 80282b6:	42bb      	cmp	r3, r7
 80282b8:	d3e0      	bcc.n	802827c <__gethex+0x22c>
 80282ba:	4618      	mov	r0, r3
 80282bc:	9901      	ldr	r1, [sp, #4]
 80282be:	9307      	str	r3, [sp, #28]
 80282c0:	4652      	mov	r2, sl
 80282c2:	f001 f908 	bl	80294d6 <strncmp>
 80282c6:	9b07      	ldr	r3, [sp, #28]
 80282c8:	2800      	cmp	r0, #0
 80282ca:	d1d7      	bne.n	802827c <__gethex+0x22c>
 80282cc:	461e      	mov	r6, r3
 80282ce:	e78b      	b.n	80281e8 <__gethex+0x198>
 80282d0:	f04f 0a03 	mov.w	sl, #3
 80282d4:	e7b8      	b.n	8028248 <__gethex+0x1f8>
 80282d6:	da0a      	bge.n	80282ee <__gethex+0x29e>
 80282d8:	1a37      	subs	r7, r6, r0
 80282da:	4621      	mov	r1, r4
 80282dc:	ee18 0a10 	vmov	r0, s16
 80282e0:	463a      	mov	r2, r7
 80282e2:	f000 fcbd 	bl	8028c60 <__lshift>
 80282e6:	1bed      	subs	r5, r5, r7
 80282e8:	4604      	mov	r4, r0
 80282ea:	f100 0914 	add.w	r9, r0, #20
 80282ee:	f04f 0a00 	mov.w	sl, #0
 80282f2:	e7ae      	b.n	8028252 <__gethex+0x202>
 80282f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80282f8:	42a8      	cmp	r0, r5
 80282fa:	dd72      	ble.n	80283e2 <__gethex+0x392>
 80282fc:	1b45      	subs	r5, r0, r5
 80282fe:	42ae      	cmp	r6, r5
 8028300:	dc36      	bgt.n	8028370 <__gethex+0x320>
 8028302:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8028306:	2b02      	cmp	r3, #2
 8028308:	d02a      	beq.n	8028360 <__gethex+0x310>
 802830a:	2b03      	cmp	r3, #3
 802830c:	d02c      	beq.n	8028368 <__gethex+0x318>
 802830e:	2b01      	cmp	r3, #1
 8028310:	d115      	bne.n	802833e <__gethex+0x2ee>
 8028312:	42ae      	cmp	r6, r5
 8028314:	d113      	bne.n	802833e <__gethex+0x2ee>
 8028316:	2e01      	cmp	r6, #1
 8028318:	d10b      	bne.n	8028332 <__gethex+0x2e2>
 802831a:	9a04      	ldr	r2, [sp, #16]
 802831c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8028320:	6013      	str	r3, [r2, #0]
 8028322:	2301      	movs	r3, #1
 8028324:	6123      	str	r3, [r4, #16]
 8028326:	f8c9 3000 	str.w	r3, [r9]
 802832a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802832c:	2762      	movs	r7, #98	; 0x62
 802832e:	601c      	str	r4, [r3, #0]
 8028330:	e723      	b.n	802817a <__gethex+0x12a>
 8028332:	1e71      	subs	r1, r6, #1
 8028334:	4620      	mov	r0, r4
 8028336:	f000 fed2 	bl	80290de <__any_on>
 802833a:	2800      	cmp	r0, #0
 802833c:	d1ed      	bne.n	802831a <__gethex+0x2ca>
 802833e:	ee18 0a10 	vmov	r0, s16
 8028342:	4621      	mov	r1, r4
 8028344:	f000 fa70 	bl	8028828 <_Bfree>
 8028348:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802834a:	2300      	movs	r3, #0
 802834c:	6013      	str	r3, [r2, #0]
 802834e:	2750      	movs	r7, #80	; 0x50
 8028350:	e713      	b.n	802817a <__gethex+0x12a>
 8028352:	bf00      	nop
 8028354:	0802db14 	.word	0x0802db14
 8028358:	0802da34 	.word	0x0802da34
 802835c:	0802daa8 	.word	0x0802daa8
 8028360:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8028362:	2b00      	cmp	r3, #0
 8028364:	d1eb      	bne.n	802833e <__gethex+0x2ee>
 8028366:	e7d8      	b.n	802831a <__gethex+0x2ca>
 8028368:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802836a:	2b00      	cmp	r3, #0
 802836c:	d1d5      	bne.n	802831a <__gethex+0x2ca>
 802836e:	e7e6      	b.n	802833e <__gethex+0x2ee>
 8028370:	1e6f      	subs	r7, r5, #1
 8028372:	f1ba 0f00 	cmp.w	sl, #0
 8028376:	d131      	bne.n	80283dc <__gethex+0x38c>
 8028378:	b127      	cbz	r7, 8028384 <__gethex+0x334>
 802837a:	4639      	mov	r1, r7
 802837c:	4620      	mov	r0, r4
 802837e:	f000 feae 	bl	80290de <__any_on>
 8028382:	4682      	mov	sl, r0
 8028384:	117b      	asrs	r3, r7, #5
 8028386:	2101      	movs	r1, #1
 8028388:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 802838c:	f007 071f 	and.w	r7, r7, #31
 8028390:	fa01 f707 	lsl.w	r7, r1, r7
 8028394:	421f      	tst	r7, r3
 8028396:	4629      	mov	r1, r5
 8028398:	4620      	mov	r0, r4
 802839a:	bf18      	it	ne
 802839c:	f04a 0a02 	orrne.w	sl, sl, #2
 80283a0:	1b76      	subs	r6, r6, r5
 80283a2:	f7ff fdee 	bl	8027f82 <rshift>
 80283a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80283aa:	2702      	movs	r7, #2
 80283ac:	f1ba 0f00 	cmp.w	sl, #0
 80283b0:	d048      	beq.n	8028444 <__gethex+0x3f4>
 80283b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80283b6:	2b02      	cmp	r3, #2
 80283b8:	d015      	beq.n	80283e6 <__gethex+0x396>
 80283ba:	2b03      	cmp	r3, #3
 80283bc:	d017      	beq.n	80283ee <__gethex+0x39e>
 80283be:	2b01      	cmp	r3, #1
 80283c0:	d109      	bne.n	80283d6 <__gethex+0x386>
 80283c2:	f01a 0f02 	tst.w	sl, #2
 80283c6:	d006      	beq.n	80283d6 <__gethex+0x386>
 80283c8:	f8d9 0000 	ldr.w	r0, [r9]
 80283cc:	ea4a 0a00 	orr.w	sl, sl, r0
 80283d0:	f01a 0f01 	tst.w	sl, #1
 80283d4:	d10e      	bne.n	80283f4 <__gethex+0x3a4>
 80283d6:	f047 0710 	orr.w	r7, r7, #16
 80283da:	e033      	b.n	8028444 <__gethex+0x3f4>
 80283dc:	f04f 0a01 	mov.w	sl, #1
 80283e0:	e7d0      	b.n	8028384 <__gethex+0x334>
 80283e2:	2701      	movs	r7, #1
 80283e4:	e7e2      	b.n	80283ac <__gethex+0x35c>
 80283e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80283e8:	f1c3 0301 	rsb	r3, r3, #1
 80283ec:	9315      	str	r3, [sp, #84]	; 0x54
 80283ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80283f0:	2b00      	cmp	r3, #0
 80283f2:	d0f0      	beq.n	80283d6 <__gethex+0x386>
 80283f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80283f8:	f104 0314 	add.w	r3, r4, #20
 80283fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8028400:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8028404:	f04f 0c00 	mov.w	ip, #0
 8028408:	4618      	mov	r0, r3
 802840a:	f853 2b04 	ldr.w	r2, [r3], #4
 802840e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8028412:	d01c      	beq.n	802844e <__gethex+0x3fe>
 8028414:	3201      	adds	r2, #1
 8028416:	6002      	str	r2, [r0, #0]
 8028418:	2f02      	cmp	r7, #2
 802841a:	f104 0314 	add.w	r3, r4, #20
 802841e:	d13f      	bne.n	80284a0 <__gethex+0x450>
 8028420:	f8d8 2000 	ldr.w	r2, [r8]
 8028424:	3a01      	subs	r2, #1
 8028426:	42b2      	cmp	r2, r6
 8028428:	d10a      	bne.n	8028440 <__gethex+0x3f0>
 802842a:	1171      	asrs	r1, r6, #5
 802842c:	2201      	movs	r2, #1
 802842e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8028432:	f006 061f 	and.w	r6, r6, #31
 8028436:	fa02 f606 	lsl.w	r6, r2, r6
 802843a:	421e      	tst	r6, r3
 802843c:	bf18      	it	ne
 802843e:	4617      	movne	r7, r2
 8028440:	f047 0720 	orr.w	r7, r7, #32
 8028444:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028446:	601c      	str	r4, [r3, #0]
 8028448:	9b04      	ldr	r3, [sp, #16]
 802844a:	601d      	str	r5, [r3, #0]
 802844c:	e695      	b.n	802817a <__gethex+0x12a>
 802844e:	4299      	cmp	r1, r3
 8028450:	f843 cc04 	str.w	ip, [r3, #-4]
 8028454:	d8d8      	bhi.n	8028408 <__gethex+0x3b8>
 8028456:	68a3      	ldr	r3, [r4, #8]
 8028458:	459b      	cmp	fp, r3
 802845a:	db19      	blt.n	8028490 <__gethex+0x440>
 802845c:	6861      	ldr	r1, [r4, #4]
 802845e:	ee18 0a10 	vmov	r0, s16
 8028462:	3101      	adds	r1, #1
 8028464:	f000 f9a0 	bl	80287a8 <_Balloc>
 8028468:	4681      	mov	r9, r0
 802846a:	b918      	cbnz	r0, 8028474 <__gethex+0x424>
 802846c:	4b1a      	ldr	r3, [pc, #104]	; (80284d8 <__gethex+0x488>)
 802846e:	4602      	mov	r2, r0
 8028470:	2184      	movs	r1, #132	; 0x84
 8028472:	e6a8      	b.n	80281c6 <__gethex+0x176>
 8028474:	6922      	ldr	r2, [r4, #16]
 8028476:	3202      	adds	r2, #2
 8028478:	f104 010c 	add.w	r1, r4, #12
 802847c:	0092      	lsls	r2, r2, #2
 802847e:	300c      	adds	r0, #12
 8028480:	f7fc fd3e 	bl	8024f00 <memcpy>
 8028484:	4621      	mov	r1, r4
 8028486:	ee18 0a10 	vmov	r0, s16
 802848a:	f000 f9cd 	bl	8028828 <_Bfree>
 802848e:	464c      	mov	r4, r9
 8028490:	6923      	ldr	r3, [r4, #16]
 8028492:	1c5a      	adds	r2, r3, #1
 8028494:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8028498:	6122      	str	r2, [r4, #16]
 802849a:	2201      	movs	r2, #1
 802849c:	615a      	str	r2, [r3, #20]
 802849e:	e7bb      	b.n	8028418 <__gethex+0x3c8>
 80284a0:	6922      	ldr	r2, [r4, #16]
 80284a2:	455a      	cmp	r2, fp
 80284a4:	dd0b      	ble.n	80284be <__gethex+0x46e>
 80284a6:	2101      	movs	r1, #1
 80284a8:	4620      	mov	r0, r4
 80284aa:	f7ff fd6a 	bl	8027f82 <rshift>
 80284ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80284b2:	3501      	adds	r5, #1
 80284b4:	42ab      	cmp	r3, r5
 80284b6:	f6ff aed0 	blt.w	802825a <__gethex+0x20a>
 80284ba:	2701      	movs	r7, #1
 80284bc:	e7c0      	b.n	8028440 <__gethex+0x3f0>
 80284be:	f016 061f 	ands.w	r6, r6, #31
 80284c2:	d0fa      	beq.n	80284ba <__gethex+0x46a>
 80284c4:	449a      	add	sl, r3
 80284c6:	f1c6 0620 	rsb	r6, r6, #32
 80284ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80284ce:	f000 fa61 	bl	8028994 <__hi0bits>
 80284d2:	42b0      	cmp	r0, r6
 80284d4:	dbe7      	blt.n	80284a6 <__gethex+0x456>
 80284d6:	e7f0      	b.n	80284ba <__gethex+0x46a>
 80284d8:	0802da34 	.word	0x0802da34

080284dc <L_shift>:
 80284dc:	f1c2 0208 	rsb	r2, r2, #8
 80284e0:	0092      	lsls	r2, r2, #2
 80284e2:	b570      	push	{r4, r5, r6, lr}
 80284e4:	f1c2 0620 	rsb	r6, r2, #32
 80284e8:	6843      	ldr	r3, [r0, #4]
 80284ea:	6804      	ldr	r4, [r0, #0]
 80284ec:	fa03 f506 	lsl.w	r5, r3, r6
 80284f0:	432c      	orrs	r4, r5
 80284f2:	40d3      	lsrs	r3, r2
 80284f4:	6004      	str	r4, [r0, #0]
 80284f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80284fa:	4288      	cmp	r0, r1
 80284fc:	d3f4      	bcc.n	80284e8 <L_shift+0xc>
 80284fe:	bd70      	pop	{r4, r5, r6, pc}

08028500 <__match>:
 8028500:	b530      	push	{r4, r5, lr}
 8028502:	6803      	ldr	r3, [r0, #0]
 8028504:	3301      	adds	r3, #1
 8028506:	f811 4b01 	ldrb.w	r4, [r1], #1
 802850a:	b914      	cbnz	r4, 8028512 <__match+0x12>
 802850c:	6003      	str	r3, [r0, #0]
 802850e:	2001      	movs	r0, #1
 8028510:	bd30      	pop	{r4, r5, pc}
 8028512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028516:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802851a:	2d19      	cmp	r5, #25
 802851c:	bf98      	it	ls
 802851e:	3220      	addls	r2, #32
 8028520:	42a2      	cmp	r2, r4
 8028522:	d0f0      	beq.n	8028506 <__match+0x6>
 8028524:	2000      	movs	r0, #0
 8028526:	e7f3      	b.n	8028510 <__match+0x10>

08028528 <__hexnan>:
 8028528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802852c:	680b      	ldr	r3, [r1, #0]
 802852e:	6801      	ldr	r1, [r0, #0]
 8028530:	115e      	asrs	r6, r3, #5
 8028532:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8028536:	f013 031f 	ands.w	r3, r3, #31
 802853a:	b087      	sub	sp, #28
 802853c:	bf18      	it	ne
 802853e:	3604      	addne	r6, #4
 8028540:	2500      	movs	r5, #0
 8028542:	1f37      	subs	r7, r6, #4
 8028544:	4682      	mov	sl, r0
 8028546:	4690      	mov	r8, r2
 8028548:	9301      	str	r3, [sp, #4]
 802854a:	f846 5c04 	str.w	r5, [r6, #-4]
 802854e:	46b9      	mov	r9, r7
 8028550:	463c      	mov	r4, r7
 8028552:	9502      	str	r5, [sp, #8]
 8028554:	46ab      	mov	fp, r5
 8028556:	784a      	ldrb	r2, [r1, #1]
 8028558:	1c4b      	adds	r3, r1, #1
 802855a:	9303      	str	r3, [sp, #12]
 802855c:	b342      	cbz	r2, 80285b0 <__hexnan+0x88>
 802855e:	4610      	mov	r0, r2
 8028560:	9105      	str	r1, [sp, #20]
 8028562:	9204      	str	r2, [sp, #16]
 8028564:	f7ff fd5f 	bl	8028026 <__hexdig_fun>
 8028568:	2800      	cmp	r0, #0
 802856a:	d14f      	bne.n	802860c <__hexnan+0xe4>
 802856c:	9a04      	ldr	r2, [sp, #16]
 802856e:	9905      	ldr	r1, [sp, #20]
 8028570:	2a20      	cmp	r2, #32
 8028572:	d818      	bhi.n	80285a6 <__hexnan+0x7e>
 8028574:	9b02      	ldr	r3, [sp, #8]
 8028576:	459b      	cmp	fp, r3
 8028578:	dd13      	ble.n	80285a2 <__hexnan+0x7a>
 802857a:	454c      	cmp	r4, r9
 802857c:	d206      	bcs.n	802858c <__hexnan+0x64>
 802857e:	2d07      	cmp	r5, #7
 8028580:	dc04      	bgt.n	802858c <__hexnan+0x64>
 8028582:	462a      	mov	r2, r5
 8028584:	4649      	mov	r1, r9
 8028586:	4620      	mov	r0, r4
 8028588:	f7ff ffa8 	bl	80284dc <L_shift>
 802858c:	4544      	cmp	r4, r8
 802858e:	d950      	bls.n	8028632 <__hexnan+0x10a>
 8028590:	2300      	movs	r3, #0
 8028592:	f1a4 0904 	sub.w	r9, r4, #4
 8028596:	f844 3c04 	str.w	r3, [r4, #-4]
 802859a:	f8cd b008 	str.w	fp, [sp, #8]
 802859e:	464c      	mov	r4, r9
 80285a0:	461d      	mov	r5, r3
 80285a2:	9903      	ldr	r1, [sp, #12]
 80285a4:	e7d7      	b.n	8028556 <__hexnan+0x2e>
 80285a6:	2a29      	cmp	r2, #41	; 0x29
 80285a8:	d156      	bne.n	8028658 <__hexnan+0x130>
 80285aa:	3102      	adds	r1, #2
 80285ac:	f8ca 1000 	str.w	r1, [sl]
 80285b0:	f1bb 0f00 	cmp.w	fp, #0
 80285b4:	d050      	beq.n	8028658 <__hexnan+0x130>
 80285b6:	454c      	cmp	r4, r9
 80285b8:	d206      	bcs.n	80285c8 <__hexnan+0xa0>
 80285ba:	2d07      	cmp	r5, #7
 80285bc:	dc04      	bgt.n	80285c8 <__hexnan+0xa0>
 80285be:	462a      	mov	r2, r5
 80285c0:	4649      	mov	r1, r9
 80285c2:	4620      	mov	r0, r4
 80285c4:	f7ff ff8a 	bl	80284dc <L_shift>
 80285c8:	4544      	cmp	r4, r8
 80285ca:	d934      	bls.n	8028636 <__hexnan+0x10e>
 80285cc:	f1a8 0204 	sub.w	r2, r8, #4
 80285d0:	4623      	mov	r3, r4
 80285d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80285d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80285da:	429f      	cmp	r7, r3
 80285dc:	d2f9      	bcs.n	80285d2 <__hexnan+0xaa>
 80285de:	1b3b      	subs	r3, r7, r4
 80285e0:	f023 0303 	bic.w	r3, r3, #3
 80285e4:	3304      	adds	r3, #4
 80285e6:	3401      	adds	r4, #1
 80285e8:	3e03      	subs	r6, #3
 80285ea:	42b4      	cmp	r4, r6
 80285ec:	bf88      	it	hi
 80285ee:	2304      	movhi	r3, #4
 80285f0:	4443      	add	r3, r8
 80285f2:	2200      	movs	r2, #0
 80285f4:	f843 2b04 	str.w	r2, [r3], #4
 80285f8:	429f      	cmp	r7, r3
 80285fa:	d2fb      	bcs.n	80285f4 <__hexnan+0xcc>
 80285fc:	683b      	ldr	r3, [r7, #0]
 80285fe:	b91b      	cbnz	r3, 8028608 <__hexnan+0xe0>
 8028600:	4547      	cmp	r7, r8
 8028602:	d127      	bne.n	8028654 <__hexnan+0x12c>
 8028604:	2301      	movs	r3, #1
 8028606:	603b      	str	r3, [r7, #0]
 8028608:	2005      	movs	r0, #5
 802860a:	e026      	b.n	802865a <__hexnan+0x132>
 802860c:	3501      	adds	r5, #1
 802860e:	2d08      	cmp	r5, #8
 8028610:	f10b 0b01 	add.w	fp, fp, #1
 8028614:	dd06      	ble.n	8028624 <__hexnan+0xfc>
 8028616:	4544      	cmp	r4, r8
 8028618:	d9c3      	bls.n	80285a2 <__hexnan+0x7a>
 802861a:	2300      	movs	r3, #0
 802861c:	f844 3c04 	str.w	r3, [r4, #-4]
 8028620:	2501      	movs	r5, #1
 8028622:	3c04      	subs	r4, #4
 8028624:	6822      	ldr	r2, [r4, #0]
 8028626:	f000 000f 	and.w	r0, r0, #15
 802862a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 802862e:	6022      	str	r2, [r4, #0]
 8028630:	e7b7      	b.n	80285a2 <__hexnan+0x7a>
 8028632:	2508      	movs	r5, #8
 8028634:	e7b5      	b.n	80285a2 <__hexnan+0x7a>
 8028636:	9b01      	ldr	r3, [sp, #4]
 8028638:	2b00      	cmp	r3, #0
 802863a:	d0df      	beq.n	80285fc <__hexnan+0xd4>
 802863c:	f04f 32ff 	mov.w	r2, #4294967295
 8028640:	f1c3 0320 	rsb	r3, r3, #32
 8028644:	fa22 f303 	lsr.w	r3, r2, r3
 8028648:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802864c:	401a      	ands	r2, r3
 802864e:	f846 2c04 	str.w	r2, [r6, #-4]
 8028652:	e7d3      	b.n	80285fc <__hexnan+0xd4>
 8028654:	3f04      	subs	r7, #4
 8028656:	e7d1      	b.n	80285fc <__hexnan+0xd4>
 8028658:	2004      	movs	r0, #4
 802865a:	b007      	add	sp, #28
 802865c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028660 <_localeconv_r>:
 8028660:	4800      	ldr	r0, [pc, #0]	; (8028664 <_localeconv_r+0x4>)
 8028662:	4770      	bx	lr
 8028664:	200001d0 	.word	0x200001d0

08028668 <__retarget_lock_init_recursive>:
 8028668:	4770      	bx	lr

0802866a <__retarget_lock_acquire_recursive>:
 802866a:	4770      	bx	lr

0802866c <__retarget_lock_release>:
 802866c:	4770      	bx	lr

0802866e <__retarget_lock_release_recursive>:
 802866e:	4770      	bx	lr

08028670 <__swhatbuf_r>:
 8028670:	b570      	push	{r4, r5, r6, lr}
 8028672:	460e      	mov	r6, r1
 8028674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028678:	2900      	cmp	r1, #0
 802867a:	b096      	sub	sp, #88	; 0x58
 802867c:	4614      	mov	r4, r2
 802867e:	461d      	mov	r5, r3
 8028680:	da07      	bge.n	8028692 <__swhatbuf_r+0x22>
 8028682:	2300      	movs	r3, #0
 8028684:	602b      	str	r3, [r5, #0]
 8028686:	89b3      	ldrh	r3, [r6, #12]
 8028688:	061a      	lsls	r2, r3, #24
 802868a:	d410      	bmi.n	80286ae <__swhatbuf_r+0x3e>
 802868c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028690:	e00e      	b.n	80286b0 <__swhatbuf_r+0x40>
 8028692:	466a      	mov	r2, sp
 8028694:	f000 ff60 	bl	8029558 <_fstat_r>
 8028698:	2800      	cmp	r0, #0
 802869a:	dbf2      	blt.n	8028682 <__swhatbuf_r+0x12>
 802869c:	9a01      	ldr	r2, [sp, #4]
 802869e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80286a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80286a6:	425a      	negs	r2, r3
 80286a8:	415a      	adcs	r2, r3
 80286aa:	602a      	str	r2, [r5, #0]
 80286ac:	e7ee      	b.n	802868c <__swhatbuf_r+0x1c>
 80286ae:	2340      	movs	r3, #64	; 0x40
 80286b0:	2000      	movs	r0, #0
 80286b2:	6023      	str	r3, [r4, #0]
 80286b4:	b016      	add	sp, #88	; 0x58
 80286b6:	bd70      	pop	{r4, r5, r6, pc}

080286b8 <__smakebuf_r>:
 80286b8:	898b      	ldrh	r3, [r1, #12]
 80286ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80286bc:	079d      	lsls	r5, r3, #30
 80286be:	4606      	mov	r6, r0
 80286c0:	460c      	mov	r4, r1
 80286c2:	d507      	bpl.n	80286d4 <__smakebuf_r+0x1c>
 80286c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80286c8:	6023      	str	r3, [r4, #0]
 80286ca:	6123      	str	r3, [r4, #16]
 80286cc:	2301      	movs	r3, #1
 80286ce:	6163      	str	r3, [r4, #20]
 80286d0:	b002      	add	sp, #8
 80286d2:	bd70      	pop	{r4, r5, r6, pc}
 80286d4:	ab01      	add	r3, sp, #4
 80286d6:	466a      	mov	r2, sp
 80286d8:	f7ff ffca 	bl	8028670 <__swhatbuf_r>
 80286dc:	9900      	ldr	r1, [sp, #0]
 80286de:	4605      	mov	r5, r0
 80286e0:	4630      	mov	r0, r6
 80286e2:	f7fc fc73 	bl	8024fcc <_malloc_r>
 80286e6:	b948      	cbnz	r0, 80286fc <__smakebuf_r+0x44>
 80286e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80286ec:	059a      	lsls	r2, r3, #22
 80286ee:	d4ef      	bmi.n	80286d0 <__smakebuf_r+0x18>
 80286f0:	f023 0303 	bic.w	r3, r3, #3
 80286f4:	f043 0302 	orr.w	r3, r3, #2
 80286f8:	81a3      	strh	r3, [r4, #12]
 80286fa:	e7e3      	b.n	80286c4 <__smakebuf_r+0xc>
 80286fc:	4b0d      	ldr	r3, [pc, #52]	; (8028734 <__smakebuf_r+0x7c>)
 80286fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8028700:	89a3      	ldrh	r3, [r4, #12]
 8028702:	6020      	str	r0, [r4, #0]
 8028704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028708:	81a3      	strh	r3, [r4, #12]
 802870a:	9b00      	ldr	r3, [sp, #0]
 802870c:	6163      	str	r3, [r4, #20]
 802870e:	9b01      	ldr	r3, [sp, #4]
 8028710:	6120      	str	r0, [r4, #16]
 8028712:	b15b      	cbz	r3, 802872c <__smakebuf_r+0x74>
 8028714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028718:	4630      	mov	r0, r6
 802871a:	f000 ff2f 	bl	802957c <_isatty_r>
 802871e:	b128      	cbz	r0, 802872c <__smakebuf_r+0x74>
 8028720:	89a3      	ldrh	r3, [r4, #12]
 8028722:	f023 0303 	bic.w	r3, r3, #3
 8028726:	f043 0301 	orr.w	r3, r3, #1
 802872a:	81a3      	strh	r3, [r4, #12]
 802872c:	89a0      	ldrh	r0, [r4, #12]
 802872e:	4305      	orrs	r5, r0
 8028730:	81a5      	strh	r5, [r4, #12]
 8028732:	e7cd      	b.n	80286d0 <__smakebuf_r+0x18>
 8028734:	08027de1 	.word	0x08027de1

08028738 <__ascii_mbtowc>:
 8028738:	b082      	sub	sp, #8
 802873a:	b901      	cbnz	r1, 802873e <__ascii_mbtowc+0x6>
 802873c:	a901      	add	r1, sp, #4
 802873e:	b142      	cbz	r2, 8028752 <__ascii_mbtowc+0x1a>
 8028740:	b14b      	cbz	r3, 8028756 <__ascii_mbtowc+0x1e>
 8028742:	7813      	ldrb	r3, [r2, #0]
 8028744:	600b      	str	r3, [r1, #0]
 8028746:	7812      	ldrb	r2, [r2, #0]
 8028748:	1e10      	subs	r0, r2, #0
 802874a:	bf18      	it	ne
 802874c:	2001      	movne	r0, #1
 802874e:	b002      	add	sp, #8
 8028750:	4770      	bx	lr
 8028752:	4610      	mov	r0, r2
 8028754:	e7fb      	b.n	802874e <__ascii_mbtowc+0x16>
 8028756:	f06f 0001 	mvn.w	r0, #1
 802875a:	e7f8      	b.n	802874e <__ascii_mbtowc+0x16>

0802875c <memmove>:
 802875c:	4288      	cmp	r0, r1
 802875e:	b510      	push	{r4, lr}
 8028760:	eb01 0402 	add.w	r4, r1, r2
 8028764:	d902      	bls.n	802876c <memmove+0x10>
 8028766:	4284      	cmp	r4, r0
 8028768:	4623      	mov	r3, r4
 802876a:	d807      	bhi.n	802877c <memmove+0x20>
 802876c:	1e43      	subs	r3, r0, #1
 802876e:	42a1      	cmp	r1, r4
 8028770:	d008      	beq.n	8028784 <memmove+0x28>
 8028772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8028776:	f803 2f01 	strb.w	r2, [r3, #1]!
 802877a:	e7f8      	b.n	802876e <memmove+0x12>
 802877c:	4402      	add	r2, r0
 802877e:	4601      	mov	r1, r0
 8028780:	428a      	cmp	r2, r1
 8028782:	d100      	bne.n	8028786 <memmove+0x2a>
 8028784:	bd10      	pop	{r4, pc}
 8028786:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802878a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802878e:	e7f7      	b.n	8028780 <memmove+0x24>

08028790 <__malloc_lock>:
 8028790:	4801      	ldr	r0, [pc, #4]	; (8028798 <__malloc_lock+0x8>)
 8028792:	f7ff bf6a 	b.w	802866a <__retarget_lock_acquire_recursive>
 8028796:	bf00      	nop
 8028798:	20056dc4 	.word	0x20056dc4

0802879c <__malloc_unlock>:
 802879c:	4801      	ldr	r0, [pc, #4]	; (80287a4 <__malloc_unlock+0x8>)
 802879e:	f7ff bf66 	b.w	802866e <__retarget_lock_release_recursive>
 80287a2:	bf00      	nop
 80287a4:	20056dc4 	.word	0x20056dc4

080287a8 <_Balloc>:
 80287a8:	b570      	push	{r4, r5, r6, lr}
 80287aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80287ac:	4604      	mov	r4, r0
 80287ae:	460d      	mov	r5, r1
 80287b0:	b976      	cbnz	r6, 80287d0 <_Balloc+0x28>
 80287b2:	2010      	movs	r0, #16
 80287b4:	f7fc fb94 	bl	8024ee0 <malloc>
 80287b8:	4602      	mov	r2, r0
 80287ba:	6260      	str	r0, [r4, #36]	; 0x24
 80287bc:	b920      	cbnz	r0, 80287c8 <_Balloc+0x20>
 80287be:	4b18      	ldr	r3, [pc, #96]	; (8028820 <_Balloc+0x78>)
 80287c0:	4818      	ldr	r0, [pc, #96]	; (8028824 <_Balloc+0x7c>)
 80287c2:	2166      	movs	r1, #102	; 0x66
 80287c4:	f7fc fb1e 	bl	8024e04 <__assert_func>
 80287c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80287cc:	6006      	str	r6, [r0, #0]
 80287ce:	60c6      	str	r6, [r0, #12]
 80287d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80287d2:	68f3      	ldr	r3, [r6, #12]
 80287d4:	b183      	cbz	r3, 80287f8 <_Balloc+0x50>
 80287d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80287d8:	68db      	ldr	r3, [r3, #12]
 80287da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80287de:	b9b8      	cbnz	r0, 8028810 <_Balloc+0x68>
 80287e0:	2101      	movs	r1, #1
 80287e2:	fa01 f605 	lsl.w	r6, r1, r5
 80287e6:	1d72      	adds	r2, r6, #5
 80287e8:	0092      	lsls	r2, r2, #2
 80287ea:	4620      	mov	r0, r4
 80287ec:	f000 fc98 	bl	8029120 <_calloc_r>
 80287f0:	b160      	cbz	r0, 802880c <_Balloc+0x64>
 80287f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80287f6:	e00e      	b.n	8028816 <_Balloc+0x6e>
 80287f8:	2221      	movs	r2, #33	; 0x21
 80287fa:	2104      	movs	r1, #4
 80287fc:	4620      	mov	r0, r4
 80287fe:	f000 fc8f 	bl	8029120 <_calloc_r>
 8028802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028804:	60f0      	str	r0, [r6, #12]
 8028806:	68db      	ldr	r3, [r3, #12]
 8028808:	2b00      	cmp	r3, #0
 802880a:	d1e4      	bne.n	80287d6 <_Balloc+0x2e>
 802880c:	2000      	movs	r0, #0
 802880e:	bd70      	pop	{r4, r5, r6, pc}
 8028810:	6802      	ldr	r2, [r0, #0]
 8028812:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8028816:	2300      	movs	r3, #0
 8028818:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802881c:	e7f7      	b.n	802880e <_Balloc+0x66>
 802881e:	bf00      	nop
 8028820:	0802d9be 	.word	0x0802d9be
 8028824:	0802db28 	.word	0x0802db28

08028828 <_Bfree>:
 8028828:	b570      	push	{r4, r5, r6, lr}
 802882a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802882c:	4605      	mov	r5, r0
 802882e:	460c      	mov	r4, r1
 8028830:	b976      	cbnz	r6, 8028850 <_Bfree+0x28>
 8028832:	2010      	movs	r0, #16
 8028834:	f7fc fb54 	bl	8024ee0 <malloc>
 8028838:	4602      	mov	r2, r0
 802883a:	6268      	str	r0, [r5, #36]	; 0x24
 802883c:	b920      	cbnz	r0, 8028848 <_Bfree+0x20>
 802883e:	4b09      	ldr	r3, [pc, #36]	; (8028864 <_Bfree+0x3c>)
 8028840:	4809      	ldr	r0, [pc, #36]	; (8028868 <_Bfree+0x40>)
 8028842:	218a      	movs	r1, #138	; 0x8a
 8028844:	f7fc fade 	bl	8024e04 <__assert_func>
 8028848:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802884c:	6006      	str	r6, [r0, #0]
 802884e:	60c6      	str	r6, [r0, #12]
 8028850:	b13c      	cbz	r4, 8028862 <_Bfree+0x3a>
 8028852:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8028854:	6862      	ldr	r2, [r4, #4]
 8028856:	68db      	ldr	r3, [r3, #12]
 8028858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802885c:	6021      	str	r1, [r4, #0]
 802885e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8028862:	bd70      	pop	{r4, r5, r6, pc}
 8028864:	0802d9be 	.word	0x0802d9be
 8028868:	0802db28 	.word	0x0802db28

0802886c <__multadd>:
 802886c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028870:	690e      	ldr	r6, [r1, #16]
 8028872:	4607      	mov	r7, r0
 8028874:	4698      	mov	r8, r3
 8028876:	460c      	mov	r4, r1
 8028878:	f101 0014 	add.w	r0, r1, #20
 802887c:	2300      	movs	r3, #0
 802887e:	6805      	ldr	r5, [r0, #0]
 8028880:	b2a9      	uxth	r1, r5
 8028882:	fb02 8101 	mla	r1, r2, r1, r8
 8028886:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802888a:	0c2d      	lsrs	r5, r5, #16
 802888c:	fb02 c505 	mla	r5, r2, r5, ip
 8028890:	b289      	uxth	r1, r1
 8028892:	3301      	adds	r3, #1
 8028894:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8028898:	429e      	cmp	r6, r3
 802889a:	f840 1b04 	str.w	r1, [r0], #4
 802889e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80288a2:	dcec      	bgt.n	802887e <__multadd+0x12>
 80288a4:	f1b8 0f00 	cmp.w	r8, #0
 80288a8:	d022      	beq.n	80288f0 <__multadd+0x84>
 80288aa:	68a3      	ldr	r3, [r4, #8]
 80288ac:	42b3      	cmp	r3, r6
 80288ae:	dc19      	bgt.n	80288e4 <__multadd+0x78>
 80288b0:	6861      	ldr	r1, [r4, #4]
 80288b2:	4638      	mov	r0, r7
 80288b4:	3101      	adds	r1, #1
 80288b6:	f7ff ff77 	bl	80287a8 <_Balloc>
 80288ba:	4605      	mov	r5, r0
 80288bc:	b928      	cbnz	r0, 80288ca <__multadd+0x5e>
 80288be:	4602      	mov	r2, r0
 80288c0:	4b0d      	ldr	r3, [pc, #52]	; (80288f8 <__multadd+0x8c>)
 80288c2:	480e      	ldr	r0, [pc, #56]	; (80288fc <__multadd+0x90>)
 80288c4:	21b5      	movs	r1, #181	; 0xb5
 80288c6:	f7fc fa9d 	bl	8024e04 <__assert_func>
 80288ca:	6922      	ldr	r2, [r4, #16]
 80288cc:	3202      	adds	r2, #2
 80288ce:	f104 010c 	add.w	r1, r4, #12
 80288d2:	0092      	lsls	r2, r2, #2
 80288d4:	300c      	adds	r0, #12
 80288d6:	f7fc fb13 	bl	8024f00 <memcpy>
 80288da:	4621      	mov	r1, r4
 80288dc:	4638      	mov	r0, r7
 80288de:	f7ff ffa3 	bl	8028828 <_Bfree>
 80288e2:	462c      	mov	r4, r5
 80288e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80288e8:	3601      	adds	r6, #1
 80288ea:	f8c3 8014 	str.w	r8, [r3, #20]
 80288ee:	6126      	str	r6, [r4, #16]
 80288f0:	4620      	mov	r0, r4
 80288f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80288f6:	bf00      	nop
 80288f8:	0802da34 	.word	0x0802da34
 80288fc:	0802db28 	.word	0x0802db28

08028900 <__s2b>:
 8028900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028904:	460c      	mov	r4, r1
 8028906:	4615      	mov	r5, r2
 8028908:	461f      	mov	r7, r3
 802890a:	2209      	movs	r2, #9
 802890c:	3308      	adds	r3, #8
 802890e:	4606      	mov	r6, r0
 8028910:	fb93 f3f2 	sdiv	r3, r3, r2
 8028914:	2100      	movs	r1, #0
 8028916:	2201      	movs	r2, #1
 8028918:	429a      	cmp	r2, r3
 802891a:	db09      	blt.n	8028930 <__s2b+0x30>
 802891c:	4630      	mov	r0, r6
 802891e:	f7ff ff43 	bl	80287a8 <_Balloc>
 8028922:	b940      	cbnz	r0, 8028936 <__s2b+0x36>
 8028924:	4602      	mov	r2, r0
 8028926:	4b19      	ldr	r3, [pc, #100]	; (802898c <__s2b+0x8c>)
 8028928:	4819      	ldr	r0, [pc, #100]	; (8028990 <__s2b+0x90>)
 802892a:	21ce      	movs	r1, #206	; 0xce
 802892c:	f7fc fa6a 	bl	8024e04 <__assert_func>
 8028930:	0052      	lsls	r2, r2, #1
 8028932:	3101      	adds	r1, #1
 8028934:	e7f0      	b.n	8028918 <__s2b+0x18>
 8028936:	9b08      	ldr	r3, [sp, #32]
 8028938:	6143      	str	r3, [r0, #20]
 802893a:	2d09      	cmp	r5, #9
 802893c:	f04f 0301 	mov.w	r3, #1
 8028940:	6103      	str	r3, [r0, #16]
 8028942:	dd16      	ble.n	8028972 <__s2b+0x72>
 8028944:	f104 0909 	add.w	r9, r4, #9
 8028948:	46c8      	mov	r8, r9
 802894a:	442c      	add	r4, r5
 802894c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8028950:	4601      	mov	r1, r0
 8028952:	3b30      	subs	r3, #48	; 0x30
 8028954:	220a      	movs	r2, #10
 8028956:	4630      	mov	r0, r6
 8028958:	f7ff ff88 	bl	802886c <__multadd>
 802895c:	45a0      	cmp	r8, r4
 802895e:	d1f5      	bne.n	802894c <__s2b+0x4c>
 8028960:	f1a5 0408 	sub.w	r4, r5, #8
 8028964:	444c      	add	r4, r9
 8028966:	1b2d      	subs	r5, r5, r4
 8028968:	1963      	adds	r3, r4, r5
 802896a:	42bb      	cmp	r3, r7
 802896c:	db04      	blt.n	8028978 <__s2b+0x78>
 802896e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028972:	340a      	adds	r4, #10
 8028974:	2509      	movs	r5, #9
 8028976:	e7f6      	b.n	8028966 <__s2b+0x66>
 8028978:	f814 3b01 	ldrb.w	r3, [r4], #1
 802897c:	4601      	mov	r1, r0
 802897e:	3b30      	subs	r3, #48	; 0x30
 8028980:	220a      	movs	r2, #10
 8028982:	4630      	mov	r0, r6
 8028984:	f7ff ff72 	bl	802886c <__multadd>
 8028988:	e7ee      	b.n	8028968 <__s2b+0x68>
 802898a:	bf00      	nop
 802898c:	0802da34 	.word	0x0802da34
 8028990:	0802db28 	.word	0x0802db28

08028994 <__hi0bits>:
 8028994:	0c03      	lsrs	r3, r0, #16
 8028996:	041b      	lsls	r3, r3, #16
 8028998:	b9d3      	cbnz	r3, 80289d0 <__hi0bits+0x3c>
 802899a:	0400      	lsls	r0, r0, #16
 802899c:	2310      	movs	r3, #16
 802899e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80289a2:	bf04      	itt	eq
 80289a4:	0200      	lsleq	r0, r0, #8
 80289a6:	3308      	addeq	r3, #8
 80289a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80289ac:	bf04      	itt	eq
 80289ae:	0100      	lsleq	r0, r0, #4
 80289b0:	3304      	addeq	r3, #4
 80289b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80289b6:	bf04      	itt	eq
 80289b8:	0080      	lsleq	r0, r0, #2
 80289ba:	3302      	addeq	r3, #2
 80289bc:	2800      	cmp	r0, #0
 80289be:	db05      	blt.n	80289cc <__hi0bits+0x38>
 80289c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80289c4:	f103 0301 	add.w	r3, r3, #1
 80289c8:	bf08      	it	eq
 80289ca:	2320      	moveq	r3, #32
 80289cc:	4618      	mov	r0, r3
 80289ce:	4770      	bx	lr
 80289d0:	2300      	movs	r3, #0
 80289d2:	e7e4      	b.n	802899e <__hi0bits+0xa>

080289d4 <__lo0bits>:
 80289d4:	6803      	ldr	r3, [r0, #0]
 80289d6:	f013 0207 	ands.w	r2, r3, #7
 80289da:	4601      	mov	r1, r0
 80289dc:	d00b      	beq.n	80289f6 <__lo0bits+0x22>
 80289de:	07da      	lsls	r2, r3, #31
 80289e0:	d424      	bmi.n	8028a2c <__lo0bits+0x58>
 80289e2:	0798      	lsls	r0, r3, #30
 80289e4:	bf49      	itett	mi
 80289e6:	085b      	lsrmi	r3, r3, #1
 80289e8:	089b      	lsrpl	r3, r3, #2
 80289ea:	2001      	movmi	r0, #1
 80289ec:	600b      	strmi	r3, [r1, #0]
 80289ee:	bf5c      	itt	pl
 80289f0:	600b      	strpl	r3, [r1, #0]
 80289f2:	2002      	movpl	r0, #2
 80289f4:	4770      	bx	lr
 80289f6:	b298      	uxth	r0, r3
 80289f8:	b9b0      	cbnz	r0, 8028a28 <__lo0bits+0x54>
 80289fa:	0c1b      	lsrs	r3, r3, #16
 80289fc:	2010      	movs	r0, #16
 80289fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8028a02:	bf04      	itt	eq
 8028a04:	0a1b      	lsreq	r3, r3, #8
 8028a06:	3008      	addeq	r0, #8
 8028a08:	071a      	lsls	r2, r3, #28
 8028a0a:	bf04      	itt	eq
 8028a0c:	091b      	lsreq	r3, r3, #4
 8028a0e:	3004      	addeq	r0, #4
 8028a10:	079a      	lsls	r2, r3, #30
 8028a12:	bf04      	itt	eq
 8028a14:	089b      	lsreq	r3, r3, #2
 8028a16:	3002      	addeq	r0, #2
 8028a18:	07da      	lsls	r2, r3, #31
 8028a1a:	d403      	bmi.n	8028a24 <__lo0bits+0x50>
 8028a1c:	085b      	lsrs	r3, r3, #1
 8028a1e:	f100 0001 	add.w	r0, r0, #1
 8028a22:	d005      	beq.n	8028a30 <__lo0bits+0x5c>
 8028a24:	600b      	str	r3, [r1, #0]
 8028a26:	4770      	bx	lr
 8028a28:	4610      	mov	r0, r2
 8028a2a:	e7e8      	b.n	80289fe <__lo0bits+0x2a>
 8028a2c:	2000      	movs	r0, #0
 8028a2e:	4770      	bx	lr
 8028a30:	2020      	movs	r0, #32
 8028a32:	4770      	bx	lr

08028a34 <__i2b>:
 8028a34:	b510      	push	{r4, lr}
 8028a36:	460c      	mov	r4, r1
 8028a38:	2101      	movs	r1, #1
 8028a3a:	f7ff feb5 	bl	80287a8 <_Balloc>
 8028a3e:	4602      	mov	r2, r0
 8028a40:	b928      	cbnz	r0, 8028a4e <__i2b+0x1a>
 8028a42:	4b05      	ldr	r3, [pc, #20]	; (8028a58 <__i2b+0x24>)
 8028a44:	4805      	ldr	r0, [pc, #20]	; (8028a5c <__i2b+0x28>)
 8028a46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8028a4a:	f7fc f9db 	bl	8024e04 <__assert_func>
 8028a4e:	2301      	movs	r3, #1
 8028a50:	6144      	str	r4, [r0, #20]
 8028a52:	6103      	str	r3, [r0, #16]
 8028a54:	bd10      	pop	{r4, pc}
 8028a56:	bf00      	nop
 8028a58:	0802da34 	.word	0x0802da34
 8028a5c:	0802db28 	.word	0x0802db28

08028a60 <__multiply>:
 8028a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a64:	4614      	mov	r4, r2
 8028a66:	690a      	ldr	r2, [r1, #16]
 8028a68:	6923      	ldr	r3, [r4, #16]
 8028a6a:	429a      	cmp	r2, r3
 8028a6c:	bfb8      	it	lt
 8028a6e:	460b      	movlt	r3, r1
 8028a70:	460d      	mov	r5, r1
 8028a72:	bfbc      	itt	lt
 8028a74:	4625      	movlt	r5, r4
 8028a76:	461c      	movlt	r4, r3
 8028a78:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8028a7c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8028a80:	68ab      	ldr	r3, [r5, #8]
 8028a82:	6869      	ldr	r1, [r5, #4]
 8028a84:	eb0a 0709 	add.w	r7, sl, r9
 8028a88:	42bb      	cmp	r3, r7
 8028a8a:	b085      	sub	sp, #20
 8028a8c:	bfb8      	it	lt
 8028a8e:	3101      	addlt	r1, #1
 8028a90:	f7ff fe8a 	bl	80287a8 <_Balloc>
 8028a94:	b930      	cbnz	r0, 8028aa4 <__multiply+0x44>
 8028a96:	4602      	mov	r2, r0
 8028a98:	4b42      	ldr	r3, [pc, #264]	; (8028ba4 <__multiply+0x144>)
 8028a9a:	4843      	ldr	r0, [pc, #268]	; (8028ba8 <__multiply+0x148>)
 8028a9c:	f240 115d 	movw	r1, #349	; 0x15d
 8028aa0:	f7fc f9b0 	bl	8024e04 <__assert_func>
 8028aa4:	f100 0614 	add.w	r6, r0, #20
 8028aa8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8028aac:	4633      	mov	r3, r6
 8028aae:	2200      	movs	r2, #0
 8028ab0:	4543      	cmp	r3, r8
 8028ab2:	d31e      	bcc.n	8028af2 <__multiply+0x92>
 8028ab4:	f105 0c14 	add.w	ip, r5, #20
 8028ab8:	f104 0314 	add.w	r3, r4, #20
 8028abc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8028ac0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8028ac4:	9202      	str	r2, [sp, #8]
 8028ac6:	ebac 0205 	sub.w	r2, ip, r5
 8028aca:	3a15      	subs	r2, #21
 8028acc:	f022 0203 	bic.w	r2, r2, #3
 8028ad0:	3204      	adds	r2, #4
 8028ad2:	f105 0115 	add.w	r1, r5, #21
 8028ad6:	458c      	cmp	ip, r1
 8028ad8:	bf38      	it	cc
 8028ada:	2204      	movcc	r2, #4
 8028adc:	9201      	str	r2, [sp, #4]
 8028ade:	9a02      	ldr	r2, [sp, #8]
 8028ae0:	9303      	str	r3, [sp, #12]
 8028ae2:	429a      	cmp	r2, r3
 8028ae4:	d808      	bhi.n	8028af8 <__multiply+0x98>
 8028ae6:	2f00      	cmp	r7, #0
 8028ae8:	dc55      	bgt.n	8028b96 <__multiply+0x136>
 8028aea:	6107      	str	r7, [r0, #16]
 8028aec:	b005      	add	sp, #20
 8028aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028af2:	f843 2b04 	str.w	r2, [r3], #4
 8028af6:	e7db      	b.n	8028ab0 <__multiply+0x50>
 8028af8:	f8b3 a000 	ldrh.w	sl, [r3]
 8028afc:	f1ba 0f00 	cmp.w	sl, #0
 8028b00:	d020      	beq.n	8028b44 <__multiply+0xe4>
 8028b02:	f105 0e14 	add.w	lr, r5, #20
 8028b06:	46b1      	mov	r9, r6
 8028b08:	2200      	movs	r2, #0
 8028b0a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8028b0e:	f8d9 b000 	ldr.w	fp, [r9]
 8028b12:	b2a1      	uxth	r1, r4
 8028b14:	fa1f fb8b 	uxth.w	fp, fp
 8028b18:	fb0a b101 	mla	r1, sl, r1, fp
 8028b1c:	4411      	add	r1, r2
 8028b1e:	f8d9 2000 	ldr.w	r2, [r9]
 8028b22:	0c24      	lsrs	r4, r4, #16
 8028b24:	0c12      	lsrs	r2, r2, #16
 8028b26:	fb0a 2404 	mla	r4, sl, r4, r2
 8028b2a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8028b2e:	b289      	uxth	r1, r1
 8028b30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8028b34:	45f4      	cmp	ip, lr
 8028b36:	f849 1b04 	str.w	r1, [r9], #4
 8028b3a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8028b3e:	d8e4      	bhi.n	8028b0a <__multiply+0xaa>
 8028b40:	9901      	ldr	r1, [sp, #4]
 8028b42:	5072      	str	r2, [r6, r1]
 8028b44:	9a03      	ldr	r2, [sp, #12]
 8028b46:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8028b4a:	3304      	adds	r3, #4
 8028b4c:	f1b9 0f00 	cmp.w	r9, #0
 8028b50:	d01f      	beq.n	8028b92 <__multiply+0x132>
 8028b52:	6834      	ldr	r4, [r6, #0]
 8028b54:	f105 0114 	add.w	r1, r5, #20
 8028b58:	46b6      	mov	lr, r6
 8028b5a:	f04f 0a00 	mov.w	sl, #0
 8028b5e:	880a      	ldrh	r2, [r1, #0]
 8028b60:	f8be b002 	ldrh.w	fp, [lr, #2]
 8028b64:	fb09 b202 	mla	r2, r9, r2, fp
 8028b68:	4492      	add	sl, r2
 8028b6a:	b2a4      	uxth	r4, r4
 8028b6c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8028b70:	f84e 4b04 	str.w	r4, [lr], #4
 8028b74:	f851 4b04 	ldr.w	r4, [r1], #4
 8028b78:	f8be 2000 	ldrh.w	r2, [lr]
 8028b7c:	0c24      	lsrs	r4, r4, #16
 8028b7e:	fb09 2404 	mla	r4, r9, r4, r2
 8028b82:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8028b86:	458c      	cmp	ip, r1
 8028b88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8028b8c:	d8e7      	bhi.n	8028b5e <__multiply+0xfe>
 8028b8e:	9a01      	ldr	r2, [sp, #4]
 8028b90:	50b4      	str	r4, [r6, r2]
 8028b92:	3604      	adds	r6, #4
 8028b94:	e7a3      	b.n	8028ade <__multiply+0x7e>
 8028b96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8028b9a:	2b00      	cmp	r3, #0
 8028b9c:	d1a5      	bne.n	8028aea <__multiply+0x8a>
 8028b9e:	3f01      	subs	r7, #1
 8028ba0:	e7a1      	b.n	8028ae6 <__multiply+0x86>
 8028ba2:	bf00      	nop
 8028ba4:	0802da34 	.word	0x0802da34
 8028ba8:	0802db28 	.word	0x0802db28

08028bac <__pow5mult>:
 8028bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028bb0:	4615      	mov	r5, r2
 8028bb2:	f012 0203 	ands.w	r2, r2, #3
 8028bb6:	4606      	mov	r6, r0
 8028bb8:	460f      	mov	r7, r1
 8028bba:	d007      	beq.n	8028bcc <__pow5mult+0x20>
 8028bbc:	4c25      	ldr	r4, [pc, #148]	; (8028c54 <__pow5mult+0xa8>)
 8028bbe:	3a01      	subs	r2, #1
 8028bc0:	2300      	movs	r3, #0
 8028bc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8028bc6:	f7ff fe51 	bl	802886c <__multadd>
 8028bca:	4607      	mov	r7, r0
 8028bcc:	10ad      	asrs	r5, r5, #2
 8028bce:	d03d      	beq.n	8028c4c <__pow5mult+0xa0>
 8028bd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8028bd2:	b97c      	cbnz	r4, 8028bf4 <__pow5mult+0x48>
 8028bd4:	2010      	movs	r0, #16
 8028bd6:	f7fc f983 	bl	8024ee0 <malloc>
 8028bda:	4602      	mov	r2, r0
 8028bdc:	6270      	str	r0, [r6, #36]	; 0x24
 8028bde:	b928      	cbnz	r0, 8028bec <__pow5mult+0x40>
 8028be0:	4b1d      	ldr	r3, [pc, #116]	; (8028c58 <__pow5mult+0xac>)
 8028be2:	481e      	ldr	r0, [pc, #120]	; (8028c5c <__pow5mult+0xb0>)
 8028be4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8028be8:	f7fc f90c 	bl	8024e04 <__assert_func>
 8028bec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8028bf0:	6004      	str	r4, [r0, #0]
 8028bf2:	60c4      	str	r4, [r0, #12]
 8028bf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8028bf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8028bfc:	b94c      	cbnz	r4, 8028c12 <__pow5mult+0x66>
 8028bfe:	f240 2171 	movw	r1, #625	; 0x271
 8028c02:	4630      	mov	r0, r6
 8028c04:	f7ff ff16 	bl	8028a34 <__i2b>
 8028c08:	2300      	movs	r3, #0
 8028c0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8028c0e:	4604      	mov	r4, r0
 8028c10:	6003      	str	r3, [r0, #0]
 8028c12:	f04f 0900 	mov.w	r9, #0
 8028c16:	07eb      	lsls	r3, r5, #31
 8028c18:	d50a      	bpl.n	8028c30 <__pow5mult+0x84>
 8028c1a:	4639      	mov	r1, r7
 8028c1c:	4622      	mov	r2, r4
 8028c1e:	4630      	mov	r0, r6
 8028c20:	f7ff ff1e 	bl	8028a60 <__multiply>
 8028c24:	4639      	mov	r1, r7
 8028c26:	4680      	mov	r8, r0
 8028c28:	4630      	mov	r0, r6
 8028c2a:	f7ff fdfd 	bl	8028828 <_Bfree>
 8028c2e:	4647      	mov	r7, r8
 8028c30:	106d      	asrs	r5, r5, #1
 8028c32:	d00b      	beq.n	8028c4c <__pow5mult+0xa0>
 8028c34:	6820      	ldr	r0, [r4, #0]
 8028c36:	b938      	cbnz	r0, 8028c48 <__pow5mult+0x9c>
 8028c38:	4622      	mov	r2, r4
 8028c3a:	4621      	mov	r1, r4
 8028c3c:	4630      	mov	r0, r6
 8028c3e:	f7ff ff0f 	bl	8028a60 <__multiply>
 8028c42:	6020      	str	r0, [r4, #0]
 8028c44:	f8c0 9000 	str.w	r9, [r0]
 8028c48:	4604      	mov	r4, r0
 8028c4a:	e7e4      	b.n	8028c16 <__pow5mult+0x6a>
 8028c4c:	4638      	mov	r0, r7
 8028c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028c52:	bf00      	nop
 8028c54:	0802dc78 	.word	0x0802dc78
 8028c58:	0802d9be 	.word	0x0802d9be
 8028c5c:	0802db28 	.word	0x0802db28

08028c60 <__lshift>:
 8028c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028c64:	460c      	mov	r4, r1
 8028c66:	6849      	ldr	r1, [r1, #4]
 8028c68:	6923      	ldr	r3, [r4, #16]
 8028c6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8028c6e:	68a3      	ldr	r3, [r4, #8]
 8028c70:	4607      	mov	r7, r0
 8028c72:	4691      	mov	r9, r2
 8028c74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8028c78:	f108 0601 	add.w	r6, r8, #1
 8028c7c:	42b3      	cmp	r3, r6
 8028c7e:	db0b      	blt.n	8028c98 <__lshift+0x38>
 8028c80:	4638      	mov	r0, r7
 8028c82:	f7ff fd91 	bl	80287a8 <_Balloc>
 8028c86:	4605      	mov	r5, r0
 8028c88:	b948      	cbnz	r0, 8028c9e <__lshift+0x3e>
 8028c8a:	4602      	mov	r2, r0
 8028c8c:	4b28      	ldr	r3, [pc, #160]	; (8028d30 <__lshift+0xd0>)
 8028c8e:	4829      	ldr	r0, [pc, #164]	; (8028d34 <__lshift+0xd4>)
 8028c90:	f240 11d9 	movw	r1, #473	; 0x1d9
 8028c94:	f7fc f8b6 	bl	8024e04 <__assert_func>
 8028c98:	3101      	adds	r1, #1
 8028c9a:	005b      	lsls	r3, r3, #1
 8028c9c:	e7ee      	b.n	8028c7c <__lshift+0x1c>
 8028c9e:	2300      	movs	r3, #0
 8028ca0:	f100 0114 	add.w	r1, r0, #20
 8028ca4:	f100 0210 	add.w	r2, r0, #16
 8028ca8:	4618      	mov	r0, r3
 8028caa:	4553      	cmp	r3, sl
 8028cac:	db33      	blt.n	8028d16 <__lshift+0xb6>
 8028cae:	6920      	ldr	r0, [r4, #16]
 8028cb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8028cb4:	f104 0314 	add.w	r3, r4, #20
 8028cb8:	f019 091f 	ands.w	r9, r9, #31
 8028cbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8028cc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8028cc4:	d02b      	beq.n	8028d1e <__lshift+0xbe>
 8028cc6:	f1c9 0e20 	rsb	lr, r9, #32
 8028cca:	468a      	mov	sl, r1
 8028ccc:	2200      	movs	r2, #0
 8028cce:	6818      	ldr	r0, [r3, #0]
 8028cd0:	fa00 f009 	lsl.w	r0, r0, r9
 8028cd4:	4302      	orrs	r2, r0
 8028cd6:	f84a 2b04 	str.w	r2, [sl], #4
 8028cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8028cde:	459c      	cmp	ip, r3
 8028ce0:	fa22 f20e 	lsr.w	r2, r2, lr
 8028ce4:	d8f3      	bhi.n	8028cce <__lshift+0x6e>
 8028ce6:	ebac 0304 	sub.w	r3, ip, r4
 8028cea:	3b15      	subs	r3, #21
 8028cec:	f023 0303 	bic.w	r3, r3, #3
 8028cf0:	3304      	adds	r3, #4
 8028cf2:	f104 0015 	add.w	r0, r4, #21
 8028cf6:	4584      	cmp	ip, r0
 8028cf8:	bf38      	it	cc
 8028cfa:	2304      	movcc	r3, #4
 8028cfc:	50ca      	str	r2, [r1, r3]
 8028cfe:	b10a      	cbz	r2, 8028d04 <__lshift+0xa4>
 8028d00:	f108 0602 	add.w	r6, r8, #2
 8028d04:	3e01      	subs	r6, #1
 8028d06:	4638      	mov	r0, r7
 8028d08:	612e      	str	r6, [r5, #16]
 8028d0a:	4621      	mov	r1, r4
 8028d0c:	f7ff fd8c 	bl	8028828 <_Bfree>
 8028d10:	4628      	mov	r0, r5
 8028d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028d16:	f842 0f04 	str.w	r0, [r2, #4]!
 8028d1a:	3301      	adds	r3, #1
 8028d1c:	e7c5      	b.n	8028caa <__lshift+0x4a>
 8028d1e:	3904      	subs	r1, #4
 8028d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8028d24:	f841 2f04 	str.w	r2, [r1, #4]!
 8028d28:	459c      	cmp	ip, r3
 8028d2a:	d8f9      	bhi.n	8028d20 <__lshift+0xc0>
 8028d2c:	e7ea      	b.n	8028d04 <__lshift+0xa4>
 8028d2e:	bf00      	nop
 8028d30:	0802da34 	.word	0x0802da34
 8028d34:	0802db28 	.word	0x0802db28

08028d38 <__mcmp>:
 8028d38:	b530      	push	{r4, r5, lr}
 8028d3a:	6902      	ldr	r2, [r0, #16]
 8028d3c:	690c      	ldr	r4, [r1, #16]
 8028d3e:	1b12      	subs	r2, r2, r4
 8028d40:	d10e      	bne.n	8028d60 <__mcmp+0x28>
 8028d42:	f100 0314 	add.w	r3, r0, #20
 8028d46:	3114      	adds	r1, #20
 8028d48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8028d4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8028d50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8028d54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8028d58:	42a5      	cmp	r5, r4
 8028d5a:	d003      	beq.n	8028d64 <__mcmp+0x2c>
 8028d5c:	d305      	bcc.n	8028d6a <__mcmp+0x32>
 8028d5e:	2201      	movs	r2, #1
 8028d60:	4610      	mov	r0, r2
 8028d62:	bd30      	pop	{r4, r5, pc}
 8028d64:	4283      	cmp	r3, r0
 8028d66:	d3f3      	bcc.n	8028d50 <__mcmp+0x18>
 8028d68:	e7fa      	b.n	8028d60 <__mcmp+0x28>
 8028d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8028d6e:	e7f7      	b.n	8028d60 <__mcmp+0x28>

08028d70 <__mdiff>:
 8028d70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028d74:	460c      	mov	r4, r1
 8028d76:	4606      	mov	r6, r0
 8028d78:	4611      	mov	r1, r2
 8028d7a:	4620      	mov	r0, r4
 8028d7c:	4617      	mov	r7, r2
 8028d7e:	f7ff ffdb 	bl	8028d38 <__mcmp>
 8028d82:	1e05      	subs	r5, r0, #0
 8028d84:	d110      	bne.n	8028da8 <__mdiff+0x38>
 8028d86:	4629      	mov	r1, r5
 8028d88:	4630      	mov	r0, r6
 8028d8a:	f7ff fd0d 	bl	80287a8 <_Balloc>
 8028d8e:	b930      	cbnz	r0, 8028d9e <__mdiff+0x2e>
 8028d90:	4b39      	ldr	r3, [pc, #228]	; (8028e78 <__mdiff+0x108>)
 8028d92:	4602      	mov	r2, r0
 8028d94:	f240 2132 	movw	r1, #562	; 0x232
 8028d98:	4838      	ldr	r0, [pc, #224]	; (8028e7c <__mdiff+0x10c>)
 8028d9a:	f7fc f833 	bl	8024e04 <__assert_func>
 8028d9e:	2301      	movs	r3, #1
 8028da0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8028da4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028da8:	bfa4      	itt	ge
 8028daa:	463b      	movge	r3, r7
 8028dac:	4627      	movge	r7, r4
 8028dae:	4630      	mov	r0, r6
 8028db0:	6879      	ldr	r1, [r7, #4]
 8028db2:	bfa6      	itte	ge
 8028db4:	461c      	movge	r4, r3
 8028db6:	2500      	movge	r5, #0
 8028db8:	2501      	movlt	r5, #1
 8028dba:	f7ff fcf5 	bl	80287a8 <_Balloc>
 8028dbe:	b920      	cbnz	r0, 8028dca <__mdiff+0x5a>
 8028dc0:	4b2d      	ldr	r3, [pc, #180]	; (8028e78 <__mdiff+0x108>)
 8028dc2:	4602      	mov	r2, r0
 8028dc4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8028dc8:	e7e6      	b.n	8028d98 <__mdiff+0x28>
 8028dca:	693e      	ldr	r6, [r7, #16]
 8028dcc:	60c5      	str	r5, [r0, #12]
 8028dce:	6925      	ldr	r5, [r4, #16]
 8028dd0:	f107 0114 	add.w	r1, r7, #20
 8028dd4:	f104 0914 	add.w	r9, r4, #20
 8028dd8:	f100 0e14 	add.w	lr, r0, #20
 8028ddc:	f107 0210 	add.w	r2, r7, #16
 8028de0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8028de4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8028de8:	46f2      	mov	sl, lr
 8028dea:	2700      	movs	r7, #0
 8028dec:	f859 3b04 	ldr.w	r3, [r9], #4
 8028df0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8028df4:	fa1f f883 	uxth.w	r8, r3
 8028df8:	fa17 f78b 	uxtah	r7, r7, fp
 8028dfc:	0c1b      	lsrs	r3, r3, #16
 8028dfe:	eba7 0808 	sub.w	r8, r7, r8
 8028e02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8028e06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8028e0a:	fa1f f888 	uxth.w	r8, r8
 8028e0e:	141f      	asrs	r7, r3, #16
 8028e10:	454d      	cmp	r5, r9
 8028e12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8028e16:	f84a 3b04 	str.w	r3, [sl], #4
 8028e1a:	d8e7      	bhi.n	8028dec <__mdiff+0x7c>
 8028e1c:	1b2b      	subs	r3, r5, r4
 8028e1e:	3b15      	subs	r3, #21
 8028e20:	f023 0303 	bic.w	r3, r3, #3
 8028e24:	3304      	adds	r3, #4
 8028e26:	3415      	adds	r4, #21
 8028e28:	42a5      	cmp	r5, r4
 8028e2a:	bf38      	it	cc
 8028e2c:	2304      	movcc	r3, #4
 8028e2e:	4419      	add	r1, r3
 8028e30:	4473      	add	r3, lr
 8028e32:	469e      	mov	lr, r3
 8028e34:	460d      	mov	r5, r1
 8028e36:	4565      	cmp	r5, ip
 8028e38:	d30e      	bcc.n	8028e58 <__mdiff+0xe8>
 8028e3a:	f10c 0203 	add.w	r2, ip, #3
 8028e3e:	1a52      	subs	r2, r2, r1
 8028e40:	f022 0203 	bic.w	r2, r2, #3
 8028e44:	3903      	subs	r1, #3
 8028e46:	458c      	cmp	ip, r1
 8028e48:	bf38      	it	cc
 8028e4a:	2200      	movcc	r2, #0
 8028e4c:	441a      	add	r2, r3
 8028e4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8028e52:	b17b      	cbz	r3, 8028e74 <__mdiff+0x104>
 8028e54:	6106      	str	r6, [r0, #16]
 8028e56:	e7a5      	b.n	8028da4 <__mdiff+0x34>
 8028e58:	f855 8b04 	ldr.w	r8, [r5], #4
 8028e5c:	fa17 f488 	uxtah	r4, r7, r8
 8028e60:	1422      	asrs	r2, r4, #16
 8028e62:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8028e66:	b2a4      	uxth	r4, r4
 8028e68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8028e6c:	f84e 4b04 	str.w	r4, [lr], #4
 8028e70:	1417      	asrs	r7, r2, #16
 8028e72:	e7e0      	b.n	8028e36 <__mdiff+0xc6>
 8028e74:	3e01      	subs	r6, #1
 8028e76:	e7ea      	b.n	8028e4e <__mdiff+0xde>
 8028e78:	0802da34 	.word	0x0802da34
 8028e7c:	0802db28 	.word	0x0802db28

08028e80 <__ulp>:
 8028e80:	b082      	sub	sp, #8
 8028e82:	ed8d 0b00 	vstr	d0, [sp]
 8028e86:	9b01      	ldr	r3, [sp, #4]
 8028e88:	4912      	ldr	r1, [pc, #72]	; (8028ed4 <__ulp+0x54>)
 8028e8a:	4019      	ands	r1, r3
 8028e8c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8028e90:	2900      	cmp	r1, #0
 8028e92:	dd05      	ble.n	8028ea0 <__ulp+0x20>
 8028e94:	2200      	movs	r2, #0
 8028e96:	460b      	mov	r3, r1
 8028e98:	ec43 2b10 	vmov	d0, r2, r3
 8028e9c:	b002      	add	sp, #8
 8028e9e:	4770      	bx	lr
 8028ea0:	4249      	negs	r1, r1
 8028ea2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8028ea6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8028eaa:	f04f 0200 	mov.w	r2, #0
 8028eae:	f04f 0300 	mov.w	r3, #0
 8028eb2:	da04      	bge.n	8028ebe <__ulp+0x3e>
 8028eb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8028eb8:	fa41 f300 	asr.w	r3, r1, r0
 8028ebc:	e7ec      	b.n	8028e98 <__ulp+0x18>
 8028ebe:	f1a0 0114 	sub.w	r1, r0, #20
 8028ec2:	291e      	cmp	r1, #30
 8028ec4:	bfda      	itte	le
 8028ec6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8028eca:	fa20 f101 	lsrle.w	r1, r0, r1
 8028ece:	2101      	movgt	r1, #1
 8028ed0:	460a      	mov	r2, r1
 8028ed2:	e7e1      	b.n	8028e98 <__ulp+0x18>
 8028ed4:	7ff00000 	.word	0x7ff00000

08028ed8 <__b2d>:
 8028ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028eda:	6905      	ldr	r5, [r0, #16]
 8028edc:	f100 0714 	add.w	r7, r0, #20
 8028ee0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8028ee4:	1f2e      	subs	r6, r5, #4
 8028ee6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8028eea:	4620      	mov	r0, r4
 8028eec:	f7ff fd52 	bl	8028994 <__hi0bits>
 8028ef0:	f1c0 0320 	rsb	r3, r0, #32
 8028ef4:	280a      	cmp	r0, #10
 8028ef6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8028f74 <__b2d+0x9c>
 8028efa:	600b      	str	r3, [r1, #0]
 8028efc:	dc14      	bgt.n	8028f28 <__b2d+0x50>
 8028efe:	f1c0 0e0b 	rsb	lr, r0, #11
 8028f02:	fa24 f10e 	lsr.w	r1, r4, lr
 8028f06:	42b7      	cmp	r7, r6
 8028f08:	ea41 030c 	orr.w	r3, r1, ip
 8028f0c:	bf34      	ite	cc
 8028f0e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8028f12:	2100      	movcs	r1, #0
 8028f14:	3015      	adds	r0, #21
 8028f16:	fa04 f000 	lsl.w	r0, r4, r0
 8028f1a:	fa21 f10e 	lsr.w	r1, r1, lr
 8028f1e:	ea40 0201 	orr.w	r2, r0, r1
 8028f22:	ec43 2b10 	vmov	d0, r2, r3
 8028f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028f28:	42b7      	cmp	r7, r6
 8028f2a:	bf3a      	itte	cc
 8028f2c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8028f30:	f1a5 0608 	subcc.w	r6, r5, #8
 8028f34:	2100      	movcs	r1, #0
 8028f36:	380b      	subs	r0, #11
 8028f38:	d017      	beq.n	8028f6a <__b2d+0x92>
 8028f3a:	f1c0 0c20 	rsb	ip, r0, #32
 8028f3e:	fa04 f500 	lsl.w	r5, r4, r0
 8028f42:	42be      	cmp	r6, r7
 8028f44:	fa21 f40c 	lsr.w	r4, r1, ip
 8028f48:	ea45 0504 	orr.w	r5, r5, r4
 8028f4c:	bf8c      	ite	hi
 8028f4e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8028f52:	2400      	movls	r4, #0
 8028f54:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8028f58:	fa01 f000 	lsl.w	r0, r1, r0
 8028f5c:	fa24 f40c 	lsr.w	r4, r4, ip
 8028f60:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8028f64:	ea40 0204 	orr.w	r2, r0, r4
 8028f68:	e7db      	b.n	8028f22 <__b2d+0x4a>
 8028f6a:	ea44 030c 	orr.w	r3, r4, ip
 8028f6e:	460a      	mov	r2, r1
 8028f70:	e7d7      	b.n	8028f22 <__b2d+0x4a>
 8028f72:	bf00      	nop
 8028f74:	3ff00000 	.word	0x3ff00000

08028f78 <__d2b>:
 8028f78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8028f7c:	4689      	mov	r9, r1
 8028f7e:	2101      	movs	r1, #1
 8028f80:	ec57 6b10 	vmov	r6, r7, d0
 8028f84:	4690      	mov	r8, r2
 8028f86:	f7ff fc0f 	bl	80287a8 <_Balloc>
 8028f8a:	4604      	mov	r4, r0
 8028f8c:	b930      	cbnz	r0, 8028f9c <__d2b+0x24>
 8028f8e:	4602      	mov	r2, r0
 8028f90:	4b25      	ldr	r3, [pc, #148]	; (8029028 <__d2b+0xb0>)
 8028f92:	4826      	ldr	r0, [pc, #152]	; (802902c <__d2b+0xb4>)
 8028f94:	f240 310a 	movw	r1, #778	; 0x30a
 8028f98:	f7fb ff34 	bl	8024e04 <__assert_func>
 8028f9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8028fa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8028fa4:	bb35      	cbnz	r5, 8028ff4 <__d2b+0x7c>
 8028fa6:	2e00      	cmp	r6, #0
 8028fa8:	9301      	str	r3, [sp, #4]
 8028faa:	d028      	beq.n	8028ffe <__d2b+0x86>
 8028fac:	4668      	mov	r0, sp
 8028fae:	9600      	str	r6, [sp, #0]
 8028fb0:	f7ff fd10 	bl	80289d4 <__lo0bits>
 8028fb4:	9900      	ldr	r1, [sp, #0]
 8028fb6:	b300      	cbz	r0, 8028ffa <__d2b+0x82>
 8028fb8:	9a01      	ldr	r2, [sp, #4]
 8028fba:	f1c0 0320 	rsb	r3, r0, #32
 8028fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8028fc2:	430b      	orrs	r3, r1
 8028fc4:	40c2      	lsrs	r2, r0
 8028fc6:	6163      	str	r3, [r4, #20]
 8028fc8:	9201      	str	r2, [sp, #4]
 8028fca:	9b01      	ldr	r3, [sp, #4]
 8028fcc:	61a3      	str	r3, [r4, #24]
 8028fce:	2b00      	cmp	r3, #0
 8028fd0:	bf14      	ite	ne
 8028fd2:	2202      	movne	r2, #2
 8028fd4:	2201      	moveq	r2, #1
 8028fd6:	6122      	str	r2, [r4, #16]
 8028fd8:	b1d5      	cbz	r5, 8029010 <__d2b+0x98>
 8028fda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8028fde:	4405      	add	r5, r0
 8028fe0:	f8c9 5000 	str.w	r5, [r9]
 8028fe4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8028fe8:	f8c8 0000 	str.w	r0, [r8]
 8028fec:	4620      	mov	r0, r4
 8028fee:	b003      	add	sp, #12
 8028ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028ff4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028ff8:	e7d5      	b.n	8028fa6 <__d2b+0x2e>
 8028ffa:	6161      	str	r1, [r4, #20]
 8028ffc:	e7e5      	b.n	8028fca <__d2b+0x52>
 8028ffe:	a801      	add	r0, sp, #4
 8029000:	f7ff fce8 	bl	80289d4 <__lo0bits>
 8029004:	9b01      	ldr	r3, [sp, #4]
 8029006:	6163      	str	r3, [r4, #20]
 8029008:	2201      	movs	r2, #1
 802900a:	6122      	str	r2, [r4, #16]
 802900c:	3020      	adds	r0, #32
 802900e:	e7e3      	b.n	8028fd8 <__d2b+0x60>
 8029010:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8029014:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8029018:	f8c9 0000 	str.w	r0, [r9]
 802901c:	6918      	ldr	r0, [r3, #16]
 802901e:	f7ff fcb9 	bl	8028994 <__hi0bits>
 8029022:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8029026:	e7df      	b.n	8028fe8 <__d2b+0x70>
 8029028:	0802da34 	.word	0x0802da34
 802902c:	0802db28 	.word	0x0802db28

08029030 <__ratio>:
 8029030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029034:	468a      	mov	sl, r1
 8029036:	4669      	mov	r1, sp
 8029038:	4683      	mov	fp, r0
 802903a:	f7ff ff4d 	bl	8028ed8 <__b2d>
 802903e:	a901      	add	r1, sp, #4
 8029040:	4650      	mov	r0, sl
 8029042:	ec59 8b10 	vmov	r8, r9, d0
 8029046:	ee10 6a10 	vmov	r6, s0
 802904a:	f7ff ff45 	bl	8028ed8 <__b2d>
 802904e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8029052:	f8da 2010 	ldr.w	r2, [sl, #16]
 8029056:	eba3 0c02 	sub.w	ip, r3, r2
 802905a:	e9dd 3200 	ldrd	r3, r2, [sp]
 802905e:	1a9b      	subs	r3, r3, r2
 8029060:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8029064:	ec55 4b10 	vmov	r4, r5, d0
 8029068:	2b00      	cmp	r3, #0
 802906a:	ee10 0a10 	vmov	r0, s0
 802906e:	bfce      	itee	gt
 8029070:	464a      	movgt	r2, r9
 8029072:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8029076:	462a      	movle	r2, r5
 8029078:	464f      	mov	r7, r9
 802907a:	4629      	mov	r1, r5
 802907c:	bfcc      	ite	gt
 802907e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8029082:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8029086:	ec47 6b17 	vmov	d7, r6, r7
 802908a:	ec41 0b16 	vmov	d6, r0, r1
 802908e:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8029092:	b003      	add	sp, #12
 8029094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029098 <__copybits>:
 8029098:	3901      	subs	r1, #1
 802909a:	b570      	push	{r4, r5, r6, lr}
 802909c:	1149      	asrs	r1, r1, #5
 802909e:	6914      	ldr	r4, [r2, #16]
 80290a0:	3101      	adds	r1, #1
 80290a2:	f102 0314 	add.w	r3, r2, #20
 80290a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80290aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80290ae:	1f05      	subs	r5, r0, #4
 80290b0:	42a3      	cmp	r3, r4
 80290b2:	d30c      	bcc.n	80290ce <__copybits+0x36>
 80290b4:	1aa3      	subs	r3, r4, r2
 80290b6:	3b11      	subs	r3, #17
 80290b8:	f023 0303 	bic.w	r3, r3, #3
 80290bc:	3211      	adds	r2, #17
 80290be:	42a2      	cmp	r2, r4
 80290c0:	bf88      	it	hi
 80290c2:	2300      	movhi	r3, #0
 80290c4:	4418      	add	r0, r3
 80290c6:	2300      	movs	r3, #0
 80290c8:	4288      	cmp	r0, r1
 80290ca:	d305      	bcc.n	80290d8 <__copybits+0x40>
 80290cc:	bd70      	pop	{r4, r5, r6, pc}
 80290ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80290d2:	f845 6f04 	str.w	r6, [r5, #4]!
 80290d6:	e7eb      	b.n	80290b0 <__copybits+0x18>
 80290d8:	f840 3b04 	str.w	r3, [r0], #4
 80290dc:	e7f4      	b.n	80290c8 <__copybits+0x30>

080290de <__any_on>:
 80290de:	f100 0214 	add.w	r2, r0, #20
 80290e2:	6900      	ldr	r0, [r0, #16]
 80290e4:	114b      	asrs	r3, r1, #5
 80290e6:	4298      	cmp	r0, r3
 80290e8:	b510      	push	{r4, lr}
 80290ea:	db11      	blt.n	8029110 <__any_on+0x32>
 80290ec:	dd0a      	ble.n	8029104 <__any_on+0x26>
 80290ee:	f011 011f 	ands.w	r1, r1, #31
 80290f2:	d007      	beq.n	8029104 <__any_on+0x26>
 80290f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80290f8:	fa24 f001 	lsr.w	r0, r4, r1
 80290fc:	fa00 f101 	lsl.w	r1, r0, r1
 8029100:	428c      	cmp	r4, r1
 8029102:	d10b      	bne.n	802911c <__any_on+0x3e>
 8029104:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8029108:	4293      	cmp	r3, r2
 802910a:	d803      	bhi.n	8029114 <__any_on+0x36>
 802910c:	2000      	movs	r0, #0
 802910e:	bd10      	pop	{r4, pc}
 8029110:	4603      	mov	r3, r0
 8029112:	e7f7      	b.n	8029104 <__any_on+0x26>
 8029114:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8029118:	2900      	cmp	r1, #0
 802911a:	d0f5      	beq.n	8029108 <__any_on+0x2a>
 802911c:	2001      	movs	r0, #1
 802911e:	e7f6      	b.n	802910e <__any_on+0x30>

08029120 <_calloc_r>:
 8029120:	b513      	push	{r0, r1, r4, lr}
 8029122:	434a      	muls	r2, r1
 8029124:	4611      	mov	r1, r2
 8029126:	9201      	str	r2, [sp, #4]
 8029128:	f7fb ff50 	bl	8024fcc <_malloc_r>
 802912c:	4604      	mov	r4, r0
 802912e:	b118      	cbz	r0, 8029138 <_calloc_r+0x18>
 8029130:	9a01      	ldr	r2, [sp, #4]
 8029132:	2100      	movs	r1, #0
 8029134:	f7fb fef2 	bl	8024f1c <memset>
 8029138:	4620      	mov	r0, r4
 802913a:	b002      	add	sp, #8
 802913c:	bd10      	pop	{r4, pc}

0802913e <_realloc_r>:
 802913e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029140:	4607      	mov	r7, r0
 8029142:	4614      	mov	r4, r2
 8029144:	460e      	mov	r6, r1
 8029146:	b921      	cbnz	r1, 8029152 <_realloc_r+0x14>
 8029148:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802914c:	4611      	mov	r1, r2
 802914e:	f7fb bf3d 	b.w	8024fcc <_malloc_r>
 8029152:	b922      	cbnz	r2, 802915e <_realloc_r+0x20>
 8029154:	f7fb feea 	bl	8024f2c <_free_r>
 8029158:	4625      	mov	r5, r4
 802915a:	4628      	mov	r0, r5
 802915c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802915e:	f000 fa2f 	bl	80295c0 <_malloc_usable_size_r>
 8029162:	42a0      	cmp	r0, r4
 8029164:	d20f      	bcs.n	8029186 <_realloc_r+0x48>
 8029166:	4621      	mov	r1, r4
 8029168:	4638      	mov	r0, r7
 802916a:	f7fb ff2f 	bl	8024fcc <_malloc_r>
 802916e:	4605      	mov	r5, r0
 8029170:	2800      	cmp	r0, #0
 8029172:	d0f2      	beq.n	802915a <_realloc_r+0x1c>
 8029174:	4631      	mov	r1, r6
 8029176:	4622      	mov	r2, r4
 8029178:	f7fb fec2 	bl	8024f00 <memcpy>
 802917c:	4631      	mov	r1, r6
 802917e:	4638      	mov	r0, r7
 8029180:	f7fb fed4 	bl	8024f2c <_free_r>
 8029184:	e7e9      	b.n	802915a <_realloc_r+0x1c>
 8029186:	4635      	mov	r5, r6
 8029188:	e7e7      	b.n	802915a <_realloc_r+0x1c>

0802918a <__ssputs_r>:
 802918a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802918e:	688e      	ldr	r6, [r1, #8]
 8029190:	429e      	cmp	r6, r3
 8029192:	4682      	mov	sl, r0
 8029194:	460c      	mov	r4, r1
 8029196:	4690      	mov	r8, r2
 8029198:	461f      	mov	r7, r3
 802919a:	d838      	bhi.n	802920e <__ssputs_r+0x84>
 802919c:	898a      	ldrh	r2, [r1, #12]
 802919e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80291a2:	d032      	beq.n	802920a <__ssputs_r+0x80>
 80291a4:	6825      	ldr	r5, [r4, #0]
 80291a6:	6909      	ldr	r1, [r1, #16]
 80291a8:	eba5 0901 	sub.w	r9, r5, r1
 80291ac:	6965      	ldr	r5, [r4, #20]
 80291ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80291b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80291b6:	3301      	adds	r3, #1
 80291b8:	444b      	add	r3, r9
 80291ba:	106d      	asrs	r5, r5, #1
 80291bc:	429d      	cmp	r5, r3
 80291be:	bf38      	it	cc
 80291c0:	461d      	movcc	r5, r3
 80291c2:	0553      	lsls	r3, r2, #21
 80291c4:	d531      	bpl.n	802922a <__ssputs_r+0xa0>
 80291c6:	4629      	mov	r1, r5
 80291c8:	f7fb ff00 	bl	8024fcc <_malloc_r>
 80291cc:	4606      	mov	r6, r0
 80291ce:	b950      	cbnz	r0, 80291e6 <__ssputs_r+0x5c>
 80291d0:	230c      	movs	r3, #12
 80291d2:	f8ca 3000 	str.w	r3, [sl]
 80291d6:	89a3      	ldrh	r3, [r4, #12]
 80291d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80291dc:	81a3      	strh	r3, [r4, #12]
 80291de:	f04f 30ff 	mov.w	r0, #4294967295
 80291e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80291e6:	6921      	ldr	r1, [r4, #16]
 80291e8:	464a      	mov	r2, r9
 80291ea:	f7fb fe89 	bl	8024f00 <memcpy>
 80291ee:	89a3      	ldrh	r3, [r4, #12]
 80291f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80291f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80291f8:	81a3      	strh	r3, [r4, #12]
 80291fa:	6126      	str	r6, [r4, #16]
 80291fc:	6165      	str	r5, [r4, #20]
 80291fe:	444e      	add	r6, r9
 8029200:	eba5 0509 	sub.w	r5, r5, r9
 8029204:	6026      	str	r6, [r4, #0]
 8029206:	60a5      	str	r5, [r4, #8]
 8029208:	463e      	mov	r6, r7
 802920a:	42be      	cmp	r6, r7
 802920c:	d900      	bls.n	8029210 <__ssputs_r+0x86>
 802920e:	463e      	mov	r6, r7
 8029210:	4632      	mov	r2, r6
 8029212:	6820      	ldr	r0, [r4, #0]
 8029214:	4641      	mov	r1, r8
 8029216:	f7ff faa1 	bl	802875c <memmove>
 802921a:	68a3      	ldr	r3, [r4, #8]
 802921c:	6822      	ldr	r2, [r4, #0]
 802921e:	1b9b      	subs	r3, r3, r6
 8029220:	4432      	add	r2, r6
 8029222:	60a3      	str	r3, [r4, #8]
 8029224:	6022      	str	r2, [r4, #0]
 8029226:	2000      	movs	r0, #0
 8029228:	e7db      	b.n	80291e2 <__ssputs_r+0x58>
 802922a:	462a      	mov	r2, r5
 802922c:	f7ff ff87 	bl	802913e <_realloc_r>
 8029230:	4606      	mov	r6, r0
 8029232:	2800      	cmp	r0, #0
 8029234:	d1e1      	bne.n	80291fa <__ssputs_r+0x70>
 8029236:	6921      	ldr	r1, [r4, #16]
 8029238:	4650      	mov	r0, sl
 802923a:	f7fb fe77 	bl	8024f2c <_free_r>
 802923e:	e7c7      	b.n	80291d0 <__ssputs_r+0x46>

08029240 <_svfiprintf_r>:
 8029240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029244:	4698      	mov	r8, r3
 8029246:	898b      	ldrh	r3, [r1, #12]
 8029248:	061b      	lsls	r3, r3, #24
 802924a:	b09d      	sub	sp, #116	; 0x74
 802924c:	4607      	mov	r7, r0
 802924e:	460d      	mov	r5, r1
 8029250:	4614      	mov	r4, r2
 8029252:	d50e      	bpl.n	8029272 <_svfiprintf_r+0x32>
 8029254:	690b      	ldr	r3, [r1, #16]
 8029256:	b963      	cbnz	r3, 8029272 <_svfiprintf_r+0x32>
 8029258:	2140      	movs	r1, #64	; 0x40
 802925a:	f7fb feb7 	bl	8024fcc <_malloc_r>
 802925e:	6028      	str	r0, [r5, #0]
 8029260:	6128      	str	r0, [r5, #16]
 8029262:	b920      	cbnz	r0, 802926e <_svfiprintf_r+0x2e>
 8029264:	230c      	movs	r3, #12
 8029266:	603b      	str	r3, [r7, #0]
 8029268:	f04f 30ff 	mov.w	r0, #4294967295
 802926c:	e0d1      	b.n	8029412 <_svfiprintf_r+0x1d2>
 802926e:	2340      	movs	r3, #64	; 0x40
 8029270:	616b      	str	r3, [r5, #20]
 8029272:	2300      	movs	r3, #0
 8029274:	9309      	str	r3, [sp, #36]	; 0x24
 8029276:	2320      	movs	r3, #32
 8029278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802927c:	f8cd 800c 	str.w	r8, [sp, #12]
 8029280:	2330      	movs	r3, #48	; 0x30
 8029282:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802942c <_svfiprintf_r+0x1ec>
 8029286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802928a:	f04f 0901 	mov.w	r9, #1
 802928e:	4623      	mov	r3, r4
 8029290:	469a      	mov	sl, r3
 8029292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029296:	b10a      	cbz	r2, 802929c <_svfiprintf_r+0x5c>
 8029298:	2a25      	cmp	r2, #37	; 0x25
 802929a:	d1f9      	bne.n	8029290 <_svfiprintf_r+0x50>
 802929c:	ebba 0b04 	subs.w	fp, sl, r4
 80292a0:	d00b      	beq.n	80292ba <_svfiprintf_r+0x7a>
 80292a2:	465b      	mov	r3, fp
 80292a4:	4622      	mov	r2, r4
 80292a6:	4629      	mov	r1, r5
 80292a8:	4638      	mov	r0, r7
 80292aa:	f7ff ff6e 	bl	802918a <__ssputs_r>
 80292ae:	3001      	adds	r0, #1
 80292b0:	f000 80aa 	beq.w	8029408 <_svfiprintf_r+0x1c8>
 80292b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80292b6:	445a      	add	r2, fp
 80292b8:	9209      	str	r2, [sp, #36]	; 0x24
 80292ba:	f89a 3000 	ldrb.w	r3, [sl]
 80292be:	2b00      	cmp	r3, #0
 80292c0:	f000 80a2 	beq.w	8029408 <_svfiprintf_r+0x1c8>
 80292c4:	2300      	movs	r3, #0
 80292c6:	f04f 32ff 	mov.w	r2, #4294967295
 80292ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80292ce:	f10a 0a01 	add.w	sl, sl, #1
 80292d2:	9304      	str	r3, [sp, #16]
 80292d4:	9307      	str	r3, [sp, #28]
 80292d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80292da:	931a      	str	r3, [sp, #104]	; 0x68
 80292dc:	4654      	mov	r4, sl
 80292de:	2205      	movs	r2, #5
 80292e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80292e4:	4851      	ldr	r0, [pc, #324]	; (802942c <_svfiprintf_r+0x1ec>)
 80292e6:	f7d6 ffb3 	bl	8000250 <memchr>
 80292ea:	9a04      	ldr	r2, [sp, #16]
 80292ec:	b9d8      	cbnz	r0, 8029326 <_svfiprintf_r+0xe6>
 80292ee:	06d0      	lsls	r0, r2, #27
 80292f0:	bf44      	itt	mi
 80292f2:	2320      	movmi	r3, #32
 80292f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80292f8:	0711      	lsls	r1, r2, #28
 80292fa:	bf44      	itt	mi
 80292fc:	232b      	movmi	r3, #43	; 0x2b
 80292fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029302:	f89a 3000 	ldrb.w	r3, [sl]
 8029306:	2b2a      	cmp	r3, #42	; 0x2a
 8029308:	d015      	beq.n	8029336 <_svfiprintf_r+0xf6>
 802930a:	9a07      	ldr	r2, [sp, #28]
 802930c:	4654      	mov	r4, sl
 802930e:	2000      	movs	r0, #0
 8029310:	f04f 0c0a 	mov.w	ip, #10
 8029314:	4621      	mov	r1, r4
 8029316:	f811 3b01 	ldrb.w	r3, [r1], #1
 802931a:	3b30      	subs	r3, #48	; 0x30
 802931c:	2b09      	cmp	r3, #9
 802931e:	d94e      	bls.n	80293be <_svfiprintf_r+0x17e>
 8029320:	b1b0      	cbz	r0, 8029350 <_svfiprintf_r+0x110>
 8029322:	9207      	str	r2, [sp, #28]
 8029324:	e014      	b.n	8029350 <_svfiprintf_r+0x110>
 8029326:	eba0 0308 	sub.w	r3, r0, r8
 802932a:	fa09 f303 	lsl.w	r3, r9, r3
 802932e:	4313      	orrs	r3, r2
 8029330:	9304      	str	r3, [sp, #16]
 8029332:	46a2      	mov	sl, r4
 8029334:	e7d2      	b.n	80292dc <_svfiprintf_r+0x9c>
 8029336:	9b03      	ldr	r3, [sp, #12]
 8029338:	1d19      	adds	r1, r3, #4
 802933a:	681b      	ldr	r3, [r3, #0]
 802933c:	9103      	str	r1, [sp, #12]
 802933e:	2b00      	cmp	r3, #0
 8029340:	bfbb      	ittet	lt
 8029342:	425b      	neglt	r3, r3
 8029344:	f042 0202 	orrlt.w	r2, r2, #2
 8029348:	9307      	strge	r3, [sp, #28]
 802934a:	9307      	strlt	r3, [sp, #28]
 802934c:	bfb8      	it	lt
 802934e:	9204      	strlt	r2, [sp, #16]
 8029350:	7823      	ldrb	r3, [r4, #0]
 8029352:	2b2e      	cmp	r3, #46	; 0x2e
 8029354:	d10c      	bne.n	8029370 <_svfiprintf_r+0x130>
 8029356:	7863      	ldrb	r3, [r4, #1]
 8029358:	2b2a      	cmp	r3, #42	; 0x2a
 802935a:	d135      	bne.n	80293c8 <_svfiprintf_r+0x188>
 802935c:	9b03      	ldr	r3, [sp, #12]
 802935e:	1d1a      	adds	r2, r3, #4
 8029360:	681b      	ldr	r3, [r3, #0]
 8029362:	9203      	str	r2, [sp, #12]
 8029364:	2b00      	cmp	r3, #0
 8029366:	bfb8      	it	lt
 8029368:	f04f 33ff 	movlt.w	r3, #4294967295
 802936c:	3402      	adds	r4, #2
 802936e:	9305      	str	r3, [sp, #20]
 8029370:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802943c <_svfiprintf_r+0x1fc>
 8029374:	7821      	ldrb	r1, [r4, #0]
 8029376:	2203      	movs	r2, #3
 8029378:	4650      	mov	r0, sl
 802937a:	f7d6 ff69 	bl	8000250 <memchr>
 802937e:	b140      	cbz	r0, 8029392 <_svfiprintf_r+0x152>
 8029380:	2340      	movs	r3, #64	; 0x40
 8029382:	eba0 000a 	sub.w	r0, r0, sl
 8029386:	fa03 f000 	lsl.w	r0, r3, r0
 802938a:	9b04      	ldr	r3, [sp, #16]
 802938c:	4303      	orrs	r3, r0
 802938e:	3401      	adds	r4, #1
 8029390:	9304      	str	r3, [sp, #16]
 8029392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029396:	4826      	ldr	r0, [pc, #152]	; (8029430 <_svfiprintf_r+0x1f0>)
 8029398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802939c:	2206      	movs	r2, #6
 802939e:	f7d6 ff57 	bl	8000250 <memchr>
 80293a2:	2800      	cmp	r0, #0
 80293a4:	d038      	beq.n	8029418 <_svfiprintf_r+0x1d8>
 80293a6:	4b23      	ldr	r3, [pc, #140]	; (8029434 <_svfiprintf_r+0x1f4>)
 80293a8:	bb1b      	cbnz	r3, 80293f2 <_svfiprintf_r+0x1b2>
 80293aa:	9b03      	ldr	r3, [sp, #12]
 80293ac:	3307      	adds	r3, #7
 80293ae:	f023 0307 	bic.w	r3, r3, #7
 80293b2:	3308      	adds	r3, #8
 80293b4:	9303      	str	r3, [sp, #12]
 80293b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80293b8:	4433      	add	r3, r6
 80293ba:	9309      	str	r3, [sp, #36]	; 0x24
 80293bc:	e767      	b.n	802928e <_svfiprintf_r+0x4e>
 80293be:	fb0c 3202 	mla	r2, ip, r2, r3
 80293c2:	460c      	mov	r4, r1
 80293c4:	2001      	movs	r0, #1
 80293c6:	e7a5      	b.n	8029314 <_svfiprintf_r+0xd4>
 80293c8:	2300      	movs	r3, #0
 80293ca:	3401      	adds	r4, #1
 80293cc:	9305      	str	r3, [sp, #20]
 80293ce:	4619      	mov	r1, r3
 80293d0:	f04f 0c0a 	mov.w	ip, #10
 80293d4:	4620      	mov	r0, r4
 80293d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80293da:	3a30      	subs	r2, #48	; 0x30
 80293dc:	2a09      	cmp	r2, #9
 80293de:	d903      	bls.n	80293e8 <_svfiprintf_r+0x1a8>
 80293e0:	2b00      	cmp	r3, #0
 80293e2:	d0c5      	beq.n	8029370 <_svfiprintf_r+0x130>
 80293e4:	9105      	str	r1, [sp, #20]
 80293e6:	e7c3      	b.n	8029370 <_svfiprintf_r+0x130>
 80293e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80293ec:	4604      	mov	r4, r0
 80293ee:	2301      	movs	r3, #1
 80293f0:	e7f0      	b.n	80293d4 <_svfiprintf_r+0x194>
 80293f2:	ab03      	add	r3, sp, #12
 80293f4:	9300      	str	r3, [sp, #0]
 80293f6:	462a      	mov	r2, r5
 80293f8:	4b0f      	ldr	r3, [pc, #60]	; (8029438 <_svfiprintf_r+0x1f8>)
 80293fa:	a904      	add	r1, sp, #16
 80293fc:	4638      	mov	r0, r7
 80293fe:	f7fc f82b 	bl	8025458 <_printf_float>
 8029402:	1c42      	adds	r2, r0, #1
 8029404:	4606      	mov	r6, r0
 8029406:	d1d6      	bne.n	80293b6 <_svfiprintf_r+0x176>
 8029408:	89ab      	ldrh	r3, [r5, #12]
 802940a:	065b      	lsls	r3, r3, #25
 802940c:	f53f af2c 	bmi.w	8029268 <_svfiprintf_r+0x28>
 8029410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029412:	b01d      	add	sp, #116	; 0x74
 8029414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029418:	ab03      	add	r3, sp, #12
 802941a:	9300      	str	r3, [sp, #0]
 802941c:	462a      	mov	r2, r5
 802941e:	4b06      	ldr	r3, [pc, #24]	; (8029438 <_svfiprintf_r+0x1f8>)
 8029420:	a904      	add	r1, sp, #16
 8029422:	4638      	mov	r0, r7
 8029424:	f7fc faa4 	bl	8025970 <_printf_i>
 8029428:	e7eb      	b.n	8029402 <_svfiprintf_r+0x1c2>
 802942a:	bf00      	nop
 802942c:	0802d814 	.word	0x0802d814
 8029430:	0802d81e 	.word	0x0802d81e
 8029434:	08025459 	.word	0x08025459
 8029438:	0802918b 	.word	0x0802918b
 802943c:	0802d81a 	.word	0x0802d81a

08029440 <nan>:
 8029440:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8029448 <nan+0x8>
 8029444:	4770      	bx	lr
 8029446:	bf00      	nop
 8029448:	00000000 	.word	0x00000000
 802944c:	7ff80000 	.word	0x7ff80000

08029450 <__sread>:
 8029450:	b510      	push	{r4, lr}
 8029452:	460c      	mov	r4, r1
 8029454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029458:	f000 f8ba 	bl	80295d0 <_read_r>
 802945c:	2800      	cmp	r0, #0
 802945e:	bfab      	itete	ge
 8029460:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8029462:	89a3      	ldrhlt	r3, [r4, #12]
 8029464:	181b      	addge	r3, r3, r0
 8029466:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802946a:	bfac      	ite	ge
 802946c:	6563      	strge	r3, [r4, #84]	; 0x54
 802946e:	81a3      	strhlt	r3, [r4, #12]
 8029470:	bd10      	pop	{r4, pc}

08029472 <__swrite>:
 8029472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029476:	461f      	mov	r7, r3
 8029478:	898b      	ldrh	r3, [r1, #12]
 802947a:	05db      	lsls	r3, r3, #23
 802947c:	4605      	mov	r5, r0
 802947e:	460c      	mov	r4, r1
 8029480:	4616      	mov	r6, r2
 8029482:	d505      	bpl.n	8029490 <__swrite+0x1e>
 8029484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029488:	2302      	movs	r3, #2
 802948a:	2200      	movs	r2, #0
 802948c:	f000 f886 	bl	802959c <_lseek_r>
 8029490:	89a3      	ldrh	r3, [r4, #12]
 8029492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802949a:	81a3      	strh	r3, [r4, #12]
 802949c:	4632      	mov	r2, r6
 802949e:	463b      	mov	r3, r7
 80294a0:	4628      	mov	r0, r5
 80294a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80294a6:	f000 b835 	b.w	8029514 <_write_r>

080294aa <__sseek>:
 80294aa:	b510      	push	{r4, lr}
 80294ac:	460c      	mov	r4, r1
 80294ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80294b2:	f000 f873 	bl	802959c <_lseek_r>
 80294b6:	1c43      	adds	r3, r0, #1
 80294b8:	89a3      	ldrh	r3, [r4, #12]
 80294ba:	bf15      	itete	ne
 80294bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80294be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80294c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80294c6:	81a3      	strheq	r3, [r4, #12]
 80294c8:	bf18      	it	ne
 80294ca:	81a3      	strhne	r3, [r4, #12]
 80294cc:	bd10      	pop	{r4, pc}

080294ce <__sclose>:
 80294ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80294d2:	f000 b831 	b.w	8029538 <_close_r>

080294d6 <strncmp>:
 80294d6:	b510      	push	{r4, lr}
 80294d8:	b16a      	cbz	r2, 80294f6 <strncmp+0x20>
 80294da:	3901      	subs	r1, #1
 80294dc:	1884      	adds	r4, r0, r2
 80294de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80294e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80294e6:	4293      	cmp	r3, r2
 80294e8:	d103      	bne.n	80294f2 <strncmp+0x1c>
 80294ea:	42a0      	cmp	r0, r4
 80294ec:	d001      	beq.n	80294f2 <strncmp+0x1c>
 80294ee:	2b00      	cmp	r3, #0
 80294f0:	d1f5      	bne.n	80294de <strncmp+0x8>
 80294f2:	1a98      	subs	r0, r3, r2
 80294f4:	bd10      	pop	{r4, pc}
 80294f6:	4610      	mov	r0, r2
 80294f8:	e7fc      	b.n	80294f4 <strncmp+0x1e>

080294fa <__ascii_wctomb>:
 80294fa:	b149      	cbz	r1, 8029510 <__ascii_wctomb+0x16>
 80294fc:	2aff      	cmp	r2, #255	; 0xff
 80294fe:	bf85      	ittet	hi
 8029500:	238a      	movhi	r3, #138	; 0x8a
 8029502:	6003      	strhi	r3, [r0, #0]
 8029504:	700a      	strbls	r2, [r1, #0]
 8029506:	f04f 30ff 	movhi.w	r0, #4294967295
 802950a:	bf98      	it	ls
 802950c:	2001      	movls	r0, #1
 802950e:	4770      	bx	lr
 8029510:	4608      	mov	r0, r1
 8029512:	4770      	bx	lr

08029514 <_write_r>:
 8029514:	b538      	push	{r3, r4, r5, lr}
 8029516:	4d07      	ldr	r5, [pc, #28]	; (8029534 <_write_r+0x20>)
 8029518:	4604      	mov	r4, r0
 802951a:	4608      	mov	r0, r1
 802951c:	4611      	mov	r1, r2
 802951e:	2200      	movs	r2, #0
 8029520:	602a      	str	r2, [r5, #0]
 8029522:	461a      	mov	r2, r3
 8029524:	f7d8 ffd1 	bl	80024ca <_write>
 8029528:	1c43      	adds	r3, r0, #1
 802952a:	d102      	bne.n	8029532 <_write_r+0x1e>
 802952c:	682b      	ldr	r3, [r5, #0]
 802952e:	b103      	cbz	r3, 8029532 <_write_r+0x1e>
 8029530:	6023      	str	r3, [r4, #0]
 8029532:	bd38      	pop	{r3, r4, r5, pc}
 8029534:	20056dcc 	.word	0x20056dcc

08029538 <_close_r>:
 8029538:	b538      	push	{r3, r4, r5, lr}
 802953a:	4d06      	ldr	r5, [pc, #24]	; (8029554 <_close_r+0x1c>)
 802953c:	2300      	movs	r3, #0
 802953e:	4604      	mov	r4, r0
 8029540:	4608      	mov	r0, r1
 8029542:	602b      	str	r3, [r5, #0]
 8029544:	f7d8 ffdd 	bl	8002502 <_close>
 8029548:	1c43      	adds	r3, r0, #1
 802954a:	d102      	bne.n	8029552 <_close_r+0x1a>
 802954c:	682b      	ldr	r3, [r5, #0]
 802954e:	b103      	cbz	r3, 8029552 <_close_r+0x1a>
 8029550:	6023      	str	r3, [r4, #0]
 8029552:	bd38      	pop	{r3, r4, r5, pc}
 8029554:	20056dcc 	.word	0x20056dcc

08029558 <_fstat_r>:
 8029558:	b538      	push	{r3, r4, r5, lr}
 802955a:	4d07      	ldr	r5, [pc, #28]	; (8029578 <_fstat_r+0x20>)
 802955c:	2300      	movs	r3, #0
 802955e:	4604      	mov	r4, r0
 8029560:	4608      	mov	r0, r1
 8029562:	4611      	mov	r1, r2
 8029564:	602b      	str	r3, [r5, #0]
 8029566:	f7d8 ffd8 	bl	800251a <_fstat>
 802956a:	1c43      	adds	r3, r0, #1
 802956c:	d102      	bne.n	8029574 <_fstat_r+0x1c>
 802956e:	682b      	ldr	r3, [r5, #0]
 8029570:	b103      	cbz	r3, 8029574 <_fstat_r+0x1c>
 8029572:	6023      	str	r3, [r4, #0]
 8029574:	bd38      	pop	{r3, r4, r5, pc}
 8029576:	bf00      	nop
 8029578:	20056dcc 	.word	0x20056dcc

0802957c <_isatty_r>:
 802957c:	b538      	push	{r3, r4, r5, lr}
 802957e:	4d06      	ldr	r5, [pc, #24]	; (8029598 <_isatty_r+0x1c>)
 8029580:	2300      	movs	r3, #0
 8029582:	4604      	mov	r4, r0
 8029584:	4608      	mov	r0, r1
 8029586:	602b      	str	r3, [r5, #0]
 8029588:	f7d8 ffd7 	bl	800253a <_isatty>
 802958c:	1c43      	adds	r3, r0, #1
 802958e:	d102      	bne.n	8029596 <_isatty_r+0x1a>
 8029590:	682b      	ldr	r3, [r5, #0]
 8029592:	b103      	cbz	r3, 8029596 <_isatty_r+0x1a>
 8029594:	6023      	str	r3, [r4, #0]
 8029596:	bd38      	pop	{r3, r4, r5, pc}
 8029598:	20056dcc 	.word	0x20056dcc

0802959c <_lseek_r>:
 802959c:	b538      	push	{r3, r4, r5, lr}
 802959e:	4d07      	ldr	r5, [pc, #28]	; (80295bc <_lseek_r+0x20>)
 80295a0:	4604      	mov	r4, r0
 80295a2:	4608      	mov	r0, r1
 80295a4:	4611      	mov	r1, r2
 80295a6:	2200      	movs	r2, #0
 80295a8:	602a      	str	r2, [r5, #0]
 80295aa:	461a      	mov	r2, r3
 80295ac:	f7d8 ffd0 	bl	8002550 <_lseek>
 80295b0:	1c43      	adds	r3, r0, #1
 80295b2:	d102      	bne.n	80295ba <_lseek_r+0x1e>
 80295b4:	682b      	ldr	r3, [r5, #0]
 80295b6:	b103      	cbz	r3, 80295ba <_lseek_r+0x1e>
 80295b8:	6023      	str	r3, [r4, #0]
 80295ba:	bd38      	pop	{r3, r4, r5, pc}
 80295bc:	20056dcc 	.word	0x20056dcc

080295c0 <_malloc_usable_size_r>:
 80295c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80295c4:	1f18      	subs	r0, r3, #4
 80295c6:	2b00      	cmp	r3, #0
 80295c8:	bfbc      	itt	lt
 80295ca:	580b      	ldrlt	r3, [r1, r0]
 80295cc:	18c0      	addlt	r0, r0, r3
 80295ce:	4770      	bx	lr

080295d0 <_read_r>:
 80295d0:	b538      	push	{r3, r4, r5, lr}
 80295d2:	4d07      	ldr	r5, [pc, #28]	; (80295f0 <_read_r+0x20>)
 80295d4:	4604      	mov	r4, r0
 80295d6:	4608      	mov	r0, r1
 80295d8:	4611      	mov	r1, r2
 80295da:	2200      	movs	r2, #0
 80295dc:	602a      	str	r2, [r5, #0]
 80295de:	461a      	mov	r2, r3
 80295e0:	f7d8 ff56 	bl	8002490 <_read>
 80295e4:	1c43      	adds	r3, r0, #1
 80295e6:	d102      	bne.n	80295ee <_read_r+0x1e>
 80295e8:	682b      	ldr	r3, [r5, #0]
 80295ea:	b103      	cbz	r3, 80295ee <_read_r+0x1e>
 80295ec:	6023      	str	r3, [r4, #0]
 80295ee:	bd38      	pop	{r3, r4, r5, pc}
 80295f0:	20056dcc 	.word	0x20056dcc

080295f4 <_init>:
 80295f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80295f6:	bf00      	nop
 80295f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80295fa:	bc08      	pop	{r3}
 80295fc:	469e      	mov	lr, r3
 80295fe:	4770      	bx	lr

08029600 <_fini>:
 8029600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029602:	bf00      	nop
 8029604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029606:	bc08      	pop	{r3}
 8029608:	469e      	mov	lr, r3
 802960a:	4770      	bx	lr
